
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b474  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800b648  0800b648  0000c648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc00  0800bc00  0000d358  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc00  0800bc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc08  0800bc08  0000d358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc08  0800bc08  0000cc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc0c  0800bc0c  0000cc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800bc10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000358  0800bf68  0000d358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800bf68  0000d738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161ec  00000000  00000000  0000d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7a  00000000  00000000  00023574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000271f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e29  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b53a  00000000  00000000  000292b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cab4  00000000  00000000  000547f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcab7  00000000  00000000  000712a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dd5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  0016dda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00173c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000358 	.word	0x20000358
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b62c 	.word	0x0800b62c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000035c 	.word	0x2000035c
 800020c:	0800b62c 	.word	0x0800b62c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000374 	.word	0x20000374

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000374 	.word	0x20000374

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000374 	.word	0x20000374

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	200003a4 	.word	0x200003a4

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003a4 	.word	0x200003a4

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200003a4 	.word	0x200003a4

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f819 	bl	80041bc <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f002 ffbd 	bl	80041ec <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 ff80 	bl	80041ec <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f002 ff77 	bl	80041ec <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	200003ac 	.word	0x200003ac

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003ac 	.word	0x200003ac

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 ff0b 	bl	80041ec <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 ff02 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fef1 	bl	80041ec <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 fee8 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f002 fed7 	bl	80041ec <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f002 fece 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f002 febd 	bl	80041ec <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 feb4 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 fea3 	bl	80041ec <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fe9a 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 fe89 	bl	80041ec <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 fe80 	bl	80041ec <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44160000 	.word	0x44160000
 80014fc:	44960000 	.word	0x44960000
 8001500:	44e10000 	.word	0x44e10000
 8001504:	45160000 	.word	0x45160000
 8001508:	453b8000 	.word	0x453b8000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 fe5c 	bl	80041ec <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 fe53 	bl	80041ec <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 fe48 	bl	80041ec <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fe3f 	bl	80041ec <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fe34 	bl	80041ec <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 fe2b 	bl	80041ec <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 fe20 	bl	80041ec <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 fe17 	bl	80041ec <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 fe0c 	bl	80041ec <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 fe03 	bl	80041ec <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fdf8 	bl	80041ec <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 fdef 	bl	80041ec <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 fddc 	bl	80031dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f001 fea5 	bl	8003378 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f001 ff2d 	bl	800348e <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200004a4 	.word	0x200004a4

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	200003b4 	.word	0x200003b4

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003b4 	.word	0x200003b4

080016d8 <AppInit>:




void AppInit()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	AlarmInit();
 80016dc:	f7ff fcfc 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 80016e0:	f7ff ffda 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 80016e4:	f7ff fcae 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 80016e8:	f7ff fe0e 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <AppInit+0x20>)
 80016ee:	f000 fbf9 	bl	8001ee4 <TerminalInit>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000055c 	.word	0x2000055c

080016fc <AppStart>:




void AppStart()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	while(1)
	{
		if(IsTransferComplete() == true)
 8001702:	f000 fc1f 	bl	8001f44 <IsTransferComplete>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01f      	beq.n	800174c <AppStart+0x50>
		{

			bool cmd_status = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &cmd_find);
 800170c:	f000 fc26 	bl	8001f5c <GetRxBuffer>
 8001710:	2214      	movs	r2, #20
 8001712:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <AppStart+0x14c>)
 8001714:	494d      	ldr	r1, [pc, #308]	@ (800184c <AppStart+0x150>)
 8001716:	f000 fc36 	bl	8001f86 <StringCompareFromUART>
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]

			if(cmd_status == false)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f083 0301 	eor.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <AppStart+0x40>
			{
				UART_TransmitString(ErrorMSG);
 800172a:	4849      	ldr	r0, [pc, #292]	@ (8001850 <AppStart+0x154>)
 800172c:	f000 faf0 	bl	8001d10 <UART_TransmitString>
				ClearRxBuffer();
 8001730:	f000 fbea 	bl	8001f08 <ClearRxBuffer>
				progState = P_IDLE;
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <AppStart+0x158>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <AppStart+0x50>
			}
			else
			{
				ExecuteUARTCommand(cmd_find);
 800173c:	4b42      	ldr	r3, [pc, #264]	@ (8001848 <AppStart+0x14c>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fa0a 	bl	8001b5c <ExecuteUARTCommand>
				ClearRxBuffer();
 8001748:	f000 fbde 	bl	8001f08 <ClearRxBuffer>
			}
		}

			switch(progState)
 800174c:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <AppStart+0x158>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d014      	beq.n	800177e <AppStart+0x82>
 8001754:	2b02      	cmp	r3, #2
 8001756:	dcd4      	bgt.n	8001702 <AppStart+0x6>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d070      	beq.n	800183e <AppStart+0x142>
 800175c:	2b01      	cmp	r3, #1
 800175e:	d1d0      	bne.n	8001702 <AppStart+0x6>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 8001760:	483d      	ldr	r0, [pc, #244]	@ (8001858 <AppStart+0x15c>)
 8001762:	f000 fad5 	bl	8001d10 <UART_TransmitString>
					SetIndicatorLEDs(0); //resets the indicator
 8001766:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800185c <AppStart+0x160>
 800176a:	f7ff fc95 	bl	8001098 <SetIndicatorLEDs>
					progState = P_IDLE;
 800176e:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <AppStart+0x158>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
					HelpSendUART(len_of_array); //Sends the lists of commands
 8001774:	2314      	movs	r3, #20
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa9e 	bl	8001cb8 <HelpSendUART>
					break;
 800177c:	e062      	b.n	8001844 <AppStart+0x148>

					break;

				case P_WORK:

					PPM = ReadGasSensor();
 800177e:	f7ff fd7c 	bl	800127a <ReadGasSensor>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	4b36      	ldr	r3, [pc, #216]	@ (8001860 <AppStart+0x164>)
 8001788:	edc3 7a00 	vstr	s15, [r3]

					if(PPM < 400)
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <AppStart+0x164>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001864 <AppStart+0x168>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d503      	bpl.n	80017a8 <AppStart+0xac>
					{
						led_cnt.correct_led = false;
 80017a0:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <AppStart+0x16c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	735a      	strb	r2, [r3, #13]
 80017a6:	e002      	b.n	80017ae <AppStart+0xb2>
					}
					else
					{
						led_cnt.correct_led  = true;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <AppStart+0x16c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	735a      	strb	r2, [r3, #13]
					}

					if(led_cnt.led_overflow_flag == true)
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <AppStart+0x16c>)
 80017b0:	7b1b      	ldrb	r3, [r3, #12]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <AppStart+0xf0>
					{
						switch(ledState)
 80017b8:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <AppStart+0x170>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d00e      	beq.n	80017de <AppStart+0xe2>
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	dc10      	bgt.n	80017e6 <AppStart+0xea>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <AppStart+0xd2>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d004      	beq.n	80017d6 <AppStart+0xda>
 80017cc:	e00b      	b.n	80017e6 <AppStart+0xea>
						{
							case LED_OFF:

								LED_Drive(false);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fda8 	bl	8001324 <LED_Drive>

								break;
 80017d4:	e007      	b.n	80017e6 <AppStart+0xea>

							case LED_ON_CORECT:

								LED_Drive(true);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fda4 	bl	8001324 <LED_Drive>

								break;
 80017dc:	e003      	b.n	80017e6 <AppStart+0xea>

							case LED_ON_INCORECT:

								LED_Drive(true);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fda0 	bl	8001324 <LED_Drive>

								break;
 80017e4:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <AppStart+0x16c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <AppStart+0x174>)
 80017ee:	7b9b      	ldrb	r3, [r3, #14]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d025      	beq.n	8001842 <AppStart+0x146>
					{
						UART_TransmitString(PPM_MSG);
 80017f6:	481f      	ldr	r0, [pc, #124]	@ (8001874 <AppStart+0x178>)
 80017f8:	f000 fa8a 	bl	8001d10 <UART_TransmitString>
						UART_TransmitFloat(PPM);
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <AppStart+0x164>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f000 fac7 	bl	8001d98 <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <AppStart+0x164>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fc40 	bl	8001098 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <AppStart+0x164>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001878 <AppStart+0x17c>
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	dd04      	ble.n	8001836 <AppStart+0x13a>
						{
							UART_TransmitString(AlertMSG);
 800182c:	4813      	ldr	r0, [pc, #76]	@ (800187c <AppStart+0x180>)
 800182e:	f000 fa6f 	bl	8001d10 <UART_TransmitString>
							AlarmON();
 8001832:	f7ff fc5f 	bl	80010f4 <AlarmON>
						}
						prog_cnt.update_param_flag = false;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <AppStart+0x174>)
 8001838:	2200      	movs	r2, #0
 800183a:	739a      	strb	r2, [r3, #14]
					}
					break;
 800183c:	e001      	b.n	8001842 <AppStart+0x146>
					break;
 800183e:	bf00      	nop
 8001840:	e75f      	b.n	8001702 <AppStart+0x6>
					break;
 8001842:	bf00      	nop
		if(IsTransferComplete() == true)
 8001844:	e75d      	b.n	8001702 <AppStart+0x6>
 8001846:	bf00      	nop
 8001848:	200003cc 	.word	0x200003cc
 800184c:	20000130 	.word	0x20000130
 8001850:	200000dc 	.word	0x200000dc
 8001854:	20000180 	.word	0x20000180
 8001858:	20000008 	.word	0x20000008
 800185c:	00000000 	.word	0x00000000
 8001860:	200003c8 	.word	0x200003c8
 8001864:	43c80000 	.word	0x43c80000
 8001868:	2000010c 	.word	0x2000010c
 800186c:	200003cf 	.word	0x200003cf
 8001870:	2000011c 	.word	0x2000011c
 8001874:	20000028 	.word	0x20000028
 8001878:	45098000 	.word	0x45098000
 800187c:	20000030 	.word	0x20000030

08001880 <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a96      	ldr	r2, [pc, #600]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 8156 	bne.w	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2be>
	{
		SysTickFlag = true;
 8001892:	4b95      	ldr	r3, [pc, #596]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]

		//Controling room clearing mechanism////////////////////////////////
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 8001898:	4b94      	ldr	r3, [pc, #592]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800189a:	7bdb      	ldrb	r3, [r3, #15]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b93      	ldr	r3, [pc, #588]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018a0:	7c1b      	ldrb	r3, [r3, #16]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d310      	bcc.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>
 80018a6:	4b91      	ldr	r3, [pc, #580]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018a8:	7c5b      	ldrb	r3, [r3, #17]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			AlarmOFF();
 80018b0:	f7ff fc2a 	bl	8001108 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80018b4:	488e      	ldr	r0, [pc, #568]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018b6:	f000 fa2b 	bl	8001d10 <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80018ba:	4b8c      	ldr	r3, [pc, #560]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80018c0:	4b8a      	ldr	r3, [pc, #552]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	745a      	strb	r2, [r3, #17]
 80018c6:	e006      	b.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x56>
		}
		else
		{
			prog_cnt.cnt_clear_room++;
 80018c8:	4b88      	ldr	r3, [pc, #544]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ca:	7bdb      	ldrb	r3, [r3, #15]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b86      	ldr	r3, [pc, #536]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018d4:	73da      	strb	r2, [r3, #15]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80018d6:	4b87      	ldr	r3, [pc, #540]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d042      	beq.n	8001964 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80018de:	2b02      	cmp	r3, #2
 80018e0:	dc5d      	bgt.n	800199e <HAL_TIM_PeriodElapsedCallback+0x11e>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_TIM_PeriodElapsedCallback+0x6c>
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d024      	beq.n	8001934 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80018ea:	e058      	b.n	800199e <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 80018ec:	4b82      	ldr	r3, [pc, #520]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b80      	ldr	r3, [pc, #512]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018f8:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 80018fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018fc:	889b      	ldrh	r3, [r3, #4]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b7d      	ldr	r3, [pc, #500]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001902:	895b      	ldrh	r3, [r3, #10]
 8001904:	429a      	cmp	r2, r3
 8001906:	d345      	bcc.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x114>
				{

					led_cnt.led_overflow_flag = true;
 8001908:	4b7b      	ldr	r3, [pc, #492]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800190a:	2201      	movs	r2, #1
 800190c:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 800190e:	4b7a      	ldr	r3, [pc, #488]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001910:	7b5b      	ldrb	r3, [r3, #13]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_TIM_PeriodElapsedCallback+0xa0>
					{
						ledState =  LED_ON_CORECT;
 8001918:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e002      	b.n	8001926 <HAL_TIM_PeriodElapsedCallback+0xa6>
					}
					else
					{
						ledState = LED_ON_INCORECT;
 8001920:	4b74      	ldr	r3, [pc, #464]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 8001926:	4b74      	ldr	r3, [pc, #464]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001928:	2200      	movs	r2, #0
 800192a:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 800192c:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800192e:	2201      	movs	r2, #1
 8001930:	731a      	strb	r2, [r3, #12]
				}

				break;
 8001932:	e02f      	b.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x114>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001934:	4b70      	ldr	r3, [pc, #448]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001940:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 8001942:	4b6d      	ldr	r3, [pc, #436]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800194a:	88db      	ldrh	r3, [r3, #6]
 800194c:	429a      	cmp	r2, r3
 800194e:	d323      	bcc.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					led_cnt.cnt_led_correct_on = 0;
 8001950:	4b69      	ldr	r3, [pc, #420]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 8001956:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001958:	2201      	movs	r2, #1
 800195a:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 800195c:	4b65      	ldr	r3, [pc, #404]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001962:	e019      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x118>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001964:	4b64      	ldr	r3, [pc, #400]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001966:	885b      	ldrh	r3, [r3, #2]
 8001968:	b29b      	uxth	r3, r3
 800196a:	3301      	adds	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b62      	ldr	r3, [pc, #392]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001970:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 8001972:	4b61      	ldr	r3, [pc, #388]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b5f      	ldr	r3, [pc, #380]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800197a:	891b      	ldrh	r3, [r3, #8]
 800197c:	429a      	cmp	r2, r3
 800197e:	d30d      	bcc.n	800199c <HAL_TIM_PeriodElapsedCallback+0x11c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 8001980:	4b5d      	ldr	r3, [pc, #372]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001982:	2200      	movs	r2, #0
 8001984:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 8001986:	4b5c      	ldr	r3, [pc, #368]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001988:	2201      	movs	r2, #1
 800198a:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 800198c:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001992:	e003      	b.n	800199c <HAL_TIM_PeriodElapsedCallback+0x11c>
				break;
 8001994:	bf00      	nop
 8001996:	e002      	b.n	800199e <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 8001998:	bf00      	nop
 800199a:	e000      	b.n	800199e <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 800199c:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019a0:	891b      	ldrh	r3, [r3, #8]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d014      	beq.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x152>
		{
			prog_cnt.cnt_ref_rate++;
 80019a8:	4b50      	ldr	r3, [pc, #320]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019aa:	899b      	ldrh	r3, [r3, #12]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019b4:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80019b6:	4b4d      	ldr	r3, [pc, #308]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019b8:	899b      	ldrh	r3, [r3, #12]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019be:	891b      	ldrh	r3, [r3, #8]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d305      	bcc.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				prog_cnt.update_param_flag = true;
 80019c6:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80019cc:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80019d2:	4845      	ldr	r0, [pc, #276]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80019d4:	f7ff fe6e 	bl	80016b4 <ReadSignal>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b43      	ldr	r3, [pc, #268]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019de:	719a      	strb	r2, [r3, #6]
		switch(countState)
 80019e0:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d045      	beq.n	8001a74 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f300 80a5 	bgt.w	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x178>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d019      	beq.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x1aa>
 80019f6:	e09f      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019fa:	799b      	ldrb	r3, [r3, #6]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8097 	beq.w	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8001a04:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a06:	79db      	ldrb	r3, [r3, #7]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8091 	beq.w	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b2>
				{
					prog_cnt.cnt_button = 0;
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001a16:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 8001a1c:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 8001a22:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001a28:	e083      	b.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b2>

			case C_START:

				prog_cnt.cnt_button++;
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a2c:	885b      	ldrh	r3, [r3, #2]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a36:	805a      	strh	r2, [r3, #2]
				//UART_TransmitFloat((float)prog_cnt.cnt_button);
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a3a:	885b      	ldrh	r3, [r3, #2]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d303      	bcc.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x1ce>
				{
					countState = C_END;
 8001a46:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a48:	2202      	movs	r2, #2
 8001a4a:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001a4c:	e073      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b6>
					if(((prog_cnt.read_button_flag) == true))
 8001a4e:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a50:	799b      	ldrb	r3, [r3, #6]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d06e      	beq.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b6>
						prog_cnt.cnt_button = 0;
 8001a58:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a6a:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
				break;
 8001a72:	e060      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b6>

			case C_END:

				prog_cnt.cnt_button = 0;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d84c      	bhi.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001aa5 	.word	0x08001aa5
 8001a94:	08001ab9 	.word	0x08001ab9
 8001a98:	08001acf 	.word	0x08001acf
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b11 	.word	0x08001b11

						break;

					case 1:

						progState = P_WORK;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S1WorkStateMSG);
 8001aaa:	4816      	ldr	r0, [pc, #88]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001aac:	f000 f930 	bl	8001d10 <UART_TransmitString>
						prog_cnt.ref_rate = 100;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ab2:	2264      	movs	r2, #100	@ 0x64
 8001ab4:	811a      	strh	r2, [r3, #8]

						break;
 8001ab6:	e032      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 2:

						progState = P_WORK;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S3WorkStateMSG);
 8001abe:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ac0:	f000 f926 	bl	8001d10 <UART_TransmitString>
						prog_cnt.ref_rate = 300;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aca:	811a      	strh	r2, [r3, #8]

						break;
 8001acc:	e027      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 3:

						progState = P_WORK;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S5WorkStateMSG);
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ad6:	f000 f91b 	bl	8001d10 <UART_TransmitString>
						prog_cnt.ref_rate = 500;
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001adc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ae0:	811a      	strh	r2, [r3, #8]

						break;
 8001ae2:	e01c      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001ae4:	20000510 	.word	0x20000510
 8001ae8:	200003c4 	.word	0x200003c4
 8001aec:	2000011c 	.word	0x2000011c
 8001af0:	20000054 	.word	0x20000054
 8001af4:	200003cf 	.word	0x200003cf
 8001af8:	2000010c 	.word	0x2000010c
 8001afc:	200003ce 	.word	0x200003ce
 8001b00:	20000180 	.word	0x20000180
 8001b04:	2000007c 	.word	0x2000007c
 8001b08:	20000094 	.word	0x20000094
 8001b0c:	200000ac 	.word	0x200000ac
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	811a      	strh	r2, [r3, #8]

						break;
 8001b1c:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	71da      	strb	r2, [r3, #7]

				countState = C_IDLE;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
				break;
 8001b30:	e002      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b36:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000180 	.word	0x20000180
 8001b50:	2000011c 	.word	0x2000011c
 8001b54:	200003ce 	.word	0x200003ce
 8001b58:	200003c4 	.word	0x200003c4

08001b5c <ExecuteUARTCommand>:

void ExecuteUARTCommand(uint8_t cmd_index)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	uartCmdState = cmd_index;
 8001b66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca0 <ExecuteUARTCommand+0x144>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	7013      	strb	r3, [r2, #0]

	switch(uartCmdState)
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca0 <ExecuteUARTCommand+0x144>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b14      	cmp	r3, #20
 8001b72:	f200 8090 	bhi.w	8001c96 <ExecuteUARTCommand+0x13a>
 8001b76:	a201      	add	r2, pc, #4	@ (adr r2, 8001b7c <ExecuteUARTCommand+0x20>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bd1 	.word	0x08001bd1
 8001b80:	08001bd9 	.word	0x08001bd9
 8001b84:	08001be7 	.word	0x08001be7
 8001b88:	08001bf7 	.word	0x08001bf7
 8001b8c:	08001c07 	.word	0x08001c07
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c27 	.word	0x08001c27
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c37 	.word	0x08001c37
 8001ba0:	08001c3d 	.word	0x08001c3d
 8001ba4:	08001c43 	.word	0x08001c43
 8001ba8:	08001c4b 	.word	0x08001c4b
 8001bac:	08001c53 	.word	0x08001c53
 8001bb0:	08001c5b 	.word	0x08001c5b
 8001bb4:	08001c63 	.word	0x08001c63
 8001bb8:	08001c6b 	.word	0x08001c6b
 8001bbc:	08001c73 	.word	0x08001c73
 8001bc0:	08001c7b 	.word	0x08001c7b
 8001bc4:	08001c83 	.word	0x08001c83
 8001bc8:	08001c8b 	.word	0x08001c8b
 8001bcc:	08001c95 	.word	0x08001c95
	{
		case cmd_0:

			progState = P_IDLE_START;
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <ExecuteUARTCommand+0x148>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]

			break;
 8001bd6:	e05e      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_1:

			progState = P_WORK;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <ExecuteUARTCommand+0x148>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 100;
 8001bde:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <ExecuteUARTCommand+0x14c>)
 8001be0:	2264      	movs	r2, #100	@ 0x64
 8001be2:	811a      	strh	r2, [r3, #8]

			break;
 8001be4:	e057      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_2:

			progState = P_WORK;
 8001be6:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <ExecuteUARTCommand+0x148>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 300;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <ExecuteUARTCommand+0x14c>)
 8001bee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bf2:	811a      	strh	r2, [r3, #8]


			break;
 8001bf4:	e04f      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_3:

			progState = P_WORK;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <ExecuteUARTCommand+0x148>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 500;
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <ExecuteUARTCommand+0x14c>)
 8001bfe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c02:	811a      	strh	r2, [r3, #8]

			break;
 8001c04:	e047      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_4:

			PPM = ReadGasSensor();
 8001c06:	f7ff fb38 	bl	800127a <ReadGasSensor>
 8001c0a:	eef0 7a40 	vmov.f32	s15, s0
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <ExecuteUARTCommand+0x150>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]

			break;
 8001c14:	e03f      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_5:

			UART_TransmitFloat(PPM);
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <ExecuteUARTCommand+0x150>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c20:	f000 f8ba 	bl	8001d98 <UART_TransmitFloat>

			break;
 8001c24:	e037      	b.n	8001c96 <ExecuteUARTCommand+0x13a>


		case cmd_6:

			UART_TransmitString(FAN_ON);
 8001c26:	4822      	ldr	r0, [pc, #136]	@ (8001cb0 <ExecuteUARTCommand+0x154>)
 8001c28:	f000 f872 	bl	8001d10 <UART_TransmitString>

			break;
 8001c2c:	e033      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_7:

			UART_TransmitString(FAN_OFF);
 8001c2e:	4821      	ldr	r0, [pc, #132]	@ (8001cb4 <ExecuteUARTCommand+0x158>)
 8001c30:	f000 f86e 	bl	8001d10 <UART_TransmitString>

			break;
 8001c34:	e02f      	b.n	8001c96 <ExecuteUARTCommand+0x13a>


		case cmd_8:

			AlarmON();
 8001c36:	f7ff fa5d 	bl	80010f4 <AlarmON>

			break;
 8001c3a:	e02c      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_9:

			AlarmOFF();
 8001c3c:	f7ff fa64 	bl	8001108 <AlarmOFF>

			break;
 8001c40:	e029      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_10:

			LED_Drive(true);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff fb6e 	bl	8001324 <LED_Drive>

			break;
 8001c48:	e025      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_11:

			LED_Drive(false);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff fb6a 	bl	8001324 <LED_Drive>

			break;
 8001c50:	e021      	b.n	8001c96 <ExecuteUARTCommand+0x13a>


		case cmd_12:

			SetIndicatorLEDsNum(0);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fa30 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c58:	e01d      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_13:

			SetIndicatorLEDsNum(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff fa2c 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c60:	e019      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_14:

			SetIndicatorLEDsNum(2);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f7ff fa28 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c68:	e015      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_15:

			SetIndicatorLEDsNum(3);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f7ff fa24 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c70:	e011      	b.n	8001c96 <ExecuteUARTCommand+0x13a>


		case cmd_16:

			SetIndicatorLEDsNum(4);
 8001c72:	2004      	movs	r0, #4
 8001c74:	f7ff fa20 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c78:	e00d      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_17:

			SetIndicatorLEDsNum(5);
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f7ff fa1c 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c80:	e009      	b.n	8001c96 <ExecuteUARTCommand+0x13a>


		case cmd_18:

			SetIndicatorLEDsNum(6);
 8001c82:	2006      	movs	r0, #6
 8001c84:	f7ff fa18 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c88:	e005      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_19:
			HelpSendUART(len_of_array);
 8001c8a:	2314      	movs	r3, #20
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f813 	bl	8001cb8 <HelpSendUART>

			break;
 8001c92:	e000      	b.n	8001c96 <ExecuteUARTCommand+0x13a>

		case cmd_20:
			// reserved

			break;
 8001c94:	bf00      	nop
	}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200003d0 	.word	0x200003d0
 8001ca4:	20000180 	.word	0x20000180
 8001ca8:	2000011c 	.word	0x2000011c
 8001cac:	200003c8 	.word	0x200003c8
 8001cb0:	200000c4 	.word	0x200000c4
 8001cb4:	200000d0 	.word	0x200000d0

08001cb8 <HelpSendUART>:

void HelpSendUART(uint16_t total_num_of_elements)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n=================  UART Commands =================\n");
 8001cc6:	480e      	ldr	r0, [pc, #56]	@ (8001d00 <HelpSendUART+0x48>)
 8001cc8:	f000 f822 	bl	8001d10 <UART_TransmitString>
	while(iterator < total_num_of_elements)
 8001ccc:	e00c      	b.n	8001ce8 <HelpSendUART+0x30>
	{
		UART_TransmitStringWithoutNewLine("\t");
 8001cce:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <HelpSendUART+0x4c>)
 8001cd0:	f000 f84c 	bl	8001d6c <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(cmdStrings[iterator]);
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <HelpSendUART+0x50>)
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f817 	bl	8001d10 <UART_TransmitString>

		iterator++;
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	81fb      	strh	r3, [r7, #14]
	while(iterator < total_num_of_elements)
 8001ce8:	89fa      	ldrh	r2, [r7, #14]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3ee      	bcc.n	8001cce <HelpSendUART+0x16>
	}
	UART_TransmitString("\n==================================================\n");
 8001cf0:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <HelpSendUART+0x54>)
 8001cf2:	f000 f80d 	bl	8001d10 <UART_TransmitString>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	0800b730 	.word	0x0800b730
 8001d04:	0800b768 	.word	0x0800b768
 8001d08:	20000130 	.word	0x20000130
 8001d0c:	0800b76c 	.word	0x0800b76c

08001d10 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7fe fad9 	bl	80002d0 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	480e      	ldr	r0, [pc, #56]	@ (8001d64 <UART_TransmitString+0x54>)
 8001d2a:	f003 fe77 	bl	8005a1c <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <UART_TransmitString+0x58>)
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4611      	mov	r1, r2
 8001d38:	8019      	strh	r1, [r3, #0]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	0c12      	lsrs	r2, r2, #16
 8001d3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fac3 	bl	80002d0 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f107 010c 	add.w	r1, r7, #12
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <UART_TransmitString+0x54>)
 8001d58:	f003 fe60 	bl	8005a1c <HAL_UART_Transmit>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000055c 	.word	0x2000055c
 8001d68:	0800b7a4 	.word	0x0800b7a4

08001d6c <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe faab 	bl	80002d0 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <UART_TransmitStringWithoutNewLine+0x28>)
 8001d86:	f003 fe49 	bl	8005a1c <HAL_UART_Transmit>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000055c 	.word	0x2000055c

08001d98 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b090      	sub	sp, #64	@ 0x40
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fc00 	bl	80005a8 <__aeabi_f2d>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	f107 000c 	add.w	r0, r7, #12
 8001db0:	490a      	ldr	r1, [pc, #40]	@ (8001ddc <UART_TransmitFloat+0x44>)
 8001db2:	f005 ffef 	bl	8007d94 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa88 	bl	80002d0 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f107 010c 	add.w	r1, r7, #12
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <UART_TransmitFloat+0x48>)
 8001dce:	f003 fe25 	bl	8005a1c <HAL_UART_Transmit>
}
 8001dd2:	bf00      	nop
 8001dd4:	3740      	adds	r7, #64	@ 0x40
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	0800b7a8 	.word	0x0800b7a8
 8001de0:	2000055c 	.word	0x2000055c

08001de4 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 8001dec:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <TerminalHandler+0xe4>)
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4611      	mov	r1, r2
 8001df6:	8019      	strh	r1, [r3, #0]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	0c12      	lsrs	r2, r2, #16
 8001dfc:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 8001dfe:	4a33      	ldr	r2, [pc, #204]	@ (8001ecc <TerminalHandler+0xe8>)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e08:	6018      	str	r0, [r3, #0]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	7019      	strb	r1, [r3, #0]

	if(huart->Instance == USART1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <TerminalHandler+0xec>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d14d      	bne.n	8001eb4 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001e18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001e20:	f000 f872 	bl	8001f08 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b0d      	cmp	r3, #13
 8001e2a:	d02f      	beq.n	8001e8c <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d117      	bne.n	8001e64 <TerminalHandler+0x80>
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <TerminalHandler+0xf8>)
 8001e44:	2100      	movs	r1, #0
 8001e46:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001e48:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e52:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001e54:	f107 010c 	add.w	r1, r7, #12
 8001e58:	230a      	movs	r3, #10
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f003 fddd 	bl	8005a1c <HAL_UART_Transmit>
 8001e62:	e00c      	b.n	8001e7e <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001e6c:	7819      	ldrb	r1, [r3, #0]
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <TerminalHandler+0xf8>)
 8001e70:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e7c:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 8001e7e:	230a      	movs	r3, #10
 8001e80:	2201      	movs	r2, #1
 8001e82:	4915      	ldr	r1, [pc, #84]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f003 fdc9 	bl	8005a1c <HAL_UART_Transmit>
 8001e8a:	e013      	b.n	8001eb4 <TerminalHandler+0xd0>
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001e94:	7819      	ldrb	r1, [r3, #0]
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <TerminalHandler+0xf8>)
 8001e98:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <TerminalHandler+0xf0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <TerminalHandler+0xfc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 8001ea6:	f107 0114 	add.w	r1, r7, #20
 8001eaa:	230a      	movs	r3, #10
 8001eac:	2203      	movs	r2, #3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f003 fdb4 	bl	8005a1c <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <TerminalHandler+0xf4>)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f003 fe32 	bl	8005b22 <HAL_UART_Receive_IT>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800b7b0 	.word	0x0800b7b0
 8001ecc:	0800b7b4 	.word	0x0800b7b4
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	200003d1 	.word	0x200003d1
 8001ed8:	200003d4 	.word	0x200003d4
 8001edc:	200003d8 	.word	0x200003d8
 8001ee0:	200004a0 	.word	0x200004a0

08001ee4 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 8001eec:	2201      	movs	r2, #1
 8001eee:	4905      	ldr	r1, [pc, #20]	@ (8001f04 <TerminalInit+0x20>)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f003 fe16 	bl	8005b22 <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001ef6:	f000 f807 	bl	8001f08 <ClearRxBuffer>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003d4 	.word	0x200003d4

08001f08 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 200; counter++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	e007      	b.n	8001f24 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001f14:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <ClearRxBuffer+0x34>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 200; counter++)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3301      	adds	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f28:	ddf4      	ble.n	8001f14 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <ClearRxBuffer+0x38>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	200003d8 	.word	0x200003d8
 8001f40:	200004a0 	.word	0x200004a0

08001f44 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <IsTransferComplete+0x14>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200004a0 	.word	0x200004a0

08001f5c <GetRxBuffer>:

char* GetRxBuffer()
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001f60:	4b02      	ldr	r3, [pc, #8]	@ (8001f6c <GetRxBuffer+0x10>)
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	200003d8 	.word	0x200003d8

08001f70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff33 	bl	8001de4 <TerminalHandler>

}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f005 ff64 	bl	8007e6c <strupr>
 8001fa4:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 8001fa6:	e013      	b.n	8001fd0 <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 8001fa8:	8afb      	ldrh	r3, [r7, #22]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7fe f92b 	bl	8000210 <strcmp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <StringCompareFromUART+0x44>
	        {
	            *index = count;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	8afa      	ldrh	r2, [r7, #22]
 8001fc4:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 8001fd0:	8afa      	ldrh	r2, [r7, #22]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d205      	bcs.n	8001fe4 <StringCompareFromUART+0x5e>
 8001fd8:	7d7b      	ldrb	r3, [r7, #21]
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e1      	bne.n	8001fa8 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001fe4:	7d7b      	ldrb	r3, [r7, #21]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 8001fea:	2301      	movs	r3, #1
 8001fec:	753b      	strb	r3, [r7, #20]
 8001fee:	e001      	b.n	8001ff4 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8001ff4:	7d3b      	ldrb	r3, [r7, #20]

}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002004:	f001 f849 	bl	800309a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002008:	f000 f816 	bl	8002038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200c:	f000 f94c 	bl	80022a8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002010:	f000 f882 	bl	8002118 <MX_ADC3_Init>
  MX_CRC_Init();
 8002014:	f000 f8d2 	bl	80021bc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8002018:	f000 f916 	bl	8002248 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 800201c:	f000 f8f0 	bl	8002200 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <main+0x34>)
 8002022:	f003 fa2f 	bl	8005484 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 8002026:	f7ff fb57 	bl	80016d8 <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 800202a:	f7ff fb67 	bl	80016fc <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800202e:	bf00      	nop
 8002030:	e7fd      	b.n	800202e <main+0x2e>
 8002032:	bf00      	nop
 8002034:	20000510 	.word	0x20000510

08002038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b094      	sub	sp, #80	@ 0x50
 800203c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	2230      	movs	r2, #48	@ 0x30
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f005 ff07 	bl	8007e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800205c:	f002 f8e0 	bl	8004220 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <SystemClock_Config+0xd8>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <SystemClock_Config+0xd8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <SystemClock_Config+0xd8>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002078:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <SystemClock_Config+0xdc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a25      	ldr	r2, [pc, #148]	@ (8002114 <SystemClock_Config+0xdc>)
 800207e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <SystemClock_Config+0xdc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002090:	2301      	movs	r3, #1
 8002092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209a:	2302      	movs	r3, #2
 800209c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800209e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020a4:	2319      	movs	r3, #25
 80020a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80020a8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80020b2:	2309      	movs	r3, #9
 80020b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b6:	f107 0320 	add.w	r3, r7, #32
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 f910 	bl	80042e0 <HAL_RCC_OscConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020c6:	f000 fd4b 	bl	8002b60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020ca:	f002 f8b9 	bl	8004240 <HAL_PWREx_EnableOverDrive>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80020d4:	f000 fd44 	bl	8002b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020dc:	2302      	movs	r3, #2
 80020de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	2106      	movs	r1, #6
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fb96 	bl	8004828 <HAL_RCC_ClockConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002102:	f000 fd2d 	bl	8002b60 <Error_Handler>
  }
}
 8002106:	bf00      	nop
 8002108:	3750      	adds	r7, #80	@ 0x50
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800211e:	463b      	mov	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800212c:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <MX_ADC3_Init+0x9c>)
 800212e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002132:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002136:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002138:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800214a:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002152:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002154:	2200      	movs	r2, #0
 8002156:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002158:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <MX_ADC3_Init+0xa0>)
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002166:	2201      	movs	r2, #1
 8002168:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <MX_ADC3_Init+0x98>)
 8002174:	2201      	movs	r2, #1
 8002176:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800217a:	f000 ffeb 	bl	8003154 <HAL_ADC_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002184:	f000 fcec 	bl	8002b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002188:	2300      	movs	r3, #0
 800218a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800218c:	2301      	movs	r3, #1
 800218e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <MX_ADC3_Init+0x98>)
 800219a:	f001 f985 	bl	80034a8 <HAL_ADC_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80021a4:	f000 fcdc 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200004a4 	.word	0x200004a4
 80021b4:	40012200 	.word	0x40012200
 80021b8:	0f000001 	.word	0x0f000001

080021bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021c2:	4a0e      	ldr	r2, [pc, #56]	@ (80021fc <MX_CRC_Init+0x40>)
 80021c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021c6:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021e4:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <MX_CRC_Init+0x3c>)
 80021e6:	f001 fcc1 	bl	8003b6c <HAL_CRC_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80021f0:	f000 fcb6 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004ec 	.word	0x200004ec
 80021fc:	40023000 	.word	0x40023000

08002200 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <MX_TIM11_Init+0x40>)
 8002206:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <MX_TIM11_Init+0x44>)
 8002208:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <MX_TIM11_Init+0x40>)
 800220c:	f640 026f 	movw	r2, #2159	@ 0x86f
 8002210:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <MX_TIM11_Init+0x40>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <MX_TIM11_Init+0x40>)
 800221a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800221e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <MX_TIM11_Init+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <MX_TIM11_Init+0x40>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <MX_TIM11_Init+0x40>)
 800222e:	f003 f8d1 	bl	80053d4 <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002238:	f000 fc92 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000510 	.word	0x20000510
 8002244:	40014800 	.word	0x40014800

08002248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 800224e:	4a15      	ldr	r2, [pc, #84]	@ (80022a4 <MX_USART1_UART_Init+0x5c>)
 8002250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	@ (80022a0 <MX_USART1_UART_Init+0x58>)
 800228c:	f003 fb78 	bl	8005980 <HAL_UART_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002296:	f000 fc63 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000055c 	.word	0x2000055c
 80022a4:	40011000 	.word	0x40011000

080022a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	@ 0x40
 80022ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022be:	4baf      	ldr	r3, [pc, #700]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4aae      	ldr	r2, [pc, #696]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4bac      	ldr	r3, [pc, #688]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022d6:	4ba9      	ldr	r3, [pc, #676]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4aa8      	ldr	r2, [pc, #672]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4ba6      	ldr	r3, [pc, #664]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4ba3      	ldr	r3, [pc, #652]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4aa2      	ldr	r2, [pc, #648]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4ba0      	ldr	r3, [pc, #640]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b9d      	ldr	r3, [pc, #628]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a9c      	ldr	r2, [pc, #624]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b9a      	ldr	r3, [pc, #616]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	4b97      	ldr	r3, [pc, #604]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a96      	ldr	r2, [pc, #600]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b94      	ldr	r3, [pc, #592]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b91      	ldr	r3, [pc, #580]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a90      	ldr	r2, [pc, #576]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b8e      	ldr	r3, [pc, #568]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800234e:	4b8b      	ldr	r3, [pc, #556]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a8a      	ldr	r2, [pc, #552]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b88      	ldr	r3, [pc, #544]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002366:	4b85      	ldr	r3, [pc, #532]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a84      	ldr	r2, [pc, #528]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b82      	ldr	r3, [pc, #520]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800237e:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a7e      	ldr	r2, [pc, #504]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002396:	4b79      	ldr	r3, [pc, #484]	@ (800257c <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a78      	ldr	r2, [pc, #480]	@ (800257c <MX_GPIO_Init+0x2d4>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b76      	ldr	r3, [pc, #472]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	4b73      	ldr	r3, [pc, #460]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a72      	ldr	r2, [pc, #456]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80023b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b70      	ldr	r3, [pc, #448]	@ (800257c <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2110      	movs	r1, #16
 80023ca:	486d      	ldr	r0, [pc, #436]	@ (8002580 <MX_GPIO_Init+0x2d8>)
 80023cc:	f001 ff0e 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2120      	movs	r1, #32
 80023d4:	486b      	ldr	r0, [pc, #428]	@ (8002584 <MX_GPIO_Init+0x2dc>)
 80023d6:	f001 ff09 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	210d      	movs	r1, #13
 80023de:	486a      	ldr	r0, [pc, #424]	@ (8002588 <MX_GPIO_Init+0x2e0>)
 80023e0:	f001 ff04 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2108      	movs	r1, #8
 80023e8:	4868      	ldr	r0, [pc, #416]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80023ea:	f001 feff 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023f4:	4864      	ldr	r0, [pc, #400]	@ (8002588 <MX_GPIO_Init+0x2e0>)
 80023f6:	f001 fef9 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8002400:	4863      	ldr	r0, [pc, #396]	@ (8002590 <MX_GPIO_Init+0x2e8>)
 8002402:	f001 fef3 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2140      	movs	r1, #64	@ 0x40
 800240a:	4862      	ldr	r0, [pc, #392]	@ (8002594 <MX_GPIO_Init+0x2ec>)
 800240c:	f001 feee 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	21c8      	movs	r1, #200	@ 0xc8
 8002414:	4860      	ldr	r0, [pc, #384]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 8002416:	f001 fee9 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800241a:	2310      	movs	r3, #16
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242a:	230e      	movs	r3, #14
 800242c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002432:	4619      	mov	r1, r3
 8002434:	4859      	ldr	r0, [pc, #356]	@ (800259c <MX_GPIO_Init+0x2f4>)
 8002436:	f001 fd15 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800243a:	2308      	movs	r3, #8
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4853      	ldr	r0, [pc, #332]	@ (800259c <MX_GPIO_Init+0x2f4>)
 800244e:	f001 fd09 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002452:	2304      	movs	r3, #4
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002462:	2309      	movs	r3, #9
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	484b      	ldr	r0, [pc, #300]	@ (800259c <MX_GPIO_Init+0x2f4>)
 800246e:	f001 fcf9 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002472:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002484:	230b      	movs	r3, #11
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4842      	ldr	r0, [pc, #264]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 8002490:	f001 fce8 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002494:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002498:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024a6:	230c      	movs	r3, #12
 80024a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	483a      	ldr	r0, [pc, #232]	@ (800259c <MX_GPIO_Init+0x2f4>)
 80024b2:	f001 fcd7 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80024b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024bc:	2312      	movs	r3, #18
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c8:	2304      	movs	r3, #4
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	482b      	ldr	r0, [pc, #172]	@ (8002580 <MX_GPIO_Init+0x2d8>)
 80024d4:	f001 fcc6 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 80024d8:	2310      	movs	r3, #16
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024e0:	2302      	movs	r3, #2
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4824      	ldr	r0, [pc, #144]	@ (8002580 <MX_GPIO_Init+0x2d8>)
 80024f0:	f001 fcb8 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002504:	2308      	movs	r3, #8
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	481d      	ldr	r0, [pc, #116]	@ (8002584 <MX_GPIO_Init+0x2dc>)
 8002510:	f001 fca8 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002514:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002526:	230c      	movs	r3, #12
 8002528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4818      	ldr	r0, [pc, #96]	@ (8002594 <MX_GPIO_Init+0x2ec>)
 8002532:	f001 fc97 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002548:	2301      	movs	r3, #1
 800254a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	4813      	ldr	r0, [pc, #76]	@ (80025a0 <MX_GPIO_Init+0x2f8>)
 8002554:	f001 fc86 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002558:	2360      	movs	r3, #96	@ 0x60
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002568:	230d      	movs	r3, #13
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800256c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	480a      	ldr	r0, [pc, #40]	@ (800259c <MX_GPIO_Init+0x2f4>)
 8002574:	f001 fc76 	bl	8003e64 <HAL_GPIO_Init>
 8002578:	e014      	b.n	80025a4 <MX_GPIO_Init+0x2fc>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40020400 	.word	0x40020400
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40022000 	.word	0x40022000
 800258c:	40022800 	.word	0x40022800
 8002590:	40021c00 	.word	0x40021c00
 8002594:	40020800 	.word	0x40020800
 8002598:	40021800 	.word	0x40021800
 800259c:	40021000 	.word	0x40021000
 80025a0:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80025a4:	2340      	movs	r3, #64	@ 0x40
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025b4:	230a      	movs	r3, #10
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025bc:	4619      	mov	r1, r3
 80025be:	48bc      	ldr	r0, [pc, #752]	@ (80028b0 <MX_GPIO_Init+0x608>)
 80025c0:	f001 fc50 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80025c4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d6:	230c      	movs	r3, #12
 80025d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	48b4      	ldr	r0, [pc, #720]	@ (80028b4 <MX_GPIO_Init+0x60c>)
 80025e2:	f001 fc3f 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80025e6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025f8:	230e      	movs	r3, #14
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002600:	4619      	mov	r1, r3
 8002602:	48ad      	ldr	r0, [pc, #692]	@ (80028b8 <MX_GPIO_Init+0x610>)
 8002604:	f001 fc2e 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260e:	2300      	movs	r3, #0
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	48a6      	ldr	r0, [pc, #664]	@ (80028b8 <MX_GPIO_Init+0x610>)
 800261e:	f001 fc21 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002622:	2340      	movs	r3, #64	@ 0x40
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002626:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	48a1      	ldr	r0, [pc, #644]	@ (80028bc <MX_GPIO_Init+0x614>)
 8002638:	f001 fc14 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800263c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800264e:	230c      	movs	r3, #12
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002656:	4619      	mov	r1, r3
 8002658:	4898      	ldr	r0, [pc, #608]	@ (80028bc <MX_GPIO_Init+0x614>)
 800265a:	f001 fc03 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800265e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002670:	230a      	movs	r3, #10
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002678:	4619      	mov	r1, r3
 800267a:	4891      	ldr	r0, [pc, #580]	@ (80028c0 <MX_GPIO_Init+0x618>)
 800267c:	f001 fbf2 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002680:	23f0      	movs	r3, #240	@ 0xf0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002690:	230a      	movs	r3, #10
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002698:	4619      	mov	r1, r3
 800269a:	488a      	ldr	r0, [pc, #552]	@ (80028c4 <MX_GPIO_Init+0x61c>)
 800269c:	f001 fbe2 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80026a0:	23f7      	movs	r3, #247	@ 0xf7
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b0:	230e      	movs	r3, #14
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	4883      	ldr	r0, [pc, #524]	@ (80028c8 <MX_GPIO_Init+0x620>)
 80026bc:	f001 fbd2 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80026c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026d2:	2309      	movs	r3, #9
 80026d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026da:	4619      	mov	r1, r3
 80026dc:	4875      	ldr	r0, [pc, #468]	@ (80028b4 <MX_GPIO_Init+0x60c>)
 80026de:	f001 fbc1 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026f4:	230a      	movs	r3, #10
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026fc:	4619      	mov	r1, r3
 80026fe:	486d      	ldr	r0, [pc, #436]	@ (80028b4 <MX_GPIO_Init+0x60c>)
 8002700:	f001 fbb0 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002704:	2320      	movs	r3, #32
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002718:	4619      	mov	r1, r3
 800271a:	4868      	ldr	r0, [pc, #416]	@ (80028bc <MX_GPIO_Init+0x614>)
 800271c:	f001 fba2 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002720:	2308      	movs	r3, #8
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002730:	230d      	movs	r3, #13
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002738:	4619      	mov	r1, r3
 800273a:	4860      	ldr	r0, [pc, #384]	@ (80028bc <MX_GPIO_Init+0x614>)
 800273c:	f001 fb92 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002740:	230d      	movs	r3, #13
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002748:	2302      	movs	r3, #2
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	485b      	ldr	r0, [pc, #364]	@ (80028c4 <MX_GPIO_Init+0x61c>)
 8002758:	f001 fb84 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800275c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	4856      	ldr	r0, [pc, #344]	@ (80028cc <MX_GPIO_Init+0x624>)
 8002772:	f001 fb77 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002776:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002788:	230c      	movs	r3, #12
 800278a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800278c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002790:	4619      	mov	r1, r3
 8002792:	484f      	ldr	r0, [pc, #316]	@ (80028d0 <MX_GPIO_Init+0x628>)
 8002794:	f001 fb66 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002798:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027aa:	230e      	movs	r3, #14
 80027ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027b2:	4619      	mov	r1, r3
 80027b4:	4843      	ldr	r0, [pc, #268]	@ (80028c4 <MX_GPIO_Init+0x61c>)
 80027b6:	f001 fb55 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80027ba:	2308      	movs	r3, #8
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	483d      	ldr	r0, [pc, #244]	@ (80028c8 <MX_GPIO_Init+0x620>)
 80027d2:	f001 fb47 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80027d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027e8:	230d      	movs	r3, #13
 80027ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027f0:	4619      	mov	r1, r3
 80027f2:	4830      	ldr	r0, [pc, #192]	@ (80028b4 <MX_GPIO_Init+0x60c>)
 80027f4:	f001 fb36 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027f8:	2310      	movs	r3, #16
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002808:	4619      	mov	r1, r3
 800280a:	482c      	ldr	r0, [pc, #176]	@ (80028bc <MX_GPIO_Init+0x614>)
 800280c:	f001 fb2a 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002810:	2304      	movs	r3, #4
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002820:	230c      	movs	r3, #12
 8002822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002824:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002828:	4619      	mov	r1, r3
 800282a:	4824      	ldr	r0, [pc, #144]	@ (80028bc <MX_GPIO_Init+0x614>)
 800282c:	f001 fb1a 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002830:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002836:	2300      	movs	r3, #0
 8002838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800283e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002842:	4619      	mov	r1, r3
 8002844:	4823      	ldr	r0, [pc, #140]	@ (80028d4 <MX_GPIO_Init+0x62c>)
 8002846:	f001 fb0d 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800284a:	2302      	movs	r3, #2
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800285a:	2305      	movs	r3, #5
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002862:	4619      	mov	r1, r3
 8002864:	4817      	ldr	r0, [pc, #92]	@ (80028c4 <MX_GPIO_Init+0x61c>)
 8002866:	f001 fafd 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800286a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	2301      	movs	r3, #1
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800287c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	4810      	ldr	r0, [pc, #64]	@ (80028c4 <MX_GPIO_Init+0x61c>)
 8002884:	f001 faee 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	2301      	movs	r3, #1
 8002890:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	@ (80028d4 <MX_GPIO_Init+0x62c>)
 80028a2:	f001 fadf 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80028a6:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80028aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e013      	b.n	80028d8 <MX_GPIO_Init+0x630>
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40022400 	.word	0x40022400
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40022800 	.word	0x40022800
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40021400 	.word	0x40021400
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028e2:	230d      	movs	r3, #13
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ea:	4619      	mov	r1, r3
 80028ec:	4895      	ldr	r0, [pc, #596]	@ (8002b44 <MX_GPIO_Init+0x89c>)
 80028ee:	f001 fab9 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80028f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028fc:	2302      	movs	r3, #2
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002904:	4619      	mov	r1, r3
 8002906:	4890      	ldr	r0, [pc, #576]	@ (8002b48 <MX_GPIO_Init+0x8a0>)
 8002908:	f001 faac 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800290c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800291e:	2301      	movs	r3, #1
 8002920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002926:	4619      	mov	r1, r3
 8002928:	4888      	ldr	r0, [pc, #544]	@ (8002b4c <MX_GPIO_Init+0x8a4>)
 800292a:	f001 fa9b 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800292e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002934:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002942:	4619      	mov	r1, r3
 8002944:	4880      	ldr	r0, [pc, #512]	@ (8002b48 <MX_GPIO_Init+0x8a0>)
 8002946:	f001 fa8d 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800295a:	2308      	movs	r3, #8
 800295c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002962:	4619      	mov	r1, r3
 8002964:	487a      	ldr	r0, [pc, #488]	@ (8002b50 <MX_GPIO_Init+0x8a8>)
 8002966:	f001 fa7d 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 800296a:	2340      	movs	r3, #64	@ 0x40
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296e:	2301      	movs	r3, #1
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002972:	2302      	movs	r3, #2
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800297e:	4619      	mov	r1, r3
 8002980:	4873      	ldr	r0, [pc, #460]	@ (8002b50 <MX_GPIO_Init+0x8a8>)
 8002982:	f001 fa6f 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002986:	2328      	movs	r3, #40	@ 0x28
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002996:	230c      	movs	r3, #12
 8002998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800299a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800299e:	4619      	mov	r1, r3
 80029a0:	4868      	ldr	r0, [pc, #416]	@ (8002b44 <MX_GPIO_Init+0x89c>)
 80029a2:	f001 fa5f 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 80029a6:	23c0      	movs	r3, #192	@ 0xc0
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ae:	2302      	movs	r3, #2
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ba:	4619      	mov	r1, r3
 80029bc:	4865      	ldr	r0, [pc, #404]	@ (8002b54 <MX_GPIO_Init+0x8ac>)
 80029be:	f001 fa51 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80029c2:	2308      	movs	r3, #8
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d2:	230c      	movs	r3, #12
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029da:	4619      	mov	r1, r3
 80029dc:	485c      	ldr	r0, [pc, #368]	@ (8002b50 <MX_GPIO_Init+0x8a8>)
 80029de:	f001 fa41 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029e2:	2332      	movs	r3, #50	@ 0x32
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029f2:	230b      	movs	r3, #11
 80029f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029fa:	4619      	mov	r1, r3
 80029fc:	4854      	ldr	r0, [pc, #336]	@ (8002b50 <MX_GPIO_Init+0x8a8>)
 80029fe:	f001 fa31 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a02:	2304      	movs	r3, #4
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a12:	2309      	movs	r3, #9
 8002a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	484e      	ldr	r0, [pc, #312]	@ (8002b58 <MX_GPIO_Init+0x8b0>)
 8002a1e:	f001 fa21 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002a22:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a34:	2309      	movs	r3, #9
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4847      	ldr	r0, [pc, #284]	@ (8002b5c <MX_GPIO_Init+0x8b4>)
 8002a40:	f001 fa10 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002a44:	2308      	movs	r3, #8
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a58:	4619      	mov	r1, r3
 8002a5a:	483e      	ldr	r0, [pc, #248]	@ (8002b54 <MX_GPIO_Init+0x8ac>)
 8002a5c:	f001 fa02 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a60:	2304      	movs	r3, #4
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a64:	2300      	movs	r3, #0
 8002a66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a70:	4619      	mov	r1, r3
 8002a72:	4838      	ldr	r0, [pc, #224]	@ (8002b54 <MX_GPIO_Init+0x8ac>)
 8002a74:	f001 f9f6 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a78:	2386      	movs	r3, #134	@ 0x86
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a88:	230b      	movs	r3, #11
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a90:	4619      	mov	r1, r3
 8002a92:	482e      	ldr	r0, [pc, #184]	@ (8002b4c <MX_GPIO_Init+0x8a4>)
 8002a94:	f001 f9e6 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a98:	2350      	movs	r3, #80	@ 0x50
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002aa8:	230d      	movs	r3, #13
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4826      	ldr	r0, [pc, #152]	@ (8002b4c <MX_GPIO_Init+0x8a4>)
 8002ab4:	f001 f9d6 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002ab8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aca:	2304      	movs	r3, #4
 8002acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	481b      	ldr	r0, [pc, #108]	@ (8002b44 <MX_GPIO_Init+0x89c>)
 8002ad6:	f001 f9c5 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8002ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aec:	230a      	movs	r3, #10
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	4818      	ldr	r0, [pc, #96]	@ (8002b58 <MX_GPIO_Init+0x8b0>)
 8002af8:	f001 f9b4 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8002afc:	2340      	movs	r3, #64	@ 0x40
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b04:	2302      	movs	r3, #2
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	480c      	ldr	r0, [pc, #48]	@ (8002b44 <MX_GPIO_Init+0x89c>)
 8002b14:	f001 f9a6 	bl	8003e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002b18:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	4808      	ldr	r0, [pc, #32]	@ (8002b58 <MX_GPIO_Init+0x8b0>)
 8002b36:	f001 f995 	bl	8003e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3740      	adds	r7, #64	@ 0x40
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021c00 	.word	0x40021c00
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40021800 	.word	0x40021800
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020c00 	.word	0x40020c00

08002b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b64:	b672      	cpsid	i
}
 8002b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <Error_Handler+0x8>

08002b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	4a10      	ldr	r2, [pc, #64]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	210f      	movs	r1, #15
 8002ba6:	f06f 0001 	mvn.w	r0, #1
 8002baa:	f000 ffa8 	bl	8003afe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	@ 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a21      	ldr	r2, [pc, #132]	@ (8002c60 <HAL_ADC_MspInit+0xa4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d13c      	bne.n	8002c58 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bde:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	4a20      	ldr	r2, [pc, #128]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002be4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bea:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002bfc:	f043 0320 	orr.w	r3, r3, #32
 8002c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_ADC_MspInit+0xa8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002c26:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002c2a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480b      	ldr	r0, [pc, #44]	@ (8002c68 <HAL_ADC_MspInit+0xac>)
 8002c3c:	f001 f912 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002c40:	2301      	movs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c44:	2303      	movs	r3, #3
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	@ (8002c6c <HAL_ADC_MspInit+0xb0>)
 8002c54:	f001 f906 	bl	8003e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3728      	adds	r7, #40	@ 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40012200 	.word	0x40012200
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <HAL_CRC_MspInit+0x38>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10b      	bne.n	8002c9a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_CRC_MspInit+0x3c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_CRC_MspInit+0x3c>)
 8002c88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <HAL_CRC_MspInit+0x3c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023000 	.word	0x40023000
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_TIM_Base_MspInit+0x44>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x48>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x48>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x48>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	201a      	movs	r0, #26
 8002ce0:	f000 ff0d 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ce4:	201a      	movs	r0, #26
 8002ce6:	f000 ff26 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40014800 	.word	0x40014800
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0ac      	sub	sp, #176	@ 0xb0
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d14:	f107 0318 	add.w	r3, r7, #24
 8002d18:	2284      	movs	r2, #132	@ 0x84
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f005 f89c 	bl	8007e5a <memset>
  if(huart->Instance==USART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	@ (8002e00 <HAL_UART_MspInit+0x104>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d164      	bne.n	8002df6 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d2c:	2340      	movs	r3, #64	@ 0x40
 8002d2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 ff5b 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d44:	f7ff ff0c 	bl	8002b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d48:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d54:	4b2b      	ldr	r3, [pc, #172]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	4a27      	ldr	r2, [pc, #156]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_UART_MspInit+0x108>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002da8:	2307      	movs	r3, #7
 8002daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002dae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002db2:	4619      	mov	r1, r3
 8002db4:	4814      	ldr	r0, [pc, #80]	@ (8002e08 <HAL_UART_MspInit+0x10c>)
 8002db6:	f001 f855 	bl	8003e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002dba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dde:	4619      	mov	r1, r3
 8002de0:	480a      	ldr	r0, [pc, #40]	@ (8002e0c <HAL_UART_MspInit+0x110>)
 8002de2:	f001 f83f 	bl	8003e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2025      	movs	r0, #37	@ 0x25
 8002dec:	f000 fe87 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002df0:	2025      	movs	r0, #37	@ 0x25
 8002df2:	f000 fea0 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	37b0      	adds	r7, #176	@ 0xb0
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020000 	.word	0x40020000

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <NMI_Handler+0x4>

08002e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <MemManage_Handler+0x4>

08002e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e66:	f000 f955 	bl	8003114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e76:	f002 fb7d 	bl	8005574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000510 	.word	0x20000510

08002e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <USART1_IRQHandler+0x10>)
 8002e8a:	f002 fe8f 	bl	8005bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000055c 	.word	0x2000055c

08002e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_kill>:

int _kill(int pid, int sig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eb2:	f005 f837 	bl	8007f24 <__errno>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2216      	movs	r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
  return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_exit>:

void _exit (int status)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffe7 	bl	8002ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <_exit+0x12>

08002ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e00a      	b.n	8002f06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef0:	f3af 8000 	nop.w
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	b2ca      	uxtb	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	dbf0      	blt.n	8002ef0 <_read+0x12>
  }

  return len;
 8002f0e:	687b      	ldr	r3, [r7, #4]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e009      	b.n	8002f3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	60ba      	str	r2, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	dbf1      	blt.n	8002f2a <_write+0x12>
  }
  return len;
 8002f46:	687b      	ldr	r3, [r7, #4]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_close>:

int _close(int file)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f78:	605a      	str	r2, [r3, #4]
  return 0;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_isatty>:

int _isatty(int file)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc0:	4a14      	ldr	r2, [pc, #80]	@ (8003014 <_sbrk+0x5c>)
 8002fc2:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <_sbrk+0x60>)
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <_sbrk+0x64>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <_sbrk+0x64>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	@ (8003020 <_sbrk+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d207      	bcs.n	8002ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe8:	f004 ff9c 	bl	8007f24 <__errno>
 8002fec:	4603      	mov	r3, r0
 8002fee:	220c      	movs	r2, #12
 8002ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	e009      	b.n	800300c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	4a05      	ldr	r2, [pc, #20]	@ (800301c <_sbrk+0x64>)
 8003008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20050000 	.word	0x20050000
 8003018:	00000400 	.word	0x00000400
 800301c:	200005e4 	.word	0x200005e4
 8003020:	20000738 	.word	0x20000738

08003024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <SystemInit+0x20>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <SystemInit+0x20>)
 8003030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800304c:	480d      	ldr	r0, [pc, #52]	@ (8003084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800304e:	490e      	ldr	r1, [pc, #56]	@ (8003088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003050:	4a0e      	ldr	r2, [pc, #56]	@ (800308c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0b      	ldr	r2, [pc, #44]	@ (8003090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003064:	4c0b      	ldr	r4, [pc, #44]	@ (8003094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003072:	f7ff ffd7 	bl	8003024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003076:	f004 ff5b 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800307a:	f7fe ffc1 	bl	8002000 <main>
  bx  lr    
 800307e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003080:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003088:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 800308c:	0800bc10 	.word	0x0800bc10
  ldr r2, =_sbss
 8003090:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003094:	20000738 	.word	0x20000738

08003098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC_IRQHandler>

0800309a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309e:	2003      	movs	r0, #3
 80030a0:	f000 fd22 	bl	8003ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f000 f805 	bl	80030b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030aa:	f7ff fd5f 	bl	8002b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_InitTick+0x54>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_InitTick+0x58>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fd3d 	bl	8003b52 <HAL_SYSTICK_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e00e      	b.n	8003100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d80a      	bhi.n	80030fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e8:	2200      	movs	r2, #0
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f000 fd05 	bl	8003afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f4:	4a06      	ldr	r2, [pc, #24]	@ (8003110 <HAL_InitTick+0x5c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000184 	.word	0x20000184
 800310c:	2000018c 	.word	0x2000018c
 8003110:	20000188 	.word	0x20000188

08003114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_IncTick+0x20>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_IncTick+0x24>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4a04      	ldr	r2, [pc, #16]	@ (8003138 <HAL_IncTick+0x24>)
 8003126:	6013      	str	r3, [r2, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000018c 	.word	0x2000018c
 8003138:	200005e8 	.word	0x200005e8

0800313c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return uwTick;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <HAL_GetTick+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200005e8 	.word	0x200005e8

08003154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e031      	b.n	80031ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fd22 	bl	8002bbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_ADC_Init+0x84>)
 8003198:	4013      	ands	r3, r2
 800319a:	f043 0202 	orr.w	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fad6 	bl	8003754 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80031be:	e001      	b.n	80031c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	ffffeefd 	.word	0xffffeefd

080031dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Start+0x1a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ad      	b.n	8003352 <HAL_ADC_Start+0x176>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d018      	beq.n	800323e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800321c:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <HAL_ADC_Start+0x184>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a50      	ldr	r2, [pc, #320]	@ (8003364 <HAL_ADC_Start+0x188>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9a      	lsrs	r2, r3, #18
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003230:	e002      	b.n	8003238 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3b01      	subs	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f9      	bne.n	8003232 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d175      	bne.n	8003338 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003250:	4b45      	ldr	r3, [pc, #276]	@ (8003368 <HAL_ADC_Start+0x18c>)
 8003252:	4013      	ands	r3, r2
 8003254:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003272:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003286:	d106      	bne.n	8003296 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f023 0206 	bic.w	r2, r3, #6
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
 8003294:	e002      	b.n	800329c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032ae:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <HAL_ADC_Start+0x190>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d143      	bne.n	8003350 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e03a      	b.n	8003350 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a24      	ldr	r2, [pc, #144]	@ (8003370 <HAL_ADC_Start+0x194>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10e      	bne.n	8003302 <HAL_ADC_Start+0x126>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003300:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_ADC_Start+0x190>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d120      	bne.n	8003350 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <HAL_ADC_Start+0x198>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d11b      	bne.n	8003350 <HAL_ADC_Start+0x174>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d114      	bne.n	8003350 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	e00b      	b.n	8003350 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000184 	.word	0x20000184
 8003364:	431bde83 	.word	0x431bde83
 8003368:	fffff8fe 	.word	0xfffff8fe
 800336c:	40012300 	.word	0x40012300
 8003370:	40012000 	.word	0x40012000
 8003374:	40012200 	.word	0x40012200

08003378 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003394:	d113      	bne.n	80033be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a4:	d10b      	bne.n	80033be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e063      	b.n	8003486 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033be:	f7ff febd 	bl	800313c <HAL_GetTick>
 80033c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033c4:	e021      	b.n	800340a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d01d      	beq.n	800340a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_ADC_PollForConversion+0x6c>
 80033d4:	f7ff feb2 	bl	800313c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d212      	bcs.n	800340a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d00b      	beq.n	800340a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e03d      	b.n	8003486 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d1d6      	bne.n	80033c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0212 	mvn.w	r2, #18
 8003420:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d123      	bne.n	8003484 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11f      	bne.n	8003484 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800345c:	2b00      	cmp	r3, #0
 800345e:	d111      	bne.n	8003484 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e136      	b.n	8003732 <HAL_ADC_ConfigChannel+0x28a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d93a      	bls.n	800354a <HAL_ADC_ConfigChannel+0xa2>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034dc:	d035      	beq.n	800354a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	3b1e      	subs	r3, #30
 80034f4:	2207      	movs	r2, #7
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	400a      	ands	r2, r1
 8003502:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a8d      	ldr	r2, [pc, #564]	@ (8003740 <HAL_ADC_ConfigChannel+0x298>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10a      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	061a      	lsls	r2, r3, #24
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003522:	e035      	b.n	8003590 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	4603      	mov	r3, r0
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4403      	add	r3, r0
 800353c:	3b1e      	subs	r3, #30
 800353e:	409a      	lsls	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003548:	e022      	b.n	8003590 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6919      	ldr	r1, [r3, #16]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	2207      	movs	r2, #7
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43da      	mvns	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	400a      	ands	r2, r1
 800356c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6919      	ldr	r1, [r3, #16]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	4618      	mov	r0, r3
 8003580:	4603      	mov	r3, r0
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4403      	add	r3, r0
 8003586:	409a      	lsls	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d824      	bhi.n	80035e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b05      	subs	r3, #5
 80035aa:	221f      	movs	r2, #31
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4618      	mov	r0, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	3b05      	subs	r3, #5
 80035d4:	fa00 f203 	lsl.w	r2, r0, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e0:	e04c      	b.n	800367c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d824      	bhi.n	8003634 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3b23      	subs	r3, #35	@ 0x23
 80035fc:	221f      	movs	r2, #31
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	400a      	ands	r2, r1
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4618      	mov	r0, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b23      	subs	r3, #35	@ 0x23
 8003626:	fa00 f203 	lsl.w	r2, r0, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
 8003632:	e023      	b.n	800367c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b41      	subs	r3, #65	@ 0x41
 8003646:	221f      	movs	r2, #31
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43da      	mvns	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	400a      	ands	r2, r1
 8003654:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b41      	subs	r3, #65	@ 0x41
 8003670:	fa00 f203 	lsl.w	r2, r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a30      	ldr	r2, [pc, #192]	@ (8003744 <HAL_ADC_ConfigChannel+0x29c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10a      	bne.n	800369c <HAL_ADC_ConfigChannel+0x1f4>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800368e:	d105      	bne.n	800369c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003690:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 8003696:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800369a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_ADC_ConfigChannel+0x29c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10f      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x21e>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b12      	cmp	r3, #18
 80036ac:	d10b      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036ae:	4b26      	ldr	r3, [pc, #152]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a25      	ldr	r2, [pc, #148]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ba:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003744 <HAL_ADC_ConfigChannel+0x29c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d12b      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x280>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <HAL_ADC_ConfigChannel+0x298>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x23a>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b11      	cmp	r3, #17
 80036e0:	d122      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036e2:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036e8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036ee:	4b16      	ldr	r3, [pc, #88]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a10      	ldr	r2, [pc, #64]	@ (8003740 <HAL_ADC_ConfigChannel+0x298>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_ADC_ConfigChannel+0x2a4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <HAL_ADC_ConfigChannel+0x2a8>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9a      	lsrs	r2, r3, #18
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800371a:	e002      	b.n	8003722 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	10000012 	.word	0x10000012
 8003744:	40012000 	.word	0x40012000
 8003748:	40012300 	.word	0x40012300
 800374c:	20000184 	.word	0x20000184
 8003750:	431bde83 	.word	0x431bde83

08003754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800375c:	4b78      	ldr	r3, [pc, #480]	@ (8003940 <ADC_Init+0x1ec>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a77      	ldr	r2, [pc, #476]	@ (8003940 <ADC_Init+0x1ec>)
 8003762:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003766:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <ADC_Init+0x1ec>)
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4973      	ldr	r1, [pc, #460]	@ (8003940 <ADC_Init+0x1ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	4a58      	ldr	r2, [pc, #352]	@ (8003944 <ADC_Init+0x1f0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e00f      	b.n	800384e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800383c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800384c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0202 	bic.w	r2, r2, #2
 800385c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	005a      	lsls	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800389a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	3b01      	subs	r3, #1
 80038a8:	035a      	lsls	r2, r3, #13
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	e007      	b.n	80038c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	3b01      	subs	r3, #1
 80038e0:	051a      	lsls	r2, r3, #20
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003906:	025a      	lsls	r2, r3, #9
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	029a      	lsls	r2, r3, #10
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40012300 	.word	0x40012300
 8003944:	0f000001 	.word	0x0f000001

08003948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <__NVIC_SetPriorityGrouping+0x40>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003964:	4013      	ands	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003976:	4a04      	ldr	r2, [pc, #16]	@ (8003988 <__NVIC_SetPriorityGrouping+0x40>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	60d3      	str	r3, [r2, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00
 800398c:	05fa0000 	.word	0x05fa0000

08003990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003994:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 0307 	and.w	r3, r3, #7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db0b      	blt.n	80039d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4907      	ldr	r1, [pc, #28]	@ (80039e4 <__NVIC_EnableIRQ+0x38>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2001      	movs	r0, #1
 80039ce:	fa00 f202 	lsl.w	r2, r0, r2
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000e100 	.word	0xe000e100

080039e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db0a      	blt.n	8003a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	490c      	ldr	r1, [pc, #48]	@ (8003a34 <__NVIC_SetPriority+0x4c>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a10:	e00a      	b.n	8003a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4908      	ldr	r1, [pc, #32]	@ (8003a38 <__NVIC_SetPriority+0x50>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	761a      	strb	r2, [r3, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf28      	it	cs
 8003a5a:	2304      	movcs	r3, #4
 8003a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d902      	bls.n	8003a6c <NVIC_EncodePriority+0x30>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3b03      	subs	r3, #3
 8003a6a:	e000      	b.n	8003a6e <NVIC_EncodePriority+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a84:	f04f 31ff 	mov.w	r1, #4294967295
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43d9      	mvns	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	4313      	orrs	r3, r2
         );
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	@ 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ab4:	d301      	bcc.n	8003aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00f      	b.n	8003ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <SysTick_Config+0x40>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac2:	210f      	movs	r1, #15
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f7ff ff8e 	bl	80039e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff29 	bl	8003948 <__NVIC_SetPriorityGrouping>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff3e 	bl	8003990 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff8e 	bl	8003a3c <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5d 	bl	80039e8 <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff31 	bl	80039ac <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa2 	bl	8003aa4 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e054      	b.n	8003c28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7f5b      	ldrb	r3, [r3, #29]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff f86e 	bl	8002c70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	791b      	ldrb	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_CRC_Init+0xc4>)
 8003ba8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0218 	bic.w	r2, r2, #24
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	e00c      	b.n	8003bd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f834 	bl	8003c34 <HAL_CRCEx_Polynomial_Set>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e028      	b.n	8003c28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	795b      	ldrb	r3, [r3, #5]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d105      	bne.n	8003bea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	611a      	str	r2, [r3, #16]
 8003be8:	e004      	b.n	8003bf4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6912      	ldr	r2, [r2, #16]
 8003bf2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	04c11db7 	.word	0x04c11db7

08003c34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c44:	231f      	movs	r3, #31
 8003c46:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c48:	bf00      	nop
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1e5a      	subs	r2, r3, #1
 8003c4e:	613a      	str	r2, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_CRCEx_Polynomial_Set+0x34>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b18      	cmp	r3, #24
 8003c6c:	d846      	bhi.n	8003cfc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003d03 	.word	0x08003d03
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003cfd 	.word	0x08003cfd
 8003c80:	08003cfd 	.word	0x08003cfd
 8003c84:	08003cfd 	.word	0x08003cfd
 8003c88:	08003cfd 	.word	0x08003cfd
 8003c8c:	08003cfd 	.word	0x08003cfd
 8003c90:	08003cfd 	.word	0x08003cfd
 8003c94:	08003cf1 	.word	0x08003cf1
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003cfd 	.word	0x08003cfd
 8003ca0:	08003cfd 	.word	0x08003cfd
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003cfd 	.word	0x08003cfd
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003cfd 	.word	0x08003cfd
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003cfd 	.word	0x08003cfd
 8003cc4:	08003cfd 	.word	0x08003cfd
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003cfd 	.word	0x08003cfd
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003cd9 	.word	0x08003cd9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d913      	bls.n	8003d06 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ce2:	e010      	b.n	8003d06 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b07      	cmp	r3, #7
 8003ce8:	d90f      	bls.n	8003d0a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cee:	e00c      	b.n	8003d0a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	d90b      	bls.n	8003d0e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cfa:	e008      	b.n	8003d0e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	e006      	b.n	8003d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d02:	bf00      	nop
 8003d04:	e004      	b.n	8003d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d0e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 0118 	bic.w	r1, r3, #24
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d4e:	f7ff f9f5 	bl	800313c <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d008      	beq.n	8003d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2280      	movs	r2, #128	@ 0x80
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e052      	b.n	8003e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0216 	bic.w	r2, r2, #22
 8003d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d103      	bne.n	8003da2 <HAL_DMA_Abort+0x62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0208 	bic.w	r2, r2, #8
 8003db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc2:	e013      	b.n	8003dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dc4:	f7ff f9ba 	bl	800313c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	d90c      	bls.n	8003dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e015      	b.n	8003e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e4      	bne.n	8003dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	223f      	movs	r2, #63	@ 0x3f
 8003e00:	409a      	lsls	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00c      	b.n	8003e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2205      	movs	r2, #5
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	@ 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e175      	b.n	8004170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	f040 8164 	bne.w	800416a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_GPIO_Init+0x56>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d130      	bne.n	8003f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 0201 	and.w	r2, r3, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d017      	beq.n	8003f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d123      	bne.n	8003fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80be 	beq.w	800416a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fee:	4b66      	ldr	r3, [pc, #408]	@ (8004188 <HAL_GPIO_Init+0x324>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	4a65      	ldr	r2, [pc, #404]	@ (8004188 <HAL_GPIO_Init+0x324>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ffa:	4b63      	ldr	r3, [pc, #396]	@ (8004188 <HAL_GPIO_Init+0x324>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004006:	4a61      	ldr	r2, [pc, #388]	@ (800418c <HAL_GPIO_Init+0x328>)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3302      	adds	r3, #2
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <HAL_GPIO_Init+0x32c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d037      	beq.n	80040a2 <HAL_GPIO_Init+0x23e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a57      	ldr	r2, [pc, #348]	@ (8004194 <HAL_GPIO_Init+0x330>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_GPIO_Init+0x23a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a56      	ldr	r2, [pc, #344]	@ (8004198 <HAL_GPIO_Init+0x334>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02b      	beq.n	800409a <HAL_GPIO_Init+0x236>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a55      	ldr	r2, [pc, #340]	@ (800419c <HAL_GPIO_Init+0x338>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d025      	beq.n	8004096 <HAL_GPIO_Init+0x232>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a54      	ldr	r2, [pc, #336]	@ (80041a0 <HAL_GPIO_Init+0x33c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x22e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a53      	ldr	r2, [pc, #332]	@ (80041a4 <HAL_GPIO_Init+0x340>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d019      	beq.n	800408e <HAL_GPIO_Init+0x22a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a52      	ldr	r2, [pc, #328]	@ (80041a8 <HAL_GPIO_Init+0x344>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_GPIO_Init+0x226>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a51      	ldr	r2, [pc, #324]	@ (80041ac <HAL_GPIO_Init+0x348>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_GPIO_Init+0x222>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_GPIO_Init+0x34c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <HAL_GPIO_Init+0x21e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4f      	ldr	r2, [pc, #316]	@ (80041b4 <HAL_GPIO_Init+0x350>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_GPIO_Init+0x21a>
 800407a:	2309      	movs	r3, #9
 800407c:	e012      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 800407e:	230a      	movs	r3, #10
 8004080:	e010      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 8004082:	2308      	movs	r3, #8
 8004084:	e00e      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 8004086:	2307      	movs	r3, #7
 8004088:	e00c      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 800408a:	2306      	movs	r3, #6
 800408c:	e00a      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 800408e:	2305      	movs	r3, #5
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 8004092:	2304      	movs	r3, #4
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x240>
 80040a2:	2300      	movs	r3, #0
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040b4:	4935      	ldr	r1, [pc, #212]	@ (800418c <HAL_GPIO_Init+0x328>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c2:	4b3d      	ldr	r3, [pc, #244]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040e6:	4a34      	ldr	r2, [pc, #208]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ec:	4b32      	ldr	r3, [pc, #200]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004110:	4a29      	ldr	r2, [pc, #164]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004116:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413a:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004140:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <HAL_GPIO_Init+0x354>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	f67f ae86 	bls.w	8003e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3724      	adds	r7, #36	@ 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	40013800 	.word	0x40013800
 8004190:	40020000 	.word	0x40020000
 8004194:	40020400 	.word	0x40020400
 8004198:	40020800 	.word	0x40020800
 800419c:	40020c00 	.word	0x40020c00
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40021400 	.word	0x40021400
 80041a8:	40021800 	.word	0x40021800
 80041ac:	40021c00 	.word	0x40021c00
 80041b0:	40022000 	.word	0x40022000
 80041b4:	40022400 	.word	0x40022400
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a04      	ldr	r2, [pc, #16]	@ (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4b23      	ldr	r3, [pc, #140]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a22      	ldr	r2, [pc, #136]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1d      	ldr	r2, [pc, #116]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800426e:	f7fe ff65 	bl	800313c <HAL_GetTick>
 8004272:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004274:	e009      	b.n	800428a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004276:	f7fe ff61 	bl	800313c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004284:	d901      	bls.n	800428a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e022      	b.n	80042d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800428a:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004296:	d1ee      	bne.n	8004276 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004298:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a0f      	ldr	r2, [pc, #60]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800429e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7fe ff4a 	bl	800313c <HAL_GetTick>
 80042a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042aa:	e009      	b.n	80042c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ac:	f7fe ff46 	bl	800313c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ba:	d901      	bls.n	80042c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e007      	b.n	80042d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042c0:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042cc:	d1ee      	bne.n	80042ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40007000 	.word	0x40007000

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e291      	b.n	800481a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8087 	beq.w	8004412 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004304:	4b96      	ldr	r3, [pc, #600]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b04      	cmp	r3, #4
 800430e:	d00c      	beq.n	800432a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004310:	4b93      	ldr	r3, [pc, #588]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d112      	bne.n	8004342 <HAL_RCC_OscConfig+0x62>
 800431c:	4b90      	ldr	r3, [pc, #576]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004324:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004328:	d10b      	bne.n	8004342 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432a:	4b8d      	ldr	r3, [pc, #564]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d06c      	beq.n	8004410 <HAL_RCC_OscConfig+0x130>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d168      	bne.n	8004410 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e26b      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x7a>
 800434c:	4b84      	ldr	r3, [pc, #528]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a83      	ldr	r2, [pc, #524]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e02e      	b.n	80043b8 <HAL_RCC_OscConfig+0xd8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x9c>
 8004362:	4b7f      	ldr	r3, [pc, #508]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7e      	ldr	r2, [pc, #504]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b7c      	ldr	r3, [pc, #496]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7b      	ldr	r2, [pc, #492]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xd8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b73      	ldr	r3, [pc, #460]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a72      	ldr	r2, [pc, #456]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xd8>
 80043a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe febc 	bl	800313c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe feb8 	bl	800313c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e21f      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b61      	ldr	r3, [pc, #388]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe8>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fea8 	bl	800313c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fea4 	bl	800313c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	@ 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e20b      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b57      	ldr	r3, [pc, #348]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x110>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d069      	beq.n	80044f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441e:	4b50      	ldr	r3, [pc, #320]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x190>
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x17a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1df      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	493d      	ldr	r1, [pc, #244]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e040      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d023      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a38      	ldr	r2, [pc, #224]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe fe5a 	bl	800313c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448c:	f7fe fe56 	bl	800313c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1bd      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4929      	ldr	r1, [pc, #164]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
 80044be:	e018      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c0:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fe fe36 	bl	800313c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fe fe32 	bl	800313c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e199      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d038      	beq.n	8004570 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d019      	beq.n	800453a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fe fe13 	bl	800313c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451a:	f7fe fe0f 	bl	800313c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e176      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x23a>
 8004538:	e01a      	b.n	8004570 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <HAL_RCC_OscConfig+0x280>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe fdf9 	bl	800313c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe fdf5 	bl	800313c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d903      	bls.n	8004564 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e15c      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
 8004560:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004564:	4b91      	ldr	r3, [pc, #580]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ee      	bne.n	800454e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80a4 	beq.w	80046c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b8b      	ldr	r3, [pc, #556]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4b88      	ldr	r3, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	4a87      	ldr	r2, [pc, #540]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	@ 0x40
 8004596:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a6:	4b82      	ldr	r3, [pc, #520]	@ (80047b0 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045b2:	4b7f      	ldr	r3, [pc, #508]	@ (80047b0 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	@ (80047b0 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fe fdbd 	bl	800313c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe fdb9 	bl	800313c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	@ 0x64
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e120      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b75      	ldr	r3, [pc, #468]	@ (80047b0 <HAL_RCC_OscConfig+0x4d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x31a>
 80045ec:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f0:	4a6e      	ldr	r2, [pc, #440]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f8:	e02d      	b.n	8004656 <HAL_RCC_OscConfig+0x376>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x33c>
 8004602:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	4a69      	ldr	r2, [pc, #420]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	@ 0x70
 800460e:	4b67      	ldr	r3, [pc, #412]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	4a66      	ldr	r2, [pc, #408]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004614:	f023 0304 	bic.w	r3, r3, #4
 8004618:	6713      	str	r3, [r2, #112]	@ 0x70
 800461a:	e01c      	b.n	8004656 <HAL_RCC_OscConfig+0x376>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d10c      	bne.n	800463e <HAL_RCC_OscConfig+0x35e>
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	4a60      	ldr	r2, [pc, #384]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004630:	4b5e      	ldr	r3, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a5d      	ldr	r2, [pc, #372]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	e00b      	b.n	8004656 <HAL_RCC_OscConfig+0x376>
 800463e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	4a5a      	ldr	r2, [pc, #360]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	6713      	str	r3, [r2, #112]	@ 0x70
 800464a:	4b58      	ldr	r3, [pc, #352]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d015      	beq.n	800468a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fe fd6d 	bl	800313c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fe fd69 	bl	800313c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0ce      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	4b4b      	ldr	r3, [pc, #300]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ee      	beq.n	8004666 <HAL_RCC_OscConfig+0x386>
 8004688:	e014      	b.n	80046b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fe fd57 	bl	800313c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fe fd53 	bl	800313c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0b8      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	4b40      	ldr	r3, [pc, #256]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ee      	bne.n	8004692 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b3c      	ldr	r3, [pc, #240]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	4a3b      	ldr	r2, [pc, #236]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a4 	beq.w	8004818 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d0:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d06b      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d149      	bne.n	8004778 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a30      	ldr	r2, [pc, #192]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe fd24 	bl	800313c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fd20 	bl	800313c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e087      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b28      	ldr	r3, [pc, #160]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	019b      	lsls	r3, r3, #6
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	3b01      	subs	r3, #1
 8004730:	041b      	lsls	r3, r3, #16
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	4313      	orrs	r3, r2
 800473c:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800473e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004742:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fe fcf4 	bl	800313c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe fcf0 	bl	800313c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e057      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x478>
 8004776:	e04f      	b.n	8004818 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0b      	ldr	r2, [pc, #44]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fcda 	bl	800313c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe fcd6 	bl	800313c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e03d      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_OscConfig+0x4cc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x4ac>
 80047aa:	e035      	b.n	8004818 <HAL_RCC_OscConfig+0x538>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x544>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d028      	beq.n	8004814 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d121      	bne.n	8004814 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d11a      	bne.n	8004814 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d111      	bne.n	8004814 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0d0      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b6a      	ldr	r3, [pc, #424]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b67      	ldr	r3, [pc, #412]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 020f 	bic.w	r2, r3, #15
 8004856:	4965      	ldr	r1, [pc, #404]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b63      	ldr	r3, [pc, #396]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b59      	ldr	r3, [pc, #356]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a58      	ldr	r2, [pc, #352]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 800488e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a0:	4b53      	ldr	r3, [pc, #332]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a52      	ldr	r2, [pc, #328]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b50      	ldr	r3, [pc, #320]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	494d      	ldr	r1, [pc, #308]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d040      	beq.n	800494c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d115      	bne.n	800490a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e073      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3d      	ldr	r3, [pc, #244]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06b      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4936      	ldr	r1, [pc, #216]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fe fc0e 	bl	800313c <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fe fc0a 	bl	800313c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e053      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2d      	ldr	r3, [pc, #180]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d210      	bcs.n	800497c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 020f 	bic.w	r2, r3, #15
 8004962:	4922      	ldr	r1, [pc, #136]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b20      	ldr	r3, [pc, #128]	@ (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e032      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004988:	4b19      	ldr	r3, [pc, #100]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4916      	ldr	r1, [pc, #88]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049a6:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	490e      	ldr	r1, [pc, #56]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ba:	f000 f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	490a      	ldr	r1, [pc, #40]	@ (80049f4 <HAL_RCC_ClockConfig+0x1cc>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <HAL_RCC_ClockConfig+0x1d0>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049d6:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_ClockConfig+0x1d4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fb6a 	bl	80030b4 <HAL_InitTick>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023c00 	.word	0x40023c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	0800b7bc 	.word	0x0800b7bc
 80049f8:	20000184 	.word	0x20000184
 80049fc:	20000188 	.word	0x20000188

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b090      	sub	sp, #64	@ 0x40
 8004a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a10:	2300      	movs	r3, #0
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a18:	4b59      	ldr	r3, [pc, #356]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d00d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x40>
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	f200 80a1 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a32:	e09b      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a38:	e09b      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a3e:	e098      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a40:	4b4f      	ldr	r3, [pc, #316]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b4a      	ldr	r3, [pc, #296]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4b47      	ldr	r3, [pc, #284]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a6c:	fb03 f201 	mul.w	r2, r3, r1
 8004a70:	2300      	movs	r3, #0
 8004a72:	fb00 f303 	mul.w	r3, r0, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	4a43      	ldr	r2, [pc, #268]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a7a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a80:	460a      	mov	r2, r1
 8004a82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a86:	4413      	add	r3, r2
 8004a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	61fa      	str	r2, [r7, #28]
 8004a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a9a:	f7fc f925 	bl	8000ce8 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa6:	e053      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa8:	4b35      	ldr	r3, [pc, #212]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	099b      	lsrs	r3, r3, #6
 8004aae:	2200      	movs	r2, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	617a      	str	r2, [r7, #20]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aba:	f04f 0b00 	mov.w	fp, #0
 8004abe:	4652      	mov	r2, sl
 8004ac0:	465b      	mov	r3, fp
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	0159      	lsls	r1, r3, #5
 8004acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad0:	0150      	lsls	r0, r2, #5
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	ebb2 080a 	subs.w	r8, r2, sl
 8004ada:	eb63 090b 	sbc.w	r9, r3, fp
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004af2:	ebb2 0408 	subs.w	r4, r2, r8
 8004af6:	eb63 0509 	sbc.w	r5, r3, r9
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	00eb      	lsls	r3, r5, #3
 8004b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b08:	00e2      	lsls	r2, r4, #3
 8004b0a:	4614      	mov	r4, r2
 8004b0c:	461d      	mov	r5, r3
 8004b0e:	eb14 030a 	adds.w	r3, r4, sl
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	eb45 030b 	adc.w	r3, r5, fp
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b26:	4629      	mov	r1, r5
 8004b28:	028b      	lsls	r3, r1, #10
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b30:	4621      	mov	r1, r4
 8004b32:	028a      	lsls	r2, r1, #10
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	60fa      	str	r2, [r7, #12]
 8004b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b44:	f7fc f8d0 	bl	8000ce8 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3740      	adds	r7, #64	@ 0x40
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	017d7840 	.word	0x017d7840

08004b8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b90:	4b03      	ldr	r3, [pc, #12]	@ (8004ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000184 	.word	0x20000184

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	@ (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800b7cc 	.word	0x0800b7cc

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bd0:	f7ff ffdc 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0b5b      	lsrs	r3, r3, #13
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	@ (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	0800b7cc 	.word	0x0800b7cc

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c1c:	4b69      	ldr	r3, [pc, #420]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a68      	ldr	r2, [pc, #416]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c30:	4964      	ldr	r1, [pc, #400]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	4959      	ldr	r1, [pc, #356]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d017      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	494a      	ldr	r1, [pc, #296]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 808b 	beq.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	4a39      	ldr	r2, [pc, #228]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ce4:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cf0:	4b35      	ldr	r3, [pc, #212]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a34      	ldr	r2, [pc, #208]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfc:	f7fe fa1e 	bl	800313c <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d04:	f7fe fa1a 	bl	800313c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e357      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d16:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d22:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d035      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d02e      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d40:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d62:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d68:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d114      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe f9e2 	bl	800313c <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fe f9de 	bl	800313c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e319      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ee      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004daa:	d111      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004db8:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	4901      	ldr	r1, [pc, #4]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	0ffffcff 	.word	0x0ffffcff
 8004dd0:	4baa      	ldr	r3, [pc, #680]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4aa9      	ldr	r2, [pc, #676]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	4ba7      	ldr	r3, [pc, #668]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	49a4      	ldr	r1, [pc, #656]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfa:	4ba0      	ldr	r3, [pc, #640]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e00:	4a9e      	ldr	r2, [pc, #632]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	4999      	ldr	r1, [pc, #612]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e28:	4b94      	ldr	r3, [pc, #592]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e36:	4991      	ldr	r1, [pc, #580]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e58:	4988      	ldr	r1, [pc, #544]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e6c:	4b83      	ldr	r3, [pc, #524]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7a:	4980      	ldr	r1, [pc, #512]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4977      	ldr	r1, [pc, #476]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eb0:	4b72      	ldr	r3, [pc, #456]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebe:	496f      	ldr	r1, [pc, #444]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f023 020c 	bic.w	r2, r3, #12
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee0:	4966      	ldr	r1, [pc, #408]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ef4:	4b61      	ldr	r3, [pc, #388]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f02:	495e      	ldr	r1, [pc, #376]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f16:	4b59      	ldr	r3, [pc, #356]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	4955      	ldr	r1, [pc, #340]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f38:	4b50      	ldr	r3, [pc, #320]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	494d      	ldr	r1, [pc, #308]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f5a:	4b48      	ldr	r3, [pc, #288]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	4944      	ldr	r1, [pc, #272]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8a:	493c      	ldr	r1, [pc, #240]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f9e:	4b37      	ldr	r3, [pc, #220]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fac:	4933      	ldr	r1, [pc, #204]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fce:	492b      	ldr	r1, [pc, #172]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d011      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fe2:	4b26      	ldr	r3, [pc, #152]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ff0:	4922      	ldr	r1, [pc, #136]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005000:	d101      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005022:	4b16      	ldr	r3, [pc, #88]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005028:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005030:	4912      	ldr	r1, [pc, #72]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005044:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005054:	4909      	ldr	r1, [pc, #36]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d006      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80d9 	beq.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005070:	4b02      	ldr	r3, [pc, #8]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a01      	ldr	r2, [pc, #4]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800507a:	e001      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800507c:	40023800 	.word	0x40023800
 8005080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005082:	f7fe f85b 	bl	800313c <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005088:	e008      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800508a:	f7fe f857 	bl	800313c <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b64      	cmp	r3, #100	@ 0x64
 8005096:	d901      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e194      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800509c:	4b6c      	ldr	r3, [pc, #432]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d021      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11d      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050bc:	4b64      	ldr	r3, [pc, #400]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ca:	4b61      	ldr	r3, [pc, #388]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d0:	0e1b      	lsrs	r3, r3, #24
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	019a      	lsls	r2, r3, #6
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	071b      	lsls	r3, r3, #28
 80050f0:	4957      	ldr	r1, [pc, #348]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	d02e      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005122:	d129      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005124:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005138:	0f1b      	lsrs	r3, r3, #28
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	019a      	lsls	r2, r3, #6
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	071b      	lsls	r3, r3, #28
 8005158:	493d      	ldr	r1, [pc, #244]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005160:	4b3b      	ldr	r3, [pc, #236]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005166:	f023 021f 	bic.w	r2, r3, #31
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	3b01      	subs	r3, #1
 8005170:	4937      	ldr	r1, [pc, #220]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01d      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005184:	4b32      	ldr	r3, [pc, #200]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518a:	0e1b      	lsrs	r3, r3, #24
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005192:	4b2f      	ldr	r3, [pc, #188]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005198:	0f1b      	lsrs	r3, r3, #28
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	019a      	lsls	r2, r3, #6
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	431a      	orrs	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	071b      	lsls	r3, r3, #28
 80051b8:	4925      	ldr	r1, [pc, #148]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	019a      	lsls	r2, r3, #6
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	071b      	lsls	r3, r3, #28
 80051e8:	4919      	ldr	r1, [pc, #100]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051f0:	4b17      	ldr	r3, [pc, #92]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a16      	ldr	r2, [pc, #88]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fd ff9e 	bl	800313c <HAL_GetTick>
 8005200:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005204:	f7fd ff9a 	bl	800313c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	@ 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e0d7      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b01      	cmp	r3, #1
 8005226:	f040 80cd 	bne.w	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800522a:	4b09      	ldr	r3, [pc, #36]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a08      	ldr	r2, [pc, #32]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fd ff81 	bl	800313c <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800523c:	e00a      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800523e:	f7fd ff7d 	bl	800313c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b64      	cmp	r3, #100	@ 0x64
 800524a:	d903      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e0ba      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005250:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005254:	4b5e      	ldr	r3, [pc, #376]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800525c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005260:	d0ed      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800527e:	2b00      	cmp	r3, #0
 8005280:	d02e      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d12a      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800528a:	4b51      	ldr	r3, [pc, #324]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005298:	4b4d      	ldr	r3, [pc, #308]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	0f1b      	lsrs	r3, r3, #28
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	019a      	lsls	r2, r3, #6
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	061b      	lsls	r3, r3, #24
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	071b      	lsls	r3, r3, #28
 80052be:	4944      	ldr	r1, [pc, #272]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052c6:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	493d      	ldr	r1, [pc, #244]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d022      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f4:	d11d      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052f6:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	0e1b      	lsrs	r3, r3, #24
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005304:	4b32      	ldr	r3, [pc, #200]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530a:	0f1b      	lsrs	r3, r3, #28
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	019a      	lsls	r2, r3, #6
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	071b      	lsls	r3, r3, #28
 800532a:	4929      	ldr	r1, [pc, #164]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d028      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800533e:	4b24      	ldr	r3, [pc, #144]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	0e1b      	lsrs	r3, r3, #24
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800534c:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	019a      	lsls	r2, r3, #6
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	071b      	lsls	r3, r3, #28
 8005372:	4917      	ldr	r1, [pc, #92]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800537a:	4b15      	ldr	r3, [pc, #84]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800537c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005380:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	4911      	ldr	r1, [pc, #68]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005390:	4b0f      	ldr	r3, [pc, #60]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a0e      	ldr	r2, [pc, #56]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fd fece 	bl	800313c <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053a4:	f7fd feca 	bl	800313c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	@ 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e007      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c2:	d1ef      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e049      	b.n	800547a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fd fc58 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 f9f6 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e054      	b.n	8005546 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a26      	ldr	r2, [pc, #152]	@ (8005554 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	d01d      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	@ (800555c <HAL_TIM_Base_Start_IT+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005560 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <HAL_TIM_Base_Start_IT+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <HAL_TIM_Base_Start_IT+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <HAL_TIM_Base_Start_IT+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d115      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_TIM_Base_Start_IT+0xec>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b06      	cmp	r3, #6
 8005514:	d015      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551c:	d011      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e008      	b.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e000      	b.n	8005544 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40010400 	.word	0x40010400
 8005568:	40014000 	.word	0x40014000
 800556c:	40001800 	.word	0x40001800
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0202 	mvn.w	r2, #2
 80055a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f905 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8f7 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f908 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0204 	mvn.w	r2, #4
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8db 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8cd 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8de 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b08      	cmp	r3, #8
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0208 	mvn.w	r2, #8
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2204      	movs	r2, #4
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8b1 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8a3 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8b4 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f887 	bl	80057c6 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f879 	bl	80057b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f88a 	bl	80057da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc f8c4 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005702:	2b80      	cmp	r3, #128	@ 0x80
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005710:	2b80      	cmp	r3, #128	@ 0x80
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f91a 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005732:	d10e      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b80      	cmp	r3, #128	@ 0x80
 8005740:	d107      	bne.n	8005752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f90d 	bl	800596c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d10e      	bne.n	800577e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576a:	2b40      	cmp	r3, #64	@ 0x40
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f838 	bl	80057ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b20      	cmp	r3, #32
 800578a:	d10e      	bne.n	80057aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d107      	bne.n	80057aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f06f 0220 	mvn.w	r2, #32
 80057a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8cd 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d00f      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3d      	ldr	r2, [pc, #244]	@ (800591c <TIM_Base_SetConfig+0x118>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3c      	ldr	r2, [pc, #240]	@ (8005920 <TIM_Base_SetConfig+0x11c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3b      	ldr	r2, [pc, #236]	@ (8005924 <TIM_Base_SetConfig+0x120>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3a      	ldr	r2, [pc, #232]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800584a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2f      	ldr	r2, [pc, #188]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d02b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005864:	d027      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2c      	ldr	r2, [pc, #176]	@ (800591c <TIM_Base_SetConfig+0x118>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d023      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2b      	ldr	r2, [pc, #172]	@ (8005920 <TIM_Base_SetConfig+0x11c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01f      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2a      	ldr	r2, [pc, #168]	@ (8005924 <TIM_Base_SetConfig+0x120>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a29      	ldr	r2, [pc, #164]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d017      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a28      	ldr	r2, [pc, #160]	@ (800592c <TIM_Base_SetConfig+0x128>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a27      	ldr	r2, [pc, #156]	@ (8005930 <TIM_Base_SetConfig+0x12c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00f      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <TIM_Base_SetConfig+0x130>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00b      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a25      	ldr	r2, [pc, #148]	@ (8005938 <TIM_Base_SetConfig+0x134>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d007      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a24      	ldr	r2, [pc, #144]	@ (800593c <TIM_Base_SetConfig+0x138>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a23      	ldr	r2, [pc, #140]	@ (8005940 <TIM_Base_SetConfig+0x13c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d108      	bne.n	80058c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005918 <TIM_Base_SetConfig+0x114>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0xf8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005928 <TIM_Base_SetConfig+0x124>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d103      	bne.n	8005904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	615a      	str	r2, [r3, #20]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40010400 	.word	0x40010400
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400
 8005934:	40014800 	.word	0x40014800
 8005938:	40001800 	.word	0x40001800
 800593c:	40001c00 	.word	0x40001c00
 8005940:	40002000 	.word	0x40002000

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e040      	b.n	8005a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fd f9aa 	bl	8002cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2224      	movs	r2, #36	@ 0x24
 80059ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fbe6 	bl	8006190 <UART_SetConfig>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e022      	b.n	8005a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fe3e 	bl	8006658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fec5 	bl	800679c <UART_CheckIdleState>
 8005a12:	4603      	mov	r3, r0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	@ 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d171      	bne.n	8005b18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Transmit+0x24>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e06a      	b.n	8005b1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2221      	movs	r2, #33	@ 0x21
 8005a50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a52:	f7fd fb73 	bl	800313c <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a70:	d108      	bne.n	8005a84 <HAL_UART_Transmit+0x68>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e003      	b.n	8005a8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a8c:	e02c      	b.n	8005ae8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	2180      	movs	r1, #128	@ 0x80
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 feb6 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e038      	b.n	8005b1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e007      	b.n	8005ad6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1cc      	bne.n	8005a8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2140      	movs	r1, #64	@ 0x40
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fe83 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e005      	b.n	8005b1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08a      	sub	sp, #40	@ 0x28
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d132      	bne.n	8005ba0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_UART_Receive_IT+0x24>
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e02b      	b.n	8005ba2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	69f9      	ldr	r1, [r7, #28]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fefe 	bl	8006998 <UART_Start_Receive_IT>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3728      	adds	r7, #40	@ 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b0ba      	sub	sp, #232	@ 0xe8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005bd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005bda:	4013      	ands	r3, r2
 8005bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8297 	beq.w	8006138 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
      }
      return;
 8005c12:	e291      	b.n	8006138 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8117 	beq.w	8005e4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c2e:	4b85      	ldr	r3, [pc, #532]	@ (8005e44 <HAL_UART_IRQHandler+0x298>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 810a 	beq.w	8005e4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d011      	beq.n	8005c68 <HAL_UART_IRQHandler+0xbc>
 8005c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2201      	movs	r2, #1
 8005c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5e:	f043 0201 	orr.w	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d011      	beq.n	8005c98 <HAL_UART_IRQHandler+0xec>
 8005c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2202      	movs	r2, #2
 8005c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d011      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
 8005ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cbe:	f043 0202 	orr.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d017      	beq.n	8005d04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ce4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfa:	f043 0208 	orr.w	r2, r3, #8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_UART_IRQHandler+0x18a>
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 81fd 	beq.w	800613c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00d      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d005      	beq.n	8005d8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04f      	beq.n	8005e2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fec8 	bl	8006b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	d141      	bne.n	8005e26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1d9      	bne.n	8005da2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfa:	4a13      	ldr	r2, [pc, #76]	@ (8005e48 <HAL_UART_IRQHandler+0x29c>)
 8005dfc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe f80c 	bl	8003e20 <HAL_DMA_Abort_IT>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d017      	beq.n	8005e3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	e00f      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9a0 	bl	8006164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e00b      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f99c 	bl	8006164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f998 	bl	8006164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e3c:	e17e      	b.n	800613c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3e:	bf00      	nop
    return;
 8005e40:	e17c      	b.n	800613c <HAL_UART_IRQHandler+0x590>
 8005e42:	bf00      	nop
 8005e44:	04000120 	.word	0x04000120
 8005e48:	08006bed 	.word	0x08006bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 814c 	bne.w	80060ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8145 	beq.w	80060ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 813e 	beq.w	80060ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	f040 80b6 	bne.w	8005ff6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8150 	beq.w	8006140 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	f080 8148 	bcs.w	8006140 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec4:	f000 8086 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ef6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1da      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e1      	bne.n	8005f12 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e3      	bne.n	8005f4e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e4      	bne.n	8005f94 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd feb6 	bl	8003d40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8c2 	bl	8006178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ff4:	e0a4      	b.n	8006140 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006002:	b29b      	uxth	r3, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8096 	beq.w	8006144 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8091 	beq.w	8006144 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006044:	647b      	str	r3, [r7, #68]	@ 0x44
 8006046:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800604a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e4      	bne.n	8006022 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	623b      	str	r3, [r7, #32]
   return(result);
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800607c:	633a      	str	r2, [r7, #48]	@ 0x30
 800607e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e3      	bne.n	8006058 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f023 0310 	bic.w	r3, r3, #16
 80060b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	69b9      	ldr	r1, [r7, #24]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	617b      	str	r3, [r7, #20]
   return(result);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e4      	bne.n	80060a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f846 	bl	8006178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ec:	e02a      	b.n	8006144 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01c      	beq.n	8006148 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
    }
    return;
 8006116:	e017      	b.n	8006148 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d012      	beq.n	800614a <HAL_UART_IRQHandler+0x59e>
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00c      	beq.n	800614a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd71 	bl	8006c18 <UART_EndTransmit_IT>
    return;
 8006136:	e008      	b.n	800614a <HAL_UART_IRQHandler+0x59e>
      return;
 8006138:	bf00      	nop
 800613a:	e006      	b.n	800614a <HAL_UART_IRQHandler+0x59e>
    return;
 800613c:	bf00      	nop
 800613e:	e004      	b.n	800614a <HAL_UART_IRQHandler+0x59e>
      return;
 8006140:	bf00      	nop
 8006142:	e002      	b.n	800614a <HAL_UART_IRQHandler+0x59e>
      return;
 8006144:	bf00      	nop
 8006146:	e000      	b.n	800614a <HAL_UART_IRQHandler+0x59e>
    return;
 8006148:	bf00      	nop
  }

}
 800614a:	37e8      	adds	r7, #232	@ 0xe8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4ba6      	ldr	r3, [pc, #664]	@ (8006454 <UART_SetConfig+0x2c4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a94      	ldr	r2, [pc, #592]	@ (8006458 <UART_SetConfig+0x2c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d120      	bne.n	800624e <UART_SetConfig+0xbe>
 800620c:	4b93      	ldr	r3, [pc, #588]	@ (800645c <UART_SetConfig+0x2cc>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d816      	bhi.n	8006248 <UART_SetConfig+0xb8>
 800621a:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <UART_SetConfig+0x90>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006237 	.word	0x08006237
 800622c:	08006243 	.word	0x08006243
 8006230:	2301      	movs	r3, #1
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e150      	b.n	80064d8 <UART_SetConfig+0x348>
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e14d      	b.n	80064d8 <UART_SetConfig+0x348>
 800623c:	2304      	movs	r3, #4
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e14a      	b.n	80064d8 <UART_SetConfig+0x348>
 8006242:	2308      	movs	r3, #8
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e147      	b.n	80064d8 <UART_SetConfig+0x348>
 8006248:	2310      	movs	r3, #16
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e144      	b.n	80064d8 <UART_SetConfig+0x348>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a83      	ldr	r2, [pc, #524]	@ (8006460 <UART_SetConfig+0x2d0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d132      	bne.n	80062be <UART_SetConfig+0x12e>
 8006258:	4b80      	ldr	r3, [pc, #512]	@ (800645c <UART_SetConfig+0x2cc>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d828      	bhi.n	80062b8 <UART_SetConfig+0x128>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0xdc>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062b9 	.word	0x080062b9
 8006274:	080062b9 	.word	0x080062b9
 8006278:	080062b9 	.word	0x080062b9
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062b9 	.word	0x080062b9
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062b9 	.word	0x080062b9
 800628c:	080062a7 	.word	0x080062a7
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	2300      	movs	r3, #0
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e118      	b.n	80064d8 <UART_SetConfig+0x348>
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e115      	b.n	80064d8 <UART_SetConfig+0x348>
 80062ac:	2304      	movs	r3, #4
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e112      	b.n	80064d8 <UART_SetConfig+0x348>
 80062b2:	2308      	movs	r3, #8
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e10f      	b.n	80064d8 <UART_SetConfig+0x348>
 80062b8:	2310      	movs	r3, #16
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e10c      	b.n	80064d8 <UART_SetConfig+0x348>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a68      	ldr	r2, [pc, #416]	@ (8006464 <UART_SetConfig+0x2d4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d120      	bne.n	800630a <UART_SetConfig+0x17a>
 80062c8:	4b64      	ldr	r3, [pc, #400]	@ (800645c <UART_SetConfig+0x2cc>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062d2:	2b30      	cmp	r3, #48	@ 0x30
 80062d4:	d013      	beq.n	80062fe <UART_SetConfig+0x16e>
 80062d6:	2b30      	cmp	r3, #48	@ 0x30
 80062d8:	d814      	bhi.n	8006304 <UART_SetConfig+0x174>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d009      	beq.n	80062f2 <UART_SetConfig+0x162>
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d810      	bhi.n	8006304 <UART_SetConfig+0x174>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <UART_SetConfig+0x15c>
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d006      	beq.n	80062f8 <UART_SetConfig+0x168>
 80062ea:	e00b      	b.n	8006304 <UART_SetConfig+0x174>
 80062ec:	2300      	movs	r3, #0
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e0f2      	b.n	80064d8 <UART_SetConfig+0x348>
 80062f2:	2302      	movs	r3, #2
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e0ef      	b.n	80064d8 <UART_SetConfig+0x348>
 80062f8:	2304      	movs	r3, #4
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e0ec      	b.n	80064d8 <UART_SetConfig+0x348>
 80062fe:	2308      	movs	r3, #8
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e0e9      	b.n	80064d8 <UART_SetConfig+0x348>
 8006304:	2310      	movs	r3, #16
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e0e6      	b.n	80064d8 <UART_SetConfig+0x348>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a56      	ldr	r2, [pc, #344]	@ (8006468 <UART_SetConfig+0x2d8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d120      	bne.n	8006356 <UART_SetConfig+0x1c6>
 8006314:	4b51      	ldr	r3, [pc, #324]	@ (800645c <UART_SetConfig+0x2cc>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800631e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006320:	d013      	beq.n	800634a <UART_SetConfig+0x1ba>
 8006322:	2bc0      	cmp	r3, #192	@ 0xc0
 8006324:	d814      	bhi.n	8006350 <UART_SetConfig+0x1c0>
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d009      	beq.n	800633e <UART_SetConfig+0x1ae>
 800632a:	2b80      	cmp	r3, #128	@ 0x80
 800632c:	d810      	bhi.n	8006350 <UART_SetConfig+0x1c0>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <UART_SetConfig+0x1a8>
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d006      	beq.n	8006344 <UART_SetConfig+0x1b4>
 8006336:	e00b      	b.n	8006350 <UART_SetConfig+0x1c0>
 8006338:	2300      	movs	r3, #0
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e0cc      	b.n	80064d8 <UART_SetConfig+0x348>
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e0c9      	b.n	80064d8 <UART_SetConfig+0x348>
 8006344:	2304      	movs	r3, #4
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e0c6      	b.n	80064d8 <UART_SetConfig+0x348>
 800634a:	2308      	movs	r3, #8
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e0c3      	b.n	80064d8 <UART_SetConfig+0x348>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e0c0      	b.n	80064d8 <UART_SetConfig+0x348>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a44      	ldr	r2, [pc, #272]	@ (800646c <UART_SetConfig+0x2dc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d125      	bne.n	80063ac <UART_SetConfig+0x21c>
 8006360:	4b3e      	ldr	r3, [pc, #248]	@ (800645c <UART_SetConfig+0x2cc>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800636a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800636e:	d017      	beq.n	80063a0 <UART_SetConfig+0x210>
 8006370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006374:	d817      	bhi.n	80063a6 <UART_SetConfig+0x216>
 8006376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637a:	d00b      	beq.n	8006394 <UART_SetConfig+0x204>
 800637c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006380:	d811      	bhi.n	80063a6 <UART_SetConfig+0x216>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <UART_SetConfig+0x1fe>
 8006386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638a:	d006      	beq.n	800639a <UART_SetConfig+0x20a>
 800638c:	e00b      	b.n	80063a6 <UART_SetConfig+0x216>
 800638e:	2300      	movs	r3, #0
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e0a1      	b.n	80064d8 <UART_SetConfig+0x348>
 8006394:	2302      	movs	r3, #2
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e09e      	b.n	80064d8 <UART_SetConfig+0x348>
 800639a:	2304      	movs	r3, #4
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e09b      	b.n	80064d8 <UART_SetConfig+0x348>
 80063a0:	2308      	movs	r3, #8
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e098      	b.n	80064d8 <UART_SetConfig+0x348>
 80063a6:	2310      	movs	r3, #16
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e095      	b.n	80064d8 <UART_SetConfig+0x348>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <UART_SetConfig+0x2e0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d125      	bne.n	8006402 <UART_SetConfig+0x272>
 80063b6:	4b29      	ldr	r3, [pc, #164]	@ (800645c <UART_SetConfig+0x2cc>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063c4:	d017      	beq.n	80063f6 <UART_SetConfig+0x266>
 80063c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ca:	d817      	bhi.n	80063fc <UART_SetConfig+0x26c>
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d0:	d00b      	beq.n	80063ea <UART_SetConfig+0x25a>
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d6:	d811      	bhi.n	80063fc <UART_SetConfig+0x26c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <UART_SetConfig+0x254>
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d006      	beq.n	80063f0 <UART_SetConfig+0x260>
 80063e2:	e00b      	b.n	80063fc <UART_SetConfig+0x26c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e076      	b.n	80064d8 <UART_SetConfig+0x348>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e073      	b.n	80064d8 <UART_SetConfig+0x348>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e070      	b.n	80064d8 <UART_SetConfig+0x348>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e06d      	b.n	80064d8 <UART_SetConfig+0x348>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e06a      	b.n	80064d8 <UART_SetConfig+0x348>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <UART_SetConfig+0x2e4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d138      	bne.n	800647e <UART_SetConfig+0x2ee>
 800640c:	4b13      	ldr	r3, [pc, #76]	@ (800645c <UART_SetConfig+0x2cc>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006416:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800641a:	d017      	beq.n	800644c <UART_SetConfig+0x2bc>
 800641c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006420:	d82a      	bhi.n	8006478 <UART_SetConfig+0x2e8>
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006426:	d00b      	beq.n	8006440 <UART_SetConfig+0x2b0>
 8006428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642c:	d824      	bhi.n	8006478 <UART_SetConfig+0x2e8>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <UART_SetConfig+0x2aa>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006436:	d006      	beq.n	8006446 <UART_SetConfig+0x2b6>
 8006438:	e01e      	b.n	8006478 <UART_SetConfig+0x2e8>
 800643a:	2300      	movs	r3, #0
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e04b      	b.n	80064d8 <UART_SetConfig+0x348>
 8006440:	2302      	movs	r3, #2
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e048      	b.n	80064d8 <UART_SetConfig+0x348>
 8006446:	2304      	movs	r3, #4
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e045      	b.n	80064d8 <UART_SetConfig+0x348>
 800644c:	2308      	movs	r3, #8
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e042      	b.n	80064d8 <UART_SetConfig+0x348>
 8006452:	bf00      	nop
 8006454:	efff69f3 	.word	0xefff69f3
 8006458:	40011000 	.word	0x40011000
 800645c:	40023800 	.word	0x40023800
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	40011400 	.word	0x40011400
 8006474:	40007800 	.word	0x40007800
 8006478:	2310      	movs	r3, #16
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e02c      	b.n	80064d8 <UART_SetConfig+0x348>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a72      	ldr	r2, [pc, #456]	@ (800664c <UART_SetConfig+0x4bc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d125      	bne.n	80064d4 <UART_SetConfig+0x344>
 8006488:	4b71      	ldr	r3, [pc, #452]	@ (8006650 <UART_SetConfig+0x4c0>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006492:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006496:	d017      	beq.n	80064c8 <UART_SetConfig+0x338>
 8006498:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800649c:	d817      	bhi.n	80064ce <UART_SetConfig+0x33e>
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a2:	d00b      	beq.n	80064bc <UART_SetConfig+0x32c>
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a8:	d811      	bhi.n	80064ce <UART_SetConfig+0x33e>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <UART_SetConfig+0x326>
 80064ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064b2:	d006      	beq.n	80064c2 <UART_SetConfig+0x332>
 80064b4:	e00b      	b.n	80064ce <UART_SetConfig+0x33e>
 80064b6:	2300      	movs	r3, #0
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e00d      	b.n	80064d8 <UART_SetConfig+0x348>
 80064bc:	2302      	movs	r3, #2
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e00a      	b.n	80064d8 <UART_SetConfig+0x348>
 80064c2:	2304      	movs	r3, #4
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e007      	b.n	80064d8 <UART_SetConfig+0x348>
 80064c8:	2308      	movs	r3, #8
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x348>
 80064ce:	2310      	movs	r3, #16
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e001      	b.n	80064d8 <UART_SetConfig+0x348>
 80064d4:	2310      	movs	r3, #16
 80064d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e0:	d15b      	bne.n	800659a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d828      	bhi.n	800653a <UART_SetConfig+0x3aa>
 80064e8:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <UART_SetConfig+0x360>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653b 	.word	0x0800653b
 8006500:	0800652b 	.word	0x0800652b
 8006504:	0800653b 	.word	0x0800653b
 8006508:	0800653b 	.word	0x0800653b
 800650c:	0800653b 	.word	0x0800653b
 8006510:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fe fb46 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8006518:	61b8      	str	r0, [r7, #24]
        break;
 800651a:	e013      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fe fb56 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8006520:	61b8      	str	r0, [r7, #24]
        break;
 8006522:	e00f      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b4b      	ldr	r3, [pc, #300]	@ (8006654 <UART_SetConfig+0x4c4>)
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e00c      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fe fa69 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 800652e:	61b8      	str	r0, [r7, #24]
        break;
 8006530:	e008      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e004      	b.n	8006544 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	77bb      	strb	r3, [r7, #30]
        break;
 8006542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d074      	beq.n	8006634 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	005a      	lsls	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d916      	bls.n	8006594 <UART_SetConfig+0x404>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656c:	d212      	bcs.n	8006594 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f023 030f 	bic.w	r3, r3, #15
 8006576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	b29a      	uxth	r2, r3
 8006584:	89fb      	ldrh	r3, [r7, #14]
 8006586:	4313      	orrs	r3, r2
 8006588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	89fa      	ldrh	r2, [r7, #14]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	e04f      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	77bb      	strb	r3, [r7, #30]
 8006598:	e04c      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d828      	bhi.n	80065f2 <UART_SetConfig+0x462>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0x418>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe faea 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e013      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe fafa 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 80065d8:	61b8      	str	r0, [r7, #24]
        break;
 80065da:	e00f      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006654 <UART_SetConfig+0x4c4>)
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e00c      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe fa0d 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80065e6:	61b8      	str	r0, [r7, #24]
        break;
 80065e8:	e008      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ee:	61bb      	str	r3, [r7, #24]
        break;
 80065f0:	e004      	b.n	80065fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77bb      	strb	r3, [r7, #30]
        break;
 80065fa:	bf00      	nop
    }

    if (pclk != 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085a      	lsrs	r2, r3, #1
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d909      	bls.n	8006630 <UART_SetConfig+0x4a0>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006622:	d205      	bcs.n	8006630 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e001      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006640:	7fbb      	ldrb	r3, [r7, #30]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40007c00 	.word	0x40007c00
 8006650:	40023800 	.word	0x40023800
 8006654:	00f42400 	.word	0x00f42400

08006658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01a      	beq.n	800676e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006756:	d10a      	bne.n	800676e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ac:	f7fc fcc6 	bl	800313c <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10e      	bne.n	80067de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f81b 	bl	800680a <UART_WaitOnFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e011      	b.n	8006802 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b09c      	sub	sp, #112	@ 0x70
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681a:	e0a7      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	f000 80a3 	beq.w	800696c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fc fc89 	bl	800313c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <UART_WaitOnFlagUntilTimeout+0x32>
 8006836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006838:	2b00      	cmp	r3, #0
 800683a:	d13f      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800684a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006850:	667b      	str	r3, [r7, #100]	@ 0x64
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800685a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800685c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006860:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	663b      	str	r3, [r7, #96]	@ 0x60
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800688e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006890:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800689c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e5      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e068      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d050      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d8:	d148      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80068f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
 8006904:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e6      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	613b      	str	r3, [r7, #16]
   return(result);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006936:	623a      	str	r2, [r7, #32]
 8006938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	69f9      	ldr	r1, [r7, #28]
 800693c:	6a3a      	ldr	r2, [r7, #32]
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	61bb      	str	r3, [r7, #24]
   return(result);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e5      	bne.n	8006916 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e010      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	429a      	cmp	r2, r3
 8006988:	f43f af48 	beq.w	800681c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3770      	adds	r7, #112	@ 0x70
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006998:	b480      	push	{r7}
 800699a:	b097      	sub	sp, #92	@ 0x5c
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ca:	d10e      	bne.n	80069ea <UART_Start_Receive_IT+0x52>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <UART_Start_Receive_IT+0x48>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80069da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069de:	e02d      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	22ff      	movs	r2, #255	@ 0xff
 80069e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069e8:	e028      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <UART_Start_Receive_IT+0x76>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d104      	bne.n	8006a04 <UART_Start_Receive_IT+0x6c>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	22ff      	movs	r2, #255	@ 0xff
 80069fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a02:	e01b      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	227f      	movs	r2, #127	@ 0x7f
 8006a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a0c:	e016      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a16:	d10d      	bne.n	8006a34 <UART_Start_Receive_IT+0x9c>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <UART_Start_Receive_IT+0x92>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	227f      	movs	r2, #127	@ 0x7f
 8006a24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a28:	e008      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	223f      	movs	r2, #63	@ 0x3f
 8006a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a32:	e003      	b.n	8006a3c <UART_Start_Receive_IT+0xa4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2222      	movs	r2, #34	@ 0x22
 8006a48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a6c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a6e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a88:	d107      	bne.n	8006a9a <UART_Start_Receive_IT+0x102>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a21      	ldr	r2, [pc, #132]	@ (8006b1c <UART_Start_Receive_IT+0x184>)
 8006a96:	669a      	str	r2, [r3, #104]	@ 0x68
 8006a98:	e002      	b.n	8006aa0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	@ (8006b20 <UART_Start_Receive_IT+0x188>)
 8006a9e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d019      	beq.n	8006adc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006acc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <UART_Start_Receive_IT+0x110>
 8006ada:	e018      	b.n	8006b0e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f043 0320 	orr.w	r3, r3, #32
 8006af0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	69f9      	ldr	r1, [r7, #28]
 8006b00:	6a3a      	ldr	r2, [r7, #32]
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	375c      	adds	r7, #92	@ 0x5c
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	08006dd3 	.word	0x08006dd3
 8006b20:	08006c6d 	.word	0x08006c6d

08006b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b095      	sub	sp, #84	@ 0x54
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e6      	bne.n	8006b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d118      	bne.n	8006bcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6979      	ldr	r1, [r7, #20]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e6      	bne.n	8006b9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006be0:	bf00      	nop
 8006be2:	3754      	adds	r7, #84	@ 0x54
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff faaa 	bl	8006164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c10:	bf00      	nop
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fa76 	bl	8006150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c64:	bf00      	nop
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b096      	sub	sp, #88	@ 0x58
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c7a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c84:	2b22      	cmp	r3, #34	@ 0x22
 8006c86:	f040 8098 	bne.w	8006dba <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c94:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006c98:	b2d9      	uxtb	r1, r3
 8006c9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca4:	400a      	ands	r2, r1
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d17b      	bne.n	8006dca <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e6      	bne.n	8006cd2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	623b      	str	r3, [r7, #32]
   return(result);
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d24:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d12e      	bne.n	8006db2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0310 	bic.w	r3, r3, #16
 8006d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	617b      	str	r3, [r7, #20]
   return(result);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d103      	bne.n	8006da2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff f9e4 	bl	8006178 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006db0:	e00b      	b.n	8006dca <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb f8dc 	bl	8001f70 <HAL_UART_RxCpltCallback>
}
 8006db8:	e007      	b.n	8006dca <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0208 	orr.w	r2, r2, #8
 8006dc8:	619a      	str	r2, [r3, #24]
}
 8006dca:	bf00      	nop
 8006dcc:	3758      	adds	r7, #88	@ 0x58
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b096      	sub	sp, #88	@ 0x58
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006de0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dea:	2b22      	cmp	r3, #34	@ 0x22
 8006dec:	f040 8098 	bne.w	8006f20 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfe:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e00:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006e04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e08:	4013      	ands	r3, r2
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	1c9a      	adds	r2, r3, #2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d17b      	bne.n	8006f30 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e5      	bne.n	8006e6a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d12e      	bne.n	8006f18 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0310 	bic.w	r3, r3, #16
 8006ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6979      	ldr	r1, [r7, #20]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	613b      	str	r3, [r7, #16]
   return(result);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d103      	bne.n	8006f08 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2210      	movs	r2, #16
 8006f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff f931 	bl	8006178 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f16:	e00b      	b.n	8006f30 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fb f829 	bl	8001f70 <HAL_UART_RxCpltCallback>
}
 8006f1e:	e007      	b.n	8006f30 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	619a      	str	r2, [r3, #24]
}
 8006f30:	bf00      	nop
 8006f32:	3758      	adds	r7, #88	@ 0x58
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <__cvt>:
 8006f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	ec57 6b10 	vmov	r6, r7, d0
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4619      	mov	r1, r3
 8006f46:	463b      	mov	r3, r7
 8006f48:	bfbb      	ittet	lt
 8006f4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f4e:	461f      	movlt	r7, r3
 8006f50:	2300      	movge	r3, #0
 8006f52:	232d      	movlt	r3, #45	@ 0x2d
 8006f54:	700b      	strb	r3, [r1, #0]
 8006f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f5c:	4691      	mov	r9, r2
 8006f5e:	f023 0820 	bic.w	r8, r3, #32
 8006f62:	bfbc      	itt	lt
 8006f64:	4632      	movlt	r2, r6
 8006f66:	4616      	movlt	r6, r2
 8006f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f6c:	d005      	beq.n	8006f7a <__cvt+0x42>
 8006f6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f72:	d100      	bne.n	8006f76 <__cvt+0x3e>
 8006f74:	3401      	adds	r4, #1
 8006f76:	2102      	movs	r1, #2
 8006f78:	e000      	b.n	8006f7c <__cvt+0x44>
 8006f7a:	2103      	movs	r1, #3
 8006f7c:	ab03      	add	r3, sp, #12
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	ab02      	add	r3, sp, #8
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	ec47 6b10 	vmov	d0, r6, r7
 8006f88:	4653      	mov	r3, sl
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	f001 f888 	bl	80080a0 <_dtoa_r>
 8006f90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f94:	4605      	mov	r5, r0
 8006f96:	d119      	bne.n	8006fcc <__cvt+0x94>
 8006f98:	f019 0f01 	tst.w	r9, #1
 8006f9c:	d00e      	beq.n	8006fbc <__cvt+0x84>
 8006f9e:	eb00 0904 	add.w	r9, r0, r4
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fdbd 	bl	8000b28 <__aeabi_dcmpeq>
 8006fae:	b108      	cbz	r0, 8006fb4 <__cvt+0x7c>
 8006fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fb4:	2230      	movs	r2, #48	@ 0x30
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	454b      	cmp	r3, r9
 8006fba:	d31e      	bcc.n	8006ffa <__cvt+0xc2>
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fc0:	1b5b      	subs	r3, r3, r5
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	b004      	add	sp, #16
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fd0:	eb00 0904 	add.w	r9, r0, r4
 8006fd4:	d1e5      	bne.n	8006fa2 <__cvt+0x6a>
 8006fd6:	7803      	ldrb	r3, [r0, #0]
 8006fd8:	2b30      	cmp	r3, #48	@ 0x30
 8006fda:	d10a      	bne.n	8006ff2 <__cvt+0xba>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 fda0 	bl	8000b28 <__aeabi_dcmpeq>
 8006fe8:	b918      	cbnz	r0, 8006ff2 <__cvt+0xba>
 8006fea:	f1c4 0401 	rsb	r4, r4, #1
 8006fee:	f8ca 4000 	str.w	r4, [sl]
 8006ff2:	f8da 3000 	ldr.w	r3, [sl]
 8006ff6:	4499      	add	r9, r3
 8006ff8:	e7d3      	b.n	8006fa2 <__cvt+0x6a>
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	9103      	str	r1, [sp, #12]
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e7d9      	b.n	8006fb6 <__cvt+0x7e>

08007002 <__exponent>:
 8007002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007004:	2900      	cmp	r1, #0
 8007006:	bfba      	itte	lt
 8007008:	4249      	neglt	r1, r1
 800700a:	232d      	movlt	r3, #45	@ 0x2d
 800700c:	232b      	movge	r3, #43	@ 0x2b
 800700e:	2909      	cmp	r1, #9
 8007010:	7002      	strb	r2, [r0, #0]
 8007012:	7043      	strb	r3, [r0, #1]
 8007014:	dd29      	ble.n	800706a <__exponent+0x68>
 8007016:	f10d 0307 	add.w	r3, sp, #7
 800701a:	461d      	mov	r5, r3
 800701c:	270a      	movs	r7, #10
 800701e:	461a      	mov	r2, r3
 8007020:	fbb1 f6f7 	udiv	r6, r1, r7
 8007024:	fb07 1416 	mls	r4, r7, r6, r1
 8007028:	3430      	adds	r4, #48	@ 0x30
 800702a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800702e:	460c      	mov	r4, r1
 8007030:	2c63      	cmp	r4, #99	@ 0x63
 8007032:	f103 33ff 	add.w	r3, r3, #4294967295
 8007036:	4631      	mov	r1, r6
 8007038:	dcf1      	bgt.n	800701e <__exponent+0x1c>
 800703a:	3130      	adds	r1, #48	@ 0x30
 800703c:	1e94      	subs	r4, r2, #2
 800703e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007042:	1c41      	adds	r1, r0, #1
 8007044:	4623      	mov	r3, r4
 8007046:	42ab      	cmp	r3, r5
 8007048:	d30a      	bcc.n	8007060 <__exponent+0x5e>
 800704a:	f10d 0309 	add.w	r3, sp, #9
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	42ac      	cmp	r4, r5
 8007052:	bf88      	it	hi
 8007054:	2300      	movhi	r3, #0
 8007056:	3302      	adds	r3, #2
 8007058:	4403      	add	r3, r0
 800705a:	1a18      	subs	r0, r3, r0
 800705c:	b003      	add	sp, #12
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007060:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007064:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007068:	e7ed      	b.n	8007046 <__exponent+0x44>
 800706a:	2330      	movs	r3, #48	@ 0x30
 800706c:	3130      	adds	r1, #48	@ 0x30
 800706e:	7083      	strb	r3, [r0, #2]
 8007070:	70c1      	strb	r1, [r0, #3]
 8007072:	1d03      	adds	r3, r0, #4
 8007074:	e7f1      	b.n	800705a <__exponent+0x58>
	...

08007078 <_printf_float>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	b08d      	sub	sp, #52	@ 0x34
 800707e:	460c      	mov	r4, r1
 8007080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007084:	4616      	mov	r6, r2
 8007086:	461f      	mov	r7, r3
 8007088:	4605      	mov	r5, r0
 800708a:	f000 ff01 	bl	8007e90 <_localeconv_r>
 800708e:	6803      	ldr	r3, [r0, #0]
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	4618      	mov	r0, r3
 8007094:	f7f9 f91c 	bl	80002d0 <strlen>
 8007098:	2300      	movs	r3, #0
 800709a:	930a      	str	r3, [sp, #40]	@ 0x28
 800709c:	f8d8 3000 	ldr.w	r3, [r8]
 80070a0:	9005      	str	r0, [sp, #20]
 80070a2:	3307      	adds	r3, #7
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	f103 0208 	add.w	r2, r3, #8
 80070ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070b0:	f8d4 b000 	ldr.w	fp, [r4]
 80070b4:	f8c8 2000 	str.w	r2, [r8]
 80070b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80070c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007340 <_printf_float+0x2c8>)
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	f7f9 fd5a 	bl	8000b8c <__aeabi_dcmpun>
 80070d8:	bb70      	cbnz	r0, 8007138 <_printf_float+0xc0>
 80070da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070de:	4b98      	ldr	r3, [pc, #608]	@ (8007340 <_printf_float+0x2c8>)
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	f7f9 fd34 	bl	8000b50 <__aeabi_dcmple>
 80070e8:	bb30      	cbnz	r0, 8007138 <_printf_float+0xc0>
 80070ea:	2200      	movs	r2, #0
 80070ec:	2300      	movs	r3, #0
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 fd23 	bl	8000b3c <__aeabi_dcmplt>
 80070f6:	b110      	cbz	r0, 80070fe <_printf_float+0x86>
 80070f8:	232d      	movs	r3, #45	@ 0x2d
 80070fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fe:	4a91      	ldr	r2, [pc, #580]	@ (8007344 <_printf_float+0x2cc>)
 8007100:	4b91      	ldr	r3, [pc, #580]	@ (8007348 <_printf_float+0x2d0>)
 8007102:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007106:	bf94      	ite	ls
 8007108:	4690      	movls	r8, r2
 800710a:	4698      	movhi	r8, r3
 800710c:	2303      	movs	r3, #3
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	f02b 0304 	bic.w	r3, fp, #4
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	f04f 0900 	mov.w	r9, #0
 800711a:	9700      	str	r7, [sp, #0]
 800711c:	4633      	mov	r3, r6
 800711e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f9d2 	bl	80074cc <_printf_common>
 8007128:	3001      	adds	r0, #1
 800712a:	f040 808d 	bne.w	8007248 <_printf_float+0x1d0>
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	b00d      	add	sp, #52	@ 0x34
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	4642      	mov	r2, r8
 800713a:	464b      	mov	r3, r9
 800713c:	4640      	mov	r0, r8
 800713e:	4649      	mov	r1, r9
 8007140:	f7f9 fd24 	bl	8000b8c <__aeabi_dcmpun>
 8007144:	b140      	cbz	r0, 8007158 <_printf_float+0xe0>
 8007146:	464b      	mov	r3, r9
 8007148:	2b00      	cmp	r3, #0
 800714a:	bfbc      	itt	lt
 800714c:	232d      	movlt	r3, #45	@ 0x2d
 800714e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007152:	4a7e      	ldr	r2, [pc, #504]	@ (800734c <_printf_float+0x2d4>)
 8007154:	4b7e      	ldr	r3, [pc, #504]	@ (8007350 <_printf_float+0x2d8>)
 8007156:	e7d4      	b.n	8007102 <_printf_float+0x8a>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800715e:	9206      	str	r2, [sp, #24]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	d13b      	bne.n	80071dc <_printf_float+0x164>
 8007164:	2306      	movs	r3, #6
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800716c:	2300      	movs	r3, #0
 800716e:	6022      	str	r2, [r4, #0]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	ab0a      	add	r3, sp, #40	@ 0x28
 8007174:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007178:	ab09      	add	r3, sp, #36	@ 0x24
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6861      	ldr	r1, [r4, #4]
 800717e:	ec49 8b10 	vmov	d0, r8, r9
 8007182:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007186:	4628      	mov	r0, r5
 8007188:	f7ff fed6 	bl	8006f38 <__cvt>
 800718c:	9b06      	ldr	r3, [sp, #24]
 800718e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007190:	2b47      	cmp	r3, #71	@ 0x47
 8007192:	4680      	mov	r8, r0
 8007194:	d129      	bne.n	80071ea <_printf_float+0x172>
 8007196:	1cc8      	adds	r0, r1, #3
 8007198:	db02      	blt.n	80071a0 <_printf_float+0x128>
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	4299      	cmp	r1, r3
 800719e:	dd41      	ble.n	8007224 <_printf_float+0x1ac>
 80071a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80071a4:	fa5f fa8a 	uxtb.w	sl, sl
 80071a8:	3901      	subs	r1, #1
 80071aa:	4652      	mov	r2, sl
 80071ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80071b2:	f7ff ff26 	bl	8007002 <__exponent>
 80071b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071b8:	1813      	adds	r3, r2, r0
 80071ba:	2a01      	cmp	r2, #1
 80071bc:	4681      	mov	r9, r0
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	dc02      	bgt.n	80071c8 <_printf_float+0x150>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	07d2      	lsls	r2, r2, #31
 80071c6:	d501      	bpl.n	80071cc <_printf_float+0x154>
 80071c8:	3301      	adds	r3, #1
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0a2      	beq.n	800711a <_printf_float+0xa2>
 80071d4:	232d      	movs	r3, #45	@ 0x2d
 80071d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071da:	e79e      	b.n	800711a <_printf_float+0xa2>
 80071dc:	9a06      	ldr	r2, [sp, #24]
 80071de:	2a47      	cmp	r2, #71	@ 0x47
 80071e0:	d1c2      	bne.n	8007168 <_printf_float+0xf0>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1c0      	bne.n	8007168 <_printf_float+0xf0>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e7bd      	b.n	8007166 <_printf_float+0xee>
 80071ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071ee:	d9db      	bls.n	80071a8 <_printf_float+0x130>
 80071f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071f4:	d118      	bne.n	8007228 <_printf_float+0x1b0>
 80071f6:	2900      	cmp	r1, #0
 80071f8:	6863      	ldr	r3, [r4, #4]
 80071fa:	dd0b      	ble.n	8007214 <_printf_float+0x19c>
 80071fc:	6121      	str	r1, [r4, #16]
 80071fe:	b913      	cbnz	r3, 8007206 <_printf_float+0x18e>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	07d0      	lsls	r0, r2, #31
 8007204:	d502      	bpl.n	800720c <_printf_float+0x194>
 8007206:	3301      	adds	r3, #1
 8007208:	440b      	add	r3, r1
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800720e:	f04f 0900 	mov.w	r9, #0
 8007212:	e7db      	b.n	80071cc <_printf_float+0x154>
 8007214:	b913      	cbnz	r3, 800721c <_printf_float+0x1a4>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	07d2      	lsls	r2, r2, #31
 800721a:	d501      	bpl.n	8007220 <_printf_float+0x1a8>
 800721c:	3302      	adds	r3, #2
 800721e:	e7f4      	b.n	800720a <_printf_float+0x192>
 8007220:	2301      	movs	r3, #1
 8007222:	e7f2      	b.n	800720a <_printf_float+0x192>
 8007224:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722a:	4299      	cmp	r1, r3
 800722c:	db05      	blt.n	800723a <_printf_float+0x1c2>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	6121      	str	r1, [r4, #16]
 8007232:	07d8      	lsls	r0, r3, #31
 8007234:	d5ea      	bpl.n	800720c <_printf_float+0x194>
 8007236:	1c4b      	adds	r3, r1, #1
 8007238:	e7e7      	b.n	800720a <_printf_float+0x192>
 800723a:	2900      	cmp	r1, #0
 800723c:	bfd4      	ite	le
 800723e:	f1c1 0202 	rsble	r2, r1, #2
 8007242:	2201      	movgt	r2, #1
 8007244:	4413      	add	r3, r2
 8007246:	e7e0      	b.n	800720a <_printf_float+0x192>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	055a      	lsls	r2, r3, #21
 800724c:	d407      	bmi.n	800725e <_printf_float+0x1e6>
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	4642      	mov	r2, r8
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d12b      	bne.n	80072b4 <_printf_float+0x23c>
 800725c:	e767      	b.n	800712e <_printf_float+0xb6>
 800725e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007262:	f240 80dd 	bls.w	8007420 <_printf_float+0x3a8>
 8007266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	f7f9 fc5b 	bl	8000b28 <__aeabi_dcmpeq>
 8007272:	2800      	cmp	r0, #0
 8007274:	d033      	beq.n	80072de <_printf_float+0x266>
 8007276:	4a37      	ldr	r2, [pc, #220]	@ (8007354 <_printf_float+0x2dc>)
 8007278:	2301      	movs	r3, #1
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f af54 	beq.w	800712e <_printf_float+0xb6>
 8007286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800728a:	4543      	cmp	r3, r8
 800728c:	db02      	blt.n	8007294 <_printf_float+0x21c>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	07d8      	lsls	r0, r3, #31
 8007292:	d50f      	bpl.n	80072b4 <_printf_float+0x23c>
 8007294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af45 	beq.w	800712e <_printf_float+0xb6>
 80072a4:	f04f 0900 	mov.w	r9, #0
 80072a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80072ac:	f104 0a1a 	add.w	sl, r4, #26
 80072b0:	45c8      	cmp	r8, r9
 80072b2:	dc09      	bgt.n	80072c8 <_printf_float+0x250>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	079b      	lsls	r3, r3, #30
 80072b8:	f100 8103 	bmi.w	80074c2 <_printf_float+0x44a>
 80072bc:	68e0      	ldr	r0, [r4, #12]
 80072be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c0:	4298      	cmp	r0, r3
 80072c2:	bfb8      	it	lt
 80072c4:	4618      	movlt	r0, r3
 80072c6:	e734      	b.n	8007132 <_printf_float+0xba>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f af2b 	beq.w	800712e <_printf_float+0xb6>
 80072d8:	f109 0901 	add.w	r9, r9, #1
 80072dc:	e7e8      	b.n	80072b0 <_printf_float+0x238>
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc39      	bgt.n	8007358 <_printf_float+0x2e0>
 80072e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007354 <_printf_float+0x2dc>)
 80072e6:	2301      	movs	r3, #1
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af1d 	beq.w	800712e <_printf_float+0xb6>
 80072f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072f8:	ea59 0303 	orrs.w	r3, r9, r3
 80072fc:	d102      	bne.n	8007304 <_printf_float+0x28c>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	07d9      	lsls	r1, r3, #31
 8007302:	d5d7      	bpl.n	80072b4 <_printf_float+0x23c>
 8007304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	f43f af0d 	beq.w	800712e <_printf_float+0xb6>
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	f104 0b1a 	add.w	fp, r4, #26
 800731c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731e:	425b      	negs	r3, r3
 8007320:	4553      	cmp	r3, sl
 8007322:	dc01      	bgt.n	8007328 <_printf_float+0x2b0>
 8007324:	464b      	mov	r3, r9
 8007326:	e793      	b.n	8007250 <_printf_float+0x1d8>
 8007328:	2301      	movs	r3, #1
 800732a:	465a      	mov	r2, fp
 800732c:	4631      	mov	r1, r6
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	f43f aefb 	beq.w	800712e <_printf_float+0xb6>
 8007338:	f10a 0a01 	add.w	sl, sl, #1
 800733c:	e7ee      	b.n	800731c <_printf_float+0x2a4>
 800733e:	bf00      	nop
 8007340:	7fefffff 	.word	0x7fefffff
 8007344:	0800b7d4 	.word	0x0800b7d4
 8007348:	0800b7d8 	.word	0x0800b7d8
 800734c:	0800b7dc 	.word	0x0800b7dc
 8007350:	0800b7e0 	.word	0x0800b7e0
 8007354:	0800b7e4 	.word	0x0800b7e4
 8007358:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800735a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800735e:	4553      	cmp	r3, sl
 8007360:	bfa8      	it	ge
 8007362:	4653      	movge	r3, sl
 8007364:	2b00      	cmp	r3, #0
 8007366:	4699      	mov	r9, r3
 8007368:	dc36      	bgt.n	80073d8 <_printf_float+0x360>
 800736a:	f04f 0b00 	mov.w	fp, #0
 800736e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007372:	f104 021a 	add.w	r2, r4, #26
 8007376:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007378:	9306      	str	r3, [sp, #24]
 800737a:	eba3 0309 	sub.w	r3, r3, r9
 800737e:	455b      	cmp	r3, fp
 8007380:	dc31      	bgt.n	80073e6 <_printf_float+0x36e>
 8007382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007384:	459a      	cmp	sl, r3
 8007386:	dc3a      	bgt.n	80073fe <_printf_float+0x386>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	07da      	lsls	r2, r3, #31
 800738c:	d437      	bmi.n	80073fe <_printf_float+0x386>
 800738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007390:	ebaa 0903 	sub.w	r9, sl, r3
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	ebaa 0303 	sub.w	r3, sl, r3
 800739a:	4599      	cmp	r9, r3
 800739c:	bfa8      	it	ge
 800739e:	4699      	movge	r9, r3
 80073a0:	f1b9 0f00 	cmp.w	r9, #0
 80073a4:	dc33      	bgt.n	800740e <_printf_float+0x396>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ae:	f104 0b1a 	add.w	fp, r4, #26
 80073b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b4:	ebaa 0303 	sub.w	r3, sl, r3
 80073b8:	eba3 0309 	sub.w	r3, r3, r9
 80073bc:	4543      	cmp	r3, r8
 80073be:	f77f af79 	ble.w	80072b4 <_printf_float+0x23c>
 80073c2:	2301      	movs	r3, #1
 80073c4:	465a      	mov	r2, fp
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	f43f aeae 	beq.w	800712e <_printf_float+0xb6>
 80073d2:	f108 0801 	add.w	r8, r8, #1
 80073d6:	e7ec      	b.n	80073b2 <_printf_float+0x33a>
 80073d8:	4642      	mov	r2, r8
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	d1c2      	bne.n	800736a <_printf_float+0x2f2>
 80073e4:	e6a3      	b.n	800712e <_printf_float+0xb6>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	9206      	str	r2, [sp, #24]
 80073ee:	47b8      	blx	r7
 80073f0:	3001      	adds	r0, #1
 80073f2:	f43f ae9c 	beq.w	800712e <_printf_float+0xb6>
 80073f6:	9a06      	ldr	r2, [sp, #24]
 80073f8:	f10b 0b01 	add.w	fp, fp, #1
 80073fc:	e7bb      	b.n	8007376 <_printf_float+0x2fe>
 80073fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007402:	4631      	mov	r1, r6
 8007404:	4628      	mov	r0, r5
 8007406:	47b8      	blx	r7
 8007408:	3001      	adds	r0, #1
 800740a:	d1c0      	bne.n	800738e <_printf_float+0x316>
 800740c:	e68f      	b.n	800712e <_printf_float+0xb6>
 800740e:	9a06      	ldr	r2, [sp, #24]
 8007410:	464b      	mov	r3, r9
 8007412:	4442      	add	r2, r8
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	d1c3      	bne.n	80073a6 <_printf_float+0x32e>
 800741e:	e686      	b.n	800712e <_printf_float+0xb6>
 8007420:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007424:	f1ba 0f01 	cmp.w	sl, #1
 8007428:	dc01      	bgt.n	800742e <_printf_float+0x3b6>
 800742a:	07db      	lsls	r3, r3, #31
 800742c:	d536      	bpl.n	800749c <_printf_float+0x424>
 800742e:	2301      	movs	r3, #1
 8007430:	4642      	mov	r2, r8
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f ae78 	beq.w	800712e <_printf_float+0xb6>
 800743e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f ae70 	beq.w	800712e <_printf_float+0xb6>
 800744e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800745a:	f7f9 fb65 	bl	8000b28 <__aeabi_dcmpeq>
 800745e:	b9c0      	cbnz	r0, 8007492 <_printf_float+0x41a>
 8007460:	4653      	mov	r3, sl
 8007462:	f108 0201 	add.w	r2, r8, #1
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	d10c      	bne.n	800748a <_printf_float+0x412>
 8007470:	e65d      	b.n	800712e <_printf_float+0xb6>
 8007472:	2301      	movs	r3, #1
 8007474:	465a      	mov	r2, fp
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f ae56 	beq.w	800712e <_printf_float+0xb6>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	45d0      	cmp	r8, sl
 8007488:	dbf3      	blt.n	8007472 <_printf_float+0x3fa>
 800748a:	464b      	mov	r3, r9
 800748c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007490:	e6df      	b.n	8007252 <_printf_float+0x1da>
 8007492:	f04f 0800 	mov.w	r8, #0
 8007496:	f104 0b1a 	add.w	fp, r4, #26
 800749a:	e7f4      	b.n	8007486 <_printf_float+0x40e>
 800749c:	2301      	movs	r3, #1
 800749e:	4642      	mov	r2, r8
 80074a0:	e7e1      	b.n	8007466 <_printf_float+0x3ee>
 80074a2:	2301      	movs	r3, #1
 80074a4:	464a      	mov	r2, r9
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f ae3e 	beq.w	800712e <_printf_float+0xb6>
 80074b2:	f108 0801 	add.w	r8, r8, #1
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074ba:	1a5b      	subs	r3, r3, r1
 80074bc:	4543      	cmp	r3, r8
 80074be:	dcf0      	bgt.n	80074a2 <_printf_float+0x42a>
 80074c0:	e6fc      	b.n	80072bc <_printf_float+0x244>
 80074c2:	f04f 0800 	mov.w	r8, #0
 80074c6:	f104 0919 	add.w	r9, r4, #25
 80074ca:	e7f4      	b.n	80074b6 <_printf_float+0x43e>

080074cc <_printf_common>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	4616      	mov	r6, r2
 80074d2:	4698      	mov	r8, r3
 80074d4:	688a      	ldr	r2, [r1, #8]
 80074d6:	690b      	ldr	r3, [r1, #16]
 80074d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074dc:	4293      	cmp	r3, r2
 80074de:	bfb8      	it	lt
 80074e0:	4613      	movlt	r3, r2
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074e8:	4607      	mov	r7, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	b10a      	cbz	r2, 80074f2 <_printf_common+0x26>
 80074ee:	3301      	adds	r3, #1
 80074f0:	6033      	str	r3, [r6, #0]
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	0699      	lsls	r1, r3, #26
 80074f6:	bf42      	ittt	mi
 80074f8:	6833      	ldrmi	r3, [r6, #0]
 80074fa:	3302      	addmi	r3, #2
 80074fc:	6033      	strmi	r3, [r6, #0]
 80074fe:	6825      	ldr	r5, [r4, #0]
 8007500:	f015 0506 	ands.w	r5, r5, #6
 8007504:	d106      	bne.n	8007514 <_printf_common+0x48>
 8007506:	f104 0a19 	add.w	sl, r4, #25
 800750a:	68e3      	ldr	r3, [r4, #12]
 800750c:	6832      	ldr	r2, [r6, #0]
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	42ab      	cmp	r3, r5
 8007512:	dc26      	bgt.n	8007562 <_printf_common+0x96>
 8007514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	3b00      	subs	r3, #0
 800751c:	bf18      	it	ne
 800751e:	2301      	movne	r3, #1
 8007520:	0692      	lsls	r2, r2, #26
 8007522:	d42b      	bmi.n	800757c <_printf_common+0xb0>
 8007524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007528:	4641      	mov	r1, r8
 800752a:	4638      	mov	r0, r7
 800752c:	47c8      	blx	r9
 800752e:	3001      	adds	r0, #1
 8007530:	d01e      	beq.n	8007570 <_printf_common+0xa4>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	f003 0306 	and.w	r3, r3, #6
 800753a:	2b04      	cmp	r3, #4
 800753c:	bf02      	ittt	eq
 800753e:	68e5      	ldreq	r5, [r4, #12]
 8007540:	6833      	ldreq	r3, [r6, #0]
 8007542:	1aed      	subeq	r5, r5, r3
 8007544:	68a3      	ldr	r3, [r4, #8]
 8007546:	bf0c      	ite	eq
 8007548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800754c:	2500      	movne	r5, #0
 800754e:	4293      	cmp	r3, r2
 8007550:	bfc4      	itt	gt
 8007552:	1a9b      	subgt	r3, r3, r2
 8007554:	18ed      	addgt	r5, r5, r3
 8007556:	2600      	movs	r6, #0
 8007558:	341a      	adds	r4, #26
 800755a:	42b5      	cmp	r5, r6
 800755c:	d11a      	bne.n	8007594 <_printf_common+0xc8>
 800755e:	2000      	movs	r0, #0
 8007560:	e008      	b.n	8007574 <_printf_common+0xa8>
 8007562:	2301      	movs	r3, #1
 8007564:	4652      	mov	r2, sl
 8007566:	4641      	mov	r1, r8
 8007568:	4638      	mov	r0, r7
 800756a:	47c8      	blx	r9
 800756c:	3001      	adds	r0, #1
 800756e:	d103      	bne.n	8007578 <_printf_common+0xac>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007578:	3501      	adds	r5, #1
 800757a:	e7c6      	b.n	800750a <_printf_common+0x3e>
 800757c:	18e1      	adds	r1, r4, r3
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	2030      	movs	r0, #48	@ 0x30
 8007582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007586:	4422      	add	r2, r4
 8007588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800758c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007590:	3302      	adds	r3, #2
 8007592:	e7c7      	b.n	8007524 <_printf_common+0x58>
 8007594:	2301      	movs	r3, #1
 8007596:	4622      	mov	r2, r4
 8007598:	4641      	mov	r1, r8
 800759a:	4638      	mov	r0, r7
 800759c:	47c8      	blx	r9
 800759e:	3001      	adds	r0, #1
 80075a0:	d0e6      	beq.n	8007570 <_printf_common+0xa4>
 80075a2:	3601      	adds	r6, #1
 80075a4:	e7d9      	b.n	800755a <_printf_common+0x8e>
	...

080075a8 <_printf_i>:
 80075a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	7e0f      	ldrb	r7, [r1, #24]
 80075ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075b0:	2f78      	cmp	r7, #120	@ 0x78
 80075b2:	4691      	mov	r9, r2
 80075b4:	4680      	mov	r8, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	469a      	mov	sl, r3
 80075ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075be:	d807      	bhi.n	80075d0 <_printf_i+0x28>
 80075c0:	2f62      	cmp	r7, #98	@ 0x62
 80075c2:	d80a      	bhi.n	80075da <_printf_i+0x32>
 80075c4:	2f00      	cmp	r7, #0
 80075c6:	f000 80d2 	beq.w	800776e <_printf_i+0x1c6>
 80075ca:	2f58      	cmp	r7, #88	@ 0x58
 80075cc:	f000 80b9 	beq.w	8007742 <_printf_i+0x19a>
 80075d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075d8:	e03a      	b.n	8007650 <_printf_i+0xa8>
 80075da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075de:	2b15      	cmp	r3, #21
 80075e0:	d8f6      	bhi.n	80075d0 <_printf_i+0x28>
 80075e2:	a101      	add	r1, pc, #4	@ (adr r1, 80075e8 <_printf_i+0x40>)
 80075e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007655 	.word	0x08007655
 80075f0:	080075d1 	.word	0x080075d1
 80075f4:	080075d1 	.word	0x080075d1
 80075f8:	080075d1 	.word	0x080075d1
 80075fc:	080075d1 	.word	0x080075d1
 8007600:	08007655 	.word	0x08007655
 8007604:	080075d1 	.word	0x080075d1
 8007608:	080075d1 	.word	0x080075d1
 800760c:	080075d1 	.word	0x080075d1
 8007610:	080075d1 	.word	0x080075d1
 8007614:	08007755 	.word	0x08007755
 8007618:	0800767f 	.word	0x0800767f
 800761c:	0800770f 	.word	0x0800770f
 8007620:	080075d1 	.word	0x080075d1
 8007624:	080075d1 	.word	0x080075d1
 8007628:	08007777 	.word	0x08007777
 800762c:	080075d1 	.word	0x080075d1
 8007630:	0800767f 	.word	0x0800767f
 8007634:	080075d1 	.word	0x080075d1
 8007638:	080075d1 	.word	0x080075d1
 800763c:	08007717 	.word	0x08007717
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6032      	str	r2, [r6, #0]
 8007648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800764c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007650:	2301      	movs	r3, #1
 8007652:	e09d      	b.n	8007790 <_printf_i+0x1e8>
 8007654:	6833      	ldr	r3, [r6, #0]
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	6031      	str	r1, [r6, #0]
 800765c:	0606      	lsls	r6, r0, #24
 800765e:	d501      	bpl.n	8007664 <_printf_i+0xbc>
 8007660:	681d      	ldr	r5, [r3, #0]
 8007662:	e003      	b.n	800766c <_printf_i+0xc4>
 8007664:	0645      	lsls	r5, r0, #25
 8007666:	d5fb      	bpl.n	8007660 <_printf_i+0xb8>
 8007668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800766c:	2d00      	cmp	r5, #0
 800766e:	da03      	bge.n	8007678 <_printf_i+0xd0>
 8007670:	232d      	movs	r3, #45	@ 0x2d
 8007672:	426d      	negs	r5, r5
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007678:	4859      	ldr	r0, [pc, #356]	@ (80077e0 <_printf_i+0x238>)
 800767a:	230a      	movs	r3, #10
 800767c:	e011      	b.n	80076a2 <_printf_i+0xfa>
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	6833      	ldr	r3, [r6, #0]
 8007682:	0608      	lsls	r0, r1, #24
 8007684:	f853 5b04 	ldr.w	r5, [r3], #4
 8007688:	d402      	bmi.n	8007690 <_printf_i+0xe8>
 800768a:	0649      	lsls	r1, r1, #25
 800768c:	bf48      	it	mi
 800768e:	b2ad      	uxthmi	r5, r5
 8007690:	2f6f      	cmp	r7, #111	@ 0x6f
 8007692:	4853      	ldr	r0, [pc, #332]	@ (80077e0 <_printf_i+0x238>)
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	bf14      	ite	ne
 8007698:	230a      	movne	r3, #10
 800769a:	2308      	moveq	r3, #8
 800769c:	2100      	movs	r1, #0
 800769e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076a2:	6866      	ldr	r6, [r4, #4]
 80076a4:	60a6      	str	r6, [r4, #8]
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	bfa2      	ittt	ge
 80076aa:	6821      	ldrge	r1, [r4, #0]
 80076ac:	f021 0104 	bicge.w	r1, r1, #4
 80076b0:	6021      	strge	r1, [r4, #0]
 80076b2:	b90d      	cbnz	r5, 80076b8 <_printf_i+0x110>
 80076b4:	2e00      	cmp	r6, #0
 80076b6:	d04b      	beq.n	8007750 <_printf_i+0x1a8>
 80076b8:	4616      	mov	r6, r2
 80076ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80076be:	fb03 5711 	mls	r7, r3, r1, r5
 80076c2:	5dc7      	ldrb	r7, [r0, r7]
 80076c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076c8:	462f      	mov	r7, r5
 80076ca:	42bb      	cmp	r3, r7
 80076cc:	460d      	mov	r5, r1
 80076ce:	d9f4      	bls.n	80076ba <_printf_i+0x112>
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d10b      	bne.n	80076ec <_printf_i+0x144>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	07df      	lsls	r7, r3, #31
 80076d8:	d508      	bpl.n	80076ec <_printf_i+0x144>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	6861      	ldr	r1, [r4, #4]
 80076de:	4299      	cmp	r1, r3
 80076e0:	bfde      	ittt	le
 80076e2:	2330      	movle	r3, #48	@ 0x30
 80076e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ec:	1b92      	subs	r2, r2, r6
 80076ee:	6122      	str	r2, [r4, #16]
 80076f0:	f8cd a000 	str.w	sl, [sp]
 80076f4:	464b      	mov	r3, r9
 80076f6:	aa03      	add	r2, sp, #12
 80076f8:	4621      	mov	r1, r4
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fee6 	bl	80074cc <_printf_common>
 8007700:	3001      	adds	r0, #1
 8007702:	d14a      	bne.n	800779a <_printf_i+0x1f2>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b004      	add	sp, #16
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	f043 0320 	orr.w	r3, r3, #32
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	4833      	ldr	r0, [pc, #204]	@ (80077e4 <_printf_i+0x23c>)
 8007718:	2778      	movs	r7, #120	@ 0x78
 800771a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	6831      	ldr	r1, [r6, #0]
 8007722:	061f      	lsls	r7, r3, #24
 8007724:	f851 5b04 	ldr.w	r5, [r1], #4
 8007728:	d402      	bmi.n	8007730 <_printf_i+0x188>
 800772a:	065f      	lsls	r7, r3, #25
 800772c:	bf48      	it	mi
 800772e:	b2ad      	uxthmi	r5, r5
 8007730:	6031      	str	r1, [r6, #0]
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	bf44      	itt	mi
 8007736:	f043 0320 	orrmi.w	r3, r3, #32
 800773a:	6023      	strmi	r3, [r4, #0]
 800773c:	b11d      	cbz	r5, 8007746 <_printf_i+0x19e>
 800773e:	2310      	movs	r3, #16
 8007740:	e7ac      	b.n	800769c <_printf_i+0xf4>
 8007742:	4827      	ldr	r0, [pc, #156]	@ (80077e0 <_printf_i+0x238>)
 8007744:	e7e9      	b.n	800771a <_printf_i+0x172>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	f023 0320 	bic.w	r3, r3, #32
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	e7f6      	b.n	800773e <_printf_i+0x196>
 8007750:	4616      	mov	r6, r2
 8007752:	e7bd      	b.n	80076d0 <_printf_i+0x128>
 8007754:	6833      	ldr	r3, [r6, #0]
 8007756:	6825      	ldr	r5, [r4, #0]
 8007758:	6961      	ldr	r1, [r4, #20]
 800775a:	1d18      	adds	r0, r3, #4
 800775c:	6030      	str	r0, [r6, #0]
 800775e:	062e      	lsls	r6, r5, #24
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	d501      	bpl.n	8007768 <_printf_i+0x1c0>
 8007764:	6019      	str	r1, [r3, #0]
 8007766:	e002      	b.n	800776e <_printf_i+0x1c6>
 8007768:	0668      	lsls	r0, r5, #25
 800776a:	d5fb      	bpl.n	8007764 <_printf_i+0x1bc>
 800776c:	8019      	strh	r1, [r3, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	4616      	mov	r6, r2
 8007774:	e7bc      	b.n	80076f0 <_printf_i+0x148>
 8007776:	6833      	ldr	r3, [r6, #0]
 8007778:	1d1a      	adds	r2, r3, #4
 800777a:	6032      	str	r2, [r6, #0]
 800777c:	681e      	ldr	r6, [r3, #0]
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	2100      	movs	r1, #0
 8007782:	4630      	mov	r0, r6
 8007784:	f7f8 fd54 	bl	8000230 <memchr>
 8007788:	b108      	cbz	r0, 800778e <_printf_i+0x1e6>
 800778a:	1b80      	subs	r0, r0, r6
 800778c:	6060      	str	r0, [r4, #4]
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	2300      	movs	r3, #0
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007798:	e7aa      	b.n	80076f0 <_printf_i+0x148>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	4632      	mov	r2, r6
 800779e:	4649      	mov	r1, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	47d0      	blx	sl
 80077a4:	3001      	adds	r0, #1
 80077a6:	d0ad      	beq.n	8007704 <_printf_i+0x15c>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	079b      	lsls	r3, r3, #30
 80077ac:	d413      	bmi.n	80077d6 <_printf_i+0x22e>
 80077ae:	68e0      	ldr	r0, [r4, #12]
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	4298      	cmp	r0, r3
 80077b4:	bfb8      	it	lt
 80077b6:	4618      	movlt	r0, r3
 80077b8:	e7a6      	b.n	8007708 <_printf_i+0x160>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4632      	mov	r2, r6
 80077be:	4649      	mov	r1, r9
 80077c0:	4640      	mov	r0, r8
 80077c2:	47d0      	blx	sl
 80077c4:	3001      	adds	r0, #1
 80077c6:	d09d      	beq.n	8007704 <_printf_i+0x15c>
 80077c8:	3501      	adds	r5, #1
 80077ca:	68e3      	ldr	r3, [r4, #12]
 80077cc:	9903      	ldr	r1, [sp, #12]
 80077ce:	1a5b      	subs	r3, r3, r1
 80077d0:	42ab      	cmp	r3, r5
 80077d2:	dcf2      	bgt.n	80077ba <_printf_i+0x212>
 80077d4:	e7eb      	b.n	80077ae <_printf_i+0x206>
 80077d6:	2500      	movs	r5, #0
 80077d8:	f104 0619 	add.w	r6, r4, #25
 80077dc:	e7f5      	b.n	80077ca <_printf_i+0x222>
 80077de:	bf00      	nop
 80077e0:	0800b7e6 	.word	0x0800b7e6
 80077e4:	0800b7f7 	.word	0x0800b7f7

080077e8 <_scanf_float>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	b087      	sub	sp, #28
 80077ee:	4617      	mov	r7, r2
 80077f0:	9303      	str	r3, [sp, #12]
 80077f2:	688b      	ldr	r3, [r1, #8]
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80077fa:	bf81      	itttt	hi
 80077fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007800:	eb03 0b05 	addhi.w	fp, r3, r5
 8007804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007808:	608b      	strhi	r3, [r1, #8]
 800780a:	680b      	ldr	r3, [r1, #0]
 800780c:	460a      	mov	r2, r1
 800780e:	f04f 0500 	mov.w	r5, #0
 8007812:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007816:	f842 3b1c 	str.w	r3, [r2], #28
 800781a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800781e:	4680      	mov	r8, r0
 8007820:	460c      	mov	r4, r1
 8007822:	bf98      	it	ls
 8007824:	f04f 0b00 	movls.w	fp, #0
 8007828:	9201      	str	r2, [sp, #4]
 800782a:	4616      	mov	r6, r2
 800782c:	46aa      	mov	sl, r5
 800782e:	46a9      	mov	r9, r5
 8007830:	9502      	str	r5, [sp, #8]
 8007832:	68a2      	ldr	r2, [r4, #8]
 8007834:	b152      	cbz	r2, 800784c <_scanf_float+0x64>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b4e      	cmp	r3, #78	@ 0x4e
 800783c:	d864      	bhi.n	8007908 <_scanf_float+0x120>
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d83c      	bhi.n	80078bc <_scanf_float+0xd4>
 8007842:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007846:	b2c8      	uxtb	r0, r1
 8007848:	280e      	cmp	r0, #14
 800784a:	d93a      	bls.n	80078c2 <_scanf_float+0xda>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	d003      	beq.n	800785a <_scanf_float+0x72>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800785e:	f1ba 0f01 	cmp.w	sl, #1
 8007862:	f200 8117 	bhi.w	8007a94 <_scanf_float+0x2ac>
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	429e      	cmp	r6, r3
 800786a:	f200 8108 	bhi.w	8007a7e <_scanf_float+0x296>
 800786e:	2001      	movs	r0, #1
 8007870:	b007      	add	sp, #28
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800787a:	2a0d      	cmp	r2, #13
 800787c:	d8e6      	bhi.n	800784c <_scanf_float+0x64>
 800787e:	a101      	add	r1, pc, #4	@ (adr r1, 8007884 <_scanf_float+0x9c>)
 8007880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007884:	080079cb 	.word	0x080079cb
 8007888:	0800784d 	.word	0x0800784d
 800788c:	0800784d 	.word	0x0800784d
 8007890:	0800784d 	.word	0x0800784d
 8007894:	08007a2b 	.word	0x08007a2b
 8007898:	08007a03 	.word	0x08007a03
 800789c:	0800784d 	.word	0x0800784d
 80078a0:	0800784d 	.word	0x0800784d
 80078a4:	080079d9 	.word	0x080079d9
 80078a8:	0800784d 	.word	0x0800784d
 80078ac:	0800784d 	.word	0x0800784d
 80078b0:	0800784d 	.word	0x0800784d
 80078b4:	0800784d 	.word	0x0800784d
 80078b8:	08007991 	.word	0x08007991
 80078bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80078c0:	e7db      	b.n	800787a <_scanf_float+0x92>
 80078c2:	290e      	cmp	r1, #14
 80078c4:	d8c2      	bhi.n	800784c <_scanf_float+0x64>
 80078c6:	a001      	add	r0, pc, #4	@ (adr r0, 80078cc <_scanf_float+0xe4>)
 80078c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078cc:	08007981 	.word	0x08007981
 80078d0:	0800784d 	.word	0x0800784d
 80078d4:	08007981 	.word	0x08007981
 80078d8:	08007a17 	.word	0x08007a17
 80078dc:	0800784d 	.word	0x0800784d
 80078e0:	08007929 	.word	0x08007929
 80078e4:	08007967 	.word	0x08007967
 80078e8:	08007967 	.word	0x08007967
 80078ec:	08007967 	.word	0x08007967
 80078f0:	08007967 	.word	0x08007967
 80078f4:	08007967 	.word	0x08007967
 80078f8:	08007967 	.word	0x08007967
 80078fc:	08007967 	.word	0x08007967
 8007900:	08007967 	.word	0x08007967
 8007904:	08007967 	.word	0x08007967
 8007908:	2b6e      	cmp	r3, #110	@ 0x6e
 800790a:	d809      	bhi.n	8007920 <_scanf_float+0x138>
 800790c:	2b60      	cmp	r3, #96	@ 0x60
 800790e:	d8b2      	bhi.n	8007876 <_scanf_float+0x8e>
 8007910:	2b54      	cmp	r3, #84	@ 0x54
 8007912:	d07b      	beq.n	8007a0c <_scanf_float+0x224>
 8007914:	2b59      	cmp	r3, #89	@ 0x59
 8007916:	d199      	bne.n	800784c <_scanf_float+0x64>
 8007918:	2d07      	cmp	r5, #7
 800791a:	d197      	bne.n	800784c <_scanf_float+0x64>
 800791c:	2508      	movs	r5, #8
 800791e:	e02c      	b.n	800797a <_scanf_float+0x192>
 8007920:	2b74      	cmp	r3, #116	@ 0x74
 8007922:	d073      	beq.n	8007a0c <_scanf_float+0x224>
 8007924:	2b79      	cmp	r3, #121	@ 0x79
 8007926:	e7f6      	b.n	8007916 <_scanf_float+0x12e>
 8007928:	6821      	ldr	r1, [r4, #0]
 800792a:	05c8      	lsls	r0, r1, #23
 800792c:	d51b      	bpl.n	8007966 <_scanf_float+0x17e>
 800792e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007932:	6021      	str	r1, [r4, #0]
 8007934:	f109 0901 	add.w	r9, r9, #1
 8007938:	f1bb 0f00 	cmp.w	fp, #0
 800793c:	d003      	beq.n	8007946 <_scanf_float+0x15e>
 800793e:	3201      	adds	r2, #1
 8007940:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007944:	60a2      	str	r2, [r4, #8]
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	3b01      	subs	r3, #1
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	3301      	adds	r3, #1
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3b01      	subs	r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
 800795a:	f340 8087 	ble.w	8007a6c <_scanf_float+0x284>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	e765      	b.n	8007832 <_scanf_float+0x4a>
 8007966:	eb1a 0105 	adds.w	r1, sl, r5
 800796a:	f47f af6f 	bne.w	800784c <_scanf_float+0x64>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	460d      	mov	r5, r1
 8007978:	468a      	mov	sl, r1
 800797a:	f806 3b01 	strb.w	r3, [r6], #1
 800797e:	e7e2      	b.n	8007946 <_scanf_float+0x15e>
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	0610      	lsls	r0, r2, #24
 8007984:	f57f af62 	bpl.w	800784c <_scanf_float+0x64>
 8007988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800798c:	6022      	str	r2, [r4, #0]
 800798e:	e7f4      	b.n	800797a <_scanf_float+0x192>
 8007990:	f1ba 0f00 	cmp.w	sl, #0
 8007994:	d10e      	bne.n	80079b4 <_scanf_float+0x1cc>
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	d10e      	bne.n	80079ba <_scanf_float+0x1d2>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079a6:	d108      	bne.n	80079ba <_scanf_float+0x1d2>
 80079a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	f04f 0a01 	mov.w	sl, #1
 80079b2:	e7e2      	b.n	800797a <_scanf_float+0x192>
 80079b4:	f1ba 0f02 	cmp.w	sl, #2
 80079b8:	d055      	beq.n	8007a66 <_scanf_float+0x27e>
 80079ba:	2d01      	cmp	r5, #1
 80079bc:	d002      	beq.n	80079c4 <_scanf_float+0x1dc>
 80079be:	2d04      	cmp	r5, #4
 80079c0:	f47f af44 	bne.w	800784c <_scanf_float+0x64>
 80079c4:	3501      	adds	r5, #1
 80079c6:	b2ed      	uxtb	r5, r5
 80079c8:	e7d7      	b.n	800797a <_scanf_float+0x192>
 80079ca:	f1ba 0f01 	cmp.w	sl, #1
 80079ce:	f47f af3d 	bne.w	800784c <_scanf_float+0x64>
 80079d2:	f04f 0a02 	mov.w	sl, #2
 80079d6:	e7d0      	b.n	800797a <_scanf_float+0x192>
 80079d8:	b97d      	cbnz	r5, 80079fa <_scanf_float+0x212>
 80079da:	f1b9 0f00 	cmp.w	r9, #0
 80079de:	f47f af38 	bne.w	8007852 <_scanf_float+0x6a>
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079ec:	f040 8108 	bne.w	8007c00 <_scanf_float+0x418>
 80079f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	2501      	movs	r5, #1
 80079f8:	e7bf      	b.n	800797a <_scanf_float+0x192>
 80079fa:	2d03      	cmp	r5, #3
 80079fc:	d0e2      	beq.n	80079c4 <_scanf_float+0x1dc>
 80079fe:	2d05      	cmp	r5, #5
 8007a00:	e7de      	b.n	80079c0 <_scanf_float+0x1d8>
 8007a02:	2d02      	cmp	r5, #2
 8007a04:	f47f af22 	bne.w	800784c <_scanf_float+0x64>
 8007a08:	2503      	movs	r5, #3
 8007a0a:	e7b6      	b.n	800797a <_scanf_float+0x192>
 8007a0c:	2d06      	cmp	r5, #6
 8007a0e:	f47f af1d 	bne.w	800784c <_scanf_float+0x64>
 8007a12:	2507      	movs	r5, #7
 8007a14:	e7b1      	b.n	800797a <_scanf_float+0x192>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	0591      	lsls	r1, r2, #22
 8007a1a:	f57f af17 	bpl.w	800784c <_scanf_float+0x64>
 8007a1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a28:	e7a7      	b.n	800797a <_scanf_float+0x192>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a30:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a34:	d006      	beq.n	8007a44 <_scanf_float+0x25c>
 8007a36:	0550      	lsls	r0, r2, #21
 8007a38:	f57f af08 	bpl.w	800784c <_scanf_float+0x64>
 8007a3c:	f1b9 0f00 	cmp.w	r9, #0
 8007a40:	f000 80de 	beq.w	8007c00 <_scanf_float+0x418>
 8007a44:	0591      	lsls	r1, r2, #22
 8007a46:	bf58      	it	pl
 8007a48:	9902      	ldrpl	r1, [sp, #8]
 8007a4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a4e:	bf58      	it	pl
 8007a50:	eba9 0101 	subpl.w	r1, r9, r1
 8007a54:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a58:	bf58      	it	pl
 8007a5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a5e:	6022      	str	r2, [r4, #0]
 8007a60:	f04f 0900 	mov.w	r9, #0
 8007a64:	e789      	b.n	800797a <_scanf_float+0x192>
 8007a66:	f04f 0a03 	mov.w	sl, #3
 8007a6a:	e786      	b.n	800797a <_scanf_float+0x192>
 8007a6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a70:	4639      	mov	r1, r7
 8007a72:	4640      	mov	r0, r8
 8007a74:	4798      	blx	r3
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f43f aedb 	beq.w	8007832 <_scanf_float+0x4a>
 8007a7c:	e6e6      	b.n	800784c <_scanf_float+0x64>
 8007a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a86:	463a      	mov	r2, r7
 8007a88:	4640      	mov	r0, r8
 8007a8a:	4798      	blx	r3
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	e6e8      	b.n	8007866 <_scanf_float+0x7e>
 8007a94:	1e6b      	subs	r3, r5, #1
 8007a96:	2b06      	cmp	r3, #6
 8007a98:	d824      	bhi.n	8007ae4 <_scanf_float+0x2fc>
 8007a9a:	2d02      	cmp	r5, #2
 8007a9c:	d836      	bhi.n	8007b0c <_scanf_float+0x324>
 8007a9e:	9b01      	ldr	r3, [sp, #4]
 8007aa0:	429e      	cmp	r6, r3
 8007aa2:	f67f aee4 	bls.w	800786e <_scanf_float+0x86>
 8007aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aae:	463a      	mov	r2, r7
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4798      	blx	r3
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	e7f0      	b.n	8007a9e <_scanf_float+0x2b6>
 8007abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ac0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007ac4:	463a      	mov	r2, r7
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	4798      	blx	r3
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ad4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ad8:	f1ba 0f02 	cmp.w	sl, #2
 8007adc:	d1ee      	bne.n	8007abc <_scanf_float+0x2d4>
 8007ade:	3d03      	subs	r5, #3
 8007ae0:	b2ed      	uxtb	r5, r5
 8007ae2:	1b76      	subs	r6, r6, r5
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	05da      	lsls	r2, r3, #23
 8007ae8:	d530      	bpl.n	8007b4c <_scanf_float+0x364>
 8007aea:	055b      	lsls	r3, r3, #21
 8007aec:	d511      	bpl.n	8007b12 <_scanf_float+0x32a>
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	429e      	cmp	r6, r3
 8007af2:	f67f aebc 	bls.w	800786e <_scanf_float+0x86>
 8007af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007afe:	463a      	mov	r2, r7
 8007b00:	4640      	mov	r0, r8
 8007b02:	4798      	blx	r3
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	e7f0      	b.n	8007aee <_scanf_float+0x306>
 8007b0c:	46aa      	mov	sl, r5
 8007b0e:	46b3      	mov	fp, r6
 8007b10:	e7de      	b.n	8007ad0 <_scanf_float+0x2e8>
 8007b12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	2965      	cmp	r1, #101	@ 0x65
 8007b1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	d00c      	beq.n	8007b40 <_scanf_float+0x358>
 8007b26:	2945      	cmp	r1, #69	@ 0x45
 8007b28:	d00a      	beq.n	8007b40 <_scanf_float+0x358>
 8007b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b2e:	463a      	mov	r2, r7
 8007b30:	4640      	mov	r0, r8
 8007b32:	4798      	blx	r3
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	1eb5      	subs	r5, r6, #2
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b44:	463a      	mov	r2, r7
 8007b46:	4640      	mov	r0, r8
 8007b48:	4798      	blx	r3
 8007b4a:	462e      	mov	r6, r5
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	f012 0210 	ands.w	r2, r2, #16
 8007b52:	d001      	beq.n	8007b58 <_scanf_float+0x370>
 8007b54:	2000      	movs	r0, #0
 8007b56:	e68b      	b.n	8007870 <_scanf_float+0x88>
 8007b58:	7032      	strb	r2, [r6, #0]
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b64:	d11c      	bne.n	8007ba0 <_scanf_float+0x3b8>
 8007b66:	9b02      	ldr	r3, [sp, #8]
 8007b68:	454b      	cmp	r3, r9
 8007b6a:	eba3 0209 	sub.w	r2, r3, r9
 8007b6e:	d123      	bne.n	8007bb8 <_scanf_float+0x3d0>
 8007b70:	9901      	ldr	r1, [sp, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	4640      	mov	r0, r8
 8007b76:	f002 fc0b 	bl	800a390 <_strtod_r>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	6821      	ldr	r1, [r4, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f011 0f02 	tst.w	r1, #2
 8007b84:	ec57 6b10 	vmov	r6, r7, d0
 8007b88:	f103 0204 	add.w	r2, r3, #4
 8007b8c:	d01f      	beq.n	8007bce <_scanf_float+0x3e6>
 8007b8e:	9903      	ldr	r1, [sp, #12]
 8007b90:	600a      	str	r2, [r1, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	e9c3 6700 	strd	r6, r7, [r3]
 8007b98:	68e3      	ldr	r3, [r4, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60e3      	str	r3, [r4, #12]
 8007b9e:	e7d9      	b.n	8007b54 <_scanf_float+0x36c>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0e4      	beq.n	8007b70 <_scanf_float+0x388>
 8007ba6:	9905      	ldr	r1, [sp, #20]
 8007ba8:	230a      	movs	r3, #10
 8007baa:	3101      	adds	r1, #1
 8007bac:	4640      	mov	r0, r8
 8007bae:	f002 fc6f 	bl	800a490 <_strtol_r>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	9e05      	ldr	r6, [sp, #20]
 8007bb6:	1ac2      	subs	r2, r0, r3
 8007bb8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007bbc:	429e      	cmp	r6, r3
 8007bbe:	bf28      	it	cs
 8007bc0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007bc4:	4910      	ldr	r1, [pc, #64]	@ (8007c08 <_scanf_float+0x420>)
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f000 f8e4 	bl	8007d94 <siprintf>
 8007bcc:	e7d0      	b.n	8007b70 <_scanf_float+0x388>
 8007bce:	f011 0f04 	tst.w	r1, #4
 8007bd2:	9903      	ldr	r1, [sp, #12]
 8007bd4:	600a      	str	r2, [r1, #0]
 8007bd6:	d1dc      	bne.n	8007b92 <_scanf_float+0x3aa>
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	4632      	mov	r2, r6
 8007bdc:	463b      	mov	r3, r7
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 ffd3 	bl	8000b8c <__aeabi_dcmpun>
 8007be6:	b128      	cbz	r0, 8007bf4 <_scanf_float+0x40c>
 8007be8:	4808      	ldr	r0, [pc, #32]	@ (8007c0c <_scanf_float+0x424>)
 8007bea:	f000 f9c9 	bl	8007f80 <nanf>
 8007bee:	ed85 0a00 	vstr	s0, [r5]
 8007bf2:	e7d1      	b.n	8007b98 <_scanf_float+0x3b0>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	f7f9 f826 	bl	8000c48 <__aeabi_d2f>
 8007bfc:	6028      	str	r0, [r5, #0]
 8007bfe:	e7cb      	b.n	8007b98 <_scanf_float+0x3b0>
 8007c00:	f04f 0900 	mov.w	r9, #0
 8007c04:	e629      	b.n	800785a <_scanf_float+0x72>
 8007c06:	bf00      	nop
 8007c08:	0800b808 	.word	0x0800b808
 8007c0c:	0800bb9d 	.word	0x0800bb9d

08007c10 <std>:
 8007c10:	2300      	movs	r3, #0
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	e9c0 3300 	strd	r3, r3, [r0]
 8007c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c1e:	6083      	str	r3, [r0, #8]
 8007c20:	8181      	strh	r1, [r0, #12]
 8007c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c24:	81c2      	strh	r2, [r0, #14]
 8007c26:	6183      	str	r3, [r0, #24]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	305c      	adds	r0, #92	@ 0x5c
 8007c2e:	f000 f914 	bl	8007e5a <memset>
 8007c32:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <std+0x58>)
 8007c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <std+0x5c>)
 8007c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <std+0x60>)
 8007c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <std+0x64>)
 8007c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c42:	4b0d      	ldr	r3, [pc, #52]	@ (8007c78 <std+0x68>)
 8007c44:	6224      	str	r4, [r4, #32]
 8007c46:	429c      	cmp	r4, r3
 8007c48:	d006      	beq.n	8007c58 <std+0x48>
 8007c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c4e:	4294      	cmp	r4, r2
 8007c50:	d002      	beq.n	8007c58 <std+0x48>
 8007c52:	33d0      	adds	r3, #208	@ 0xd0
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d105      	bne.n	8007c64 <std+0x54>
 8007c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f000 b98a 	b.w	8007f78 <__retarget_lock_init_recursive>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	08007dd5 	.word	0x08007dd5
 8007c6c:	08007df7 	.word	0x08007df7
 8007c70:	08007e2f 	.word	0x08007e2f
 8007c74:	08007e53 	.word	0x08007e53
 8007c78:	200005ec 	.word	0x200005ec

08007c7c <stdio_exit_handler>:
 8007c7c:	4a02      	ldr	r2, [pc, #8]	@ (8007c88 <stdio_exit_handler+0xc>)
 8007c7e:	4903      	ldr	r1, [pc, #12]	@ (8007c8c <stdio_exit_handler+0x10>)
 8007c80:	4803      	ldr	r0, [pc, #12]	@ (8007c90 <stdio_exit_handler+0x14>)
 8007c82:	f000 b869 	b.w	8007d58 <_fwalk_sglue>
 8007c86:	bf00      	nop
 8007c88:	20000190 	.word	0x20000190
 8007c8c:	0800a84d 	.word	0x0800a84d
 8007c90:	200001a0 	.word	0x200001a0

08007c94 <cleanup_stdio>:
 8007c94:	6841      	ldr	r1, [r0, #4]
 8007c96:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <cleanup_stdio+0x34>)
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	d001      	beq.n	8007ca4 <cleanup_stdio+0x10>
 8007ca0:	f002 fdd4 	bl	800a84c <_fflush_r>
 8007ca4:	68a1      	ldr	r1, [r4, #8]
 8007ca6:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <cleanup_stdio+0x38>)
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d002      	beq.n	8007cb2 <cleanup_stdio+0x1e>
 8007cac:	4620      	mov	r0, r4
 8007cae:	f002 fdcd 	bl	800a84c <_fflush_r>
 8007cb2:	68e1      	ldr	r1, [r4, #12]
 8007cb4:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <cleanup_stdio+0x3c>)
 8007cb6:	4299      	cmp	r1, r3
 8007cb8:	d004      	beq.n	8007cc4 <cleanup_stdio+0x30>
 8007cba:	4620      	mov	r0, r4
 8007cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc0:	f002 bdc4 	b.w	800a84c <_fflush_r>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200005ec 	.word	0x200005ec
 8007ccc:	20000654 	.word	0x20000654
 8007cd0:	200006bc 	.word	0x200006bc

08007cd4 <global_stdio_init.part.0>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d04 <global_stdio_init.part.0+0x30>)
 8007cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8007d08 <global_stdio_init.part.0+0x34>)
 8007cda:	4a0c      	ldr	r2, [pc, #48]	@ (8007d0c <global_stdio_init.part.0+0x38>)
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2104      	movs	r1, #4
 8007ce4:	f7ff ff94 	bl	8007c10 <std>
 8007ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cec:	2201      	movs	r2, #1
 8007cee:	2109      	movs	r1, #9
 8007cf0:	f7ff ff8e 	bl	8007c10 <std>
 8007cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfe:	2112      	movs	r1, #18
 8007d00:	f7ff bf86 	b.w	8007c10 <std>
 8007d04:	20000724 	.word	0x20000724
 8007d08:	200005ec 	.word	0x200005ec
 8007d0c:	08007c7d 	.word	0x08007c7d

08007d10 <__sfp_lock_acquire>:
 8007d10:	4801      	ldr	r0, [pc, #4]	@ (8007d18 <__sfp_lock_acquire+0x8>)
 8007d12:	f000 b932 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	2000072d 	.word	0x2000072d

08007d1c <__sfp_lock_release>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	@ (8007d24 <__sfp_lock_release+0x8>)
 8007d1e:	f000 b92d 	b.w	8007f7c <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	2000072d 	.word	0x2000072d

08007d28 <__sinit>:
 8007d28:	b510      	push	{r4, lr}
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	f7ff fff0 	bl	8007d10 <__sfp_lock_acquire>
 8007d30:	6a23      	ldr	r3, [r4, #32]
 8007d32:	b11b      	cbz	r3, 8007d3c <__sinit+0x14>
 8007d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d38:	f7ff bff0 	b.w	8007d1c <__sfp_lock_release>
 8007d3c:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <__sinit+0x28>)
 8007d3e:	6223      	str	r3, [r4, #32]
 8007d40:	4b04      	ldr	r3, [pc, #16]	@ (8007d54 <__sinit+0x2c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1f5      	bne.n	8007d34 <__sinit+0xc>
 8007d48:	f7ff ffc4 	bl	8007cd4 <global_stdio_init.part.0>
 8007d4c:	e7f2      	b.n	8007d34 <__sinit+0xc>
 8007d4e:	bf00      	nop
 8007d50:	08007c95 	.word	0x08007c95
 8007d54:	20000724 	.word	0x20000724

08007d58 <_fwalk_sglue>:
 8007d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	4688      	mov	r8, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	2600      	movs	r6, #0
 8007d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d68:	f1b9 0901 	subs.w	r9, r9, #1
 8007d6c:	d505      	bpl.n	8007d7a <_fwalk_sglue+0x22>
 8007d6e:	6824      	ldr	r4, [r4, #0]
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	d1f7      	bne.n	8007d64 <_fwalk_sglue+0xc>
 8007d74:	4630      	mov	r0, r6
 8007d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d907      	bls.n	8007d90 <_fwalk_sglue+0x38>
 8007d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d84:	3301      	adds	r3, #1
 8007d86:	d003      	beq.n	8007d90 <_fwalk_sglue+0x38>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c0      	blx	r8
 8007d8e:	4306      	orrs	r6, r0
 8007d90:	3568      	adds	r5, #104	@ 0x68
 8007d92:	e7e9      	b.n	8007d68 <_fwalk_sglue+0x10>

08007d94 <siprintf>:
 8007d94:	b40e      	push	{r1, r2, r3}
 8007d96:	b500      	push	{lr}
 8007d98:	b09c      	sub	sp, #112	@ 0x70
 8007d9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d9c:	9002      	str	r0, [sp, #8]
 8007d9e:	9006      	str	r0, [sp, #24]
 8007da0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007da4:	4809      	ldr	r0, [pc, #36]	@ (8007dcc <siprintf+0x38>)
 8007da6:	9107      	str	r1, [sp, #28]
 8007da8:	9104      	str	r1, [sp, #16]
 8007daa:	4909      	ldr	r1, [pc, #36]	@ (8007dd0 <siprintf+0x3c>)
 8007dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db0:	9105      	str	r1, [sp, #20]
 8007db2:	6800      	ldr	r0, [r0, #0]
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	a902      	add	r1, sp, #8
 8007db8:	f002 fbc8 	bl	800a54c <_svfiprintf_r>
 8007dbc:	9b02      	ldr	r3, [sp, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	b01c      	add	sp, #112	@ 0x70
 8007dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc8:	b003      	add	sp, #12
 8007dca:	4770      	bx	lr
 8007dcc:	2000019c 	.word	0x2000019c
 8007dd0:	ffff0208 	.word	0xffff0208

08007dd4 <__sread>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ddc:	f000 f87e 	bl	8007edc <_read_r>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	bfab      	itete	ge
 8007de4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007de6:	89a3      	ldrhlt	r3, [r4, #12]
 8007de8:	181b      	addge	r3, r3, r0
 8007dea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dee:	bfac      	ite	ge
 8007df0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007df2:	81a3      	strhlt	r3, [r4, #12]
 8007df4:	bd10      	pop	{r4, pc}

08007df6 <__swrite>:
 8007df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	898b      	ldrh	r3, [r1, #12]
 8007dfe:	05db      	lsls	r3, r3, #23
 8007e00:	4605      	mov	r5, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	4616      	mov	r6, r2
 8007e06:	d505      	bpl.n	8007e14 <__swrite+0x1e>
 8007e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f000 f852 	bl	8007eb8 <_lseek_r>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	4632      	mov	r2, r6
 8007e22:	463b      	mov	r3, r7
 8007e24:	4628      	mov	r0, r5
 8007e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2a:	f000 b869 	b.w	8007f00 <_write_r>

08007e2e <__sseek>:
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	460c      	mov	r4, r1
 8007e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e36:	f000 f83f 	bl	8007eb8 <_lseek_r>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	bf15      	itete	ne
 8007e40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e4a:	81a3      	strheq	r3, [r4, #12]
 8007e4c:	bf18      	it	ne
 8007e4e:	81a3      	strhne	r3, [r4, #12]
 8007e50:	bd10      	pop	{r4, pc}

08007e52 <__sclose>:
 8007e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e56:	f000 b81f 	b.w	8007e98 <_close_r>

08007e5a <memset>:
 8007e5a:	4402      	add	r2, r0
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d100      	bne.n	8007e64 <memset+0xa>
 8007e62:	4770      	bx	lr
 8007e64:	f803 1b01 	strb.w	r1, [r3], #1
 8007e68:	e7f9      	b.n	8007e5e <memset+0x4>
	...

08007e6c <strupr>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4c07      	ldr	r4, [pc, #28]	@ (8007e8c <strupr+0x20>)
 8007e70:	1e42      	subs	r2, r0, #1
 8007e72:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007e76:	b903      	cbnz	r3, 8007e7a <strupr+0xe>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	5ce1      	ldrb	r1, [r4, r3]
 8007e7c:	f001 0103 	and.w	r1, r1, #3
 8007e80:	2902      	cmp	r1, #2
 8007e82:	bf08      	it	eq
 8007e84:	3b20      	subeq	r3, #32
 8007e86:	7013      	strb	r3, [r2, #0]
 8007e88:	e7f3      	b.n	8007e72 <strupr+0x6>
 8007e8a:	bf00      	nop
 8007e8c:	0800ba49 	.word	0x0800ba49

08007e90 <_localeconv_r>:
 8007e90:	4800      	ldr	r0, [pc, #0]	@ (8007e94 <_localeconv_r+0x4>)
 8007e92:	4770      	bx	lr
 8007e94:	200002dc 	.word	0x200002dc

08007e98 <_close_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d06      	ldr	r5, [pc, #24]	@ (8007eb4 <_close_r+0x1c>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	602b      	str	r3, [r5, #0]
 8007ea4:	f7fb f854 	bl	8002f50 <_close>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_close_r+0x1a>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_close_r+0x1a>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20000728 	.word	0x20000728

08007eb8 <_lseek_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_lseek_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7fb f869 	bl	8002f9e <_lseek>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_lseek_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_lseek_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20000728 	.word	0x20000728

08007edc <_read_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_read_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7fa fff7 	bl	8002ede <_read>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_read_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_read_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000728 	.word	0x20000728

08007f00 <_write_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	@ (8007f20 <_write_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7fb f802 	bl	8002f18 <_write>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_write_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_write_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20000728 	.word	0x20000728

08007f24 <__errno>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	@ (8007f2c <__errno+0x8>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2000019c 	.word	0x2000019c

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4d0d      	ldr	r5, [pc, #52]	@ (8007f68 <__libc_init_array+0x38>)
 8007f34:	4c0d      	ldr	r4, [pc, #52]	@ (8007f6c <__libc_init_array+0x3c>)
 8007f36:	1b64      	subs	r4, r4, r5
 8007f38:	10a4      	asrs	r4, r4, #2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	4d0b      	ldr	r5, [pc, #44]	@ (8007f70 <__libc_init_array+0x40>)
 8007f42:	4c0c      	ldr	r4, [pc, #48]	@ (8007f74 <__libc_init_array+0x44>)
 8007f44:	f003 fb72 	bl	800b62c <_init>
 8007f48:	1b64      	subs	r4, r4, r5
 8007f4a:	10a4      	asrs	r4, r4, #2
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	0800bc08 	.word	0x0800bc08
 8007f6c:	0800bc08 	.word	0x0800bc08
 8007f70:	0800bc08 	.word	0x0800bc08
 8007f74:	0800bc0c 	.word	0x0800bc0c

08007f78 <__retarget_lock_init_recursive>:
 8007f78:	4770      	bx	lr

08007f7a <__retarget_lock_acquire_recursive>:
 8007f7a:	4770      	bx	lr

08007f7c <__retarget_lock_release_recursive>:
 8007f7c:	4770      	bx	lr
	...

08007f80 <nanf>:
 8007f80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f88 <nanf+0x8>
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	7fc00000 	.word	0x7fc00000

08007f8c <quorem>:
 8007f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	6903      	ldr	r3, [r0, #16]
 8007f92:	690c      	ldr	r4, [r1, #16]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	4607      	mov	r7, r0
 8007f98:	db7e      	blt.n	8008098 <quorem+0x10c>
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	f101 0814 	add.w	r8, r1, #20
 8007fa0:	00a3      	lsls	r3, r4, #2
 8007fa2:	f100 0514 	add.w	r5, r0, #20
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fc2:	d32e      	bcc.n	8008022 <quorem+0x96>
 8007fc4:	f04f 0a00 	mov.w	sl, #0
 8007fc8:	46c4      	mov	ip, r8
 8007fca:	46ae      	mov	lr, r5
 8007fcc:	46d3      	mov	fp, sl
 8007fce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fd2:	b298      	uxth	r0, r3
 8007fd4:	fb06 a000 	mla	r0, r6, r0, sl
 8007fd8:	0c02      	lsrs	r2, r0, #16
 8007fda:	0c1b      	lsrs	r3, r3, #16
 8007fdc:	fb06 2303 	mla	r3, r6, r3, r2
 8007fe0:	f8de 2000 	ldr.w	r2, [lr]
 8007fe4:	b280      	uxth	r0, r0
 8007fe6:	b292      	uxth	r2, r2
 8007fe8:	1a12      	subs	r2, r2, r0
 8007fea:	445a      	add	r2, fp
 8007fec:	f8de 0000 	ldr.w	r0, [lr]
 8007ff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ffa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ffe:	b292      	uxth	r2, r2
 8008000:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008004:	45e1      	cmp	r9, ip
 8008006:	f84e 2b04 	str.w	r2, [lr], #4
 800800a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800800e:	d2de      	bcs.n	8007fce <quorem+0x42>
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	58eb      	ldr	r3, [r5, r3]
 8008014:	b92b      	cbnz	r3, 8008022 <quorem+0x96>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	3b04      	subs	r3, #4
 800801a:	429d      	cmp	r5, r3
 800801c:	461a      	mov	r2, r3
 800801e:	d32f      	bcc.n	8008080 <quorem+0xf4>
 8008020:	613c      	str	r4, [r7, #16]
 8008022:	4638      	mov	r0, r7
 8008024:	f001 f9c4 	bl	80093b0 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	db25      	blt.n	8008078 <quorem+0xec>
 800802c:	4629      	mov	r1, r5
 800802e:	2000      	movs	r0, #0
 8008030:	f858 2b04 	ldr.w	r2, [r8], #4
 8008034:	f8d1 c000 	ldr.w	ip, [r1]
 8008038:	fa1f fe82 	uxth.w	lr, r2
 800803c:	fa1f f38c 	uxth.w	r3, ip
 8008040:	eba3 030e 	sub.w	r3, r3, lr
 8008044:	4403      	add	r3, r0
 8008046:	0c12      	lsrs	r2, r2, #16
 8008048:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800804c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008050:	b29b      	uxth	r3, r3
 8008052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008056:	45c1      	cmp	r9, r8
 8008058:	f841 3b04 	str.w	r3, [r1], #4
 800805c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008060:	d2e6      	bcs.n	8008030 <quorem+0xa4>
 8008062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800806a:	b922      	cbnz	r2, 8008076 <quorem+0xea>
 800806c:	3b04      	subs	r3, #4
 800806e:	429d      	cmp	r5, r3
 8008070:	461a      	mov	r2, r3
 8008072:	d30b      	bcc.n	800808c <quorem+0x100>
 8008074:	613c      	str	r4, [r7, #16]
 8008076:	3601      	adds	r6, #1
 8008078:	4630      	mov	r0, r6
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	3b04      	subs	r3, #4
 8008084:	2a00      	cmp	r2, #0
 8008086:	d1cb      	bne.n	8008020 <quorem+0x94>
 8008088:	3c01      	subs	r4, #1
 800808a:	e7c6      	b.n	800801a <quorem+0x8e>
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	3b04      	subs	r3, #4
 8008090:	2a00      	cmp	r2, #0
 8008092:	d1ef      	bne.n	8008074 <quorem+0xe8>
 8008094:	3c01      	subs	r4, #1
 8008096:	e7ea      	b.n	800806e <quorem+0xe2>
 8008098:	2000      	movs	r0, #0
 800809a:	e7ee      	b.n	800807a <quorem+0xee>
 800809c:	0000      	movs	r0, r0
	...

080080a0 <_dtoa_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	69c7      	ldr	r7, [r0, #28]
 80080a6:	b099      	sub	sp, #100	@ 0x64
 80080a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080ac:	ec55 4b10 	vmov	r4, r5, d0
 80080b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80080b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80080b4:	4683      	mov	fp, r0
 80080b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80080b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080ba:	b97f      	cbnz	r7, 80080dc <_dtoa_r+0x3c>
 80080bc:	2010      	movs	r0, #16
 80080be:	f000 fdfd 	bl	8008cbc <malloc>
 80080c2:	4602      	mov	r2, r0
 80080c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80080c8:	b920      	cbnz	r0, 80080d4 <_dtoa_r+0x34>
 80080ca:	4ba7      	ldr	r3, [pc, #668]	@ (8008368 <_dtoa_r+0x2c8>)
 80080cc:	21ef      	movs	r1, #239	@ 0xef
 80080ce:	48a7      	ldr	r0, [pc, #668]	@ (800836c <_dtoa_r+0x2cc>)
 80080d0:	f002 fc36 	bl	800a940 <__assert_func>
 80080d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080d8:	6007      	str	r7, [r0, #0]
 80080da:	60c7      	str	r7, [r0, #12]
 80080dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	b159      	cbz	r1, 80080fc <_dtoa_r+0x5c>
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	604a      	str	r2, [r1, #4]
 80080e8:	2301      	movs	r3, #1
 80080ea:	4093      	lsls	r3, r2
 80080ec:	608b      	str	r3, [r1, #8]
 80080ee:	4658      	mov	r0, fp
 80080f0:	f000 feda 	bl	8008ea8 <_Bfree>
 80080f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	1e2b      	subs	r3, r5, #0
 80080fe:	bfb9      	ittee	lt
 8008100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008104:	9303      	strlt	r3, [sp, #12]
 8008106:	2300      	movge	r3, #0
 8008108:	6033      	strge	r3, [r6, #0]
 800810a:	9f03      	ldr	r7, [sp, #12]
 800810c:	4b98      	ldr	r3, [pc, #608]	@ (8008370 <_dtoa_r+0x2d0>)
 800810e:	bfbc      	itt	lt
 8008110:	2201      	movlt	r2, #1
 8008112:	6032      	strlt	r2, [r6, #0]
 8008114:	43bb      	bics	r3, r7
 8008116:	d112      	bne.n	800813e <_dtoa_r+0x9e>
 8008118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800811a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008124:	4323      	orrs	r3, r4
 8008126:	f000 854d 	beq.w	8008bc4 <_dtoa_r+0xb24>
 800812a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800812c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008384 <_dtoa_r+0x2e4>
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 854f 	beq.w	8008bd4 <_dtoa_r+0xb34>
 8008136:	f10a 0303 	add.w	r3, sl, #3
 800813a:	f000 bd49 	b.w	8008bd0 <_dtoa_r+0xb30>
 800813e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	ec51 0b17 	vmov	r0, r1, d7
 8008148:	2300      	movs	r3, #0
 800814a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800814e:	f7f8 fceb 	bl	8000b28 <__aeabi_dcmpeq>
 8008152:	4680      	mov	r8, r0
 8008154:	b158      	cbz	r0, 800816e <_dtoa_r+0xce>
 8008156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008158:	2301      	movs	r3, #1
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800815e:	b113      	cbz	r3, 8008166 <_dtoa_r+0xc6>
 8008160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008162:	4b84      	ldr	r3, [pc, #528]	@ (8008374 <_dtoa_r+0x2d4>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008388 <_dtoa_r+0x2e8>
 800816a:	f000 bd33 	b.w	8008bd4 <_dtoa_r+0xb34>
 800816e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008172:	aa16      	add	r2, sp, #88	@ 0x58
 8008174:	a917      	add	r1, sp, #92	@ 0x5c
 8008176:	4658      	mov	r0, fp
 8008178:	f001 fa3a 	bl	80095f0 <__d2b>
 800817c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008180:	4681      	mov	r9, r0
 8008182:	2e00      	cmp	r6, #0
 8008184:	d077      	beq.n	8008276 <_dtoa_r+0x1d6>
 8008186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800818c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800819c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081a0:	4619      	mov	r1, r3
 80081a2:	2200      	movs	r2, #0
 80081a4:	4b74      	ldr	r3, [pc, #464]	@ (8008378 <_dtoa_r+0x2d8>)
 80081a6:	f7f8 f89f 	bl	80002e8 <__aeabi_dsub>
 80081aa:	a369      	add	r3, pc, #420	@ (adr r3, 8008350 <_dtoa_r+0x2b0>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 fa52 	bl	8000658 <__aeabi_dmul>
 80081b4:	a368      	add	r3, pc, #416	@ (adr r3, 8008358 <_dtoa_r+0x2b8>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f897 	bl	80002ec <__adddf3>
 80081be:	4604      	mov	r4, r0
 80081c0:	4630      	mov	r0, r6
 80081c2:	460d      	mov	r5, r1
 80081c4:	f7f8 f9de 	bl	8000584 <__aeabi_i2d>
 80081c8:	a365      	add	r3, pc, #404	@ (adr r3, 8008360 <_dtoa_r+0x2c0>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 fa43 	bl	8000658 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f8 f887 	bl	80002ec <__adddf3>
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	f7f8 fce9 	bl	8000bb8 <__aeabi_d2iz>
 80081e6:	2200      	movs	r2, #0
 80081e8:	4607      	mov	r7, r0
 80081ea:	2300      	movs	r3, #0
 80081ec:	4620      	mov	r0, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	f7f8 fca4 	bl	8000b3c <__aeabi_dcmplt>
 80081f4:	b140      	cbz	r0, 8008208 <_dtoa_r+0x168>
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7f8 f9c4 	bl	8000584 <__aeabi_i2d>
 80081fc:	4622      	mov	r2, r4
 80081fe:	462b      	mov	r3, r5
 8008200:	f7f8 fc92 	bl	8000b28 <__aeabi_dcmpeq>
 8008204:	b900      	cbnz	r0, 8008208 <_dtoa_r+0x168>
 8008206:	3f01      	subs	r7, #1
 8008208:	2f16      	cmp	r7, #22
 800820a:	d851      	bhi.n	80082b0 <_dtoa_r+0x210>
 800820c:	4b5b      	ldr	r3, [pc, #364]	@ (800837c <_dtoa_r+0x2dc>)
 800820e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800821a:	f7f8 fc8f 	bl	8000b3c <__aeabi_dcmplt>
 800821e:	2800      	cmp	r0, #0
 8008220:	d048      	beq.n	80082b4 <_dtoa_r+0x214>
 8008222:	3f01      	subs	r7, #1
 8008224:	2300      	movs	r3, #0
 8008226:	9312      	str	r3, [sp, #72]	@ 0x48
 8008228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800822a:	1b9b      	subs	r3, r3, r6
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	bf44      	itt	mi
 8008230:	f1c3 0801 	rsbmi	r8, r3, #1
 8008234:	2300      	movmi	r3, #0
 8008236:	9208      	str	r2, [sp, #32]
 8008238:	bf54      	ite	pl
 800823a:	f04f 0800 	movpl.w	r8, #0
 800823e:	9308      	strmi	r3, [sp, #32]
 8008240:	2f00      	cmp	r7, #0
 8008242:	db39      	blt.n	80082b8 <_dtoa_r+0x218>
 8008244:	9b08      	ldr	r3, [sp, #32]
 8008246:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008248:	443b      	add	r3, r7
 800824a:	9308      	str	r3, [sp, #32]
 800824c:	2300      	movs	r3, #0
 800824e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008252:	2b09      	cmp	r3, #9
 8008254:	d864      	bhi.n	8008320 <_dtoa_r+0x280>
 8008256:	2b05      	cmp	r3, #5
 8008258:	bfc4      	itt	gt
 800825a:	3b04      	subgt	r3, #4
 800825c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	f1a3 0302 	sub.w	r3, r3, #2
 8008264:	bfcc      	ite	gt
 8008266:	2400      	movgt	r4, #0
 8008268:	2401      	movle	r4, #1
 800826a:	2b03      	cmp	r3, #3
 800826c:	d863      	bhi.n	8008336 <_dtoa_r+0x296>
 800826e:	e8df f003 	tbb	[pc, r3]
 8008272:	372a      	.short	0x372a
 8008274:	5535      	.short	0x5535
 8008276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800827a:	441e      	add	r6, r3
 800827c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008280:	2b20      	cmp	r3, #32
 8008282:	bfc1      	itttt	gt
 8008284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008288:	409f      	lslgt	r7, r3
 800828a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800828e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008292:	bfd6      	itet	le
 8008294:	f1c3 0320 	rsble	r3, r3, #32
 8008298:	ea47 0003 	orrgt.w	r0, r7, r3
 800829c:	fa04 f003 	lslle.w	r0, r4, r3
 80082a0:	f7f8 f960 	bl	8000564 <__aeabi_ui2d>
 80082a4:	2201      	movs	r2, #1
 80082a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082aa:	3e01      	subs	r6, #1
 80082ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80082ae:	e777      	b.n	80081a0 <_dtoa_r+0x100>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e7b8      	b.n	8008226 <_dtoa_r+0x186>
 80082b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80082b6:	e7b7      	b.n	8008228 <_dtoa_r+0x188>
 80082b8:	427b      	negs	r3, r7
 80082ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80082bc:	2300      	movs	r3, #0
 80082be:	eba8 0807 	sub.w	r8, r8, r7
 80082c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082c4:	e7c4      	b.n	8008250 <_dtoa_r+0x1b0>
 80082c6:	2300      	movs	r3, #0
 80082c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dc35      	bgt.n	800833c <_dtoa_r+0x29c>
 80082d0:	2301      	movs	r3, #1
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	9307      	str	r3, [sp, #28]
 80082d6:	461a      	mov	r2, r3
 80082d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80082da:	e00b      	b.n	80082f4 <_dtoa_r+0x254>
 80082dc:	2301      	movs	r3, #1
 80082de:	e7f3      	b.n	80082c8 <_dtoa_r+0x228>
 80082e0:	2300      	movs	r3, #0
 80082e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	9307      	str	r3, [sp, #28]
 80082f0:	bfb8      	it	lt
 80082f2:	2301      	movlt	r3, #1
 80082f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082f8:	2100      	movs	r1, #0
 80082fa:	2204      	movs	r2, #4
 80082fc:	f102 0514 	add.w	r5, r2, #20
 8008300:	429d      	cmp	r5, r3
 8008302:	d91f      	bls.n	8008344 <_dtoa_r+0x2a4>
 8008304:	6041      	str	r1, [r0, #4]
 8008306:	4658      	mov	r0, fp
 8008308:	f000 fd8e 	bl	8008e28 <_Balloc>
 800830c:	4682      	mov	sl, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d13c      	bne.n	800838c <_dtoa_r+0x2ec>
 8008312:	4b1b      	ldr	r3, [pc, #108]	@ (8008380 <_dtoa_r+0x2e0>)
 8008314:	4602      	mov	r2, r0
 8008316:	f240 11af 	movw	r1, #431	@ 0x1af
 800831a:	e6d8      	b.n	80080ce <_dtoa_r+0x2e>
 800831c:	2301      	movs	r3, #1
 800831e:	e7e0      	b.n	80082e2 <_dtoa_r+0x242>
 8008320:	2401      	movs	r4, #1
 8008322:	2300      	movs	r3, #0
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	9307      	str	r3, [sp, #28]
 8008330:	2200      	movs	r2, #0
 8008332:	2312      	movs	r3, #18
 8008334:	e7d0      	b.n	80082d8 <_dtoa_r+0x238>
 8008336:	2301      	movs	r3, #1
 8008338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800833a:	e7f5      	b.n	8008328 <_dtoa_r+0x288>
 800833c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	9307      	str	r3, [sp, #28]
 8008342:	e7d7      	b.n	80082f4 <_dtoa_r+0x254>
 8008344:	3101      	adds	r1, #1
 8008346:	0052      	lsls	r2, r2, #1
 8008348:	e7d8      	b.n	80082fc <_dtoa_r+0x25c>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	636f4361 	.word	0x636f4361
 8008354:	3fd287a7 	.word	0x3fd287a7
 8008358:	8b60c8b3 	.word	0x8b60c8b3
 800835c:	3fc68a28 	.word	0x3fc68a28
 8008360:	509f79fb 	.word	0x509f79fb
 8008364:	3fd34413 	.word	0x3fd34413
 8008368:	0800b81a 	.word	0x0800b81a
 800836c:	0800b831 	.word	0x0800b831
 8008370:	7ff00000 	.word	0x7ff00000
 8008374:	0800b7e5 	.word	0x0800b7e5
 8008378:	3ff80000 	.word	0x3ff80000
 800837c:	0800b928 	.word	0x0800b928
 8008380:	0800b889 	.word	0x0800b889
 8008384:	0800b816 	.word	0x0800b816
 8008388:	0800b7e4 	.word	0x0800b7e4
 800838c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008390:	6018      	str	r0, [r3, #0]
 8008392:	9b07      	ldr	r3, [sp, #28]
 8008394:	2b0e      	cmp	r3, #14
 8008396:	f200 80a4 	bhi.w	80084e2 <_dtoa_r+0x442>
 800839a:	2c00      	cmp	r4, #0
 800839c:	f000 80a1 	beq.w	80084e2 <_dtoa_r+0x442>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	dd33      	ble.n	800840c <_dtoa_r+0x36c>
 80083a4:	4bad      	ldr	r3, [pc, #692]	@ (800865c <_dtoa_r+0x5bc>)
 80083a6:	f007 020f 	and.w	r2, r7, #15
 80083aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ae:	ed93 7b00 	vldr	d7, [r3]
 80083b2:	05f8      	lsls	r0, r7, #23
 80083b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083bc:	d516      	bpl.n	80083ec <_dtoa_r+0x34c>
 80083be:	4ba8      	ldr	r3, [pc, #672]	@ (8008660 <_dtoa_r+0x5c0>)
 80083c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083c8:	f7f8 fa70 	bl	80008ac <__aeabi_ddiv>
 80083cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083d0:	f004 040f 	and.w	r4, r4, #15
 80083d4:	2603      	movs	r6, #3
 80083d6:	4da2      	ldr	r5, [pc, #648]	@ (8008660 <_dtoa_r+0x5c0>)
 80083d8:	b954      	cbnz	r4, 80083f0 <_dtoa_r+0x350>
 80083da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e2:	f7f8 fa63 	bl	80008ac <__aeabi_ddiv>
 80083e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ea:	e028      	b.n	800843e <_dtoa_r+0x39e>
 80083ec:	2602      	movs	r6, #2
 80083ee:	e7f2      	b.n	80083d6 <_dtoa_r+0x336>
 80083f0:	07e1      	lsls	r1, r4, #31
 80083f2:	d508      	bpl.n	8008406 <_dtoa_r+0x366>
 80083f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083fc:	f7f8 f92c 	bl	8000658 <__aeabi_dmul>
 8008400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008404:	3601      	adds	r6, #1
 8008406:	1064      	asrs	r4, r4, #1
 8008408:	3508      	adds	r5, #8
 800840a:	e7e5      	b.n	80083d8 <_dtoa_r+0x338>
 800840c:	f000 80d2 	beq.w	80085b4 <_dtoa_r+0x514>
 8008410:	427c      	negs	r4, r7
 8008412:	4b92      	ldr	r3, [pc, #584]	@ (800865c <_dtoa_r+0x5bc>)
 8008414:	4d92      	ldr	r5, [pc, #584]	@ (8008660 <_dtoa_r+0x5c0>)
 8008416:	f004 020f 	and.w	r2, r4, #15
 800841a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008426:	f7f8 f917 	bl	8000658 <__aeabi_dmul>
 800842a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842e:	1124      	asrs	r4, r4, #4
 8008430:	2300      	movs	r3, #0
 8008432:	2602      	movs	r6, #2
 8008434:	2c00      	cmp	r4, #0
 8008436:	f040 80b2 	bne.w	800859e <_dtoa_r+0x4fe>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1d3      	bne.n	80083e6 <_dtoa_r+0x346>
 800843e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80b7 	beq.w	80085b8 <_dtoa_r+0x518>
 800844a:	4b86      	ldr	r3, [pc, #536]	@ (8008664 <_dtoa_r+0x5c4>)
 800844c:	2200      	movs	r2, #0
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 fb73 	bl	8000b3c <__aeabi_dcmplt>
 8008456:	2800      	cmp	r0, #0
 8008458:	f000 80ae 	beq.w	80085b8 <_dtoa_r+0x518>
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80aa 	beq.w	80085b8 <_dtoa_r+0x518>
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	dd37      	ble.n	80084da <_dtoa_r+0x43a>
 800846a:	1e7b      	subs	r3, r7, #1
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	4620      	mov	r0, r4
 8008470:	4b7d      	ldr	r3, [pc, #500]	@ (8008668 <_dtoa_r+0x5c8>)
 8008472:	2200      	movs	r2, #0
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f8ef 	bl	8000658 <__aeabi_dmul>
 800847a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800847e:	9c00      	ldr	r4, [sp, #0]
 8008480:	3601      	adds	r6, #1
 8008482:	4630      	mov	r0, r6
 8008484:	f7f8 f87e 	bl	8000584 <__aeabi_i2d>
 8008488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800848c:	f7f8 f8e4 	bl	8000658 <__aeabi_dmul>
 8008490:	4b76      	ldr	r3, [pc, #472]	@ (800866c <_dtoa_r+0x5cc>)
 8008492:	2200      	movs	r2, #0
 8008494:	f7f7 ff2a 	bl	80002ec <__adddf3>
 8008498:	4605      	mov	r5, r0
 800849a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800849e:	2c00      	cmp	r4, #0
 80084a0:	f040 808d 	bne.w	80085be <_dtoa_r+0x51e>
 80084a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a8:	4b71      	ldr	r3, [pc, #452]	@ (8008670 <_dtoa_r+0x5d0>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	f7f7 ff1c 	bl	80002e8 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4633      	mov	r3, r6
 80084bc:	f7f8 fb5c 	bl	8000b78 <__aeabi_dcmpgt>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f040 828b 	bne.w	80089dc <_dtoa_r+0x93c>
 80084c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ca:	462a      	mov	r2, r5
 80084cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084d0:	f7f8 fb34 	bl	8000b3c <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f040 8128 	bne.w	800872a <_dtoa_r+0x68a>
 80084da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80084de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f2c0 815a 	blt.w	800879e <_dtoa_r+0x6fe>
 80084ea:	2f0e      	cmp	r7, #14
 80084ec:	f300 8157 	bgt.w	800879e <_dtoa_r+0x6fe>
 80084f0:	4b5a      	ldr	r3, [pc, #360]	@ (800865c <_dtoa_r+0x5bc>)
 80084f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084f6:	ed93 7b00 	vldr	d7, [r3]
 80084fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	ed8d 7b00 	vstr	d7, [sp]
 8008502:	da03      	bge.n	800850c <_dtoa_r+0x46c>
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f340 8101 	ble.w	800870e <_dtoa_r+0x66e>
 800850c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008510:	4656      	mov	r6, sl
 8008512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 f9c7 	bl	80008ac <__aeabi_ddiv>
 800851e:	f7f8 fb4b 	bl	8000bb8 <__aeabi_d2iz>
 8008522:	4680      	mov	r8, r0
 8008524:	f7f8 f82e 	bl	8000584 <__aeabi_i2d>
 8008528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800852c:	f7f8 f894 	bl	8000658 <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800853c:	f7f7 fed4 	bl	80002e8 <__aeabi_dsub>
 8008540:	f806 4b01 	strb.w	r4, [r6], #1
 8008544:	9d07      	ldr	r5, [sp, #28]
 8008546:	eba6 040a 	sub.w	r4, r6, sl
 800854a:	42a5      	cmp	r5, r4
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	f040 8117 	bne.w	8008782 <_dtoa_r+0x6e2>
 8008554:	f7f7 feca 	bl	80002ec <__adddf3>
 8008558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	f7f8 fb0a 	bl	8000b78 <__aeabi_dcmpgt>
 8008564:	2800      	cmp	r0, #0
 8008566:	f040 80f9 	bne.w	800875c <_dtoa_r+0x6bc>
 800856a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 fad9 	bl	8000b28 <__aeabi_dcmpeq>
 8008576:	b118      	cbz	r0, 8008580 <_dtoa_r+0x4e0>
 8008578:	f018 0f01 	tst.w	r8, #1
 800857c:	f040 80ee 	bne.w	800875c <_dtoa_r+0x6bc>
 8008580:	4649      	mov	r1, r9
 8008582:	4658      	mov	r0, fp
 8008584:	f000 fc90 	bl	8008ea8 <_Bfree>
 8008588:	2300      	movs	r3, #0
 800858a:	7033      	strb	r3, [r6, #0]
 800858c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800858e:	3701      	adds	r7, #1
 8008590:	601f      	str	r7, [r3, #0]
 8008592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 831d 	beq.w	8008bd4 <_dtoa_r+0xb34>
 800859a:	601e      	str	r6, [r3, #0]
 800859c:	e31a      	b.n	8008bd4 <_dtoa_r+0xb34>
 800859e:	07e2      	lsls	r2, r4, #31
 80085a0:	d505      	bpl.n	80085ae <_dtoa_r+0x50e>
 80085a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085a6:	f7f8 f857 	bl	8000658 <__aeabi_dmul>
 80085aa:	3601      	adds	r6, #1
 80085ac:	2301      	movs	r3, #1
 80085ae:	1064      	asrs	r4, r4, #1
 80085b0:	3508      	adds	r5, #8
 80085b2:	e73f      	b.n	8008434 <_dtoa_r+0x394>
 80085b4:	2602      	movs	r6, #2
 80085b6:	e742      	b.n	800843e <_dtoa_r+0x39e>
 80085b8:	9c07      	ldr	r4, [sp, #28]
 80085ba:	9704      	str	r7, [sp, #16]
 80085bc:	e761      	b.n	8008482 <_dtoa_r+0x3e2>
 80085be:	4b27      	ldr	r3, [pc, #156]	@ (800865c <_dtoa_r+0x5bc>)
 80085c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ca:	4454      	add	r4, sl
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d053      	beq.n	8008678 <_dtoa_r+0x5d8>
 80085d0:	4928      	ldr	r1, [pc, #160]	@ (8008674 <_dtoa_r+0x5d4>)
 80085d2:	2000      	movs	r0, #0
 80085d4:	f7f8 f96a 	bl	80008ac <__aeabi_ddiv>
 80085d8:	4633      	mov	r3, r6
 80085da:	462a      	mov	r2, r5
 80085dc:	f7f7 fe84 	bl	80002e8 <__aeabi_dsub>
 80085e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085e4:	4656      	mov	r6, sl
 80085e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ea:	f7f8 fae5 	bl	8000bb8 <__aeabi_d2iz>
 80085ee:	4605      	mov	r5, r0
 80085f0:	f7f7 ffc8 	bl	8000584 <__aeabi_i2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fc:	f7f7 fe74 	bl	80002e8 <__aeabi_dsub>
 8008600:	3530      	adds	r5, #48	@ 0x30
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800860a:	f806 5b01 	strb.w	r5, [r6], #1
 800860e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008612:	f7f8 fa93 	bl	8000b3c <__aeabi_dcmplt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d171      	bne.n	80086fe <_dtoa_r+0x65e>
 800861a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800861e:	4911      	ldr	r1, [pc, #68]	@ (8008664 <_dtoa_r+0x5c4>)
 8008620:	2000      	movs	r0, #0
 8008622:	f7f7 fe61 	bl	80002e8 <__aeabi_dsub>
 8008626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800862a:	f7f8 fa87 	bl	8000b3c <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	f040 8095 	bne.w	800875e <_dtoa_r+0x6be>
 8008634:	42a6      	cmp	r6, r4
 8008636:	f43f af50 	beq.w	80084da <_dtoa_r+0x43a>
 800863a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800863e:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <_dtoa_r+0x5c8>)
 8008640:	2200      	movs	r2, #0
 8008642:	f7f8 f809 	bl	8000658 <__aeabi_dmul>
 8008646:	4b08      	ldr	r3, [pc, #32]	@ (8008668 <_dtoa_r+0x5c8>)
 8008648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800864c:	2200      	movs	r2, #0
 800864e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008652:	f7f8 f801 	bl	8000658 <__aeabi_dmul>
 8008656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800865a:	e7c4      	b.n	80085e6 <_dtoa_r+0x546>
 800865c:	0800b928 	.word	0x0800b928
 8008660:	0800b900 	.word	0x0800b900
 8008664:	3ff00000 	.word	0x3ff00000
 8008668:	40240000 	.word	0x40240000
 800866c:	401c0000 	.word	0x401c0000
 8008670:	40140000 	.word	0x40140000
 8008674:	3fe00000 	.word	0x3fe00000
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	f7f7 ffec 	bl	8000658 <__aeabi_dmul>
 8008680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008684:	9415      	str	r4, [sp, #84]	@ 0x54
 8008686:	4656      	mov	r6, sl
 8008688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800868c:	f7f8 fa94 	bl	8000bb8 <__aeabi_d2iz>
 8008690:	4605      	mov	r5, r0
 8008692:	f7f7 ff77 	bl	8000584 <__aeabi_i2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800869e:	f7f7 fe23 	bl	80002e8 <__aeabi_dsub>
 80086a2:	3530      	adds	r5, #48	@ 0x30
 80086a4:	f806 5b01 	strb.w	r5, [r6], #1
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	d124      	bne.n	8008702 <_dtoa_r+0x662>
 80086b8:	4bac      	ldr	r3, [pc, #688]	@ (800896c <_dtoa_r+0x8cc>)
 80086ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086be:	f7f7 fe15 	bl	80002ec <__adddf3>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ca:	f7f8 fa55 	bl	8000b78 <__aeabi_dcmpgt>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d145      	bne.n	800875e <_dtoa_r+0x6be>
 80086d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086d6:	49a5      	ldr	r1, [pc, #660]	@ (800896c <_dtoa_r+0x8cc>)
 80086d8:	2000      	movs	r0, #0
 80086da:	f7f7 fe05 	bl	80002e8 <__aeabi_dsub>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	f7f8 fa29 	bl	8000b3c <__aeabi_dcmplt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f43f aef5 	beq.w	80084da <_dtoa_r+0x43a>
 80086f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80086f2:	1e73      	subs	r3, r6, #1
 80086f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80086f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086fa:	2b30      	cmp	r3, #48	@ 0x30
 80086fc:	d0f8      	beq.n	80086f0 <_dtoa_r+0x650>
 80086fe:	9f04      	ldr	r7, [sp, #16]
 8008700:	e73e      	b.n	8008580 <_dtoa_r+0x4e0>
 8008702:	4b9b      	ldr	r3, [pc, #620]	@ (8008970 <_dtoa_r+0x8d0>)
 8008704:	f7f7 ffa8 	bl	8000658 <__aeabi_dmul>
 8008708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800870c:	e7bc      	b.n	8008688 <_dtoa_r+0x5e8>
 800870e:	d10c      	bne.n	800872a <_dtoa_r+0x68a>
 8008710:	4b98      	ldr	r3, [pc, #608]	@ (8008974 <_dtoa_r+0x8d4>)
 8008712:	2200      	movs	r2, #0
 8008714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008718:	f7f7 ff9e 	bl	8000658 <__aeabi_dmul>
 800871c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008720:	f7f8 fa20 	bl	8000b64 <__aeabi_dcmpge>
 8008724:	2800      	cmp	r0, #0
 8008726:	f000 8157 	beq.w	80089d8 <_dtoa_r+0x938>
 800872a:	2400      	movs	r4, #0
 800872c:	4625      	mov	r5, r4
 800872e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008730:	43db      	mvns	r3, r3
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	4656      	mov	r6, sl
 8008736:	2700      	movs	r7, #0
 8008738:	4621      	mov	r1, r4
 800873a:	4658      	mov	r0, fp
 800873c:	f000 fbb4 	bl	8008ea8 <_Bfree>
 8008740:	2d00      	cmp	r5, #0
 8008742:	d0dc      	beq.n	80086fe <_dtoa_r+0x65e>
 8008744:	b12f      	cbz	r7, 8008752 <_dtoa_r+0x6b2>
 8008746:	42af      	cmp	r7, r5
 8008748:	d003      	beq.n	8008752 <_dtoa_r+0x6b2>
 800874a:	4639      	mov	r1, r7
 800874c:	4658      	mov	r0, fp
 800874e:	f000 fbab 	bl	8008ea8 <_Bfree>
 8008752:	4629      	mov	r1, r5
 8008754:	4658      	mov	r0, fp
 8008756:	f000 fba7 	bl	8008ea8 <_Bfree>
 800875a:	e7d0      	b.n	80086fe <_dtoa_r+0x65e>
 800875c:	9704      	str	r7, [sp, #16]
 800875e:	4633      	mov	r3, r6
 8008760:	461e      	mov	r6, r3
 8008762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008766:	2a39      	cmp	r2, #57	@ 0x39
 8008768:	d107      	bne.n	800877a <_dtoa_r+0x6da>
 800876a:	459a      	cmp	sl, r3
 800876c:	d1f8      	bne.n	8008760 <_dtoa_r+0x6c0>
 800876e:	9a04      	ldr	r2, [sp, #16]
 8008770:	3201      	adds	r2, #1
 8008772:	9204      	str	r2, [sp, #16]
 8008774:	2230      	movs	r2, #48	@ 0x30
 8008776:	f88a 2000 	strb.w	r2, [sl]
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	3201      	adds	r2, #1
 800877e:	701a      	strb	r2, [r3, #0]
 8008780:	e7bd      	b.n	80086fe <_dtoa_r+0x65e>
 8008782:	4b7b      	ldr	r3, [pc, #492]	@ (8008970 <_dtoa_r+0x8d0>)
 8008784:	2200      	movs	r2, #0
 8008786:	f7f7 ff67 	bl	8000658 <__aeabi_dmul>
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	f7f8 f9c9 	bl	8000b28 <__aeabi_dcmpeq>
 8008796:	2800      	cmp	r0, #0
 8008798:	f43f aebb 	beq.w	8008512 <_dtoa_r+0x472>
 800879c:	e6f0      	b.n	8008580 <_dtoa_r+0x4e0>
 800879e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087a0:	2a00      	cmp	r2, #0
 80087a2:	f000 80db 	beq.w	800895c <_dtoa_r+0x8bc>
 80087a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a8:	2a01      	cmp	r2, #1
 80087aa:	f300 80bf 	bgt.w	800892c <_dtoa_r+0x88c>
 80087ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	f000 80b7 	beq.w	8008924 <_dtoa_r+0x884>
 80087b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80087ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087bc:	4646      	mov	r6, r8
 80087be:	9a08      	ldr	r2, [sp, #32]
 80087c0:	2101      	movs	r1, #1
 80087c2:	441a      	add	r2, r3
 80087c4:	4658      	mov	r0, fp
 80087c6:	4498      	add	r8, r3
 80087c8:	9208      	str	r2, [sp, #32]
 80087ca:	f000 fc6b 	bl	80090a4 <__i2b>
 80087ce:	4605      	mov	r5, r0
 80087d0:	b15e      	cbz	r6, 80087ea <_dtoa_r+0x74a>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd08      	ble.n	80087ea <_dtoa_r+0x74a>
 80087d8:	42b3      	cmp	r3, r6
 80087da:	9a08      	ldr	r2, [sp, #32]
 80087dc:	bfa8      	it	ge
 80087de:	4633      	movge	r3, r6
 80087e0:	eba8 0803 	sub.w	r8, r8, r3
 80087e4:	1af6      	subs	r6, r6, r3
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	9308      	str	r3, [sp, #32]
 80087ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ec:	b1f3      	cbz	r3, 800882c <_dtoa_r+0x78c>
 80087ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80b7 	beq.w	8008964 <_dtoa_r+0x8c4>
 80087f6:	b18c      	cbz	r4, 800881c <_dtoa_r+0x77c>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4622      	mov	r2, r4
 80087fc:	4658      	mov	r0, fp
 80087fe:	f000 fd11 	bl	8009224 <__pow5mult>
 8008802:	464a      	mov	r2, r9
 8008804:	4601      	mov	r1, r0
 8008806:	4605      	mov	r5, r0
 8008808:	4658      	mov	r0, fp
 800880a:	f000 fc61 	bl	80090d0 <__multiply>
 800880e:	4649      	mov	r1, r9
 8008810:	9004      	str	r0, [sp, #16]
 8008812:	4658      	mov	r0, fp
 8008814:	f000 fb48 	bl	8008ea8 <_Bfree>
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	4699      	mov	r9, r3
 800881c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800881e:	1b1a      	subs	r2, r3, r4
 8008820:	d004      	beq.n	800882c <_dtoa_r+0x78c>
 8008822:	4649      	mov	r1, r9
 8008824:	4658      	mov	r0, fp
 8008826:	f000 fcfd 	bl	8009224 <__pow5mult>
 800882a:	4681      	mov	r9, r0
 800882c:	2101      	movs	r1, #1
 800882e:	4658      	mov	r0, fp
 8008830:	f000 fc38 	bl	80090a4 <__i2b>
 8008834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008836:	4604      	mov	r4, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 81cf 	beq.w	8008bdc <_dtoa_r+0xb3c>
 800883e:	461a      	mov	r2, r3
 8008840:	4601      	mov	r1, r0
 8008842:	4658      	mov	r0, fp
 8008844:	f000 fcee 	bl	8009224 <__pow5mult>
 8008848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884a:	2b01      	cmp	r3, #1
 800884c:	4604      	mov	r4, r0
 800884e:	f300 8095 	bgt.w	800897c <_dtoa_r+0x8dc>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8087 	bne.w	8008968 <_dtoa_r+0x8c8>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008860:	2b00      	cmp	r3, #0
 8008862:	f040 8089 	bne.w	8008978 <_dtoa_r+0x8d8>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800886c:	0d1b      	lsrs	r3, r3, #20
 800886e:	051b      	lsls	r3, r3, #20
 8008870:	b12b      	cbz	r3, 800887e <_dtoa_r+0x7de>
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	3301      	adds	r3, #1
 8008876:	9308      	str	r3, [sp, #32]
 8008878:	f108 0801 	add.w	r8, r8, #1
 800887c:	2301      	movs	r3, #1
 800887e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 81b0 	beq.w	8008be8 <_dtoa_r+0xb48>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800888e:	6918      	ldr	r0, [r3, #16]
 8008890:	f000 fbbc 	bl	800900c <__hi0bits>
 8008894:	f1c0 0020 	rsb	r0, r0, #32
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	4418      	add	r0, r3
 800889c:	f010 001f 	ands.w	r0, r0, #31
 80088a0:	d077      	beq.n	8008992 <_dtoa_r+0x8f2>
 80088a2:	f1c0 0320 	rsb	r3, r0, #32
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	dd6b      	ble.n	8008982 <_dtoa_r+0x8e2>
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	f1c0 001c 	rsb	r0, r0, #28
 80088b0:	4403      	add	r3, r0
 80088b2:	4480      	add	r8, r0
 80088b4:	4406      	add	r6, r0
 80088b6:	9308      	str	r3, [sp, #32]
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	dd05      	ble.n	80088ca <_dtoa_r+0x82a>
 80088be:	4649      	mov	r1, r9
 80088c0:	4642      	mov	r2, r8
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 fd08 	bl	80092d8 <__lshift>
 80088c8:	4681      	mov	r9, r0
 80088ca:	9b08      	ldr	r3, [sp, #32]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd05      	ble.n	80088dc <_dtoa_r+0x83c>
 80088d0:	4621      	mov	r1, r4
 80088d2:	461a      	mov	r2, r3
 80088d4:	4658      	mov	r0, fp
 80088d6:	f000 fcff 	bl	80092d8 <__lshift>
 80088da:	4604      	mov	r4, r0
 80088dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d059      	beq.n	8008996 <_dtoa_r+0x8f6>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4648      	mov	r0, r9
 80088e6:	f000 fd63 	bl	80093b0 <__mcmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	da53      	bge.n	8008996 <_dtoa_r+0x8f6>
 80088ee:	1e7b      	subs	r3, r7, #1
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	4649      	mov	r1, r9
 80088f4:	2300      	movs	r3, #0
 80088f6:	220a      	movs	r2, #10
 80088f8:	4658      	mov	r0, fp
 80088fa:	f000 faf7 	bl	8008eec <__multadd>
 80088fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008900:	4681      	mov	r9, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8172 	beq.w	8008bec <_dtoa_r+0xb4c>
 8008908:	2300      	movs	r3, #0
 800890a:	4629      	mov	r1, r5
 800890c:	220a      	movs	r2, #10
 800890e:	4658      	mov	r0, fp
 8008910:	f000 faec 	bl	8008eec <__multadd>
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	4605      	mov	r5, r0
 800891a:	dc67      	bgt.n	80089ec <_dtoa_r+0x94c>
 800891c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891e:	2b02      	cmp	r3, #2
 8008920:	dc41      	bgt.n	80089a6 <_dtoa_r+0x906>
 8008922:	e063      	b.n	80089ec <_dtoa_r+0x94c>
 8008924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800892a:	e746      	b.n	80087ba <_dtoa_r+0x71a>
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	1e5c      	subs	r4, r3, #1
 8008930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008932:	42a3      	cmp	r3, r4
 8008934:	bfbf      	itttt	lt
 8008936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800893a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800893c:	1ae3      	sublt	r3, r4, r3
 800893e:	bfb4      	ite	lt
 8008940:	18d2      	addlt	r2, r2, r3
 8008942:	1b1c      	subge	r4, r3, r4
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	bfbc      	itt	lt
 8008948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800894a:	2400      	movlt	r4, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfb5      	itete	lt
 8008950:	eba8 0603 	sublt.w	r6, r8, r3
 8008954:	9b07      	ldrge	r3, [sp, #28]
 8008956:	2300      	movlt	r3, #0
 8008958:	4646      	movge	r6, r8
 800895a:	e730      	b.n	80087be <_dtoa_r+0x71e>
 800895c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800895e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008960:	4646      	mov	r6, r8
 8008962:	e735      	b.n	80087d0 <_dtoa_r+0x730>
 8008964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008966:	e75c      	b.n	8008822 <_dtoa_r+0x782>
 8008968:	2300      	movs	r3, #0
 800896a:	e788      	b.n	800887e <_dtoa_r+0x7de>
 800896c:	3fe00000 	.word	0x3fe00000
 8008970:	40240000 	.word	0x40240000
 8008974:	40140000 	.word	0x40140000
 8008978:	9b02      	ldr	r3, [sp, #8]
 800897a:	e780      	b.n	800887e <_dtoa_r+0x7de>
 800897c:	2300      	movs	r3, #0
 800897e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008980:	e782      	b.n	8008888 <_dtoa_r+0x7e8>
 8008982:	d099      	beq.n	80088b8 <_dtoa_r+0x818>
 8008984:	9a08      	ldr	r2, [sp, #32]
 8008986:	331c      	adds	r3, #28
 8008988:	441a      	add	r2, r3
 800898a:	4498      	add	r8, r3
 800898c:	441e      	add	r6, r3
 800898e:	9208      	str	r2, [sp, #32]
 8008990:	e792      	b.n	80088b8 <_dtoa_r+0x818>
 8008992:	4603      	mov	r3, r0
 8008994:	e7f6      	b.n	8008984 <_dtoa_r+0x8e4>
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	9704      	str	r7, [sp, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dc20      	bgt.n	80089e0 <_dtoa_r+0x940>
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	dd1e      	ble.n	80089e4 <_dtoa_r+0x944>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f47f aec0 	bne.w	800872e <_dtoa_r+0x68e>
 80089ae:	4621      	mov	r1, r4
 80089b0:	2205      	movs	r2, #5
 80089b2:	4658      	mov	r0, fp
 80089b4:	f000 fa9a 	bl	8008eec <__multadd>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4648      	mov	r0, r9
 80089be:	f000 fcf7 	bl	80093b0 <__mcmp>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	f77f aeb3 	ble.w	800872e <_dtoa_r+0x68e>
 80089c8:	4656      	mov	r6, sl
 80089ca:	2331      	movs	r3, #49	@ 0x31
 80089cc:	f806 3b01 	strb.w	r3, [r6], #1
 80089d0:	9b04      	ldr	r3, [sp, #16]
 80089d2:	3301      	adds	r3, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	e6ae      	b.n	8008736 <_dtoa_r+0x696>
 80089d8:	9c07      	ldr	r4, [sp, #28]
 80089da:	9704      	str	r7, [sp, #16]
 80089dc:	4625      	mov	r5, r4
 80089de:	e7f3      	b.n	80089c8 <_dtoa_r+0x928>
 80089e0:	9b07      	ldr	r3, [sp, #28]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8104 	beq.w	8008bf4 <_dtoa_r+0xb54>
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	dd05      	ble.n	80089fc <_dtoa_r+0x95c>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4632      	mov	r2, r6
 80089f4:	4658      	mov	r0, fp
 80089f6:	f000 fc6f 	bl	80092d8 <__lshift>
 80089fa:	4605      	mov	r5, r0
 80089fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d05a      	beq.n	8008ab8 <_dtoa_r+0xa18>
 8008a02:	6869      	ldr	r1, [r5, #4]
 8008a04:	4658      	mov	r0, fp
 8008a06:	f000 fa0f 	bl	8008e28 <_Balloc>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	b928      	cbnz	r0, 8008a1a <_dtoa_r+0x97a>
 8008a0e:	4b84      	ldr	r3, [pc, #528]	@ (8008c20 <_dtoa_r+0xb80>)
 8008a10:	4602      	mov	r2, r0
 8008a12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a16:	f7ff bb5a 	b.w	80080ce <_dtoa_r+0x2e>
 8008a1a:	692a      	ldr	r2, [r5, #16]
 8008a1c:	3202      	adds	r2, #2
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	f105 010c 	add.w	r1, r5, #12
 8008a24:	300c      	adds	r0, #12
 8008a26:	f001 ff75 	bl	800a914 <memcpy>
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4658      	mov	r0, fp
 8008a30:	f000 fc52 	bl	80092d8 <__lshift>
 8008a34:	f10a 0301 	add.w	r3, sl, #1
 8008a38:	9307      	str	r3, [sp, #28]
 8008a3a:	9b00      	ldr	r3, [sp, #0]
 8008a3c:	4453      	add	r3, sl
 8008a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	462f      	mov	r7, r5
 8008a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	4621      	mov	r1, r4
 8008a50:	3b01      	subs	r3, #1
 8008a52:	4648      	mov	r0, r9
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	f7ff fa99 	bl	8007f8c <quorem>
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	9002      	str	r0, [sp, #8]
 8008a5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a62:	4648      	mov	r0, r9
 8008a64:	f000 fca4 	bl	80093b0 <__mcmp>
 8008a68:	462a      	mov	r2, r5
 8008a6a:	9008      	str	r0, [sp, #32]
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f000 fcba 	bl	80093e8 <__mdiff>
 8008a74:	68c2      	ldr	r2, [r0, #12]
 8008a76:	4606      	mov	r6, r0
 8008a78:	bb02      	cbnz	r2, 8008abc <_dtoa_r+0xa1c>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4648      	mov	r0, r9
 8008a7e:	f000 fc97 	bl	80093b0 <__mcmp>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4631      	mov	r1, r6
 8008a86:	4658      	mov	r0, fp
 8008a88:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a8a:	f000 fa0d 	bl	8008ea8 <_Bfree>
 8008a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a92:	9e07      	ldr	r6, [sp, #28]
 8008a94:	ea43 0102 	orr.w	r1, r3, r2
 8008a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a9a:	4319      	orrs	r1, r3
 8008a9c:	d110      	bne.n	8008ac0 <_dtoa_r+0xa20>
 8008a9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aa2:	d029      	beq.n	8008af8 <_dtoa_r+0xa58>
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd02      	ble.n	8008ab0 <_dtoa_r+0xa10>
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ab0:	9b00      	ldr	r3, [sp, #0]
 8008ab2:	f883 8000 	strb.w	r8, [r3]
 8008ab6:	e63f      	b.n	8008738 <_dtoa_r+0x698>
 8008ab8:	4628      	mov	r0, r5
 8008aba:	e7bb      	b.n	8008a34 <_dtoa_r+0x994>
 8008abc:	2201      	movs	r2, #1
 8008abe:	e7e1      	b.n	8008a84 <_dtoa_r+0x9e4>
 8008ac0:	9b08      	ldr	r3, [sp, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	db04      	blt.n	8008ad0 <_dtoa_r+0xa30>
 8008ac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008acc:	430b      	orrs	r3, r1
 8008ace:	d120      	bne.n	8008b12 <_dtoa_r+0xa72>
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	dded      	ble.n	8008ab0 <_dtoa_r+0xa10>
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4658      	mov	r0, fp
 8008ada:	f000 fbfd 	bl	80092d8 <__lshift>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	f000 fc65 	bl	80093b0 <__mcmp>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	dc03      	bgt.n	8008af2 <_dtoa_r+0xa52>
 8008aea:	d1e1      	bne.n	8008ab0 <_dtoa_r+0xa10>
 8008aec:	f018 0f01 	tst.w	r8, #1
 8008af0:	d0de      	beq.n	8008ab0 <_dtoa_r+0xa10>
 8008af2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008af6:	d1d8      	bne.n	8008aaa <_dtoa_r+0xa0a>
 8008af8:	9a00      	ldr	r2, [sp, #0]
 8008afa:	2339      	movs	r3, #57	@ 0x39
 8008afc:	7013      	strb	r3, [r2, #0]
 8008afe:	4633      	mov	r3, r6
 8008b00:	461e      	mov	r6, r3
 8008b02:	3b01      	subs	r3, #1
 8008b04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b08:	2a39      	cmp	r2, #57	@ 0x39
 8008b0a:	d052      	beq.n	8008bb2 <_dtoa_r+0xb12>
 8008b0c:	3201      	adds	r2, #1
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	e612      	b.n	8008738 <_dtoa_r+0x698>
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	dd07      	ble.n	8008b26 <_dtoa_r+0xa86>
 8008b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b1a:	d0ed      	beq.n	8008af8 <_dtoa_r+0xa58>
 8008b1c:	9a00      	ldr	r2, [sp, #0]
 8008b1e:	f108 0301 	add.w	r3, r8, #1
 8008b22:	7013      	strb	r3, [r2, #0]
 8008b24:	e608      	b.n	8008738 <_dtoa_r+0x698>
 8008b26:	9b07      	ldr	r3, [sp, #28]
 8008b28:	9a07      	ldr	r2, [sp, #28]
 8008b2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d028      	beq.n	8008b86 <_dtoa_r+0xae6>
 8008b34:	4649      	mov	r1, r9
 8008b36:	2300      	movs	r3, #0
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 f9d6 	bl	8008eec <__multadd>
 8008b40:	42af      	cmp	r7, r5
 8008b42:	4681      	mov	r9, r0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	f04f 020a 	mov.w	r2, #10
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	4658      	mov	r0, fp
 8008b50:	d107      	bne.n	8008b62 <_dtoa_r+0xac2>
 8008b52:	f000 f9cb 	bl	8008eec <__multadd>
 8008b56:	4607      	mov	r7, r0
 8008b58:	4605      	mov	r5, r0
 8008b5a:	9b07      	ldr	r3, [sp, #28]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	e774      	b.n	8008a4c <_dtoa_r+0x9ac>
 8008b62:	f000 f9c3 	bl	8008eec <__multadd>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4607      	mov	r7, r0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4658      	mov	r0, fp
 8008b70:	f000 f9bc 	bl	8008eec <__multadd>
 8008b74:	4605      	mov	r5, r0
 8008b76:	e7f0      	b.n	8008b5a <_dtoa_r+0xaba>
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bfcc      	ite	gt
 8008b7e:	461e      	movgt	r6, r3
 8008b80:	2601      	movle	r6, #1
 8008b82:	4456      	add	r6, sl
 8008b84:	2700      	movs	r7, #0
 8008b86:	4649      	mov	r1, r9
 8008b88:	2201      	movs	r2, #1
 8008b8a:	4658      	mov	r0, fp
 8008b8c:	f000 fba4 	bl	80092d8 <__lshift>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4681      	mov	r9, r0
 8008b94:	f000 fc0c 	bl	80093b0 <__mcmp>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dcb0      	bgt.n	8008afe <_dtoa_r+0xa5e>
 8008b9c:	d102      	bne.n	8008ba4 <_dtoa_r+0xb04>
 8008b9e:	f018 0f01 	tst.w	r8, #1
 8008ba2:	d1ac      	bne.n	8008afe <_dtoa_r+0xa5e>
 8008ba4:	4633      	mov	r3, r6
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bac:	2a30      	cmp	r2, #48	@ 0x30
 8008bae:	d0fa      	beq.n	8008ba6 <_dtoa_r+0xb06>
 8008bb0:	e5c2      	b.n	8008738 <_dtoa_r+0x698>
 8008bb2:	459a      	cmp	sl, r3
 8008bb4:	d1a4      	bne.n	8008b00 <_dtoa_r+0xa60>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	2331      	movs	r3, #49	@ 0x31
 8008bbe:	f88a 3000 	strb.w	r3, [sl]
 8008bc2:	e5b9      	b.n	8008738 <_dtoa_r+0x698>
 8008bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c24 <_dtoa_r+0xb84>
 8008bca:	b11b      	cbz	r3, 8008bd4 <_dtoa_r+0xb34>
 8008bcc:	f10a 0308 	add.w	r3, sl, #8
 8008bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	b019      	add	sp, #100	@ 0x64
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	f77f ae37 	ble.w	8008852 <_dtoa_r+0x7b2>
 8008be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be8:	2001      	movs	r0, #1
 8008bea:	e655      	b.n	8008898 <_dtoa_r+0x7f8>
 8008bec:	9b00      	ldr	r3, [sp, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f77f aed6 	ble.w	80089a0 <_dtoa_r+0x900>
 8008bf4:	4656      	mov	r6, sl
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f7ff f9c7 	bl	8007f8c <quorem>
 8008bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c02:	f806 8b01 	strb.w	r8, [r6], #1
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	eba6 020a 	sub.w	r2, r6, sl
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	ddb3      	ble.n	8008b78 <_dtoa_r+0xad8>
 8008c10:	4649      	mov	r1, r9
 8008c12:	2300      	movs	r3, #0
 8008c14:	220a      	movs	r2, #10
 8008c16:	4658      	mov	r0, fp
 8008c18:	f000 f968 	bl	8008eec <__multadd>
 8008c1c:	4681      	mov	r9, r0
 8008c1e:	e7ea      	b.n	8008bf6 <_dtoa_r+0xb56>
 8008c20:	0800b889 	.word	0x0800b889
 8008c24:	0800b80d 	.word	0x0800b80d

08008c28 <_free_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d041      	beq.n	8008cb4 <_free_r+0x8c>
 8008c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c34:	1f0c      	subs	r4, r1, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfb8      	it	lt
 8008c3a:	18e4      	addlt	r4, r4, r3
 8008c3c:	f000 f8e8 	bl	8008e10 <__malloc_lock>
 8008c40:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb8 <_free_r+0x90>)
 8008c42:	6813      	ldr	r3, [r2, #0]
 8008c44:	b933      	cbnz	r3, 8008c54 <_free_r+0x2c>
 8008c46:	6063      	str	r3, [r4, #4]
 8008c48:	6014      	str	r4, [r2, #0]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c50:	f000 b8e4 	b.w	8008e1c <__malloc_unlock>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d908      	bls.n	8008c6a <_free_r+0x42>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf01      	itttt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	e7ed      	b.n	8008c46 <_free_r+0x1e>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b10b      	cbz	r3, 8008c74 <_free_r+0x4c>
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d9fa      	bls.n	8008c6a <_free_r+0x42>
 8008c74:	6811      	ldr	r1, [r2, #0]
 8008c76:	1850      	adds	r0, r2, r1
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d10b      	bne.n	8008c94 <_free_r+0x6c>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	4401      	add	r1, r0
 8008c80:	1850      	adds	r0, r2, r1
 8008c82:	4283      	cmp	r3, r0
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	d1e0      	bne.n	8008c4a <_free_r+0x22>
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	6053      	str	r3, [r2, #4]
 8008c8e:	4408      	add	r0, r1
 8008c90:	6010      	str	r0, [r2, #0]
 8008c92:	e7da      	b.n	8008c4a <_free_r+0x22>
 8008c94:	d902      	bls.n	8008c9c <_free_r+0x74>
 8008c96:	230c      	movs	r3, #12
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	e7d6      	b.n	8008c4a <_free_r+0x22>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	1821      	adds	r1, r4, r0
 8008ca0:	428b      	cmp	r3, r1
 8008ca2:	bf04      	itt	eq
 8008ca4:	6819      	ldreq	r1, [r3, #0]
 8008ca6:	685b      	ldreq	r3, [r3, #4]
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	bf04      	itt	eq
 8008cac:	1809      	addeq	r1, r1, r0
 8008cae:	6021      	streq	r1, [r4, #0]
 8008cb0:	6054      	str	r4, [r2, #4]
 8008cb2:	e7ca      	b.n	8008c4a <_free_r+0x22>
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000734 	.word	0x20000734

08008cbc <malloc>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	@ (8008cc8 <malloc+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f000 b825 	b.w	8008d10 <_malloc_r>
 8008cc6:	bf00      	nop
 8008cc8:	2000019c 	.word	0x2000019c

08008ccc <sbrk_aligned>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4e0f      	ldr	r6, [pc, #60]	@ (8008d0c <sbrk_aligned+0x40>)
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	6831      	ldr	r1, [r6, #0]
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	b911      	cbnz	r1, 8008cde <sbrk_aligned+0x12>
 8008cd8:	f001 fe0c 	bl	800a8f4 <_sbrk_r>
 8008cdc:	6030      	str	r0, [r6, #0]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f001 fe07 	bl	800a8f4 <_sbrk_r>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d103      	bne.n	8008cf2 <sbrk_aligned+0x26>
 8008cea:	f04f 34ff 	mov.w	r4, #4294967295
 8008cee:	4620      	mov	r0, r4
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	1cc4      	adds	r4, r0, #3
 8008cf4:	f024 0403 	bic.w	r4, r4, #3
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d0f8      	beq.n	8008cee <sbrk_aligned+0x22>
 8008cfc:	1a21      	subs	r1, r4, r0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f001 fdf8 	bl	800a8f4 <_sbrk_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d1f2      	bne.n	8008cee <sbrk_aligned+0x22>
 8008d08:	e7ef      	b.n	8008cea <sbrk_aligned+0x1e>
 8008d0a:	bf00      	nop
 8008d0c:	20000730 	.word	0x20000730

08008d10 <_malloc_r>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	1ccd      	adds	r5, r1, #3
 8008d16:	f025 0503 	bic.w	r5, r5, #3
 8008d1a:	3508      	adds	r5, #8
 8008d1c:	2d0c      	cmp	r5, #12
 8008d1e:	bf38      	it	cc
 8008d20:	250c      	movcc	r5, #12
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	4606      	mov	r6, r0
 8008d26:	db01      	blt.n	8008d2c <_malloc_r+0x1c>
 8008d28:	42a9      	cmp	r1, r5
 8008d2a:	d904      	bls.n	8008d36 <_malloc_r+0x26>
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	6033      	str	r3, [r6, #0]
 8008d30:	2000      	movs	r0, #0
 8008d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e0c <_malloc_r+0xfc>
 8008d3a:	f000 f869 	bl	8008e10 <__malloc_lock>
 8008d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d42:	461c      	mov	r4, r3
 8008d44:	bb44      	cbnz	r4, 8008d98 <_malloc_r+0x88>
 8008d46:	4629      	mov	r1, r5
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ffbf 	bl	8008ccc <sbrk_aligned>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	4604      	mov	r4, r0
 8008d52:	d158      	bne.n	8008e06 <_malloc_r+0xf6>
 8008d54:	f8d8 4000 	ldr.w	r4, [r8]
 8008d58:	4627      	mov	r7, r4
 8008d5a:	2f00      	cmp	r7, #0
 8008d5c:	d143      	bne.n	8008de6 <_malloc_r+0xd6>
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d04b      	beq.n	8008dfa <_malloc_r+0xea>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	4639      	mov	r1, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	eb04 0903 	add.w	r9, r4, r3
 8008d6c:	f001 fdc2 	bl	800a8f4 <_sbrk_r>
 8008d70:	4581      	cmp	r9, r0
 8008d72:	d142      	bne.n	8008dfa <_malloc_r+0xea>
 8008d74:	6821      	ldr	r1, [r4, #0]
 8008d76:	1a6d      	subs	r5, r5, r1
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7ff ffa6 	bl	8008ccc <sbrk_aligned>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d03a      	beq.n	8008dfa <_malloc_r+0xea>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	442b      	add	r3, r5
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	bb62      	cbnz	r2, 8008dec <_malloc_r+0xdc>
 8008d92:	f8c8 7000 	str.w	r7, [r8]
 8008d96:	e00f      	b.n	8008db8 <_malloc_r+0xa8>
 8008d98:	6822      	ldr	r2, [r4, #0]
 8008d9a:	1b52      	subs	r2, r2, r5
 8008d9c:	d420      	bmi.n	8008de0 <_malloc_r+0xd0>
 8008d9e:	2a0b      	cmp	r2, #11
 8008da0:	d917      	bls.n	8008dd2 <_malloc_r+0xc2>
 8008da2:	1961      	adds	r1, r4, r5
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	6025      	str	r5, [r4, #0]
 8008da8:	bf18      	it	ne
 8008daa:	6059      	strne	r1, [r3, #4]
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	bf08      	it	eq
 8008db0:	f8c8 1000 	streq.w	r1, [r8]
 8008db4:	5162      	str	r2, [r4, r5]
 8008db6:	604b      	str	r3, [r1, #4]
 8008db8:	4630      	mov	r0, r6
 8008dba:	f000 f82f 	bl	8008e1c <__malloc_unlock>
 8008dbe:	f104 000b 	add.w	r0, r4, #11
 8008dc2:	1d23      	adds	r3, r4, #4
 8008dc4:	f020 0007 	bic.w	r0, r0, #7
 8008dc8:	1ac2      	subs	r2, r0, r3
 8008dca:	bf1c      	itt	ne
 8008dcc:	1a1b      	subne	r3, r3, r0
 8008dce:	50a3      	strne	r3, [r4, r2]
 8008dd0:	e7af      	b.n	8008d32 <_malloc_r+0x22>
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	bf0c      	ite	eq
 8008dd8:	f8c8 2000 	streq.w	r2, [r8]
 8008ddc:	605a      	strne	r2, [r3, #4]
 8008dde:	e7eb      	b.n	8008db8 <_malloc_r+0xa8>
 8008de0:	4623      	mov	r3, r4
 8008de2:	6864      	ldr	r4, [r4, #4]
 8008de4:	e7ae      	b.n	8008d44 <_malloc_r+0x34>
 8008de6:	463c      	mov	r4, r7
 8008de8:	687f      	ldr	r7, [r7, #4]
 8008dea:	e7b6      	b.n	8008d5a <_malloc_r+0x4a>
 8008dec:	461a      	mov	r2, r3
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	d1fb      	bne.n	8008dec <_malloc_r+0xdc>
 8008df4:	2300      	movs	r3, #0
 8008df6:	6053      	str	r3, [r2, #4]
 8008df8:	e7de      	b.n	8008db8 <_malloc_r+0xa8>
 8008dfa:	230c      	movs	r3, #12
 8008dfc:	6033      	str	r3, [r6, #0]
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 f80c 	bl	8008e1c <__malloc_unlock>
 8008e04:	e794      	b.n	8008d30 <_malloc_r+0x20>
 8008e06:	6005      	str	r5, [r0, #0]
 8008e08:	e7d6      	b.n	8008db8 <_malloc_r+0xa8>
 8008e0a:	bf00      	nop
 8008e0c:	20000734 	.word	0x20000734

08008e10 <__malloc_lock>:
 8008e10:	4801      	ldr	r0, [pc, #4]	@ (8008e18 <__malloc_lock+0x8>)
 8008e12:	f7ff b8b2 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 8008e16:	bf00      	nop
 8008e18:	2000072c 	.word	0x2000072c

08008e1c <__malloc_unlock>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	@ (8008e24 <__malloc_unlock+0x8>)
 8008e1e:	f7ff b8ad 	b.w	8007f7c <__retarget_lock_release_recursive>
 8008e22:	bf00      	nop
 8008e24:	2000072c 	.word	0x2000072c

08008e28 <_Balloc>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	69c6      	ldr	r6, [r0, #28]
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	460d      	mov	r5, r1
 8008e30:	b976      	cbnz	r6, 8008e50 <_Balloc+0x28>
 8008e32:	2010      	movs	r0, #16
 8008e34:	f7ff ff42 	bl	8008cbc <malloc>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	61e0      	str	r0, [r4, #28]
 8008e3c:	b920      	cbnz	r0, 8008e48 <_Balloc+0x20>
 8008e3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <_Balloc+0x78>)
 8008e40:	4818      	ldr	r0, [pc, #96]	@ (8008ea4 <_Balloc+0x7c>)
 8008e42:	216b      	movs	r1, #107	@ 0x6b
 8008e44:	f001 fd7c 	bl	800a940 <__assert_func>
 8008e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e4c:	6006      	str	r6, [r0, #0]
 8008e4e:	60c6      	str	r6, [r0, #12]
 8008e50:	69e6      	ldr	r6, [r4, #28]
 8008e52:	68f3      	ldr	r3, [r6, #12]
 8008e54:	b183      	cbz	r3, 8008e78 <_Balloc+0x50>
 8008e56:	69e3      	ldr	r3, [r4, #28]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e5e:	b9b8      	cbnz	r0, 8008e90 <_Balloc+0x68>
 8008e60:	2101      	movs	r1, #1
 8008e62:	fa01 f605 	lsl.w	r6, r1, r5
 8008e66:	1d72      	adds	r2, r6, #5
 8008e68:	0092      	lsls	r2, r2, #2
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f001 fd86 	bl	800a97c <_calloc_r>
 8008e70:	b160      	cbz	r0, 8008e8c <_Balloc+0x64>
 8008e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e76:	e00e      	b.n	8008e96 <_Balloc+0x6e>
 8008e78:	2221      	movs	r2, #33	@ 0x21
 8008e7a:	2104      	movs	r1, #4
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f001 fd7d 	bl	800a97c <_calloc_r>
 8008e82:	69e3      	ldr	r3, [r4, #28]
 8008e84:	60f0      	str	r0, [r6, #12]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e4      	bne.n	8008e56 <_Balloc+0x2e>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	6802      	ldr	r2, [r0, #0]
 8008e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e96:	2300      	movs	r3, #0
 8008e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e9c:	e7f7      	b.n	8008e8e <_Balloc+0x66>
 8008e9e:	bf00      	nop
 8008ea0:	0800b81a 	.word	0x0800b81a
 8008ea4:	0800b89a 	.word	0x0800b89a

08008ea8 <_Bfree>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	69c6      	ldr	r6, [r0, #28]
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b976      	cbnz	r6, 8008ed0 <_Bfree+0x28>
 8008eb2:	2010      	movs	r0, #16
 8008eb4:	f7ff ff02 	bl	8008cbc <malloc>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	61e8      	str	r0, [r5, #28]
 8008ebc:	b920      	cbnz	r0, 8008ec8 <_Bfree+0x20>
 8008ebe:	4b09      	ldr	r3, [pc, #36]	@ (8008ee4 <_Bfree+0x3c>)
 8008ec0:	4809      	ldr	r0, [pc, #36]	@ (8008ee8 <_Bfree+0x40>)
 8008ec2:	218f      	movs	r1, #143	@ 0x8f
 8008ec4:	f001 fd3c 	bl	800a940 <__assert_func>
 8008ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ecc:	6006      	str	r6, [r0, #0]
 8008ece:	60c6      	str	r6, [r0, #12]
 8008ed0:	b13c      	cbz	r4, 8008ee2 <_Bfree+0x3a>
 8008ed2:	69eb      	ldr	r3, [r5, #28]
 8008ed4:	6862      	ldr	r2, [r4, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008edc:	6021      	str	r1, [r4, #0]
 8008ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	0800b81a 	.word	0x0800b81a
 8008ee8:	0800b89a 	.word	0x0800b89a

08008eec <__multadd>:
 8008eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef0:	690d      	ldr	r5, [r1, #16]
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	461e      	mov	r6, r3
 8008ef8:	f101 0c14 	add.w	ip, r1, #20
 8008efc:	2000      	movs	r0, #0
 8008efe:	f8dc 3000 	ldr.w	r3, [ip]
 8008f02:	b299      	uxth	r1, r3
 8008f04:	fb02 6101 	mla	r1, r2, r1, r6
 8008f08:	0c1e      	lsrs	r6, r3, #16
 8008f0a:	0c0b      	lsrs	r3, r1, #16
 8008f0c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f10:	b289      	uxth	r1, r1
 8008f12:	3001      	adds	r0, #1
 8008f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f18:	4285      	cmp	r5, r0
 8008f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f22:	dcec      	bgt.n	8008efe <__multadd+0x12>
 8008f24:	b30e      	cbz	r6, 8008f6a <__multadd+0x7e>
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dc19      	bgt.n	8008f60 <__multadd+0x74>
 8008f2c:	6861      	ldr	r1, [r4, #4]
 8008f2e:	4638      	mov	r0, r7
 8008f30:	3101      	adds	r1, #1
 8008f32:	f7ff ff79 	bl	8008e28 <_Balloc>
 8008f36:	4680      	mov	r8, r0
 8008f38:	b928      	cbnz	r0, 8008f46 <__multadd+0x5a>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <__multadd+0x84>)
 8008f3e:	480d      	ldr	r0, [pc, #52]	@ (8008f74 <__multadd+0x88>)
 8008f40:	21ba      	movs	r1, #186	@ 0xba
 8008f42:	f001 fcfd 	bl	800a940 <__assert_func>
 8008f46:	6922      	ldr	r2, [r4, #16]
 8008f48:	3202      	adds	r2, #2
 8008f4a:	f104 010c 	add.w	r1, r4, #12
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	300c      	adds	r0, #12
 8008f52:	f001 fcdf 	bl	800a914 <memcpy>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff ffa5 	bl	8008ea8 <_Bfree>
 8008f5e:	4644      	mov	r4, r8
 8008f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f64:	3501      	adds	r5, #1
 8008f66:	615e      	str	r6, [r3, #20]
 8008f68:	6125      	str	r5, [r4, #16]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f70:	0800b889 	.word	0x0800b889
 8008f74:	0800b89a 	.word	0x0800b89a

08008f78 <__s2b>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	4615      	mov	r5, r2
 8008f80:	461f      	mov	r7, r3
 8008f82:	2209      	movs	r2, #9
 8008f84:	3308      	adds	r3, #8
 8008f86:	4606      	mov	r6, r0
 8008f88:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2201      	movs	r2, #1
 8008f90:	429a      	cmp	r2, r3
 8008f92:	db09      	blt.n	8008fa8 <__s2b+0x30>
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff ff47 	bl	8008e28 <_Balloc>
 8008f9a:	b940      	cbnz	r0, 8008fae <__s2b+0x36>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4b19      	ldr	r3, [pc, #100]	@ (8009004 <__s2b+0x8c>)
 8008fa0:	4819      	ldr	r0, [pc, #100]	@ (8009008 <__s2b+0x90>)
 8008fa2:	21d3      	movs	r1, #211	@ 0xd3
 8008fa4:	f001 fccc 	bl	800a940 <__assert_func>
 8008fa8:	0052      	lsls	r2, r2, #1
 8008faa:	3101      	adds	r1, #1
 8008fac:	e7f0      	b.n	8008f90 <__s2b+0x18>
 8008fae:	9b08      	ldr	r3, [sp, #32]
 8008fb0:	6143      	str	r3, [r0, #20]
 8008fb2:	2d09      	cmp	r5, #9
 8008fb4:	f04f 0301 	mov.w	r3, #1
 8008fb8:	6103      	str	r3, [r0, #16]
 8008fba:	dd16      	ble.n	8008fea <__s2b+0x72>
 8008fbc:	f104 0909 	add.w	r9, r4, #9
 8008fc0:	46c8      	mov	r8, r9
 8008fc2:	442c      	add	r4, r5
 8008fc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fc8:	4601      	mov	r1, r0
 8008fca:	3b30      	subs	r3, #48	@ 0x30
 8008fcc:	220a      	movs	r2, #10
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff ff8c 	bl	8008eec <__multadd>
 8008fd4:	45a0      	cmp	r8, r4
 8008fd6:	d1f5      	bne.n	8008fc4 <__s2b+0x4c>
 8008fd8:	f1a5 0408 	sub.w	r4, r5, #8
 8008fdc:	444c      	add	r4, r9
 8008fde:	1b2d      	subs	r5, r5, r4
 8008fe0:	1963      	adds	r3, r4, r5
 8008fe2:	42bb      	cmp	r3, r7
 8008fe4:	db04      	blt.n	8008ff0 <__s2b+0x78>
 8008fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fea:	340a      	adds	r4, #10
 8008fec:	2509      	movs	r5, #9
 8008fee:	e7f6      	b.n	8008fde <__s2b+0x66>
 8008ff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	3b30      	subs	r3, #48	@ 0x30
 8008ff8:	220a      	movs	r2, #10
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ff76 	bl	8008eec <__multadd>
 8009000:	e7ee      	b.n	8008fe0 <__s2b+0x68>
 8009002:	bf00      	nop
 8009004:	0800b889 	.word	0x0800b889
 8009008:	0800b89a 	.word	0x0800b89a

0800900c <__hi0bits>:
 800900c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009010:	4603      	mov	r3, r0
 8009012:	bf36      	itet	cc
 8009014:	0403      	lslcc	r3, r0, #16
 8009016:	2000      	movcs	r0, #0
 8009018:	2010      	movcc	r0, #16
 800901a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800901e:	bf3c      	itt	cc
 8009020:	021b      	lslcc	r3, r3, #8
 8009022:	3008      	addcc	r0, #8
 8009024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009028:	bf3c      	itt	cc
 800902a:	011b      	lslcc	r3, r3, #4
 800902c:	3004      	addcc	r0, #4
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	bf3c      	itt	cc
 8009034:	009b      	lslcc	r3, r3, #2
 8009036:	3002      	addcc	r0, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	db05      	blt.n	8009048 <__hi0bits+0x3c>
 800903c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009040:	f100 0001 	add.w	r0, r0, #1
 8009044:	bf08      	it	eq
 8009046:	2020      	moveq	r0, #32
 8009048:	4770      	bx	lr

0800904a <__lo0bits>:
 800904a:	6803      	ldr	r3, [r0, #0]
 800904c:	4602      	mov	r2, r0
 800904e:	f013 0007 	ands.w	r0, r3, #7
 8009052:	d00b      	beq.n	800906c <__lo0bits+0x22>
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	d421      	bmi.n	800909c <__lo0bits+0x52>
 8009058:	0798      	lsls	r0, r3, #30
 800905a:	bf49      	itett	mi
 800905c:	085b      	lsrmi	r3, r3, #1
 800905e:	089b      	lsrpl	r3, r3, #2
 8009060:	2001      	movmi	r0, #1
 8009062:	6013      	strmi	r3, [r2, #0]
 8009064:	bf5c      	itt	pl
 8009066:	6013      	strpl	r3, [r2, #0]
 8009068:	2002      	movpl	r0, #2
 800906a:	4770      	bx	lr
 800906c:	b299      	uxth	r1, r3
 800906e:	b909      	cbnz	r1, 8009074 <__lo0bits+0x2a>
 8009070:	0c1b      	lsrs	r3, r3, #16
 8009072:	2010      	movs	r0, #16
 8009074:	b2d9      	uxtb	r1, r3
 8009076:	b909      	cbnz	r1, 800907c <__lo0bits+0x32>
 8009078:	3008      	adds	r0, #8
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	0719      	lsls	r1, r3, #28
 800907e:	bf04      	itt	eq
 8009080:	091b      	lsreq	r3, r3, #4
 8009082:	3004      	addeq	r0, #4
 8009084:	0799      	lsls	r1, r3, #30
 8009086:	bf04      	itt	eq
 8009088:	089b      	lsreq	r3, r3, #2
 800908a:	3002      	addeq	r0, #2
 800908c:	07d9      	lsls	r1, r3, #31
 800908e:	d403      	bmi.n	8009098 <__lo0bits+0x4e>
 8009090:	085b      	lsrs	r3, r3, #1
 8009092:	f100 0001 	add.w	r0, r0, #1
 8009096:	d003      	beq.n	80090a0 <__lo0bits+0x56>
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	4770      	bx	lr
 800909c:	2000      	movs	r0, #0
 800909e:	4770      	bx	lr
 80090a0:	2020      	movs	r0, #32
 80090a2:	4770      	bx	lr

080090a4 <__i2b>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	460c      	mov	r4, r1
 80090a8:	2101      	movs	r1, #1
 80090aa:	f7ff febd 	bl	8008e28 <_Balloc>
 80090ae:	4602      	mov	r2, r0
 80090b0:	b928      	cbnz	r0, 80090be <__i2b+0x1a>
 80090b2:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <__i2b+0x24>)
 80090b4:	4805      	ldr	r0, [pc, #20]	@ (80090cc <__i2b+0x28>)
 80090b6:	f240 1145 	movw	r1, #325	@ 0x145
 80090ba:	f001 fc41 	bl	800a940 <__assert_func>
 80090be:	2301      	movs	r3, #1
 80090c0:	6144      	str	r4, [r0, #20]
 80090c2:	6103      	str	r3, [r0, #16]
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	0800b889 	.word	0x0800b889
 80090cc:	0800b89a 	.word	0x0800b89a

080090d0 <__multiply>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	4614      	mov	r4, r2
 80090d6:	690a      	ldr	r2, [r1, #16]
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bfa8      	it	ge
 80090de:	4623      	movge	r3, r4
 80090e0:	460f      	mov	r7, r1
 80090e2:	bfa4      	itt	ge
 80090e4:	460c      	movge	r4, r1
 80090e6:	461f      	movge	r7, r3
 80090e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	6861      	ldr	r1, [r4, #4]
 80090f4:	eb0a 0609 	add.w	r6, sl, r9
 80090f8:	42b3      	cmp	r3, r6
 80090fa:	b085      	sub	sp, #20
 80090fc:	bfb8      	it	lt
 80090fe:	3101      	addlt	r1, #1
 8009100:	f7ff fe92 	bl	8008e28 <_Balloc>
 8009104:	b930      	cbnz	r0, 8009114 <__multiply+0x44>
 8009106:	4602      	mov	r2, r0
 8009108:	4b44      	ldr	r3, [pc, #272]	@ (800921c <__multiply+0x14c>)
 800910a:	4845      	ldr	r0, [pc, #276]	@ (8009220 <__multiply+0x150>)
 800910c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009110:	f001 fc16 	bl	800a940 <__assert_func>
 8009114:	f100 0514 	add.w	r5, r0, #20
 8009118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800911c:	462b      	mov	r3, r5
 800911e:	2200      	movs	r2, #0
 8009120:	4543      	cmp	r3, r8
 8009122:	d321      	bcc.n	8009168 <__multiply+0x98>
 8009124:	f107 0114 	add.w	r1, r7, #20
 8009128:	f104 0214 	add.w	r2, r4, #20
 800912c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009130:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009134:	9302      	str	r3, [sp, #8]
 8009136:	1b13      	subs	r3, r2, r4
 8009138:	3b15      	subs	r3, #21
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	3304      	adds	r3, #4
 8009140:	f104 0715 	add.w	r7, r4, #21
 8009144:	42ba      	cmp	r2, r7
 8009146:	bf38      	it	cc
 8009148:	2304      	movcc	r3, #4
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	9103      	str	r1, [sp, #12]
 8009150:	428b      	cmp	r3, r1
 8009152:	d80c      	bhi.n	800916e <__multiply+0x9e>
 8009154:	2e00      	cmp	r6, #0
 8009156:	dd03      	ble.n	8009160 <__multiply+0x90>
 8009158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05b      	beq.n	8009218 <__multiply+0x148>
 8009160:	6106      	str	r6, [r0, #16]
 8009162:	b005      	add	sp, #20
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	f843 2b04 	str.w	r2, [r3], #4
 800916c:	e7d8      	b.n	8009120 <__multiply+0x50>
 800916e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009172:	f1ba 0f00 	cmp.w	sl, #0
 8009176:	d024      	beq.n	80091c2 <__multiply+0xf2>
 8009178:	f104 0e14 	add.w	lr, r4, #20
 800917c:	46a9      	mov	r9, r5
 800917e:	f04f 0c00 	mov.w	ip, #0
 8009182:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009186:	f8d9 3000 	ldr.w	r3, [r9]
 800918a:	fa1f fb87 	uxth.w	fp, r7
 800918e:	b29b      	uxth	r3, r3
 8009190:	fb0a 330b 	mla	r3, sl, fp, r3
 8009194:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009198:	f8d9 7000 	ldr.w	r7, [r9]
 800919c:	4463      	add	r3, ip
 800919e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80091a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091b0:	4572      	cmp	r2, lr
 80091b2:	f849 3b04 	str.w	r3, [r9], #4
 80091b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091ba:	d8e2      	bhi.n	8009182 <__multiply+0xb2>
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	f845 c003 	str.w	ip, [r5, r3]
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091c8:	3104      	adds	r1, #4
 80091ca:	f1b9 0f00 	cmp.w	r9, #0
 80091ce:	d021      	beq.n	8009214 <__multiply+0x144>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	f104 0c14 	add.w	ip, r4, #20
 80091d6:	46ae      	mov	lr, r5
 80091d8:	f04f 0a00 	mov.w	sl, #0
 80091dc:	f8bc b000 	ldrh.w	fp, [ip]
 80091e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091e4:	fb09 770b 	mla	r7, r9, fp, r7
 80091e8:	4457      	add	r7, sl
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091f0:	f84e 3b04 	str.w	r3, [lr], #4
 80091f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091fc:	f8be 3000 	ldrh.w	r3, [lr]
 8009200:	fb09 330a 	mla	r3, r9, sl, r3
 8009204:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009208:	4562      	cmp	r2, ip
 800920a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800920e:	d8e5      	bhi.n	80091dc <__multiply+0x10c>
 8009210:	9f01      	ldr	r7, [sp, #4]
 8009212:	51eb      	str	r3, [r5, r7]
 8009214:	3504      	adds	r5, #4
 8009216:	e799      	b.n	800914c <__multiply+0x7c>
 8009218:	3e01      	subs	r6, #1
 800921a:	e79b      	b.n	8009154 <__multiply+0x84>
 800921c:	0800b889 	.word	0x0800b889
 8009220:	0800b89a 	.word	0x0800b89a

08009224 <__pow5mult>:
 8009224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009228:	4615      	mov	r5, r2
 800922a:	f012 0203 	ands.w	r2, r2, #3
 800922e:	4607      	mov	r7, r0
 8009230:	460e      	mov	r6, r1
 8009232:	d007      	beq.n	8009244 <__pow5mult+0x20>
 8009234:	4c25      	ldr	r4, [pc, #148]	@ (80092cc <__pow5mult+0xa8>)
 8009236:	3a01      	subs	r2, #1
 8009238:	2300      	movs	r3, #0
 800923a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800923e:	f7ff fe55 	bl	8008eec <__multadd>
 8009242:	4606      	mov	r6, r0
 8009244:	10ad      	asrs	r5, r5, #2
 8009246:	d03d      	beq.n	80092c4 <__pow5mult+0xa0>
 8009248:	69fc      	ldr	r4, [r7, #28]
 800924a:	b97c      	cbnz	r4, 800926c <__pow5mult+0x48>
 800924c:	2010      	movs	r0, #16
 800924e:	f7ff fd35 	bl	8008cbc <malloc>
 8009252:	4602      	mov	r2, r0
 8009254:	61f8      	str	r0, [r7, #28]
 8009256:	b928      	cbnz	r0, 8009264 <__pow5mult+0x40>
 8009258:	4b1d      	ldr	r3, [pc, #116]	@ (80092d0 <__pow5mult+0xac>)
 800925a:	481e      	ldr	r0, [pc, #120]	@ (80092d4 <__pow5mult+0xb0>)
 800925c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009260:	f001 fb6e 	bl	800a940 <__assert_func>
 8009264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009268:	6004      	str	r4, [r0, #0]
 800926a:	60c4      	str	r4, [r0, #12]
 800926c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009274:	b94c      	cbnz	r4, 800928a <__pow5mult+0x66>
 8009276:	f240 2171 	movw	r1, #625	@ 0x271
 800927a:	4638      	mov	r0, r7
 800927c:	f7ff ff12 	bl	80090a4 <__i2b>
 8009280:	2300      	movs	r3, #0
 8009282:	f8c8 0008 	str.w	r0, [r8, #8]
 8009286:	4604      	mov	r4, r0
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	f04f 0900 	mov.w	r9, #0
 800928e:	07eb      	lsls	r3, r5, #31
 8009290:	d50a      	bpl.n	80092a8 <__pow5mult+0x84>
 8009292:	4631      	mov	r1, r6
 8009294:	4622      	mov	r2, r4
 8009296:	4638      	mov	r0, r7
 8009298:	f7ff ff1a 	bl	80090d0 <__multiply>
 800929c:	4631      	mov	r1, r6
 800929e:	4680      	mov	r8, r0
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff fe01 	bl	8008ea8 <_Bfree>
 80092a6:	4646      	mov	r6, r8
 80092a8:	106d      	asrs	r5, r5, #1
 80092aa:	d00b      	beq.n	80092c4 <__pow5mult+0xa0>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	b938      	cbnz	r0, 80092c0 <__pow5mult+0x9c>
 80092b0:	4622      	mov	r2, r4
 80092b2:	4621      	mov	r1, r4
 80092b4:	4638      	mov	r0, r7
 80092b6:	f7ff ff0b 	bl	80090d0 <__multiply>
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	f8c0 9000 	str.w	r9, [r0]
 80092c0:	4604      	mov	r4, r0
 80092c2:	e7e4      	b.n	800928e <__pow5mult+0x6a>
 80092c4:	4630      	mov	r0, r6
 80092c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ca:	bf00      	nop
 80092cc:	0800b8f4 	.word	0x0800b8f4
 80092d0:	0800b81a 	.word	0x0800b81a
 80092d4:	0800b89a 	.word	0x0800b89a

080092d8 <__lshift>:
 80092d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	460c      	mov	r4, r1
 80092de:	6849      	ldr	r1, [r1, #4]
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	4607      	mov	r7, r0
 80092ea:	4691      	mov	r9, r2
 80092ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092f0:	f108 0601 	add.w	r6, r8, #1
 80092f4:	42b3      	cmp	r3, r6
 80092f6:	db0b      	blt.n	8009310 <__lshift+0x38>
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7ff fd95 	bl	8008e28 <_Balloc>
 80092fe:	4605      	mov	r5, r0
 8009300:	b948      	cbnz	r0, 8009316 <__lshift+0x3e>
 8009302:	4602      	mov	r2, r0
 8009304:	4b28      	ldr	r3, [pc, #160]	@ (80093a8 <__lshift+0xd0>)
 8009306:	4829      	ldr	r0, [pc, #164]	@ (80093ac <__lshift+0xd4>)
 8009308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800930c:	f001 fb18 	bl	800a940 <__assert_func>
 8009310:	3101      	adds	r1, #1
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	e7ee      	b.n	80092f4 <__lshift+0x1c>
 8009316:	2300      	movs	r3, #0
 8009318:	f100 0114 	add.w	r1, r0, #20
 800931c:	f100 0210 	add.w	r2, r0, #16
 8009320:	4618      	mov	r0, r3
 8009322:	4553      	cmp	r3, sl
 8009324:	db33      	blt.n	800938e <__lshift+0xb6>
 8009326:	6920      	ldr	r0, [r4, #16]
 8009328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800932c:	f104 0314 	add.w	r3, r4, #20
 8009330:	f019 091f 	ands.w	r9, r9, #31
 8009334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009338:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800933c:	d02b      	beq.n	8009396 <__lshift+0xbe>
 800933e:	f1c9 0e20 	rsb	lr, r9, #32
 8009342:	468a      	mov	sl, r1
 8009344:	2200      	movs	r2, #0
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	fa00 f009 	lsl.w	r0, r0, r9
 800934c:	4310      	orrs	r0, r2
 800934e:	f84a 0b04 	str.w	r0, [sl], #4
 8009352:	f853 2b04 	ldr.w	r2, [r3], #4
 8009356:	459c      	cmp	ip, r3
 8009358:	fa22 f20e 	lsr.w	r2, r2, lr
 800935c:	d8f3      	bhi.n	8009346 <__lshift+0x6e>
 800935e:	ebac 0304 	sub.w	r3, ip, r4
 8009362:	3b15      	subs	r3, #21
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	3304      	adds	r3, #4
 800936a:	f104 0015 	add.w	r0, r4, #21
 800936e:	4584      	cmp	ip, r0
 8009370:	bf38      	it	cc
 8009372:	2304      	movcc	r3, #4
 8009374:	50ca      	str	r2, [r1, r3]
 8009376:	b10a      	cbz	r2, 800937c <__lshift+0xa4>
 8009378:	f108 0602 	add.w	r6, r8, #2
 800937c:	3e01      	subs	r6, #1
 800937e:	4638      	mov	r0, r7
 8009380:	612e      	str	r6, [r5, #16]
 8009382:	4621      	mov	r1, r4
 8009384:	f7ff fd90 	bl	8008ea8 <_Bfree>
 8009388:	4628      	mov	r0, r5
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009392:	3301      	adds	r3, #1
 8009394:	e7c5      	b.n	8009322 <__lshift+0x4a>
 8009396:	3904      	subs	r1, #4
 8009398:	f853 2b04 	ldr.w	r2, [r3], #4
 800939c:	f841 2f04 	str.w	r2, [r1, #4]!
 80093a0:	459c      	cmp	ip, r3
 80093a2:	d8f9      	bhi.n	8009398 <__lshift+0xc0>
 80093a4:	e7ea      	b.n	800937c <__lshift+0xa4>
 80093a6:	bf00      	nop
 80093a8:	0800b889 	.word	0x0800b889
 80093ac:	0800b89a 	.word	0x0800b89a

080093b0 <__mcmp>:
 80093b0:	690a      	ldr	r2, [r1, #16]
 80093b2:	4603      	mov	r3, r0
 80093b4:	6900      	ldr	r0, [r0, #16]
 80093b6:	1a80      	subs	r0, r0, r2
 80093b8:	b530      	push	{r4, r5, lr}
 80093ba:	d10e      	bne.n	80093da <__mcmp+0x2a>
 80093bc:	3314      	adds	r3, #20
 80093be:	3114      	adds	r1, #20
 80093c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093d0:	4295      	cmp	r5, r2
 80093d2:	d003      	beq.n	80093dc <__mcmp+0x2c>
 80093d4:	d205      	bcs.n	80093e2 <__mcmp+0x32>
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	bd30      	pop	{r4, r5, pc}
 80093dc:	42a3      	cmp	r3, r4
 80093de:	d3f3      	bcc.n	80093c8 <__mcmp+0x18>
 80093e0:	e7fb      	b.n	80093da <__mcmp+0x2a>
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7f9      	b.n	80093da <__mcmp+0x2a>
	...

080093e8 <__mdiff>:
 80093e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	4689      	mov	r9, r1
 80093ee:	4606      	mov	r6, r0
 80093f0:	4611      	mov	r1, r2
 80093f2:	4648      	mov	r0, r9
 80093f4:	4614      	mov	r4, r2
 80093f6:	f7ff ffdb 	bl	80093b0 <__mcmp>
 80093fa:	1e05      	subs	r5, r0, #0
 80093fc:	d112      	bne.n	8009424 <__mdiff+0x3c>
 80093fe:	4629      	mov	r1, r5
 8009400:	4630      	mov	r0, r6
 8009402:	f7ff fd11 	bl	8008e28 <_Balloc>
 8009406:	4602      	mov	r2, r0
 8009408:	b928      	cbnz	r0, 8009416 <__mdiff+0x2e>
 800940a:	4b3f      	ldr	r3, [pc, #252]	@ (8009508 <__mdiff+0x120>)
 800940c:	f240 2137 	movw	r1, #567	@ 0x237
 8009410:	483e      	ldr	r0, [pc, #248]	@ (800950c <__mdiff+0x124>)
 8009412:	f001 fa95 	bl	800a940 <__assert_func>
 8009416:	2301      	movs	r3, #1
 8009418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800941c:	4610      	mov	r0, r2
 800941e:	b003      	add	sp, #12
 8009420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009424:	bfbc      	itt	lt
 8009426:	464b      	movlt	r3, r9
 8009428:	46a1      	movlt	r9, r4
 800942a:	4630      	mov	r0, r6
 800942c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009430:	bfba      	itte	lt
 8009432:	461c      	movlt	r4, r3
 8009434:	2501      	movlt	r5, #1
 8009436:	2500      	movge	r5, #0
 8009438:	f7ff fcf6 	bl	8008e28 <_Balloc>
 800943c:	4602      	mov	r2, r0
 800943e:	b918      	cbnz	r0, 8009448 <__mdiff+0x60>
 8009440:	4b31      	ldr	r3, [pc, #196]	@ (8009508 <__mdiff+0x120>)
 8009442:	f240 2145 	movw	r1, #581	@ 0x245
 8009446:	e7e3      	b.n	8009410 <__mdiff+0x28>
 8009448:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800944c:	6926      	ldr	r6, [r4, #16]
 800944e:	60c5      	str	r5, [r0, #12]
 8009450:	f109 0310 	add.w	r3, r9, #16
 8009454:	f109 0514 	add.w	r5, r9, #20
 8009458:	f104 0e14 	add.w	lr, r4, #20
 800945c:	f100 0b14 	add.w	fp, r0, #20
 8009460:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009464:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	46d9      	mov	r9, fp
 800946c:	f04f 0c00 	mov.w	ip, #0
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009476:	f853 af04 	ldr.w	sl, [r3, #4]!
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	fa1f f38a 	uxth.w	r3, sl
 8009480:	4619      	mov	r1, r3
 8009482:	b283      	uxth	r3, r0
 8009484:	1acb      	subs	r3, r1, r3
 8009486:	0c00      	lsrs	r0, r0, #16
 8009488:	4463      	add	r3, ip
 800948a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800948e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009492:	b29b      	uxth	r3, r3
 8009494:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009498:	4576      	cmp	r6, lr
 800949a:	f849 3b04 	str.w	r3, [r9], #4
 800949e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094a2:	d8e5      	bhi.n	8009470 <__mdiff+0x88>
 80094a4:	1b33      	subs	r3, r6, r4
 80094a6:	3b15      	subs	r3, #21
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	3415      	adds	r4, #21
 80094ae:	3304      	adds	r3, #4
 80094b0:	42a6      	cmp	r6, r4
 80094b2:	bf38      	it	cc
 80094b4:	2304      	movcc	r3, #4
 80094b6:	441d      	add	r5, r3
 80094b8:	445b      	add	r3, fp
 80094ba:	461e      	mov	r6, r3
 80094bc:	462c      	mov	r4, r5
 80094be:	4544      	cmp	r4, r8
 80094c0:	d30e      	bcc.n	80094e0 <__mdiff+0xf8>
 80094c2:	f108 0103 	add.w	r1, r8, #3
 80094c6:	1b49      	subs	r1, r1, r5
 80094c8:	f021 0103 	bic.w	r1, r1, #3
 80094cc:	3d03      	subs	r5, #3
 80094ce:	45a8      	cmp	r8, r5
 80094d0:	bf38      	it	cc
 80094d2:	2100      	movcc	r1, #0
 80094d4:	440b      	add	r3, r1
 80094d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094da:	b191      	cbz	r1, 8009502 <__mdiff+0x11a>
 80094dc:	6117      	str	r7, [r2, #16]
 80094de:	e79d      	b.n	800941c <__mdiff+0x34>
 80094e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80094e4:	46e6      	mov	lr, ip
 80094e6:	0c08      	lsrs	r0, r1, #16
 80094e8:	fa1c fc81 	uxtah	ip, ip, r1
 80094ec:	4471      	add	r1, lr
 80094ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094f2:	b289      	uxth	r1, r1
 80094f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094f8:	f846 1b04 	str.w	r1, [r6], #4
 80094fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009500:	e7dd      	b.n	80094be <__mdiff+0xd6>
 8009502:	3f01      	subs	r7, #1
 8009504:	e7e7      	b.n	80094d6 <__mdiff+0xee>
 8009506:	bf00      	nop
 8009508:	0800b889 	.word	0x0800b889
 800950c:	0800b89a 	.word	0x0800b89a

08009510 <__ulp>:
 8009510:	b082      	sub	sp, #8
 8009512:	ed8d 0b00 	vstr	d0, [sp]
 8009516:	9a01      	ldr	r2, [sp, #4]
 8009518:	4b0f      	ldr	r3, [pc, #60]	@ (8009558 <__ulp+0x48>)
 800951a:	4013      	ands	r3, r2
 800951c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009520:	2b00      	cmp	r3, #0
 8009522:	dc08      	bgt.n	8009536 <__ulp+0x26>
 8009524:	425b      	negs	r3, r3
 8009526:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800952a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800952e:	da04      	bge.n	800953a <__ulp+0x2a>
 8009530:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009534:	4113      	asrs	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	e008      	b.n	800954c <__ulp+0x3c>
 800953a:	f1a2 0314 	sub.w	r3, r2, #20
 800953e:	2b1e      	cmp	r3, #30
 8009540:	bfda      	itte	le
 8009542:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009546:	40da      	lsrle	r2, r3
 8009548:	2201      	movgt	r2, #1
 800954a:	2300      	movs	r3, #0
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	ec41 0b10 	vmov	d0, r0, r1
 8009554:	b002      	add	sp, #8
 8009556:	4770      	bx	lr
 8009558:	7ff00000 	.word	0x7ff00000

0800955c <__b2d>:
 800955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009560:	6906      	ldr	r6, [r0, #16]
 8009562:	f100 0814 	add.w	r8, r0, #20
 8009566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800956a:	1f37      	subs	r7, r6, #4
 800956c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009570:	4610      	mov	r0, r2
 8009572:	f7ff fd4b 	bl	800900c <__hi0bits>
 8009576:	f1c0 0320 	rsb	r3, r0, #32
 800957a:	280a      	cmp	r0, #10
 800957c:	600b      	str	r3, [r1, #0]
 800957e:	491b      	ldr	r1, [pc, #108]	@ (80095ec <__b2d+0x90>)
 8009580:	dc15      	bgt.n	80095ae <__b2d+0x52>
 8009582:	f1c0 0c0b 	rsb	ip, r0, #11
 8009586:	fa22 f30c 	lsr.w	r3, r2, ip
 800958a:	45b8      	cmp	r8, r7
 800958c:	ea43 0501 	orr.w	r5, r3, r1
 8009590:	bf34      	ite	cc
 8009592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009596:	2300      	movcs	r3, #0
 8009598:	3015      	adds	r0, #21
 800959a:	fa02 f000 	lsl.w	r0, r2, r0
 800959e:	fa23 f30c 	lsr.w	r3, r3, ip
 80095a2:	4303      	orrs	r3, r0
 80095a4:	461c      	mov	r4, r3
 80095a6:	ec45 4b10 	vmov	d0, r4, r5
 80095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ae:	45b8      	cmp	r8, r7
 80095b0:	bf3a      	itte	cc
 80095b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80095ba:	2300      	movcs	r3, #0
 80095bc:	380b      	subs	r0, #11
 80095be:	d012      	beq.n	80095e6 <__b2d+0x8a>
 80095c0:	f1c0 0120 	rsb	r1, r0, #32
 80095c4:	fa23 f401 	lsr.w	r4, r3, r1
 80095c8:	4082      	lsls	r2, r0
 80095ca:	4322      	orrs	r2, r4
 80095cc:	4547      	cmp	r7, r8
 80095ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80095d2:	bf8c      	ite	hi
 80095d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80095d8:	2200      	movls	r2, #0
 80095da:	4083      	lsls	r3, r0
 80095dc:	40ca      	lsrs	r2, r1
 80095de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095e2:	4313      	orrs	r3, r2
 80095e4:	e7de      	b.n	80095a4 <__b2d+0x48>
 80095e6:	ea42 0501 	orr.w	r5, r2, r1
 80095ea:	e7db      	b.n	80095a4 <__b2d+0x48>
 80095ec:	3ff00000 	.word	0x3ff00000

080095f0 <__d2b>:
 80095f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	460f      	mov	r7, r1
 80095f6:	2101      	movs	r1, #1
 80095f8:	ec59 8b10 	vmov	r8, r9, d0
 80095fc:	4616      	mov	r6, r2
 80095fe:	f7ff fc13 	bl	8008e28 <_Balloc>
 8009602:	4604      	mov	r4, r0
 8009604:	b930      	cbnz	r0, 8009614 <__d2b+0x24>
 8009606:	4602      	mov	r2, r0
 8009608:	4b23      	ldr	r3, [pc, #140]	@ (8009698 <__d2b+0xa8>)
 800960a:	4824      	ldr	r0, [pc, #144]	@ (800969c <__d2b+0xac>)
 800960c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009610:	f001 f996 	bl	800a940 <__assert_func>
 8009614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800961c:	b10d      	cbz	r5, 8009622 <__d2b+0x32>
 800961e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	f1b8 0300 	subs.w	r3, r8, #0
 8009628:	d023      	beq.n	8009672 <__d2b+0x82>
 800962a:	4668      	mov	r0, sp
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	f7ff fd0c 	bl	800904a <__lo0bits>
 8009632:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009636:	b1d0      	cbz	r0, 800966e <__d2b+0x7e>
 8009638:	f1c0 0320 	rsb	r3, r0, #32
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	430b      	orrs	r3, r1
 8009642:	40c2      	lsrs	r2, r0
 8009644:	6163      	str	r3, [r4, #20]
 8009646:	9201      	str	r2, [sp, #4]
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	61a3      	str	r3, [r4, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bf0c      	ite	eq
 8009650:	2201      	moveq	r2, #1
 8009652:	2202      	movne	r2, #2
 8009654:	6122      	str	r2, [r4, #16]
 8009656:	b1a5      	cbz	r5, 8009682 <__d2b+0x92>
 8009658:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800965c:	4405      	add	r5, r0
 800965e:	603d      	str	r5, [r7, #0]
 8009660:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009664:	6030      	str	r0, [r6, #0]
 8009666:	4620      	mov	r0, r4
 8009668:	b003      	add	sp, #12
 800966a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800966e:	6161      	str	r1, [r4, #20]
 8009670:	e7ea      	b.n	8009648 <__d2b+0x58>
 8009672:	a801      	add	r0, sp, #4
 8009674:	f7ff fce9 	bl	800904a <__lo0bits>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	3020      	adds	r0, #32
 800967e:	2201      	movs	r2, #1
 8009680:	e7e8      	b.n	8009654 <__d2b+0x64>
 8009682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800968a:	6038      	str	r0, [r7, #0]
 800968c:	6918      	ldr	r0, [r3, #16]
 800968e:	f7ff fcbd 	bl	800900c <__hi0bits>
 8009692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009696:	e7e5      	b.n	8009664 <__d2b+0x74>
 8009698:	0800b889 	.word	0x0800b889
 800969c:	0800b89a 	.word	0x0800b89a

080096a0 <__ratio>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	b085      	sub	sp, #20
 80096a6:	e9cd 1000 	strd	r1, r0, [sp]
 80096aa:	a902      	add	r1, sp, #8
 80096ac:	f7ff ff56 	bl	800955c <__b2d>
 80096b0:	9800      	ldr	r0, [sp, #0]
 80096b2:	a903      	add	r1, sp, #12
 80096b4:	ec55 4b10 	vmov	r4, r5, d0
 80096b8:	f7ff ff50 	bl	800955c <__b2d>
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	6919      	ldr	r1, [r3, #16]
 80096c0:	9b00      	ldr	r3, [sp, #0]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	1ac9      	subs	r1, r1, r3
 80096c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	ec5b ab10 	vmov	sl, fp, d0
 80096d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfce      	itee	gt
 80096d8:	462a      	movgt	r2, r5
 80096da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096de:	465a      	movle	r2, fp
 80096e0:	462f      	mov	r7, r5
 80096e2:	46d9      	mov	r9, fp
 80096e4:	bfcc      	ite	gt
 80096e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096ee:	464b      	mov	r3, r9
 80096f0:	4652      	mov	r2, sl
 80096f2:	4620      	mov	r0, r4
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f7 f8d9 	bl	80008ac <__aeabi_ddiv>
 80096fa:	ec41 0b10 	vmov	d0, r0, r1
 80096fe:	b005      	add	sp, #20
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009704 <__copybits>:
 8009704:	3901      	subs	r1, #1
 8009706:	b570      	push	{r4, r5, r6, lr}
 8009708:	1149      	asrs	r1, r1, #5
 800970a:	6914      	ldr	r4, [r2, #16]
 800970c:	3101      	adds	r1, #1
 800970e:	f102 0314 	add.w	r3, r2, #20
 8009712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009716:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800971a:	1f05      	subs	r5, r0, #4
 800971c:	42a3      	cmp	r3, r4
 800971e:	d30c      	bcc.n	800973a <__copybits+0x36>
 8009720:	1aa3      	subs	r3, r4, r2
 8009722:	3b11      	subs	r3, #17
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	3211      	adds	r2, #17
 800972a:	42a2      	cmp	r2, r4
 800972c:	bf88      	it	hi
 800972e:	2300      	movhi	r3, #0
 8009730:	4418      	add	r0, r3
 8009732:	2300      	movs	r3, #0
 8009734:	4288      	cmp	r0, r1
 8009736:	d305      	bcc.n	8009744 <__copybits+0x40>
 8009738:	bd70      	pop	{r4, r5, r6, pc}
 800973a:	f853 6b04 	ldr.w	r6, [r3], #4
 800973e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009742:	e7eb      	b.n	800971c <__copybits+0x18>
 8009744:	f840 3b04 	str.w	r3, [r0], #4
 8009748:	e7f4      	b.n	8009734 <__copybits+0x30>

0800974a <__any_on>:
 800974a:	f100 0214 	add.w	r2, r0, #20
 800974e:	6900      	ldr	r0, [r0, #16]
 8009750:	114b      	asrs	r3, r1, #5
 8009752:	4298      	cmp	r0, r3
 8009754:	b510      	push	{r4, lr}
 8009756:	db11      	blt.n	800977c <__any_on+0x32>
 8009758:	dd0a      	ble.n	8009770 <__any_on+0x26>
 800975a:	f011 011f 	ands.w	r1, r1, #31
 800975e:	d007      	beq.n	8009770 <__any_on+0x26>
 8009760:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009764:	fa24 f001 	lsr.w	r0, r4, r1
 8009768:	fa00 f101 	lsl.w	r1, r0, r1
 800976c:	428c      	cmp	r4, r1
 800976e:	d10b      	bne.n	8009788 <__any_on+0x3e>
 8009770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009774:	4293      	cmp	r3, r2
 8009776:	d803      	bhi.n	8009780 <__any_on+0x36>
 8009778:	2000      	movs	r0, #0
 800977a:	bd10      	pop	{r4, pc}
 800977c:	4603      	mov	r3, r0
 800977e:	e7f7      	b.n	8009770 <__any_on+0x26>
 8009780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009784:	2900      	cmp	r1, #0
 8009786:	d0f5      	beq.n	8009774 <__any_on+0x2a>
 8009788:	2001      	movs	r0, #1
 800978a:	e7f6      	b.n	800977a <__any_on+0x30>

0800978c <sulp>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	ec45 4b10 	vmov	d0, r4, r5
 8009796:	4616      	mov	r6, r2
 8009798:	f7ff feba 	bl	8009510 <__ulp>
 800979c:	ec51 0b10 	vmov	r0, r1, d0
 80097a0:	b17e      	cbz	r6, 80097c2 <sulp+0x36>
 80097a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dd09      	ble.n	80097c2 <sulp+0x36>
 80097ae:	051b      	lsls	r3, r3, #20
 80097b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80097b4:	2400      	movs	r4, #0
 80097b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80097ba:	4622      	mov	r2, r4
 80097bc:	462b      	mov	r3, r5
 80097be:	f7f6 ff4b 	bl	8000658 <__aeabi_dmul>
 80097c2:	ec41 0b10 	vmov	d0, r0, r1
 80097c6:	bd70      	pop	{r4, r5, r6, pc}

080097c8 <_strtod_l>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	b09f      	sub	sp, #124	@ 0x7c
 80097ce:	460c      	mov	r4, r1
 80097d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80097d2:	2200      	movs	r2, #0
 80097d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80097d6:	9005      	str	r0, [sp, #20]
 80097d8:	f04f 0a00 	mov.w	sl, #0
 80097dc:	f04f 0b00 	mov.w	fp, #0
 80097e0:	460a      	mov	r2, r1
 80097e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80097e4:	7811      	ldrb	r1, [r2, #0]
 80097e6:	292b      	cmp	r1, #43	@ 0x2b
 80097e8:	d04a      	beq.n	8009880 <_strtod_l+0xb8>
 80097ea:	d838      	bhi.n	800985e <_strtod_l+0x96>
 80097ec:	290d      	cmp	r1, #13
 80097ee:	d832      	bhi.n	8009856 <_strtod_l+0x8e>
 80097f0:	2908      	cmp	r1, #8
 80097f2:	d832      	bhi.n	800985a <_strtod_l+0x92>
 80097f4:	2900      	cmp	r1, #0
 80097f6:	d03b      	beq.n	8009870 <_strtod_l+0xa8>
 80097f8:	2200      	movs	r2, #0
 80097fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80097fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80097fe:	782a      	ldrb	r2, [r5, #0]
 8009800:	2a30      	cmp	r2, #48	@ 0x30
 8009802:	f040 80b3 	bne.w	800996c <_strtod_l+0x1a4>
 8009806:	786a      	ldrb	r2, [r5, #1]
 8009808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800980c:	2a58      	cmp	r2, #88	@ 0x58
 800980e:	d16e      	bne.n	80098ee <_strtod_l+0x126>
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	ab1a      	add	r3, sp, #104	@ 0x68
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4a8e      	ldr	r2, [pc, #568]	@ (8009a54 <_strtod_l+0x28c>)
 800981c:	9805      	ldr	r0, [sp, #20]
 800981e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009820:	a919      	add	r1, sp, #100	@ 0x64
 8009822:	f001 f927 	bl	800aa74 <__gethex>
 8009826:	f010 060f 	ands.w	r6, r0, #15
 800982a:	4604      	mov	r4, r0
 800982c:	d005      	beq.n	800983a <_strtod_l+0x72>
 800982e:	2e06      	cmp	r6, #6
 8009830:	d128      	bne.n	8009884 <_strtod_l+0xbc>
 8009832:	3501      	adds	r5, #1
 8009834:	2300      	movs	r3, #0
 8009836:	9519      	str	r5, [sp, #100]	@ 0x64
 8009838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800983a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f040 858e 	bne.w	800a35e <_strtod_l+0xb96>
 8009842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009844:	b1cb      	cbz	r3, 800987a <_strtod_l+0xb2>
 8009846:	4652      	mov	r2, sl
 8009848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800984c:	ec43 2b10 	vmov	d0, r2, r3
 8009850:	b01f      	add	sp, #124	@ 0x7c
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	2920      	cmp	r1, #32
 8009858:	d1ce      	bne.n	80097f8 <_strtod_l+0x30>
 800985a:	3201      	adds	r2, #1
 800985c:	e7c1      	b.n	80097e2 <_strtod_l+0x1a>
 800985e:	292d      	cmp	r1, #45	@ 0x2d
 8009860:	d1ca      	bne.n	80097f8 <_strtod_l+0x30>
 8009862:	2101      	movs	r1, #1
 8009864:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009866:	1c51      	adds	r1, r2, #1
 8009868:	9119      	str	r1, [sp, #100]	@ 0x64
 800986a:	7852      	ldrb	r2, [r2, #1]
 800986c:	2a00      	cmp	r2, #0
 800986e:	d1c5      	bne.n	80097fc <_strtod_l+0x34>
 8009870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009872:	9419      	str	r4, [sp, #100]	@ 0x64
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 8570 	bne.w	800a35a <_strtod_l+0xb92>
 800987a:	4652      	mov	r2, sl
 800987c:	465b      	mov	r3, fp
 800987e:	e7e5      	b.n	800984c <_strtod_l+0x84>
 8009880:	2100      	movs	r1, #0
 8009882:	e7ef      	b.n	8009864 <_strtod_l+0x9c>
 8009884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009886:	b13a      	cbz	r2, 8009898 <_strtod_l+0xd0>
 8009888:	2135      	movs	r1, #53	@ 0x35
 800988a:	a81c      	add	r0, sp, #112	@ 0x70
 800988c:	f7ff ff3a 	bl	8009704 <__copybits>
 8009890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009892:	9805      	ldr	r0, [sp, #20]
 8009894:	f7ff fb08 	bl	8008ea8 <_Bfree>
 8009898:	3e01      	subs	r6, #1
 800989a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800989c:	2e04      	cmp	r6, #4
 800989e:	d806      	bhi.n	80098ae <_strtod_l+0xe6>
 80098a0:	e8df f006 	tbb	[pc, r6]
 80098a4:	201d0314 	.word	0x201d0314
 80098a8:	14          	.byte	0x14
 80098a9:	00          	.byte	0x00
 80098aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80098ae:	05e1      	lsls	r1, r4, #23
 80098b0:	bf48      	it	mi
 80098b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80098b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	051b      	lsls	r3, r3, #20
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1bb      	bne.n	800983a <_strtod_l+0x72>
 80098c2:	f7fe fb2f 	bl	8007f24 <__errno>
 80098c6:	2322      	movs	r3, #34	@ 0x22
 80098c8:	6003      	str	r3, [r0, #0]
 80098ca:	e7b6      	b.n	800983a <_strtod_l+0x72>
 80098cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80098d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80098d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098dc:	e7e7      	b.n	80098ae <_strtod_l+0xe6>
 80098de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009a5c <_strtod_l+0x294>
 80098e2:	e7e4      	b.n	80098ae <_strtod_l+0xe6>
 80098e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80098e8:	f04f 3aff 	mov.w	sl, #4294967295
 80098ec:	e7df      	b.n	80098ae <_strtod_l+0xe6>
 80098ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b30      	cmp	r3, #48	@ 0x30
 80098f8:	d0f9      	beq.n	80098ee <_strtod_l+0x126>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d09d      	beq.n	800983a <_strtod_l+0x72>
 80098fe:	2301      	movs	r3, #1
 8009900:	9309      	str	r3, [sp, #36]	@ 0x24
 8009902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009904:	930c      	str	r3, [sp, #48]	@ 0x30
 8009906:	2300      	movs	r3, #0
 8009908:	9308      	str	r3, [sp, #32]
 800990a:	930a      	str	r3, [sp, #40]	@ 0x28
 800990c:	461f      	mov	r7, r3
 800990e:	220a      	movs	r2, #10
 8009910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009912:	7805      	ldrb	r5, [r0, #0]
 8009914:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009918:	b2d9      	uxtb	r1, r3
 800991a:	2909      	cmp	r1, #9
 800991c:	d928      	bls.n	8009970 <_strtod_l+0x1a8>
 800991e:	494e      	ldr	r1, [pc, #312]	@ (8009a58 <_strtod_l+0x290>)
 8009920:	2201      	movs	r2, #1
 8009922:	f000 ffd5 	bl	800a8d0 <strncmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	d032      	beq.n	8009990 <_strtod_l+0x1c8>
 800992a:	2000      	movs	r0, #0
 800992c:	462a      	mov	r2, r5
 800992e:	4681      	mov	r9, r0
 8009930:	463d      	mov	r5, r7
 8009932:	4603      	mov	r3, r0
 8009934:	2a65      	cmp	r2, #101	@ 0x65
 8009936:	d001      	beq.n	800993c <_strtod_l+0x174>
 8009938:	2a45      	cmp	r2, #69	@ 0x45
 800993a:	d114      	bne.n	8009966 <_strtod_l+0x19e>
 800993c:	b91d      	cbnz	r5, 8009946 <_strtod_l+0x17e>
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	4302      	orrs	r2, r0
 8009942:	d095      	beq.n	8009870 <_strtod_l+0xa8>
 8009944:	2500      	movs	r5, #0
 8009946:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009948:	1c62      	adds	r2, r4, #1
 800994a:	9219      	str	r2, [sp, #100]	@ 0x64
 800994c:	7862      	ldrb	r2, [r4, #1]
 800994e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009950:	d077      	beq.n	8009a42 <_strtod_l+0x27a>
 8009952:	2a2d      	cmp	r2, #45	@ 0x2d
 8009954:	d07b      	beq.n	8009a4e <_strtod_l+0x286>
 8009956:	f04f 0c00 	mov.w	ip, #0
 800995a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800995e:	2909      	cmp	r1, #9
 8009960:	f240 8082 	bls.w	8009a68 <_strtod_l+0x2a0>
 8009964:	9419      	str	r4, [sp, #100]	@ 0x64
 8009966:	f04f 0800 	mov.w	r8, #0
 800996a:	e0a2      	b.n	8009ab2 <_strtod_l+0x2ea>
 800996c:	2300      	movs	r3, #0
 800996e:	e7c7      	b.n	8009900 <_strtod_l+0x138>
 8009970:	2f08      	cmp	r7, #8
 8009972:	bfd5      	itete	le
 8009974:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009976:	9908      	ldrgt	r1, [sp, #32]
 8009978:	fb02 3301 	mlale	r3, r2, r1, r3
 800997c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009980:	f100 0001 	add.w	r0, r0, #1
 8009984:	bfd4      	ite	le
 8009986:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009988:	9308      	strgt	r3, [sp, #32]
 800998a:	3701      	adds	r7, #1
 800998c:	9019      	str	r0, [sp, #100]	@ 0x64
 800998e:	e7bf      	b.n	8009910 <_strtod_l+0x148>
 8009990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	9219      	str	r2, [sp, #100]	@ 0x64
 8009996:	785a      	ldrb	r2, [r3, #1]
 8009998:	b37f      	cbz	r7, 80099fa <_strtod_l+0x232>
 800999a:	4681      	mov	r9, r0
 800999c:	463d      	mov	r5, r7
 800999e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	d912      	bls.n	80099cc <_strtod_l+0x204>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e7c4      	b.n	8009934 <_strtod_l+0x16c>
 80099aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80099b0:	785a      	ldrb	r2, [r3, #1]
 80099b2:	3001      	adds	r0, #1
 80099b4:	2a30      	cmp	r2, #48	@ 0x30
 80099b6:	d0f8      	beq.n	80099aa <_strtod_l+0x1e2>
 80099b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80099bc:	2b08      	cmp	r3, #8
 80099be:	f200 84d3 	bhi.w	800a368 <_strtod_l+0xba0>
 80099c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80099c6:	4681      	mov	r9, r0
 80099c8:	2000      	movs	r0, #0
 80099ca:	4605      	mov	r5, r0
 80099cc:	3a30      	subs	r2, #48	@ 0x30
 80099ce:	f100 0301 	add.w	r3, r0, #1
 80099d2:	d02a      	beq.n	8009a2a <_strtod_l+0x262>
 80099d4:	4499      	add	r9, r3
 80099d6:	eb00 0c05 	add.w	ip, r0, r5
 80099da:	462b      	mov	r3, r5
 80099dc:	210a      	movs	r1, #10
 80099de:	4563      	cmp	r3, ip
 80099e0:	d10d      	bne.n	80099fe <_strtod_l+0x236>
 80099e2:	1c69      	adds	r1, r5, #1
 80099e4:	4401      	add	r1, r0
 80099e6:	4428      	add	r0, r5
 80099e8:	2808      	cmp	r0, #8
 80099ea:	dc16      	bgt.n	8009a1a <_strtod_l+0x252>
 80099ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099ee:	230a      	movs	r3, #10
 80099f0:	fb03 2300 	mla	r3, r3, r0, r2
 80099f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80099f6:	2300      	movs	r3, #0
 80099f8:	e018      	b.n	8009a2c <_strtod_l+0x264>
 80099fa:	4638      	mov	r0, r7
 80099fc:	e7da      	b.n	80099b4 <_strtod_l+0x1ec>
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	f103 0301 	add.w	r3, r3, #1
 8009a04:	dc03      	bgt.n	8009a0e <_strtod_l+0x246>
 8009a06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a08:	434e      	muls	r6, r1
 8009a0a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a0c:	e7e7      	b.n	80099de <_strtod_l+0x216>
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	bfde      	ittt	le
 8009a12:	9e08      	ldrle	r6, [sp, #32]
 8009a14:	434e      	mulle	r6, r1
 8009a16:	9608      	strle	r6, [sp, #32]
 8009a18:	e7e1      	b.n	80099de <_strtod_l+0x216>
 8009a1a:	280f      	cmp	r0, #15
 8009a1c:	dceb      	bgt.n	80099f6 <_strtod_l+0x22e>
 8009a1e:	9808      	ldr	r0, [sp, #32]
 8009a20:	230a      	movs	r3, #10
 8009a22:	fb03 2300 	mla	r3, r3, r0, r2
 8009a26:	9308      	str	r3, [sp, #32]
 8009a28:	e7e5      	b.n	80099f6 <_strtod_l+0x22e>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a2e:	1c50      	adds	r0, r2, #1
 8009a30:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a32:	7852      	ldrb	r2, [r2, #1]
 8009a34:	4618      	mov	r0, r3
 8009a36:	460d      	mov	r5, r1
 8009a38:	e7b1      	b.n	800999e <_strtod_l+0x1d6>
 8009a3a:	f04f 0900 	mov.w	r9, #0
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e77d      	b.n	800993e <_strtod_l+0x176>
 8009a42:	f04f 0c00 	mov.w	ip, #0
 8009a46:	1ca2      	adds	r2, r4, #2
 8009a48:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a4a:	78a2      	ldrb	r2, [r4, #2]
 8009a4c:	e785      	b.n	800995a <_strtod_l+0x192>
 8009a4e:	f04f 0c01 	mov.w	ip, #1
 8009a52:	e7f8      	b.n	8009a46 <_strtod_l+0x27e>
 8009a54:	0800ba08 	.word	0x0800ba08
 8009a58:	0800b9f0 	.word	0x0800b9f0
 8009a5c:	7ff00000 	.word	0x7ff00000
 8009a60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a62:	1c51      	adds	r1, r2, #1
 8009a64:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a66:	7852      	ldrb	r2, [r2, #1]
 8009a68:	2a30      	cmp	r2, #48	@ 0x30
 8009a6a:	d0f9      	beq.n	8009a60 <_strtod_l+0x298>
 8009a6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009a70:	2908      	cmp	r1, #8
 8009a72:	f63f af78 	bhi.w	8009966 <_strtod_l+0x19e>
 8009a76:	3a30      	subs	r2, #48	@ 0x30
 8009a78:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a7e:	f04f 080a 	mov.w	r8, #10
 8009a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a84:	1c56      	adds	r6, r2, #1
 8009a86:	9619      	str	r6, [sp, #100]	@ 0x64
 8009a88:	7852      	ldrb	r2, [r2, #1]
 8009a8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a8e:	f1be 0f09 	cmp.w	lr, #9
 8009a92:	d939      	bls.n	8009b08 <_strtod_l+0x340>
 8009a94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a96:	1a76      	subs	r6, r6, r1
 8009a98:	2e08      	cmp	r6, #8
 8009a9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a9e:	dc03      	bgt.n	8009aa8 <_strtod_l+0x2e0>
 8009aa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009aa2:	4588      	cmp	r8, r1
 8009aa4:	bfa8      	it	ge
 8009aa6:	4688      	movge	r8, r1
 8009aa8:	f1bc 0f00 	cmp.w	ip, #0
 8009aac:	d001      	beq.n	8009ab2 <_strtod_l+0x2ea>
 8009aae:	f1c8 0800 	rsb	r8, r8, #0
 8009ab2:	2d00      	cmp	r5, #0
 8009ab4:	d14e      	bne.n	8009b54 <_strtod_l+0x38c>
 8009ab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ab8:	4308      	orrs	r0, r1
 8009aba:	f47f aebe 	bne.w	800983a <_strtod_l+0x72>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f47f aed6 	bne.w	8009870 <_strtod_l+0xa8>
 8009ac4:	2a69      	cmp	r2, #105	@ 0x69
 8009ac6:	d028      	beq.n	8009b1a <_strtod_l+0x352>
 8009ac8:	dc25      	bgt.n	8009b16 <_strtod_l+0x34e>
 8009aca:	2a49      	cmp	r2, #73	@ 0x49
 8009acc:	d025      	beq.n	8009b1a <_strtod_l+0x352>
 8009ace:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ad0:	f47f aece 	bne.w	8009870 <_strtod_l+0xa8>
 8009ad4:	499b      	ldr	r1, [pc, #620]	@ (8009d44 <_strtod_l+0x57c>)
 8009ad6:	a819      	add	r0, sp, #100	@ 0x64
 8009ad8:	f001 f9ee 	bl	800aeb8 <__match>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f43f aec7 	beq.w	8009870 <_strtod_l+0xa8>
 8009ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b28      	cmp	r3, #40	@ 0x28
 8009ae8:	d12e      	bne.n	8009b48 <_strtod_l+0x380>
 8009aea:	4997      	ldr	r1, [pc, #604]	@ (8009d48 <_strtod_l+0x580>)
 8009aec:	aa1c      	add	r2, sp, #112	@ 0x70
 8009aee:	a819      	add	r0, sp, #100	@ 0x64
 8009af0:	f001 f9f6 	bl	800aee0 <__hexnan>
 8009af4:	2805      	cmp	r0, #5
 8009af6:	d127      	bne.n	8009b48 <_strtod_l+0x380>
 8009af8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009afa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009afe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b06:	e698      	b.n	800983a <_strtod_l+0x72>
 8009b08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b0a:	fb08 2101 	mla	r1, r8, r1, r2
 8009b0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b12:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b14:	e7b5      	b.n	8009a82 <_strtod_l+0x2ba>
 8009b16:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b18:	e7da      	b.n	8009ad0 <_strtod_l+0x308>
 8009b1a:	498c      	ldr	r1, [pc, #560]	@ (8009d4c <_strtod_l+0x584>)
 8009b1c:	a819      	add	r0, sp, #100	@ 0x64
 8009b1e:	f001 f9cb 	bl	800aeb8 <__match>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f43f aea4 	beq.w	8009870 <_strtod_l+0xa8>
 8009b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b2a:	4989      	ldr	r1, [pc, #548]	@ (8009d50 <_strtod_l+0x588>)
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	a819      	add	r0, sp, #100	@ 0x64
 8009b30:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b32:	f001 f9c1 	bl	800aeb8 <__match>
 8009b36:	b910      	cbnz	r0, 8009b3e <_strtod_l+0x376>
 8009b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009d60 <_strtod_l+0x598>
 8009b42:	f04f 0a00 	mov.w	sl, #0
 8009b46:	e678      	b.n	800983a <_strtod_l+0x72>
 8009b48:	4882      	ldr	r0, [pc, #520]	@ (8009d54 <_strtod_l+0x58c>)
 8009b4a:	f000 fef1 	bl	800a930 <nan>
 8009b4e:	ec5b ab10 	vmov	sl, fp, d0
 8009b52:	e672      	b.n	800983a <_strtod_l+0x72>
 8009b54:	eba8 0309 	sub.w	r3, r8, r9
 8009b58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5c:	2f00      	cmp	r7, #0
 8009b5e:	bf08      	it	eq
 8009b60:	462f      	moveq	r7, r5
 8009b62:	2d10      	cmp	r5, #16
 8009b64:	462c      	mov	r4, r5
 8009b66:	bfa8      	it	ge
 8009b68:	2410      	movge	r4, #16
 8009b6a:	f7f6 fcfb 	bl	8000564 <__aeabi_ui2d>
 8009b6e:	2d09      	cmp	r5, #9
 8009b70:	4682      	mov	sl, r0
 8009b72:	468b      	mov	fp, r1
 8009b74:	dc13      	bgt.n	8009b9e <_strtod_l+0x3d6>
 8009b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f43f ae5e 	beq.w	800983a <_strtod_l+0x72>
 8009b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b80:	dd78      	ble.n	8009c74 <_strtod_l+0x4ac>
 8009b82:	2b16      	cmp	r3, #22
 8009b84:	dc5f      	bgt.n	8009c46 <_strtod_l+0x47e>
 8009b86:	4974      	ldr	r1, [pc, #464]	@ (8009d58 <_strtod_l+0x590>)
 8009b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b90:	4652      	mov	r2, sl
 8009b92:	465b      	mov	r3, fp
 8009b94:	f7f6 fd60 	bl	8000658 <__aeabi_dmul>
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	e64d      	b.n	800983a <_strtod_l+0x72>
 8009b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8009d58 <_strtod_l+0x590>)
 8009ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ba8:	f7f6 fd56 	bl	8000658 <__aeabi_dmul>
 8009bac:	4682      	mov	sl, r0
 8009bae:	9808      	ldr	r0, [sp, #32]
 8009bb0:	468b      	mov	fp, r1
 8009bb2:	f7f6 fcd7 	bl	8000564 <__aeabi_ui2d>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4650      	mov	r0, sl
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	f7f6 fb95 	bl	80002ec <__adddf3>
 8009bc2:	2d0f      	cmp	r5, #15
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	468b      	mov	fp, r1
 8009bc8:	ddd5      	ble.n	8009b76 <_strtod_l+0x3ae>
 8009bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bcc:	1b2c      	subs	r4, r5, r4
 8009bce:	441c      	add	r4, r3
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	f340 8096 	ble.w	8009d02 <_strtod_l+0x53a>
 8009bd6:	f014 030f 	ands.w	r3, r4, #15
 8009bda:	d00a      	beq.n	8009bf2 <_strtod_l+0x42a>
 8009bdc:	495e      	ldr	r1, [pc, #376]	@ (8009d58 <_strtod_l+0x590>)
 8009bde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009be2:	4652      	mov	r2, sl
 8009be4:	465b      	mov	r3, fp
 8009be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bea:	f7f6 fd35 	bl	8000658 <__aeabi_dmul>
 8009bee:	4682      	mov	sl, r0
 8009bf0:	468b      	mov	fp, r1
 8009bf2:	f034 040f 	bics.w	r4, r4, #15
 8009bf6:	d073      	beq.n	8009ce0 <_strtod_l+0x518>
 8009bf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009bfc:	dd48      	ble.n	8009c90 <_strtod_l+0x4c8>
 8009bfe:	2400      	movs	r4, #0
 8009c00:	46a0      	mov	r8, r4
 8009c02:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c04:	46a1      	mov	r9, r4
 8009c06:	9a05      	ldr	r2, [sp, #20]
 8009c08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009d60 <_strtod_l+0x598>
 8009c0c:	2322      	movs	r3, #34	@ 0x22
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	f04f 0a00 	mov.w	sl, #0
 8009c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f43f ae0f 	beq.w	800983a <_strtod_l+0x72>
 8009c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c1e:	9805      	ldr	r0, [sp, #20]
 8009c20:	f7ff f942 	bl	8008ea8 <_Bfree>
 8009c24:	9805      	ldr	r0, [sp, #20]
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7ff f93e 	bl	8008ea8 <_Bfree>
 8009c2c:	9805      	ldr	r0, [sp, #20]
 8009c2e:	4641      	mov	r1, r8
 8009c30:	f7ff f93a 	bl	8008ea8 <_Bfree>
 8009c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c36:	9805      	ldr	r0, [sp, #20]
 8009c38:	f7ff f936 	bl	8008ea8 <_Bfree>
 8009c3c:	9805      	ldr	r0, [sp, #20]
 8009c3e:	4621      	mov	r1, r4
 8009c40:	f7ff f932 	bl	8008ea8 <_Bfree>
 8009c44:	e5f9      	b.n	800983a <_strtod_l+0x72>
 8009c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	dbbc      	blt.n	8009bca <_strtod_l+0x402>
 8009c50:	4c41      	ldr	r4, [pc, #260]	@ (8009d58 <_strtod_l+0x590>)
 8009c52:	f1c5 050f 	rsb	r5, r5, #15
 8009c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c62:	f7f6 fcf9 	bl	8000658 <__aeabi_dmul>
 8009c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c68:	1b5d      	subs	r5, r3, r5
 8009c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c72:	e78f      	b.n	8009b94 <_strtod_l+0x3cc>
 8009c74:	3316      	adds	r3, #22
 8009c76:	dba8      	blt.n	8009bca <_strtod_l+0x402>
 8009c78:	4b37      	ldr	r3, [pc, #220]	@ (8009d58 <_strtod_l+0x590>)
 8009c7a:	eba9 0808 	sub.w	r8, r9, r8
 8009c7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009c82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c86:	4650      	mov	r0, sl
 8009c88:	4659      	mov	r1, fp
 8009c8a:	f7f6 fe0f 	bl	80008ac <__aeabi_ddiv>
 8009c8e:	e783      	b.n	8009b98 <_strtod_l+0x3d0>
 8009c90:	4b32      	ldr	r3, [pc, #200]	@ (8009d5c <_strtod_l+0x594>)
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	2300      	movs	r3, #0
 8009c96:	1124      	asrs	r4, r4, #4
 8009c98:	4650      	mov	r0, sl
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	461e      	mov	r6, r3
 8009c9e:	2c01      	cmp	r4, #1
 8009ca0:	dc21      	bgt.n	8009ce6 <_strtod_l+0x51e>
 8009ca2:	b10b      	cbz	r3, 8009ca8 <_strtod_l+0x4e0>
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	468b      	mov	fp, r1
 8009ca8:	492c      	ldr	r1, [pc, #176]	@ (8009d5c <_strtod_l+0x594>)
 8009caa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009cae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cba:	f7f6 fccd 	bl	8000658 <__aeabi_dmul>
 8009cbe:	4b28      	ldr	r3, [pc, #160]	@ (8009d60 <_strtod_l+0x598>)
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	400b      	ands	r3, r1
 8009cc4:	4927      	ldr	r1, [pc, #156]	@ (8009d64 <_strtod_l+0x59c>)
 8009cc6:	428b      	cmp	r3, r1
 8009cc8:	4682      	mov	sl, r0
 8009cca:	d898      	bhi.n	8009bfe <_strtod_l+0x436>
 8009ccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009cd0:	428b      	cmp	r3, r1
 8009cd2:	bf86      	itte	hi
 8009cd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009d68 <_strtod_l+0x5a0>
 8009cd8:	f04f 3aff 	movhi.w	sl, #4294967295
 8009cdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9308      	str	r3, [sp, #32]
 8009ce4:	e07a      	b.n	8009ddc <_strtod_l+0x614>
 8009ce6:	07e2      	lsls	r2, r4, #31
 8009ce8:	d505      	bpl.n	8009cf6 <_strtod_l+0x52e>
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f7f6 fcb2 	bl	8000658 <__aeabi_dmul>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	9a08      	ldr	r2, [sp, #32]
 8009cf8:	3208      	adds	r2, #8
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	1064      	asrs	r4, r4, #1
 8009cfe:	9208      	str	r2, [sp, #32]
 8009d00:	e7cd      	b.n	8009c9e <_strtod_l+0x4d6>
 8009d02:	d0ed      	beq.n	8009ce0 <_strtod_l+0x518>
 8009d04:	4264      	negs	r4, r4
 8009d06:	f014 020f 	ands.w	r2, r4, #15
 8009d0a:	d00a      	beq.n	8009d22 <_strtod_l+0x55a>
 8009d0c:	4b12      	ldr	r3, [pc, #72]	@ (8009d58 <_strtod_l+0x590>)
 8009d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d12:	4650      	mov	r0, sl
 8009d14:	4659      	mov	r1, fp
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fdc7 	bl	80008ac <__aeabi_ddiv>
 8009d1e:	4682      	mov	sl, r0
 8009d20:	468b      	mov	fp, r1
 8009d22:	1124      	asrs	r4, r4, #4
 8009d24:	d0dc      	beq.n	8009ce0 <_strtod_l+0x518>
 8009d26:	2c1f      	cmp	r4, #31
 8009d28:	dd20      	ble.n	8009d6c <_strtod_l+0x5a4>
 8009d2a:	2400      	movs	r4, #0
 8009d2c:	46a0      	mov	r8, r4
 8009d2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d30:	46a1      	mov	r9, r4
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	2322      	movs	r3, #34	@ 0x22
 8009d36:	f04f 0a00 	mov.w	sl, #0
 8009d3a:	f04f 0b00 	mov.w	fp, #0
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	e768      	b.n	8009c14 <_strtod_l+0x44c>
 8009d42:	bf00      	nop
 8009d44:	0800b7e1 	.word	0x0800b7e1
 8009d48:	0800b9f4 	.word	0x0800b9f4
 8009d4c:	0800b7d9 	.word	0x0800b7d9
 8009d50:	0800b810 	.word	0x0800b810
 8009d54:	0800bb9d 	.word	0x0800bb9d
 8009d58:	0800b928 	.word	0x0800b928
 8009d5c:	0800b900 	.word	0x0800b900
 8009d60:	7ff00000 	.word	0x7ff00000
 8009d64:	7ca00000 	.word	0x7ca00000
 8009d68:	7fefffff 	.word	0x7fefffff
 8009d6c:	f014 0310 	ands.w	r3, r4, #16
 8009d70:	bf18      	it	ne
 8009d72:	236a      	movne	r3, #106	@ 0x6a
 8009d74:	4ea9      	ldr	r6, [pc, #676]	@ (800a01c <_strtod_l+0x854>)
 8009d76:	9308      	str	r3, [sp, #32]
 8009d78:	4650      	mov	r0, sl
 8009d7a:	4659      	mov	r1, fp
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	07e2      	lsls	r2, r4, #31
 8009d80:	d504      	bpl.n	8009d8c <_strtod_l+0x5c4>
 8009d82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d86:	f7f6 fc67 	bl	8000658 <__aeabi_dmul>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	1064      	asrs	r4, r4, #1
 8009d8e:	f106 0608 	add.w	r6, r6, #8
 8009d92:	d1f4      	bne.n	8009d7e <_strtod_l+0x5b6>
 8009d94:	b10b      	cbz	r3, 8009d9a <_strtod_l+0x5d2>
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	b1b3      	cbz	r3, 8009dcc <_strtod_l+0x604>
 8009d9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009da2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	4659      	mov	r1, fp
 8009daa:	dd0f      	ble.n	8009dcc <_strtod_l+0x604>
 8009dac:	2b1f      	cmp	r3, #31
 8009dae:	dd55      	ble.n	8009e5c <_strtod_l+0x694>
 8009db0:	2b34      	cmp	r3, #52	@ 0x34
 8009db2:	bfde      	ittt	le
 8009db4:	f04f 33ff 	movle.w	r3, #4294967295
 8009db8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009dbc:	4093      	lslle	r3, r2
 8009dbe:	f04f 0a00 	mov.w	sl, #0
 8009dc2:	bfcc      	ite	gt
 8009dc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	f7f6 fea8 	bl	8000b28 <__aeabi_dcmpeq>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d1a6      	bne.n	8009d2a <_strtod_l+0x562>
 8009ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009de2:	9805      	ldr	r0, [sp, #20]
 8009de4:	462b      	mov	r3, r5
 8009de6:	463a      	mov	r2, r7
 8009de8:	f7ff f8c6 	bl	8008f78 <__s2b>
 8009dec:	900a      	str	r0, [sp, #40]	@ 0x28
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f af05 	beq.w	8009bfe <_strtod_l+0x436>
 8009df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	eba9 0308 	sub.w	r3, r9, r8
 8009dfc:	bfa8      	it	ge
 8009dfe:	2300      	movge	r3, #0
 8009e00:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e02:	2400      	movs	r4, #0
 8009e04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e08:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e0a:	46a0      	mov	r8, r4
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e0e:	9805      	ldr	r0, [sp, #20]
 8009e10:	6859      	ldr	r1, [r3, #4]
 8009e12:	f7ff f809 	bl	8008e28 <_Balloc>
 8009e16:	4681      	mov	r9, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f43f aef4 	beq.w	8009c06 <_strtod_l+0x43e>
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e20:	691a      	ldr	r2, [r3, #16]
 8009e22:	3202      	adds	r2, #2
 8009e24:	f103 010c 	add.w	r1, r3, #12
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	300c      	adds	r0, #12
 8009e2c:	f000 fd72 	bl	800a914 <memcpy>
 8009e30:	ec4b ab10 	vmov	d0, sl, fp
 8009e34:	9805      	ldr	r0, [sp, #20]
 8009e36:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e38:	a91b      	add	r1, sp, #108	@ 0x6c
 8009e3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009e3e:	f7ff fbd7 	bl	80095f0 <__d2b>
 8009e42:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f43f aede 	beq.w	8009c06 <_strtod_l+0x43e>
 8009e4a:	9805      	ldr	r0, [sp, #20]
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	f7ff f929 	bl	80090a4 <__i2b>
 8009e52:	4680      	mov	r8, r0
 8009e54:	b948      	cbnz	r0, 8009e6a <_strtod_l+0x6a2>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	e6d4      	b.n	8009c06 <_strtod_l+0x43e>
 8009e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e60:	fa02 f303 	lsl.w	r3, r2, r3
 8009e64:	ea03 0a0a 	and.w	sl, r3, sl
 8009e68:	e7b0      	b.n	8009dcc <_strtod_l+0x604>
 8009e6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009e6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	bfab      	itete	ge
 8009e72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009e74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009e76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009e78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e7a:	bfac      	ite	ge
 8009e7c:	18ef      	addge	r7, r5, r3
 8009e7e:	1b5e      	sublt	r6, r3, r5
 8009e80:	9b08      	ldr	r3, [sp, #32]
 8009e82:	1aed      	subs	r5, r5, r3
 8009e84:	4415      	add	r5, r2
 8009e86:	4b66      	ldr	r3, [pc, #408]	@ (800a020 <_strtod_l+0x858>)
 8009e88:	3d01      	subs	r5, #1
 8009e8a:	429d      	cmp	r5, r3
 8009e8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e90:	da50      	bge.n	8009f34 <_strtod_l+0x76c>
 8009e92:	1b5b      	subs	r3, r3, r5
 8009e94:	2b1f      	cmp	r3, #31
 8009e96:	eba2 0203 	sub.w	r2, r2, r3
 8009e9a:	f04f 0101 	mov.w	r1, #1
 8009e9e:	dc3d      	bgt.n	8009f1c <_strtod_l+0x754>
 8009ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eaa:	18bd      	adds	r5, r7, r2
 8009eac:	9b08      	ldr	r3, [sp, #32]
 8009eae:	42af      	cmp	r7, r5
 8009eb0:	4416      	add	r6, r2
 8009eb2:	441e      	add	r6, r3
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	bfa8      	it	ge
 8009eb8:	462b      	movge	r3, r5
 8009eba:	42b3      	cmp	r3, r6
 8009ebc:	bfa8      	it	ge
 8009ebe:	4633      	movge	r3, r6
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfc2      	ittt	gt
 8009ec4:	1aed      	subgt	r5, r5, r3
 8009ec6:	1af6      	subgt	r6, r6, r3
 8009ec8:	1aff      	subgt	r7, r7, r3
 8009eca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd16      	ble.n	8009efe <_strtod_l+0x736>
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	9805      	ldr	r0, [sp, #20]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f7ff f9a5 	bl	8009224 <__pow5mult>
 8009eda:	4680      	mov	r8, r0
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0ba      	beq.n	8009e56 <_strtod_l+0x68e>
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ee4:	9805      	ldr	r0, [sp, #20]
 8009ee6:	f7ff f8f3 	bl	80090d0 <__multiply>
 8009eea:	900e      	str	r0, [sp, #56]	@ 0x38
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f43f ae8a 	beq.w	8009c06 <_strtod_l+0x43e>
 8009ef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ef4:	9805      	ldr	r0, [sp, #20]
 8009ef6:	f7fe ffd7 	bl	8008ea8 <_Bfree>
 8009efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	dc1d      	bgt.n	8009f3e <_strtod_l+0x776>
 8009f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd23      	ble.n	8009f50 <_strtod_l+0x788>
 8009f08:	4649      	mov	r1, r9
 8009f0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f0c:	9805      	ldr	r0, [sp, #20]
 8009f0e:	f7ff f989 	bl	8009224 <__pow5mult>
 8009f12:	4681      	mov	r9, r0
 8009f14:	b9e0      	cbnz	r0, 8009f50 <_strtod_l+0x788>
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	e674      	b.n	8009c06 <_strtod_l+0x43e>
 8009f1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009f20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009f24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009f28:	35e2      	adds	r5, #226	@ 0xe2
 8009f2a:	fa01 f305 	lsl.w	r3, r1, r5
 8009f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009f32:	e7ba      	b.n	8009eaa <_strtod_l+0x6e2>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f3c:	e7b5      	b.n	8009eaa <_strtod_l+0x6e2>
 8009f3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f40:	9805      	ldr	r0, [sp, #20]
 8009f42:	462a      	mov	r2, r5
 8009f44:	f7ff f9c8 	bl	80092d8 <__lshift>
 8009f48:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d1d9      	bne.n	8009f02 <_strtod_l+0x73a>
 8009f4e:	e65a      	b.n	8009c06 <_strtod_l+0x43e>
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	dd07      	ble.n	8009f64 <_strtod_l+0x79c>
 8009f54:	4649      	mov	r1, r9
 8009f56:	9805      	ldr	r0, [sp, #20]
 8009f58:	4632      	mov	r2, r6
 8009f5a:	f7ff f9bd 	bl	80092d8 <__lshift>
 8009f5e:	4681      	mov	r9, r0
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d0d8      	beq.n	8009f16 <_strtod_l+0x74e>
 8009f64:	2f00      	cmp	r7, #0
 8009f66:	dd08      	ble.n	8009f7a <_strtod_l+0x7b2>
 8009f68:	4641      	mov	r1, r8
 8009f6a:	9805      	ldr	r0, [sp, #20]
 8009f6c:	463a      	mov	r2, r7
 8009f6e:	f7ff f9b3 	bl	80092d8 <__lshift>
 8009f72:	4680      	mov	r8, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f43f ae46 	beq.w	8009c06 <_strtod_l+0x43e>
 8009f7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	464a      	mov	r2, r9
 8009f80:	f7ff fa32 	bl	80093e8 <__mdiff>
 8009f84:	4604      	mov	r4, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f43f ae3d 	beq.w	8009c06 <_strtod_l+0x43e>
 8009f8c:	68c3      	ldr	r3, [r0, #12]
 8009f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f90:	2300      	movs	r3, #0
 8009f92:	60c3      	str	r3, [r0, #12]
 8009f94:	4641      	mov	r1, r8
 8009f96:	f7ff fa0b 	bl	80093b0 <__mcmp>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	da46      	bge.n	800a02c <_strtod_l+0x864>
 8009f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fa0:	ea53 030a 	orrs.w	r3, r3, sl
 8009fa4:	d16c      	bne.n	800a080 <_strtod_l+0x8b8>
 8009fa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d168      	bne.n	800a080 <_strtod_l+0x8b8>
 8009fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fb2:	0d1b      	lsrs	r3, r3, #20
 8009fb4:	051b      	lsls	r3, r3, #20
 8009fb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009fba:	d961      	bls.n	800a080 <_strtod_l+0x8b8>
 8009fbc:	6963      	ldr	r3, [r4, #20]
 8009fbe:	b913      	cbnz	r3, 8009fc6 <_strtod_l+0x7fe>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	dd5c      	ble.n	800a080 <_strtod_l+0x8b8>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	2201      	movs	r2, #1
 8009fca:	9805      	ldr	r0, [sp, #20]
 8009fcc:	f7ff f984 	bl	80092d8 <__lshift>
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	f7ff f9ec 	bl	80093b0 <__mcmp>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	dd51      	ble.n	800a080 <_strtod_l+0x8b8>
 8009fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fe0:	9a08      	ldr	r2, [sp, #32]
 8009fe2:	0d1b      	lsrs	r3, r3, #20
 8009fe4:	051b      	lsls	r3, r3, #20
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d06b      	beq.n	800a0c2 <_strtod_l+0x8fa>
 8009fea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009fee:	d868      	bhi.n	800a0c2 <_strtod_l+0x8fa>
 8009ff0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009ff4:	f67f ae9d 	bls.w	8009d32 <_strtod_l+0x56a>
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	@ (800a024 <_strtod_l+0x85c>)
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	2200      	movs	r2, #0
 800a000:	f7f6 fb2a 	bl	8000658 <__aeabi_dmul>
 800a004:	4b08      	ldr	r3, [pc, #32]	@ (800a028 <_strtod_l+0x860>)
 800a006:	400b      	ands	r3, r1
 800a008:	4682      	mov	sl, r0
 800a00a:	468b      	mov	fp, r1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f ae05 	bne.w	8009c1c <_strtod_l+0x454>
 800a012:	9a05      	ldr	r2, [sp, #20]
 800a014:	2322      	movs	r3, #34	@ 0x22
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	e600      	b.n	8009c1c <_strtod_l+0x454>
 800a01a:	bf00      	nop
 800a01c:	0800ba20 	.word	0x0800ba20
 800a020:	fffffc02 	.word	0xfffffc02
 800a024:	39500000 	.word	0x39500000
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a030:	d165      	bne.n	800a0fe <_strtod_l+0x936>
 800a032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a038:	b35a      	cbz	r2, 800a092 <_strtod_l+0x8ca>
 800a03a:	4a9f      	ldr	r2, [pc, #636]	@ (800a2b8 <_strtod_l+0xaf0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d12b      	bne.n	800a098 <_strtod_l+0x8d0>
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	4651      	mov	r1, sl
 800a044:	b303      	cbz	r3, 800a088 <_strtod_l+0x8c0>
 800a046:	4b9d      	ldr	r3, [pc, #628]	@ (800a2bc <_strtod_l+0xaf4>)
 800a048:	465a      	mov	r2, fp
 800a04a:	4013      	ands	r3, r2
 800a04c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	d81b      	bhi.n	800a08e <_strtod_l+0x8c6>
 800a056:	0d1b      	lsrs	r3, r3, #20
 800a058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a05c:	fa02 f303 	lsl.w	r3, r2, r3
 800a060:	4299      	cmp	r1, r3
 800a062:	d119      	bne.n	800a098 <_strtod_l+0x8d0>
 800a064:	4b96      	ldr	r3, [pc, #600]	@ (800a2c0 <_strtod_l+0xaf8>)
 800a066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a068:	429a      	cmp	r2, r3
 800a06a:	d102      	bne.n	800a072 <_strtod_l+0x8aa>
 800a06c:	3101      	adds	r1, #1
 800a06e:	f43f adca 	beq.w	8009c06 <_strtod_l+0x43e>
 800a072:	4b92      	ldr	r3, [pc, #584]	@ (800a2bc <_strtod_l+0xaf4>)
 800a074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a076:	401a      	ands	r2, r3
 800a078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a07c:	f04f 0a00 	mov.w	sl, #0
 800a080:	9b08      	ldr	r3, [sp, #32]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1b8      	bne.n	8009ff8 <_strtod_l+0x830>
 800a086:	e5c9      	b.n	8009c1c <_strtod_l+0x454>
 800a088:	f04f 33ff 	mov.w	r3, #4294967295
 800a08c:	e7e8      	b.n	800a060 <_strtod_l+0x898>
 800a08e:	4613      	mov	r3, r2
 800a090:	e7e6      	b.n	800a060 <_strtod_l+0x898>
 800a092:	ea53 030a 	orrs.w	r3, r3, sl
 800a096:	d0a1      	beq.n	8009fdc <_strtod_l+0x814>
 800a098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a09a:	b1db      	cbz	r3, 800a0d4 <_strtod_l+0x90c>
 800a09c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a09e:	4213      	tst	r3, r2
 800a0a0:	d0ee      	beq.n	800a080 <_strtod_l+0x8b8>
 800a0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a4:	9a08      	ldr	r2, [sp, #32]
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	b1bb      	cbz	r3, 800a0dc <_strtod_l+0x914>
 800a0ac:	f7ff fb6e 	bl	800978c <sulp>
 800a0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0b4:	ec53 2b10 	vmov	r2, r3, d0
 800a0b8:	f7f6 f918 	bl	80002ec <__adddf3>
 800a0bc:	4682      	mov	sl, r0
 800a0be:	468b      	mov	fp, r1
 800a0c0:	e7de      	b.n	800a080 <_strtod_l+0x8b8>
 800a0c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a0c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0ce:	f04f 3aff 	mov.w	sl, #4294967295
 800a0d2:	e7d5      	b.n	800a080 <_strtod_l+0x8b8>
 800a0d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0d6:	ea13 0f0a 	tst.w	r3, sl
 800a0da:	e7e1      	b.n	800a0a0 <_strtod_l+0x8d8>
 800a0dc:	f7ff fb56 	bl	800978c <sulp>
 800a0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0e4:	ec53 2b10 	vmov	r2, r3, d0
 800a0e8:	f7f6 f8fe 	bl	80002e8 <__aeabi_dsub>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	4682      	mov	sl, r0
 800a0f2:	468b      	mov	fp, r1
 800a0f4:	f7f6 fd18 	bl	8000b28 <__aeabi_dcmpeq>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d0c1      	beq.n	800a080 <_strtod_l+0x8b8>
 800a0fc:	e619      	b.n	8009d32 <_strtod_l+0x56a>
 800a0fe:	4641      	mov	r1, r8
 800a100:	4620      	mov	r0, r4
 800a102:	f7ff facd 	bl	80096a0 <__ratio>
 800a106:	ec57 6b10 	vmov	r6, r7, d0
 800a10a:	2200      	movs	r2, #0
 800a10c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a110:	4630      	mov	r0, r6
 800a112:	4639      	mov	r1, r7
 800a114:	f7f6 fd1c 	bl	8000b50 <__aeabi_dcmple>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d06f      	beq.n	800a1fc <_strtod_l+0xa34>
 800a11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d17a      	bne.n	800a218 <_strtod_l+0xa50>
 800a122:	f1ba 0f00 	cmp.w	sl, #0
 800a126:	d158      	bne.n	800a1da <_strtod_l+0xa12>
 800a128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d15a      	bne.n	800a1e8 <_strtod_l+0xa20>
 800a132:	4b64      	ldr	r3, [pc, #400]	@ (800a2c4 <_strtod_l+0xafc>)
 800a134:	2200      	movs	r2, #0
 800a136:	4630      	mov	r0, r6
 800a138:	4639      	mov	r1, r7
 800a13a:	f7f6 fcff 	bl	8000b3c <__aeabi_dcmplt>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d159      	bne.n	800a1f6 <_strtod_l+0xa2e>
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	4b60      	ldr	r3, [pc, #384]	@ (800a2c8 <_strtod_l+0xb00>)
 800a148:	2200      	movs	r2, #0
 800a14a:	f7f6 fa85 	bl	8000658 <__aeabi_dmul>
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a156:	9606      	str	r6, [sp, #24]
 800a158:	9307      	str	r3, [sp, #28]
 800a15a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a15e:	4d57      	ldr	r5, [pc, #348]	@ (800a2bc <_strtod_l+0xaf4>)
 800a160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a166:	401d      	ands	r5, r3
 800a168:	4b58      	ldr	r3, [pc, #352]	@ (800a2cc <_strtod_l+0xb04>)
 800a16a:	429d      	cmp	r5, r3
 800a16c:	f040 80b2 	bne.w	800a2d4 <_strtod_l+0xb0c>
 800a170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a176:	ec4b ab10 	vmov	d0, sl, fp
 800a17a:	f7ff f9c9 	bl	8009510 <__ulp>
 800a17e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a182:	ec51 0b10 	vmov	r0, r1, d0
 800a186:	f7f6 fa67 	bl	8000658 <__aeabi_dmul>
 800a18a:	4652      	mov	r2, sl
 800a18c:	465b      	mov	r3, fp
 800a18e:	f7f6 f8ad 	bl	80002ec <__adddf3>
 800a192:	460b      	mov	r3, r1
 800a194:	4949      	ldr	r1, [pc, #292]	@ (800a2bc <_strtod_l+0xaf4>)
 800a196:	4a4e      	ldr	r2, [pc, #312]	@ (800a2d0 <_strtod_l+0xb08>)
 800a198:	4019      	ands	r1, r3
 800a19a:	4291      	cmp	r1, r2
 800a19c:	4682      	mov	sl, r0
 800a19e:	d942      	bls.n	800a226 <_strtod_l+0xa5e>
 800a1a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1a2:	4b47      	ldr	r3, [pc, #284]	@ (800a2c0 <_strtod_l+0xaf8>)
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d103      	bne.n	800a1b0 <_strtod_l+0x9e8>
 800a1a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f43f ad2b 	beq.w	8009c06 <_strtod_l+0x43e>
 800a1b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a2c0 <_strtod_l+0xaf8>
 800a1b4:	f04f 3aff 	mov.w	sl, #4294967295
 800a1b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1ba:	9805      	ldr	r0, [sp, #20]
 800a1bc:	f7fe fe74 	bl	8008ea8 <_Bfree>
 800a1c0:	9805      	ldr	r0, [sp, #20]
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7fe fe70 	bl	8008ea8 <_Bfree>
 800a1c8:	9805      	ldr	r0, [sp, #20]
 800a1ca:	4641      	mov	r1, r8
 800a1cc:	f7fe fe6c 	bl	8008ea8 <_Bfree>
 800a1d0:	9805      	ldr	r0, [sp, #20]
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f7fe fe68 	bl	8008ea8 <_Bfree>
 800a1d8:	e618      	b.n	8009e0c <_strtod_l+0x644>
 800a1da:	f1ba 0f01 	cmp.w	sl, #1
 800a1de:	d103      	bne.n	800a1e8 <_strtod_l+0xa20>
 800a1e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f43f ada5 	beq.w	8009d32 <_strtod_l+0x56a>
 800a1e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a298 <_strtod_l+0xad0>
 800a1ec:	4f35      	ldr	r7, [pc, #212]	@ (800a2c4 <_strtod_l+0xafc>)
 800a1ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1f2:	2600      	movs	r6, #0
 800a1f4:	e7b1      	b.n	800a15a <_strtod_l+0x992>
 800a1f6:	4f34      	ldr	r7, [pc, #208]	@ (800a2c8 <_strtod_l+0xb00>)
 800a1f8:	2600      	movs	r6, #0
 800a1fa:	e7aa      	b.n	800a152 <_strtod_l+0x98a>
 800a1fc:	4b32      	ldr	r3, [pc, #200]	@ (800a2c8 <_strtod_l+0xb00>)
 800a1fe:	4630      	mov	r0, r6
 800a200:	4639      	mov	r1, r7
 800a202:	2200      	movs	r2, #0
 800a204:	f7f6 fa28 	bl	8000658 <__aeabi_dmul>
 800a208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d09f      	beq.n	800a152 <_strtod_l+0x98a>
 800a212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a216:	e7a0      	b.n	800a15a <_strtod_l+0x992>
 800a218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a2a0 <_strtod_l+0xad8>
 800a21c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a220:	ec57 6b17 	vmov	r6, r7, d7
 800a224:	e799      	b.n	800a15a <_strtod_l+0x992>
 800a226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1c1      	bne.n	800a1b8 <_strtod_l+0x9f0>
 800a234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a238:	0d1b      	lsrs	r3, r3, #20
 800a23a:	051b      	lsls	r3, r3, #20
 800a23c:	429d      	cmp	r5, r3
 800a23e:	d1bb      	bne.n	800a1b8 <_strtod_l+0x9f0>
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fd68 	bl	8000d18 <__aeabi_d2lz>
 800a248:	f7f6 f9d8 	bl	80005fc <__aeabi_l2d>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 f848 	bl	80002e8 <__aeabi_dsub>
 800a258:	460b      	mov	r3, r1
 800a25a:	4602      	mov	r2, r0
 800a25c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a266:	ea46 060a 	orr.w	r6, r6, sl
 800a26a:	431e      	orrs	r6, r3
 800a26c:	d06f      	beq.n	800a34e <_strtod_l+0xb86>
 800a26e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2a8 <_strtod_l+0xae0>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 fc62 	bl	8000b3c <__aeabi_dcmplt>
 800a278:	2800      	cmp	r0, #0
 800a27a:	f47f accf 	bne.w	8009c1c <_strtod_l+0x454>
 800a27e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a2b0 <_strtod_l+0xae8>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a288:	f7f6 fc76 	bl	8000b78 <__aeabi_dcmpgt>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d093      	beq.n	800a1b8 <_strtod_l+0x9f0>
 800a290:	e4c4      	b.n	8009c1c <_strtod_l+0x454>
 800a292:	bf00      	nop
 800a294:	f3af 8000 	nop.w
 800a298:	00000000 	.word	0x00000000
 800a29c:	bff00000 	.word	0xbff00000
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	3ff00000 	.word	0x3ff00000
 800a2a8:	94a03595 	.word	0x94a03595
 800a2ac:	3fdfffff 	.word	0x3fdfffff
 800a2b0:	35afe535 	.word	0x35afe535
 800a2b4:	3fe00000 	.word	0x3fe00000
 800a2b8:	000fffff 	.word	0x000fffff
 800a2bc:	7ff00000 	.word	0x7ff00000
 800a2c0:	7fefffff 	.word	0x7fefffff
 800a2c4:	3ff00000 	.word	0x3ff00000
 800a2c8:	3fe00000 	.word	0x3fe00000
 800a2cc:	7fe00000 	.word	0x7fe00000
 800a2d0:	7c9fffff 	.word	0x7c9fffff
 800a2d4:	9b08      	ldr	r3, [sp, #32]
 800a2d6:	b323      	cbz	r3, 800a322 <_strtod_l+0xb5a>
 800a2d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a2dc:	d821      	bhi.n	800a322 <_strtod_l+0xb5a>
 800a2de:	a328      	add	r3, pc, #160	@ (adr r3, 800a380 <_strtod_l+0xbb8>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f6 fc32 	bl	8000b50 <__aeabi_dcmple>
 800a2ec:	b1a0      	cbz	r0, 800a318 <_strtod_l+0xb50>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7f6 fc89 	bl	8000c08 <__aeabi_d2uiz>
 800a2f6:	2801      	cmp	r0, #1
 800a2f8:	bf38      	it	cc
 800a2fa:	2001      	movcc	r0, #1
 800a2fc:	f7f6 f932 	bl	8000564 <__aeabi_ui2d>
 800a300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	b9fb      	cbnz	r3, 800a348 <_strtod_l+0xb80>
 800a308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a30c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a30e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a31a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a31e:	1b5b      	subs	r3, r3, r5
 800a320:	9311      	str	r3, [sp, #68]	@ 0x44
 800a322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a32a:	f7ff f8f1 	bl	8009510 <__ulp>
 800a32e:	4650      	mov	r0, sl
 800a330:	ec53 2b10 	vmov	r2, r3, d0
 800a334:	4659      	mov	r1, fp
 800a336:	f7f6 f98f 	bl	8000658 <__aeabi_dmul>
 800a33a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a33e:	f7f5 ffd5 	bl	80002ec <__adddf3>
 800a342:	4682      	mov	sl, r0
 800a344:	468b      	mov	fp, r1
 800a346:	e770      	b.n	800a22a <_strtod_l+0xa62>
 800a348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a34c:	e7e0      	b.n	800a310 <_strtod_l+0xb48>
 800a34e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a388 <_strtod_l+0xbc0>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f6 fbf2 	bl	8000b3c <__aeabi_dcmplt>
 800a358:	e798      	b.n	800a28c <_strtod_l+0xac4>
 800a35a:	2300      	movs	r3, #0
 800a35c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a35e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	f7ff ba6d 	b.w	8009842 <_strtod_l+0x7a>
 800a368:	2a65      	cmp	r2, #101	@ 0x65
 800a36a:	f43f ab66 	beq.w	8009a3a <_strtod_l+0x272>
 800a36e:	2a45      	cmp	r2, #69	@ 0x45
 800a370:	f43f ab63 	beq.w	8009a3a <_strtod_l+0x272>
 800a374:	2301      	movs	r3, #1
 800a376:	f7ff bb9e 	b.w	8009ab6 <_strtod_l+0x2ee>
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w
 800a380:	ffc00000 	.word	0xffc00000
 800a384:	41dfffff 	.word	0x41dfffff
 800a388:	94a03595 	.word	0x94a03595
 800a38c:	3fcfffff 	.word	0x3fcfffff

0800a390 <_strtod_r>:
 800a390:	4b01      	ldr	r3, [pc, #4]	@ (800a398 <_strtod_r+0x8>)
 800a392:	f7ff ba19 	b.w	80097c8 <_strtod_l>
 800a396:	bf00      	nop
 800a398:	200001ec 	.word	0x200001ec

0800a39c <_strtol_l.constprop.0>:
 800a39c:	2b24      	cmp	r3, #36	@ 0x24
 800a39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a2:	4686      	mov	lr, r0
 800a3a4:	4690      	mov	r8, r2
 800a3a6:	d801      	bhi.n	800a3ac <_strtol_l.constprop.0+0x10>
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d106      	bne.n	800a3ba <_strtol_l.constprop.0+0x1e>
 800a3ac:	f7fd fdba 	bl	8007f24 <__errno>
 800a3b0:	2316      	movs	r3, #22
 800a3b2:	6003      	str	r3, [r0, #0]
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	4834      	ldr	r0, [pc, #208]	@ (800a48c <_strtol_l.constprop.0+0xf0>)
 800a3bc:	460d      	mov	r5, r1
 800a3be:	462a      	mov	r2, r5
 800a3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3c4:	5d06      	ldrb	r6, [r0, r4]
 800a3c6:	f016 0608 	ands.w	r6, r6, #8
 800a3ca:	d1f8      	bne.n	800a3be <_strtol_l.constprop.0+0x22>
 800a3cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3ce:	d12d      	bne.n	800a42c <_strtol_l.constprop.0+0x90>
 800a3d0:	782c      	ldrb	r4, [r5, #0]
 800a3d2:	2601      	movs	r6, #1
 800a3d4:	1c95      	adds	r5, r2, #2
 800a3d6:	f033 0210 	bics.w	r2, r3, #16
 800a3da:	d109      	bne.n	800a3f0 <_strtol_l.constprop.0+0x54>
 800a3dc:	2c30      	cmp	r4, #48	@ 0x30
 800a3de:	d12a      	bne.n	800a436 <_strtol_l.constprop.0+0x9a>
 800a3e0:	782a      	ldrb	r2, [r5, #0]
 800a3e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3e6:	2a58      	cmp	r2, #88	@ 0x58
 800a3e8:	d125      	bne.n	800a436 <_strtol_l.constprop.0+0x9a>
 800a3ea:	786c      	ldrb	r4, [r5, #1]
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	3502      	adds	r5, #2
 800a3f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	fbbc f9f3 	udiv	r9, ip, r3
 800a3fe:	4610      	mov	r0, r2
 800a400:	fb03 ca19 	mls	sl, r3, r9, ip
 800a404:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a408:	2f09      	cmp	r7, #9
 800a40a:	d81b      	bhi.n	800a444 <_strtol_l.constprop.0+0xa8>
 800a40c:	463c      	mov	r4, r7
 800a40e:	42a3      	cmp	r3, r4
 800a410:	dd27      	ble.n	800a462 <_strtol_l.constprop.0+0xc6>
 800a412:	1c57      	adds	r7, r2, #1
 800a414:	d007      	beq.n	800a426 <_strtol_l.constprop.0+0x8a>
 800a416:	4581      	cmp	r9, r0
 800a418:	d320      	bcc.n	800a45c <_strtol_l.constprop.0+0xc0>
 800a41a:	d101      	bne.n	800a420 <_strtol_l.constprop.0+0x84>
 800a41c:	45a2      	cmp	sl, r4
 800a41e:	db1d      	blt.n	800a45c <_strtol_l.constprop.0+0xc0>
 800a420:	fb00 4003 	mla	r0, r0, r3, r4
 800a424:	2201      	movs	r2, #1
 800a426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a42a:	e7eb      	b.n	800a404 <_strtol_l.constprop.0+0x68>
 800a42c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a42e:	bf04      	itt	eq
 800a430:	782c      	ldrbeq	r4, [r5, #0]
 800a432:	1c95      	addeq	r5, r2, #2
 800a434:	e7cf      	b.n	800a3d6 <_strtol_l.constprop.0+0x3a>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1da      	bne.n	800a3f0 <_strtol_l.constprop.0+0x54>
 800a43a:	2c30      	cmp	r4, #48	@ 0x30
 800a43c:	bf0c      	ite	eq
 800a43e:	2308      	moveq	r3, #8
 800a440:	230a      	movne	r3, #10
 800a442:	e7d5      	b.n	800a3f0 <_strtol_l.constprop.0+0x54>
 800a444:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a448:	2f19      	cmp	r7, #25
 800a44a:	d801      	bhi.n	800a450 <_strtol_l.constprop.0+0xb4>
 800a44c:	3c37      	subs	r4, #55	@ 0x37
 800a44e:	e7de      	b.n	800a40e <_strtol_l.constprop.0+0x72>
 800a450:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a454:	2f19      	cmp	r7, #25
 800a456:	d804      	bhi.n	800a462 <_strtol_l.constprop.0+0xc6>
 800a458:	3c57      	subs	r4, #87	@ 0x57
 800a45a:	e7d8      	b.n	800a40e <_strtol_l.constprop.0+0x72>
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295
 800a460:	e7e1      	b.n	800a426 <_strtol_l.constprop.0+0x8a>
 800a462:	1c53      	adds	r3, r2, #1
 800a464:	d108      	bne.n	800a478 <_strtol_l.constprop.0+0xdc>
 800a466:	2322      	movs	r3, #34	@ 0x22
 800a468:	f8ce 3000 	str.w	r3, [lr]
 800a46c:	4660      	mov	r0, ip
 800a46e:	f1b8 0f00 	cmp.w	r8, #0
 800a472:	d0a0      	beq.n	800a3b6 <_strtol_l.constprop.0+0x1a>
 800a474:	1e69      	subs	r1, r5, #1
 800a476:	e006      	b.n	800a486 <_strtol_l.constprop.0+0xea>
 800a478:	b106      	cbz	r6, 800a47c <_strtol_l.constprop.0+0xe0>
 800a47a:	4240      	negs	r0, r0
 800a47c:	f1b8 0f00 	cmp.w	r8, #0
 800a480:	d099      	beq.n	800a3b6 <_strtol_l.constprop.0+0x1a>
 800a482:	2a00      	cmp	r2, #0
 800a484:	d1f6      	bne.n	800a474 <_strtol_l.constprop.0+0xd8>
 800a486:	f8c8 1000 	str.w	r1, [r8]
 800a48a:	e794      	b.n	800a3b6 <_strtol_l.constprop.0+0x1a>
 800a48c:	0800ba49 	.word	0x0800ba49

0800a490 <_strtol_r>:
 800a490:	f7ff bf84 	b.w	800a39c <_strtol_l.constprop.0>

0800a494 <__ssputs_r>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	688e      	ldr	r6, [r1, #8]
 800a49a:	461f      	mov	r7, r3
 800a49c:	42be      	cmp	r6, r7
 800a49e:	680b      	ldr	r3, [r1, #0]
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4690      	mov	r8, r2
 800a4a6:	d82d      	bhi.n	800a504 <__ssputs_r+0x70>
 800a4a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4b0:	d026      	beq.n	800a500 <__ssputs_r+0x6c>
 800a4b2:	6965      	ldr	r5, [r4, #20]
 800a4b4:	6909      	ldr	r1, [r1, #16]
 800a4b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4ba:	eba3 0901 	sub.w	r9, r3, r1
 800a4be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4c2:	1c7b      	adds	r3, r7, #1
 800a4c4:	444b      	add	r3, r9
 800a4c6:	106d      	asrs	r5, r5, #1
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	bf38      	it	cc
 800a4cc:	461d      	movcc	r5, r3
 800a4ce:	0553      	lsls	r3, r2, #21
 800a4d0:	d527      	bpl.n	800a522 <__ssputs_r+0x8e>
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	f7fe fc1c 	bl	8008d10 <_malloc_r>
 800a4d8:	4606      	mov	r6, r0
 800a4da:	b360      	cbz	r0, 800a536 <__ssputs_r+0xa2>
 800a4dc:	6921      	ldr	r1, [r4, #16]
 800a4de:	464a      	mov	r2, r9
 800a4e0:	f000 fa18 	bl	800a914 <memcpy>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	6126      	str	r6, [r4, #16]
 800a4f2:	6165      	str	r5, [r4, #20]
 800a4f4:	444e      	add	r6, r9
 800a4f6:	eba5 0509 	sub.w	r5, r5, r9
 800a4fa:	6026      	str	r6, [r4, #0]
 800a4fc:	60a5      	str	r5, [r4, #8]
 800a4fe:	463e      	mov	r6, r7
 800a500:	42be      	cmp	r6, r7
 800a502:	d900      	bls.n	800a506 <__ssputs_r+0x72>
 800a504:	463e      	mov	r6, r7
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	4632      	mov	r2, r6
 800a50a:	4641      	mov	r1, r8
 800a50c:	f000 f9c6 	bl	800a89c <memmove>
 800a510:	68a3      	ldr	r3, [r4, #8]
 800a512:	1b9b      	subs	r3, r3, r6
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	4433      	add	r3, r6
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	2000      	movs	r0, #0
 800a51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a522:	462a      	mov	r2, r5
 800a524:	f000 fd89 	bl	800b03a <_realloc_r>
 800a528:	4606      	mov	r6, r0
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d1e0      	bne.n	800a4f0 <__ssputs_r+0x5c>
 800a52e:	6921      	ldr	r1, [r4, #16]
 800a530:	4650      	mov	r0, sl
 800a532:	f7fe fb79 	bl	8008c28 <_free_r>
 800a536:	230c      	movs	r3, #12
 800a538:	f8ca 3000 	str.w	r3, [sl]
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e7e9      	b.n	800a51e <__ssputs_r+0x8a>
	...

0800a54c <_svfiprintf_r>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	4698      	mov	r8, r3
 800a552:	898b      	ldrh	r3, [r1, #12]
 800a554:	061b      	lsls	r3, r3, #24
 800a556:	b09d      	sub	sp, #116	@ 0x74
 800a558:	4607      	mov	r7, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	4614      	mov	r4, r2
 800a55e:	d510      	bpl.n	800a582 <_svfiprintf_r+0x36>
 800a560:	690b      	ldr	r3, [r1, #16]
 800a562:	b973      	cbnz	r3, 800a582 <_svfiprintf_r+0x36>
 800a564:	2140      	movs	r1, #64	@ 0x40
 800a566:	f7fe fbd3 	bl	8008d10 <_malloc_r>
 800a56a:	6028      	str	r0, [r5, #0]
 800a56c:	6128      	str	r0, [r5, #16]
 800a56e:	b930      	cbnz	r0, 800a57e <_svfiprintf_r+0x32>
 800a570:	230c      	movs	r3, #12
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	b01d      	add	sp, #116	@ 0x74
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	2340      	movs	r3, #64	@ 0x40
 800a580:	616b      	str	r3, [r5, #20]
 800a582:	2300      	movs	r3, #0
 800a584:	9309      	str	r3, [sp, #36]	@ 0x24
 800a586:	2320      	movs	r3, #32
 800a588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a590:	2330      	movs	r3, #48	@ 0x30
 800a592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a730 <_svfiprintf_r+0x1e4>
 800a596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a59a:	f04f 0901 	mov.w	r9, #1
 800a59e:	4623      	mov	r3, r4
 800a5a0:	469a      	mov	sl, r3
 800a5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a6:	b10a      	cbz	r2, 800a5ac <_svfiprintf_r+0x60>
 800a5a8:	2a25      	cmp	r2, #37	@ 0x25
 800a5aa:	d1f9      	bne.n	800a5a0 <_svfiprintf_r+0x54>
 800a5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b0:	d00b      	beq.n	800a5ca <_svfiprintf_r+0x7e>
 800a5b2:	465b      	mov	r3, fp
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7ff ff6b 	bl	800a494 <__ssputs_r>
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f000 80a7 	beq.w	800a712 <_svfiprintf_r+0x1c6>
 800a5c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5c6:	445a      	add	r2, fp
 800a5c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 809f 	beq.w	800a712 <_svfiprintf_r+0x1c6>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5de:	f10a 0a01 	add.w	sl, sl, #1
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	9307      	str	r3, [sp, #28]
 800a5e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ec:	4654      	mov	r4, sl
 800a5ee:	2205      	movs	r2, #5
 800a5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f4:	484e      	ldr	r0, [pc, #312]	@ (800a730 <_svfiprintf_r+0x1e4>)
 800a5f6:	f7f5 fe1b 	bl	8000230 <memchr>
 800a5fa:	9a04      	ldr	r2, [sp, #16]
 800a5fc:	b9d8      	cbnz	r0, 800a636 <_svfiprintf_r+0xea>
 800a5fe:	06d0      	lsls	r0, r2, #27
 800a600:	bf44      	itt	mi
 800a602:	2320      	movmi	r3, #32
 800a604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a608:	0711      	lsls	r1, r2, #28
 800a60a:	bf44      	itt	mi
 800a60c:	232b      	movmi	r3, #43	@ 0x2b
 800a60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b2a      	cmp	r3, #42	@ 0x2a
 800a618:	d015      	beq.n	800a646 <_svfiprintf_r+0xfa>
 800a61a:	9a07      	ldr	r2, [sp, #28]
 800a61c:	4654      	mov	r4, sl
 800a61e:	2000      	movs	r0, #0
 800a620:	f04f 0c0a 	mov.w	ip, #10
 800a624:	4621      	mov	r1, r4
 800a626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a62a:	3b30      	subs	r3, #48	@ 0x30
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	d94b      	bls.n	800a6c8 <_svfiprintf_r+0x17c>
 800a630:	b1b0      	cbz	r0, 800a660 <_svfiprintf_r+0x114>
 800a632:	9207      	str	r2, [sp, #28]
 800a634:	e014      	b.n	800a660 <_svfiprintf_r+0x114>
 800a636:	eba0 0308 	sub.w	r3, r0, r8
 800a63a:	fa09 f303 	lsl.w	r3, r9, r3
 800a63e:	4313      	orrs	r3, r2
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	46a2      	mov	sl, r4
 800a644:	e7d2      	b.n	800a5ec <_svfiprintf_r+0xa0>
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	1d19      	adds	r1, r3, #4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	9103      	str	r1, [sp, #12]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	bfbb      	ittet	lt
 800a652:	425b      	neglt	r3, r3
 800a654:	f042 0202 	orrlt.w	r2, r2, #2
 800a658:	9307      	strge	r3, [sp, #28]
 800a65a:	9307      	strlt	r3, [sp, #28]
 800a65c:	bfb8      	it	lt
 800a65e:	9204      	strlt	r2, [sp, #16]
 800a660:	7823      	ldrb	r3, [r4, #0]
 800a662:	2b2e      	cmp	r3, #46	@ 0x2e
 800a664:	d10a      	bne.n	800a67c <_svfiprintf_r+0x130>
 800a666:	7863      	ldrb	r3, [r4, #1]
 800a668:	2b2a      	cmp	r3, #42	@ 0x2a
 800a66a:	d132      	bne.n	800a6d2 <_svfiprintf_r+0x186>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	9203      	str	r2, [sp, #12]
 800a674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a678:	3402      	adds	r4, #2
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a740 <_svfiprintf_r+0x1f4>
 800a680:	7821      	ldrb	r1, [r4, #0]
 800a682:	2203      	movs	r2, #3
 800a684:	4650      	mov	r0, sl
 800a686:	f7f5 fdd3 	bl	8000230 <memchr>
 800a68a:	b138      	cbz	r0, 800a69c <_svfiprintf_r+0x150>
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	eba0 000a 	sub.w	r0, r0, sl
 800a692:	2240      	movs	r2, #64	@ 0x40
 800a694:	4082      	lsls	r2, r0
 800a696:	4313      	orrs	r3, r2
 800a698:	3401      	adds	r4, #1
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a0:	4824      	ldr	r0, [pc, #144]	@ (800a734 <_svfiprintf_r+0x1e8>)
 800a6a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6a6:	2206      	movs	r2, #6
 800a6a8:	f7f5 fdc2 	bl	8000230 <memchr>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d036      	beq.n	800a71e <_svfiprintf_r+0x1d2>
 800a6b0:	4b21      	ldr	r3, [pc, #132]	@ (800a738 <_svfiprintf_r+0x1ec>)
 800a6b2:	bb1b      	cbnz	r3, 800a6fc <_svfiprintf_r+0x1b0>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	3307      	adds	r3, #7
 800a6b8:	f023 0307 	bic.w	r3, r3, #7
 800a6bc:	3308      	adds	r3, #8
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c2:	4433      	add	r3, r6
 800a6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c6:	e76a      	b.n	800a59e <_svfiprintf_r+0x52>
 800a6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7a8      	b.n	800a624 <_svfiprintf_r+0xd8>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	3401      	adds	r4, #1
 800a6d6:	9305      	str	r3, [sp, #20]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e4:	3a30      	subs	r2, #48	@ 0x30
 800a6e6:	2a09      	cmp	r2, #9
 800a6e8:	d903      	bls.n	800a6f2 <_svfiprintf_r+0x1a6>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0c6      	beq.n	800a67c <_svfiprintf_r+0x130>
 800a6ee:	9105      	str	r1, [sp, #20]
 800a6f0:	e7c4      	b.n	800a67c <_svfiprintf_r+0x130>
 800a6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e7f0      	b.n	800a6de <_svfiprintf_r+0x192>
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462a      	mov	r2, r5
 800a702:	4b0e      	ldr	r3, [pc, #56]	@ (800a73c <_svfiprintf_r+0x1f0>)
 800a704:	a904      	add	r1, sp, #16
 800a706:	4638      	mov	r0, r7
 800a708:	f7fc fcb6 	bl	8007078 <_printf_float>
 800a70c:	1c42      	adds	r2, r0, #1
 800a70e:	4606      	mov	r6, r0
 800a710:	d1d6      	bne.n	800a6c0 <_svfiprintf_r+0x174>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	065b      	lsls	r3, r3, #25
 800a716:	f53f af2d 	bmi.w	800a574 <_svfiprintf_r+0x28>
 800a71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a71c:	e72c      	b.n	800a578 <_svfiprintf_r+0x2c>
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	462a      	mov	r2, r5
 800a724:	4b05      	ldr	r3, [pc, #20]	@ (800a73c <_svfiprintf_r+0x1f0>)
 800a726:	a904      	add	r1, sp, #16
 800a728:	4638      	mov	r0, r7
 800a72a:	f7fc ff3d 	bl	80075a8 <_printf_i>
 800a72e:	e7ed      	b.n	800a70c <_svfiprintf_r+0x1c0>
 800a730:	0800bb49 	.word	0x0800bb49
 800a734:	0800bb53 	.word	0x0800bb53
 800a738:	08007079 	.word	0x08007079
 800a73c:	0800a495 	.word	0x0800a495
 800a740:	0800bb4f 	.word	0x0800bb4f

0800a744 <__sflush_r>:
 800a744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	0716      	lsls	r6, r2, #28
 800a74e:	4605      	mov	r5, r0
 800a750:	460c      	mov	r4, r1
 800a752:	d454      	bmi.n	800a7fe <__sflush_r+0xba>
 800a754:	684b      	ldr	r3, [r1, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	dc02      	bgt.n	800a760 <__sflush_r+0x1c>
 800a75a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd48      	ble.n	800a7f2 <__sflush_r+0xae>
 800a760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a762:	2e00      	cmp	r6, #0
 800a764:	d045      	beq.n	800a7f2 <__sflush_r+0xae>
 800a766:	2300      	movs	r3, #0
 800a768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a76c:	682f      	ldr	r7, [r5, #0]
 800a76e:	6a21      	ldr	r1, [r4, #32]
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	d030      	beq.n	800a7d6 <__sflush_r+0x92>
 800a774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	0759      	lsls	r1, r3, #29
 800a77a:	d505      	bpl.n	800a788 <__sflush_r+0x44>
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	1ad2      	subs	r2, r2, r3
 800a780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a782:	b10b      	cbz	r3, 800a788 <__sflush_r+0x44>
 800a784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	2300      	movs	r3, #0
 800a78a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	4628      	mov	r0, r5
 800a790:	47b0      	blx	r6
 800a792:	1c43      	adds	r3, r0, #1
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	d106      	bne.n	800a7a6 <__sflush_r+0x62>
 800a798:	6829      	ldr	r1, [r5, #0]
 800a79a:	291d      	cmp	r1, #29
 800a79c:	d82b      	bhi.n	800a7f6 <__sflush_r+0xb2>
 800a79e:	4a2a      	ldr	r2, [pc, #168]	@ (800a848 <__sflush_r+0x104>)
 800a7a0:	410a      	asrs	r2, r1
 800a7a2:	07d6      	lsls	r6, r2, #31
 800a7a4:	d427      	bmi.n	800a7f6 <__sflush_r+0xb2>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	6062      	str	r2, [r4, #4]
 800a7aa:	04d9      	lsls	r1, r3, #19
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	d504      	bpl.n	800a7bc <__sflush_r+0x78>
 800a7b2:	1c42      	adds	r2, r0, #1
 800a7b4:	d101      	bne.n	800a7ba <__sflush_r+0x76>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b903      	cbnz	r3, 800a7bc <__sflush_r+0x78>
 800a7ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7be:	602f      	str	r7, [r5, #0]
 800a7c0:	b1b9      	cbz	r1, 800a7f2 <__sflush_r+0xae>
 800a7c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d002      	beq.n	800a7d0 <__sflush_r+0x8c>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7fe fa2c 	bl	8008c28 <_free_r>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7d4:	e00d      	b.n	800a7f2 <__sflush_r+0xae>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b0      	blx	r6
 800a7dc:	4602      	mov	r2, r0
 800a7de:	1c50      	adds	r0, r2, #1
 800a7e0:	d1c9      	bne.n	800a776 <__sflush_r+0x32>
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0c6      	beq.n	800a776 <__sflush_r+0x32>
 800a7e8:	2b1d      	cmp	r3, #29
 800a7ea:	d001      	beq.n	800a7f0 <__sflush_r+0xac>
 800a7ec:	2b16      	cmp	r3, #22
 800a7ee:	d11e      	bne.n	800a82e <__sflush_r+0xea>
 800a7f0:	602f      	str	r7, [r5, #0]
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e022      	b.n	800a83c <__sflush_r+0xf8>
 800a7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	e01b      	b.n	800a836 <__sflush_r+0xf2>
 800a7fe:	690f      	ldr	r7, [r1, #16]
 800a800:	2f00      	cmp	r7, #0
 800a802:	d0f6      	beq.n	800a7f2 <__sflush_r+0xae>
 800a804:	0793      	lsls	r3, r2, #30
 800a806:	680e      	ldr	r6, [r1, #0]
 800a808:	bf08      	it	eq
 800a80a:	694b      	ldreq	r3, [r1, #20]
 800a80c:	600f      	str	r7, [r1, #0]
 800a80e:	bf18      	it	ne
 800a810:	2300      	movne	r3, #0
 800a812:	eba6 0807 	sub.w	r8, r6, r7
 800a816:	608b      	str	r3, [r1, #8]
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	dde9      	ble.n	800a7f2 <__sflush_r+0xae>
 800a81e:	6a21      	ldr	r1, [r4, #32]
 800a820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a822:	4643      	mov	r3, r8
 800a824:	463a      	mov	r2, r7
 800a826:	4628      	mov	r0, r5
 800a828:	47b0      	blx	r6
 800a82a:	2800      	cmp	r0, #0
 800a82c:	dc08      	bgt.n	800a840 <__sflush_r+0xfc>
 800a82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a840:	4407      	add	r7, r0
 800a842:	eba8 0800 	sub.w	r8, r8, r0
 800a846:	e7e7      	b.n	800a818 <__sflush_r+0xd4>
 800a848:	dfbffffe 	.word	0xdfbffffe

0800a84c <_fflush_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	690b      	ldr	r3, [r1, #16]
 800a850:	4605      	mov	r5, r0
 800a852:	460c      	mov	r4, r1
 800a854:	b913      	cbnz	r3, 800a85c <_fflush_r+0x10>
 800a856:	2500      	movs	r5, #0
 800a858:	4628      	mov	r0, r5
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	b118      	cbz	r0, 800a866 <_fflush_r+0x1a>
 800a85e:	6a03      	ldr	r3, [r0, #32]
 800a860:	b90b      	cbnz	r3, 800a866 <_fflush_r+0x1a>
 800a862:	f7fd fa61 	bl	8007d28 <__sinit>
 800a866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d0f3      	beq.n	800a856 <_fflush_r+0xa>
 800a86e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a870:	07d0      	lsls	r0, r2, #31
 800a872:	d404      	bmi.n	800a87e <_fflush_r+0x32>
 800a874:	0599      	lsls	r1, r3, #22
 800a876:	d402      	bmi.n	800a87e <_fflush_r+0x32>
 800a878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a87a:	f7fd fb7e 	bl	8007f7a <__retarget_lock_acquire_recursive>
 800a87e:	4628      	mov	r0, r5
 800a880:	4621      	mov	r1, r4
 800a882:	f7ff ff5f 	bl	800a744 <__sflush_r>
 800a886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a888:	07da      	lsls	r2, r3, #31
 800a88a:	4605      	mov	r5, r0
 800a88c:	d4e4      	bmi.n	800a858 <_fflush_r+0xc>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	059b      	lsls	r3, r3, #22
 800a892:	d4e1      	bmi.n	800a858 <_fflush_r+0xc>
 800a894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a896:	f7fd fb71 	bl	8007f7c <__retarget_lock_release_recursive>
 800a89a:	e7dd      	b.n	800a858 <_fflush_r+0xc>

0800a89c <memmove>:
 800a89c:	4288      	cmp	r0, r1
 800a89e:	b510      	push	{r4, lr}
 800a8a0:	eb01 0402 	add.w	r4, r1, r2
 800a8a4:	d902      	bls.n	800a8ac <memmove+0x10>
 800a8a6:	4284      	cmp	r4, r0
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	d807      	bhi.n	800a8bc <memmove+0x20>
 800a8ac:	1e43      	subs	r3, r0, #1
 800a8ae:	42a1      	cmp	r1, r4
 800a8b0:	d008      	beq.n	800a8c4 <memmove+0x28>
 800a8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ba:	e7f8      	b.n	800a8ae <memmove+0x12>
 800a8bc:	4402      	add	r2, r0
 800a8be:	4601      	mov	r1, r0
 800a8c0:	428a      	cmp	r2, r1
 800a8c2:	d100      	bne.n	800a8c6 <memmove+0x2a>
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ce:	e7f7      	b.n	800a8c0 <memmove+0x24>

0800a8d0 <strncmp>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	b16a      	cbz	r2, 800a8f0 <strncmp+0x20>
 800a8d4:	3901      	subs	r1, #1
 800a8d6:	1884      	adds	r4, r0, r2
 800a8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d103      	bne.n	800a8ec <strncmp+0x1c>
 800a8e4:	42a0      	cmp	r0, r4
 800a8e6:	d001      	beq.n	800a8ec <strncmp+0x1c>
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	d1f5      	bne.n	800a8d8 <strncmp+0x8>
 800a8ec:	1ad0      	subs	r0, r2, r3
 800a8ee:	bd10      	pop	{r4, pc}
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	e7fc      	b.n	800a8ee <strncmp+0x1e>

0800a8f4 <_sbrk_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	@ (800a910 <_sbrk_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fb5a 	bl	8002fb8 <_sbrk>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_sbrk_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_sbrk_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20000728 	.word	0x20000728

0800a914 <memcpy>:
 800a914:	440a      	add	r2, r1
 800a916:	4291      	cmp	r1, r2
 800a918:	f100 33ff 	add.w	r3, r0, #4294967295
 800a91c:	d100      	bne.n	800a920 <memcpy+0xc>
 800a91e:	4770      	bx	lr
 800a920:	b510      	push	{r4, lr}
 800a922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92a:	4291      	cmp	r1, r2
 800a92c:	d1f9      	bne.n	800a922 <memcpy+0xe>
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <nan>:
 800a930:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a938 <nan+0x8>
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	00000000 	.word	0x00000000
 800a93c:	7ff80000 	.word	0x7ff80000

0800a940 <__assert_func>:
 800a940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a942:	4614      	mov	r4, r2
 800a944:	461a      	mov	r2, r3
 800a946:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <__assert_func+0x2c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4605      	mov	r5, r0
 800a94c:	68d8      	ldr	r0, [r3, #12]
 800a94e:	b954      	cbnz	r4, 800a966 <__assert_func+0x26>
 800a950:	4b07      	ldr	r3, [pc, #28]	@ (800a970 <__assert_func+0x30>)
 800a952:	461c      	mov	r4, r3
 800a954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a958:	9100      	str	r1, [sp, #0]
 800a95a:	462b      	mov	r3, r5
 800a95c:	4905      	ldr	r1, [pc, #20]	@ (800a974 <__assert_func+0x34>)
 800a95e:	f000 fba7 	bl	800b0b0 <fiprintf>
 800a962:	f000 fbb7 	bl	800b0d4 <abort>
 800a966:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <__assert_func+0x38>)
 800a968:	e7f4      	b.n	800a954 <__assert_func+0x14>
 800a96a:	bf00      	nop
 800a96c:	2000019c 	.word	0x2000019c
 800a970:	0800bb9d 	.word	0x0800bb9d
 800a974:	0800bb6f 	.word	0x0800bb6f
 800a978:	0800bb62 	.word	0x0800bb62

0800a97c <_calloc_r>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	fba1 5402 	umull	r5, r4, r1, r2
 800a982:	b93c      	cbnz	r4, 800a994 <_calloc_r+0x18>
 800a984:	4629      	mov	r1, r5
 800a986:	f7fe f9c3 	bl	8008d10 <_malloc_r>
 800a98a:	4606      	mov	r6, r0
 800a98c:	b928      	cbnz	r0, 800a99a <_calloc_r+0x1e>
 800a98e:	2600      	movs	r6, #0
 800a990:	4630      	mov	r0, r6
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	220c      	movs	r2, #12
 800a996:	6002      	str	r2, [r0, #0]
 800a998:	e7f9      	b.n	800a98e <_calloc_r+0x12>
 800a99a:	462a      	mov	r2, r5
 800a99c:	4621      	mov	r1, r4
 800a99e:	f7fd fa5c 	bl	8007e5a <memset>
 800a9a2:	e7f5      	b.n	800a990 <_calloc_r+0x14>

0800a9a4 <rshift>:
 800a9a4:	6903      	ldr	r3, [r0, #16]
 800a9a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9b2:	f100 0414 	add.w	r4, r0, #20
 800a9b6:	dd45      	ble.n	800aa44 <rshift+0xa0>
 800a9b8:	f011 011f 	ands.w	r1, r1, #31
 800a9bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9c4:	d10c      	bne.n	800a9e0 <rshift+0x3c>
 800a9c6:	f100 0710 	add.w	r7, r0, #16
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	42b1      	cmp	r1, r6
 800a9ce:	d334      	bcc.n	800aa3a <rshift+0x96>
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	1eea      	subs	r2, r5, #3
 800a9d6:	4296      	cmp	r6, r2
 800a9d8:	bf38      	it	cc
 800a9da:	2300      	movcc	r3, #0
 800a9dc:	4423      	add	r3, r4
 800a9de:	e015      	b.n	800aa0c <rshift+0x68>
 800a9e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9e4:	f1c1 0820 	rsb	r8, r1, #32
 800a9e8:	40cf      	lsrs	r7, r1
 800a9ea:	f105 0e04 	add.w	lr, r5, #4
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	4576      	cmp	r6, lr
 800a9f2:	46f4      	mov	ip, lr
 800a9f4:	d815      	bhi.n	800aa22 <rshift+0x7e>
 800a9f6:	1a9a      	subs	r2, r3, r2
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	3a04      	subs	r2, #4
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	42ae      	cmp	r6, r5
 800aa00:	bf38      	it	cc
 800aa02:	2200      	movcc	r2, #0
 800aa04:	18a3      	adds	r3, r4, r2
 800aa06:	50a7      	str	r7, [r4, r2]
 800aa08:	b107      	cbz	r7, 800aa0c <rshift+0x68>
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	1b1a      	subs	r2, r3, r4
 800aa0e:	42a3      	cmp	r3, r4
 800aa10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa14:	bf08      	it	eq
 800aa16:	2300      	moveq	r3, #0
 800aa18:	6102      	str	r2, [r0, #16]
 800aa1a:	bf08      	it	eq
 800aa1c:	6143      	streq	r3, [r0, #20]
 800aa1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa22:	f8dc c000 	ldr.w	ip, [ip]
 800aa26:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa2a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa2e:	f849 7b04 	str.w	r7, [r9], #4
 800aa32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa36:	40cf      	lsrs	r7, r1
 800aa38:	e7da      	b.n	800a9f0 <rshift+0x4c>
 800aa3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa42:	e7c3      	b.n	800a9cc <rshift+0x28>
 800aa44:	4623      	mov	r3, r4
 800aa46:	e7e1      	b.n	800aa0c <rshift+0x68>

0800aa48 <__hexdig_fun>:
 800aa48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d802      	bhi.n	800aa56 <__hexdig_fun+0xe>
 800aa50:	3820      	subs	r0, #32
 800aa52:	b2c0      	uxtb	r0, r0
 800aa54:	4770      	bx	lr
 800aa56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	d801      	bhi.n	800aa62 <__hexdig_fun+0x1a>
 800aa5e:	3847      	subs	r0, #71	@ 0x47
 800aa60:	e7f7      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d801      	bhi.n	800aa6e <__hexdig_fun+0x26>
 800aa6a:	3827      	subs	r0, #39	@ 0x27
 800aa6c:	e7f1      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	4770      	bx	lr
	...

0800aa74 <__gethex>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	468a      	mov	sl, r1
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	680b      	ldr	r3, [r1, #0]
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	4690      	mov	r8, r2
 800aa84:	1c9c      	adds	r4, r3, #2
 800aa86:	46a1      	mov	r9, r4
 800aa88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa8c:	2830      	cmp	r0, #48	@ 0x30
 800aa8e:	d0fa      	beq.n	800aa86 <__gethex+0x12>
 800aa90:	eba9 0303 	sub.w	r3, r9, r3
 800aa94:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa98:	f7ff ffd6 	bl	800aa48 <__hexdig_fun>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d168      	bne.n	800ab74 <__gethex+0x100>
 800aaa2:	49a0      	ldr	r1, [pc, #640]	@ (800ad24 <__gethex+0x2b0>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	f7ff ff12 	bl	800a8d0 <strncmp>
 800aaac:	4607      	mov	r7, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d167      	bne.n	800ab82 <__gethex+0x10e>
 800aab2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aab6:	4626      	mov	r6, r4
 800aab8:	f7ff ffc6 	bl	800aa48 <__hexdig_fun>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d062      	beq.n	800ab86 <__gethex+0x112>
 800aac0:	4623      	mov	r3, r4
 800aac2:	7818      	ldrb	r0, [r3, #0]
 800aac4:	2830      	cmp	r0, #48	@ 0x30
 800aac6:	4699      	mov	r9, r3
 800aac8:	f103 0301 	add.w	r3, r3, #1
 800aacc:	d0f9      	beq.n	800aac2 <__gethex+0x4e>
 800aace:	f7ff ffbb 	bl	800aa48 <__hexdig_fun>
 800aad2:	fab0 f580 	clz	r5, r0
 800aad6:	096d      	lsrs	r5, r5, #5
 800aad8:	f04f 0b01 	mov.w	fp, #1
 800aadc:	464a      	mov	r2, r9
 800aade:	4616      	mov	r6, r2
 800aae0:	3201      	adds	r2, #1
 800aae2:	7830      	ldrb	r0, [r6, #0]
 800aae4:	f7ff ffb0 	bl	800aa48 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1f8      	bne.n	800aade <__gethex+0x6a>
 800aaec:	498d      	ldr	r1, [pc, #564]	@ (800ad24 <__gethex+0x2b0>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f7ff feed 	bl	800a8d0 <strncmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d13f      	bne.n	800ab7a <__gethex+0x106>
 800aafa:	b944      	cbnz	r4, 800ab0e <__gethex+0x9a>
 800aafc:	1c74      	adds	r4, r6, #1
 800aafe:	4622      	mov	r2, r4
 800ab00:	4616      	mov	r6, r2
 800ab02:	3201      	adds	r2, #1
 800ab04:	7830      	ldrb	r0, [r6, #0]
 800ab06:	f7ff ff9f 	bl	800aa48 <__hexdig_fun>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1f8      	bne.n	800ab00 <__gethex+0x8c>
 800ab0e:	1ba4      	subs	r4, r4, r6
 800ab10:	00a7      	lsls	r7, r4, #2
 800ab12:	7833      	ldrb	r3, [r6, #0]
 800ab14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab18:	2b50      	cmp	r3, #80	@ 0x50
 800ab1a:	d13e      	bne.n	800ab9a <__gethex+0x126>
 800ab1c:	7873      	ldrb	r3, [r6, #1]
 800ab1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab20:	d033      	beq.n	800ab8a <__gethex+0x116>
 800ab22:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab24:	d034      	beq.n	800ab90 <__gethex+0x11c>
 800ab26:	1c71      	adds	r1, r6, #1
 800ab28:	2400      	movs	r4, #0
 800ab2a:	7808      	ldrb	r0, [r1, #0]
 800ab2c:	f7ff ff8c 	bl	800aa48 <__hexdig_fun>
 800ab30:	1e43      	subs	r3, r0, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b18      	cmp	r3, #24
 800ab36:	d830      	bhi.n	800ab9a <__gethex+0x126>
 800ab38:	f1a0 0210 	sub.w	r2, r0, #16
 800ab3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab40:	f7ff ff82 	bl	800aa48 <__hexdig_fun>
 800ab44:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab48:	fa5f fc8c 	uxtb.w	ip, ip
 800ab4c:	f1bc 0f18 	cmp.w	ip, #24
 800ab50:	f04f 030a 	mov.w	r3, #10
 800ab54:	d91e      	bls.n	800ab94 <__gethex+0x120>
 800ab56:	b104      	cbz	r4, 800ab5a <__gethex+0xe6>
 800ab58:	4252      	negs	r2, r2
 800ab5a:	4417      	add	r7, r2
 800ab5c:	f8ca 1000 	str.w	r1, [sl]
 800ab60:	b1ed      	cbz	r5, 800ab9e <__gethex+0x12a>
 800ab62:	f1bb 0f00 	cmp.w	fp, #0
 800ab66:	bf0c      	ite	eq
 800ab68:	2506      	moveq	r5, #6
 800ab6a:	2500      	movne	r5, #0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	b005      	add	sp, #20
 800ab70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab74:	2500      	movs	r5, #0
 800ab76:	462c      	mov	r4, r5
 800ab78:	e7b0      	b.n	800aadc <__gethex+0x68>
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d1c7      	bne.n	800ab0e <__gethex+0x9a>
 800ab7e:	4627      	mov	r7, r4
 800ab80:	e7c7      	b.n	800ab12 <__gethex+0x9e>
 800ab82:	464e      	mov	r6, r9
 800ab84:	462f      	mov	r7, r5
 800ab86:	2501      	movs	r5, #1
 800ab88:	e7c3      	b.n	800ab12 <__gethex+0x9e>
 800ab8a:	2400      	movs	r4, #0
 800ab8c:	1cb1      	adds	r1, r6, #2
 800ab8e:	e7cc      	b.n	800ab2a <__gethex+0xb6>
 800ab90:	2401      	movs	r4, #1
 800ab92:	e7fb      	b.n	800ab8c <__gethex+0x118>
 800ab94:	fb03 0002 	mla	r0, r3, r2, r0
 800ab98:	e7ce      	b.n	800ab38 <__gethex+0xc4>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	e7de      	b.n	800ab5c <__gethex+0xe8>
 800ab9e:	eba6 0309 	sub.w	r3, r6, r9
 800aba2:	3b01      	subs	r3, #1
 800aba4:	4629      	mov	r1, r5
 800aba6:	2b07      	cmp	r3, #7
 800aba8:	dc0a      	bgt.n	800abc0 <__gethex+0x14c>
 800abaa:	9801      	ldr	r0, [sp, #4]
 800abac:	f7fe f93c 	bl	8008e28 <_Balloc>
 800abb0:	4604      	mov	r4, r0
 800abb2:	b940      	cbnz	r0, 800abc6 <__gethex+0x152>
 800abb4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad28 <__gethex+0x2b4>)
 800abb6:	4602      	mov	r2, r0
 800abb8:	21e4      	movs	r1, #228	@ 0xe4
 800abba:	485c      	ldr	r0, [pc, #368]	@ (800ad2c <__gethex+0x2b8>)
 800abbc:	f7ff fec0 	bl	800a940 <__assert_func>
 800abc0:	3101      	adds	r1, #1
 800abc2:	105b      	asrs	r3, r3, #1
 800abc4:	e7ef      	b.n	800aba6 <__gethex+0x132>
 800abc6:	f100 0a14 	add.w	sl, r0, #20
 800abca:	2300      	movs	r3, #0
 800abcc:	4655      	mov	r5, sl
 800abce:	469b      	mov	fp, r3
 800abd0:	45b1      	cmp	r9, r6
 800abd2:	d337      	bcc.n	800ac44 <__gethex+0x1d0>
 800abd4:	f845 bb04 	str.w	fp, [r5], #4
 800abd8:	eba5 050a 	sub.w	r5, r5, sl
 800abdc:	10ad      	asrs	r5, r5, #2
 800abde:	6125      	str	r5, [r4, #16]
 800abe0:	4658      	mov	r0, fp
 800abe2:	f7fe fa13 	bl	800900c <__hi0bits>
 800abe6:	016d      	lsls	r5, r5, #5
 800abe8:	f8d8 6000 	ldr.w	r6, [r8]
 800abec:	1a2d      	subs	r5, r5, r0
 800abee:	42b5      	cmp	r5, r6
 800abf0:	dd54      	ble.n	800ac9c <__gethex+0x228>
 800abf2:	1bad      	subs	r5, r5, r6
 800abf4:	4629      	mov	r1, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7fe fda7 	bl	800974a <__any_on>
 800abfc:	4681      	mov	r9, r0
 800abfe:	b178      	cbz	r0, 800ac20 <__gethex+0x1ac>
 800ac00:	1e6b      	subs	r3, r5, #1
 800ac02:	1159      	asrs	r1, r3, #5
 800ac04:	f003 021f 	and.w	r2, r3, #31
 800ac08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac0c:	f04f 0901 	mov.w	r9, #1
 800ac10:	fa09 f202 	lsl.w	r2, r9, r2
 800ac14:	420a      	tst	r2, r1
 800ac16:	d003      	beq.n	800ac20 <__gethex+0x1ac>
 800ac18:	454b      	cmp	r3, r9
 800ac1a:	dc36      	bgt.n	800ac8a <__gethex+0x216>
 800ac1c:	f04f 0902 	mov.w	r9, #2
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff febe 	bl	800a9a4 <rshift>
 800ac28:	442f      	add	r7, r5
 800ac2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac2e:	42bb      	cmp	r3, r7
 800ac30:	da42      	bge.n	800acb8 <__gethex+0x244>
 800ac32:	9801      	ldr	r0, [sp, #4]
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fe f937 	bl	8008ea8 <_Bfree>
 800ac3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	25a3      	movs	r5, #163	@ 0xa3
 800ac42:	e793      	b.n	800ab6c <__gethex+0xf8>
 800ac44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac4a:	d012      	beq.n	800ac72 <__gethex+0x1fe>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d104      	bne.n	800ac5a <__gethex+0x1e6>
 800ac50:	f845 bb04 	str.w	fp, [r5], #4
 800ac54:	f04f 0b00 	mov.w	fp, #0
 800ac58:	465b      	mov	r3, fp
 800ac5a:	7830      	ldrb	r0, [r6, #0]
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	f7ff fef3 	bl	800aa48 <__hexdig_fun>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	f000 000f 	and.w	r0, r0, #15
 800ac68:	4098      	lsls	r0, r3
 800ac6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac6e:	3304      	adds	r3, #4
 800ac70:	e7ae      	b.n	800abd0 <__gethex+0x15c>
 800ac72:	45b1      	cmp	r9, r6
 800ac74:	d8ea      	bhi.n	800ac4c <__gethex+0x1d8>
 800ac76:	492b      	ldr	r1, [pc, #172]	@ (800ad24 <__gethex+0x2b0>)
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fe27 	bl	800a8d0 <strncmp>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1e1      	bne.n	800ac4c <__gethex+0x1d8>
 800ac88:	e7a2      	b.n	800abd0 <__gethex+0x15c>
 800ac8a:	1ea9      	subs	r1, r5, #2
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7fe fd5c 	bl	800974a <__any_on>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0c2      	beq.n	800ac1c <__gethex+0x1a8>
 800ac96:	f04f 0903 	mov.w	r9, #3
 800ac9a:	e7c1      	b.n	800ac20 <__gethex+0x1ac>
 800ac9c:	da09      	bge.n	800acb2 <__gethex+0x23e>
 800ac9e:	1b75      	subs	r5, r6, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	9801      	ldr	r0, [sp, #4]
 800aca4:	462a      	mov	r2, r5
 800aca6:	f7fe fb17 	bl	80092d8 <__lshift>
 800acaa:	1b7f      	subs	r7, r7, r5
 800acac:	4604      	mov	r4, r0
 800acae:	f100 0a14 	add.w	sl, r0, #20
 800acb2:	f04f 0900 	mov.w	r9, #0
 800acb6:	e7b8      	b.n	800ac2a <__gethex+0x1b6>
 800acb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acbc:	42bd      	cmp	r5, r7
 800acbe:	dd6f      	ble.n	800ada0 <__gethex+0x32c>
 800acc0:	1bed      	subs	r5, r5, r7
 800acc2:	42ae      	cmp	r6, r5
 800acc4:	dc34      	bgt.n	800ad30 <__gethex+0x2bc>
 800acc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d022      	beq.n	800ad14 <__gethex+0x2a0>
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d024      	beq.n	800ad1c <__gethex+0x2a8>
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d115      	bne.n	800ad02 <__gethex+0x28e>
 800acd6:	42ae      	cmp	r6, r5
 800acd8:	d113      	bne.n	800ad02 <__gethex+0x28e>
 800acda:	2e01      	cmp	r6, #1
 800acdc:	d10b      	bne.n	800acf6 <__gethex+0x282>
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	2301      	movs	r3, #1
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	f8ca 3000 	str.w	r3, [sl]
 800acee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf0:	2562      	movs	r5, #98	@ 0x62
 800acf2:	601c      	str	r4, [r3, #0]
 800acf4:	e73a      	b.n	800ab6c <__gethex+0xf8>
 800acf6:	1e71      	subs	r1, r6, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f7fe fd26 	bl	800974a <__any_on>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d1ed      	bne.n	800acde <__gethex+0x26a>
 800ad02:	9801      	ldr	r0, [sp, #4]
 800ad04:	4621      	mov	r1, r4
 800ad06:	f7fe f8cf 	bl	8008ea8 <_Bfree>
 800ad0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	2550      	movs	r5, #80	@ 0x50
 800ad12:	e72b      	b.n	800ab6c <__gethex+0xf8>
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f3      	bne.n	800ad02 <__gethex+0x28e>
 800ad1a:	e7e0      	b.n	800acde <__gethex+0x26a>
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1dd      	bne.n	800acde <__gethex+0x26a>
 800ad22:	e7ee      	b.n	800ad02 <__gethex+0x28e>
 800ad24:	0800b9f0 	.word	0x0800b9f0
 800ad28:	0800b889 	.word	0x0800b889
 800ad2c:	0800bb9e 	.word	0x0800bb9e
 800ad30:	1e6f      	subs	r7, r5, #1
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	d130      	bne.n	800ad9a <__gethex+0x326>
 800ad38:	b127      	cbz	r7, 800ad44 <__gethex+0x2d0>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7fe fd04 	bl	800974a <__any_on>
 800ad42:	4681      	mov	r9, r0
 800ad44:	117a      	asrs	r2, r7, #5
 800ad46:	2301      	movs	r3, #1
 800ad48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad4c:	f007 071f 	and.w	r7, r7, #31
 800ad50:	40bb      	lsls	r3, r7
 800ad52:	4213      	tst	r3, r2
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	bf18      	it	ne
 800ad5a:	f049 0902 	orrne.w	r9, r9, #2
 800ad5e:	f7ff fe21 	bl	800a9a4 <rshift>
 800ad62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad66:	1b76      	subs	r6, r6, r5
 800ad68:	2502      	movs	r5, #2
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d047      	beq.n	800ae00 <__gethex+0x38c>
 800ad70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d015      	beq.n	800ada4 <__gethex+0x330>
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d017      	beq.n	800adac <__gethex+0x338>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d109      	bne.n	800ad94 <__gethex+0x320>
 800ad80:	f019 0f02 	tst.w	r9, #2
 800ad84:	d006      	beq.n	800ad94 <__gethex+0x320>
 800ad86:	f8da 3000 	ldr.w	r3, [sl]
 800ad8a:	ea49 0903 	orr.w	r9, r9, r3
 800ad8e:	f019 0f01 	tst.w	r9, #1
 800ad92:	d10e      	bne.n	800adb2 <__gethex+0x33e>
 800ad94:	f045 0510 	orr.w	r5, r5, #16
 800ad98:	e032      	b.n	800ae00 <__gethex+0x38c>
 800ad9a:	f04f 0901 	mov.w	r9, #1
 800ad9e:	e7d1      	b.n	800ad44 <__gethex+0x2d0>
 800ada0:	2501      	movs	r5, #1
 800ada2:	e7e2      	b.n	800ad6a <__gethex+0x2f6>
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	f1c3 0301 	rsb	r3, r3, #1
 800adaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <__gethex+0x320>
 800adb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adb6:	f104 0314 	add.w	r3, r4, #20
 800adba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adc2:	f04f 0c00 	mov.w	ip, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800add0:	d01b      	beq.n	800ae0a <__gethex+0x396>
 800add2:	3201      	adds	r2, #1
 800add4:	6002      	str	r2, [r0, #0]
 800add6:	2d02      	cmp	r5, #2
 800add8:	f104 0314 	add.w	r3, r4, #20
 800addc:	d13c      	bne.n	800ae58 <__gethex+0x3e4>
 800adde:	f8d8 2000 	ldr.w	r2, [r8]
 800ade2:	3a01      	subs	r2, #1
 800ade4:	42b2      	cmp	r2, r6
 800ade6:	d109      	bne.n	800adfc <__gethex+0x388>
 800ade8:	1171      	asrs	r1, r6, #5
 800adea:	2201      	movs	r2, #1
 800adec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adf0:	f006 061f 	and.w	r6, r6, #31
 800adf4:	fa02 f606 	lsl.w	r6, r2, r6
 800adf8:	421e      	tst	r6, r3
 800adfa:	d13a      	bne.n	800ae72 <__gethex+0x3fe>
 800adfc:	f045 0520 	orr.w	r5, r5, #32
 800ae00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae02:	601c      	str	r4, [r3, #0]
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	601f      	str	r7, [r3, #0]
 800ae08:	e6b0      	b.n	800ab6c <__gethex+0xf8>
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae10:	d8d9      	bhi.n	800adc6 <__gethex+0x352>
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	459b      	cmp	fp, r3
 800ae16:	db17      	blt.n	800ae48 <__gethex+0x3d4>
 800ae18:	6861      	ldr	r1, [r4, #4]
 800ae1a:	9801      	ldr	r0, [sp, #4]
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f7fe f803 	bl	8008e28 <_Balloc>
 800ae22:	4681      	mov	r9, r0
 800ae24:	b918      	cbnz	r0, 800ae2e <__gethex+0x3ba>
 800ae26:	4b1a      	ldr	r3, [pc, #104]	@ (800ae90 <__gethex+0x41c>)
 800ae28:	4602      	mov	r2, r0
 800ae2a:	2184      	movs	r1, #132	@ 0x84
 800ae2c:	e6c5      	b.n	800abba <__gethex+0x146>
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	3202      	adds	r2, #2
 800ae32:	f104 010c 	add.w	r1, r4, #12
 800ae36:	0092      	lsls	r2, r2, #2
 800ae38:	300c      	adds	r0, #12
 800ae3a:	f7ff fd6b 	bl	800a914 <memcpy>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	9801      	ldr	r0, [sp, #4]
 800ae42:	f7fe f831 	bl	8008ea8 <_Bfree>
 800ae46:	464c      	mov	r4, r9
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae50:	6122      	str	r2, [r4, #16]
 800ae52:	2201      	movs	r2, #1
 800ae54:	615a      	str	r2, [r3, #20]
 800ae56:	e7be      	b.n	800add6 <__gethex+0x362>
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	455a      	cmp	r2, fp
 800ae5c:	dd0b      	ble.n	800ae76 <__gethex+0x402>
 800ae5e:	2101      	movs	r1, #1
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fd9f 	bl	800a9a4 <rshift>
 800ae66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae6a:	3701      	adds	r7, #1
 800ae6c:	42bb      	cmp	r3, r7
 800ae6e:	f6ff aee0 	blt.w	800ac32 <__gethex+0x1be>
 800ae72:	2501      	movs	r5, #1
 800ae74:	e7c2      	b.n	800adfc <__gethex+0x388>
 800ae76:	f016 061f 	ands.w	r6, r6, #31
 800ae7a:	d0fa      	beq.n	800ae72 <__gethex+0x3fe>
 800ae7c:	4453      	add	r3, sl
 800ae7e:	f1c6 0620 	rsb	r6, r6, #32
 800ae82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae86:	f7fe f8c1 	bl	800900c <__hi0bits>
 800ae8a:	42b0      	cmp	r0, r6
 800ae8c:	dbe7      	blt.n	800ae5e <__gethex+0x3ea>
 800ae8e:	e7f0      	b.n	800ae72 <__gethex+0x3fe>
 800ae90:	0800b889 	.word	0x0800b889

0800ae94 <L_shift>:
 800ae94:	f1c2 0208 	rsb	r2, r2, #8
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	f1c2 0620 	rsb	r6, r2, #32
 800aea0:	6843      	ldr	r3, [r0, #4]
 800aea2:	6804      	ldr	r4, [r0, #0]
 800aea4:	fa03 f506 	lsl.w	r5, r3, r6
 800aea8:	432c      	orrs	r4, r5
 800aeaa:	40d3      	lsrs	r3, r2
 800aeac:	6004      	str	r4, [r0, #0]
 800aeae:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeb2:	4288      	cmp	r0, r1
 800aeb4:	d3f4      	bcc.n	800aea0 <L_shift+0xc>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <__match>:
 800aeb8:	b530      	push	{r4, r5, lr}
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec2:	b914      	cbnz	r4, 800aeca <__match+0x12>
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	2001      	movs	r0, #1
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aece:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aed2:	2d19      	cmp	r5, #25
 800aed4:	bf98      	it	ls
 800aed6:	3220      	addls	r2, #32
 800aed8:	42a2      	cmp	r2, r4
 800aeda:	d0f0      	beq.n	800aebe <__match+0x6>
 800aedc:	2000      	movs	r0, #0
 800aede:	e7f3      	b.n	800aec8 <__match+0x10>

0800aee0 <__hexnan>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	680b      	ldr	r3, [r1, #0]
 800aee6:	6801      	ldr	r1, [r0, #0]
 800aee8:	115e      	asrs	r6, r3, #5
 800aeea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aeee:	f013 031f 	ands.w	r3, r3, #31
 800aef2:	b087      	sub	sp, #28
 800aef4:	bf18      	it	ne
 800aef6:	3604      	addne	r6, #4
 800aef8:	2500      	movs	r5, #0
 800aefa:	1f37      	subs	r7, r6, #4
 800aefc:	4682      	mov	sl, r0
 800aefe:	4690      	mov	r8, r2
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f846 5c04 	str.w	r5, [r6, #-4]
 800af06:	46b9      	mov	r9, r7
 800af08:	463c      	mov	r4, r7
 800af0a:	9502      	str	r5, [sp, #8]
 800af0c:	46ab      	mov	fp, r5
 800af0e:	784a      	ldrb	r2, [r1, #1]
 800af10:	1c4b      	adds	r3, r1, #1
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	b342      	cbz	r2, 800af68 <__hexnan+0x88>
 800af16:	4610      	mov	r0, r2
 800af18:	9105      	str	r1, [sp, #20]
 800af1a:	9204      	str	r2, [sp, #16]
 800af1c:	f7ff fd94 	bl	800aa48 <__hexdig_fun>
 800af20:	2800      	cmp	r0, #0
 800af22:	d151      	bne.n	800afc8 <__hexnan+0xe8>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	9905      	ldr	r1, [sp, #20]
 800af28:	2a20      	cmp	r2, #32
 800af2a:	d818      	bhi.n	800af5e <__hexnan+0x7e>
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	459b      	cmp	fp, r3
 800af30:	dd13      	ble.n	800af5a <__hexnan+0x7a>
 800af32:	454c      	cmp	r4, r9
 800af34:	d206      	bcs.n	800af44 <__hexnan+0x64>
 800af36:	2d07      	cmp	r5, #7
 800af38:	dc04      	bgt.n	800af44 <__hexnan+0x64>
 800af3a:	462a      	mov	r2, r5
 800af3c:	4649      	mov	r1, r9
 800af3e:	4620      	mov	r0, r4
 800af40:	f7ff ffa8 	bl	800ae94 <L_shift>
 800af44:	4544      	cmp	r4, r8
 800af46:	d952      	bls.n	800afee <__hexnan+0x10e>
 800af48:	2300      	movs	r3, #0
 800af4a:	f1a4 0904 	sub.w	r9, r4, #4
 800af4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af52:	f8cd b008 	str.w	fp, [sp, #8]
 800af56:	464c      	mov	r4, r9
 800af58:	461d      	mov	r5, r3
 800af5a:	9903      	ldr	r1, [sp, #12]
 800af5c:	e7d7      	b.n	800af0e <__hexnan+0x2e>
 800af5e:	2a29      	cmp	r2, #41	@ 0x29
 800af60:	d157      	bne.n	800b012 <__hexnan+0x132>
 800af62:	3102      	adds	r1, #2
 800af64:	f8ca 1000 	str.w	r1, [sl]
 800af68:	f1bb 0f00 	cmp.w	fp, #0
 800af6c:	d051      	beq.n	800b012 <__hexnan+0x132>
 800af6e:	454c      	cmp	r4, r9
 800af70:	d206      	bcs.n	800af80 <__hexnan+0xa0>
 800af72:	2d07      	cmp	r5, #7
 800af74:	dc04      	bgt.n	800af80 <__hexnan+0xa0>
 800af76:	462a      	mov	r2, r5
 800af78:	4649      	mov	r1, r9
 800af7a:	4620      	mov	r0, r4
 800af7c:	f7ff ff8a 	bl	800ae94 <L_shift>
 800af80:	4544      	cmp	r4, r8
 800af82:	d936      	bls.n	800aff2 <__hexnan+0x112>
 800af84:	f1a8 0204 	sub.w	r2, r8, #4
 800af88:	4623      	mov	r3, r4
 800af8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af92:	429f      	cmp	r7, r3
 800af94:	d2f9      	bcs.n	800af8a <__hexnan+0xaa>
 800af96:	1b3b      	subs	r3, r7, r4
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	3304      	adds	r3, #4
 800af9e:	3401      	adds	r4, #1
 800afa0:	3e03      	subs	r6, #3
 800afa2:	42b4      	cmp	r4, r6
 800afa4:	bf88      	it	hi
 800afa6:	2304      	movhi	r3, #4
 800afa8:	4443      	add	r3, r8
 800afaa:	2200      	movs	r2, #0
 800afac:	f843 2b04 	str.w	r2, [r3], #4
 800afb0:	429f      	cmp	r7, r3
 800afb2:	d2fb      	bcs.n	800afac <__hexnan+0xcc>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	b91b      	cbnz	r3, 800afc0 <__hexnan+0xe0>
 800afb8:	4547      	cmp	r7, r8
 800afba:	d128      	bne.n	800b00e <__hexnan+0x12e>
 800afbc:	2301      	movs	r3, #1
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	2005      	movs	r0, #5
 800afc2:	b007      	add	sp, #28
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc8:	3501      	adds	r5, #1
 800afca:	2d08      	cmp	r5, #8
 800afcc:	f10b 0b01 	add.w	fp, fp, #1
 800afd0:	dd06      	ble.n	800afe0 <__hexnan+0x100>
 800afd2:	4544      	cmp	r4, r8
 800afd4:	d9c1      	bls.n	800af5a <__hexnan+0x7a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800afdc:	2501      	movs	r5, #1
 800afde:	3c04      	subs	r4, #4
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	f000 000f 	and.w	r0, r0, #15
 800afe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	e7b5      	b.n	800af5a <__hexnan+0x7a>
 800afee:	2508      	movs	r5, #8
 800aff0:	e7b3      	b.n	800af5a <__hexnan+0x7a>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0dd      	beq.n	800afb4 <__hexnan+0xd4>
 800aff8:	f1c3 0320 	rsb	r3, r3, #32
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	40da      	lsrs	r2, r3
 800b002:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b006:	4013      	ands	r3, r2
 800b008:	f846 3c04 	str.w	r3, [r6, #-4]
 800b00c:	e7d2      	b.n	800afb4 <__hexnan+0xd4>
 800b00e:	3f04      	subs	r7, #4
 800b010:	e7d0      	b.n	800afb4 <__hexnan+0xd4>
 800b012:	2004      	movs	r0, #4
 800b014:	e7d5      	b.n	800afc2 <__hexnan+0xe2>

0800b016 <__ascii_mbtowc>:
 800b016:	b082      	sub	sp, #8
 800b018:	b901      	cbnz	r1, 800b01c <__ascii_mbtowc+0x6>
 800b01a:	a901      	add	r1, sp, #4
 800b01c:	b142      	cbz	r2, 800b030 <__ascii_mbtowc+0x1a>
 800b01e:	b14b      	cbz	r3, 800b034 <__ascii_mbtowc+0x1e>
 800b020:	7813      	ldrb	r3, [r2, #0]
 800b022:	600b      	str	r3, [r1, #0]
 800b024:	7812      	ldrb	r2, [r2, #0]
 800b026:	1e10      	subs	r0, r2, #0
 800b028:	bf18      	it	ne
 800b02a:	2001      	movne	r0, #1
 800b02c:	b002      	add	sp, #8
 800b02e:	4770      	bx	lr
 800b030:	4610      	mov	r0, r2
 800b032:	e7fb      	b.n	800b02c <__ascii_mbtowc+0x16>
 800b034:	f06f 0001 	mvn.w	r0, #1
 800b038:	e7f8      	b.n	800b02c <__ascii_mbtowc+0x16>

0800b03a <_realloc_r>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	4680      	mov	r8, r0
 800b040:	4615      	mov	r5, r2
 800b042:	460c      	mov	r4, r1
 800b044:	b921      	cbnz	r1, 800b050 <_realloc_r+0x16>
 800b046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b04a:	4611      	mov	r1, r2
 800b04c:	f7fd be60 	b.w	8008d10 <_malloc_r>
 800b050:	b92a      	cbnz	r2, 800b05e <_realloc_r+0x24>
 800b052:	f7fd fde9 	bl	8008c28 <_free_r>
 800b056:	2400      	movs	r4, #0
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05e:	f000 f840 	bl	800b0e2 <_malloc_usable_size_r>
 800b062:	4285      	cmp	r5, r0
 800b064:	4606      	mov	r6, r0
 800b066:	d802      	bhi.n	800b06e <_realloc_r+0x34>
 800b068:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b06c:	d8f4      	bhi.n	800b058 <_realloc_r+0x1e>
 800b06e:	4629      	mov	r1, r5
 800b070:	4640      	mov	r0, r8
 800b072:	f7fd fe4d 	bl	8008d10 <_malloc_r>
 800b076:	4607      	mov	r7, r0
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0ec      	beq.n	800b056 <_realloc_r+0x1c>
 800b07c:	42b5      	cmp	r5, r6
 800b07e:	462a      	mov	r2, r5
 800b080:	4621      	mov	r1, r4
 800b082:	bf28      	it	cs
 800b084:	4632      	movcs	r2, r6
 800b086:	f7ff fc45 	bl	800a914 <memcpy>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4640      	mov	r0, r8
 800b08e:	f7fd fdcb 	bl	8008c28 <_free_r>
 800b092:	463c      	mov	r4, r7
 800b094:	e7e0      	b.n	800b058 <_realloc_r+0x1e>

0800b096 <__ascii_wctomb>:
 800b096:	4603      	mov	r3, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	b141      	cbz	r1, 800b0ae <__ascii_wctomb+0x18>
 800b09c:	2aff      	cmp	r2, #255	@ 0xff
 800b09e:	d904      	bls.n	800b0aa <__ascii_wctomb+0x14>
 800b0a0:	228a      	movs	r2, #138	@ 0x8a
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	4770      	bx	lr
 800b0aa:	700a      	strb	r2, [r1, #0]
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	4770      	bx	lr

0800b0b0 <fiprintf>:
 800b0b0:	b40e      	push	{r1, r2, r3}
 800b0b2:	b503      	push	{r0, r1, lr}
 800b0b4:	4601      	mov	r1, r0
 800b0b6:	ab03      	add	r3, sp, #12
 800b0b8:	4805      	ldr	r0, [pc, #20]	@ (800b0d0 <fiprintf+0x20>)
 800b0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0be:	6800      	ldr	r0, [r0, #0]
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	f000 f83f 	bl	800b144 <_vfiprintf_r>
 800b0c6:	b002      	add	sp, #8
 800b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0cc:	b003      	add	sp, #12
 800b0ce:	4770      	bx	lr
 800b0d0:	2000019c 	.word	0x2000019c

0800b0d4 <abort>:
 800b0d4:	b508      	push	{r3, lr}
 800b0d6:	2006      	movs	r0, #6
 800b0d8:	f000 fa08 	bl	800b4ec <raise>
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f7f7 fef3 	bl	8002ec8 <_exit>

0800b0e2 <_malloc_usable_size_r>:
 800b0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e6:	1f18      	subs	r0, r3, #4
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bfbc      	itt	lt
 800b0ec:	580b      	ldrlt	r3, [r1, r0]
 800b0ee:	18c0      	addlt	r0, r0, r3
 800b0f0:	4770      	bx	lr

0800b0f2 <__sfputc_r>:
 800b0f2:	6893      	ldr	r3, [r2, #8]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	b410      	push	{r4}
 800b0fa:	6093      	str	r3, [r2, #8]
 800b0fc:	da08      	bge.n	800b110 <__sfputc_r+0x1e>
 800b0fe:	6994      	ldr	r4, [r2, #24]
 800b100:	42a3      	cmp	r3, r4
 800b102:	db01      	blt.n	800b108 <__sfputc_r+0x16>
 800b104:	290a      	cmp	r1, #10
 800b106:	d103      	bne.n	800b110 <__sfputc_r+0x1e>
 800b108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10c:	f000 b932 	b.w	800b374 <__swbuf_r>
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	1c58      	adds	r0, r3, #1
 800b114:	6010      	str	r0, [r2, #0]
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	4608      	mov	r0, r1
 800b11a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <__sfputs_r>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	4614      	mov	r4, r2
 800b128:	18d5      	adds	r5, r2, r3
 800b12a:	42ac      	cmp	r4, r5
 800b12c:	d101      	bne.n	800b132 <__sfputs_r+0x12>
 800b12e:	2000      	movs	r0, #0
 800b130:	e007      	b.n	800b142 <__sfputs_r+0x22>
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	463a      	mov	r2, r7
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff ffda 	bl	800b0f2 <__sfputc_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	d1f3      	bne.n	800b12a <__sfputs_r+0xa>
 800b142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b144 <_vfiprintf_r>:
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	b09d      	sub	sp, #116	@ 0x74
 800b14c:	4614      	mov	r4, r2
 800b14e:	4698      	mov	r8, r3
 800b150:	4606      	mov	r6, r0
 800b152:	b118      	cbz	r0, 800b15c <_vfiprintf_r+0x18>
 800b154:	6a03      	ldr	r3, [r0, #32]
 800b156:	b90b      	cbnz	r3, 800b15c <_vfiprintf_r+0x18>
 800b158:	f7fc fde6 	bl	8007d28 <__sinit>
 800b15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d405      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	059a      	lsls	r2, r3, #22
 800b166:	d402      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7fc ff06 	bl	8007f7a <__retarget_lock_acquire_recursive>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	071b      	lsls	r3, r3, #28
 800b172:	d501      	bpl.n	800b178 <_vfiprintf_r+0x34>
 800b174:	692b      	ldr	r3, [r5, #16]
 800b176:	b99b      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x5c>
 800b178:	4629      	mov	r1, r5
 800b17a:	4630      	mov	r0, r6
 800b17c:	f000 f938 	bl	800b3f0 <__swsetup_r>
 800b180:	b170      	cbz	r0, 800b1a0 <_vfiprintf_r+0x5c>
 800b182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b184:	07dc      	lsls	r4, r3, #31
 800b186:	d504      	bpl.n	800b192 <_vfiprintf_r+0x4e>
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	b01d      	add	sp, #116	@ 0x74
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	0598      	lsls	r0, r3, #22
 800b196:	d4f7      	bmi.n	800b188 <_vfiprintf_r+0x44>
 800b198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b19a:	f7fc feef 	bl	8007f7c <__retarget_lock_release_recursive>
 800b19e:	e7f3      	b.n	800b188 <_vfiprintf_r+0x44>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a4:	2320      	movs	r3, #32
 800b1a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ae:	2330      	movs	r3, #48	@ 0x30
 800b1b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b360 <_vfiprintf_r+0x21c>
 800b1b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1b8:	f04f 0901 	mov.w	r9, #1
 800b1bc:	4623      	mov	r3, r4
 800b1be:	469a      	mov	sl, r3
 800b1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c4:	b10a      	cbz	r2, 800b1ca <_vfiprintf_r+0x86>
 800b1c6:	2a25      	cmp	r2, #37	@ 0x25
 800b1c8:	d1f9      	bne.n	800b1be <_vfiprintf_r+0x7a>
 800b1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ce:	d00b      	beq.n	800b1e8 <_vfiprintf_r+0xa4>
 800b1d0:	465b      	mov	r3, fp
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ffa2 	bl	800b120 <__sfputs_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f000 80a7 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e4:	445a      	add	r2, fp
 800b1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 809f 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fc:	f10a 0a01 	add.w	sl, sl, #1
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	9307      	str	r3, [sp, #28]
 800b204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b208:	931a      	str	r3, [sp, #104]	@ 0x68
 800b20a:	4654      	mov	r4, sl
 800b20c:	2205      	movs	r2, #5
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	4853      	ldr	r0, [pc, #332]	@ (800b360 <_vfiprintf_r+0x21c>)
 800b214:	f7f5 f80c 	bl	8000230 <memchr>
 800b218:	9a04      	ldr	r2, [sp, #16]
 800b21a:	b9d8      	cbnz	r0, 800b254 <_vfiprintf_r+0x110>
 800b21c:	06d1      	lsls	r1, r2, #27
 800b21e:	bf44      	itt	mi
 800b220:	2320      	movmi	r3, #32
 800b222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b226:	0713      	lsls	r3, r2, #28
 800b228:	bf44      	itt	mi
 800b22a:	232b      	movmi	r3, #43	@ 0x2b
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b2a      	cmp	r3, #42	@ 0x2a
 800b236:	d015      	beq.n	800b264 <_vfiprintf_r+0x120>
 800b238:	9a07      	ldr	r2, [sp, #28]
 800b23a:	4654      	mov	r4, sl
 800b23c:	2000      	movs	r0, #0
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4621      	mov	r1, r4
 800b244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b248:	3b30      	subs	r3, #48	@ 0x30
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d94b      	bls.n	800b2e6 <_vfiprintf_r+0x1a2>
 800b24e:	b1b0      	cbz	r0, 800b27e <_vfiprintf_r+0x13a>
 800b250:	9207      	str	r2, [sp, #28]
 800b252:	e014      	b.n	800b27e <_vfiprintf_r+0x13a>
 800b254:	eba0 0308 	sub.w	r3, r0, r8
 800b258:	fa09 f303 	lsl.w	r3, r9, r3
 800b25c:	4313      	orrs	r3, r2
 800b25e:	9304      	str	r3, [sp, #16]
 800b260:	46a2      	mov	sl, r4
 800b262:	e7d2      	b.n	800b20a <_vfiprintf_r+0xc6>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	1d19      	adds	r1, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	9103      	str	r1, [sp, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbb      	ittet	lt
 800b270:	425b      	neglt	r3, r3
 800b272:	f042 0202 	orrlt.w	r2, r2, #2
 800b276:	9307      	strge	r3, [sp, #28]
 800b278:	9307      	strlt	r3, [sp, #28]
 800b27a:	bfb8      	it	lt
 800b27c:	9204      	strlt	r2, [sp, #16]
 800b27e:	7823      	ldrb	r3, [r4, #0]
 800b280:	2b2e      	cmp	r3, #46	@ 0x2e
 800b282:	d10a      	bne.n	800b29a <_vfiprintf_r+0x156>
 800b284:	7863      	ldrb	r3, [r4, #1]
 800b286:	2b2a      	cmp	r3, #42	@ 0x2a
 800b288:	d132      	bne.n	800b2f0 <_vfiprintf_r+0x1ac>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	9203      	str	r2, [sp, #12]
 800b292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b296:	3402      	adds	r4, #2
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b370 <_vfiprintf_r+0x22c>
 800b29e:	7821      	ldrb	r1, [r4, #0]
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	f7f4 ffc4 	bl	8000230 <memchr>
 800b2a8:	b138      	cbz	r0, 800b2ba <_vfiprintf_r+0x176>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	eba0 000a 	sub.w	r0, r0, sl
 800b2b0:	2240      	movs	r2, #64	@ 0x40
 800b2b2:	4082      	lsls	r2, r0
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	3401      	adds	r4, #1
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4829      	ldr	r0, [pc, #164]	@ (800b364 <_vfiprintf_r+0x220>)
 800b2c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2c4:	2206      	movs	r2, #6
 800b2c6:	f7f4 ffb3 	bl	8000230 <memchr>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d03f      	beq.n	800b34e <_vfiprintf_r+0x20a>
 800b2ce:	4b26      	ldr	r3, [pc, #152]	@ (800b368 <_vfiprintf_r+0x224>)
 800b2d0:	bb1b      	cbnz	r3, 800b31a <_vfiprintf_r+0x1d6>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	3308      	adds	r3, #8
 800b2dc:	9303      	str	r3, [sp, #12]
 800b2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e0:	443b      	add	r3, r7
 800b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e4:	e76a      	b.n	800b1bc <_vfiprintf_r+0x78>
 800b2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	e7a8      	b.n	800b242 <_vfiprintf_r+0xfe>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f04f 0c0a 	mov.w	ip, #10
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b302:	3a30      	subs	r2, #48	@ 0x30
 800b304:	2a09      	cmp	r2, #9
 800b306:	d903      	bls.n	800b310 <_vfiprintf_r+0x1cc>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0c6      	beq.n	800b29a <_vfiprintf_r+0x156>
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	e7c4      	b.n	800b29a <_vfiprintf_r+0x156>
 800b310:	fb0c 2101 	mla	r1, ip, r1, r2
 800b314:	4604      	mov	r4, r0
 800b316:	2301      	movs	r3, #1
 800b318:	e7f0      	b.n	800b2fc <_vfiprintf_r+0x1b8>
 800b31a:	ab03      	add	r3, sp, #12
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	462a      	mov	r2, r5
 800b320:	4b12      	ldr	r3, [pc, #72]	@ (800b36c <_vfiprintf_r+0x228>)
 800b322:	a904      	add	r1, sp, #16
 800b324:	4630      	mov	r0, r6
 800b326:	f7fb fea7 	bl	8007078 <_printf_float>
 800b32a:	4607      	mov	r7, r0
 800b32c:	1c78      	adds	r0, r7, #1
 800b32e:	d1d6      	bne.n	800b2de <_vfiprintf_r+0x19a>
 800b330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b332:	07d9      	lsls	r1, r3, #31
 800b334:	d405      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	059a      	lsls	r2, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b33e:	f7fc fe1d 	bl	8007f7c <__retarget_lock_release_recursive>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	065b      	lsls	r3, r3, #25
 800b346:	f53f af1f 	bmi.w	800b188 <_vfiprintf_r+0x44>
 800b34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b34c:	e71e      	b.n	800b18c <_vfiprintf_r+0x48>
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	462a      	mov	r2, r5
 800b354:	4b05      	ldr	r3, [pc, #20]	@ (800b36c <_vfiprintf_r+0x228>)
 800b356:	a904      	add	r1, sp, #16
 800b358:	4630      	mov	r0, r6
 800b35a:	f7fc f925 	bl	80075a8 <_printf_i>
 800b35e:	e7e4      	b.n	800b32a <_vfiprintf_r+0x1e6>
 800b360:	0800bb49 	.word	0x0800bb49
 800b364:	0800bb53 	.word	0x0800bb53
 800b368:	08007079 	.word	0x08007079
 800b36c:	0800b121 	.word	0x0800b121
 800b370:	0800bb4f 	.word	0x0800bb4f

0800b374 <__swbuf_r>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	460e      	mov	r6, r1
 800b378:	4614      	mov	r4, r2
 800b37a:	4605      	mov	r5, r0
 800b37c:	b118      	cbz	r0, 800b386 <__swbuf_r+0x12>
 800b37e:	6a03      	ldr	r3, [r0, #32]
 800b380:	b90b      	cbnz	r3, 800b386 <__swbuf_r+0x12>
 800b382:	f7fc fcd1 	bl	8007d28 <__sinit>
 800b386:	69a3      	ldr	r3, [r4, #24]
 800b388:	60a3      	str	r3, [r4, #8]
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	071a      	lsls	r2, r3, #28
 800b38e:	d501      	bpl.n	800b394 <__swbuf_r+0x20>
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	b943      	cbnz	r3, 800b3a6 <__swbuf_r+0x32>
 800b394:	4621      	mov	r1, r4
 800b396:	4628      	mov	r0, r5
 800b398:	f000 f82a 	bl	800b3f0 <__swsetup_r>
 800b39c:	b118      	cbz	r0, 800b3a6 <__swbuf_r+0x32>
 800b39e:	f04f 37ff 	mov.w	r7, #4294967295
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	6922      	ldr	r2, [r4, #16]
 800b3aa:	1a98      	subs	r0, r3, r2
 800b3ac:	6963      	ldr	r3, [r4, #20]
 800b3ae:	b2f6      	uxtb	r6, r6
 800b3b0:	4283      	cmp	r3, r0
 800b3b2:	4637      	mov	r7, r6
 800b3b4:	dc05      	bgt.n	800b3c2 <__swbuf_r+0x4e>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f7ff fa47 	bl	800a84c <_fflush_r>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d1ed      	bne.n	800b39e <__swbuf_r+0x2a>
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	60a3      	str	r3, [r4, #8]
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	6022      	str	r2, [r4, #0]
 800b3ce:	701e      	strb	r6, [r3, #0]
 800b3d0:	6962      	ldr	r2, [r4, #20]
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d004      	beq.n	800b3e2 <__swbuf_r+0x6e>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	07db      	lsls	r3, r3, #31
 800b3dc:	d5e1      	bpl.n	800b3a2 <__swbuf_r+0x2e>
 800b3de:	2e0a      	cmp	r6, #10
 800b3e0:	d1df      	bne.n	800b3a2 <__swbuf_r+0x2e>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7ff fa31 	bl	800a84c <_fflush_r>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0d9      	beq.n	800b3a2 <__swbuf_r+0x2e>
 800b3ee:	e7d6      	b.n	800b39e <__swbuf_r+0x2a>

0800b3f0 <__swsetup_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4b29      	ldr	r3, [pc, #164]	@ (800b498 <__swsetup_r+0xa8>)
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	b118      	cbz	r0, 800b404 <__swsetup_r+0x14>
 800b3fc:	6a03      	ldr	r3, [r0, #32]
 800b3fe:	b90b      	cbnz	r3, 800b404 <__swsetup_r+0x14>
 800b400:	f7fc fc92 	bl	8007d28 <__sinit>
 800b404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b408:	0719      	lsls	r1, r3, #28
 800b40a:	d422      	bmi.n	800b452 <__swsetup_r+0x62>
 800b40c:	06da      	lsls	r2, r3, #27
 800b40e:	d407      	bmi.n	800b420 <__swsetup_r+0x30>
 800b410:	2209      	movs	r2, #9
 800b412:	602a      	str	r2, [r5, #0]
 800b414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	e033      	b.n	800b488 <__swsetup_r+0x98>
 800b420:	0758      	lsls	r0, r3, #29
 800b422:	d512      	bpl.n	800b44a <__swsetup_r+0x5a>
 800b424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b426:	b141      	cbz	r1, 800b43a <__swsetup_r+0x4a>
 800b428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b42c:	4299      	cmp	r1, r3
 800b42e:	d002      	beq.n	800b436 <__swsetup_r+0x46>
 800b430:	4628      	mov	r0, r5
 800b432:	f7fd fbf9 	bl	8008c28 <_free_r>
 800b436:	2300      	movs	r3, #0
 800b438:	6363      	str	r3, [r4, #52]	@ 0x34
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	2300      	movs	r3, #0
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0308 	orr.w	r3, r3, #8
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	b94b      	cbnz	r3, 800b46a <__swsetup_r+0x7a>
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b460:	d003      	beq.n	800b46a <__swsetup_r+0x7a>
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	f000 f883 	bl	800b570 <__smakebuf_r>
 800b46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46e:	f013 0201 	ands.w	r2, r3, #1
 800b472:	d00a      	beq.n	800b48a <__swsetup_r+0x9a>
 800b474:	2200      	movs	r2, #0
 800b476:	60a2      	str	r2, [r4, #8]
 800b478:	6962      	ldr	r2, [r4, #20]
 800b47a:	4252      	negs	r2, r2
 800b47c:	61a2      	str	r2, [r4, #24]
 800b47e:	6922      	ldr	r2, [r4, #16]
 800b480:	b942      	cbnz	r2, 800b494 <__swsetup_r+0xa4>
 800b482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b486:	d1c5      	bne.n	800b414 <__swsetup_r+0x24>
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	0799      	lsls	r1, r3, #30
 800b48c:	bf58      	it	pl
 800b48e:	6962      	ldrpl	r2, [r4, #20]
 800b490:	60a2      	str	r2, [r4, #8]
 800b492:	e7f4      	b.n	800b47e <__swsetup_r+0x8e>
 800b494:	2000      	movs	r0, #0
 800b496:	e7f7      	b.n	800b488 <__swsetup_r+0x98>
 800b498:	2000019c 	.word	0x2000019c

0800b49c <_raise_r>:
 800b49c:	291f      	cmp	r1, #31
 800b49e:	b538      	push	{r3, r4, r5, lr}
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	d904      	bls.n	800b4b0 <_raise_r+0x14>
 800b4a6:	2316      	movs	r3, #22
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4b2:	b112      	cbz	r2, 800b4ba <_raise_r+0x1e>
 800b4b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4b8:	b94b      	cbnz	r3, 800b4ce <_raise_r+0x32>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 f830 	bl	800b520 <_getpid_r>
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4ca:	f000 b817 	b.w	800b4fc <_kill_r>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d00a      	beq.n	800b4e8 <_raise_r+0x4c>
 800b4d2:	1c59      	adds	r1, r3, #1
 800b4d4:	d103      	bne.n	800b4de <_raise_r+0x42>
 800b4d6:	2316      	movs	r3, #22
 800b4d8:	6003      	str	r3, [r0, #0]
 800b4da:	2001      	movs	r0, #1
 800b4dc:	e7e7      	b.n	800b4ae <_raise_r+0x12>
 800b4de:	2100      	movs	r1, #0
 800b4e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4798      	blx	r3
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e7e0      	b.n	800b4ae <_raise_r+0x12>

0800b4ec <raise>:
 800b4ec:	4b02      	ldr	r3, [pc, #8]	@ (800b4f8 <raise+0xc>)
 800b4ee:	4601      	mov	r1, r0
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	f7ff bfd3 	b.w	800b49c <_raise_r>
 800b4f6:	bf00      	nop
 800b4f8:	2000019c 	.word	0x2000019c

0800b4fc <_kill_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d07      	ldr	r5, [pc, #28]	@ (800b51c <_kill_r+0x20>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	4611      	mov	r1, r2
 800b508:	602b      	str	r3, [r5, #0]
 800b50a:	f7f7 fccd 	bl	8002ea8 <_kill>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d102      	bne.n	800b518 <_kill_r+0x1c>
 800b512:	682b      	ldr	r3, [r5, #0]
 800b514:	b103      	cbz	r3, 800b518 <_kill_r+0x1c>
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	bd38      	pop	{r3, r4, r5, pc}
 800b51a:	bf00      	nop
 800b51c:	20000728 	.word	0x20000728

0800b520 <_getpid_r>:
 800b520:	f7f7 bcba 	b.w	8002e98 <_getpid>

0800b524 <__swhatbuf_r>:
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	460c      	mov	r4, r1
 800b528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52c:	2900      	cmp	r1, #0
 800b52e:	b096      	sub	sp, #88	@ 0x58
 800b530:	4615      	mov	r5, r2
 800b532:	461e      	mov	r6, r3
 800b534:	da0d      	bge.n	800b552 <__swhatbuf_r+0x2e>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b53c:	f04f 0100 	mov.w	r1, #0
 800b540:	bf14      	ite	ne
 800b542:	2340      	movne	r3, #64	@ 0x40
 800b544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b548:	2000      	movs	r0, #0
 800b54a:	6031      	str	r1, [r6, #0]
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	b016      	add	sp, #88	@ 0x58
 800b550:	bd70      	pop	{r4, r5, r6, pc}
 800b552:	466a      	mov	r2, sp
 800b554:	f000 f848 	bl	800b5e8 <_fstat_r>
 800b558:	2800      	cmp	r0, #0
 800b55a:	dbec      	blt.n	800b536 <__swhatbuf_r+0x12>
 800b55c:	9901      	ldr	r1, [sp, #4]
 800b55e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b566:	4259      	negs	r1, r3
 800b568:	4159      	adcs	r1, r3
 800b56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b56e:	e7eb      	b.n	800b548 <__swhatbuf_r+0x24>

0800b570 <__smakebuf_r>:
 800b570:	898b      	ldrh	r3, [r1, #12]
 800b572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b574:	079d      	lsls	r5, r3, #30
 800b576:	4606      	mov	r6, r0
 800b578:	460c      	mov	r4, r1
 800b57a:	d507      	bpl.n	800b58c <__smakebuf_r+0x1c>
 800b57c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	6123      	str	r3, [r4, #16]
 800b584:	2301      	movs	r3, #1
 800b586:	6163      	str	r3, [r4, #20]
 800b588:	b003      	add	sp, #12
 800b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b58c:	ab01      	add	r3, sp, #4
 800b58e:	466a      	mov	r2, sp
 800b590:	f7ff ffc8 	bl	800b524 <__swhatbuf_r>
 800b594:	9f00      	ldr	r7, [sp, #0]
 800b596:	4605      	mov	r5, r0
 800b598:	4639      	mov	r1, r7
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7fd fbb8 	bl	8008d10 <_malloc_r>
 800b5a0:	b948      	cbnz	r0, 800b5b6 <__smakebuf_r+0x46>
 800b5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a6:	059a      	lsls	r2, r3, #22
 800b5a8:	d4ee      	bmi.n	800b588 <__smakebuf_r+0x18>
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	f043 0302 	orr.w	r3, r3, #2
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	e7e2      	b.n	800b57c <__smakebuf_r+0xc>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	6020      	str	r0, [r4, #0]
 800b5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5c6:	b15b      	cbz	r3, 800b5e0 <__smakebuf_r+0x70>
 800b5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f000 f81d 	bl	800b60c <_isatty_r>
 800b5d2:	b128      	cbz	r0, 800b5e0 <__smakebuf_r+0x70>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	f043 0301 	orr.w	r3, r3, #1
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	431d      	orrs	r5, r3
 800b5e4:	81a5      	strh	r5, [r4, #12]
 800b5e6:	e7cf      	b.n	800b588 <__smakebuf_r+0x18>

0800b5e8 <_fstat_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	@ (800b608 <_fstat_r+0x20>)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	602b      	str	r3, [r5, #0]
 800b5f6:	f7f7 fcb7 	bl	8002f68 <_fstat>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d102      	bne.n	800b604 <_fstat_r+0x1c>
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	b103      	cbz	r3, 800b604 <_fstat_r+0x1c>
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	bf00      	nop
 800b608:	20000728 	.word	0x20000728

0800b60c <_isatty_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d06      	ldr	r5, [pc, #24]	@ (800b628 <_isatty_r+0x1c>)
 800b610:	2300      	movs	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f7f7 fcb6 	bl	8002f88 <_isatty>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_isatty_r+0x1a>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_isatty_r+0x1a>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20000728 	.word	0x20000728

0800b62c <_init>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	bf00      	nop
 800b630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b632:	bc08      	pop	{r3}
 800b634:	469e      	mov	lr, r3
 800b636:	4770      	bx	lr

0800b638 <_fini>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	bf00      	nop
 800b63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63e:	bc08      	pop	{r3}
 800b640:	469e      	mov	lr, r3
 800b642:	4770      	bx	lr
