
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc38  0800bc38  0000d35c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc40  0800bc40  0000d35c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc40  0800bc40  0000cc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc44  0800bc44  0000cc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0800bc48  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000035c  0800bfa4  0000d35c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800bfa4  0000d744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016293  00000000  00000000  0000d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb4  00000000  00000000  0002361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000272d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00028570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b53a  00000000  00000000  00029394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cac9  00000000  00000000  000548ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcae1  00000000  00000000  00071397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016de78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e60  00000000  00000000  0016debc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00173d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b66c 	.word	0x0800b66c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000360 	.word	0x20000360
 800020c:	0800b66c 	.word	0x0800b66c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:
#include "AirQualityIndicator.h"

static ledRow_t loadConfiguration;

void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000378 	.word	0x20000378

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000378 	.word	0x20000378

080010b8 <SetIndicatorLEDsNum>:
void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000378 	.word	0x20000378

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	200003a8 	.word	0x200003a8

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003a8 	.word	0x200003a8

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200003a8 	.word	0x200003a8

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f84b 	bl	8004220 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f002 ffef 	bl	8004250 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 ffb2 	bl	8004250 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f002 ffa9 	bl	8004250 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	200003b0 	.word	0x200003b0

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003b0 	.word	0x200003b0

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 ff3d 	bl	8004250 <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 ff34 	bl	8004250 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 ff23 	bl	8004250 <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 ff1a 	bl	8004250 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f002 ff09 	bl	8004250 <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f002 ff00 	bl	8004250 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f002 feef 	bl	8004250 <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 fee6 	bl	8004250 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 fed5 	bl	8004250 <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fecc 	bl	8004250 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 febb 	bl	8004250 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 feb2 	bl	8004250 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44160000 	.word	0x44160000
 80014fc:	44960000 	.word	0x44960000
 8001500:	44e10000 	.word	0x44e10000
 8001504:	45160000 	.word	0x45160000
 8001508:	453b8000 	.word	0x453b8000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 fe8e 	bl	8004250 <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 fe85 	bl	8004250 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 fe7a 	bl	8004250 <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fe71 	bl	8004250 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fe66 	bl	8004250 <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 fe5d 	bl	8004250 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 fe52 	bl	8004250 <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 fe49 	bl	8004250 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 fe3e 	bl	8004250 <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 fe35 	bl	8004250 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fe2a 	bl	8004250 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 fe21 	bl	8004250 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 fe0e 	bl	8003240 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f001 fed7 	bl	80033dc <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f001 ff5f 	bl	80034f2 <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200004b0 	.word	0x200004b0

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	200003b8 	.word	0x200003b8

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003b8 	.word	0x200003b8

080016d8 <AppInit>:
CountingTasterFSM countState = C_IDLE;
LED_StatusFSM ledState = LED_OFF;
UART_commandsFSM uartCmdState;

void AppInit()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	AlarmInit();
 80016dc:	f7ff fcfc 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 80016e0:	f7ff ffda 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 80016e4:	f7ff fcae 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 80016e8:	f7ff fe0e 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <AppInit+0x20>)
 80016ee:	f000 fbe7 	bl	8001ec0 <TerminalInit>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000568 	.word	0x20000568

080016fc <AppStart>:
bool result = false;
const uint8_t len_of_array = 20;
bool first_time = false;

void AppStart()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
//			}
//			first_time = true;
//		}
//       (char* cmp_cmd, char* cmdStrings[], bool* ret_val)

		if(IsTransferComplete() == true)
 8001702:	f000 fc0b 	bl	8001f1c <IsTransferComplete>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01f      	beq.n	800174c <AppStart+0x50>
		{
			TerminalCommand = (char*)GetRxBuffer();
 800170c:	f000 fc12 	bl	8001f34 <GetRxBuffer>
 8001710:	4603      	mov	r3, r0
 8001712:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <AppStart+0x14c>)
 8001714:	6013      	str	r3, [r2, #0]
			bool cmd_status = StringCompareFromUART(TerminalCommand, &cmdStrings, len_of_array, &cmd_find);
 8001716:	4b4c      	ldr	r3, [pc, #304]	@ (8001848 <AppStart+0x14c>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	2214      	movs	r2, #20
 800171c:	4b4b      	ldr	r3, [pc, #300]	@ (800184c <AppStart+0x150>)
 800171e:	494c      	ldr	r1, [pc, #304]	@ (8001850 <AppStart+0x154>)
 8001720:	f000 fc48 	bl	8001fb4 <StringCompareFromUART>
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
			if(cmd_status == false)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f083 0301 	eor.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <AppStart+0x46>
			{
				UART_TransmitString(ErrorMSG);
 8001734:	4847      	ldr	r0, [pc, #284]	@ (8001854 <AppStart+0x158>)
 8001736:	f000 faef 	bl	8001d18 <UART_TransmitString>
				progState = P_IDLE;
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <AppStart+0x15c>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e004      	b.n	800174c <AppStart+0x50>
			}
			else
			{
				ExecuteUARTCommand(cmd_find);
 8001742:	4b42      	ldr	r3, [pc, #264]	@ (800184c <AppStart+0x150>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fa0a 	bl	8001b60 <ExecuteUARTCommand>
			}

		}
			switch(progState)
 800174c:	4b42      	ldr	r3, [pc, #264]	@ (8001858 <AppStart+0x15c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d015      	beq.n	8001780 <AppStart+0x84>
 8001754:	2b02      	cmp	r3, #2
 8001756:	dcd4      	bgt.n	8001702 <AppStart+0x6>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d071      	beq.n	8001840 <AppStart+0x144>
 800175c:	2b01      	cmp	r3, #1
 800175e:	d1d0      	bne.n	8001702 <AppStart+0x6>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 8001760:	483e      	ldr	r0, [pc, #248]	@ (800185c <AppStart+0x160>)
 8001762:	f000 fad9 	bl	8001d18 <UART_TransmitString>
					SetIndicatorLEDs(0); //resets the indicator
 8001766:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8001860 <AppStart+0x164>
 800176a:	f7ff fc95 	bl	8001098 <SetIndicatorLEDs>
					progState = P_IDLE;
 800176e:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <AppStart+0x15c>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
					HelpSendUART(cmdStrings, len_of_array); //Sends the lists of commands
 8001774:	2314      	movs	r3, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4835      	ldr	r0, [pc, #212]	@ (8001850 <AppStart+0x154>)
 800177a:	f000 faa1 	bl	8001cc0 <HelpSendUART>
					break;
 800177e:	e062      	b.n	8001846 <AppStart+0x14a>

					break;

				case P_WORK:

					PPM = ReadGasSensor();
 8001780:	f7ff fd7b 	bl	800127a <ReadGasSensor>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <AppStart+0x168>)
 800178a:	edc3 7a00 	vstr	s15, [r3]

					if(PPM < 400)
 800178e:	4b35      	ldr	r3, [pc, #212]	@ (8001864 <AppStart+0x168>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001868 <AppStart+0x16c>
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d503      	bpl.n	80017aa <AppStart+0xae>
					{
						led_cnt.correct_led = false;
 80017a2:	4b32      	ldr	r3, [pc, #200]	@ (800186c <AppStart+0x170>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	735a      	strb	r2, [r3, #13]
 80017a8:	e002      	b.n	80017b0 <AppStart+0xb4>
					}
					else
					{
						led_cnt.correct_led  = true;
 80017aa:	4b30      	ldr	r3, [pc, #192]	@ (800186c <AppStart+0x170>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	735a      	strb	r2, [r3, #13]
					}

					if(led_cnt.led_overflow_flag == true)
 80017b0:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <AppStart+0x170>)
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d019      	beq.n	80017ee <AppStart+0xf2>
					{
						switch(ledState)
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <AppStart+0x174>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d00e      	beq.n	80017e0 <AppStart+0xe4>
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	dc10      	bgt.n	80017e8 <AppStart+0xec>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <AppStart+0xd4>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d004      	beq.n	80017d8 <AppStart+0xdc>
 80017ce:	e00b      	b.n	80017e8 <AppStart+0xec>
						{
							case LED_OFF:

								LED_Drive(false);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fda7 	bl	8001324 <LED_Drive>

								break;
 80017d6:	e007      	b.n	80017e8 <AppStart+0xec>

							case LED_ON_CORECT:

								LED_Drive(true);
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff fda3 	bl	8001324 <LED_Drive>

								break;
 80017de:	e003      	b.n	80017e8 <AppStart+0xec>

							case LED_ON_INCORECT:

								LED_Drive(true);
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fd9f 	bl	8001324 <LED_Drive>

								break;
 80017e6:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 80017e8:	4b20      	ldr	r3, [pc, #128]	@ (800186c <AppStart+0x170>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <AppStart+0x178>)
 80017f0:	7b9b      	ldrb	r3, [r3, #14]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d025      	beq.n	8001844 <AppStart+0x148>
					{
						UART_TransmitString(PPM_MSG);
 80017f8:	481f      	ldr	r0, [pc, #124]	@ (8001878 <AppStart+0x17c>)
 80017fa:	f000 fa8d 	bl	8001d18 <UART_TransmitString>
						UART_TransmitFloat(PPM);
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <AppStart+0x168>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f000 fab4 	bl	8001d74 <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <AppStart+0x168>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	f7ff fc3f 	bl	8001098 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <AppStart+0x168>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800187c <AppStart+0x180>
 8001824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dd04      	ble.n	8001838 <AppStart+0x13c>
						{
							UART_TransmitString(AlertMSG);
 800182e:	4814      	ldr	r0, [pc, #80]	@ (8001880 <AppStart+0x184>)
 8001830:	f000 fa72 	bl	8001d18 <UART_TransmitString>
							AlarmON();
 8001834:	f7ff fc5e 	bl	80010f4 <AlarmON>
						}
						prog_cnt.update_param_flag = false;
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <AppStart+0x178>)
 800183a:	2200      	movs	r2, #0
 800183c:	739a      	strb	r2, [r3, #14]
					}
					break;
 800183e:	e001      	b.n	8001844 <AppStart+0x148>
					break;
 8001840:	bf00      	nop
 8001842:	e75e      	b.n	8001702 <AppStart+0x6>
					break;
 8001844:	bf00      	nop
		if(IsTransferComplete() == true)
 8001846:	e75c      	b.n	8001702 <AppStart+0x6>
 8001848:	200003d0 	.word	0x200003d0
 800184c:	200003d7 	.word	0x200003d7
 8001850:	20000130 	.word	0x20000130
 8001854:	200000dc 	.word	0x200000dc
 8001858:	20000180 	.word	0x20000180
 800185c:	20000008 	.word	0x20000008
 8001860:	00000000 	.word	0x00000000
 8001864:	200003cc 	.word	0x200003cc
 8001868:	43c80000 	.word	0x43c80000
 800186c:	2000010c 	.word	0x2000010c
 8001870:	200003d5 	.word	0x200003d5
 8001874:	2000011c 	.word	0x2000011c
 8001878:	20000028 	.word	0x20000028
 800187c:	45098000 	.word	0x45098000
 8001880:	20000030 	.word	0x20000030

08001884 <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a96      	ldr	r2, [pc, #600]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001890:	4293      	cmp	r3, r2
 8001892:	f040 8156 	bne.w	8001b42 <HAL_TIM_PeriodElapsedCallback+0x2be>
	{
		SysTickFlag = true;
 8001896:	4b95      	ldr	r3, [pc, #596]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

		//Controling room clearing mechanism////////////////////////////////
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 800189c:	4b94      	ldr	r3, [pc, #592]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800189e:	7bdb      	ldrb	r3, [r3, #15]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b93      	ldr	r3, [pc, #588]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018a4:	7c1b      	ldrb	r3, [r3, #16]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d310      	bcc.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x48>
 80018aa:	4b91      	ldr	r3, [pc, #580]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ac:	7c5b      	ldrb	r3, [r3, #17]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			AlarmOFF();
 80018b4:	f7ff fc28 	bl	8001108 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80018b8:	488e      	ldr	r0, [pc, #568]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018ba:	f000 fa2d 	bl	8001d18 <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80018be:	4b8c      	ldr	r3, [pc, #560]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80018c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	745a      	strb	r2, [r3, #17]
 80018ca:	e006      	b.n	80018da <HAL_TIM_PeriodElapsedCallback+0x56>
		}
		else
		{
			prog_cnt.cnt_clear_room++;
 80018cc:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ce:	7bdb      	ldrb	r3, [r3, #15]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b86      	ldr	r3, [pc, #536]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018d8:	73da      	strb	r2, [r3, #15]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80018da:	4b87      	ldr	r3, [pc, #540]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d042      	beq.n	8001968 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	dc5d      	bgt.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x11e>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d024      	beq.n	8001938 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80018ee:	e058      	b.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 80018f0:	4b82      	ldr	r3, [pc, #520]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018fc:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 80018fe:	4b7f      	ldr	r3, [pc, #508]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001906:	895b      	ldrh	r3, [r3, #10]
 8001908:	429a      	cmp	r2, r3
 800190a:	d345      	bcc.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x114>
				{

					led_cnt.led_overflow_flag = true;
 800190c:	4b7b      	ldr	r3, [pc, #492]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800190e:	2201      	movs	r2, #1
 8001910:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 8001912:	4b7a      	ldr	r3, [pc, #488]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001914:	7b5b      	ldrb	r3, [r3, #13]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_TIM_PeriodElapsedCallback+0xa0>
					{
						ledState =  LED_ON_CORECT;
 800191c:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e002      	b.n	800192a <HAL_TIM_PeriodElapsedCallback+0xa6>
					}
					else
					{
						ledState = LED_ON_INCORECT;
 8001924:	4b74      	ldr	r3, [pc, #464]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 800192a:	4b74      	ldr	r3, [pc, #464]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800192c:	2200      	movs	r2, #0
 800192e:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 8001930:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001932:	2201      	movs	r2, #1
 8001934:	731a      	strb	r2, [r3, #12]
				}

				break;
 8001936:	e02f      	b.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x114>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001938:	4b70      	ldr	r3, [pc, #448]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	3301      	adds	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001944:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800194e:	88db      	ldrh	r3, [r3, #6]
 8001950:	429a      	cmp	r2, r3
 8001952:	d323      	bcc.n	800199c <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					led_cnt.cnt_led_correct_on = 0;
 8001954:	4b69      	ldr	r3, [pc, #420]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 800195a:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800195c:	2201      	movs	r2, #1
 800195e:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001960:	4b65      	ldr	r3, [pc, #404]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001966:	e019      	b.n	800199c <HAL_TIM_PeriodElapsedCallback+0x118>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001968:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800196a:	885b      	ldrh	r3, [r3, #2]
 800196c:	b29b      	uxth	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b62      	ldr	r3, [pc, #392]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001974:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 8001976:	4b61      	ldr	r3, [pc, #388]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001978:	885b      	ldrh	r3, [r3, #2]
 800197a:	b29a      	uxth	r2, r3
 800197c:	4b5f      	ldr	r3, [pc, #380]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800197e:	891b      	ldrh	r3, [r3, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d30d      	bcc.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x11c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 8001984:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001986:	2200      	movs	r2, #0
 8001988:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 800198a:	4b5c      	ldr	r3, [pc, #368]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x278>)
 800198c:	2201      	movs	r2, #1
 800198e:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001990:	4b59      	ldr	r3, [pc, #356]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001996:	e003      	b.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x11c>
				break;
 8001998:	bf00      	nop
 800199a:	e002      	b.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 80019a0:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 80019a2:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d014      	beq.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0x152>
		{
			prog_cnt.cnt_ref_rate++;
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019ae:	899b      	ldrh	r3, [r3, #12]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b4e      	ldr	r3, [pc, #312]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019b8:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80019ba:	4b4d      	ldr	r3, [pc, #308]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019bc:	899b      	ldrh	r3, [r3, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019c2:	891b      	ldrh	r3, [r3, #8]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d305      	bcc.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				prog_cnt.update_param_flag = true;
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80019d0:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80019d6:	4845      	ldr	r0, [pc, #276]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x268>)
 80019d8:	f7ff fe6c 	bl	80016b4 <ReadSignal>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019e2:	719a      	strb	r2, [r3, #6]
		switch(countState)
 80019e4:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d045      	beq.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f300 80a5 	bgt.w	8001b3c <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_TIM_PeriodElapsedCallback+0x178>
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d019      	beq.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x1aa>
 80019fa:	e09f      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x2b8>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 80019fc:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019fe:	799b      	ldrb	r3, [r3, #6]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8097 	beq.w	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8001a08:	4b39      	ldr	r3, [pc, #228]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a0a:	79db      	ldrb	r3, [r3, #7]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8091 	beq.w	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b2>
				{
					prog_cnt.cnt_button = 0;
 8001a14:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001a1a:	4b35      	ldr	r3, [pc, #212]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 8001a26:	4b36      	ldr	r3, [pc, #216]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001a2c:	e083      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2b2>

			case C_START:

				prog_cnt.cnt_button++;
 8001a2e:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a30:	885b      	ldrh	r3, [r3, #2]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a3a:	805a      	strh	r2, [r3, #2]
				//UART_TransmitFloat((float)prog_cnt.cnt_button);
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d303      	bcc.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x1ce>
				{
					countState = C_END;
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001a50:	e073      	b.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x2b6>
					if(((prog_cnt.read_button_flag) == true))
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a54:	799b      	ldrb	r3, [r3, #6]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d06e      	beq.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x2b6>
						prog_cnt.cnt_button = 0;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a6e:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
				break;
 8001a76:	e060      	b.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x2b6>

			case C_END:

				prog_cnt.cnt_button = 0;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d84c      	bhi.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001a88:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001aa9 	.word	0x08001aa9
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001ad3 	.word	0x08001ad3
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b15 	.word	0x08001b15

						break;

					case 1:

						progState = P_WORK;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S1WorkStateMSG);
 8001aae:	4816      	ldr	r0, [pc, #88]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ab0:	f000 f932 	bl	8001d18 <UART_TransmitString>
						prog_cnt.ref_rate = 100;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ab6:	2264      	movs	r2, #100	@ 0x64
 8001ab8:	811a      	strh	r2, [r3, #8]

						break;
 8001aba:	e032      	b.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 2:

						progState = P_WORK;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S3WorkStateMSG);
 8001ac2:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ac4:	f000 f928 	bl	8001d18 <UART_TransmitString>
						prog_cnt.ref_rate = 300;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001aca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ace:	811a      	strh	r2, [r3, #8]

						break;
 8001ad0:	e027      	b.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 3:

						progState = P_WORK;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S5WorkStateMSG);
 8001ad8:	480d      	ldr	r0, [pc, #52]	@ (8001b10 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ada:	f000 f91d 	bl	8001d18 <UART_TransmitString>
						prog_cnt.ref_rate = 500;
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ae0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ae4:	811a      	strh	r2, [r3, #8]

						break;
 8001ae6:	e01c      	b.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001ae8:	2000051c 	.word	0x2000051c
 8001aec:	200003c8 	.word	0x200003c8
 8001af0:	2000011c 	.word	0x2000011c
 8001af4:	20000054 	.word	0x20000054
 8001af8:	200003d5 	.word	0x200003d5
 8001afc:	2000010c 	.word	0x2000010c
 8001b00:	200003d4 	.word	0x200003d4
 8001b04:	20000180 	.word	0x20000180
 8001b08:	2000007c 	.word	0x2000007c
 8001b0c:	20000094 	.word	0x20000094
 8001b10:	200000ac 	.word	0x200000ac
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	811a      	strh	r2, [r3, #8]

						break;
 8001b20:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	71da      	strb	r2, [r3, #7]

				countState = C_IDLE;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
				break;
 8001b34:	e002      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b3a:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000180 	.word	0x20000180
 8001b54:	2000011c 	.word	0x2000011c
 8001b58:	200003d4 	.word	0x200003d4
 8001b5c:	200003c8 	.word	0x200003c8

08001b60 <ExecuteUARTCommand>:

void ExecuteUARTCommand(uint8_t cmd_index)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	uartCmdState = cmd_index;
 8001b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca4 <ExecuteUARTCommand+0x144>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	7013      	strb	r3, [r2, #0]
	switch(uartCmdState)
 8001b70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca4 <ExecuteUARTCommand+0x144>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b14      	cmp	r3, #20
 8001b76:	f200 8091 	bhi.w	8001c9c <ExecuteUARTCommand+0x13c>
 8001b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <ExecuteUARTCommand+0x20>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bdd 	.word	0x08001bdd
 8001b88:	08001beb 	.word	0x08001beb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001c0b 	.word	0x08001c0b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c2b 	.word	0x08001c2b
 8001b9c:	08001c33 	.word	0x08001c33
 8001ba0:	08001c3b 	.word	0x08001c3b
 8001ba4:	08001c41 	.word	0x08001c41
 8001ba8:	08001c47 	.word	0x08001c47
 8001bac:	08001c4f 	.word	0x08001c4f
 8001bb0:	08001c57 	.word	0x08001c57
 8001bb4:	08001c5f 	.word	0x08001c5f
 8001bb8:	08001c67 	.word	0x08001c67
 8001bbc:	08001c6f 	.word	0x08001c6f
 8001bc0:	08001c77 	.word	0x08001c77
 8001bc4:	08001c7f 	.word	0x08001c7f
 8001bc8:	08001c87 	.word	0x08001c87
 8001bcc:	08001c8f 	.word	0x08001c8f
 8001bd0:	08001c9b 	.word	0x08001c9b
	{
		case cmd_0:

			progState = P_IDLE_START;
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <ExecuteUARTCommand+0x148>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]

			break;
 8001bda:	e05f      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_1:

			progState = P_WORK;
 8001bdc:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <ExecuteUARTCommand+0x148>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 100;
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <ExecuteUARTCommand+0x14c>)
 8001be4:	2264      	movs	r2, #100	@ 0x64
 8001be6:	811a      	strh	r2, [r3, #8]

			break;
 8001be8:	e058      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_2:

			progState = P_WORK;
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <ExecuteUARTCommand+0x148>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 300;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <ExecuteUARTCommand+0x14c>)
 8001bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bf6:	811a      	strh	r2, [r3, #8]


			break;
 8001bf8:	e050      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_3:

			progState = P_WORK;
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <ExecuteUARTCommand+0x148>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 500;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <ExecuteUARTCommand+0x14c>)
 8001c02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c06:	811a      	strh	r2, [r3, #8]

			break;
 8001c08:	e048      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_4:

			PPM = ReadGasSensor();
 8001c0a:	f7ff fb36 	bl	800127a <ReadGasSensor>
 8001c0e:	eef0 7a40 	vmov.f32	s15, s0
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <ExecuteUARTCommand+0x150>)
 8001c14:	edc3 7a00 	vstr	s15, [r3]

			break;
 8001c18:	e040      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_5:

			UART_TransmitFloat(PPM);
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <ExecuteUARTCommand+0x150>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f000 f8a6 	bl	8001d74 <UART_TransmitFloat>

			break;
 8001c28:	e038      	b.n	8001c9c <ExecuteUARTCommand+0x13c>


		case cmd_6:

			UART_TransmitString(FAN_ON);
 8001c2a:	4822      	ldr	r0, [pc, #136]	@ (8001cb4 <ExecuteUARTCommand+0x154>)
 8001c2c:	f000 f874 	bl	8001d18 <UART_TransmitString>

			break;
 8001c30:	e034      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_7:

			UART_TransmitString(FAN_OFF);
 8001c32:	4821      	ldr	r0, [pc, #132]	@ (8001cb8 <ExecuteUARTCommand+0x158>)
 8001c34:	f000 f870 	bl	8001d18 <UART_TransmitString>

			break;
 8001c38:	e030      	b.n	8001c9c <ExecuteUARTCommand+0x13c>


		case cmd_8:

			AlarmON();
 8001c3a:	f7ff fa5b 	bl	80010f4 <AlarmON>

			break;
 8001c3e:	e02d      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_9:

			AlarmOFF();
 8001c40:	f7ff fa62 	bl	8001108 <AlarmOFF>

			break;
 8001c44:	e02a      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_10:

			LED_Drive(true);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff fb6c 	bl	8001324 <LED_Drive>

			break;
 8001c4c:	e026      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_11:

			LED_Drive(false);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fb68 	bl	8001324 <LED_Drive>

			break;
 8001c54:	e022      	b.n	8001c9c <ExecuteUARTCommand+0x13c>


		case cmd_12:

			SetIndicatorLEDsNum(0);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fa2e 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c5c:	e01e      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_13:

			SetIndicatorLEDsNum(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff fa2a 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c64:	e01a      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_14:

			SetIndicatorLEDsNum(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7ff fa26 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c6c:	e016      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_15:

			SetIndicatorLEDsNum(3);
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f7ff fa22 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c74:	e012      	b.n	8001c9c <ExecuteUARTCommand+0x13c>


		case cmd_16:

			SetIndicatorLEDsNum(4);
 8001c76:	2004      	movs	r0, #4
 8001c78:	f7ff fa1e 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c7c:	e00e      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_17:

			SetIndicatorLEDsNum(5);
 8001c7e:	2005      	movs	r0, #5
 8001c80:	f7ff fa1a 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c84:	e00a      	b.n	8001c9c <ExecuteUARTCommand+0x13c>


		case cmd_18:

			SetIndicatorLEDsNum(6);
 8001c86:	2006      	movs	r0, #6
 8001c88:	f7ff fa16 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c8c:	e006      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_19:
			HelpSendUART(cmdStrings, len_of_array);
 8001c8e:	2314      	movs	r3, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <ExecuteUARTCommand+0x15c>)
 8001c94:	f000 f814 	bl	8001cc0 <HelpSendUART>

			break;
 8001c98:	e000      	b.n	8001c9c <ExecuteUARTCommand+0x13c>

		case cmd_20:

			// reserved

			break;
 8001c9a:	bf00      	nop
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200003d6 	.word	0x200003d6
 8001ca8:	20000180 	.word	0x20000180
 8001cac:	2000011c 	.word	0x2000011c
 8001cb0:	200003cc 	.word	0x200003cc
 8001cb4:	200000c4 	.word	0x200000c4
 8001cb8:	200000d0 	.word	0x200000d0
 8001cbc:	20000130 	.word	0x20000130

08001cc0 <HelpSendUART>:

void HelpSendUART(char** command_list, const uint8_t total_num_of_elements)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
	uint8_t iterator = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
	UART_TransmitString("\n=================  UART Commands =================\n");
 8001cd0:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <HelpSendUART+0x4c>)
 8001cd2:	f000 f821 	bl	8001d18 <UART_TransmitString>
	while(iterator < total_num_of_elements)
 8001cd6:	e00d      	b.n	8001cf4 <HelpSendUART+0x34>
	{
		UART_TransmitString(command_list[iterator]);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f818 	bl	8001d18 <UART_TransmitString>
		UART_TransmitString("\n");
 8001ce8:	4809      	ldr	r0, [pc, #36]	@ (8001d10 <HelpSendUART+0x50>)
 8001cea:	f000 f815 	bl	8001d18 <UART_TransmitString>
		iterator++;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
	while(iterator < total_num_of_elements)
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3ed      	bcc.n	8001cd8 <HelpSendUART+0x18>
	}
	UART_TransmitString("\n==================================================\n");
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HelpSendUART+0x54>)
 8001cfe:	f000 f80b 	bl	8001d18 <UART_TransmitString>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	0800b75c 	.word	0x0800b75c
 8001d10:	0800b794 	.word	0x0800b794
 8001d14:	0800b798 	.word	0x0800b798

08001d18 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fad5 	bl	80002d0 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	480e      	ldr	r0, [pc, #56]	@ (8001d6c <UART_TransmitString+0x54>)
 8001d32:	f003 fea5 	bl	8005a80 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001d36:	4a0e      	ldr	r2, [pc, #56]	@ (8001d70 <UART_TransmitString+0x58>)
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	8019      	strh	r1, [r3, #0]
 8001d42:	3302      	adds	r3, #2
 8001d44:	0c12      	lsrs	r2, r2, #16
 8001d46:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fabf 	bl	80002d0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f107 010c 	add.w	r1, r7, #12
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	4803      	ldr	r0, [pc, #12]	@ (8001d6c <UART_TransmitString+0x54>)
 8001d60:	f003 fe8e 	bl	8005a80 <HAL_UART_Transmit>
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000568 	.word	0x20000568
 8001d70:	0800b7d0 	.word	0x0800b7d0

08001d74 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b090      	sub	sp, #64	@ 0x40
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fc12 	bl	80005a8 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	f107 000c 	add.w	r0, r7, #12
 8001d8c:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <UART_TransmitFloat+0x44>)
 8001d8e:	f006 f833 	bl	8007df8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fa9a 	bl	80002d0 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f107 010c 	add.w	r1, r7, #12
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
 8001da8:	4804      	ldr	r0, [pc, #16]	@ (8001dbc <UART_TransmitFloat+0x48>)
 8001daa:	f003 fe69 	bl	8005a80 <HAL_UART_Transmit>
}
 8001dae:	bf00      	nop
 8001db0:	3740      	adds	r7, #64	@ 0x40
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800b7d4 	.word	0x0800b7d4
 8001dbc:	20000568 	.word	0x20000568

08001dc0 <TerminalHandler>:
static bool transferCompleteFlag = false;
static uint8_t* toSend;
static char msg[] = "\r\n"; // Just for testing

void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 8001dc8:	4a36      	ldr	r2, [pc, #216]	@ (8001ea4 <TerminalHandler+0xe4>)
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	8019      	strh	r1, [r3, #0]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	0c12      	lsrs	r2, r2, #16
 8001dd8:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 8001dda:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <TerminalHandler+0xe8>)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de4:	6018      	str	r0, [r3, #0]
 8001de6:	3304      	adds	r3, #4
 8001de8:	7019      	strb	r1, [r3, #0]

	if(huart->Instance == USART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2f      	ldr	r2, [pc, #188]	@ (8001eac <TerminalHandler+0xec>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d14d      	bne.n	8001e90 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001df4:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001dfc:	f000 f870 	bl	8001ee0 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001e00:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b0d      	cmp	r3, #13
 8001e06:	d02f      	beq.n	8001e68 <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d117      	bne.n	8001e40 <TerminalHandler+0x80>
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 8001e18:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <TerminalHandler+0xf8>)
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001e24:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e2e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001e30:	f107 010c 	add.w	r1, r7, #12
 8001e34:	230a      	movs	r3, #10
 8001e36:	2205      	movs	r2, #5
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f003 fe21 	bl	8005a80 <HAL_UART_Transmit>
 8001e3e:	e00c      	b.n	8001e5a <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e48:	7819      	ldrb	r1, [r3, #0]
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <TerminalHandler+0xf8>)
 8001e4c:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e58:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4915      	ldr	r1, [pc, #84]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f003 fe0d 	bl	8005a80 <HAL_UART_Transmit>
 8001e66:	e013      	b.n	8001e90 <TerminalHandler+0xd0>
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e70:	7819      	ldrb	r1, [r3, #0]
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <TerminalHandler+0xf8>)
 8001e74:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <TerminalHandler+0xf0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <TerminalHandler+0xfc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 8001e82:	f107 0114 	add.w	r1, r7, #20
 8001e86:	230a      	movs	r3, #10
 8001e88:	2203      	movs	r2, #3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f003 fdf8 	bl	8005a80 <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 8001e90:	2201      	movs	r2, #1
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <TerminalHandler+0xf4>)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f003 fe76 	bl	8005b86 <HAL_UART_Receive_IT>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800b7dc 	.word	0x0800b7dc
 8001ea8:	0800b7e0 	.word	0x0800b7e0
 8001eac:	40011000 	.word	0x40011000
 8001eb0:	200003d8 	.word	0x200003d8
 8001eb4:	200003dc 	.word	0x200003dc
 8001eb8:	200003e0 	.word	0x200003e0
 8001ebc:	200004a8 	.word	0x200004a8

08001ec0 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4904      	ldr	r1, [pc, #16]	@ (8001edc <TerminalInit+0x1c>)
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f003 fe5a 	bl	8005b86 <HAL_UART_Receive_IT>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200003dc 	.word	0x200003dc

08001ee0 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 200; counter++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e007      	b.n	8001efc <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001eec:	4a09      	ldr	r2, [pc, #36]	@ (8001f14 <ClearRxBuffer+0x34>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 200; counter++)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f00:	ddf4      	ble.n	8001eec <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <ClearRxBuffer+0x38>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	200003e0 	.word	0x200003e0
 8001f18:	200004a8 	.word	0x200004a8

08001f1c <IsTransferComplete>:

bool IsTransferComplete()
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <IsTransferComplete+0x14>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200004a8 	.word	0x200004a8

08001f34 <GetRxBuffer>:

uint8_t* GetRxBuffer()
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return RxBuffer;
 8001f38:	4b02      	ldr	r3, [pc, #8]	@ (8001f44 <GetRxBuffer+0x10>)
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200003e0 	.word	0x200003e0

08001f48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //Interrupt function defined by Cube
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); //TerminalHandler becomes a callback function
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff35 	bl	8001dc0 <TerminalHandler>
	if(IsTransferComplete())
 8001f56:	f7ff ffe1 	bl	8001f1c <IsTransferComplete>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01e      	beq.n	8001f9e <HAL_UART_RxCpltCallback+0x56>
	{
		toSend = GetRxBuffer();
 8001f60:	f7ff ffe8 	bl	8001f34 <GetRxBuffer>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a10      	ldr	r2, [pc, #64]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x60>)
 8001f68:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1, toSend, strlen((char*)toSend), HAL_MAX_DELAY);
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x60>)
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_UART_RxCpltCallback+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f9ac 	bl	80002d0 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	4621      	mov	r1, r4
 8001f82:	480a      	ldr	r0, [pc, #40]	@ (8001fac <HAL_UART_RxCpltCallback+0x64>)
 8001f84:	f003 fd7c 	bl	8005a80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f88:	4809      	ldr	r0, [pc, #36]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x68>)
 8001f8a:	f7fe f9a1 	bl	80002d0 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	4906      	ldr	r1, [pc, #24]	@ (8001fb0 <HAL_UART_RxCpltCallback+0x68>)
 8001f98:	4804      	ldr	r0, [pc, #16]	@ (8001fac <HAL_UART_RxCpltCallback+0x64>)
 8001f9a:	f003 fd71 	bl	8005a80 <HAL_UART_Transmit>
	}
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200004ac 	.word	0x200004ac
 8001fac:	20000568 	.word	0x20000568
 8001fb0:	20000184 	.word	0x20000184

08001fb4 <StringCompareFromUART>:

bool StringCompareFromUART(char* cmp_cmd, char** cmdStrings, const uint8_t array_element, uint8_t* ret_val)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  bool find = false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
  bool stop_flag = false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75bb      	strb	r3, [r7, #22]
  uint8_t iterator = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	757b      	strb	r3, [r7, #21]
  do
	{
	  if (((strcmp(cmp_cmd, cmdStrings[iterator])) == 0) && (find == false))
 8001fd0:	7d7b      	ldrb	r3, [r7, #21]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7fe f917 	bl	8000210 <strcmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d126      	bne.n	8002036 <StringCompareFromUART+0x82>
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <StringCompareFromUART+0x82>
		{
		  if(iterator == 0)
 8001ff4:	7d7b      	ldrb	r3, [r7, #21]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <StringCompareFromUART+0x54>
		  {
			  find = true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
			  stop_flag = true;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75bb      	strb	r3, [r7, #22]
			  *ret_val = iterator;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	7d7a      	ldrb	r2, [r7, #21]
 8002006:	701a      	strb	r2, [r3, #0]

			 // return find;
		  }
		  *ret_val = iterator;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	7d7a      	ldrb	r2, [r7, #21]
 800200c:	701a      	strb	r2, [r3, #0]

		//  printf("Uslo\n");
		  UART_TransmitString("Uslo\n");
 800200e:	4813      	ldr	r0, [pc, #76]	@ (800205c <StringCompareFromUART+0xa8>)
 8002010:	f7ff fe82 	bl	8001d18 <UART_TransmitString>
		//  printf(cmp_cmd);
		  UART_TransmitFloat((float)iterator);
 8002014:	7d7b      	ldrb	r3, [r7, #21]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	f7ff fea7 	bl	8001d74 <UART_TransmitFloat>
	//	  printf("\n");
		  UART_TransmitString("\n");
 8002026:	480e      	ldr	r0, [pc, #56]	@ (8002060 <StringCompareFromUART+0xac>)
 8002028:	f7ff fe76 	bl	8001d18 <UART_TransmitString>
		  find = true;
 800202c:	2301      	movs	r3, #1
 800202e:	75fb      	strb	r3, [r7, #23]
		  stop_flag = true;
 8002030:	2301      	movs	r3, #1
 8002032:	75bb      	strb	r3, [r7, #22]
 8002034:	e002      	b.n	800203c <StringCompareFromUART+0x88>
		}
        else
        {
            iterator++;
 8002036:	7d7b      	ldrb	r3, [r7, #21]
 8002038:	3301      	adds	r3, #1
 800203a:	757b      	strb	r3, [r7, #21]
      //      printf("Nije: %d\n", iterator);


        }

	}while ((stop_flag == false) || (iterator < array_element));
 800203c:	7dbb      	ldrb	r3, [r7, #22]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1c3      	bne.n	8001fd0 <StringCompareFromUART+0x1c>
 8002048:	7d7a      	ldrb	r2, [r7, #21]
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3bf      	bcc.n	8001fd0 <StringCompareFromUART+0x1c>

    return find;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800b7e8 	.word	0x0800b7e8
 8002060:	0800b7f0 	.word	0x0800b7f0

08002064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002068:	f001 f849 	bl	80030fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206c:	f000 f816 	bl	800209c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002070:	f000 f94c 	bl	800230c <MX_GPIO_Init>
  MX_ADC3_Init();
 8002074:	f000 f882 	bl	800217c <MX_ADC3_Init>
  MX_CRC_Init();
 8002078:	f000 f8d2 	bl	8002220 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800207c:	f000 f916 	bl	80022ac <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8002080:	f000 f8f0 	bl	8002264 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <main+0x34>)
 8002086:	f003 fa2f 	bl	80054e8 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 800208a:	f7ff fb25 	bl	80016d8 <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 800208e:	f7ff fb35 	bl	80016fc <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <main+0x2e>
 8002096:	bf00      	nop
 8002098:	2000051c 	.word	0x2000051c

0800209c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	@ 0x50
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	2230      	movs	r2, #48	@ 0x30
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 ff07 	bl	8007ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020c0:	f002 f8e0 	bl	8004284 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <SystemClock_Config+0xd8>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002174 <SystemClock_Config+0xd8>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d0:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <SystemClock_Config+0xd8>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020dc:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <SystemClock_Config+0xdc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a25      	ldr	r2, [pc, #148]	@ (8002178 <SystemClock_Config+0xdc>)
 80020e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <SystemClock_Config+0xdc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fe:	2302      	movs	r3, #2
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002108:	2319      	movs	r3, #25
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800210c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002112:	2302      	movs	r3, #2
 8002114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002116:	2309      	movs	r3, #9
 8002118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f910 	bl	8004344 <HAL_RCC_OscConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800212a:	f000 fd4b 	bl	8002bc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800212e:	f002 f8b9 	bl	80042a4 <HAL_PWREx_EnableOverDrive>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002138:	f000 fd44 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213c:	230f      	movs	r3, #15
 800213e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002140:	2302      	movs	r3, #2
 8002142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002148:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800214c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2106      	movs	r1, #6
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fb96 	bl	800488c <HAL_RCC_ClockConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002166:	f000 fd2d 	bl	8002bc4 <Error_Handler>
  }
}
 800216a:	bf00      	nop
 800216c:	3750      	adds	r7, #80	@ 0x50
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800218e:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <MX_ADC3_Init+0x98>)
 8002190:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <MX_ADC3_Init+0x9c>)
 8002192:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002194:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <MX_ADC3_Init+0x98>)
 8002196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800219a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <MX_ADC3_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021b6:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021be:	4a17      	ldr	r2, [pc, #92]	@ (800221c <MX_ADC3_Init+0xa0>)
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021d8:	2201      	movs	r2, #1
 80021da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80021dc:	480d      	ldr	r0, [pc, #52]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021de:	f000 ffeb 	bl	80031b8 <HAL_ADC_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80021e8:	f000 fcec 	bl	8002bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_ADC3_Init+0x98>)
 80021fe:	f001 f985 	bl	800350c <HAL_ADC_ConfigChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002208:	f000 fcdc 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200004b0 	.word	0x200004b0
 8002218:	40012200 	.word	0x40012200
 800221c:	0f000001 	.word	0x0f000001

08002220 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <MX_CRC_Init+0x3c>)
 8002226:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <MX_CRC_Init+0x40>)
 8002228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_CRC_Init+0x3c>)
 800222c:	2200      	movs	r2, #0
 800222e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <MX_CRC_Init+0x3c>)
 8002232:	2200      	movs	r2, #0
 8002234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_CRC_Init+0x3c>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <MX_CRC_Init+0x3c>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_CRC_Init+0x3c>)
 8002244:	2201      	movs	r2, #1
 8002246:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	@ (800225c <MX_CRC_Init+0x3c>)
 800224a:	f001 fcc1 	bl	8003bd0 <HAL_CRC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002254:	f000 fcb6 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200004f8 	.word	0x200004f8
 8002260:	40023000 	.word	0x40023000

08002264 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <MX_TIM11_Init+0x40>)
 800226a:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <MX_TIM11_Init+0x44>)
 800226c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <MX_TIM11_Init+0x40>)
 8002270:	f640 026f 	movw	r2, #2159	@ 0x86f
 8002274:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <MX_TIM11_Init+0x40>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <MX_TIM11_Init+0x40>)
 800227e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002282:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <MX_TIM11_Init+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <MX_TIM11_Init+0x40>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002290:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <MX_TIM11_Init+0x40>)
 8002292:	f003 f8d1 	bl	8005438 <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800229c:	f000 fc92 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000051c 	.word	0x2000051c
 80022a8:	40014800 	.word	0x40014800

080022ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <MX_USART1_UART_Init+0x5c>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022b6:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	@ (8002304 <MX_USART1_UART_Init+0x58>)
 80022f0:	f003 fb78 	bl	80059e4 <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022fa:	f000 fc63 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000568 	.word	0x20000568
 8002308:	40011000 	.word	0x40011000

0800230c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	@ 0x40
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	4baf      	ldr	r3, [pc, #700]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4aae      	ldr	r2, [pc, #696]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4bac      	ldr	r3, [pc, #688]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233a:	4ba9      	ldr	r3, [pc, #676]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4aa8      	ldr	r2, [pc, #672]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4ba6      	ldr	r3, [pc, #664]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	4ba3      	ldr	r3, [pc, #652]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4aa2      	ldr	r2, [pc, #648]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4ba0      	ldr	r3, [pc, #640]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236a:	4b9d      	ldr	r3, [pc, #628]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a9c      	ldr	r2, [pc, #624]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b9a      	ldr	r3, [pc, #616]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	4b97      	ldr	r3, [pc, #604]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a96      	ldr	r2, [pc, #600]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b94      	ldr	r3, [pc, #592]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b91      	ldr	r3, [pc, #580]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a90      	ldr	r2, [pc, #576]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b8e      	ldr	r3, [pc, #568]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023b2:	4b8b      	ldr	r3, [pc, #556]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a8a      	ldr	r2, [pc, #552]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b88      	ldr	r3, [pc, #544]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ca:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a84      	ldr	r2, [pc, #528]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b82      	ldr	r3, [pc, #520]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023e2:	4b7f      	ldr	r3, [pc, #508]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a7e      	ldr	r2, [pc, #504]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b7c      	ldr	r3, [pc, #496]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023fa:	4b79      	ldr	r3, [pc, #484]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a78      	ldr	r2, [pc, #480]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002412:	4b73      	ldr	r3, [pc, #460]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a72      	ldr	r2, [pc, #456]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b70      	ldr	r3, [pc, #448]	@ (80025e0 <MX_GPIO_Init+0x2d4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2110      	movs	r1, #16
 800242e:	486d      	ldr	r0, [pc, #436]	@ (80025e4 <MX_GPIO_Init+0x2d8>)
 8002430:	f001 ff0e 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2120      	movs	r1, #32
 8002438:	486b      	ldr	r0, [pc, #428]	@ (80025e8 <MX_GPIO_Init+0x2dc>)
 800243a:	f001 ff09 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	210d      	movs	r1, #13
 8002442:	486a      	ldr	r0, [pc, #424]	@ (80025ec <MX_GPIO_Init+0x2e0>)
 8002444:	f001 ff04 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2108      	movs	r1, #8
 800244c:	4868      	ldr	r0, [pc, #416]	@ (80025f0 <MX_GPIO_Init+0x2e4>)
 800244e:	f001 feff 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002458:	4864      	ldr	r0, [pc, #400]	@ (80025ec <MX_GPIO_Init+0x2e0>)
 800245a:	f001 fef9 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8002464:	4863      	ldr	r0, [pc, #396]	@ (80025f4 <MX_GPIO_Init+0x2e8>)
 8002466:	f001 fef3 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	2140      	movs	r1, #64	@ 0x40
 800246e:	4862      	ldr	r0, [pc, #392]	@ (80025f8 <MX_GPIO_Init+0x2ec>)
 8002470:	f001 feee 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	21c8      	movs	r1, #200	@ 0xc8
 8002478:	4860      	ldr	r0, [pc, #384]	@ (80025fc <MX_GPIO_Init+0x2f0>)
 800247a:	f001 fee9 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800247e:	2310      	movs	r3, #16
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248e:	230e      	movs	r3, #14
 8002490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002496:	4619      	mov	r1, r3
 8002498:	4859      	ldr	r0, [pc, #356]	@ (8002600 <MX_GPIO_Init+0x2f4>)
 800249a:	f001 fd15 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800249e:	2308      	movs	r3, #8
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4853      	ldr	r0, [pc, #332]	@ (8002600 <MX_GPIO_Init+0x2f4>)
 80024b2:	f001 fd09 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80024b6:	2304      	movs	r3, #4
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024c6:	2309      	movs	r3, #9
 80024c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	484b      	ldr	r0, [pc, #300]	@ (8002600 <MX_GPIO_Init+0x2f4>)
 80024d2:	f001 fcf9 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80024d6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e8:	230b      	movs	r3, #11
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4842      	ldr	r0, [pc, #264]	@ (80025fc <MX_GPIO_Init+0x2f0>)
 80024f4:	f001 fce8 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80024f8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800250a:	230c      	movs	r3, #12
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	483a      	ldr	r0, [pc, #232]	@ (8002600 <MX_GPIO_Init+0x2f4>)
 8002516:	f001 fcd7 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800251a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002520:	2312      	movs	r3, #18
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800252c:	2304      	movs	r3, #4
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	482b      	ldr	r0, [pc, #172]	@ (80025e4 <MX_GPIO_Init+0x2d8>)
 8002538:	f001 fcc6 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 800253c:	2310      	movs	r3, #16
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002544:	2302      	movs	r3, #2
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	4824      	ldr	r0, [pc, #144]	@ (80025e4 <MX_GPIO_Init+0x2d8>)
 8002554:	f001 fcb8 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002568:	2308      	movs	r3, #8
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	481d      	ldr	r0, [pc, #116]	@ (80025e8 <MX_GPIO_Init+0x2dc>)
 8002574:	f001 fca8 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002578:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800258a:	230c      	movs	r3, #12
 800258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	4818      	ldr	r0, [pc, #96]	@ (80025f8 <MX_GPIO_Init+0x2ec>)
 8002596:	f001 fc97 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800259a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ac:	2301      	movs	r3, #1
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b4:	4619      	mov	r1, r3
 80025b6:	4813      	ldr	r0, [pc, #76]	@ (8002604 <MX_GPIO_Init+0x2f8>)
 80025b8:	f001 fc86 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80025bc:	2360      	movs	r3, #96	@ 0x60
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80025cc:	230d      	movs	r3, #13
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d4:	4619      	mov	r1, r3
 80025d6:	480a      	ldr	r0, [pc, #40]	@ (8002600 <MX_GPIO_Init+0x2f4>)
 80025d8:	f001 fc76 	bl	8003ec8 <HAL_GPIO_Init>
 80025dc:	e014      	b.n	8002608 <MX_GPIO_Init+0x2fc>
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020400 	.word	0x40020400
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022800 	.word	0x40022800
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021000 	.word	0x40021000
 8002604:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002608:	2340      	movs	r3, #64	@ 0x40
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002618:	230a      	movs	r3, #10
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002620:	4619      	mov	r1, r3
 8002622:	48bc      	ldr	r0, [pc, #752]	@ (8002914 <MX_GPIO_Init+0x608>)
 8002624:	f001 fc50 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002628:	f248 1333 	movw	r3, #33075	@ 0x8133
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800263a:	230c      	movs	r3, #12
 800263c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	48b4      	ldr	r0, [pc, #720]	@ (8002918 <MX_GPIO_Init+0x60c>)
 8002646:	f001 fc3f 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800264a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800264e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265c:	230e      	movs	r3, #14
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002660:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002664:	4619      	mov	r1, r3
 8002666:	48ad      	ldr	r0, [pc, #692]	@ (800291c <MX_GPIO_Init+0x610>)
 8002668:	f001 fc2e 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800266c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	2300      	movs	r3, #0
 8002674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	48a6      	ldr	r0, [pc, #664]	@ (800291c <MX_GPIO_Init+0x610>)
 8002682:	f001 fc21 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002686:	2340      	movs	r3, #64	@ 0x40
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800268a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002698:	4619      	mov	r1, r3
 800269a:	48a1      	ldr	r0, [pc, #644]	@ (8002920 <MX_GPIO_Init+0x614>)
 800269c:	f001 fc14 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80026a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026b2:	230c      	movs	r3, #12
 80026b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ba:	4619      	mov	r1, r3
 80026bc:	4898      	ldr	r0, [pc, #608]	@ (8002920 <MX_GPIO_Init+0x614>)
 80026be:	f001 fc03 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80026c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026d4:	230a      	movs	r3, #10
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026dc:	4619      	mov	r1, r3
 80026de:	4891      	ldr	r0, [pc, #580]	@ (8002924 <MX_GPIO_Init+0x618>)
 80026e0:	f001 fbf2 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80026e4:	23f0      	movs	r3, #240	@ 0xf0
 80026e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026f4:	230a      	movs	r3, #10
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026fc:	4619      	mov	r1, r3
 80026fe:	488a      	ldr	r0, [pc, #552]	@ (8002928 <MX_GPIO_Init+0x61c>)
 8002700:	f001 fbe2 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002704:	23f7      	movs	r3, #247	@ 0xf7
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002714:	230e      	movs	r3, #14
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	4883      	ldr	r0, [pc, #524]	@ (800292c <MX_GPIO_Init+0x620>)
 8002720:	f001 fbd2 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002736:	2309      	movs	r3, #9
 8002738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800273e:	4619      	mov	r1, r3
 8002740:	4875      	ldr	r0, [pc, #468]	@ (8002918 <MX_GPIO_Init+0x60c>)
 8002742:	f001 fbc1 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002758:	230a      	movs	r3, #10
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002760:	4619      	mov	r1, r3
 8002762:	486d      	ldr	r0, [pc, #436]	@ (8002918 <MX_GPIO_Init+0x60c>)
 8002764:	f001 fbb0 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002768:	2320      	movs	r3, #32
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800277c:	4619      	mov	r1, r3
 800277e:	4868      	ldr	r0, [pc, #416]	@ (8002920 <MX_GPIO_Init+0x614>)
 8002780:	f001 fba2 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002784:	2308      	movs	r3, #8
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002794:	230d      	movs	r3, #13
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800279c:	4619      	mov	r1, r3
 800279e:	4860      	ldr	r0, [pc, #384]	@ (8002920 <MX_GPIO_Init+0x614>)
 80027a0:	f001 fb92 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 80027a4:	230d      	movs	r3, #13
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ac:	2302      	movs	r3, #2
 80027ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027b8:	4619      	mov	r1, r3
 80027ba:	485b      	ldr	r0, [pc, #364]	@ (8002928 <MX_GPIO_Init+0x61c>)
 80027bc:	f001 fb84 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80027c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4856      	ldr	r0, [pc, #344]	@ (8002930 <MX_GPIO_Init+0x624>)
 80027d6:	f001 fb77 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80027da:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ec:	230c      	movs	r3, #12
 80027ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027f4:	4619      	mov	r1, r3
 80027f6:	484f      	ldr	r0, [pc, #316]	@ (8002934 <MX_GPIO_Init+0x628>)
 80027f8:	f001 fb66 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80027fc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800280e:	230e      	movs	r3, #14
 8002810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002816:	4619      	mov	r1, r3
 8002818:	4843      	ldr	r0, [pc, #268]	@ (8002928 <MX_GPIO_Init+0x61c>)
 800281a:	f001 fb55 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800281e:	2308      	movs	r3, #8
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	483d      	ldr	r0, [pc, #244]	@ (800292c <MX_GPIO_Init+0x620>)
 8002836:	f001 fb47 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800283a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800284c:	230d      	movs	r3, #13
 800284e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002854:	4619      	mov	r1, r3
 8002856:	4830      	ldr	r0, [pc, #192]	@ (8002918 <MX_GPIO_Init+0x60c>)
 8002858:	f001 fb36 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800285c:	2310      	movs	r3, #16
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800286c:	4619      	mov	r1, r3
 800286e:	482c      	ldr	r0, [pc, #176]	@ (8002920 <MX_GPIO_Init+0x614>)
 8002870:	f001 fb2a 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002874:	2304      	movs	r3, #4
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002884:	230c      	movs	r3, #12
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800288c:	4619      	mov	r1, r3
 800288e:	4824      	ldr	r0, [pc, #144]	@ (8002920 <MX_GPIO_Init+0x614>)
 8002890:	f001 fb1a 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002894:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a6:	4619      	mov	r1, r3
 80028a8:	4823      	ldr	r0, [pc, #140]	@ (8002938 <MX_GPIO_Init+0x62c>)
 80028aa:	f001 fb0d 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028be:	2305      	movs	r3, #5
 80028c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c6:	4619      	mov	r1, r3
 80028c8:	4817      	ldr	r0, [pc, #92]	@ (8002928 <MX_GPIO_Init+0x61c>)
 80028ca:	f001 fafd 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80028ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028e4:	4619      	mov	r1, r3
 80028e6:	4810      	ldr	r0, [pc, #64]	@ (8002928 <MX_GPIO_Init+0x61c>)
 80028e8:	f001 faee 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80028ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <MX_GPIO_Init+0x62c>)
 8002906:	f001 fadf 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800290a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	e013      	b.n	800293c <MX_GPIO_Init+0x630>
 8002914:	40020400 	.word	0x40020400
 8002918:	40021800 	.word	0x40021800
 800291c:	40022400 	.word	0x40022400
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40020000 	.word	0x40020000
 8002928:	40022000 	.word	0x40022000
 800292c:	40022800 	.word	0x40022800
 8002930:	40020800 	.word	0x40020800
 8002934:	40021400 	.word	0x40021400
 8002938:	40021c00 	.word	0x40021c00
 800293c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002946:	230d      	movs	r3, #13
 8002948:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	4895      	ldr	r0, [pc, #596]	@ (8002ba8 <MX_GPIO_Init+0x89c>)
 8002952:	f001 fab9 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 8002956:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002960:	2302      	movs	r3, #2
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8002964:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002968:	4619      	mov	r1, r3
 800296a:	4890      	ldr	r0, [pc, #576]	@ (8002bac <MX_GPIO_Init+0x8a0>)
 800296c:	f001 faac 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2300      	movs	r3, #0
 8002980:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002982:	2301      	movs	r3, #1
 8002984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800298a:	4619      	mov	r1, r3
 800298c:	4888      	ldr	r0, [pc, #544]	@ (8002bb0 <MX_GPIO_Init+0x8a4>)
 800298e:	f001 fa9b 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002992:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002998:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800299c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4880      	ldr	r0, [pc, #512]	@ (8002bac <MX_GPIO_Init+0x8a0>)
 80029aa:	f001 fa8d 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029be:	2308      	movs	r3, #8
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c6:	4619      	mov	r1, r3
 80029c8:	487a      	ldr	r0, [pc, #488]	@ (8002bb4 <MX_GPIO_Init+0x8a8>)
 80029ca:	f001 fa7d 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d6:	2302      	movs	r3, #2
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4873      	ldr	r0, [pc, #460]	@ (8002bb4 <MX_GPIO_Init+0x8a8>)
 80029e6:	f001 fa6f 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80029ea:	2328      	movs	r3, #40	@ 0x28
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029fa:	230c      	movs	r3, #12
 80029fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	4868      	ldr	r0, [pc, #416]	@ (8002ba8 <MX_GPIO_Init+0x89c>)
 8002a06:	f001 fa5f 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 8002a0a:	23c0      	movs	r3, #192	@ 0xc0
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a12:	2302      	movs	r3, #2
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4865      	ldr	r0, [pc, #404]	@ (8002bb8 <MX_GPIO_Init+0x8ac>)
 8002a22:	f001 fa51 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a26:	2308      	movs	r3, #8
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a36:	230c      	movs	r3, #12
 8002a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a3e:	4619      	mov	r1, r3
 8002a40:	485c      	ldr	r0, [pc, #368]	@ (8002bb4 <MX_GPIO_Init+0x8a8>)
 8002a42:	f001 fa41 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a46:	2332      	movs	r3, #50	@ 0x32
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a56:	230b      	movs	r3, #11
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4854      	ldr	r0, [pc, #336]	@ (8002bb4 <MX_GPIO_Init+0x8a8>)
 8002a62:	f001 fa31 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a66:	2304      	movs	r3, #4
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a76:	2309      	movs	r3, #9
 8002a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	484e      	ldr	r0, [pc, #312]	@ (8002bbc <MX_GPIO_Init+0x8b0>)
 8002a82:	f001 fa21 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002a86:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a98:	2309      	movs	r3, #9
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4847      	ldr	r0, [pc, #284]	@ (8002bc0 <MX_GPIO_Init+0x8b4>)
 8002aa4:	f001 fa10 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002abc:	4619      	mov	r1, r3
 8002abe:	483e      	ldr	r0, [pc, #248]	@ (8002bb8 <MX_GPIO_Init+0x8ac>)
 8002ac0:	f001 fa02 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4838      	ldr	r0, [pc, #224]	@ (8002bb8 <MX_GPIO_Init+0x8ac>)
 8002ad8:	f001 f9f6 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002adc:	2386      	movs	r3, #134	@ 0x86
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aec:	230b      	movs	r3, #11
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	482e      	ldr	r0, [pc, #184]	@ (8002bb0 <MX_GPIO_Init+0x8a4>)
 8002af8:	f001 f9e6 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002afc:	2350      	movs	r3, #80	@ 0x50
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b0c:	230d      	movs	r3, #13
 8002b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b14:	4619      	mov	r1, r3
 8002b16:	4826      	ldr	r0, [pc, #152]	@ (8002bb0 <MX_GPIO_Init+0x8a4>)
 8002b18:	f001 f9d6 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b22:	2312      	movs	r3, #18
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b36:	4619      	mov	r1, r3
 8002b38:	481b      	ldr	r0, [pc, #108]	@ (8002ba8 <MX_GPIO_Init+0x89c>)
 8002b3a:	f001 f9c5 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b50:	230a      	movs	r3, #10
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4818      	ldr	r0, [pc, #96]	@ (8002bbc <MX_GPIO_Init+0x8b0>)
 8002b5c:	f001 f9b4 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8002b60:	2340      	movs	r3, #64	@ 0x40
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b64:	2301      	movs	r3, #1
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b74:	4619      	mov	r1, r3
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <MX_GPIO_Init+0x89c>)
 8002b78:	f001 f9a6 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002b7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b8e:	2305      	movs	r3, #5
 8002b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b96:	4619      	mov	r1, r3
 8002b98:	4808      	ldr	r0, [pc, #32]	@ (8002bbc <MX_GPIO_Init+0x8b0>)
 8002b9a:	f001 f995 	bl	8003ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b9e:	bf00      	nop
 8002ba0:	3740      	adds	r7, #64	@ 0x40
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020c00 	.word	0x40020c00

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <Error_Handler+0x8>

08002bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a10      	ldr	r2, [pc, #64]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	210f      	movs	r1, #15
 8002c0a:	f06f 0001 	mvn.w	r0, #1
 8002c0e:	f000 ffa8 	bl	8003b62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <HAL_ADC_MspInit+0xa4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d13c      	bne.n	8002cbc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c42:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c60:	f043 0320 	orr.w	r3, r3, #32
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_ADC_MspInit+0xa8>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002c8a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002c8e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c90:	2303      	movs	r3, #3
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480b      	ldr	r0, [pc, #44]	@ (8002ccc <HAL_ADC_MspInit+0xac>)
 8002ca0:	f001 f912 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	@ (8002cd0 <HAL_ADC_MspInit+0xb0>)
 8002cb8:	f001 f906 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	@ 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40012200 	.word	0x40012200
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_CRC_MspInit+0x38>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d10b      	bne.n	8002cfe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <HAL_CRC_MspInit+0x3c>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <HAL_CRC_MspInit+0x3c>)
 8002cec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <HAL_CRC_MspInit+0x3c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023000 	.word	0x40023000
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <HAL_TIM_Base_MspInit+0x44>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d113      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_TIM_Base_MspInit+0x48>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <HAL_TIM_Base_MspInit+0x48>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_TIM_Base_MspInit+0x48>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	201a      	movs	r0, #26
 8002d44:	f000 ff0d 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d48:	201a      	movs	r0, #26
 8002d4a:	f000 ff26 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	40023800 	.word	0x40023800

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0ac      	sub	sp, #176	@ 0xb0
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d78:	f107 0318 	add.w	r3, r7, #24
 8002d7c:	2284      	movs	r2, #132	@ 0x84
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 f89c 	bl	8007ebe <memset>
  if(huart->Instance==USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a36      	ldr	r2, [pc, #216]	@ (8002e64 <HAL_UART_MspInit+0x104>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d164      	bne.n	8002e5a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d90:	2340      	movs	r3, #64	@ 0x40
 8002d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d94:	2300      	movs	r3, #0
 8002d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 ff5b 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002da8:	f7ff ff0c 	bl	8002bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dac:	4b2e      	ldr	r3, [pc, #184]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	4a27      	ldr	r2, [pc, #156]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd0:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ddc:	4b22      	ldr	r3, [pc, #136]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e68 <HAL_UART_MspInit+0x108>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e16:	4619      	mov	r1, r3
 8002e18:	4814      	ldr	r0, [pc, #80]	@ (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e1a:	f001 f855 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e38:	2307      	movs	r3, #7
 8002e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e42:	4619      	mov	r1, r3
 8002e44:	480a      	ldr	r0, [pc, #40]	@ (8002e70 <HAL_UART_MspInit+0x110>)
 8002e46:	f001 f83f 	bl	8003ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2025      	movs	r0, #37	@ 0x25
 8002e50:	f000 fe87 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e54:	2025      	movs	r0, #37	@ 0x25
 8002e56:	f000 fea0 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	37b0      	adds	r7, #176	@ 0xb0
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020000 	.word	0x40020000

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x4>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eca:	f000 f955 	bl	8003178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002eda:	f002 fb7d 	bl	80055d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000051c 	.word	0x2000051c

08002ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <USART1_IRQHandler+0x10>)
 8002eee:	f002 fe8f 	bl	8005c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000568 	.word	0x20000568

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_kill>:

int _kill(int pid, int sig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f16:	f005 f825 	bl	8007f64 <__errno>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2216      	movs	r2, #22
 8002f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_exit>:

void _exit (int status)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe7 	bl	8002f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <_exit+0x12>

08002f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e00a      	b.n	8002f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f54:	f3af 8000 	nop.w
 8002f58:	4601      	mov	r1, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	60ba      	str	r2, [r7, #8]
 8002f60:	b2ca      	uxtb	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3301      	adds	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	dbf0      	blt.n	8002f54 <_read+0x12>
  }

  return len;
 8002f72:	687b      	ldr	r3, [r7, #4]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e009      	b.n	8002fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	60ba      	str	r2, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbf1      	blt.n	8002f8e <_write+0x12>
  }
  return len;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_close>:

int _close(int file)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_isatty>:

int _isatty(int file)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff4:	2301      	movs	r3, #1
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f004 ff8a 	bl	8007f64 <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20050000 	.word	0x20050000
 800307c:	00000400 	.word	0x00000400
 8003080:	200005f0 	.word	0x200005f0
 8003084:	20000748 	.word	0x20000748

08003088 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b0:	480d      	ldr	r0, [pc, #52]	@ (80030e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030b2:	490e      	ldr	r1, [pc, #56]	@ (80030ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030b4:	4a0e      	ldr	r2, [pc, #56]	@ (80030f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030c8:	4c0b      	ldr	r4, [pc, #44]	@ (80030f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030d6:	f7ff ffd7 	bl	8003088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030da:	f004 ff49 	bl	8007f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030de:	f7fe ffc1 	bl	8002064 <main>
  bx  lr    
 80030e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80030f0:	0800bc48 	.word	0x0800bc48
  ldr r2, =_sbss
 80030f4:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80030f8:	20000744 	.word	0x20000744

080030fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC_IRQHandler>

080030fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003102:	2003      	movs	r0, #3
 8003104:	f000 fd22 	bl	8003b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003108:	2000      	movs	r0, #0
 800310a:	f000 f805 	bl	8003118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310e:	f7ff fd5f 	bl	8002bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003120:	4b12      	ldr	r3, [pc, #72]	@ (800316c <HAL_InitTick+0x54>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_InitTick+0x58>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800312e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fd3d 	bl	8003bb6 <HAL_SYSTICK_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00e      	b.n	8003164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d80a      	bhi.n	8003162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f000 fd05 	bl	8003b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003158:	4a06      	ldr	r2, [pc, #24]	@ (8003174 <HAL_InitTick+0x5c>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000188 	.word	0x20000188
 8003170:	20000190 	.word	0x20000190
 8003174:	2000018c 	.word	0x2000018c

08003178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_IncTick+0x20>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_IncTick+0x24>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4413      	add	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	@ (800319c <HAL_IncTick+0x24>)
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000190 	.word	0x20000190
 800319c:	200005f4 	.word	0x200005f4

080031a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_GetTick+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	200005f4 	.word	0x200005f4

080031b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e031      	b.n	8003232 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fd22 	bl	8002c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_ADC_Init+0x84>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	f043 0202 	orr.w	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fad6 	bl	80037b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
 8003222:	e001      	b.n	8003228 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	ffffeefd 	.word	0xffffeefd

08003240 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_ADC_Start+0x1a>
 8003256:	2302      	movs	r3, #2
 8003258:	e0ad      	b.n	80033b6 <HAL_ADC_Start+0x176>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d018      	beq.n	80032a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003280:	4b50      	ldr	r3, [pc, #320]	@ (80033c4 <HAL_ADC_Start+0x184>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a50      	ldr	r2, [pc, #320]	@ (80033c8 <HAL_ADC_Start+0x188>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0c9a      	lsrs	r2, r3, #18
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003294:	e002      	b.n	800329c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b01      	subs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f9      	bne.n	8003296 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d175      	bne.n	800339c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032b4:	4b45      	ldr	r3, [pc, #276]	@ (80033cc <HAL_ADC_Start+0x18c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ea:	d106      	bne.n	80032fa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	f023 0206 	bic.w	r2, r3, #6
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80032f8:	e002      	b.n	8003300 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003310:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003312:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <HAL_ADC_Start+0x190>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10f      	bne.n	800333e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d143      	bne.n	80033b4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e03a      	b.n	80033b4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_ADC_Start+0x194>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d10e      	bne.n	8003366 <HAL_ADC_Start+0x126>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003366:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <HAL_ADC_Start+0x190>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d120      	bne.n	80033b4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_ADC_Start+0x198>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d11b      	bne.n	80033b4 <HAL_ADC_Start+0x174>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d114      	bne.n	80033b4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	e00b      	b.n	80033b4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000188 	.word	0x20000188
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	fffff8fe 	.word	0xfffff8fe
 80033d0:	40012300 	.word	0x40012300
 80033d4:	40012000 	.word	0x40012000
 80033d8:	40012200 	.word	0x40012200

080033dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f8:	d113      	bne.n	8003422 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003408:	d10b      	bne.n	8003422 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e063      	b.n	80034ea <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003422:	f7ff febd 	bl	80031a0 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003428:	e021      	b.n	800346e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d01d      	beq.n	800346e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_ADC_PollForConversion+0x6c>
 8003438:	f7ff feb2 	bl	80031a0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d212      	bcs.n	800346e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d00b      	beq.n	800346e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e03d      	b.n	80034ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d1d6      	bne.n	800342a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0212 	mvn.w	r2, #18
 8003484:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d123      	bne.n	80034e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11f      	bne.n	80034e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1c>
 8003524:	2302      	movs	r3, #2
 8003526:	e136      	b.n	8003796 <HAL_ADC_ConfigChannel+0x28a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b09      	cmp	r3, #9
 8003536:	d93a      	bls.n	80035ae <HAL_ADC_ConfigChannel+0xa2>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003540:	d035      	beq.n	80035ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68d9      	ldr	r1, [r3, #12]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	3b1e      	subs	r3, #30
 8003558:	2207      	movs	r2, #7
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a8d      	ldr	r2, [pc, #564]	@ (80037a4 <HAL_ADC_ConfigChannel+0x298>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10a      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	061a      	lsls	r2, r3, #24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003586:	e035      	b.n	80035f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68d9      	ldr	r1, [r3, #12]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	4603      	mov	r3, r0
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4403      	add	r3, r0
 80035a0:	3b1e      	subs	r3, #30
 80035a2:	409a      	lsls	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ac:	e022      	b.n	80035f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	2207      	movs	r2, #7
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43da      	mvns	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	400a      	ands	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	4603      	mov	r3, r0
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4403      	add	r3, r0
 80035ea:	409a      	lsls	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d824      	bhi.n	8003646 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b05      	subs	r3, #5
 800360e:	221f      	movs	r2, #31
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43da      	mvns	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	400a      	ands	r2, r1
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	3b05      	subs	r3, #5
 8003638:	fa00 f203 	lsl.w	r2, r0, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	635a      	str	r2, [r3, #52]	@ 0x34
 8003644:	e04c      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d824      	bhi.n	8003698 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3b23      	subs	r3, #35	@ 0x23
 8003660:	221f      	movs	r2, #31
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b23      	subs	r3, #35	@ 0x23
 800368a:	fa00 f203 	lsl.w	r2, r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
 8003696:	e023      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	3b41      	subs	r3, #65	@ 0x41
 80036aa:	221f      	movs	r2, #31
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43da      	mvns	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	400a      	ands	r2, r1
 80036b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	3b41      	subs	r3, #65	@ 0x41
 80036d4:	fa00 f203 	lsl.w	r2, r0, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a30      	ldr	r2, [pc, #192]	@ (80037a8 <HAL_ADC_ConfigChannel+0x29c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10a      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x1f4>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036f2:	d105      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036f4:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a2c      	ldr	r2, [pc, #176]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 80036fa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80036fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <HAL_ADC_ConfigChannel+0x29c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10f      	bne.n	800372a <HAL_ADC_ConfigChannel+0x21e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b12      	cmp	r3, #18
 8003710:	d10b      	bne.n	800372a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003712:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a25      	ldr	r2, [pc, #148]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003718:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800371c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800371e:	4b23      	ldr	r3, [pc, #140]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003728:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1e      	ldr	r2, [pc, #120]	@ (80037a8 <HAL_ADC_ConfigChannel+0x29c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d12b      	bne.n	800378c <HAL_ADC_ConfigChannel+0x280>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1a      	ldr	r2, [pc, #104]	@ (80037a4 <HAL_ADC_ConfigChannel+0x298>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <HAL_ADC_ConfigChannel+0x23a>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b11      	cmp	r3, #17
 8003744:	d122      	bne.n	800378c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003746:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a18      	ldr	r2, [pc, #96]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 800374c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003750:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <HAL_ADC_ConfigChannel+0x2a0>)
 8003758:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800375c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a10      	ldr	r2, [pc, #64]	@ (80037a4 <HAL_ADC_ConfigChannel+0x298>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d111      	bne.n	800378c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003768:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9a      	lsrs	r2, r3, #18
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800377e:	e002      	b.n	8003786 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3b01      	subs	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	10000012 	.word	0x10000012
 80037a8:	40012000 	.word	0x40012000
 80037ac:	40012300 	.word	0x40012300
 80037b0:	20000188 	.word	0x20000188
 80037b4:	431bde83 	.word	0x431bde83

080037b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80037c0:	4b78      	ldr	r3, [pc, #480]	@ (80039a4 <ADC_Init+0x1ec>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a77      	ldr	r2, [pc, #476]	@ (80039a4 <ADC_Init+0x1ec>)
 80037c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80037ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80037cc:	4b75      	ldr	r3, [pc, #468]	@ (80039a4 <ADC_Init+0x1ec>)
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4973      	ldr	r1, [pc, #460]	@ (80039a4 <ADC_Init+0x1ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800380c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	4a58      	ldr	r2, [pc, #352]	@ (80039a8 <ADC_Init+0x1f0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800385a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800387c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e00f      	b.n	80038b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0202 	bic.w	r2, r2, #2
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	005a      	lsls	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	3b01      	subs	r3, #1
 800390c:	035a      	lsls	r2, r3, #13
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	e007      	b.n	8003928 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003936:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	3b01      	subs	r3, #1
 8003944:	051a      	lsls	r2, r3, #20
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800395c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800396a:	025a      	lsls	r2, r3, #9
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	029a      	lsls	r2, r3, #10
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40012300 	.word	0x40012300
 80039a8:	0f000001 	.word	0x0f000001

080039ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <__NVIC_SetPriorityGrouping+0x40>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039d4:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	@ (80039ec <__NVIC_SetPriorityGrouping+0x40>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00
 80039f0:	05fa0000 	.word	0x05fa0000

080039f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__NVIC_GetPriorityGrouping+0x18>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0307 	and.w	r3, r3, #7
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	db0b      	blt.n	8003a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4907      	ldr	r1, [pc, #28]	@ (8003a48 <__NVIC_EnableIRQ+0x38>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2001      	movs	r0, #1
 8003a32:	fa00 f202 	lsl.w	r2, r0, r2
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100

08003a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	db0a      	blt.n	8003a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	490c      	ldr	r1, [pc, #48]	@ (8003a98 <__NVIC_SetPriority+0x4c>)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a74:	e00a      	b.n	8003a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4908      	ldr	r1, [pc, #32]	@ (8003a9c <__NVIC_SetPriority+0x50>)
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	3b04      	subs	r3, #4
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	440b      	add	r3, r1
 8003a8a:	761a      	strb	r2, [r3, #24]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	@ 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f1c3 0307 	rsb	r3, r3, #7
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	bf28      	it	cs
 8003abe:	2304      	movcs	r3, #4
 8003ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d902      	bls.n	8003ad0 <NVIC_EncodePriority+0x30>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3b03      	subs	r3, #3
 8003ace:	e000      	b.n	8003ad2 <NVIC_EncodePriority+0x32>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	43d9      	mvns	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	4313      	orrs	r3, r2
         );
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b18:	d301      	bcc.n	8003b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00f      	b.n	8003b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <SysTick_Config+0x40>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b26:	210f      	movs	r1, #15
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f7ff ff8e 	bl	8003a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b30:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <SysTick_Config+0x40>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b36:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <SysTick_Config+0x40>)
 8003b38:	2207      	movs	r2, #7
 8003b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000e010 	.word	0xe000e010

08003b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff29 	bl	80039ac <__NVIC_SetPriorityGrouping>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b74:	f7ff ff3e 	bl	80039f4 <__NVIC_GetPriorityGrouping>
 8003b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff ff8e 	bl	8003aa0 <NVIC_EncodePriority>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff5d 	bl	8003a4c <__NVIC_SetPriority>
}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff31 	bl	8003a10 <__NVIC_EnableIRQ>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ffa2 	bl	8003b08 <SysTick_Config>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e054      	b.n	8003c8c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7f5b      	ldrb	r3, [r3, #29]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff f86e 	bl	8002cd4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	791b      	ldrb	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <HAL_CRC_Init+0xc4>)
 8003c0c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0218 	bic.w	r2, r2, #24
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	e00c      	b.n	8003c3a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f834 	bl	8003c98 <HAL_CRCEx_Polynomial_Set>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e028      	b.n	8003c8c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	795b      	ldrb	r3, [r3, #5]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	611a      	str	r2, [r3, #16]
 8003c4c:	e004      	b.n	8003c58 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6912      	ldr	r2, [r2, #16]
 8003c56:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	04c11db7 	.word	0x04c11db7

08003c98 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ca8:	231f      	movs	r3, #31
 8003caa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003cac:	bf00      	nop
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	613a      	str	r2, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <HAL_CRCEx_Polynomial_Set+0x34>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b18      	cmp	r3, #24
 8003cd0:	d846      	bhi.n	8003d60 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d67 	.word	0x08003d67
 8003cdc:	08003d61 	.word	0x08003d61
 8003ce0:	08003d61 	.word	0x08003d61
 8003ce4:	08003d61 	.word	0x08003d61
 8003ce8:	08003d61 	.word	0x08003d61
 8003cec:	08003d61 	.word	0x08003d61
 8003cf0:	08003d61 	.word	0x08003d61
 8003cf4:	08003d61 	.word	0x08003d61
 8003cf8:	08003d55 	.word	0x08003d55
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003d61 	.word	0x08003d61
 8003d04:	08003d61 	.word	0x08003d61
 8003d08:	08003d61 	.word	0x08003d61
 8003d0c:	08003d61 	.word	0x08003d61
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d61 	.word	0x08003d61
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003d61 	.word	0x08003d61
 8003d20:	08003d61 	.word	0x08003d61
 8003d24:	08003d61 	.word	0x08003d61
 8003d28:	08003d61 	.word	0x08003d61
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d61 	.word	0x08003d61
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003d3d 	.word	0x08003d3d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d913      	bls.n	8003d6a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d46:	e010      	b.n	8003d6a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	d90f      	bls.n	8003d6e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d52:	e00c      	b.n	8003d6e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	d90b      	bls.n	8003d72 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d5e:	e008      	b.n	8003d72 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e006      	b.n	8003d74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d72:	bf00      	nop
  }
  if (status == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 0118 	bic.w	r1, r3, #24
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003db2:	f7ff f9f5 	bl	80031a0 <HAL_GetTick>
 8003db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d008      	beq.n	8003dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e052      	b.n	8003e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0216 	bic.w	r2, r2, #22
 8003de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_DMA_Abort+0x62>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0208 	bic.w	r2, r2, #8
 8003e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e26:	e013      	b.n	8003e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e28:	f7ff f9ba 	bl	80031a0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d90c      	bls.n	8003e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e015      	b.n	8003e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e4      	bne.n	8003e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	223f      	movs	r2, #63	@ 0x3f
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d004      	beq.n	8003ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00c      	b.n	8003ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e175      	b.n	80041d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 8164 	bne.w	80041ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d005      	beq.n	8003f1e <HAL_GPIO_Init+0x56>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d130      	bne.n	8003f80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f54:	2201      	movs	r2, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 0201 	and.w	r2, r3, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d017      	beq.n	8003fbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d123      	bne.n	8004010 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0203 	and.w	r2, r3, #3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80be 	beq.w	80041ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	4b66      	ldr	r3, [pc, #408]	@ (80041ec <HAL_GPIO_Init+0x324>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	4a65      	ldr	r2, [pc, #404]	@ (80041ec <HAL_GPIO_Init+0x324>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800405c:	6453      	str	r3, [r2, #68]	@ 0x44
 800405e:	4b63      	ldr	r3, [pc, #396]	@ (80041ec <HAL_GPIO_Init+0x324>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800406a:	4a61      	ldr	r2, [pc, #388]	@ (80041f0 <HAL_GPIO_Init+0x328>)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a58      	ldr	r2, [pc, #352]	@ (80041f4 <HAL_GPIO_Init+0x32c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d037      	beq.n	8004106 <HAL_GPIO_Init+0x23e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a57      	ldr	r2, [pc, #348]	@ (80041f8 <HAL_GPIO_Init+0x330>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <HAL_GPIO_Init+0x23a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a56      	ldr	r2, [pc, #344]	@ (80041fc <HAL_GPIO_Init+0x334>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02b      	beq.n	80040fe <HAL_GPIO_Init+0x236>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a55      	ldr	r2, [pc, #340]	@ (8004200 <HAL_GPIO_Init+0x338>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d025      	beq.n	80040fa <HAL_GPIO_Init+0x232>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a54      	ldr	r2, [pc, #336]	@ (8004204 <HAL_GPIO_Init+0x33c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01f      	beq.n	80040f6 <HAL_GPIO_Init+0x22e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a53      	ldr	r2, [pc, #332]	@ (8004208 <HAL_GPIO_Init+0x340>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x22a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_GPIO_Init+0x344>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x226>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a51      	ldr	r2, [pc, #324]	@ (8004210 <HAL_GPIO_Init+0x348>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x222>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <HAL_GPIO_Init+0x34c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x21e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004218 <HAL_GPIO_Init+0x350>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x21a>
 80040de:	2309      	movs	r3, #9
 80040e0:	e012      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040e2:	230a      	movs	r3, #10
 80040e4:	e010      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040e6:	2308      	movs	r3, #8
 80040e8:	e00e      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e00c      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040ee:	2306      	movs	r3, #6
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040f2:	2305      	movs	r3, #5
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x240>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x240>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x240>
 8004106:	2300      	movs	r3, #0
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f002 0203 	and.w	r2, r2, #3
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	@ (80041f0 <HAL_GPIO_Init+0x328>)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b3d      	ldr	r3, [pc, #244]	@ (800421c <HAL_GPIO_Init+0x354>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a34      	ldr	r2, [pc, #208]	@ (800421c <HAL_GPIO_Init+0x354>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b32      	ldr	r3, [pc, #200]	@ (800421c <HAL_GPIO_Init+0x354>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a29      	ldr	r2, [pc, #164]	@ (800421c <HAL_GPIO_Init+0x354>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800417a:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_GPIO_Init+0x354>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800419e:	4a1f      	ldr	r2, [pc, #124]	@ (800421c <HAL_GPIO_Init+0x354>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041a4:	4b1d      	ldr	r3, [pc, #116]	@ (800421c <HAL_GPIO_Init+0x354>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041c8:	4a14      	ldr	r2, [pc, #80]	@ (800421c <HAL_GPIO_Init+0x354>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f ae86 	bls.w	8003ee8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000
 8004208:	40021400 	.word	0x40021400
 800420c:	40021800 	.word	0x40021800
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40022000 	.word	0x40022000
 8004218:	40022400 	.word	0x40022400
 800421c:	40013c00 	.word	0x40013c00

08004220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e001      	b.n	8004242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a04      	ldr	r2, [pc, #16]	@ (80042a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800428e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004292:	6013      	str	r3, [r2, #0]
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40007000 	.word	0x40007000

080042a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b23      	ldr	r3, [pc, #140]	@ (800433c <HAL_PWREx_EnableOverDrive+0x98>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_PWREx_EnableOverDrive+0x98>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ba:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_PWREx_EnableOverDrive+0x98>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d2:	f7fe ff65 	bl	80031a0 <HAL_GetTick>
 80042d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042d8:	e009      	b.n	80042ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042da:	f7fe ff61 	bl	80031a0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042e8:	d901      	bls.n	80042ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e022      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ee:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fa:	d1ee      	bne.n	80042da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042fc:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0f      	ldr	r2, [pc, #60]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004308:	f7fe ff4a 	bl	80031a0 <HAL_GetTick>
 800430c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800430e:	e009      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004310:	f7fe ff46 	bl	80031a0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800431e:	d901      	bls.n	8004324 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e007      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004330:	d1ee      	bne.n	8004310 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	40007000 	.word	0x40007000

08004344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e291      	b.n	800487e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8087 	beq.w	8004476 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004368:	4b96      	ldr	r3, [pc, #600]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b04      	cmp	r3, #4
 8004372:	d00c      	beq.n	800438e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004374:	4b93      	ldr	r3, [pc, #588]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d112      	bne.n	80043a6 <HAL_RCC_OscConfig+0x62>
 8004380:	4b90      	ldr	r3, [pc, #576]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438c:	d10b      	bne.n	80043a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438e:	4b8d      	ldr	r3, [pc, #564]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d06c      	beq.n	8004474 <HAL_RCC_OscConfig+0x130>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d168      	bne.n	8004474 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e26b      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x7a>
 80043b0:	4b84      	ldr	r3, [pc, #528]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a83      	ldr	r2, [pc, #524]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e02e      	b.n	800441c <HAL_RCC_OscConfig+0xd8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x9c>
 80043c6:	4b7f      	ldr	r3, [pc, #508]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7e      	ldr	r2, [pc, #504]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b7c      	ldr	r3, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7b      	ldr	r2, [pc, #492]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0xd8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0xc0>
 80043ea:	4b76      	ldr	r3, [pc, #472]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a75      	ldr	r2, [pc, #468]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b73      	ldr	r3, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a72      	ldr	r2, [pc, #456]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0xd8>
 8004404:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800440a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b6c      	ldr	r3, [pc, #432]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fe febc 	bl	80031a0 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fe feb8 	bl	80031a0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e21f      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b61      	ldr	r3, [pc, #388]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0xe8>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe fea8 	bl	80031a0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe fea4 	bl	80031a0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	@ 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e20b      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	4b57      	ldr	r3, [pc, #348]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x110>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d069      	beq.n	8004556 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004482:	4b50      	ldr	r3, [pc, #320]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b4d      	ldr	r3, [pc, #308]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b08      	cmp	r3, #8
 8004498:	d11c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x190>
 800449a:	4b4a      	ldr	r3, [pc, #296]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d116      	bne.n	80044d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x17a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1df      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	4b41      	ldr	r3, [pc, #260]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	493d      	ldr	r1, [pc, #244]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	e040      	b.n	8004556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d023      	beq.n	8004524 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044dc:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a38      	ldr	r2, [pc, #224]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fe fe5a 	bl	80031a0 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fe fe56 	bl	80031a0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1bd      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b30      	ldr	r3, [pc, #192]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450e:	4b2d      	ldr	r3, [pc, #180]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4929      	ldr	r1, [pc, #164]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]
 8004522:	e018      	b.n	8004556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004524:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a26      	ldr	r2, [pc, #152]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe fe36 	bl	80031a0 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7fe fe32 	bl	80031a0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e199      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454a:	4b1e      	ldr	r3, [pc, #120]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d038      	beq.n	80045d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d019      	beq.n	800459e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456a:	4b16      	ldr	r3, [pc, #88]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456e:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fe fe13 	bl	80031a0 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457e:	f7fe fe0f 	bl	80031a0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e176      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 8004592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x23a>
 800459c:	e01a      	b.n	80045d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459e:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80045a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a2:	4a08      	ldr	r2, [pc, #32]	@ (80045c4 <HAL_RCC_OscConfig+0x280>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe fdf9 	bl	80031a0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fe fdf5 	bl	80031a0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d903      	bls.n	80045c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e15c      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
 80045c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b91      	ldr	r3, [pc, #580]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a4 	beq.w	800472a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	4a87      	ldr	r2, [pc, #540]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045fa:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460a:	4b82      	ldr	r3, [pc, #520]	@ (8004814 <HAL_RCC_OscConfig+0x4d0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004616:	4b7f      	ldr	r3, [pc, #508]	@ (8004814 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a7e      	ldr	r2, [pc, #504]	@ (8004814 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fe fdbd 	bl	80031a0 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fe fdb9 	bl	80031a0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b64      	cmp	r3, #100	@ 0x64
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e120      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	4b75      	ldr	r3, [pc, #468]	@ (8004814 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x31a>
 8004650:	4b6f      	ldr	r3, [pc, #444]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a6e      	ldr	r2, [pc, #440]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
 800465c:	e02d      	b.n	80046ba <HAL_RCC_OscConfig+0x376>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x33c>
 8004666:	4b6a      	ldr	r3, [pc, #424]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a69      	ldr	r2, [pc, #420]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
 8004672:	4b67      	ldr	r3, [pc, #412]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	4a66      	ldr	r2, [pc, #408]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6713      	str	r3, [r2, #112]	@ 0x70
 800467e:	e01c      	b.n	80046ba <HAL_RCC_OscConfig+0x376>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b05      	cmp	r3, #5
 8004686:	d10c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x35e>
 8004688:	4b61      	ldr	r3, [pc, #388]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a60      	ldr	r2, [pc, #384]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800468e:	f043 0304 	orr.w	r3, r3, #4
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
 8004694:	4b5e      	ldr	r3, [pc, #376]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	4a5d      	ldr	r2, [pc, #372]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a0:	e00b      	b.n	80046ba <HAL_RCC_OscConfig+0x376>
 80046a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ae:	4b58      	ldr	r3, [pc, #352]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	4a57      	ldr	r2, [pc, #348]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d015      	beq.n	80046ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fe fd6d 	bl	80031a0 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe fd69 	bl	80031a0 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0ce      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ee      	beq.n	80046ca <HAL_RCC_OscConfig+0x386>
 80046ec:	e014      	b.n	8004718 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fe fd57 	bl	80031a0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fe fd53 	bl	80031a0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0b8      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	4b40      	ldr	r3, [pc, #256]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ee      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	4a3b      	ldr	r2, [pc, #236]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80a4 	beq.w	800487c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004734:	4b36      	ldr	r3, [pc, #216]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b08      	cmp	r3, #8
 800473e:	d06b      	beq.n	8004818 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d149      	bne.n	80047dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a30      	ldr	r2, [pc, #192]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 800474e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe fd24 	bl	80031a0 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475c:	f7fe fd20 	bl	80031a0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e087      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	4b28      	ldr	r3, [pc, #160]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4313      	orrs	r3, r2
 80047a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe fcf4 	bl	80031a0 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe fcf0 	bl	80031a0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e057      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x478>
 80047da:	e04f      	b.n	800487c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 80047e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe fcda 	bl	80031a0 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fe fcd6 	bl	80031a0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e03d      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_OscConfig+0x4cc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4ac>
 800480e:	e035      	b.n	800487c <HAL_RCC_OscConfig+0x538>
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x544>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d028      	beq.n	8004878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d121      	bne.n	8004878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d11a      	bne.n	8004878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800484e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0d0      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d910      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b67      	ldr	r3, [pc, #412]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 020f 	bic.w	r2, r3, #15
 80048ba:	4965      	ldr	r1, [pc, #404]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d040      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b41      	ldr	r3, [pc, #260]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e073      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06b      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4936      	ldr	r1, [pc, #216]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fe fc0e 	bl	80031a0 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fe fc0a 	bl	80031a0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e053      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d210      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b24      	ldr	r3, [pc, #144]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 020f 	bic.w	r2, r3, #15
 80049c6:	4922      	ldr	r1, [pc, #136]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x1cc>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	@ (8004a5c <HAL_RCC_ClockConfig+0x1d0>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	@ (8004a60 <HAL_RCC_ClockConfig+0x1d4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fb6a 	bl	8003118 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	0800b7f4 	.word	0x0800b7f4
 8004a5c:	20000188 	.word	0x20000188
 8004a60:	2000018c 	.word	0x2000018c

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b090      	sub	sp, #64	@ 0x40
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a70:	2300      	movs	r3, #0
 8004a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a74:	2300      	movs	r3, #0
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b59      	ldr	r3, [pc, #356]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e09b      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b53      	ldr	r3, [pc, #332]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a9c:	e09b      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b53      	ldr	r3, [pc, #332]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004aa2:	e098      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004aae:	4b4d      	ldr	r3, [pc, #308]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b4a      	ldr	r3, [pc, #296]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004acc:	2100      	movs	r1, #0
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad0:	fb03 f201 	mul.w	r2, r3, r1
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	fb00 f303 	mul.w	r3, r0, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	4a43      	ldr	r2, [pc, #268]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ade:	fba0 1202 	umull	r1, r2, r0, r2
 8004ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aea:	4413      	add	r3, r2
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	2200      	movs	r2, #0
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	61fa      	str	r2, [r7, #28]
 8004af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004afe:	f7fc f8f3 	bl	8000ce8 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4613      	mov	r3, r2
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b0a:	e053      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0c:	4b35      	ldr	r3, [pc, #212]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	2200      	movs	r2, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	617a      	str	r2, [r7, #20]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b1e:	f04f 0b00 	mov.w	fp, #0
 8004b22:	4652      	mov	r2, sl
 8004b24:	465b      	mov	r3, fp
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8004b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b56:	ebb2 0408 	subs.w	r4, r2, r8
 8004b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	00eb      	lsls	r3, r5, #3
 8004b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6c:	00e2      	lsls	r2, r4, #3
 8004b6e:	4614      	mov	r4, r2
 8004b70:	461d      	mov	r5, r3
 8004b72:	eb14 030a 	adds.w	r3, r4, sl
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	eb45 030b 	adc.w	r3, r5, fp
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	028b      	lsls	r3, r1, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b94:	4621      	mov	r1, r4
 8004b96:	028a      	lsls	r2, r1, #10
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba8:	f7fc f89e 	bl	8000ce8 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004bc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3740      	adds	r7, #64	@ 0x40
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	017d7840 	.word	0x017d7840

08004bf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000188 	.word	0x20000188

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800b804 	.word	0x0800b804

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800b804 	.word	0x0800b804

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c80:	4b69      	ldr	r3, [pc, #420]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a68      	ldr	r2, [pc, #416]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c8a:	6093      	str	r3, [r2, #8]
 8004c8c:	4b66      	ldr	r3, [pc, #408]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c94:	4964      	ldr	r1, [pc, #400]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	4959      	ldr	r1, [pc, #356]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cee:	4b4e      	ldr	r3, [pc, #312]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	494a      	ldr	r1, [pc, #296]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 808b 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	4a39      	ldr	r2, [pc, #228]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d48:	4b37      	ldr	r3, [pc, #220]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d54:	4b35      	ldr	r3, [pc, #212]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a34      	ldr	r2, [pc, #208]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fe fa1e 	bl	80031a0 <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fe fa1a 	bl	80031a0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	@ 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e357      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d86:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d035      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d02e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da4:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	4b1e      	ldr	r3, [pc, #120]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dc6:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dcc:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d114      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f9e2 	bl	80031a0 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	e00a      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fe f9de 	bl	80031a0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e319      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ee      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e10:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	4901      	ldr	r1, [pc, #4]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	0ffffcff 	.word	0x0ffffcff
 8004e34:	4baa      	ldr	r3, [pc, #680]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4aa9      	ldr	r2, [pc, #676]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e3e:	6093      	str	r3, [r2, #8]
 8004e40:	4ba7      	ldr	r3, [pc, #668]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	49a4      	ldr	r1, [pc, #656]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e5e:	4ba0      	ldr	r3, [pc, #640]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e64:	4a9e      	ldr	r2, [pc, #632]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	4999      	ldr	r1, [pc, #612]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8c:	4b94      	ldr	r3, [pc, #592]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9a:	4991      	ldr	r1, [pc, #580]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eae:	4b8c      	ldr	r3, [pc, #560]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ebc:	4988      	ldr	r1, [pc, #544]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed0:	4b83      	ldr	r3, [pc, #524]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ede:	4980      	ldr	r1, [pc, #512]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	4977      	ldr	r1, [pc, #476]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f14:	4b72      	ldr	r3, [pc, #456]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	496f      	ldr	r1, [pc, #444]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f36:	4b6a      	ldr	r3, [pc, #424]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f023 020c 	bic.w	r2, r3, #12
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f44:	4966      	ldr	r1, [pc, #408]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f58:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	495e      	ldr	r1, [pc, #376]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f7a:	4b59      	ldr	r3, [pc, #356]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	4955      	ldr	r1, [pc, #340]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f9c:	4b50      	ldr	r3, [pc, #320]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	494d      	ldr	r1, [pc, #308]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fbe:	4b48      	ldr	r3, [pc, #288]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fcc:	4944      	ldr	r1, [pc, #272]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fee:	493c      	ldr	r1, [pc, #240]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005008:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005010:	4933      	ldr	r1, [pc, #204]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005024:	4b2e      	ldr	r3, [pc, #184]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005032:	492b      	ldr	r1, [pc, #172]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005054:	4922      	ldr	r1, [pc, #136]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005064:	d101      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005076:	2301      	movs	r3, #1
 8005078:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005086:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005094:	4912      	ldr	r1, [pc, #72]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a8:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b8:	4909      	ldr	r1, [pc, #36]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d006      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80d9 	beq.w	8005286 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d4:	4b02      	ldr	r3, [pc, #8]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a01      	ldr	r2, [pc, #4]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050de:	e001      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fe f85b 	bl	80031a0 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ee:	f7fe f857 	bl	80031a0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b64      	cmp	r3, #100	@ 0x64
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e194      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005100:	4b6c      	ldr	r3, [pc, #432]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d021      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005120:	4b64      	ldr	r3, [pc, #400]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800512e:	4b61      	ldr	r3, [pc, #388]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005134:	0e1b      	lsrs	r3, r3, #24
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	019a      	lsls	r2, r3, #6
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	071b      	lsls	r3, r3, #28
 8005154:	4957      	ldr	r1, [pc, #348]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02e      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005186:	d129      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005188:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005196:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800519c:	0f1b      	lsrs	r3, r3, #28
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	019a      	lsls	r2, r3, #6
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	071b      	lsls	r3, r3, #28
 80051bc:	493d      	ldr	r1, [pc, #244]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051c4:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ca:	f023 021f 	bic.w	r2, r3, #31
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	3b01      	subs	r3, #1
 80051d4:	4937      	ldr	r1, [pc, #220]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01d      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051e8:	4b32      	ldr	r3, [pc, #200]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ee:	0e1b      	lsrs	r3, r3, #24
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051f6:	4b2f      	ldr	r3, [pc, #188]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fc:	0f1b      	lsrs	r3, r3, #28
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	019a      	lsls	r2, r3, #6
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	431a      	orrs	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	071b      	lsls	r3, r3, #28
 800521c:	4925      	ldr	r1, [pc, #148]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d011      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	019a      	lsls	r2, r3, #6
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	061b      	lsls	r3, r3, #24
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	071b      	lsls	r3, r3, #28
 800524c:	4919      	ldr	r1, [pc, #100]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005254:	4b17      	ldr	r3, [pc, #92]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800525e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005260:	f7fd ff9e 	bl	80031a0 <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005268:	f7fd ff9a 	bl	80031a0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	@ 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0d7      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800527a:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b01      	cmp	r3, #1
 800528a:	f040 80cd 	bne.w	8005428 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800528e:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a08      	ldr	r2, [pc, #32]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529a:	f7fd ff81 	bl	80031a0 <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052a2:	f7fd ff7d 	bl	80031a0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	@ 0x64
 80052ae:	d903      	bls.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e0ba      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80052b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b8:	4b5e      	ldr	r3, [pc, #376]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052c4:	d0ed      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d02e      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d12a      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052ee:	4b51      	ldr	r3, [pc, #324]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005302:	0f1b      	lsrs	r3, r3, #28
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	019a      	lsls	r2, r3, #6
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	431a      	orrs	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	071b      	lsls	r3, r3, #28
 8005322:	4944      	ldr	r1, [pc, #272]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800532a:	4b42      	ldr	r3, [pc, #264]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800532c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005330:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	493d      	ldr	r1, [pc, #244]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d022      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005358:	d11d      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800535a:	4b36      	ldr	r3, [pc, #216]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005368:	4b32      	ldr	r3, [pc, #200]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	0f1b      	lsrs	r3, r3, #28
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	4929      	ldr	r1, [pc, #164]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d028      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053a2:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	0e1b      	lsrs	r3, r3, #24
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053b0:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	4917      	ldr	r1, [pc, #92]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	4911      	ldr	r1, [pc, #68]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fd fece 	bl	80031a0 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005408:	f7fd feca 	bl	80031a0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	@ 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e007      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005426:	d1ef      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800

08005438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e049      	b.n	80054de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fc58 	bl	8002d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f000 f9f6 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e054      	b.n	80055aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a26      	ldr	r2, [pc, #152]	@ (80055b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d01d      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a22      	ldr	r2, [pc, #136]	@ (80055bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1f      	ldr	r2, [pc, #124]	@ (80055c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1c      	ldr	r2, [pc, #112]	@ (80055cc <HAL_TIM_Base_Start_IT+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d115      	bne.n	8005594 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	4b19      	ldr	r3, [pc, #100]	@ (80055d4 <HAL_TIM_Base_Start_IT+0xec>)
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b06      	cmp	r3, #6
 8005578:	d015      	beq.n	80055a6 <HAL_TIM_Base_Start_IT+0xbe>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d011      	beq.n	80055a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	e008      	b.n	80055a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40010400 	.word	0x40010400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40001800 	.word	0x40001800
 80055d4:	00010007 	.word	0x00010007

080055d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d122      	bne.n	8005634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0202 	mvn.w	r2, #2
 8005604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f905 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f8f7 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f908 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0204 	mvn.w	r2, #4
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8db 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8cd 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8de 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0208 	mvn.w	r2, #8
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2204      	movs	r2, #4
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8b1 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8a3 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8b4 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0210 	mvn.w	r2, #16
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2208      	movs	r2, #8
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f887 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f879 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f88a 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0201 	mvn.w	r2, #1
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fc f894 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b80      	cmp	r3, #128	@ 0x80
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005774:	2b80      	cmp	r3, #128	@ 0x80
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f91a 	bl	80059bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a2:	2b80      	cmp	r3, #128	@ 0x80
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f90d 	bl	80059d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b40      	cmp	r3, #64	@ 0x40
 80057c2:	d10e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f838 	bl	8005852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d10e      	bne.n	800580e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d107      	bne.n	800580e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f06f 0220 	mvn.w	r2, #32
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f8cd 	bl	80059a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a40      	ldr	r2, [pc, #256]	@ (800597c <TIM_Base_SetConfig+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3d      	ldr	r2, [pc, #244]	@ (8005980 <TIM_Base_SetConfig+0x118>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3c      	ldr	r2, [pc, #240]	@ (8005984 <TIM_Base_SetConfig+0x11c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3b      	ldr	r2, [pc, #236]	@ (8005988 <TIM_Base_SetConfig+0x120>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3a      	ldr	r2, [pc, #232]	@ (800598c <TIM_Base_SetConfig+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	@ (800597c <TIM_Base_SetConfig+0x114>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c8:	d027      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005980 <TIM_Base_SetConfig+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d023      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005984 <TIM_Base_SetConfig+0x11c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005988 <TIM_Base_SetConfig+0x120>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a29      	ldr	r2, [pc, #164]	@ (800598c <TIM_Base_SetConfig+0x124>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a28      	ldr	r2, [pc, #160]	@ (8005990 <TIM_Base_SetConfig+0x128>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a27      	ldr	r2, [pc, #156]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a26      	ldr	r2, [pc, #152]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a25      	ldr	r2, [pc, #148]	@ (800599c <TIM_Base_SetConfig+0x134>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a24      	ldr	r2, [pc, #144]	@ (80059a0 <TIM_Base_SetConfig+0x138>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a23      	ldr	r2, [pc, #140]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <TIM_Base_SetConfig+0x114>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0xf8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0c      	ldr	r2, [pc, #48]	@ (800598c <TIM_Base_SetConfig+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40010400 	.word	0x40010400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	40001800 	.word	0x40001800
 80059a0:	40001c00 	.word	0x40001c00
 80059a4:	40002000 	.word	0x40002000

080059a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e040      	b.n	8005a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f9aa 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	@ 0x24
 8005a10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fbe6 	bl	80061f4 <UART_SetConfig>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e022      	b.n	8005a78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fe3e 	bl	80066bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fec5 	bl	8006800 <UART_CheckIdleState>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	@ 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d171      	bne.n	8005b7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_Transmit+0x24>
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e06a      	b.n	8005b7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2221      	movs	r2, #33	@ 0x21
 8005ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab6:	f7fd fb73 	bl	80031a0 <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_UART_Transmit+0x68>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e003      	b.n	8005af0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005af0:	e02c      	b.n	8005b4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	@ 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 feb6 	bl	800686e <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e038      	b.n	8005b7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3302      	adds	r3, #2
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e007      	b.n	8005b3a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1cc      	bne.n	8005af2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2140      	movs	r1, #64	@ 0x40
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fe83 	bl	800686e <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e005      	b.n	8005b7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b08a      	sub	sp, #40	@ 0x28
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d132      	bne.n	8005c04 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_UART_Receive_IT+0x24>
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e02b      	b.n	8005c06 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fefe 	bl	80069fc <UART_Start_Receive_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	e000      	b.n	8005c06 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3728      	adds	r7, #40	@ 0x28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b0ba      	sub	sp, #232	@ 0xe8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005c3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005c3e:	4013      	ands	r3, r2
 8005c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d115      	bne.n	8005c78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00f      	beq.n	8005c78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8297 	beq.w	800619c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
      }
      return;
 8005c76:	e291      	b.n	800619c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8117 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c92:	4b85      	ldr	r3, [pc, #532]	@ (8005ea8 <HAL_UART_IRQHandler+0x298>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 810a 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d011      	beq.n	8005ccc <HAL_UART_IRQHandler+0xbc>
 8005ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <HAL_UART_IRQHandler+0xec>
 8005cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d011      	beq.n	8005d2c <HAL_UART_IRQHandler+0x11c>
 8005d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d22:	f043 0202 	orr.w	r2, r3, #2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d017      	beq.n	8005d68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2208      	movs	r2, #8
 8005d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d5e:	f043 0208 	orr.w	r2, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d012      	beq.n	8005d9a <HAL_UART_IRQHandler+0x18a>
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00c      	beq.n	8005d9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 81fd 	beq.w	80061a0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d005      	beq.n	8005df2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d04f      	beq.n	8005e92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fec8 	bl	8006b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e02:	2b40      	cmp	r3, #64	@ 0x40
 8005e04:	d141      	bne.n	8005e8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1d9      	bne.n	8005e06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5e:	4a13      	ldr	r2, [pc, #76]	@ (8005eac <HAL_UART_IRQHandler+0x29c>)
 8005e60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe f80c 	bl	8003e84 <HAL_DMA_Abort_IT>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d017      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e80:	e00f      	b.n	8005ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f9a0 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	e00b      	b.n	8005ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f99c 	bl	80061c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e007      	b.n	8005ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f998 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005ea0:	e17e      	b.n	80061a0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea2:	bf00      	nop
    return;
 8005ea4:	e17c      	b.n	80061a0 <HAL_UART_IRQHandler+0x590>
 8005ea6:	bf00      	nop
 8005ea8:	04000120 	.word	0x04000120
 8005eac:	08006c51 	.word	0x08006c51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	f040 814c 	bne.w	8006152 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8145 	beq.w	8006152 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 813e 	beq.w	8006152 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2210      	movs	r2, #16
 8005edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	f040 80b6 	bne.w	800605a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005efa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8150 	beq.w	80061a4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	f080 8148 	bcs.w	80061a4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f28:	f000 8086 	beq.w	8006038 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1da      	bne.n	8005f2c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e1      	bne.n	8005f76 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e3      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800601c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e4      	bne.n	8005ff8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd feb6 	bl	8003da4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800604a:	b29b      	uxth	r3, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8c2 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006058:	e0a4      	b.n	80061a4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006066:	b29b      	uxth	r3, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8096 	beq.w	80061a8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800607c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8091 	beq.w	80061a8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800609a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e4      	bne.n	8006086 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	623b      	str	r3, [r7, #32]
   return(result);
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e3      	bne.n	80060bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	60fb      	str	r3, [r7, #12]
   return(result);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	69b9      	ldr	r1, [r7, #24]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	617b      	str	r3, [r7, #20]
   return(result);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e4      	bne.n	8006108 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f846 	bl	80061dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006150:	e02a      	b.n	80061a8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01c      	beq.n	80061ac <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
    }
    return;
 800617a:	e017      	b.n	80061ac <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d012      	beq.n	80061ae <HAL_UART_IRQHandler+0x59e>
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00c      	beq.n	80061ae <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fd71 	bl	8006c7c <UART_EndTransmit_IT>
    return;
 800619a:	e008      	b.n	80061ae <HAL_UART_IRQHandler+0x59e>
      return;
 800619c:	bf00      	nop
 800619e:	e006      	b.n	80061ae <HAL_UART_IRQHandler+0x59e>
    return;
 80061a0:	bf00      	nop
 80061a2:	e004      	b.n	80061ae <HAL_UART_IRQHandler+0x59e>
      return;
 80061a4:	bf00      	nop
 80061a6:	e002      	b.n	80061ae <HAL_UART_IRQHandler+0x59e>
      return;
 80061a8:	bf00      	nop
 80061aa:	e000      	b.n	80061ae <HAL_UART_IRQHandler+0x59e>
    return;
 80061ac:	bf00      	nop
  }

}
 80061ae:	37e8      	adds	r7, #232	@ 0xe8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4ba6      	ldr	r3, [pc, #664]	@ (80064b8 <UART_SetConfig+0x2c4>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	430b      	orrs	r3, r1
 800622a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	430a      	orrs	r2, r1
 8006264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a94      	ldr	r2, [pc, #592]	@ (80064bc <UART_SetConfig+0x2c8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d120      	bne.n	80062b2 <UART_SetConfig+0xbe>
 8006270:	4b93      	ldr	r3, [pc, #588]	@ (80064c0 <UART_SetConfig+0x2cc>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d816      	bhi.n	80062ac <UART_SetConfig+0xb8>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x90>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	08006295 	.word	0x08006295
 8006288:	080062a1 	.word	0x080062a1
 800628c:	0800629b 	.word	0x0800629b
 8006290:	080062a7 	.word	0x080062a7
 8006294:	2301      	movs	r3, #1
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e150      	b.n	800653c <UART_SetConfig+0x348>
 800629a:	2302      	movs	r3, #2
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e14d      	b.n	800653c <UART_SetConfig+0x348>
 80062a0:	2304      	movs	r3, #4
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e14a      	b.n	800653c <UART_SetConfig+0x348>
 80062a6:	2308      	movs	r3, #8
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e147      	b.n	800653c <UART_SetConfig+0x348>
 80062ac:	2310      	movs	r3, #16
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e144      	b.n	800653c <UART_SetConfig+0x348>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a83      	ldr	r2, [pc, #524]	@ (80064c4 <UART_SetConfig+0x2d0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d132      	bne.n	8006322 <UART_SetConfig+0x12e>
 80062bc:	4b80      	ldr	r3, [pc, #512]	@ (80064c0 <UART_SetConfig+0x2cc>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b0c      	cmp	r3, #12
 80062c8:	d828      	bhi.n	800631c <UART_SetConfig+0x128>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0xdc>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006305 	.word	0x08006305
 80062d4:	0800631d 	.word	0x0800631d
 80062d8:	0800631d 	.word	0x0800631d
 80062dc:	0800631d 	.word	0x0800631d
 80062e0:	08006311 	.word	0x08006311
 80062e4:	0800631d 	.word	0x0800631d
 80062e8:	0800631d 	.word	0x0800631d
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	0800630b 	.word	0x0800630b
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006317 	.word	0x08006317
 8006304:	2300      	movs	r3, #0
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e118      	b.n	800653c <UART_SetConfig+0x348>
 800630a:	2302      	movs	r3, #2
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e115      	b.n	800653c <UART_SetConfig+0x348>
 8006310:	2304      	movs	r3, #4
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e112      	b.n	800653c <UART_SetConfig+0x348>
 8006316:	2308      	movs	r3, #8
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e10f      	b.n	800653c <UART_SetConfig+0x348>
 800631c:	2310      	movs	r3, #16
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e10c      	b.n	800653c <UART_SetConfig+0x348>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a68      	ldr	r2, [pc, #416]	@ (80064c8 <UART_SetConfig+0x2d4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d120      	bne.n	800636e <UART_SetConfig+0x17a>
 800632c:	4b64      	ldr	r3, [pc, #400]	@ (80064c0 <UART_SetConfig+0x2cc>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006336:	2b30      	cmp	r3, #48	@ 0x30
 8006338:	d013      	beq.n	8006362 <UART_SetConfig+0x16e>
 800633a:	2b30      	cmp	r3, #48	@ 0x30
 800633c:	d814      	bhi.n	8006368 <UART_SetConfig+0x174>
 800633e:	2b20      	cmp	r3, #32
 8006340:	d009      	beq.n	8006356 <UART_SetConfig+0x162>
 8006342:	2b20      	cmp	r3, #32
 8006344:	d810      	bhi.n	8006368 <UART_SetConfig+0x174>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <UART_SetConfig+0x15c>
 800634a:	2b10      	cmp	r3, #16
 800634c:	d006      	beq.n	800635c <UART_SetConfig+0x168>
 800634e:	e00b      	b.n	8006368 <UART_SetConfig+0x174>
 8006350:	2300      	movs	r3, #0
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e0f2      	b.n	800653c <UART_SetConfig+0x348>
 8006356:	2302      	movs	r3, #2
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e0ef      	b.n	800653c <UART_SetConfig+0x348>
 800635c:	2304      	movs	r3, #4
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e0ec      	b.n	800653c <UART_SetConfig+0x348>
 8006362:	2308      	movs	r3, #8
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e0e9      	b.n	800653c <UART_SetConfig+0x348>
 8006368:	2310      	movs	r3, #16
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e0e6      	b.n	800653c <UART_SetConfig+0x348>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a56      	ldr	r2, [pc, #344]	@ (80064cc <UART_SetConfig+0x2d8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d120      	bne.n	80063ba <UART_SetConfig+0x1c6>
 8006378:	4b51      	ldr	r3, [pc, #324]	@ (80064c0 <UART_SetConfig+0x2cc>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d013      	beq.n	80063ae <UART_SetConfig+0x1ba>
 8006386:	2bc0      	cmp	r3, #192	@ 0xc0
 8006388:	d814      	bhi.n	80063b4 <UART_SetConfig+0x1c0>
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d009      	beq.n	80063a2 <UART_SetConfig+0x1ae>
 800638e:	2b80      	cmp	r3, #128	@ 0x80
 8006390:	d810      	bhi.n	80063b4 <UART_SetConfig+0x1c0>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x1a8>
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d006      	beq.n	80063a8 <UART_SetConfig+0x1b4>
 800639a:	e00b      	b.n	80063b4 <UART_SetConfig+0x1c0>
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e0cc      	b.n	800653c <UART_SetConfig+0x348>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e0c9      	b.n	800653c <UART_SetConfig+0x348>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e0c6      	b.n	800653c <UART_SetConfig+0x348>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0c3      	b.n	800653c <UART_SetConfig+0x348>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e0c0      	b.n	800653c <UART_SetConfig+0x348>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a44      	ldr	r2, [pc, #272]	@ (80064d0 <UART_SetConfig+0x2dc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d125      	bne.n	8006410 <UART_SetConfig+0x21c>
 80063c4:	4b3e      	ldr	r3, [pc, #248]	@ (80064c0 <UART_SetConfig+0x2cc>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d2:	d017      	beq.n	8006404 <UART_SetConfig+0x210>
 80063d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d8:	d817      	bhi.n	800640a <UART_SetConfig+0x216>
 80063da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063de:	d00b      	beq.n	80063f8 <UART_SetConfig+0x204>
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e4:	d811      	bhi.n	800640a <UART_SetConfig+0x216>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <UART_SetConfig+0x1fe>
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ee:	d006      	beq.n	80063fe <UART_SetConfig+0x20a>
 80063f0:	e00b      	b.n	800640a <UART_SetConfig+0x216>
 80063f2:	2300      	movs	r3, #0
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e0a1      	b.n	800653c <UART_SetConfig+0x348>
 80063f8:	2302      	movs	r3, #2
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e09e      	b.n	800653c <UART_SetConfig+0x348>
 80063fe:	2304      	movs	r3, #4
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e09b      	b.n	800653c <UART_SetConfig+0x348>
 8006404:	2308      	movs	r3, #8
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e098      	b.n	800653c <UART_SetConfig+0x348>
 800640a:	2310      	movs	r3, #16
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e095      	b.n	800653c <UART_SetConfig+0x348>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2f      	ldr	r2, [pc, #188]	@ (80064d4 <UART_SetConfig+0x2e0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d125      	bne.n	8006466 <UART_SetConfig+0x272>
 800641a:	4b29      	ldr	r3, [pc, #164]	@ (80064c0 <UART_SetConfig+0x2cc>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006420:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006428:	d017      	beq.n	800645a <UART_SetConfig+0x266>
 800642a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800642e:	d817      	bhi.n	8006460 <UART_SetConfig+0x26c>
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006434:	d00b      	beq.n	800644e <UART_SetConfig+0x25a>
 8006436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643a:	d811      	bhi.n	8006460 <UART_SetConfig+0x26c>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <UART_SetConfig+0x254>
 8006440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006444:	d006      	beq.n	8006454 <UART_SetConfig+0x260>
 8006446:	e00b      	b.n	8006460 <UART_SetConfig+0x26c>
 8006448:	2301      	movs	r3, #1
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e076      	b.n	800653c <UART_SetConfig+0x348>
 800644e:	2302      	movs	r3, #2
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e073      	b.n	800653c <UART_SetConfig+0x348>
 8006454:	2304      	movs	r3, #4
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e070      	b.n	800653c <UART_SetConfig+0x348>
 800645a:	2308      	movs	r3, #8
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e06d      	b.n	800653c <UART_SetConfig+0x348>
 8006460:	2310      	movs	r3, #16
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e06a      	b.n	800653c <UART_SetConfig+0x348>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <UART_SetConfig+0x2e4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d138      	bne.n	80064e2 <UART_SetConfig+0x2ee>
 8006470:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <UART_SetConfig+0x2cc>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006476:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800647a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800647e:	d017      	beq.n	80064b0 <UART_SetConfig+0x2bc>
 8006480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006484:	d82a      	bhi.n	80064dc <UART_SetConfig+0x2e8>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800648a:	d00b      	beq.n	80064a4 <UART_SetConfig+0x2b0>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006490:	d824      	bhi.n	80064dc <UART_SetConfig+0x2e8>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <UART_SetConfig+0x2aa>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649a:	d006      	beq.n	80064aa <UART_SetConfig+0x2b6>
 800649c:	e01e      	b.n	80064dc <UART_SetConfig+0x2e8>
 800649e:	2300      	movs	r3, #0
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e04b      	b.n	800653c <UART_SetConfig+0x348>
 80064a4:	2302      	movs	r3, #2
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e048      	b.n	800653c <UART_SetConfig+0x348>
 80064aa:	2304      	movs	r3, #4
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e045      	b.n	800653c <UART_SetConfig+0x348>
 80064b0:	2308      	movs	r3, #8
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e042      	b.n	800653c <UART_SetConfig+0x348>
 80064b6:	bf00      	nop
 80064b8:	efff69f3 	.word	0xefff69f3
 80064bc:	40011000 	.word	0x40011000
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40004400 	.word	0x40004400
 80064c8:	40004800 	.word	0x40004800
 80064cc:	40004c00 	.word	0x40004c00
 80064d0:	40005000 	.word	0x40005000
 80064d4:	40011400 	.word	0x40011400
 80064d8:	40007800 	.word	0x40007800
 80064dc:	2310      	movs	r3, #16
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e02c      	b.n	800653c <UART_SetConfig+0x348>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a72      	ldr	r2, [pc, #456]	@ (80066b0 <UART_SetConfig+0x4bc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0x344>
 80064ec:	4b71      	ldr	r3, [pc, #452]	@ (80066b4 <UART_SetConfig+0x4c0>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80064f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064fa:	d017      	beq.n	800652c <UART_SetConfig+0x338>
 80064fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006500:	d817      	bhi.n	8006532 <UART_SetConfig+0x33e>
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006506:	d00b      	beq.n	8006520 <UART_SetConfig+0x32c>
 8006508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650c:	d811      	bhi.n	8006532 <UART_SetConfig+0x33e>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <UART_SetConfig+0x326>
 8006512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006516:	d006      	beq.n	8006526 <UART_SetConfig+0x332>
 8006518:	e00b      	b.n	8006532 <UART_SetConfig+0x33e>
 800651a:	2300      	movs	r3, #0
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e00d      	b.n	800653c <UART_SetConfig+0x348>
 8006520:	2302      	movs	r3, #2
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e00a      	b.n	800653c <UART_SetConfig+0x348>
 8006526:	2304      	movs	r3, #4
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e007      	b.n	800653c <UART_SetConfig+0x348>
 800652c:	2308      	movs	r3, #8
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e004      	b.n	800653c <UART_SetConfig+0x348>
 8006532:	2310      	movs	r3, #16
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e001      	b.n	800653c <UART_SetConfig+0x348>
 8006538:	2310      	movs	r3, #16
 800653a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006544:	d15b      	bne.n	80065fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d828      	bhi.n	800659e <UART_SetConfig+0x3aa>
 800654c:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <UART_SetConfig+0x360>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	0800659f 	.word	0x0800659f
 8006564:	0800658f 	.word	0x0800658f
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800659f 	.word	0x0800659f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006578:	f7fe fb46 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 800657c:	61b8      	str	r0, [r7, #24]
        break;
 800657e:	e013      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fe fb56 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b4b      	ldr	r3, [pc, #300]	@ (80066b8 <UART_SetConfig+0x4c4>)
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e00c      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7fe fa69 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8006592:	61b8      	str	r0, [r7, #24]
        break;
 8006594:	e008      	b.n	80065a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e004      	b.n	80065a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	77bb      	strb	r3, [r7, #30]
        break;
 80065a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d074      	beq.n	8006698 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	005a      	lsls	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	441a      	add	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d916      	bls.n	80065f8 <UART_SetConfig+0x404>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d212      	bcs.n	80065f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f023 030f 	bic.w	r3, r3, #15
 80065da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	89fa      	ldrh	r2, [r7, #14]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e04f      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	77bb      	strb	r3, [r7, #30]
 80065fc:	e04c      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d828      	bhi.n	8006656 <UART_SetConfig+0x462>
 8006604:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <UART_SetConfig+0x418>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006631 	.word	0x08006631
 8006610:	08006639 	.word	0x08006639
 8006614:	08006641 	.word	0x08006641
 8006618:	08006657 	.word	0x08006657
 800661c:	08006647 	.word	0x08006647
 8006620:	08006657 	.word	0x08006657
 8006624:	08006657 	.word	0x08006657
 8006628:	08006657 	.word	0x08006657
 800662c:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fe faea 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006634:	61b8      	str	r0, [r7, #24]
        break;
 8006636:	e013      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fe fafa 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <UART_SetConfig+0x4c4>)
 8006642:	61bb      	str	r3, [r7, #24]
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe fa0d 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 800664a:	61b8      	str	r0, [r7, #24]
        break;
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77bb      	strb	r3, [r7, #30]
        break;
 800665e:	bf00      	nop
    }

    if (pclk != 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	085a      	lsrs	r2, r3, #1
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	441a      	add	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d909      	bls.n	8006694 <UART_SetConfig+0x4a0>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006686:	d205      	bcs.n	8006694 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e001      	b.n	8006698 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40007c00 	.word	0x40007c00
 80066b4:	40023800 	.word	0x40023800
 80066b8:	00f42400 	.word	0x00f42400

080066bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01a      	beq.n	80067d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ba:	d10a      	bne.n	80067d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	605a      	str	r2, [r3, #4]
  }
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af02      	add	r7, sp, #8
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006810:	f7fc fcc6 	bl	80031a0 <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10e      	bne.n	8006842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f81b 	bl	800686e <UART_WaitOnFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e011      	b.n	8006866 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b09c      	sub	sp, #112	@ 0x70
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687e:	e0a7      	b.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	f000 80a3 	beq.w	80069d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688a:	f7fc fc89 	bl	80031a0 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800689a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800689c:	2b00      	cmp	r3, #0
 800689e:	d13f      	bne.n	8006920 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80068b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80068cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068f2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068f4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e068      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d050      	beq.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800693c:	d148      	bne.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006946:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800695c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
 8006968:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800696c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e6      	bne.n	8006948 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	613b      	str	r3, [r7, #16]
   return(result);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800699a:	623a      	str	r2, [r7, #32]
 800699c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e010      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	f43f af48 	beq.w	8006880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3770      	adds	r7, #112	@ 0x70
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b097      	sub	sp, #92	@ 0x5c
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2e:	d10e      	bne.n	8006a4e <UART_Start_Receive_IT+0x52>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <UART_Start_Receive_IT+0x48>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a42:	e02d      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	22ff      	movs	r2, #255	@ 0xff
 8006a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a4c:	e028      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <UART_Start_Receive_IT+0x76>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d104      	bne.n	8006a68 <UART_Start_Receive_IT+0x6c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	22ff      	movs	r2, #255	@ 0xff
 8006a62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a66:	e01b      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	227f      	movs	r2, #127	@ 0x7f
 8006a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a70:	e016      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a7a:	d10d      	bne.n	8006a98 <UART_Start_Receive_IT+0x9c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <UART_Start_Receive_IT+0x92>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	227f      	movs	r2, #127	@ 0x7f
 8006a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a8c:	e008      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	223f      	movs	r2, #63	@ 0x3f
 8006a92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a96:	e003      	b.n	8006aa0 <UART_Start_Receive_IT+0xa4>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2222      	movs	r2, #34	@ 0x22
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ad2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aec:	d107      	bne.n	8006afe <UART_Start_Receive_IT+0x102>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a21      	ldr	r2, [pc, #132]	@ (8006b80 <UART_Start_Receive_IT+0x184>)
 8006afa:	669a      	str	r2, [r3, #104]	@ 0x68
 8006afc:	e002      	b.n	8006b04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a20      	ldr	r2, [pc, #128]	@ (8006b84 <UART_Start_Receive_IT+0x188>)
 8006b02:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d019      	beq.n	8006b40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e6      	bne.n	8006b0c <UART_Start_Receive_IT+0x110>
 8006b3e:	e018      	b.n	8006b72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f043 0320 	orr.w	r3, r3, #32
 8006b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	69f9      	ldr	r1, [r7, #28]
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e6      	bne.n	8006b40 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	375c      	adds	r7, #92	@ 0x5c
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	08006e37 	.word	0x08006e37
 8006b84:	08006cd1 	.word	0x08006cd1

08006b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b095      	sub	sp, #84	@ 0x54
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d118      	bne.n	8006c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c44:	bf00      	nop
 8006c46:	3754      	adds	r7, #84	@ 0x54
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff faaa 	bl	80061c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e6      	bne.n	8006c84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fa76 	bl	80061b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc8:	bf00      	nop
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b096      	sub	sp, #88	@ 0x58
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cde:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce8:	2b22      	cmp	r3, #34	@ 0x22
 8006cea:	f040 8098 	bne.w	8006e1e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cf8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006cfc:	b2d9      	uxtb	r1, r3
 8006cfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d08:	400a      	ands	r2, r1
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d17b      	bne.n	8006e2e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	623b      	str	r3, [r7, #32]
   return(result);
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d88:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d12e      	bne.n	8006e16 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69b9      	ldr	r1, [r7, #24]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d103      	bne.n	8006e06 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2210      	movs	r2, #16
 8006e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f9e4 	bl	80061dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e14:	e00b      	b.n	8006e2e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fb f896 	bl	8001f48 <HAL_UART_RxCpltCallback>
}
 8006e1c:	e007      	b.n	8006e2e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0208 	orr.w	r2, r2, #8
 8006e2c:	619a      	str	r2, [r3, #24]
}
 8006e2e:	bf00      	nop
 8006e30:	3758      	adds	r7, #88	@ 0x58
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b096      	sub	sp, #88	@ 0x58
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e44:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4e:	2b22      	cmp	r3, #34	@ 0x22
 8006e50:	f040 8098 	bne.w	8006f84 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e62:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e64:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006e68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e78:	1c9a      	adds	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d17b      	bne.n	8006f94 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d12e      	bne.n	8006f7c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e6      	bne.n	8006f24 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d103      	bne.n	8006f6c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2210      	movs	r2, #16
 8006f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff f931 	bl	80061dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f7a:	e00b      	b.n	8006f94 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fa ffe3 	bl	8001f48 <HAL_UART_RxCpltCallback>
}
 8006f82:	e007      	b.n	8006f94 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0208 	orr.w	r2, r2, #8
 8006f92:	619a      	str	r2, [r3, #24]
}
 8006f94:	bf00      	nop
 8006f96:	3758      	adds	r7, #88	@ 0x58
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <__cvt>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	ec57 6b10 	vmov	r6, r7, d0
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	463b      	mov	r3, r7
 8006fac:	bfbb      	ittet	lt
 8006fae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006fb2:	461f      	movlt	r7, r3
 8006fb4:	2300      	movge	r3, #0
 8006fb6:	232d      	movlt	r3, #45	@ 0x2d
 8006fb8:	700b      	strb	r3, [r1, #0]
 8006fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	f023 0820 	bic.w	r8, r3, #32
 8006fc6:	bfbc      	itt	lt
 8006fc8:	4632      	movlt	r2, r6
 8006fca:	4616      	movlt	r6, r2
 8006fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fd0:	d005      	beq.n	8006fde <__cvt+0x42>
 8006fd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fd6:	d100      	bne.n	8006fda <__cvt+0x3e>
 8006fd8:	3401      	adds	r4, #1
 8006fda:	2102      	movs	r1, #2
 8006fdc:	e000      	b.n	8006fe0 <__cvt+0x44>
 8006fde:	2103      	movs	r1, #3
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	ab02      	add	r3, sp, #8
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	ec47 6b10 	vmov	d0, r6, r7
 8006fec:	4653      	mov	r3, sl
 8006fee:	4622      	mov	r2, r4
 8006ff0:	f001 f876 	bl	80080e0 <_dtoa_r>
 8006ff4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	d119      	bne.n	8007030 <__cvt+0x94>
 8006ffc:	f019 0f01 	tst.w	r9, #1
 8007000:	d00e      	beq.n	8007020 <__cvt+0x84>
 8007002:	eb00 0904 	add.w	r9, r0, r4
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 fd8b 	bl	8000b28 <__aeabi_dcmpeq>
 8007012:	b108      	cbz	r0, 8007018 <__cvt+0x7c>
 8007014:	f8cd 900c 	str.w	r9, [sp, #12]
 8007018:	2230      	movs	r2, #48	@ 0x30
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	454b      	cmp	r3, r9
 800701e:	d31e      	bcc.n	800705e <__cvt+0xc2>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007024:	1b5b      	subs	r3, r3, r5
 8007026:	4628      	mov	r0, r5
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	b004      	add	sp, #16
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007034:	eb00 0904 	add.w	r9, r0, r4
 8007038:	d1e5      	bne.n	8007006 <__cvt+0x6a>
 800703a:	7803      	ldrb	r3, [r0, #0]
 800703c:	2b30      	cmp	r3, #48	@ 0x30
 800703e:	d10a      	bne.n	8007056 <__cvt+0xba>
 8007040:	2200      	movs	r2, #0
 8007042:	2300      	movs	r3, #0
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd6e 	bl	8000b28 <__aeabi_dcmpeq>
 800704c:	b918      	cbnz	r0, 8007056 <__cvt+0xba>
 800704e:	f1c4 0401 	rsb	r4, r4, #1
 8007052:	f8ca 4000 	str.w	r4, [sl]
 8007056:	f8da 3000 	ldr.w	r3, [sl]
 800705a:	4499      	add	r9, r3
 800705c:	e7d3      	b.n	8007006 <__cvt+0x6a>
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	9103      	str	r1, [sp, #12]
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e7d9      	b.n	800701a <__cvt+0x7e>

08007066 <__exponent>:
 8007066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007068:	2900      	cmp	r1, #0
 800706a:	bfba      	itte	lt
 800706c:	4249      	neglt	r1, r1
 800706e:	232d      	movlt	r3, #45	@ 0x2d
 8007070:	232b      	movge	r3, #43	@ 0x2b
 8007072:	2909      	cmp	r1, #9
 8007074:	7002      	strb	r2, [r0, #0]
 8007076:	7043      	strb	r3, [r0, #1]
 8007078:	dd29      	ble.n	80070ce <__exponent+0x68>
 800707a:	f10d 0307 	add.w	r3, sp, #7
 800707e:	461d      	mov	r5, r3
 8007080:	270a      	movs	r7, #10
 8007082:	461a      	mov	r2, r3
 8007084:	fbb1 f6f7 	udiv	r6, r1, r7
 8007088:	fb07 1416 	mls	r4, r7, r6, r1
 800708c:	3430      	adds	r4, #48	@ 0x30
 800708e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007092:	460c      	mov	r4, r1
 8007094:	2c63      	cmp	r4, #99	@ 0x63
 8007096:	f103 33ff 	add.w	r3, r3, #4294967295
 800709a:	4631      	mov	r1, r6
 800709c:	dcf1      	bgt.n	8007082 <__exponent+0x1c>
 800709e:	3130      	adds	r1, #48	@ 0x30
 80070a0:	1e94      	subs	r4, r2, #2
 80070a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070a6:	1c41      	adds	r1, r0, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	42ab      	cmp	r3, r5
 80070ac:	d30a      	bcc.n	80070c4 <__exponent+0x5e>
 80070ae:	f10d 0309 	add.w	r3, sp, #9
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	42ac      	cmp	r4, r5
 80070b6:	bf88      	it	hi
 80070b8:	2300      	movhi	r3, #0
 80070ba:	3302      	adds	r3, #2
 80070bc:	4403      	add	r3, r0
 80070be:	1a18      	subs	r0, r3, r0
 80070c0:	b003      	add	sp, #12
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070cc:	e7ed      	b.n	80070aa <__exponent+0x44>
 80070ce:	2330      	movs	r3, #48	@ 0x30
 80070d0:	3130      	adds	r1, #48	@ 0x30
 80070d2:	7083      	strb	r3, [r0, #2]
 80070d4:	70c1      	strb	r1, [r0, #3]
 80070d6:	1d03      	adds	r3, r0, #4
 80070d8:	e7f1      	b.n	80070be <__exponent+0x58>
	...

080070dc <_printf_float>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b08d      	sub	sp, #52	@ 0x34
 80070e2:	460c      	mov	r4, r1
 80070e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070e8:	4616      	mov	r6, r2
 80070ea:	461f      	mov	r7, r3
 80070ec:	4605      	mov	r5, r0
 80070ee:	f000 feef 	bl	8007ed0 <_localeconv_r>
 80070f2:	6803      	ldr	r3, [r0, #0]
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7f9 f8ea 	bl	80002d0 <strlen>
 80070fc:	2300      	movs	r3, #0
 80070fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007100:	f8d8 3000 	ldr.w	r3, [r8]
 8007104:	9005      	str	r0, [sp, #20]
 8007106:	3307      	adds	r3, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	f103 0208 	add.w	r2, r3, #8
 8007110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007114:	f8d4 b000 	ldr.w	fp, [r4]
 8007118:	f8c8 2000 	str.w	r2, [r8]
 800711c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007120:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	f8cd 8018 	str.w	r8, [sp, #24]
 800712a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800712e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007132:	4b9c      	ldr	r3, [pc, #624]	@ (80073a4 <_printf_float+0x2c8>)
 8007134:	f04f 32ff 	mov.w	r2, #4294967295
 8007138:	f7f9 fd28 	bl	8000b8c <__aeabi_dcmpun>
 800713c:	bb70      	cbnz	r0, 800719c <_printf_float+0xc0>
 800713e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007142:	4b98      	ldr	r3, [pc, #608]	@ (80073a4 <_printf_float+0x2c8>)
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	f7f9 fd02 	bl	8000b50 <__aeabi_dcmple>
 800714c:	bb30      	cbnz	r0, 800719c <_printf_float+0xc0>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 fcf1 	bl	8000b3c <__aeabi_dcmplt>
 800715a:	b110      	cbz	r0, 8007162 <_printf_float+0x86>
 800715c:	232d      	movs	r3, #45	@ 0x2d
 800715e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007162:	4a91      	ldr	r2, [pc, #580]	@ (80073a8 <_printf_float+0x2cc>)
 8007164:	4b91      	ldr	r3, [pc, #580]	@ (80073ac <_printf_float+0x2d0>)
 8007166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800716a:	bf94      	ite	ls
 800716c:	4690      	movls	r8, r2
 800716e:	4698      	movhi	r8, r3
 8007170:	2303      	movs	r3, #3
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	f02b 0304 	bic.w	r3, fp, #4
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	f04f 0900 	mov.w	r9, #0
 800717e:	9700      	str	r7, [sp, #0]
 8007180:	4633      	mov	r3, r6
 8007182:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007184:	4621      	mov	r1, r4
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f9d2 	bl	8007530 <_printf_common>
 800718c:	3001      	adds	r0, #1
 800718e:	f040 808d 	bne.w	80072ac <_printf_float+0x1d0>
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	b00d      	add	sp, #52	@ 0x34
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	f7f9 fcf2 	bl	8000b8c <__aeabi_dcmpun>
 80071a8:	b140      	cbz	r0, 80071bc <_printf_float+0xe0>
 80071aa:	464b      	mov	r3, r9
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	232d      	movlt	r3, #45	@ 0x2d
 80071b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80071b6:	4a7e      	ldr	r2, [pc, #504]	@ (80073b0 <_printf_float+0x2d4>)
 80071b8:	4b7e      	ldr	r3, [pc, #504]	@ (80073b4 <_printf_float+0x2d8>)
 80071ba:	e7d4      	b.n	8007166 <_printf_float+0x8a>
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80071c2:	9206      	str	r2, [sp, #24]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	d13b      	bne.n	8007240 <_printf_float+0x164>
 80071c8:	2306      	movs	r3, #6
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80071d0:	2300      	movs	r3, #0
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80071d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071dc:	ab09      	add	r3, sp, #36	@ 0x24
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	6861      	ldr	r1, [r4, #4]
 80071e2:	ec49 8b10 	vmov	d0, r8, r9
 80071e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071ea:	4628      	mov	r0, r5
 80071ec:	f7ff fed6 	bl	8006f9c <__cvt>
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071f4:	2b47      	cmp	r3, #71	@ 0x47
 80071f6:	4680      	mov	r8, r0
 80071f8:	d129      	bne.n	800724e <_printf_float+0x172>
 80071fa:	1cc8      	adds	r0, r1, #3
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x128>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	dd41      	ble.n	8007288 <_printf_float+0x1ac>
 8007204:	f1aa 0a02 	sub.w	sl, sl, #2
 8007208:	fa5f fa8a 	uxtb.w	sl, sl
 800720c:	3901      	subs	r1, #1
 800720e:	4652      	mov	r2, sl
 8007210:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007214:	9109      	str	r1, [sp, #36]	@ 0x24
 8007216:	f7ff ff26 	bl	8007066 <__exponent>
 800721a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800721c:	1813      	adds	r3, r2, r0
 800721e:	2a01      	cmp	r2, #1
 8007220:	4681      	mov	r9, r0
 8007222:	6123      	str	r3, [r4, #16]
 8007224:	dc02      	bgt.n	800722c <_printf_float+0x150>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	07d2      	lsls	r2, r2, #31
 800722a:	d501      	bpl.n	8007230 <_printf_float+0x154>
 800722c:	3301      	adds	r3, #1
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0a2      	beq.n	800717e <_printf_float+0xa2>
 8007238:	232d      	movs	r3, #45	@ 0x2d
 800723a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723e:	e79e      	b.n	800717e <_printf_float+0xa2>
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	2a47      	cmp	r2, #71	@ 0x47
 8007244:	d1c2      	bne.n	80071cc <_printf_float+0xf0>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1c0      	bne.n	80071cc <_printf_float+0xf0>
 800724a:	2301      	movs	r3, #1
 800724c:	e7bd      	b.n	80071ca <_printf_float+0xee>
 800724e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007252:	d9db      	bls.n	800720c <_printf_float+0x130>
 8007254:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007258:	d118      	bne.n	800728c <_printf_float+0x1b0>
 800725a:	2900      	cmp	r1, #0
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	dd0b      	ble.n	8007278 <_printf_float+0x19c>
 8007260:	6121      	str	r1, [r4, #16]
 8007262:	b913      	cbnz	r3, 800726a <_printf_float+0x18e>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	07d0      	lsls	r0, r2, #31
 8007268:	d502      	bpl.n	8007270 <_printf_float+0x194>
 800726a:	3301      	adds	r3, #1
 800726c:	440b      	add	r3, r1
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	e7db      	b.n	8007230 <_printf_float+0x154>
 8007278:	b913      	cbnz	r3, 8007280 <_printf_float+0x1a4>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	07d2      	lsls	r2, r2, #31
 800727e:	d501      	bpl.n	8007284 <_printf_float+0x1a8>
 8007280:	3302      	adds	r3, #2
 8007282:	e7f4      	b.n	800726e <_printf_float+0x192>
 8007284:	2301      	movs	r3, #1
 8007286:	e7f2      	b.n	800726e <_printf_float+0x192>
 8007288:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	4299      	cmp	r1, r3
 8007290:	db05      	blt.n	800729e <_printf_float+0x1c2>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	6121      	str	r1, [r4, #16]
 8007296:	07d8      	lsls	r0, r3, #31
 8007298:	d5ea      	bpl.n	8007270 <_printf_float+0x194>
 800729a:	1c4b      	adds	r3, r1, #1
 800729c:	e7e7      	b.n	800726e <_printf_float+0x192>
 800729e:	2900      	cmp	r1, #0
 80072a0:	bfd4      	ite	le
 80072a2:	f1c1 0202 	rsble	r2, r1, #2
 80072a6:	2201      	movgt	r2, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	e7e0      	b.n	800726e <_printf_float+0x192>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	055a      	lsls	r2, r3, #21
 80072b0:	d407      	bmi.n	80072c2 <_printf_float+0x1e6>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	4642      	mov	r2, r8
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	d12b      	bne.n	8007318 <_printf_float+0x23c>
 80072c0:	e767      	b.n	8007192 <_printf_float+0xb6>
 80072c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072c6:	f240 80dd 	bls.w	8007484 <_printf_float+0x3a8>
 80072ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ce:	2200      	movs	r2, #0
 80072d0:	2300      	movs	r3, #0
 80072d2:	f7f9 fc29 	bl	8000b28 <__aeabi_dcmpeq>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d033      	beq.n	8007342 <_printf_float+0x266>
 80072da:	4a37      	ldr	r2, [pc, #220]	@ (80073b8 <_printf_float+0x2dc>)
 80072dc:	2301      	movs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f af54 	beq.w	8007192 <_printf_float+0xb6>
 80072ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072ee:	4543      	cmp	r3, r8
 80072f0:	db02      	blt.n	80072f8 <_printf_float+0x21c>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	07d8      	lsls	r0, r3, #31
 80072f6:	d50f      	bpl.n	8007318 <_printf_float+0x23c>
 80072f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af45 	beq.w	8007192 <_printf_float+0xb6>
 8007308:	f04f 0900 	mov.w	r9, #0
 800730c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007310:	f104 0a1a 	add.w	sl, r4, #26
 8007314:	45c8      	cmp	r8, r9
 8007316:	dc09      	bgt.n	800732c <_printf_float+0x250>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	079b      	lsls	r3, r3, #30
 800731c:	f100 8103 	bmi.w	8007526 <_printf_float+0x44a>
 8007320:	68e0      	ldr	r0, [r4, #12]
 8007322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007324:	4298      	cmp	r0, r3
 8007326:	bfb8      	it	lt
 8007328:	4618      	movlt	r0, r3
 800732a:	e734      	b.n	8007196 <_printf_float+0xba>
 800732c:	2301      	movs	r3, #1
 800732e:	4652      	mov	r2, sl
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f af2b 	beq.w	8007192 <_printf_float+0xb6>
 800733c:	f109 0901 	add.w	r9, r9, #1
 8007340:	e7e8      	b.n	8007314 <_printf_float+0x238>
 8007342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc39      	bgt.n	80073bc <_printf_float+0x2e0>
 8007348:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <_printf_float+0x2dc>)
 800734a:	2301      	movs	r3, #1
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f af1d 	beq.w	8007192 <_printf_float+0xb6>
 8007358:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800735c:	ea59 0303 	orrs.w	r3, r9, r3
 8007360:	d102      	bne.n	8007368 <_printf_float+0x28c>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	07d9      	lsls	r1, r3, #31
 8007366:	d5d7      	bpl.n	8007318 <_printf_float+0x23c>
 8007368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af0d 	beq.w	8007192 <_printf_float+0xb6>
 8007378:	f04f 0a00 	mov.w	sl, #0
 800737c:	f104 0b1a 	add.w	fp, r4, #26
 8007380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007382:	425b      	negs	r3, r3
 8007384:	4553      	cmp	r3, sl
 8007386:	dc01      	bgt.n	800738c <_printf_float+0x2b0>
 8007388:	464b      	mov	r3, r9
 800738a:	e793      	b.n	80072b4 <_printf_float+0x1d8>
 800738c:	2301      	movs	r3, #1
 800738e:	465a      	mov	r2, fp
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f aefb 	beq.w	8007192 <_printf_float+0xb6>
 800739c:	f10a 0a01 	add.w	sl, sl, #1
 80073a0:	e7ee      	b.n	8007380 <_printf_float+0x2a4>
 80073a2:	bf00      	nop
 80073a4:	7fefffff 	.word	0x7fefffff
 80073a8:	0800b80c 	.word	0x0800b80c
 80073ac:	0800b810 	.word	0x0800b810
 80073b0:	0800b814 	.word	0x0800b814
 80073b4:	0800b818 	.word	0x0800b818
 80073b8:	0800b81c 	.word	0x0800b81c
 80073bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073c2:	4553      	cmp	r3, sl
 80073c4:	bfa8      	it	ge
 80073c6:	4653      	movge	r3, sl
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	4699      	mov	r9, r3
 80073cc:	dc36      	bgt.n	800743c <_printf_float+0x360>
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d6:	f104 021a 	add.w	r2, r4, #26
 80073da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073dc:	9306      	str	r3, [sp, #24]
 80073de:	eba3 0309 	sub.w	r3, r3, r9
 80073e2:	455b      	cmp	r3, fp
 80073e4:	dc31      	bgt.n	800744a <_printf_float+0x36e>
 80073e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e8:	459a      	cmp	sl, r3
 80073ea:	dc3a      	bgt.n	8007462 <_printf_float+0x386>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	07da      	lsls	r2, r3, #31
 80073f0:	d437      	bmi.n	8007462 <_printf_float+0x386>
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	ebaa 0903 	sub.w	r9, sl, r3
 80073f8:	9b06      	ldr	r3, [sp, #24]
 80073fa:	ebaa 0303 	sub.w	r3, sl, r3
 80073fe:	4599      	cmp	r9, r3
 8007400:	bfa8      	it	ge
 8007402:	4699      	movge	r9, r3
 8007404:	f1b9 0f00 	cmp.w	r9, #0
 8007408:	dc33      	bgt.n	8007472 <_printf_float+0x396>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007412:	f104 0b1a 	add.w	fp, r4, #26
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	ebaa 0303 	sub.w	r3, sl, r3
 800741c:	eba3 0309 	sub.w	r3, r3, r9
 8007420:	4543      	cmp	r3, r8
 8007422:	f77f af79 	ble.w	8007318 <_printf_float+0x23c>
 8007426:	2301      	movs	r3, #1
 8007428:	465a      	mov	r2, fp
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f aeae 	beq.w	8007192 <_printf_float+0xb6>
 8007436:	f108 0801 	add.w	r8, r8, #1
 800743a:	e7ec      	b.n	8007416 <_printf_float+0x33a>
 800743c:	4642      	mov	r2, r8
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1c2      	bne.n	80073ce <_printf_float+0x2f2>
 8007448:	e6a3      	b.n	8007192 <_printf_float+0xb6>
 800744a:	2301      	movs	r3, #1
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	9206      	str	r2, [sp, #24]
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae9c 	beq.w	8007192 <_printf_float+0xb6>
 800745a:	9a06      	ldr	r2, [sp, #24]
 800745c:	f10b 0b01 	add.w	fp, fp, #1
 8007460:	e7bb      	b.n	80073da <_printf_float+0x2fe>
 8007462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	d1c0      	bne.n	80073f2 <_printf_float+0x316>
 8007470:	e68f      	b.n	8007192 <_printf_float+0xb6>
 8007472:	9a06      	ldr	r2, [sp, #24]
 8007474:	464b      	mov	r3, r9
 8007476:	4442      	add	r2, r8
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	d1c3      	bne.n	800740a <_printf_float+0x32e>
 8007482:	e686      	b.n	8007192 <_printf_float+0xb6>
 8007484:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007488:	f1ba 0f01 	cmp.w	sl, #1
 800748c:	dc01      	bgt.n	8007492 <_printf_float+0x3b6>
 800748e:	07db      	lsls	r3, r3, #31
 8007490:	d536      	bpl.n	8007500 <_printf_float+0x424>
 8007492:	2301      	movs	r3, #1
 8007494:	4642      	mov	r2, r8
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae78 	beq.w	8007192 <_printf_float+0xb6>
 80074a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f ae70 	beq.w	8007192 <_printf_float+0xb6>
 80074b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074be:	f7f9 fb33 	bl	8000b28 <__aeabi_dcmpeq>
 80074c2:	b9c0      	cbnz	r0, 80074f6 <_printf_float+0x41a>
 80074c4:	4653      	mov	r3, sl
 80074c6:	f108 0201 	add.w	r2, r8, #1
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	d10c      	bne.n	80074ee <_printf_float+0x412>
 80074d4:	e65d      	b.n	8007192 <_printf_float+0xb6>
 80074d6:	2301      	movs	r3, #1
 80074d8:	465a      	mov	r2, fp
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	f43f ae56 	beq.w	8007192 <_printf_float+0xb6>
 80074e6:	f108 0801 	add.w	r8, r8, #1
 80074ea:	45d0      	cmp	r8, sl
 80074ec:	dbf3      	blt.n	80074d6 <_printf_float+0x3fa>
 80074ee:	464b      	mov	r3, r9
 80074f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074f4:	e6df      	b.n	80072b6 <_printf_float+0x1da>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	f104 0b1a 	add.w	fp, r4, #26
 80074fe:	e7f4      	b.n	80074ea <_printf_float+0x40e>
 8007500:	2301      	movs	r3, #1
 8007502:	4642      	mov	r2, r8
 8007504:	e7e1      	b.n	80074ca <_printf_float+0x3ee>
 8007506:	2301      	movs	r3, #1
 8007508:	464a      	mov	r2, r9
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f ae3e 	beq.w	8007192 <_printf_float+0xb6>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	68e3      	ldr	r3, [r4, #12]
 800751c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	4543      	cmp	r3, r8
 8007522:	dcf0      	bgt.n	8007506 <_printf_float+0x42a>
 8007524:	e6fc      	b.n	8007320 <_printf_float+0x244>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	f104 0919 	add.w	r9, r4, #25
 800752e:	e7f4      	b.n	800751a <_printf_float+0x43e>

08007530 <_printf_common>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	4616      	mov	r6, r2
 8007536:	4698      	mov	r8, r3
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007540:	4293      	cmp	r3, r2
 8007542:	bfb8      	it	lt
 8007544:	4613      	movlt	r3, r2
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800754c:	4607      	mov	r7, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b10a      	cbz	r2, 8007556 <_printf_common+0x26>
 8007552:	3301      	adds	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	6833      	ldrmi	r3, [r6, #0]
 800755e:	3302      	addmi	r3, #2
 8007560:	6033      	strmi	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d106      	bne.n	8007578 <_printf_common+0x48>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc26      	bgt.n	80075c6 <_printf_common+0x96>
 8007578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	3b00      	subs	r3, #0
 8007580:	bf18      	it	ne
 8007582:	2301      	movne	r3, #1
 8007584:	0692      	lsls	r2, r2, #26
 8007586:	d42b      	bmi.n	80075e0 <_printf_common+0xb0>
 8007588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800758c:	4641      	mov	r1, r8
 800758e:	4638      	mov	r0, r7
 8007590:	47c8      	blx	r9
 8007592:	3001      	adds	r0, #1
 8007594:	d01e      	beq.n	80075d4 <_printf_common+0xa4>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf02      	ittt	eq
 80075a2:	68e5      	ldreq	r5, [r4, #12]
 80075a4:	6833      	ldreq	r3, [r6, #0]
 80075a6:	1aed      	subeq	r5, r5, r3
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	bf0c      	ite	eq
 80075ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b0:	2500      	movne	r5, #0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bfc4      	itt	gt
 80075b6:	1a9b      	subgt	r3, r3, r2
 80075b8:	18ed      	addgt	r5, r5, r3
 80075ba:	2600      	movs	r6, #0
 80075bc:	341a      	adds	r4, #26
 80075be:	42b5      	cmp	r5, r6
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xc8>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xa8>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4641      	mov	r1, r8
 80075cc:	4638      	mov	r0, r7
 80075ce:	47c8      	blx	r9
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xac>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c6      	b.n	800756e <_printf_common+0x3e>
 80075e0:	18e1      	adds	r1, r4, r3
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	2030      	movs	r0, #48	@ 0x30
 80075e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ea:	4422      	add	r2, r4
 80075ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f4:	3302      	adds	r3, #2
 80075f6:	e7c7      	b.n	8007588 <_printf_common+0x58>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4641      	mov	r1, r8
 80075fe:	4638      	mov	r0, r7
 8007600:	47c8      	blx	r9
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xa4>
 8007606:	3601      	adds	r6, #1
 8007608:	e7d9      	b.n	80075be <_printf_common+0x8e>
	...

0800760c <_printf_i>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	7e0f      	ldrb	r7, [r1, #24]
 8007612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007614:	2f78      	cmp	r7, #120	@ 0x78
 8007616:	4691      	mov	r9, r2
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	469a      	mov	sl, r3
 800761e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007622:	d807      	bhi.n	8007634 <_printf_i+0x28>
 8007624:	2f62      	cmp	r7, #98	@ 0x62
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x32>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 80d2 	beq.w	80077d2 <_printf_i+0x1c6>
 800762e:	2f58      	cmp	r7, #88	@ 0x58
 8007630:	f000 80b9 	beq.w	80077a6 <_printf_i+0x19a>
 8007634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800763c:	e03a      	b.n	80076b4 <_printf_i+0xa8>
 800763e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007642:	2b15      	cmp	r3, #21
 8007644:	d8f6      	bhi.n	8007634 <_printf_i+0x28>
 8007646:	a101      	add	r1, pc, #4	@ (adr r1, 800764c <_printf_i+0x40>)
 8007648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764c:	080076a5 	.word	0x080076a5
 8007650:	080076b9 	.word	0x080076b9
 8007654:	08007635 	.word	0x08007635
 8007658:	08007635 	.word	0x08007635
 800765c:	08007635 	.word	0x08007635
 8007660:	08007635 	.word	0x08007635
 8007664:	080076b9 	.word	0x080076b9
 8007668:	08007635 	.word	0x08007635
 800766c:	08007635 	.word	0x08007635
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	080077b9 	.word	0x080077b9
 800767c:	080076e3 	.word	0x080076e3
 8007680:	08007773 	.word	0x08007773
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077db 	.word	0x080077db
 8007690:	08007635 	.word	0x08007635
 8007694:	080076e3 	.word	0x080076e3
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	0800777b 	.word	0x0800777b
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6032      	str	r2, [r6, #0]
 80076ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e09d      	b.n	80077f4 <_printf_i+0x1e8>
 80076b8:	6833      	ldr	r3, [r6, #0]
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	1d19      	adds	r1, r3, #4
 80076be:	6031      	str	r1, [r6, #0]
 80076c0:	0606      	lsls	r6, r0, #24
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0xbc>
 80076c4:	681d      	ldr	r5, [r3, #0]
 80076c6:	e003      	b.n	80076d0 <_printf_i+0xc4>
 80076c8:	0645      	lsls	r5, r0, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0xb8>
 80076cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	da03      	bge.n	80076dc <_printf_i+0xd0>
 80076d4:	232d      	movs	r3, #45	@ 0x2d
 80076d6:	426d      	negs	r5, r5
 80076d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076dc:	4859      	ldr	r0, [pc, #356]	@ (8007844 <_printf_i+0x238>)
 80076de:	230a      	movs	r3, #10
 80076e0:	e011      	b.n	8007706 <_printf_i+0xfa>
 80076e2:	6821      	ldr	r1, [r4, #0]
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	0608      	lsls	r0, r1, #24
 80076e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076ec:	d402      	bmi.n	80076f4 <_printf_i+0xe8>
 80076ee:	0649      	lsls	r1, r1, #25
 80076f0:	bf48      	it	mi
 80076f2:	b2ad      	uxthmi	r5, r5
 80076f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076f6:	4853      	ldr	r0, [pc, #332]	@ (8007844 <_printf_i+0x238>)
 80076f8:	6033      	str	r3, [r6, #0]
 80076fa:	bf14      	ite	ne
 80076fc:	230a      	movne	r3, #10
 80076fe:	2308      	moveq	r3, #8
 8007700:	2100      	movs	r1, #0
 8007702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007706:	6866      	ldr	r6, [r4, #4]
 8007708:	60a6      	str	r6, [r4, #8]
 800770a:	2e00      	cmp	r6, #0
 800770c:	bfa2      	ittt	ge
 800770e:	6821      	ldrge	r1, [r4, #0]
 8007710:	f021 0104 	bicge.w	r1, r1, #4
 8007714:	6021      	strge	r1, [r4, #0]
 8007716:	b90d      	cbnz	r5, 800771c <_printf_i+0x110>
 8007718:	2e00      	cmp	r6, #0
 800771a:	d04b      	beq.n	80077b4 <_printf_i+0x1a8>
 800771c:	4616      	mov	r6, r2
 800771e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007722:	fb03 5711 	mls	r7, r3, r1, r5
 8007726:	5dc7      	ldrb	r7, [r0, r7]
 8007728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800772c:	462f      	mov	r7, r5
 800772e:	42bb      	cmp	r3, r7
 8007730:	460d      	mov	r5, r1
 8007732:	d9f4      	bls.n	800771e <_printf_i+0x112>
 8007734:	2b08      	cmp	r3, #8
 8007736:	d10b      	bne.n	8007750 <_printf_i+0x144>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07df      	lsls	r7, r3, #31
 800773c:	d508      	bpl.n	8007750 <_printf_i+0x144>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6861      	ldr	r1, [r4, #4]
 8007742:	4299      	cmp	r1, r3
 8007744:	bfde      	ittt	le
 8007746:	2330      	movle	r3, #48	@ 0x30
 8007748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800774c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007750:	1b92      	subs	r2, r2, r6
 8007752:	6122      	str	r2, [r4, #16]
 8007754:	f8cd a000 	str.w	sl, [sp]
 8007758:	464b      	mov	r3, r9
 800775a:	aa03      	add	r2, sp, #12
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fee6 	bl	8007530 <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	d14a      	bne.n	80077fe <_printf_i+0x1f2>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	b004      	add	sp, #16
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	4833      	ldr	r0, [pc, #204]	@ (8007848 <_printf_i+0x23c>)
 800777c:	2778      	movs	r7, #120	@ 0x78
 800777e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	6831      	ldr	r1, [r6, #0]
 8007786:	061f      	lsls	r7, r3, #24
 8007788:	f851 5b04 	ldr.w	r5, [r1], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0x188>
 800778e:	065f      	lsls	r7, r3, #25
 8007790:	bf48      	it	mi
 8007792:	b2ad      	uxthmi	r5, r5
 8007794:	6031      	str	r1, [r6, #0]
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	bf44      	itt	mi
 800779a:	f043 0320 	orrmi.w	r3, r3, #32
 800779e:	6023      	strmi	r3, [r4, #0]
 80077a0:	b11d      	cbz	r5, 80077aa <_printf_i+0x19e>
 80077a2:	2310      	movs	r3, #16
 80077a4:	e7ac      	b.n	8007700 <_printf_i+0xf4>
 80077a6:	4827      	ldr	r0, [pc, #156]	@ (8007844 <_printf_i+0x238>)
 80077a8:	e7e9      	b.n	800777e <_printf_i+0x172>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f023 0320 	bic.w	r3, r3, #32
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	e7f6      	b.n	80077a2 <_printf_i+0x196>
 80077b4:	4616      	mov	r6, r2
 80077b6:	e7bd      	b.n	8007734 <_printf_i+0x128>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	6961      	ldr	r1, [r4, #20]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	062e      	lsls	r6, r5, #24
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0x1c0>
 80077c8:	6019      	str	r1, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <_printf_i+0x1c6>
 80077cc:	0668      	lsls	r0, r5, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0x1bc>
 80077d0:	8019      	strh	r1, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	4616      	mov	r6, r2
 80077d8:	e7bc      	b.n	8007754 <_printf_i+0x148>
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	1d1a      	adds	r2, r3, #4
 80077de:	6032      	str	r2, [r6, #0]
 80077e0:	681e      	ldr	r6, [r3, #0]
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	2100      	movs	r1, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7f8 fd22 	bl	8000230 <memchr>
 80077ec:	b108      	cbz	r0, 80077f2 <_printf_i+0x1e6>
 80077ee:	1b80      	subs	r0, r0, r6
 80077f0:	6060      	str	r0, [r4, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	2300      	movs	r3, #0
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077fc:	e7aa      	b.n	8007754 <_printf_i+0x148>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	4632      	mov	r2, r6
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d0ad      	beq.n	8007768 <_printf_i+0x15c>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	d413      	bmi.n	800783a <_printf_i+0x22e>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	4298      	cmp	r0, r3
 8007818:	bfb8      	it	lt
 800781a:	4618      	movlt	r0, r3
 800781c:	e7a6      	b.n	800776c <_printf_i+0x160>
 800781e:	2301      	movs	r3, #1
 8007820:	4632      	mov	r2, r6
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d09d      	beq.n	8007768 <_printf_i+0x15c>
 800782c:	3501      	adds	r5, #1
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	9903      	ldr	r1, [sp, #12]
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	42ab      	cmp	r3, r5
 8007836:	dcf2      	bgt.n	800781e <_printf_i+0x212>
 8007838:	e7eb      	b.n	8007812 <_printf_i+0x206>
 800783a:	2500      	movs	r5, #0
 800783c:	f104 0619 	add.w	r6, r4, #25
 8007840:	e7f5      	b.n	800782e <_printf_i+0x222>
 8007842:	bf00      	nop
 8007844:	0800b81e 	.word	0x0800b81e
 8007848:	0800b82f 	.word	0x0800b82f

0800784c <_scanf_float>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	b087      	sub	sp, #28
 8007852:	4617      	mov	r7, r2
 8007854:	9303      	str	r3, [sp, #12]
 8007856:	688b      	ldr	r3, [r1, #8]
 8007858:	1e5a      	subs	r2, r3, #1
 800785a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800785e:	bf81      	itttt	hi
 8007860:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007864:	eb03 0b05 	addhi.w	fp, r3, r5
 8007868:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800786c:	608b      	strhi	r3, [r1, #8]
 800786e:	680b      	ldr	r3, [r1, #0]
 8007870:	460a      	mov	r2, r1
 8007872:	f04f 0500 	mov.w	r5, #0
 8007876:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800787a:	f842 3b1c 	str.w	r3, [r2], #28
 800787e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007882:	4680      	mov	r8, r0
 8007884:	460c      	mov	r4, r1
 8007886:	bf98      	it	ls
 8007888:	f04f 0b00 	movls.w	fp, #0
 800788c:	9201      	str	r2, [sp, #4]
 800788e:	4616      	mov	r6, r2
 8007890:	46aa      	mov	sl, r5
 8007892:	46a9      	mov	r9, r5
 8007894:	9502      	str	r5, [sp, #8]
 8007896:	68a2      	ldr	r2, [r4, #8]
 8007898:	b152      	cbz	r2, 80078b0 <_scanf_float+0x64>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b4e      	cmp	r3, #78	@ 0x4e
 80078a0:	d864      	bhi.n	800796c <_scanf_float+0x120>
 80078a2:	2b40      	cmp	r3, #64	@ 0x40
 80078a4:	d83c      	bhi.n	8007920 <_scanf_float+0xd4>
 80078a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80078aa:	b2c8      	uxtb	r0, r1
 80078ac:	280e      	cmp	r0, #14
 80078ae:	d93a      	bls.n	8007926 <_scanf_float+0xda>
 80078b0:	f1b9 0f00 	cmp.w	r9, #0
 80078b4:	d003      	beq.n	80078be <_scanf_float+0x72>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c2:	f1ba 0f01 	cmp.w	sl, #1
 80078c6:	f200 8117 	bhi.w	8007af8 <_scanf_float+0x2ac>
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	429e      	cmp	r6, r3
 80078ce:	f200 8108 	bhi.w	8007ae2 <_scanf_float+0x296>
 80078d2:	2001      	movs	r0, #1
 80078d4:	b007      	add	sp, #28
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078da:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80078de:	2a0d      	cmp	r2, #13
 80078e0:	d8e6      	bhi.n	80078b0 <_scanf_float+0x64>
 80078e2:	a101      	add	r1, pc, #4	@ (adr r1, 80078e8 <_scanf_float+0x9c>)
 80078e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078e8:	08007a2f 	.word	0x08007a2f
 80078ec:	080078b1 	.word	0x080078b1
 80078f0:	080078b1 	.word	0x080078b1
 80078f4:	080078b1 	.word	0x080078b1
 80078f8:	08007a8f 	.word	0x08007a8f
 80078fc:	08007a67 	.word	0x08007a67
 8007900:	080078b1 	.word	0x080078b1
 8007904:	080078b1 	.word	0x080078b1
 8007908:	08007a3d 	.word	0x08007a3d
 800790c:	080078b1 	.word	0x080078b1
 8007910:	080078b1 	.word	0x080078b1
 8007914:	080078b1 	.word	0x080078b1
 8007918:	080078b1 	.word	0x080078b1
 800791c:	080079f5 	.word	0x080079f5
 8007920:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007924:	e7db      	b.n	80078de <_scanf_float+0x92>
 8007926:	290e      	cmp	r1, #14
 8007928:	d8c2      	bhi.n	80078b0 <_scanf_float+0x64>
 800792a:	a001      	add	r0, pc, #4	@ (adr r0, 8007930 <_scanf_float+0xe4>)
 800792c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007930:	080079e5 	.word	0x080079e5
 8007934:	080078b1 	.word	0x080078b1
 8007938:	080079e5 	.word	0x080079e5
 800793c:	08007a7b 	.word	0x08007a7b
 8007940:	080078b1 	.word	0x080078b1
 8007944:	0800798d 	.word	0x0800798d
 8007948:	080079cb 	.word	0x080079cb
 800794c:	080079cb 	.word	0x080079cb
 8007950:	080079cb 	.word	0x080079cb
 8007954:	080079cb 	.word	0x080079cb
 8007958:	080079cb 	.word	0x080079cb
 800795c:	080079cb 	.word	0x080079cb
 8007960:	080079cb 	.word	0x080079cb
 8007964:	080079cb 	.word	0x080079cb
 8007968:	080079cb 	.word	0x080079cb
 800796c:	2b6e      	cmp	r3, #110	@ 0x6e
 800796e:	d809      	bhi.n	8007984 <_scanf_float+0x138>
 8007970:	2b60      	cmp	r3, #96	@ 0x60
 8007972:	d8b2      	bhi.n	80078da <_scanf_float+0x8e>
 8007974:	2b54      	cmp	r3, #84	@ 0x54
 8007976:	d07b      	beq.n	8007a70 <_scanf_float+0x224>
 8007978:	2b59      	cmp	r3, #89	@ 0x59
 800797a:	d199      	bne.n	80078b0 <_scanf_float+0x64>
 800797c:	2d07      	cmp	r5, #7
 800797e:	d197      	bne.n	80078b0 <_scanf_float+0x64>
 8007980:	2508      	movs	r5, #8
 8007982:	e02c      	b.n	80079de <_scanf_float+0x192>
 8007984:	2b74      	cmp	r3, #116	@ 0x74
 8007986:	d073      	beq.n	8007a70 <_scanf_float+0x224>
 8007988:	2b79      	cmp	r3, #121	@ 0x79
 800798a:	e7f6      	b.n	800797a <_scanf_float+0x12e>
 800798c:	6821      	ldr	r1, [r4, #0]
 800798e:	05c8      	lsls	r0, r1, #23
 8007990:	d51b      	bpl.n	80079ca <_scanf_float+0x17e>
 8007992:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007996:	6021      	str	r1, [r4, #0]
 8007998:	f109 0901 	add.w	r9, r9, #1
 800799c:	f1bb 0f00 	cmp.w	fp, #0
 80079a0:	d003      	beq.n	80079aa <_scanf_float+0x15e>
 80079a2:	3201      	adds	r2, #1
 80079a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a8:	60a2      	str	r2, [r4, #8]
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	3301      	adds	r3, #1
 80079b4:	6123      	str	r3, [r4, #16]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	f340 8087 	ble.w	8007ad0 <_scanf_float+0x284>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	e765      	b.n	8007896 <_scanf_float+0x4a>
 80079ca:	eb1a 0105 	adds.w	r1, sl, r5
 80079ce:	f47f af6f 	bne.w	80078b0 <_scanf_float+0x64>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	460d      	mov	r5, r1
 80079dc:	468a      	mov	sl, r1
 80079de:	f806 3b01 	strb.w	r3, [r6], #1
 80079e2:	e7e2      	b.n	80079aa <_scanf_float+0x15e>
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	0610      	lsls	r0, r2, #24
 80079e8:	f57f af62 	bpl.w	80078b0 <_scanf_float+0x64>
 80079ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079f0:	6022      	str	r2, [r4, #0]
 80079f2:	e7f4      	b.n	80079de <_scanf_float+0x192>
 80079f4:	f1ba 0f00 	cmp.w	sl, #0
 80079f8:	d10e      	bne.n	8007a18 <_scanf_float+0x1cc>
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	d10e      	bne.n	8007a1e <_scanf_float+0x1d2>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a06:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a0a:	d108      	bne.n	8007a1e <_scanf_float+0x1d2>
 8007a0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a10:	6022      	str	r2, [r4, #0]
 8007a12:	f04f 0a01 	mov.w	sl, #1
 8007a16:	e7e2      	b.n	80079de <_scanf_float+0x192>
 8007a18:	f1ba 0f02 	cmp.w	sl, #2
 8007a1c:	d055      	beq.n	8007aca <_scanf_float+0x27e>
 8007a1e:	2d01      	cmp	r5, #1
 8007a20:	d002      	beq.n	8007a28 <_scanf_float+0x1dc>
 8007a22:	2d04      	cmp	r5, #4
 8007a24:	f47f af44 	bne.w	80078b0 <_scanf_float+0x64>
 8007a28:	3501      	adds	r5, #1
 8007a2a:	b2ed      	uxtb	r5, r5
 8007a2c:	e7d7      	b.n	80079de <_scanf_float+0x192>
 8007a2e:	f1ba 0f01 	cmp.w	sl, #1
 8007a32:	f47f af3d 	bne.w	80078b0 <_scanf_float+0x64>
 8007a36:	f04f 0a02 	mov.w	sl, #2
 8007a3a:	e7d0      	b.n	80079de <_scanf_float+0x192>
 8007a3c:	b97d      	cbnz	r5, 8007a5e <_scanf_float+0x212>
 8007a3e:	f1b9 0f00 	cmp.w	r9, #0
 8007a42:	f47f af38 	bne.w	80078b6 <_scanf_float+0x6a>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a4c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a50:	f040 8108 	bne.w	8007c64 <_scanf_float+0x418>
 8007a54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	2501      	movs	r5, #1
 8007a5c:	e7bf      	b.n	80079de <_scanf_float+0x192>
 8007a5e:	2d03      	cmp	r5, #3
 8007a60:	d0e2      	beq.n	8007a28 <_scanf_float+0x1dc>
 8007a62:	2d05      	cmp	r5, #5
 8007a64:	e7de      	b.n	8007a24 <_scanf_float+0x1d8>
 8007a66:	2d02      	cmp	r5, #2
 8007a68:	f47f af22 	bne.w	80078b0 <_scanf_float+0x64>
 8007a6c:	2503      	movs	r5, #3
 8007a6e:	e7b6      	b.n	80079de <_scanf_float+0x192>
 8007a70:	2d06      	cmp	r5, #6
 8007a72:	f47f af1d 	bne.w	80078b0 <_scanf_float+0x64>
 8007a76:	2507      	movs	r5, #7
 8007a78:	e7b1      	b.n	80079de <_scanf_float+0x192>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	0591      	lsls	r1, r2, #22
 8007a7e:	f57f af17 	bpl.w	80078b0 <_scanf_float+0x64>
 8007a82:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a8c:	e7a7      	b.n	80079de <_scanf_float+0x192>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a94:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a98:	d006      	beq.n	8007aa8 <_scanf_float+0x25c>
 8007a9a:	0550      	lsls	r0, r2, #21
 8007a9c:	f57f af08 	bpl.w	80078b0 <_scanf_float+0x64>
 8007aa0:	f1b9 0f00 	cmp.w	r9, #0
 8007aa4:	f000 80de 	beq.w	8007c64 <_scanf_float+0x418>
 8007aa8:	0591      	lsls	r1, r2, #22
 8007aaa:	bf58      	it	pl
 8007aac:	9902      	ldrpl	r1, [sp, #8]
 8007aae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ab2:	bf58      	it	pl
 8007ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8007ab8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007abc:	bf58      	it	pl
 8007abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ac2:	6022      	str	r2, [r4, #0]
 8007ac4:	f04f 0900 	mov.w	r9, #0
 8007ac8:	e789      	b.n	80079de <_scanf_float+0x192>
 8007aca:	f04f 0a03 	mov.w	sl, #3
 8007ace:	e786      	b.n	80079de <_scanf_float+0x192>
 8007ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4798      	blx	r3
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f43f aedb 	beq.w	8007896 <_scanf_float+0x4a>
 8007ae0:	e6e6      	b.n	80078b0 <_scanf_float+0x64>
 8007ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aea:	463a      	mov	r2, r7
 8007aec:	4640      	mov	r0, r8
 8007aee:	4798      	blx	r3
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	e6e8      	b.n	80078ca <_scanf_float+0x7e>
 8007af8:	1e6b      	subs	r3, r5, #1
 8007afa:	2b06      	cmp	r3, #6
 8007afc:	d824      	bhi.n	8007b48 <_scanf_float+0x2fc>
 8007afe:	2d02      	cmp	r5, #2
 8007b00:	d836      	bhi.n	8007b70 <_scanf_float+0x324>
 8007b02:	9b01      	ldr	r3, [sp, #4]
 8007b04:	429e      	cmp	r6, r3
 8007b06:	f67f aee4 	bls.w	80078d2 <_scanf_float+0x86>
 8007b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b12:	463a      	mov	r2, r7
 8007b14:	4640      	mov	r0, r8
 8007b16:	4798      	blx	r3
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	e7f0      	b.n	8007b02 <_scanf_float+0x2b6>
 8007b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
 8007b2e:	6923      	ldr	r3, [r4, #16]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b38:	fa5f fa8a 	uxtb.w	sl, sl
 8007b3c:	f1ba 0f02 	cmp.w	sl, #2
 8007b40:	d1ee      	bne.n	8007b20 <_scanf_float+0x2d4>
 8007b42:	3d03      	subs	r5, #3
 8007b44:	b2ed      	uxtb	r5, r5
 8007b46:	1b76      	subs	r6, r6, r5
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	05da      	lsls	r2, r3, #23
 8007b4c:	d530      	bpl.n	8007bb0 <_scanf_float+0x364>
 8007b4e:	055b      	lsls	r3, r3, #21
 8007b50:	d511      	bpl.n	8007b76 <_scanf_float+0x32a>
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	429e      	cmp	r6, r3
 8007b56:	f67f aebc 	bls.w	80078d2 <_scanf_float+0x86>
 8007b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b62:	463a      	mov	r2, r7
 8007b64:	4640      	mov	r0, r8
 8007b66:	4798      	blx	r3
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	e7f0      	b.n	8007b52 <_scanf_float+0x306>
 8007b70:	46aa      	mov	sl, r5
 8007b72:	46b3      	mov	fp, r6
 8007b74:	e7de      	b.n	8007b34 <_scanf_float+0x2e8>
 8007b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	2965      	cmp	r1, #101	@ 0x65
 8007b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	d00c      	beq.n	8007ba4 <_scanf_float+0x358>
 8007b8a:	2945      	cmp	r1, #69	@ 0x45
 8007b8c:	d00a      	beq.n	8007ba4 <_scanf_float+0x358>
 8007b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b92:	463a      	mov	r2, r7
 8007b94:	4640      	mov	r0, r8
 8007b96:	4798      	blx	r3
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	1eb5      	subs	r5, r6, #2
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ba8:	463a      	mov	r2, r7
 8007baa:	4640      	mov	r0, r8
 8007bac:	4798      	blx	r3
 8007bae:	462e      	mov	r6, r5
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	f012 0210 	ands.w	r2, r2, #16
 8007bb6:	d001      	beq.n	8007bbc <_scanf_float+0x370>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e68b      	b.n	80078d4 <_scanf_float+0x88>
 8007bbc:	7032      	strb	r2, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc8:	d11c      	bne.n	8007c04 <_scanf_float+0x3b8>
 8007bca:	9b02      	ldr	r3, [sp, #8]
 8007bcc:	454b      	cmp	r3, r9
 8007bce:	eba3 0209 	sub.w	r2, r3, r9
 8007bd2:	d123      	bne.n	8007c1c <_scanf_float+0x3d0>
 8007bd4:	9901      	ldr	r1, [sp, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f002 fbf9 	bl	800a3d0 <_strtod_r>
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f011 0f02 	tst.w	r1, #2
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	f103 0204 	add.w	r2, r3, #4
 8007bf0:	d01f      	beq.n	8007c32 <_scanf_float+0x3e6>
 8007bf2:	9903      	ldr	r1, [sp, #12]
 8007bf4:	600a      	str	r2, [r1, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	e9c3 6700 	strd	r6, r7, [r3]
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60e3      	str	r3, [r4, #12]
 8007c02:	e7d9      	b.n	8007bb8 <_scanf_float+0x36c>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0e4      	beq.n	8007bd4 <_scanf_float+0x388>
 8007c0a:	9905      	ldr	r1, [sp, #20]
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	3101      	adds	r1, #1
 8007c10:	4640      	mov	r0, r8
 8007c12:	f002 fc5d 	bl	800a4d0 <_strtol_r>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	9e05      	ldr	r6, [sp, #20]
 8007c1a:	1ac2      	subs	r2, r0, r3
 8007c1c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c20:	429e      	cmp	r6, r3
 8007c22:	bf28      	it	cs
 8007c24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c28:	4910      	ldr	r1, [pc, #64]	@ (8007c6c <_scanf_float+0x420>)
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f000 f8e4 	bl	8007df8 <siprintf>
 8007c30:	e7d0      	b.n	8007bd4 <_scanf_float+0x388>
 8007c32:	f011 0f04 	tst.w	r1, #4
 8007c36:	9903      	ldr	r1, [sp, #12]
 8007c38:	600a      	str	r2, [r1, #0]
 8007c3a:	d1dc      	bne.n	8007bf6 <_scanf_float+0x3aa>
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 ffa1 	bl	8000b8c <__aeabi_dcmpun>
 8007c4a:	b128      	cbz	r0, 8007c58 <_scanf_float+0x40c>
 8007c4c:	4808      	ldr	r0, [pc, #32]	@ (8007c70 <_scanf_float+0x424>)
 8007c4e:	f000 f9b7 	bl	8007fc0 <nanf>
 8007c52:	ed85 0a00 	vstr	s0, [r5]
 8007c56:	e7d1      	b.n	8007bfc <_scanf_float+0x3b0>
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 fff4 	bl	8000c48 <__aeabi_d2f>
 8007c60:	6028      	str	r0, [r5, #0]
 8007c62:	e7cb      	b.n	8007bfc <_scanf_float+0x3b0>
 8007c64:	f04f 0900 	mov.w	r9, #0
 8007c68:	e629      	b.n	80078be <_scanf_float+0x72>
 8007c6a:	bf00      	nop
 8007c6c:	0800b840 	.word	0x0800b840
 8007c70:	0800bbd5 	.word	0x0800bbd5

08007c74 <std>:
 8007c74:	2300      	movs	r3, #0
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	6183      	str	r3, [r0, #24]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2208      	movs	r2, #8
 8007c90:	305c      	adds	r0, #92	@ 0x5c
 8007c92:	f000 f914 	bl	8007ebe <memset>
 8007c96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <std+0x58>)
 8007c98:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <std+0x5c>)
 8007c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <std+0x60>)
 8007ca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <std+0x64>)
 8007ca4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cdc <std+0x68>)
 8007ca8:	6224      	str	r4, [r4, #32]
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d006      	beq.n	8007cbc <std+0x48>
 8007cae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cb2:	4294      	cmp	r4, r2
 8007cb4:	d002      	beq.n	8007cbc <std+0x48>
 8007cb6:	33d0      	adds	r3, #208	@ 0xd0
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d105      	bne.n	8007cc8 <std+0x54>
 8007cbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	f000 b978 	b.w	8007fb8 <__retarget_lock_init_recursive>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007e39 	.word	0x08007e39
 8007cd0:	08007e5b 	.word	0x08007e5b
 8007cd4:	08007e93 	.word	0x08007e93
 8007cd8:	08007eb7 	.word	0x08007eb7
 8007cdc:	200005f8 	.word	0x200005f8

08007ce0 <stdio_exit_handler>:
 8007ce0:	4a02      	ldr	r2, [pc, #8]	@ (8007cec <stdio_exit_handler+0xc>)
 8007ce2:	4903      	ldr	r1, [pc, #12]	@ (8007cf0 <stdio_exit_handler+0x10>)
 8007ce4:	4803      	ldr	r0, [pc, #12]	@ (8007cf4 <stdio_exit_handler+0x14>)
 8007ce6:	f000 b869 	b.w	8007dbc <_fwalk_sglue>
 8007cea:	bf00      	nop
 8007cec:	20000194 	.word	0x20000194
 8007cf0:	0800a88d 	.word	0x0800a88d
 8007cf4:	200001a4 	.word	0x200001a4

08007cf8 <cleanup_stdio>:
 8007cf8:	6841      	ldr	r1, [r0, #4]
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8007d2c <cleanup_stdio+0x34>)
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	d001      	beq.n	8007d08 <cleanup_stdio+0x10>
 8007d04:	f002 fdc2 	bl	800a88c <_fflush_r>
 8007d08:	68a1      	ldr	r1, [r4, #8]
 8007d0a:	4b09      	ldr	r3, [pc, #36]	@ (8007d30 <cleanup_stdio+0x38>)
 8007d0c:	4299      	cmp	r1, r3
 8007d0e:	d002      	beq.n	8007d16 <cleanup_stdio+0x1e>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f002 fdbb 	bl	800a88c <_fflush_r>
 8007d16:	68e1      	ldr	r1, [r4, #12]
 8007d18:	4b06      	ldr	r3, [pc, #24]	@ (8007d34 <cleanup_stdio+0x3c>)
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	d004      	beq.n	8007d28 <cleanup_stdio+0x30>
 8007d1e:	4620      	mov	r0, r4
 8007d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d24:	f002 bdb2 	b.w	800a88c <_fflush_r>
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200005f8 	.word	0x200005f8
 8007d30:	20000660 	.word	0x20000660
 8007d34:	200006c8 	.word	0x200006c8

08007d38 <global_stdio_init.part.0>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <global_stdio_init.part.0+0x30>)
 8007d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8007d6c <global_stdio_init.part.0+0x34>)
 8007d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d70 <global_stdio_init.part.0+0x38>)
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	4620      	mov	r0, r4
 8007d44:	2200      	movs	r2, #0
 8007d46:	2104      	movs	r1, #4
 8007d48:	f7ff ff94 	bl	8007c74 <std>
 8007d4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d50:	2201      	movs	r2, #1
 8007d52:	2109      	movs	r1, #9
 8007d54:	f7ff ff8e 	bl	8007c74 <std>
 8007d58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d62:	2112      	movs	r1, #18
 8007d64:	f7ff bf86 	b.w	8007c74 <std>
 8007d68:	20000730 	.word	0x20000730
 8007d6c:	200005f8 	.word	0x200005f8
 8007d70:	08007ce1 	.word	0x08007ce1

08007d74 <__sfp_lock_acquire>:
 8007d74:	4801      	ldr	r0, [pc, #4]	@ (8007d7c <__sfp_lock_acquire+0x8>)
 8007d76:	f000 b920 	b.w	8007fba <__retarget_lock_acquire_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	20000739 	.word	0x20000739

08007d80 <__sfp_lock_release>:
 8007d80:	4801      	ldr	r0, [pc, #4]	@ (8007d88 <__sfp_lock_release+0x8>)
 8007d82:	f000 b91b 	b.w	8007fbc <__retarget_lock_release_recursive>
 8007d86:	bf00      	nop
 8007d88:	20000739 	.word	0x20000739

08007d8c <__sinit>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
 8007d90:	f7ff fff0 	bl	8007d74 <__sfp_lock_acquire>
 8007d94:	6a23      	ldr	r3, [r4, #32]
 8007d96:	b11b      	cbz	r3, 8007da0 <__sinit+0x14>
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9c:	f7ff bff0 	b.w	8007d80 <__sfp_lock_release>
 8007da0:	4b04      	ldr	r3, [pc, #16]	@ (8007db4 <__sinit+0x28>)
 8007da2:	6223      	str	r3, [r4, #32]
 8007da4:	4b04      	ldr	r3, [pc, #16]	@ (8007db8 <__sinit+0x2c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f5      	bne.n	8007d98 <__sinit+0xc>
 8007dac:	f7ff ffc4 	bl	8007d38 <global_stdio_init.part.0>
 8007db0:	e7f2      	b.n	8007d98 <__sinit+0xc>
 8007db2:	bf00      	nop
 8007db4:	08007cf9 	.word	0x08007cf9
 8007db8:	20000730 	.word	0x20000730

08007dbc <_fwalk_sglue>:
 8007dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	4688      	mov	r8, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8007dd0:	d505      	bpl.n	8007dde <_fwalk_sglue+0x22>
 8007dd2:	6824      	ldr	r4, [r4, #0]
 8007dd4:	2c00      	cmp	r4, #0
 8007dd6:	d1f7      	bne.n	8007dc8 <_fwalk_sglue+0xc>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d907      	bls.n	8007df4 <_fwalk_sglue+0x38>
 8007de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007de8:	3301      	adds	r3, #1
 8007dea:	d003      	beq.n	8007df4 <_fwalk_sglue+0x38>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c0      	blx	r8
 8007df2:	4306      	orrs	r6, r0
 8007df4:	3568      	adds	r5, #104	@ 0x68
 8007df6:	e7e9      	b.n	8007dcc <_fwalk_sglue+0x10>

08007df8 <siprintf>:
 8007df8:	b40e      	push	{r1, r2, r3}
 8007dfa:	b500      	push	{lr}
 8007dfc:	b09c      	sub	sp, #112	@ 0x70
 8007dfe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e00:	9002      	str	r0, [sp, #8]
 8007e02:	9006      	str	r0, [sp, #24]
 8007e04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e08:	4809      	ldr	r0, [pc, #36]	@ (8007e30 <siprintf+0x38>)
 8007e0a:	9107      	str	r1, [sp, #28]
 8007e0c:	9104      	str	r1, [sp, #16]
 8007e0e:	4909      	ldr	r1, [pc, #36]	@ (8007e34 <siprintf+0x3c>)
 8007e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	a902      	add	r1, sp, #8
 8007e1c:	f002 fbb6 	bl	800a58c <_svfiprintf_r>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	b01c      	add	sp, #112	@ 0x70
 8007e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e2c:	b003      	add	sp, #12
 8007e2e:	4770      	bx	lr
 8007e30:	200001a0 	.word	0x200001a0
 8007e34:	ffff0208 	.word	0xffff0208

08007e38 <__sread>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e40:	f000 f86c 	bl	8007f1c <_read_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	bfab      	itete	ge
 8007e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e4c:	181b      	addge	r3, r3, r0
 8007e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e52:	bfac      	ite	ge
 8007e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e56:	81a3      	strhlt	r3, [r4, #12]
 8007e58:	bd10      	pop	{r4, pc}

08007e5a <__swrite>:
 8007e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	461f      	mov	r7, r3
 8007e60:	898b      	ldrh	r3, [r1, #12]
 8007e62:	05db      	lsls	r3, r3, #23
 8007e64:	4605      	mov	r5, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	4616      	mov	r6, r2
 8007e6a:	d505      	bpl.n	8007e78 <__swrite+0x1e>
 8007e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e70:	2302      	movs	r3, #2
 8007e72:	2200      	movs	r2, #0
 8007e74:	f000 f840 	bl	8007ef8 <_lseek_r>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	4632      	mov	r2, r6
 8007e86:	463b      	mov	r3, r7
 8007e88:	4628      	mov	r0, r5
 8007e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	f000 b857 	b.w	8007f40 <_write_r>

08007e92 <__sseek>:
 8007e92:	b510      	push	{r4, lr}
 8007e94:	460c      	mov	r4, r1
 8007e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9a:	f000 f82d 	bl	8007ef8 <_lseek_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	bf15      	itete	ne
 8007ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007eae:	81a3      	strheq	r3, [r4, #12]
 8007eb0:	bf18      	it	ne
 8007eb2:	81a3      	strhne	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__sclose>:
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	f000 b80d 	b.w	8007ed8 <_close_r>

08007ebe <memset>:
 8007ebe:	4402      	add	r2, r0
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d100      	bne.n	8007ec8 <memset+0xa>
 8007ec6:	4770      	bx	lr
 8007ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ecc:	e7f9      	b.n	8007ec2 <memset+0x4>
	...

08007ed0 <_localeconv_r>:
 8007ed0:	4800      	ldr	r0, [pc, #0]	@ (8007ed4 <_localeconv_r+0x4>)
 8007ed2:	4770      	bx	lr
 8007ed4:	200002e0 	.word	0x200002e0

08007ed8 <_close_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d06      	ldr	r5, [pc, #24]	@ (8007ef4 <_close_r+0x1c>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	f7fb f866 	bl	8002fb4 <_close>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_close_r+0x1a>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_close_r+0x1a>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20000734 	.word	0x20000734

08007ef8 <_lseek_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d07      	ldr	r5, [pc, #28]	@ (8007f18 <_lseek_r+0x20>)
 8007efc:	4604      	mov	r4, r0
 8007efe:	4608      	mov	r0, r1
 8007f00:	4611      	mov	r1, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	602a      	str	r2, [r5, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f7fb f87b 	bl	8003002 <_lseek>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_lseek_r+0x1e>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_lseek_r+0x1e>
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	20000734 	.word	0x20000734

08007f1c <_read_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d07      	ldr	r5, [pc, #28]	@ (8007f3c <_read_r+0x20>)
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7fb f809 	bl	8002f42 <_read>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_read_r+0x1e>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_read_r+0x1e>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000734 	.word	0x20000734

08007f40 <_write_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d07      	ldr	r5, [pc, #28]	@ (8007f60 <_write_r+0x20>)
 8007f44:	4604      	mov	r4, r0
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fb f814 	bl	8002f7c <_write>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_write_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_write_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20000734 	.word	0x20000734

08007f64 <__errno>:
 8007f64:	4b01      	ldr	r3, [pc, #4]	@ (8007f6c <__errno+0x8>)
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	200001a0 	.word	0x200001a0

08007f70 <__libc_init_array>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	4d0d      	ldr	r5, [pc, #52]	@ (8007fa8 <__libc_init_array+0x38>)
 8007f74:	4c0d      	ldr	r4, [pc, #52]	@ (8007fac <__libc_init_array+0x3c>)
 8007f76:	1b64      	subs	r4, r4, r5
 8007f78:	10a4      	asrs	r4, r4, #2
 8007f7a:	2600      	movs	r6, #0
 8007f7c:	42a6      	cmp	r6, r4
 8007f7e:	d109      	bne.n	8007f94 <__libc_init_array+0x24>
 8007f80:	4d0b      	ldr	r5, [pc, #44]	@ (8007fb0 <__libc_init_array+0x40>)
 8007f82:	4c0c      	ldr	r4, [pc, #48]	@ (8007fb4 <__libc_init_array+0x44>)
 8007f84:	f003 fb72 	bl	800b66c <_init>
 8007f88:	1b64      	subs	r4, r4, r5
 8007f8a:	10a4      	asrs	r4, r4, #2
 8007f8c:	2600      	movs	r6, #0
 8007f8e:	42a6      	cmp	r6, r4
 8007f90:	d105      	bne.n	8007f9e <__libc_init_array+0x2e>
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f98:	4798      	blx	r3
 8007f9a:	3601      	adds	r6, #1
 8007f9c:	e7ee      	b.n	8007f7c <__libc_init_array+0xc>
 8007f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa2:	4798      	blx	r3
 8007fa4:	3601      	adds	r6, #1
 8007fa6:	e7f2      	b.n	8007f8e <__libc_init_array+0x1e>
 8007fa8:	0800bc40 	.word	0x0800bc40
 8007fac:	0800bc40 	.word	0x0800bc40
 8007fb0:	0800bc40 	.word	0x0800bc40
 8007fb4:	0800bc44 	.word	0x0800bc44

08007fb8 <__retarget_lock_init_recursive>:
 8007fb8:	4770      	bx	lr

08007fba <__retarget_lock_acquire_recursive>:
 8007fba:	4770      	bx	lr

08007fbc <__retarget_lock_release_recursive>:
 8007fbc:	4770      	bx	lr
	...

08007fc0 <nanf>:
 8007fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fc8 <nanf+0x8>
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	7fc00000 	.word	0x7fc00000

08007fcc <quorem>:
 8007fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	6903      	ldr	r3, [r0, #16]
 8007fd2:	690c      	ldr	r4, [r1, #16]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	db7e      	blt.n	80080d8 <quorem+0x10c>
 8007fda:	3c01      	subs	r4, #1
 8007fdc:	f101 0814 	add.w	r8, r1, #20
 8007fe0:	00a3      	lsls	r3, r4, #2
 8007fe2:	f100 0514 	add.w	r5, r0, #20
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ffe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008002:	d32e      	bcc.n	8008062 <quorem+0x96>
 8008004:	f04f 0a00 	mov.w	sl, #0
 8008008:	46c4      	mov	ip, r8
 800800a:	46ae      	mov	lr, r5
 800800c:	46d3      	mov	fp, sl
 800800e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008012:	b298      	uxth	r0, r3
 8008014:	fb06 a000 	mla	r0, r6, r0, sl
 8008018:	0c02      	lsrs	r2, r0, #16
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	fb06 2303 	mla	r3, r6, r3, r2
 8008020:	f8de 2000 	ldr.w	r2, [lr]
 8008024:	b280      	uxth	r0, r0
 8008026:	b292      	uxth	r2, r2
 8008028:	1a12      	subs	r2, r2, r0
 800802a:	445a      	add	r2, fp
 800802c:	f8de 0000 	ldr.w	r0, [lr]
 8008030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008034:	b29b      	uxth	r3, r3
 8008036:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800803a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800803e:	b292      	uxth	r2, r2
 8008040:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008044:	45e1      	cmp	r9, ip
 8008046:	f84e 2b04 	str.w	r2, [lr], #4
 800804a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800804e:	d2de      	bcs.n	800800e <quorem+0x42>
 8008050:	9b00      	ldr	r3, [sp, #0]
 8008052:	58eb      	ldr	r3, [r5, r3]
 8008054:	b92b      	cbnz	r3, 8008062 <quorem+0x96>
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	3b04      	subs	r3, #4
 800805a:	429d      	cmp	r5, r3
 800805c:	461a      	mov	r2, r3
 800805e:	d32f      	bcc.n	80080c0 <quorem+0xf4>
 8008060:	613c      	str	r4, [r7, #16]
 8008062:	4638      	mov	r0, r7
 8008064:	f001 f9c4 	bl	80093f0 <__mcmp>
 8008068:	2800      	cmp	r0, #0
 800806a:	db25      	blt.n	80080b8 <quorem+0xec>
 800806c:	4629      	mov	r1, r5
 800806e:	2000      	movs	r0, #0
 8008070:	f858 2b04 	ldr.w	r2, [r8], #4
 8008074:	f8d1 c000 	ldr.w	ip, [r1]
 8008078:	fa1f fe82 	uxth.w	lr, r2
 800807c:	fa1f f38c 	uxth.w	r3, ip
 8008080:	eba3 030e 	sub.w	r3, r3, lr
 8008084:	4403      	add	r3, r0
 8008086:	0c12      	lsrs	r2, r2, #16
 8008088:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800808c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008090:	b29b      	uxth	r3, r3
 8008092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008096:	45c1      	cmp	r9, r8
 8008098:	f841 3b04 	str.w	r3, [r1], #4
 800809c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080a0:	d2e6      	bcs.n	8008070 <quorem+0xa4>
 80080a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080aa:	b922      	cbnz	r2, 80080b6 <quorem+0xea>
 80080ac:	3b04      	subs	r3, #4
 80080ae:	429d      	cmp	r5, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	d30b      	bcc.n	80080cc <quorem+0x100>
 80080b4:	613c      	str	r4, [r7, #16]
 80080b6:	3601      	adds	r6, #1
 80080b8:	4630      	mov	r0, r6
 80080ba:	b003      	add	sp, #12
 80080bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	3b04      	subs	r3, #4
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	d1cb      	bne.n	8008060 <quorem+0x94>
 80080c8:	3c01      	subs	r4, #1
 80080ca:	e7c6      	b.n	800805a <quorem+0x8e>
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	3b04      	subs	r3, #4
 80080d0:	2a00      	cmp	r2, #0
 80080d2:	d1ef      	bne.n	80080b4 <quorem+0xe8>
 80080d4:	3c01      	subs	r4, #1
 80080d6:	e7ea      	b.n	80080ae <quorem+0xe2>
 80080d8:	2000      	movs	r0, #0
 80080da:	e7ee      	b.n	80080ba <quorem+0xee>
 80080dc:	0000      	movs	r0, r0
	...

080080e0 <_dtoa_r>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	69c7      	ldr	r7, [r0, #28]
 80080e6:	b099      	sub	sp, #100	@ 0x64
 80080e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080ec:	ec55 4b10 	vmov	r4, r5, d0
 80080f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80080f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80080f4:	4683      	mov	fp, r0
 80080f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80080f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080fa:	b97f      	cbnz	r7, 800811c <_dtoa_r+0x3c>
 80080fc:	2010      	movs	r0, #16
 80080fe:	f000 fdfd 	bl	8008cfc <malloc>
 8008102:	4602      	mov	r2, r0
 8008104:	f8cb 001c 	str.w	r0, [fp, #28]
 8008108:	b920      	cbnz	r0, 8008114 <_dtoa_r+0x34>
 800810a:	4ba7      	ldr	r3, [pc, #668]	@ (80083a8 <_dtoa_r+0x2c8>)
 800810c:	21ef      	movs	r1, #239	@ 0xef
 800810e:	48a7      	ldr	r0, [pc, #668]	@ (80083ac <_dtoa_r+0x2cc>)
 8008110:	f002 fc36 	bl	800a980 <__assert_func>
 8008114:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008118:	6007      	str	r7, [r0, #0]
 800811a:	60c7      	str	r7, [r0, #12]
 800811c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008120:	6819      	ldr	r1, [r3, #0]
 8008122:	b159      	cbz	r1, 800813c <_dtoa_r+0x5c>
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	604a      	str	r2, [r1, #4]
 8008128:	2301      	movs	r3, #1
 800812a:	4093      	lsls	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
 800812e:	4658      	mov	r0, fp
 8008130:	f000 feda 	bl	8008ee8 <_Bfree>
 8008134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	1e2b      	subs	r3, r5, #0
 800813e:	bfb9      	ittee	lt
 8008140:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008144:	9303      	strlt	r3, [sp, #12]
 8008146:	2300      	movge	r3, #0
 8008148:	6033      	strge	r3, [r6, #0]
 800814a:	9f03      	ldr	r7, [sp, #12]
 800814c:	4b98      	ldr	r3, [pc, #608]	@ (80083b0 <_dtoa_r+0x2d0>)
 800814e:	bfbc      	itt	lt
 8008150:	2201      	movlt	r2, #1
 8008152:	6032      	strlt	r2, [r6, #0]
 8008154:	43bb      	bics	r3, r7
 8008156:	d112      	bne.n	800817e <_dtoa_r+0x9e>
 8008158:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800815a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008164:	4323      	orrs	r3, r4
 8008166:	f000 854d 	beq.w	8008c04 <_dtoa_r+0xb24>
 800816a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800816c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80083c4 <_dtoa_r+0x2e4>
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 854f 	beq.w	8008c14 <_dtoa_r+0xb34>
 8008176:	f10a 0303 	add.w	r3, sl, #3
 800817a:	f000 bd49 	b.w	8008c10 <_dtoa_r+0xb30>
 800817e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	ec51 0b17 	vmov	r0, r1, d7
 8008188:	2300      	movs	r3, #0
 800818a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800818e:	f7f8 fccb 	bl	8000b28 <__aeabi_dcmpeq>
 8008192:	4680      	mov	r8, r0
 8008194:	b158      	cbz	r0, 80081ae <_dtoa_r+0xce>
 8008196:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008198:	2301      	movs	r3, #1
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800819e:	b113      	cbz	r3, 80081a6 <_dtoa_r+0xc6>
 80081a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80081a2:	4b84      	ldr	r3, [pc, #528]	@ (80083b4 <_dtoa_r+0x2d4>)
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80083c8 <_dtoa_r+0x2e8>
 80081aa:	f000 bd33 	b.w	8008c14 <_dtoa_r+0xb34>
 80081ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081b2:	aa16      	add	r2, sp, #88	@ 0x58
 80081b4:	a917      	add	r1, sp, #92	@ 0x5c
 80081b6:	4658      	mov	r0, fp
 80081b8:	f001 fa3a 	bl	8009630 <__d2b>
 80081bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081c0:	4681      	mov	r9, r0
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	d077      	beq.n	80082b6 <_dtoa_r+0x1d6>
 80081c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80081cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081e0:	4619      	mov	r1, r3
 80081e2:	2200      	movs	r2, #0
 80081e4:	4b74      	ldr	r3, [pc, #464]	@ (80083b8 <_dtoa_r+0x2d8>)
 80081e6:	f7f8 f87f 	bl	80002e8 <__aeabi_dsub>
 80081ea:	a369      	add	r3, pc, #420	@ (adr r3, 8008390 <_dtoa_r+0x2b0>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f7f8 fa32 	bl	8000658 <__aeabi_dmul>
 80081f4:	a368      	add	r3, pc, #416	@ (adr r3, 8008398 <_dtoa_r+0x2b8>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f8 f877 	bl	80002ec <__adddf3>
 80081fe:	4604      	mov	r4, r0
 8008200:	4630      	mov	r0, r6
 8008202:	460d      	mov	r5, r1
 8008204:	f7f8 f9be 	bl	8000584 <__aeabi_i2d>
 8008208:	a365      	add	r3, pc, #404	@ (adr r3, 80083a0 <_dtoa_r+0x2c0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 fa23 	bl	8000658 <__aeabi_dmul>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 f867 	bl	80002ec <__adddf3>
 800821e:	4604      	mov	r4, r0
 8008220:	460d      	mov	r5, r1
 8008222:	f7f8 fcc9 	bl	8000bb8 <__aeabi_d2iz>
 8008226:	2200      	movs	r2, #0
 8008228:	4607      	mov	r7, r0
 800822a:	2300      	movs	r3, #0
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	f7f8 fc84 	bl	8000b3c <__aeabi_dcmplt>
 8008234:	b140      	cbz	r0, 8008248 <_dtoa_r+0x168>
 8008236:	4638      	mov	r0, r7
 8008238:	f7f8 f9a4 	bl	8000584 <__aeabi_i2d>
 800823c:	4622      	mov	r2, r4
 800823e:	462b      	mov	r3, r5
 8008240:	f7f8 fc72 	bl	8000b28 <__aeabi_dcmpeq>
 8008244:	b900      	cbnz	r0, 8008248 <_dtoa_r+0x168>
 8008246:	3f01      	subs	r7, #1
 8008248:	2f16      	cmp	r7, #22
 800824a:	d851      	bhi.n	80082f0 <_dtoa_r+0x210>
 800824c:	4b5b      	ldr	r3, [pc, #364]	@ (80083bc <_dtoa_r+0x2dc>)
 800824e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800825a:	f7f8 fc6f 	bl	8000b3c <__aeabi_dcmplt>
 800825e:	2800      	cmp	r0, #0
 8008260:	d048      	beq.n	80082f4 <_dtoa_r+0x214>
 8008262:	3f01      	subs	r7, #1
 8008264:	2300      	movs	r3, #0
 8008266:	9312      	str	r3, [sp, #72]	@ 0x48
 8008268:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800826a:	1b9b      	subs	r3, r3, r6
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	bf44      	itt	mi
 8008270:	f1c3 0801 	rsbmi	r8, r3, #1
 8008274:	2300      	movmi	r3, #0
 8008276:	9208      	str	r2, [sp, #32]
 8008278:	bf54      	ite	pl
 800827a:	f04f 0800 	movpl.w	r8, #0
 800827e:	9308      	strmi	r3, [sp, #32]
 8008280:	2f00      	cmp	r7, #0
 8008282:	db39      	blt.n	80082f8 <_dtoa_r+0x218>
 8008284:	9b08      	ldr	r3, [sp, #32]
 8008286:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008288:	443b      	add	r3, r7
 800828a:	9308      	str	r3, [sp, #32]
 800828c:	2300      	movs	r3, #0
 800828e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008292:	2b09      	cmp	r3, #9
 8008294:	d864      	bhi.n	8008360 <_dtoa_r+0x280>
 8008296:	2b05      	cmp	r3, #5
 8008298:	bfc4      	itt	gt
 800829a:	3b04      	subgt	r3, #4
 800829c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800829e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a0:	f1a3 0302 	sub.w	r3, r3, #2
 80082a4:	bfcc      	ite	gt
 80082a6:	2400      	movgt	r4, #0
 80082a8:	2401      	movle	r4, #1
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d863      	bhi.n	8008376 <_dtoa_r+0x296>
 80082ae:	e8df f003 	tbb	[pc, r3]
 80082b2:	372a      	.short	0x372a
 80082b4:	5535      	.short	0x5535
 80082b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80082ba:	441e      	add	r6, r3
 80082bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	bfc1      	itttt	gt
 80082c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082c8:	409f      	lslgt	r7, r3
 80082ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082d2:	bfd6      	itet	le
 80082d4:	f1c3 0320 	rsble	r3, r3, #32
 80082d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80082dc:	fa04 f003 	lslle.w	r0, r4, r3
 80082e0:	f7f8 f940 	bl	8000564 <__aeabi_ui2d>
 80082e4:	2201      	movs	r2, #1
 80082e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082ea:	3e01      	subs	r6, #1
 80082ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80082ee:	e777      	b.n	80081e0 <_dtoa_r+0x100>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7b8      	b.n	8008266 <_dtoa_r+0x186>
 80082f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80082f6:	e7b7      	b.n	8008268 <_dtoa_r+0x188>
 80082f8:	427b      	negs	r3, r7
 80082fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80082fc:	2300      	movs	r3, #0
 80082fe:	eba8 0807 	sub.w	r8, r8, r7
 8008302:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008304:	e7c4      	b.n	8008290 <_dtoa_r+0x1b0>
 8008306:	2300      	movs	r3, #0
 8008308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800830a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	dc35      	bgt.n	800837c <_dtoa_r+0x29c>
 8008310:	2301      	movs	r3, #1
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	9307      	str	r3, [sp, #28]
 8008316:	461a      	mov	r2, r3
 8008318:	920e      	str	r2, [sp, #56]	@ 0x38
 800831a:	e00b      	b.n	8008334 <_dtoa_r+0x254>
 800831c:	2301      	movs	r3, #1
 800831e:	e7f3      	b.n	8008308 <_dtoa_r+0x228>
 8008320:	2300      	movs	r3, #0
 8008322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008326:	18fb      	adds	r3, r7, r3
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	2b01      	cmp	r3, #1
 800832e:	9307      	str	r3, [sp, #28]
 8008330:	bfb8      	it	lt
 8008332:	2301      	movlt	r3, #1
 8008334:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008338:	2100      	movs	r1, #0
 800833a:	2204      	movs	r2, #4
 800833c:	f102 0514 	add.w	r5, r2, #20
 8008340:	429d      	cmp	r5, r3
 8008342:	d91f      	bls.n	8008384 <_dtoa_r+0x2a4>
 8008344:	6041      	str	r1, [r0, #4]
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fd8e 	bl	8008e68 <_Balloc>
 800834c:	4682      	mov	sl, r0
 800834e:	2800      	cmp	r0, #0
 8008350:	d13c      	bne.n	80083cc <_dtoa_r+0x2ec>
 8008352:	4b1b      	ldr	r3, [pc, #108]	@ (80083c0 <_dtoa_r+0x2e0>)
 8008354:	4602      	mov	r2, r0
 8008356:	f240 11af 	movw	r1, #431	@ 0x1af
 800835a:	e6d8      	b.n	800810e <_dtoa_r+0x2e>
 800835c:	2301      	movs	r3, #1
 800835e:	e7e0      	b.n	8008322 <_dtoa_r+0x242>
 8008360:	2401      	movs	r4, #1
 8008362:	2300      	movs	r3, #0
 8008364:	9309      	str	r3, [sp, #36]	@ 0x24
 8008366:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	2200      	movs	r2, #0
 8008372:	2312      	movs	r3, #18
 8008374:	e7d0      	b.n	8008318 <_dtoa_r+0x238>
 8008376:	2301      	movs	r3, #1
 8008378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800837a:	e7f5      	b.n	8008368 <_dtoa_r+0x288>
 800837c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	e7d7      	b.n	8008334 <_dtoa_r+0x254>
 8008384:	3101      	adds	r1, #1
 8008386:	0052      	lsls	r2, r2, #1
 8008388:	e7d8      	b.n	800833c <_dtoa_r+0x25c>
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
 8008390:	636f4361 	.word	0x636f4361
 8008394:	3fd287a7 	.word	0x3fd287a7
 8008398:	8b60c8b3 	.word	0x8b60c8b3
 800839c:	3fc68a28 	.word	0x3fc68a28
 80083a0:	509f79fb 	.word	0x509f79fb
 80083a4:	3fd34413 	.word	0x3fd34413
 80083a8:	0800b852 	.word	0x0800b852
 80083ac:	0800b869 	.word	0x0800b869
 80083b0:	7ff00000 	.word	0x7ff00000
 80083b4:	0800b81d 	.word	0x0800b81d
 80083b8:	3ff80000 	.word	0x3ff80000
 80083bc:	0800b960 	.word	0x0800b960
 80083c0:	0800b8c1 	.word	0x0800b8c1
 80083c4:	0800b84e 	.word	0x0800b84e
 80083c8:	0800b81c 	.word	0x0800b81c
 80083cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083d0:	6018      	str	r0, [r3, #0]
 80083d2:	9b07      	ldr	r3, [sp, #28]
 80083d4:	2b0e      	cmp	r3, #14
 80083d6:	f200 80a4 	bhi.w	8008522 <_dtoa_r+0x442>
 80083da:	2c00      	cmp	r4, #0
 80083dc:	f000 80a1 	beq.w	8008522 <_dtoa_r+0x442>
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	dd33      	ble.n	800844c <_dtoa_r+0x36c>
 80083e4:	4bad      	ldr	r3, [pc, #692]	@ (800869c <_dtoa_r+0x5bc>)
 80083e6:	f007 020f 	and.w	r2, r7, #15
 80083ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ee:	ed93 7b00 	vldr	d7, [r3]
 80083f2:	05f8      	lsls	r0, r7, #23
 80083f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083fc:	d516      	bpl.n	800842c <_dtoa_r+0x34c>
 80083fe:	4ba8      	ldr	r3, [pc, #672]	@ (80086a0 <_dtoa_r+0x5c0>)
 8008400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008408:	f7f8 fa50 	bl	80008ac <__aeabi_ddiv>
 800840c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008410:	f004 040f 	and.w	r4, r4, #15
 8008414:	2603      	movs	r6, #3
 8008416:	4da2      	ldr	r5, [pc, #648]	@ (80086a0 <_dtoa_r+0x5c0>)
 8008418:	b954      	cbnz	r4, 8008430 <_dtoa_r+0x350>
 800841a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 fa43 	bl	80008ac <__aeabi_ddiv>
 8008426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842a:	e028      	b.n	800847e <_dtoa_r+0x39e>
 800842c:	2602      	movs	r6, #2
 800842e:	e7f2      	b.n	8008416 <_dtoa_r+0x336>
 8008430:	07e1      	lsls	r1, r4, #31
 8008432:	d508      	bpl.n	8008446 <_dtoa_r+0x366>
 8008434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800843c:	f7f8 f90c 	bl	8000658 <__aeabi_dmul>
 8008440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008444:	3601      	adds	r6, #1
 8008446:	1064      	asrs	r4, r4, #1
 8008448:	3508      	adds	r5, #8
 800844a:	e7e5      	b.n	8008418 <_dtoa_r+0x338>
 800844c:	f000 80d2 	beq.w	80085f4 <_dtoa_r+0x514>
 8008450:	427c      	negs	r4, r7
 8008452:	4b92      	ldr	r3, [pc, #584]	@ (800869c <_dtoa_r+0x5bc>)
 8008454:	4d92      	ldr	r5, [pc, #584]	@ (80086a0 <_dtoa_r+0x5c0>)
 8008456:	f004 020f 	and.w	r2, r4, #15
 800845a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008466:	f7f8 f8f7 	bl	8000658 <__aeabi_dmul>
 800846a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800846e:	1124      	asrs	r4, r4, #4
 8008470:	2300      	movs	r3, #0
 8008472:	2602      	movs	r6, #2
 8008474:	2c00      	cmp	r4, #0
 8008476:	f040 80b2 	bne.w	80085de <_dtoa_r+0x4fe>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1d3      	bne.n	8008426 <_dtoa_r+0x346>
 800847e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008480:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80b7 	beq.w	80085f8 <_dtoa_r+0x518>
 800848a:	4b86      	ldr	r3, [pc, #536]	@ (80086a4 <_dtoa_r+0x5c4>)
 800848c:	2200      	movs	r2, #0
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f8 fb53 	bl	8000b3c <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	f000 80ae 	beq.w	80085f8 <_dtoa_r+0x518>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80aa 	beq.w	80085f8 <_dtoa_r+0x518>
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd37      	ble.n	800851a <_dtoa_r+0x43a>
 80084aa:	1e7b      	subs	r3, r7, #1
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	4620      	mov	r0, r4
 80084b0:	4b7d      	ldr	r3, [pc, #500]	@ (80086a8 <_dtoa_r+0x5c8>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 f8cf 	bl	8000658 <__aeabi_dmul>
 80084ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084be:	9c00      	ldr	r4, [sp, #0]
 80084c0:	3601      	adds	r6, #1
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7f8 f85e 	bl	8000584 <__aeabi_i2d>
 80084c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084cc:	f7f8 f8c4 	bl	8000658 <__aeabi_dmul>
 80084d0:	4b76      	ldr	r3, [pc, #472]	@ (80086ac <_dtoa_r+0x5cc>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f7f7 ff0a 	bl	80002ec <__adddf3>
 80084d8:	4605      	mov	r5, r0
 80084da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084de:	2c00      	cmp	r4, #0
 80084e0:	f040 808d 	bne.w	80085fe <_dtoa_r+0x51e>
 80084e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e8:	4b71      	ldr	r3, [pc, #452]	@ (80086b0 <_dtoa_r+0x5d0>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	f7f7 fefc 	bl	80002e8 <__aeabi_dsub>
 80084f0:	4602      	mov	r2, r0
 80084f2:	460b      	mov	r3, r1
 80084f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4633      	mov	r3, r6
 80084fc:	f7f8 fb3c 	bl	8000b78 <__aeabi_dcmpgt>
 8008500:	2800      	cmp	r0, #0
 8008502:	f040 828b 	bne.w	8008a1c <_dtoa_r+0x93c>
 8008506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800850a:	462a      	mov	r2, r5
 800850c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008510:	f7f8 fb14 	bl	8000b3c <__aeabi_dcmplt>
 8008514:	2800      	cmp	r0, #0
 8008516:	f040 8128 	bne.w	800876a <_dtoa_r+0x68a>
 800851a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800851e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008524:	2b00      	cmp	r3, #0
 8008526:	f2c0 815a 	blt.w	80087de <_dtoa_r+0x6fe>
 800852a:	2f0e      	cmp	r7, #14
 800852c:	f300 8157 	bgt.w	80087de <_dtoa_r+0x6fe>
 8008530:	4b5a      	ldr	r3, [pc, #360]	@ (800869c <_dtoa_r+0x5bc>)
 8008532:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008536:	ed93 7b00 	vldr	d7, [r3]
 800853a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	ed8d 7b00 	vstr	d7, [sp]
 8008542:	da03      	bge.n	800854c <_dtoa_r+0x46c>
 8008544:	9b07      	ldr	r3, [sp, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f340 8101 	ble.w	800874e <_dtoa_r+0x66e>
 800854c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008550:	4656      	mov	r6, sl
 8008552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f8 f9a7 	bl	80008ac <__aeabi_ddiv>
 800855e:	f7f8 fb2b 	bl	8000bb8 <__aeabi_d2iz>
 8008562:	4680      	mov	r8, r0
 8008564:	f7f8 f80e 	bl	8000584 <__aeabi_i2d>
 8008568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800856c:	f7f8 f874 	bl	8000658 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800857c:	f7f7 feb4 	bl	80002e8 <__aeabi_dsub>
 8008580:	f806 4b01 	strb.w	r4, [r6], #1
 8008584:	9d07      	ldr	r5, [sp, #28]
 8008586:	eba6 040a 	sub.w	r4, r6, sl
 800858a:	42a5      	cmp	r5, r4
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	f040 8117 	bne.w	80087c2 <_dtoa_r+0x6e2>
 8008594:	f7f7 feaa 	bl	80002ec <__adddf3>
 8008598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	f7f8 faea 	bl	8000b78 <__aeabi_dcmpgt>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f040 80f9 	bne.w	800879c <_dtoa_r+0x6bc>
 80085aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 fab9 	bl	8000b28 <__aeabi_dcmpeq>
 80085b6:	b118      	cbz	r0, 80085c0 <_dtoa_r+0x4e0>
 80085b8:	f018 0f01 	tst.w	r8, #1
 80085bc:	f040 80ee 	bne.w	800879c <_dtoa_r+0x6bc>
 80085c0:	4649      	mov	r1, r9
 80085c2:	4658      	mov	r0, fp
 80085c4:	f000 fc90 	bl	8008ee8 <_Bfree>
 80085c8:	2300      	movs	r3, #0
 80085ca:	7033      	strb	r3, [r6, #0]
 80085cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085ce:	3701      	adds	r7, #1
 80085d0:	601f      	str	r7, [r3, #0]
 80085d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 831d 	beq.w	8008c14 <_dtoa_r+0xb34>
 80085da:	601e      	str	r6, [r3, #0]
 80085dc:	e31a      	b.n	8008c14 <_dtoa_r+0xb34>
 80085de:	07e2      	lsls	r2, r4, #31
 80085e0:	d505      	bpl.n	80085ee <_dtoa_r+0x50e>
 80085e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085e6:	f7f8 f837 	bl	8000658 <__aeabi_dmul>
 80085ea:	3601      	adds	r6, #1
 80085ec:	2301      	movs	r3, #1
 80085ee:	1064      	asrs	r4, r4, #1
 80085f0:	3508      	adds	r5, #8
 80085f2:	e73f      	b.n	8008474 <_dtoa_r+0x394>
 80085f4:	2602      	movs	r6, #2
 80085f6:	e742      	b.n	800847e <_dtoa_r+0x39e>
 80085f8:	9c07      	ldr	r4, [sp, #28]
 80085fa:	9704      	str	r7, [sp, #16]
 80085fc:	e761      	b.n	80084c2 <_dtoa_r+0x3e2>
 80085fe:	4b27      	ldr	r3, [pc, #156]	@ (800869c <_dtoa_r+0x5bc>)
 8008600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008606:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800860a:	4454      	add	r4, sl
 800860c:	2900      	cmp	r1, #0
 800860e:	d053      	beq.n	80086b8 <_dtoa_r+0x5d8>
 8008610:	4928      	ldr	r1, [pc, #160]	@ (80086b4 <_dtoa_r+0x5d4>)
 8008612:	2000      	movs	r0, #0
 8008614:	f7f8 f94a 	bl	80008ac <__aeabi_ddiv>
 8008618:	4633      	mov	r3, r6
 800861a:	462a      	mov	r2, r5
 800861c:	f7f7 fe64 	bl	80002e8 <__aeabi_dsub>
 8008620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008624:	4656      	mov	r6, sl
 8008626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862a:	f7f8 fac5 	bl	8000bb8 <__aeabi_d2iz>
 800862e:	4605      	mov	r5, r0
 8008630:	f7f7 ffa8 	bl	8000584 <__aeabi_i2d>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863c:	f7f7 fe54 	bl	80002e8 <__aeabi_dsub>
 8008640:	3530      	adds	r5, #48	@ 0x30
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800864a:	f806 5b01 	strb.w	r5, [r6], #1
 800864e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008652:	f7f8 fa73 	bl	8000b3c <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	d171      	bne.n	800873e <_dtoa_r+0x65e>
 800865a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800865e:	4911      	ldr	r1, [pc, #68]	@ (80086a4 <_dtoa_r+0x5c4>)
 8008660:	2000      	movs	r0, #0
 8008662:	f7f7 fe41 	bl	80002e8 <__aeabi_dsub>
 8008666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800866a:	f7f8 fa67 	bl	8000b3c <__aeabi_dcmplt>
 800866e:	2800      	cmp	r0, #0
 8008670:	f040 8095 	bne.w	800879e <_dtoa_r+0x6be>
 8008674:	42a6      	cmp	r6, r4
 8008676:	f43f af50 	beq.w	800851a <_dtoa_r+0x43a>
 800867a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800867e:	4b0a      	ldr	r3, [pc, #40]	@ (80086a8 <_dtoa_r+0x5c8>)
 8008680:	2200      	movs	r2, #0
 8008682:	f7f7 ffe9 	bl	8000658 <__aeabi_dmul>
 8008686:	4b08      	ldr	r3, [pc, #32]	@ (80086a8 <_dtoa_r+0x5c8>)
 8008688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800868c:	2200      	movs	r2, #0
 800868e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008692:	f7f7 ffe1 	bl	8000658 <__aeabi_dmul>
 8008696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800869a:	e7c4      	b.n	8008626 <_dtoa_r+0x546>
 800869c:	0800b960 	.word	0x0800b960
 80086a0:	0800b938 	.word	0x0800b938
 80086a4:	3ff00000 	.word	0x3ff00000
 80086a8:	40240000 	.word	0x40240000
 80086ac:	401c0000 	.word	0x401c0000
 80086b0:	40140000 	.word	0x40140000
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7f7 ffcc 	bl	8000658 <__aeabi_dmul>
 80086c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80086c6:	4656      	mov	r6, sl
 80086c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086cc:	f7f8 fa74 	bl	8000bb8 <__aeabi_d2iz>
 80086d0:	4605      	mov	r5, r0
 80086d2:	f7f7 ff57 	bl	8000584 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086de:	f7f7 fe03 	bl	80002e8 <__aeabi_dsub>
 80086e2:	3530      	adds	r5, #48	@ 0x30
 80086e4:	f806 5b01 	strb.w	r5, [r6], #1
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086f2:	f04f 0200 	mov.w	r2, #0
 80086f6:	d124      	bne.n	8008742 <_dtoa_r+0x662>
 80086f8:	4bac      	ldr	r3, [pc, #688]	@ (80089ac <_dtoa_r+0x8cc>)
 80086fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086fe:	f7f7 fdf5 	bl	80002ec <__adddf3>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870a:	f7f8 fa35 	bl	8000b78 <__aeabi_dcmpgt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d145      	bne.n	800879e <_dtoa_r+0x6be>
 8008712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008716:	49a5      	ldr	r1, [pc, #660]	@ (80089ac <_dtoa_r+0x8cc>)
 8008718:	2000      	movs	r0, #0
 800871a:	f7f7 fde5 	bl	80002e8 <__aeabi_dsub>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008726:	f7f8 fa09 	bl	8000b3c <__aeabi_dcmplt>
 800872a:	2800      	cmp	r0, #0
 800872c:	f43f aef5 	beq.w	800851a <_dtoa_r+0x43a>
 8008730:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008732:	1e73      	subs	r3, r6, #1
 8008734:	9315      	str	r3, [sp, #84]	@ 0x54
 8008736:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800873a:	2b30      	cmp	r3, #48	@ 0x30
 800873c:	d0f8      	beq.n	8008730 <_dtoa_r+0x650>
 800873e:	9f04      	ldr	r7, [sp, #16]
 8008740:	e73e      	b.n	80085c0 <_dtoa_r+0x4e0>
 8008742:	4b9b      	ldr	r3, [pc, #620]	@ (80089b0 <_dtoa_r+0x8d0>)
 8008744:	f7f7 ff88 	bl	8000658 <__aeabi_dmul>
 8008748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800874c:	e7bc      	b.n	80086c8 <_dtoa_r+0x5e8>
 800874e:	d10c      	bne.n	800876a <_dtoa_r+0x68a>
 8008750:	4b98      	ldr	r3, [pc, #608]	@ (80089b4 <_dtoa_r+0x8d4>)
 8008752:	2200      	movs	r2, #0
 8008754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008758:	f7f7 ff7e 	bl	8000658 <__aeabi_dmul>
 800875c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008760:	f7f8 fa00 	bl	8000b64 <__aeabi_dcmpge>
 8008764:	2800      	cmp	r0, #0
 8008766:	f000 8157 	beq.w	8008a18 <_dtoa_r+0x938>
 800876a:	2400      	movs	r4, #0
 800876c:	4625      	mov	r5, r4
 800876e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008770:	43db      	mvns	r3, r3
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	4656      	mov	r6, sl
 8008776:	2700      	movs	r7, #0
 8008778:	4621      	mov	r1, r4
 800877a:	4658      	mov	r0, fp
 800877c:	f000 fbb4 	bl	8008ee8 <_Bfree>
 8008780:	2d00      	cmp	r5, #0
 8008782:	d0dc      	beq.n	800873e <_dtoa_r+0x65e>
 8008784:	b12f      	cbz	r7, 8008792 <_dtoa_r+0x6b2>
 8008786:	42af      	cmp	r7, r5
 8008788:	d003      	beq.n	8008792 <_dtoa_r+0x6b2>
 800878a:	4639      	mov	r1, r7
 800878c:	4658      	mov	r0, fp
 800878e:	f000 fbab 	bl	8008ee8 <_Bfree>
 8008792:	4629      	mov	r1, r5
 8008794:	4658      	mov	r0, fp
 8008796:	f000 fba7 	bl	8008ee8 <_Bfree>
 800879a:	e7d0      	b.n	800873e <_dtoa_r+0x65e>
 800879c:	9704      	str	r7, [sp, #16]
 800879e:	4633      	mov	r3, r6
 80087a0:	461e      	mov	r6, r3
 80087a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087a6:	2a39      	cmp	r2, #57	@ 0x39
 80087a8:	d107      	bne.n	80087ba <_dtoa_r+0x6da>
 80087aa:	459a      	cmp	sl, r3
 80087ac:	d1f8      	bne.n	80087a0 <_dtoa_r+0x6c0>
 80087ae:	9a04      	ldr	r2, [sp, #16]
 80087b0:	3201      	adds	r2, #1
 80087b2:	9204      	str	r2, [sp, #16]
 80087b4:	2230      	movs	r2, #48	@ 0x30
 80087b6:	f88a 2000 	strb.w	r2, [sl]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	3201      	adds	r2, #1
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e7bd      	b.n	800873e <_dtoa_r+0x65e>
 80087c2:	4b7b      	ldr	r3, [pc, #492]	@ (80089b0 <_dtoa_r+0x8d0>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	f7f7 ff47 	bl	8000658 <__aeabi_dmul>
 80087ca:	2200      	movs	r2, #0
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	f7f8 f9a9 	bl	8000b28 <__aeabi_dcmpeq>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f43f aebb 	beq.w	8008552 <_dtoa_r+0x472>
 80087dc:	e6f0      	b.n	80085c0 <_dtoa_r+0x4e0>
 80087de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	f000 80db 	beq.w	800899c <_dtoa_r+0x8bc>
 80087e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087e8:	2a01      	cmp	r2, #1
 80087ea:	f300 80bf 	bgt.w	800896c <_dtoa_r+0x88c>
 80087ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	f000 80b7 	beq.w	8008964 <_dtoa_r+0x884>
 80087f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80087fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087fc:	4646      	mov	r6, r8
 80087fe:	9a08      	ldr	r2, [sp, #32]
 8008800:	2101      	movs	r1, #1
 8008802:	441a      	add	r2, r3
 8008804:	4658      	mov	r0, fp
 8008806:	4498      	add	r8, r3
 8008808:	9208      	str	r2, [sp, #32]
 800880a:	f000 fc6b 	bl	80090e4 <__i2b>
 800880e:	4605      	mov	r5, r0
 8008810:	b15e      	cbz	r6, 800882a <_dtoa_r+0x74a>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	2b00      	cmp	r3, #0
 8008816:	dd08      	ble.n	800882a <_dtoa_r+0x74a>
 8008818:	42b3      	cmp	r3, r6
 800881a:	9a08      	ldr	r2, [sp, #32]
 800881c:	bfa8      	it	ge
 800881e:	4633      	movge	r3, r6
 8008820:	eba8 0803 	sub.w	r8, r8, r3
 8008824:	1af6      	subs	r6, r6, r3
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	9308      	str	r3, [sp, #32]
 800882a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882c:	b1f3      	cbz	r3, 800886c <_dtoa_r+0x78c>
 800882e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80b7 	beq.w	80089a4 <_dtoa_r+0x8c4>
 8008836:	b18c      	cbz	r4, 800885c <_dtoa_r+0x77c>
 8008838:	4629      	mov	r1, r5
 800883a:	4622      	mov	r2, r4
 800883c:	4658      	mov	r0, fp
 800883e:	f000 fd11 	bl	8009264 <__pow5mult>
 8008842:	464a      	mov	r2, r9
 8008844:	4601      	mov	r1, r0
 8008846:	4605      	mov	r5, r0
 8008848:	4658      	mov	r0, fp
 800884a:	f000 fc61 	bl	8009110 <__multiply>
 800884e:	4649      	mov	r1, r9
 8008850:	9004      	str	r0, [sp, #16]
 8008852:	4658      	mov	r0, fp
 8008854:	f000 fb48 	bl	8008ee8 <_Bfree>
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	4699      	mov	r9, r3
 800885c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800885e:	1b1a      	subs	r2, r3, r4
 8008860:	d004      	beq.n	800886c <_dtoa_r+0x78c>
 8008862:	4649      	mov	r1, r9
 8008864:	4658      	mov	r0, fp
 8008866:	f000 fcfd 	bl	8009264 <__pow5mult>
 800886a:	4681      	mov	r9, r0
 800886c:	2101      	movs	r1, #1
 800886e:	4658      	mov	r0, fp
 8008870:	f000 fc38 	bl	80090e4 <__i2b>
 8008874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008876:	4604      	mov	r4, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 81cf 	beq.w	8008c1c <_dtoa_r+0xb3c>
 800887e:	461a      	mov	r2, r3
 8008880:	4601      	mov	r1, r0
 8008882:	4658      	mov	r0, fp
 8008884:	f000 fcee 	bl	8009264 <__pow5mult>
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	2b01      	cmp	r3, #1
 800888c:	4604      	mov	r4, r0
 800888e:	f300 8095 	bgt.w	80089bc <_dtoa_r+0x8dc>
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f040 8087 	bne.w	80089a8 <_dtoa_r+0x8c8>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 8089 	bne.w	80089b8 <_dtoa_r+0x8d8>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088ac:	0d1b      	lsrs	r3, r3, #20
 80088ae:	051b      	lsls	r3, r3, #20
 80088b0:	b12b      	cbz	r3, 80088be <_dtoa_r+0x7de>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	3301      	adds	r3, #1
 80088b6:	9308      	str	r3, [sp, #32]
 80088b8:	f108 0801 	add.w	r8, r8, #1
 80088bc:	2301      	movs	r3, #1
 80088be:	930a      	str	r3, [sp, #40]	@ 0x28
 80088c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 81b0 	beq.w	8008c28 <_dtoa_r+0xb48>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088ce:	6918      	ldr	r0, [r3, #16]
 80088d0:	f000 fbbc 	bl	800904c <__hi0bits>
 80088d4:	f1c0 0020 	rsb	r0, r0, #32
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	4418      	add	r0, r3
 80088dc:	f010 001f 	ands.w	r0, r0, #31
 80088e0:	d077      	beq.n	80089d2 <_dtoa_r+0x8f2>
 80088e2:	f1c0 0320 	rsb	r3, r0, #32
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	dd6b      	ble.n	80089c2 <_dtoa_r+0x8e2>
 80088ea:	9b08      	ldr	r3, [sp, #32]
 80088ec:	f1c0 001c 	rsb	r0, r0, #28
 80088f0:	4403      	add	r3, r0
 80088f2:	4480      	add	r8, r0
 80088f4:	4406      	add	r6, r0
 80088f6:	9308      	str	r3, [sp, #32]
 80088f8:	f1b8 0f00 	cmp.w	r8, #0
 80088fc:	dd05      	ble.n	800890a <_dtoa_r+0x82a>
 80088fe:	4649      	mov	r1, r9
 8008900:	4642      	mov	r2, r8
 8008902:	4658      	mov	r0, fp
 8008904:	f000 fd08 	bl	8009318 <__lshift>
 8008908:	4681      	mov	r9, r0
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd05      	ble.n	800891c <_dtoa_r+0x83c>
 8008910:	4621      	mov	r1, r4
 8008912:	461a      	mov	r2, r3
 8008914:	4658      	mov	r0, fp
 8008916:	f000 fcff 	bl	8009318 <__lshift>
 800891a:	4604      	mov	r4, r0
 800891c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800891e:	2b00      	cmp	r3, #0
 8008920:	d059      	beq.n	80089d6 <_dtoa_r+0x8f6>
 8008922:	4621      	mov	r1, r4
 8008924:	4648      	mov	r0, r9
 8008926:	f000 fd63 	bl	80093f0 <__mcmp>
 800892a:	2800      	cmp	r0, #0
 800892c:	da53      	bge.n	80089d6 <_dtoa_r+0x8f6>
 800892e:	1e7b      	subs	r3, r7, #1
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	4649      	mov	r1, r9
 8008934:	2300      	movs	r3, #0
 8008936:	220a      	movs	r2, #10
 8008938:	4658      	mov	r0, fp
 800893a:	f000 faf7 	bl	8008f2c <__multadd>
 800893e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008940:	4681      	mov	r9, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8172 	beq.w	8008c2c <_dtoa_r+0xb4c>
 8008948:	2300      	movs	r3, #0
 800894a:	4629      	mov	r1, r5
 800894c:	220a      	movs	r2, #10
 800894e:	4658      	mov	r0, fp
 8008950:	f000 faec 	bl	8008f2c <__multadd>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	4605      	mov	r5, r0
 800895a:	dc67      	bgt.n	8008a2c <_dtoa_r+0x94c>
 800895c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895e:	2b02      	cmp	r3, #2
 8008960:	dc41      	bgt.n	80089e6 <_dtoa_r+0x906>
 8008962:	e063      	b.n	8008a2c <_dtoa_r+0x94c>
 8008964:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008966:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800896a:	e746      	b.n	80087fa <_dtoa_r+0x71a>
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	1e5c      	subs	r4, r3, #1
 8008970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008972:	42a3      	cmp	r3, r4
 8008974:	bfbf      	itttt	lt
 8008976:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008978:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800897a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800897c:	1ae3      	sublt	r3, r4, r3
 800897e:	bfb4      	ite	lt
 8008980:	18d2      	addlt	r2, r2, r3
 8008982:	1b1c      	subge	r4, r3, r4
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	bfbc      	itt	lt
 8008988:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800898a:	2400      	movlt	r4, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfb5      	itete	lt
 8008990:	eba8 0603 	sublt.w	r6, r8, r3
 8008994:	9b07      	ldrge	r3, [sp, #28]
 8008996:	2300      	movlt	r3, #0
 8008998:	4646      	movge	r6, r8
 800899a:	e730      	b.n	80087fe <_dtoa_r+0x71e>
 800899c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800899e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80089a0:	4646      	mov	r6, r8
 80089a2:	e735      	b.n	8008810 <_dtoa_r+0x730>
 80089a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089a6:	e75c      	b.n	8008862 <_dtoa_r+0x782>
 80089a8:	2300      	movs	r3, #0
 80089aa:	e788      	b.n	80088be <_dtoa_r+0x7de>
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	40240000 	.word	0x40240000
 80089b4:	40140000 	.word	0x40140000
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	e780      	b.n	80088be <_dtoa_r+0x7de>
 80089bc:	2300      	movs	r3, #0
 80089be:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c0:	e782      	b.n	80088c8 <_dtoa_r+0x7e8>
 80089c2:	d099      	beq.n	80088f8 <_dtoa_r+0x818>
 80089c4:	9a08      	ldr	r2, [sp, #32]
 80089c6:	331c      	adds	r3, #28
 80089c8:	441a      	add	r2, r3
 80089ca:	4498      	add	r8, r3
 80089cc:	441e      	add	r6, r3
 80089ce:	9208      	str	r2, [sp, #32]
 80089d0:	e792      	b.n	80088f8 <_dtoa_r+0x818>
 80089d2:	4603      	mov	r3, r0
 80089d4:	e7f6      	b.n	80089c4 <_dtoa_r+0x8e4>
 80089d6:	9b07      	ldr	r3, [sp, #28]
 80089d8:	9704      	str	r7, [sp, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dc20      	bgt.n	8008a20 <_dtoa_r+0x940>
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	dd1e      	ble.n	8008a24 <_dtoa_r+0x944>
 80089e6:	9b00      	ldr	r3, [sp, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f aec0 	bne.w	800876e <_dtoa_r+0x68e>
 80089ee:	4621      	mov	r1, r4
 80089f0:	2205      	movs	r2, #5
 80089f2:	4658      	mov	r0, fp
 80089f4:	f000 fa9a 	bl	8008f2c <__multadd>
 80089f8:	4601      	mov	r1, r0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4648      	mov	r0, r9
 80089fe:	f000 fcf7 	bl	80093f0 <__mcmp>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f77f aeb3 	ble.w	800876e <_dtoa_r+0x68e>
 8008a08:	4656      	mov	r6, sl
 8008a0a:	2331      	movs	r3, #49	@ 0x31
 8008a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	3301      	adds	r3, #1
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	e6ae      	b.n	8008776 <_dtoa_r+0x696>
 8008a18:	9c07      	ldr	r4, [sp, #28]
 8008a1a:	9704      	str	r7, [sp, #16]
 8008a1c:	4625      	mov	r5, r4
 8008a1e:	e7f3      	b.n	8008a08 <_dtoa_r+0x928>
 8008a20:	9b07      	ldr	r3, [sp, #28]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 8104 	beq.w	8008c34 <_dtoa_r+0xb54>
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	dd05      	ble.n	8008a3c <_dtoa_r+0x95c>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4632      	mov	r2, r6
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fc6f 	bl	8009318 <__lshift>
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d05a      	beq.n	8008af8 <_dtoa_r+0xa18>
 8008a42:	6869      	ldr	r1, [r5, #4]
 8008a44:	4658      	mov	r0, fp
 8008a46:	f000 fa0f 	bl	8008e68 <_Balloc>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <_dtoa_r+0x97a>
 8008a4e:	4b84      	ldr	r3, [pc, #528]	@ (8008c60 <_dtoa_r+0xb80>)
 8008a50:	4602      	mov	r2, r0
 8008a52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a56:	f7ff bb5a 	b.w	800810e <_dtoa_r+0x2e>
 8008a5a:	692a      	ldr	r2, [r5, #16]
 8008a5c:	3202      	adds	r2, #2
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	f105 010c 	add.w	r1, r5, #12
 8008a64:	300c      	adds	r0, #12
 8008a66:	f001 ff75 	bl	800a954 <memcpy>
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f000 fc52 	bl	8009318 <__lshift>
 8008a74:	f10a 0301 	add.w	r3, sl, #1
 8008a78:	9307      	str	r3, [sp, #28]
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	4453      	add	r3, sl
 8008a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	462f      	mov	r7, r5
 8008a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	3b01      	subs	r3, #1
 8008a92:	4648      	mov	r0, r9
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	f7ff fa99 	bl	8007fcc <quorem>
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	9002      	str	r0, [sp, #8]
 8008a9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008aa2:	4648      	mov	r0, r9
 8008aa4:	f000 fca4 	bl	80093f0 <__mcmp>
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	9008      	str	r0, [sp, #32]
 8008aac:	4621      	mov	r1, r4
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 fcba 	bl	8009428 <__mdiff>
 8008ab4:	68c2      	ldr	r2, [r0, #12]
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	bb02      	cbnz	r2, 8008afc <_dtoa_r+0xa1c>
 8008aba:	4601      	mov	r1, r0
 8008abc:	4648      	mov	r0, r9
 8008abe:	f000 fc97 	bl	80093f0 <__mcmp>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4658      	mov	r0, fp
 8008ac8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aca:	f000 fa0d 	bl	8008ee8 <_Bfree>
 8008ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ad2:	9e07      	ldr	r6, [sp, #28]
 8008ad4:	ea43 0102 	orr.w	r1, r3, r2
 8008ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ada:	4319      	orrs	r1, r3
 8008adc:	d110      	bne.n	8008b00 <_dtoa_r+0xa20>
 8008ade:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ae2:	d029      	beq.n	8008b38 <_dtoa_r+0xa58>
 8008ae4:	9b08      	ldr	r3, [sp, #32]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd02      	ble.n	8008af0 <_dtoa_r+0xa10>
 8008aea:	9b02      	ldr	r3, [sp, #8]
 8008aec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008af0:	9b00      	ldr	r3, [sp, #0]
 8008af2:	f883 8000 	strb.w	r8, [r3]
 8008af6:	e63f      	b.n	8008778 <_dtoa_r+0x698>
 8008af8:	4628      	mov	r0, r5
 8008afa:	e7bb      	b.n	8008a74 <_dtoa_r+0x994>
 8008afc:	2201      	movs	r2, #1
 8008afe:	e7e1      	b.n	8008ac4 <_dtoa_r+0x9e4>
 8008b00:	9b08      	ldr	r3, [sp, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	db04      	blt.n	8008b10 <_dtoa_r+0xa30>
 8008b06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	d120      	bne.n	8008b52 <_dtoa_r+0xa72>
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	dded      	ble.n	8008af0 <_dtoa_r+0xa10>
 8008b14:	4649      	mov	r1, r9
 8008b16:	2201      	movs	r2, #1
 8008b18:	4658      	mov	r0, fp
 8008b1a:	f000 fbfd 	bl	8009318 <__lshift>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4681      	mov	r9, r0
 8008b22:	f000 fc65 	bl	80093f0 <__mcmp>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	dc03      	bgt.n	8008b32 <_dtoa_r+0xa52>
 8008b2a:	d1e1      	bne.n	8008af0 <_dtoa_r+0xa10>
 8008b2c:	f018 0f01 	tst.w	r8, #1
 8008b30:	d0de      	beq.n	8008af0 <_dtoa_r+0xa10>
 8008b32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b36:	d1d8      	bne.n	8008aea <_dtoa_r+0xa0a>
 8008b38:	9a00      	ldr	r2, [sp, #0]
 8008b3a:	2339      	movs	r3, #57	@ 0x39
 8008b3c:	7013      	strb	r3, [r2, #0]
 8008b3e:	4633      	mov	r3, r6
 8008b40:	461e      	mov	r6, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b48:	2a39      	cmp	r2, #57	@ 0x39
 8008b4a:	d052      	beq.n	8008bf2 <_dtoa_r+0xb12>
 8008b4c:	3201      	adds	r2, #1
 8008b4e:	701a      	strb	r2, [r3, #0]
 8008b50:	e612      	b.n	8008778 <_dtoa_r+0x698>
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	dd07      	ble.n	8008b66 <_dtoa_r+0xa86>
 8008b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b5a:	d0ed      	beq.n	8008b38 <_dtoa_r+0xa58>
 8008b5c:	9a00      	ldr	r2, [sp, #0]
 8008b5e:	f108 0301 	add.w	r3, r8, #1
 8008b62:	7013      	strb	r3, [r2, #0]
 8008b64:	e608      	b.n	8008778 <_dtoa_r+0x698>
 8008b66:	9b07      	ldr	r3, [sp, #28]
 8008b68:	9a07      	ldr	r2, [sp, #28]
 8008b6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d028      	beq.n	8008bc6 <_dtoa_r+0xae6>
 8008b74:	4649      	mov	r1, r9
 8008b76:	2300      	movs	r3, #0
 8008b78:	220a      	movs	r2, #10
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f000 f9d6 	bl	8008f2c <__multadd>
 8008b80:	42af      	cmp	r7, r5
 8008b82:	4681      	mov	r9, r0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	f04f 020a 	mov.w	r2, #10
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4658      	mov	r0, fp
 8008b90:	d107      	bne.n	8008ba2 <_dtoa_r+0xac2>
 8008b92:	f000 f9cb 	bl	8008f2c <__multadd>
 8008b96:	4607      	mov	r7, r0
 8008b98:	4605      	mov	r5, r0
 8008b9a:	9b07      	ldr	r3, [sp, #28]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	e774      	b.n	8008a8c <_dtoa_r+0x9ac>
 8008ba2:	f000 f9c3 	bl	8008f2c <__multadd>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4607      	mov	r7, r0
 8008baa:	2300      	movs	r3, #0
 8008bac:	220a      	movs	r2, #10
 8008bae:	4658      	mov	r0, fp
 8008bb0:	f000 f9bc 	bl	8008f2c <__multadd>
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	e7f0      	b.n	8008b9a <_dtoa_r+0xaba>
 8008bb8:	9b00      	ldr	r3, [sp, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfcc      	ite	gt
 8008bbe:	461e      	movgt	r6, r3
 8008bc0:	2601      	movle	r6, #1
 8008bc2:	4456      	add	r6, sl
 8008bc4:	2700      	movs	r7, #0
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4658      	mov	r0, fp
 8008bcc:	f000 fba4 	bl	8009318 <__lshift>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4681      	mov	r9, r0
 8008bd4:	f000 fc0c 	bl	80093f0 <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	dcb0      	bgt.n	8008b3e <_dtoa_r+0xa5e>
 8008bdc:	d102      	bne.n	8008be4 <_dtoa_r+0xb04>
 8008bde:	f018 0f01 	tst.w	r8, #1
 8008be2:	d1ac      	bne.n	8008b3e <_dtoa_r+0xa5e>
 8008be4:	4633      	mov	r3, r6
 8008be6:	461e      	mov	r6, r3
 8008be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bec:	2a30      	cmp	r2, #48	@ 0x30
 8008bee:	d0fa      	beq.n	8008be6 <_dtoa_r+0xb06>
 8008bf0:	e5c2      	b.n	8008778 <_dtoa_r+0x698>
 8008bf2:	459a      	cmp	sl, r3
 8008bf4:	d1a4      	bne.n	8008b40 <_dtoa_r+0xa60>
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	2331      	movs	r3, #49	@ 0x31
 8008bfe:	f88a 3000 	strb.w	r3, [sl]
 8008c02:	e5b9      	b.n	8008778 <_dtoa_r+0x698>
 8008c04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c64 <_dtoa_r+0xb84>
 8008c0a:	b11b      	cbz	r3, 8008c14 <_dtoa_r+0xb34>
 8008c0c:	f10a 0308 	add.w	r3, sl, #8
 8008c10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4650      	mov	r0, sl
 8008c16:	b019      	add	sp, #100	@ 0x64
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	f77f ae37 	ble.w	8008892 <_dtoa_r+0x7b2>
 8008c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c28:	2001      	movs	r0, #1
 8008c2a:	e655      	b.n	80088d8 <_dtoa_r+0x7f8>
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f77f aed6 	ble.w	80089e0 <_dtoa_r+0x900>
 8008c34:	4656      	mov	r6, sl
 8008c36:	4621      	mov	r1, r4
 8008c38:	4648      	mov	r0, r9
 8008c3a:	f7ff f9c7 	bl	8007fcc <quorem>
 8008c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c42:	f806 8b01 	strb.w	r8, [r6], #1
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	eba6 020a 	sub.w	r2, r6, sl
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	ddb3      	ble.n	8008bb8 <_dtoa_r+0xad8>
 8008c50:	4649      	mov	r1, r9
 8008c52:	2300      	movs	r3, #0
 8008c54:	220a      	movs	r2, #10
 8008c56:	4658      	mov	r0, fp
 8008c58:	f000 f968 	bl	8008f2c <__multadd>
 8008c5c:	4681      	mov	r9, r0
 8008c5e:	e7ea      	b.n	8008c36 <_dtoa_r+0xb56>
 8008c60:	0800b8c1 	.word	0x0800b8c1
 8008c64:	0800b845 	.word	0x0800b845

08008c68 <_free_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d041      	beq.n	8008cf4 <_free_r+0x8c>
 8008c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c74:	1f0c      	subs	r4, r1, #4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfb8      	it	lt
 8008c7a:	18e4      	addlt	r4, r4, r3
 8008c7c:	f000 f8e8 	bl	8008e50 <__malloc_lock>
 8008c80:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <_free_r+0x90>)
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	b933      	cbnz	r3, 8008c94 <_free_r+0x2c>
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	6014      	str	r4, [r2, #0]
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b8e4 	b.w	8008e5c <__malloc_unlock>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d908      	bls.n	8008caa <_free_r+0x42>
 8008c98:	6820      	ldr	r0, [r4, #0]
 8008c9a:	1821      	adds	r1, r4, r0
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf01      	itttt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	1809      	addeq	r1, r1, r0
 8008ca6:	6021      	streq	r1, [r4, #0]
 8008ca8:	e7ed      	b.n	8008c86 <_free_r+0x1e>
 8008caa:	461a      	mov	r2, r3
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b10b      	cbz	r3, 8008cb4 <_free_r+0x4c>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d9fa      	bls.n	8008caa <_free_r+0x42>
 8008cb4:	6811      	ldr	r1, [r2, #0]
 8008cb6:	1850      	adds	r0, r2, r1
 8008cb8:	42a0      	cmp	r0, r4
 8008cba:	d10b      	bne.n	8008cd4 <_free_r+0x6c>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	4401      	add	r1, r0
 8008cc0:	1850      	adds	r0, r2, r1
 8008cc2:	4283      	cmp	r3, r0
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	d1e0      	bne.n	8008c8a <_free_r+0x22>
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	6053      	str	r3, [r2, #4]
 8008cce:	4408      	add	r0, r1
 8008cd0:	6010      	str	r0, [r2, #0]
 8008cd2:	e7da      	b.n	8008c8a <_free_r+0x22>
 8008cd4:	d902      	bls.n	8008cdc <_free_r+0x74>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	e7d6      	b.n	8008c8a <_free_r+0x22>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	1821      	adds	r1, r4, r0
 8008ce0:	428b      	cmp	r3, r1
 8008ce2:	bf04      	itt	eq
 8008ce4:	6819      	ldreq	r1, [r3, #0]
 8008ce6:	685b      	ldreq	r3, [r3, #4]
 8008ce8:	6063      	str	r3, [r4, #4]
 8008cea:	bf04      	itt	eq
 8008cec:	1809      	addeq	r1, r1, r0
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	6054      	str	r4, [r2, #4]
 8008cf2:	e7ca      	b.n	8008c8a <_free_r+0x22>
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000740 	.word	0x20000740

08008cfc <malloc>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	@ (8008d08 <malloc+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f000 b825 	b.w	8008d50 <_malloc_r>
 8008d06:	bf00      	nop
 8008d08:	200001a0 	.word	0x200001a0

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8008d4c <sbrk_aligned+0x40>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f001 fe0c 	bl	800a934 <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f001 fe07 	bl	800a934 <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d103      	bne.n	8008d32 <sbrk_aligned+0x26>
 8008d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d2e:	4620      	mov	r0, r4
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	1cc4      	adds	r4, r0, #3
 8008d34:	f024 0403 	bic.w	r4, r4, #3
 8008d38:	42a0      	cmp	r0, r4
 8008d3a:	d0f8      	beq.n	8008d2e <sbrk_aligned+0x22>
 8008d3c:	1a21      	subs	r1, r4, r0
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f001 fdf8 	bl	800a934 <_sbrk_r>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1f2      	bne.n	8008d2e <sbrk_aligned+0x22>
 8008d48:	e7ef      	b.n	8008d2a <sbrk_aligned+0x1e>
 8008d4a:	bf00      	nop
 8008d4c:	2000073c 	.word	0x2000073c

08008d50 <_malloc_r>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	f025 0503 	bic.w	r5, r5, #3
 8008d5a:	3508      	adds	r5, #8
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	bf38      	it	cc
 8008d60:	250c      	movcc	r5, #12
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	4606      	mov	r6, r0
 8008d66:	db01      	blt.n	8008d6c <_malloc_r+0x1c>
 8008d68:	42a9      	cmp	r1, r5
 8008d6a:	d904      	bls.n	8008d76 <_malloc_r+0x26>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	6033      	str	r3, [r6, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e4c <_malloc_r+0xfc>
 8008d7a:	f000 f869 	bl	8008e50 <__malloc_lock>
 8008d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d82:	461c      	mov	r4, r3
 8008d84:	bb44      	cbnz	r4, 8008dd8 <_malloc_r+0x88>
 8008d86:	4629      	mov	r1, r5
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff ffbf 	bl	8008d0c <sbrk_aligned>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	4604      	mov	r4, r0
 8008d92:	d158      	bne.n	8008e46 <_malloc_r+0xf6>
 8008d94:	f8d8 4000 	ldr.w	r4, [r8]
 8008d98:	4627      	mov	r7, r4
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	d143      	bne.n	8008e26 <_malloc_r+0xd6>
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	d04b      	beq.n	8008e3a <_malloc_r+0xea>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	4639      	mov	r1, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	eb04 0903 	add.w	r9, r4, r3
 8008dac:	f001 fdc2 	bl	800a934 <_sbrk_r>
 8008db0:	4581      	cmp	r9, r0
 8008db2:	d142      	bne.n	8008e3a <_malloc_r+0xea>
 8008db4:	6821      	ldr	r1, [r4, #0]
 8008db6:	1a6d      	subs	r5, r5, r1
 8008db8:	4629      	mov	r1, r5
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffa6 	bl	8008d0c <sbrk_aligned>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d03a      	beq.n	8008e3a <_malloc_r+0xea>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	442b      	add	r3, r5
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	f8d8 3000 	ldr.w	r3, [r8]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	bb62      	cbnz	r2, 8008e2c <_malloc_r+0xdc>
 8008dd2:	f8c8 7000 	str.w	r7, [r8]
 8008dd6:	e00f      	b.n	8008df8 <_malloc_r+0xa8>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	1b52      	subs	r2, r2, r5
 8008ddc:	d420      	bmi.n	8008e20 <_malloc_r+0xd0>
 8008dde:	2a0b      	cmp	r2, #11
 8008de0:	d917      	bls.n	8008e12 <_malloc_r+0xc2>
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	6025      	str	r5, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	6059      	strne	r1, [r3, #4]
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	bf08      	it	eq
 8008df0:	f8c8 1000 	streq.w	r1, [r8]
 8008df4:	5162      	str	r2, [r4, r5]
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f000 f82f 	bl	8008e5c <__malloc_unlock>
 8008dfe:	f104 000b 	add.w	r0, r4, #11
 8008e02:	1d23      	adds	r3, r4, #4
 8008e04:	f020 0007 	bic.w	r0, r0, #7
 8008e08:	1ac2      	subs	r2, r0, r3
 8008e0a:	bf1c      	itt	ne
 8008e0c:	1a1b      	subne	r3, r3, r0
 8008e0e:	50a3      	strne	r3, [r4, r2]
 8008e10:	e7af      	b.n	8008d72 <_malloc_r+0x22>
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	bf0c      	ite	eq
 8008e18:	f8c8 2000 	streq.w	r2, [r8]
 8008e1c:	605a      	strne	r2, [r3, #4]
 8008e1e:	e7eb      	b.n	8008df8 <_malloc_r+0xa8>
 8008e20:	4623      	mov	r3, r4
 8008e22:	6864      	ldr	r4, [r4, #4]
 8008e24:	e7ae      	b.n	8008d84 <_malloc_r+0x34>
 8008e26:	463c      	mov	r4, r7
 8008e28:	687f      	ldr	r7, [r7, #4]
 8008e2a:	e7b6      	b.n	8008d9a <_malloc_r+0x4a>
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d1fb      	bne.n	8008e2c <_malloc_r+0xdc>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e7de      	b.n	8008df8 <_malloc_r+0xa8>
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	6033      	str	r3, [r6, #0]
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 f80c 	bl	8008e5c <__malloc_unlock>
 8008e44:	e794      	b.n	8008d70 <_malloc_r+0x20>
 8008e46:	6005      	str	r5, [r0, #0]
 8008e48:	e7d6      	b.n	8008df8 <_malloc_r+0xa8>
 8008e4a:	bf00      	nop
 8008e4c:	20000740 	.word	0x20000740

08008e50 <__malloc_lock>:
 8008e50:	4801      	ldr	r0, [pc, #4]	@ (8008e58 <__malloc_lock+0x8>)
 8008e52:	f7ff b8b2 	b.w	8007fba <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	20000738 	.word	0x20000738

08008e5c <__malloc_unlock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	@ (8008e64 <__malloc_unlock+0x8>)
 8008e5e:	f7ff b8ad 	b.w	8007fbc <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	20000738 	.word	0x20000738

08008e68 <_Balloc>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	69c6      	ldr	r6, [r0, #28]
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	b976      	cbnz	r6, 8008e90 <_Balloc+0x28>
 8008e72:	2010      	movs	r0, #16
 8008e74:	f7ff ff42 	bl	8008cfc <malloc>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	61e0      	str	r0, [r4, #28]
 8008e7c:	b920      	cbnz	r0, 8008e88 <_Balloc+0x20>
 8008e7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ee0 <_Balloc+0x78>)
 8008e80:	4818      	ldr	r0, [pc, #96]	@ (8008ee4 <_Balloc+0x7c>)
 8008e82:	216b      	movs	r1, #107	@ 0x6b
 8008e84:	f001 fd7c 	bl	800a980 <__assert_func>
 8008e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e8c:	6006      	str	r6, [r0, #0]
 8008e8e:	60c6      	str	r6, [r0, #12]
 8008e90:	69e6      	ldr	r6, [r4, #28]
 8008e92:	68f3      	ldr	r3, [r6, #12]
 8008e94:	b183      	cbz	r3, 8008eb8 <_Balloc+0x50>
 8008e96:	69e3      	ldr	r3, [r4, #28]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e9e:	b9b8      	cbnz	r0, 8008ed0 <_Balloc+0x68>
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ea6:	1d72      	adds	r2, r6, #5
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f001 fd86 	bl	800a9bc <_calloc_r>
 8008eb0:	b160      	cbz	r0, 8008ecc <_Balloc+0x64>
 8008eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eb6:	e00e      	b.n	8008ed6 <_Balloc+0x6e>
 8008eb8:	2221      	movs	r2, #33	@ 0x21
 8008eba:	2104      	movs	r1, #4
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f001 fd7d 	bl	800a9bc <_calloc_r>
 8008ec2:	69e3      	ldr	r3, [r4, #28]
 8008ec4:	60f0      	str	r0, [r6, #12]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e4      	bne.n	8008e96 <_Balloc+0x2e>
 8008ecc:	2000      	movs	r0, #0
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	6802      	ldr	r2, [r0, #0]
 8008ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008edc:	e7f7      	b.n	8008ece <_Balloc+0x66>
 8008ede:	bf00      	nop
 8008ee0:	0800b852 	.word	0x0800b852
 8008ee4:	0800b8d2 	.word	0x0800b8d2

08008ee8 <_Bfree>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	69c6      	ldr	r6, [r0, #28]
 8008eec:	4605      	mov	r5, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	b976      	cbnz	r6, 8008f10 <_Bfree+0x28>
 8008ef2:	2010      	movs	r0, #16
 8008ef4:	f7ff ff02 	bl	8008cfc <malloc>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	61e8      	str	r0, [r5, #28]
 8008efc:	b920      	cbnz	r0, 8008f08 <_Bfree+0x20>
 8008efe:	4b09      	ldr	r3, [pc, #36]	@ (8008f24 <_Bfree+0x3c>)
 8008f00:	4809      	ldr	r0, [pc, #36]	@ (8008f28 <_Bfree+0x40>)
 8008f02:	218f      	movs	r1, #143	@ 0x8f
 8008f04:	f001 fd3c 	bl	800a980 <__assert_func>
 8008f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f0c:	6006      	str	r6, [r0, #0]
 8008f0e:	60c6      	str	r6, [r0, #12]
 8008f10:	b13c      	cbz	r4, 8008f22 <_Bfree+0x3a>
 8008f12:	69eb      	ldr	r3, [r5, #28]
 8008f14:	6862      	ldr	r2, [r4, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f1c:	6021      	str	r1, [r4, #0]
 8008f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	0800b852 	.word	0x0800b852
 8008f28:	0800b8d2 	.word	0x0800b8d2

08008f2c <__multadd>:
 8008f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f30:	690d      	ldr	r5, [r1, #16]
 8008f32:	4607      	mov	r7, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	461e      	mov	r6, r3
 8008f38:	f101 0c14 	add.w	ip, r1, #20
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f42:	b299      	uxth	r1, r3
 8008f44:	fb02 6101 	mla	r1, r2, r1, r6
 8008f48:	0c1e      	lsrs	r6, r3, #16
 8008f4a:	0c0b      	lsrs	r3, r1, #16
 8008f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f50:	b289      	uxth	r1, r1
 8008f52:	3001      	adds	r0, #1
 8008f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f58:	4285      	cmp	r5, r0
 8008f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f62:	dcec      	bgt.n	8008f3e <__multadd+0x12>
 8008f64:	b30e      	cbz	r6, 8008faa <__multadd+0x7e>
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc19      	bgt.n	8008fa0 <__multadd+0x74>
 8008f6c:	6861      	ldr	r1, [r4, #4]
 8008f6e:	4638      	mov	r0, r7
 8008f70:	3101      	adds	r1, #1
 8008f72:	f7ff ff79 	bl	8008e68 <_Balloc>
 8008f76:	4680      	mov	r8, r0
 8008f78:	b928      	cbnz	r0, 8008f86 <__multadd+0x5a>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb0 <__multadd+0x84>)
 8008f7e:	480d      	ldr	r0, [pc, #52]	@ (8008fb4 <__multadd+0x88>)
 8008f80:	21ba      	movs	r1, #186	@ 0xba
 8008f82:	f001 fcfd 	bl	800a980 <__assert_func>
 8008f86:	6922      	ldr	r2, [r4, #16]
 8008f88:	3202      	adds	r2, #2
 8008f8a:	f104 010c 	add.w	r1, r4, #12
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	300c      	adds	r0, #12
 8008f92:	f001 fcdf 	bl	800a954 <memcpy>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7ff ffa5 	bl	8008ee8 <_Bfree>
 8008f9e:	4644      	mov	r4, r8
 8008fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	615e      	str	r6, [r3, #20]
 8008fa8:	6125      	str	r5, [r4, #16]
 8008faa:	4620      	mov	r0, r4
 8008fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb0:	0800b8c1 	.word	0x0800b8c1
 8008fb4:	0800b8d2 	.word	0x0800b8d2

08008fb8 <__s2b>:
 8008fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	4615      	mov	r5, r2
 8008fc0:	461f      	mov	r7, r3
 8008fc2:	2209      	movs	r2, #9
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fcc:	2100      	movs	r1, #0
 8008fce:	2201      	movs	r2, #1
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	db09      	blt.n	8008fe8 <__s2b+0x30>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff ff47 	bl	8008e68 <_Balloc>
 8008fda:	b940      	cbnz	r0, 8008fee <__s2b+0x36>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	4b19      	ldr	r3, [pc, #100]	@ (8009044 <__s2b+0x8c>)
 8008fe0:	4819      	ldr	r0, [pc, #100]	@ (8009048 <__s2b+0x90>)
 8008fe2:	21d3      	movs	r1, #211	@ 0xd3
 8008fe4:	f001 fccc 	bl	800a980 <__assert_func>
 8008fe8:	0052      	lsls	r2, r2, #1
 8008fea:	3101      	adds	r1, #1
 8008fec:	e7f0      	b.n	8008fd0 <__s2b+0x18>
 8008fee:	9b08      	ldr	r3, [sp, #32]
 8008ff0:	6143      	str	r3, [r0, #20]
 8008ff2:	2d09      	cmp	r5, #9
 8008ff4:	f04f 0301 	mov.w	r3, #1
 8008ff8:	6103      	str	r3, [r0, #16]
 8008ffa:	dd16      	ble.n	800902a <__s2b+0x72>
 8008ffc:	f104 0909 	add.w	r9, r4, #9
 8009000:	46c8      	mov	r8, r9
 8009002:	442c      	add	r4, r5
 8009004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009008:	4601      	mov	r1, r0
 800900a:	3b30      	subs	r3, #48	@ 0x30
 800900c:	220a      	movs	r2, #10
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ff8c 	bl	8008f2c <__multadd>
 8009014:	45a0      	cmp	r8, r4
 8009016:	d1f5      	bne.n	8009004 <__s2b+0x4c>
 8009018:	f1a5 0408 	sub.w	r4, r5, #8
 800901c:	444c      	add	r4, r9
 800901e:	1b2d      	subs	r5, r5, r4
 8009020:	1963      	adds	r3, r4, r5
 8009022:	42bb      	cmp	r3, r7
 8009024:	db04      	blt.n	8009030 <__s2b+0x78>
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	340a      	adds	r4, #10
 800902c:	2509      	movs	r5, #9
 800902e:	e7f6      	b.n	800901e <__s2b+0x66>
 8009030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009034:	4601      	mov	r1, r0
 8009036:	3b30      	subs	r3, #48	@ 0x30
 8009038:	220a      	movs	r2, #10
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ff76 	bl	8008f2c <__multadd>
 8009040:	e7ee      	b.n	8009020 <__s2b+0x68>
 8009042:	bf00      	nop
 8009044:	0800b8c1 	.word	0x0800b8c1
 8009048:	0800b8d2 	.word	0x0800b8d2

0800904c <__hi0bits>:
 800904c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009050:	4603      	mov	r3, r0
 8009052:	bf36      	itet	cc
 8009054:	0403      	lslcc	r3, r0, #16
 8009056:	2000      	movcs	r0, #0
 8009058:	2010      	movcc	r0, #16
 800905a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800905e:	bf3c      	itt	cc
 8009060:	021b      	lslcc	r3, r3, #8
 8009062:	3008      	addcc	r0, #8
 8009064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009068:	bf3c      	itt	cc
 800906a:	011b      	lslcc	r3, r3, #4
 800906c:	3004      	addcc	r0, #4
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009072:	bf3c      	itt	cc
 8009074:	009b      	lslcc	r3, r3, #2
 8009076:	3002      	addcc	r0, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	db05      	blt.n	8009088 <__hi0bits+0x3c>
 800907c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009080:	f100 0001 	add.w	r0, r0, #1
 8009084:	bf08      	it	eq
 8009086:	2020      	moveq	r0, #32
 8009088:	4770      	bx	lr

0800908a <__lo0bits>:
 800908a:	6803      	ldr	r3, [r0, #0]
 800908c:	4602      	mov	r2, r0
 800908e:	f013 0007 	ands.w	r0, r3, #7
 8009092:	d00b      	beq.n	80090ac <__lo0bits+0x22>
 8009094:	07d9      	lsls	r1, r3, #31
 8009096:	d421      	bmi.n	80090dc <__lo0bits+0x52>
 8009098:	0798      	lsls	r0, r3, #30
 800909a:	bf49      	itett	mi
 800909c:	085b      	lsrmi	r3, r3, #1
 800909e:	089b      	lsrpl	r3, r3, #2
 80090a0:	2001      	movmi	r0, #1
 80090a2:	6013      	strmi	r3, [r2, #0]
 80090a4:	bf5c      	itt	pl
 80090a6:	6013      	strpl	r3, [r2, #0]
 80090a8:	2002      	movpl	r0, #2
 80090aa:	4770      	bx	lr
 80090ac:	b299      	uxth	r1, r3
 80090ae:	b909      	cbnz	r1, 80090b4 <__lo0bits+0x2a>
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	2010      	movs	r0, #16
 80090b4:	b2d9      	uxtb	r1, r3
 80090b6:	b909      	cbnz	r1, 80090bc <__lo0bits+0x32>
 80090b8:	3008      	adds	r0, #8
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	0719      	lsls	r1, r3, #28
 80090be:	bf04      	itt	eq
 80090c0:	091b      	lsreq	r3, r3, #4
 80090c2:	3004      	addeq	r0, #4
 80090c4:	0799      	lsls	r1, r3, #30
 80090c6:	bf04      	itt	eq
 80090c8:	089b      	lsreq	r3, r3, #2
 80090ca:	3002      	addeq	r0, #2
 80090cc:	07d9      	lsls	r1, r3, #31
 80090ce:	d403      	bmi.n	80090d8 <__lo0bits+0x4e>
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	f100 0001 	add.w	r0, r0, #1
 80090d6:	d003      	beq.n	80090e0 <__lo0bits+0x56>
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	4770      	bx	lr
 80090dc:	2000      	movs	r0, #0
 80090de:	4770      	bx	lr
 80090e0:	2020      	movs	r0, #32
 80090e2:	4770      	bx	lr

080090e4 <__i2b>:
 80090e4:	b510      	push	{r4, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	2101      	movs	r1, #1
 80090ea:	f7ff febd 	bl	8008e68 <_Balloc>
 80090ee:	4602      	mov	r2, r0
 80090f0:	b928      	cbnz	r0, 80090fe <__i2b+0x1a>
 80090f2:	4b05      	ldr	r3, [pc, #20]	@ (8009108 <__i2b+0x24>)
 80090f4:	4805      	ldr	r0, [pc, #20]	@ (800910c <__i2b+0x28>)
 80090f6:	f240 1145 	movw	r1, #325	@ 0x145
 80090fa:	f001 fc41 	bl	800a980 <__assert_func>
 80090fe:	2301      	movs	r3, #1
 8009100:	6144      	str	r4, [r0, #20]
 8009102:	6103      	str	r3, [r0, #16]
 8009104:	bd10      	pop	{r4, pc}
 8009106:	bf00      	nop
 8009108:	0800b8c1 	.word	0x0800b8c1
 800910c:	0800b8d2 	.word	0x0800b8d2

08009110 <__multiply>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	4614      	mov	r4, r2
 8009116:	690a      	ldr	r2, [r1, #16]
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	429a      	cmp	r2, r3
 800911c:	bfa8      	it	ge
 800911e:	4623      	movge	r3, r4
 8009120:	460f      	mov	r7, r1
 8009122:	bfa4      	itt	ge
 8009124:	460c      	movge	r4, r1
 8009126:	461f      	movge	r7, r3
 8009128:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800912c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009130:	68a3      	ldr	r3, [r4, #8]
 8009132:	6861      	ldr	r1, [r4, #4]
 8009134:	eb0a 0609 	add.w	r6, sl, r9
 8009138:	42b3      	cmp	r3, r6
 800913a:	b085      	sub	sp, #20
 800913c:	bfb8      	it	lt
 800913e:	3101      	addlt	r1, #1
 8009140:	f7ff fe92 	bl	8008e68 <_Balloc>
 8009144:	b930      	cbnz	r0, 8009154 <__multiply+0x44>
 8009146:	4602      	mov	r2, r0
 8009148:	4b44      	ldr	r3, [pc, #272]	@ (800925c <__multiply+0x14c>)
 800914a:	4845      	ldr	r0, [pc, #276]	@ (8009260 <__multiply+0x150>)
 800914c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009150:	f001 fc16 	bl	800a980 <__assert_func>
 8009154:	f100 0514 	add.w	r5, r0, #20
 8009158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800915c:	462b      	mov	r3, r5
 800915e:	2200      	movs	r2, #0
 8009160:	4543      	cmp	r3, r8
 8009162:	d321      	bcc.n	80091a8 <__multiply+0x98>
 8009164:	f107 0114 	add.w	r1, r7, #20
 8009168:	f104 0214 	add.w	r2, r4, #20
 800916c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009170:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	1b13      	subs	r3, r2, r4
 8009178:	3b15      	subs	r3, #21
 800917a:	f023 0303 	bic.w	r3, r3, #3
 800917e:	3304      	adds	r3, #4
 8009180:	f104 0715 	add.w	r7, r4, #21
 8009184:	42ba      	cmp	r2, r7
 8009186:	bf38      	it	cc
 8009188:	2304      	movcc	r3, #4
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	9103      	str	r1, [sp, #12]
 8009190:	428b      	cmp	r3, r1
 8009192:	d80c      	bhi.n	80091ae <__multiply+0x9e>
 8009194:	2e00      	cmp	r6, #0
 8009196:	dd03      	ble.n	80091a0 <__multiply+0x90>
 8009198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800919c:	2b00      	cmp	r3, #0
 800919e:	d05b      	beq.n	8009258 <__multiply+0x148>
 80091a0:	6106      	str	r6, [r0, #16]
 80091a2:	b005      	add	sp, #20
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	f843 2b04 	str.w	r2, [r3], #4
 80091ac:	e7d8      	b.n	8009160 <__multiply+0x50>
 80091ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80091b2:	f1ba 0f00 	cmp.w	sl, #0
 80091b6:	d024      	beq.n	8009202 <__multiply+0xf2>
 80091b8:	f104 0e14 	add.w	lr, r4, #20
 80091bc:	46a9      	mov	r9, r5
 80091be:	f04f 0c00 	mov.w	ip, #0
 80091c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091c6:	f8d9 3000 	ldr.w	r3, [r9]
 80091ca:	fa1f fb87 	uxth.w	fp, r7
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80091d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091d8:	f8d9 7000 	ldr.w	r7, [r9]
 80091dc:	4463      	add	r3, ip
 80091de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80091e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091f0:	4572      	cmp	r2, lr
 80091f2:	f849 3b04 	str.w	r3, [r9], #4
 80091f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091fa:	d8e2      	bhi.n	80091c2 <__multiply+0xb2>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	f845 c003 	str.w	ip, [r5, r3]
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009208:	3104      	adds	r1, #4
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	d021      	beq.n	8009254 <__multiply+0x144>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	f104 0c14 	add.w	ip, r4, #20
 8009216:	46ae      	mov	lr, r5
 8009218:	f04f 0a00 	mov.w	sl, #0
 800921c:	f8bc b000 	ldrh.w	fp, [ip]
 8009220:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009224:	fb09 770b 	mla	r7, r9, fp, r7
 8009228:	4457      	add	r7, sl
 800922a:	b29b      	uxth	r3, r3
 800922c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009230:	f84e 3b04 	str.w	r3, [lr], #4
 8009234:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800923c:	f8be 3000 	ldrh.w	r3, [lr]
 8009240:	fb09 330a 	mla	r3, r9, sl, r3
 8009244:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009248:	4562      	cmp	r2, ip
 800924a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800924e:	d8e5      	bhi.n	800921c <__multiply+0x10c>
 8009250:	9f01      	ldr	r7, [sp, #4]
 8009252:	51eb      	str	r3, [r5, r7]
 8009254:	3504      	adds	r5, #4
 8009256:	e799      	b.n	800918c <__multiply+0x7c>
 8009258:	3e01      	subs	r6, #1
 800925a:	e79b      	b.n	8009194 <__multiply+0x84>
 800925c:	0800b8c1 	.word	0x0800b8c1
 8009260:	0800b8d2 	.word	0x0800b8d2

08009264 <__pow5mult>:
 8009264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009268:	4615      	mov	r5, r2
 800926a:	f012 0203 	ands.w	r2, r2, #3
 800926e:	4607      	mov	r7, r0
 8009270:	460e      	mov	r6, r1
 8009272:	d007      	beq.n	8009284 <__pow5mult+0x20>
 8009274:	4c25      	ldr	r4, [pc, #148]	@ (800930c <__pow5mult+0xa8>)
 8009276:	3a01      	subs	r2, #1
 8009278:	2300      	movs	r3, #0
 800927a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800927e:	f7ff fe55 	bl	8008f2c <__multadd>
 8009282:	4606      	mov	r6, r0
 8009284:	10ad      	asrs	r5, r5, #2
 8009286:	d03d      	beq.n	8009304 <__pow5mult+0xa0>
 8009288:	69fc      	ldr	r4, [r7, #28]
 800928a:	b97c      	cbnz	r4, 80092ac <__pow5mult+0x48>
 800928c:	2010      	movs	r0, #16
 800928e:	f7ff fd35 	bl	8008cfc <malloc>
 8009292:	4602      	mov	r2, r0
 8009294:	61f8      	str	r0, [r7, #28]
 8009296:	b928      	cbnz	r0, 80092a4 <__pow5mult+0x40>
 8009298:	4b1d      	ldr	r3, [pc, #116]	@ (8009310 <__pow5mult+0xac>)
 800929a:	481e      	ldr	r0, [pc, #120]	@ (8009314 <__pow5mult+0xb0>)
 800929c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092a0:	f001 fb6e 	bl	800a980 <__assert_func>
 80092a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092a8:	6004      	str	r4, [r0, #0]
 80092aa:	60c4      	str	r4, [r0, #12]
 80092ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092b4:	b94c      	cbnz	r4, 80092ca <__pow5mult+0x66>
 80092b6:	f240 2171 	movw	r1, #625	@ 0x271
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7ff ff12 	bl	80090e4 <__i2b>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092c6:	4604      	mov	r4, r0
 80092c8:	6003      	str	r3, [r0, #0]
 80092ca:	f04f 0900 	mov.w	r9, #0
 80092ce:	07eb      	lsls	r3, r5, #31
 80092d0:	d50a      	bpl.n	80092e8 <__pow5mult+0x84>
 80092d2:	4631      	mov	r1, r6
 80092d4:	4622      	mov	r2, r4
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff ff1a 	bl	8009110 <__multiply>
 80092dc:	4631      	mov	r1, r6
 80092de:	4680      	mov	r8, r0
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff fe01 	bl	8008ee8 <_Bfree>
 80092e6:	4646      	mov	r6, r8
 80092e8:	106d      	asrs	r5, r5, #1
 80092ea:	d00b      	beq.n	8009304 <__pow5mult+0xa0>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	b938      	cbnz	r0, 8009300 <__pow5mult+0x9c>
 80092f0:	4622      	mov	r2, r4
 80092f2:	4621      	mov	r1, r4
 80092f4:	4638      	mov	r0, r7
 80092f6:	f7ff ff0b 	bl	8009110 <__multiply>
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	f8c0 9000 	str.w	r9, [r0]
 8009300:	4604      	mov	r4, r0
 8009302:	e7e4      	b.n	80092ce <__pow5mult+0x6a>
 8009304:	4630      	mov	r0, r6
 8009306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930a:	bf00      	nop
 800930c:	0800b92c 	.word	0x0800b92c
 8009310:	0800b852 	.word	0x0800b852
 8009314:	0800b8d2 	.word	0x0800b8d2

08009318 <__lshift>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	6849      	ldr	r1, [r1, #4]
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	4607      	mov	r7, r0
 800932a:	4691      	mov	r9, r2
 800932c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009330:	f108 0601 	add.w	r6, r8, #1
 8009334:	42b3      	cmp	r3, r6
 8009336:	db0b      	blt.n	8009350 <__lshift+0x38>
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fd95 	bl	8008e68 <_Balloc>
 800933e:	4605      	mov	r5, r0
 8009340:	b948      	cbnz	r0, 8009356 <__lshift+0x3e>
 8009342:	4602      	mov	r2, r0
 8009344:	4b28      	ldr	r3, [pc, #160]	@ (80093e8 <__lshift+0xd0>)
 8009346:	4829      	ldr	r0, [pc, #164]	@ (80093ec <__lshift+0xd4>)
 8009348:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800934c:	f001 fb18 	bl	800a980 <__assert_func>
 8009350:	3101      	adds	r1, #1
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	e7ee      	b.n	8009334 <__lshift+0x1c>
 8009356:	2300      	movs	r3, #0
 8009358:	f100 0114 	add.w	r1, r0, #20
 800935c:	f100 0210 	add.w	r2, r0, #16
 8009360:	4618      	mov	r0, r3
 8009362:	4553      	cmp	r3, sl
 8009364:	db33      	blt.n	80093ce <__lshift+0xb6>
 8009366:	6920      	ldr	r0, [r4, #16]
 8009368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800936c:	f104 0314 	add.w	r3, r4, #20
 8009370:	f019 091f 	ands.w	r9, r9, #31
 8009374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800937c:	d02b      	beq.n	80093d6 <__lshift+0xbe>
 800937e:	f1c9 0e20 	rsb	lr, r9, #32
 8009382:	468a      	mov	sl, r1
 8009384:	2200      	movs	r2, #0
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	fa00 f009 	lsl.w	r0, r0, r9
 800938c:	4310      	orrs	r0, r2
 800938e:	f84a 0b04 	str.w	r0, [sl], #4
 8009392:	f853 2b04 	ldr.w	r2, [r3], #4
 8009396:	459c      	cmp	ip, r3
 8009398:	fa22 f20e 	lsr.w	r2, r2, lr
 800939c:	d8f3      	bhi.n	8009386 <__lshift+0x6e>
 800939e:	ebac 0304 	sub.w	r3, ip, r4
 80093a2:	3b15      	subs	r3, #21
 80093a4:	f023 0303 	bic.w	r3, r3, #3
 80093a8:	3304      	adds	r3, #4
 80093aa:	f104 0015 	add.w	r0, r4, #21
 80093ae:	4584      	cmp	ip, r0
 80093b0:	bf38      	it	cc
 80093b2:	2304      	movcc	r3, #4
 80093b4:	50ca      	str	r2, [r1, r3]
 80093b6:	b10a      	cbz	r2, 80093bc <__lshift+0xa4>
 80093b8:	f108 0602 	add.w	r6, r8, #2
 80093bc:	3e01      	subs	r6, #1
 80093be:	4638      	mov	r0, r7
 80093c0:	612e      	str	r6, [r5, #16]
 80093c2:	4621      	mov	r1, r4
 80093c4:	f7ff fd90 	bl	8008ee8 <_Bfree>
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80093d2:	3301      	adds	r3, #1
 80093d4:	e7c5      	b.n	8009362 <__lshift+0x4a>
 80093d6:	3904      	subs	r1, #4
 80093d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80093e0:	459c      	cmp	ip, r3
 80093e2:	d8f9      	bhi.n	80093d8 <__lshift+0xc0>
 80093e4:	e7ea      	b.n	80093bc <__lshift+0xa4>
 80093e6:	bf00      	nop
 80093e8:	0800b8c1 	.word	0x0800b8c1
 80093ec:	0800b8d2 	.word	0x0800b8d2

080093f0 <__mcmp>:
 80093f0:	690a      	ldr	r2, [r1, #16]
 80093f2:	4603      	mov	r3, r0
 80093f4:	6900      	ldr	r0, [r0, #16]
 80093f6:	1a80      	subs	r0, r0, r2
 80093f8:	b530      	push	{r4, r5, lr}
 80093fa:	d10e      	bne.n	800941a <__mcmp+0x2a>
 80093fc:	3314      	adds	r3, #20
 80093fe:	3114      	adds	r1, #20
 8009400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800940c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009410:	4295      	cmp	r5, r2
 8009412:	d003      	beq.n	800941c <__mcmp+0x2c>
 8009414:	d205      	bcs.n	8009422 <__mcmp+0x32>
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	42a3      	cmp	r3, r4
 800941e:	d3f3      	bcc.n	8009408 <__mcmp+0x18>
 8009420:	e7fb      	b.n	800941a <__mcmp+0x2a>
 8009422:	2001      	movs	r0, #1
 8009424:	e7f9      	b.n	800941a <__mcmp+0x2a>
	...

08009428 <__mdiff>:
 8009428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	4689      	mov	r9, r1
 800942e:	4606      	mov	r6, r0
 8009430:	4611      	mov	r1, r2
 8009432:	4648      	mov	r0, r9
 8009434:	4614      	mov	r4, r2
 8009436:	f7ff ffdb 	bl	80093f0 <__mcmp>
 800943a:	1e05      	subs	r5, r0, #0
 800943c:	d112      	bne.n	8009464 <__mdiff+0x3c>
 800943e:	4629      	mov	r1, r5
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff fd11 	bl	8008e68 <_Balloc>
 8009446:	4602      	mov	r2, r0
 8009448:	b928      	cbnz	r0, 8009456 <__mdiff+0x2e>
 800944a:	4b3f      	ldr	r3, [pc, #252]	@ (8009548 <__mdiff+0x120>)
 800944c:	f240 2137 	movw	r1, #567	@ 0x237
 8009450:	483e      	ldr	r0, [pc, #248]	@ (800954c <__mdiff+0x124>)
 8009452:	f001 fa95 	bl	800a980 <__assert_func>
 8009456:	2301      	movs	r3, #1
 8009458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800945c:	4610      	mov	r0, r2
 800945e:	b003      	add	sp, #12
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	bfbc      	itt	lt
 8009466:	464b      	movlt	r3, r9
 8009468:	46a1      	movlt	r9, r4
 800946a:	4630      	mov	r0, r6
 800946c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009470:	bfba      	itte	lt
 8009472:	461c      	movlt	r4, r3
 8009474:	2501      	movlt	r5, #1
 8009476:	2500      	movge	r5, #0
 8009478:	f7ff fcf6 	bl	8008e68 <_Balloc>
 800947c:	4602      	mov	r2, r0
 800947e:	b918      	cbnz	r0, 8009488 <__mdiff+0x60>
 8009480:	4b31      	ldr	r3, [pc, #196]	@ (8009548 <__mdiff+0x120>)
 8009482:	f240 2145 	movw	r1, #581	@ 0x245
 8009486:	e7e3      	b.n	8009450 <__mdiff+0x28>
 8009488:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800948c:	6926      	ldr	r6, [r4, #16]
 800948e:	60c5      	str	r5, [r0, #12]
 8009490:	f109 0310 	add.w	r3, r9, #16
 8009494:	f109 0514 	add.w	r5, r9, #20
 8009498:	f104 0e14 	add.w	lr, r4, #20
 800949c:	f100 0b14 	add.w	fp, r0, #20
 80094a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	46d9      	mov	r9, fp
 80094ac:	f04f 0c00 	mov.w	ip, #0
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	fa1f f38a 	uxth.w	r3, sl
 80094c0:	4619      	mov	r1, r3
 80094c2:	b283      	uxth	r3, r0
 80094c4:	1acb      	subs	r3, r1, r3
 80094c6:	0c00      	lsrs	r0, r0, #16
 80094c8:	4463      	add	r3, ip
 80094ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094d8:	4576      	cmp	r6, lr
 80094da:	f849 3b04 	str.w	r3, [r9], #4
 80094de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094e2:	d8e5      	bhi.n	80094b0 <__mdiff+0x88>
 80094e4:	1b33      	subs	r3, r6, r4
 80094e6:	3b15      	subs	r3, #21
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	3415      	adds	r4, #21
 80094ee:	3304      	adds	r3, #4
 80094f0:	42a6      	cmp	r6, r4
 80094f2:	bf38      	it	cc
 80094f4:	2304      	movcc	r3, #4
 80094f6:	441d      	add	r5, r3
 80094f8:	445b      	add	r3, fp
 80094fa:	461e      	mov	r6, r3
 80094fc:	462c      	mov	r4, r5
 80094fe:	4544      	cmp	r4, r8
 8009500:	d30e      	bcc.n	8009520 <__mdiff+0xf8>
 8009502:	f108 0103 	add.w	r1, r8, #3
 8009506:	1b49      	subs	r1, r1, r5
 8009508:	f021 0103 	bic.w	r1, r1, #3
 800950c:	3d03      	subs	r5, #3
 800950e:	45a8      	cmp	r8, r5
 8009510:	bf38      	it	cc
 8009512:	2100      	movcc	r1, #0
 8009514:	440b      	add	r3, r1
 8009516:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800951a:	b191      	cbz	r1, 8009542 <__mdiff+0x11a>
 800951c:	6117      	str	r7, [r2, #16]
 800951e:	e79d      	b.n	800945c <__mdiff+0x34>
 8009520:	f854 1b04 	ldr.w	r1, [r4], #4
 8009524:	46e6      	mov	lr, ip
 8009526:	0c08      	lsrs	r0, r1, #16
 8009528:	fa1c fc81 	uxtah	ip, ip, r1
 800952c:	4471      	add	r1, lr
 800952e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009532:	b289      	uxth	r1, r1
 8009534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009538:	f846 1b04 	str.w	r1, [r6], #4
 800953c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009540:	e7dd      	b.n	80094fe <__mdiff+0xd6>
 8009542:	3f01      	subs	r7, #1
 8009544:	e7e7      	b.n	8009516 <__mdiff+0xee>
 8009546:	bf00      	nop
 8009548:	0800b8c1 	.word	0x0800b8c1
 800954c:	0800b8d2 	.word	0x0800b8d2

08009550 <__ulp>:
 8009550:	b082      	sub	sp, #8
 8009552:	ed8d 0b00 	vstr	d0, [sp]
 8009556:	9a01      	ldr	r2, [sp, #4]
 8009558:	4b0f      	ldr	r3, [pc, #60]	@ (8009598 <__ulp+0x48>)
 800955a:	4013      	ands	r3, r2
 800955c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009560:	2b00      	cmp	r3, #0
 8009562:	dc08      	bgt.n	8009576 <__ulp+0x26>
 8009564:	425b      	negs	r3, r3
 8009566:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800956a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800956e:	da04      	bge.n	800957a <__ulp+0x2a>
 8009570:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009574:	4113      	asrs	r3, r2
 8009576:	2200      	movs	r2, #0
 8009578:	e008      	b.n	800958c <__ulp+0x3c>
 800957a:	f1a2 0314 	sub.w	r3, r2, #20
 800957e:	2b1e      	cmp	r3, #30
 8009580:	bfda      	itte	le
 8009582:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009586:	40da      	lsrle	r2, r3
 8009588:	2201      	movgt	r2, #1
 800958a:	2300      	movs	r3, #0
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	ec41 0b10 	vmov	d0, r0, r1
 8009594:	b002      	add	sp, #8
 8009596:	4770      	bx	lr
 8009598:	7ff00000 	.word	0x7ff00000

0800959c <__b2d>:
 800959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	6906      	ldr	r6, [r0, #16]
 80095a2:	f100 0814 	add.w	r8, r0, #20
 80095a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80095aa:	1f37      	subs	r7, r6, #4
 80095ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7ff fd4b 	bl	800904c <__hi0bits>
 80095b6:	f1c0 0320 	rsb	r3, r0, #32
 80095ba:	280a      	cmp	r0, #10
 80095bc:	600b      	str	r3, [r1, #0]
 80095be:	491b      	ldr	r1, [pc, #108]	@ (800962c <__b2d+0x90>)
 80095c0:	dc15      	bgt.n	80095ee <__b2d+0x52>
 80095c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80095c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80095ca:	45b8      	cmp	r8, r7
 80095cc:	ea43 0501 	orr.w	r5, r3, r1
 80095d0:	bf34      	ite	cc
 80095d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095d6:	2300      	movcs	r3, #0
 80095d8:	3015      	adds	r0, #21
 80095da:	fa02 f000 	lsl.w	r0, r2, r0
 80095de:	fa23 f30c 	lsr.w	r3, r3, ip
 80095e2:	4303      	orrs	r3, r0
 80095e4:	461c      	mov	r4, r3
 80095e6:	ec45 4b10 	vmov	d0, r4, r5
 80095ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ee:	45b8      	cmp	r8, r7
 80095f0:	bf3a      	itte	cc
 80095f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80095fa:	2300      	movcs	r3, #0
 80095fc:	380b      	subs	r0, #11
 80095fe:	d012      	beq.n	8009626 <__b2d+0x8a>
 8009600:	f1c0 0120 	rsb	r1, r0, #32
 8009604:	fa23 f401 	lsr.w	r4, r3, r1
 8009608:	4082      	lsls	r2, r0
 800960a:	4322      	orrs	r2, r4
 800960c:	4547      	cmp	r7, r8
 800960e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009612:	bf8c      	ite	hi
 8009614:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009618:	2200      	movls	r2, #0
 800961a:	4083      	lsls	r3, r0
 800961c:	40ca      	lsrs	r2, r1
 800961e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009622:	4313      	orrs	r3, r2
 8009624:	e7de      	b.n	80095e4 <__b2d+0x48>
 8009626:	ea42 0501 	orr.w	r5, r2, r1
 800962a:	e7db      	b.n	80095e4 <__b2d+0x48>
 800962c:	3ff00000 	.word	0x3ff00000

08009630 <__d2b>:
 8009630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009634:	460f      	mov	r7, r1
 8009636:	2101      	movs	r1, #1
 8009638:	ec59 8b10 	vmov	r8, r9, d0
 800963c:	4616      	mov	r6, r2
 800963e:	f7ff fc13 	bl	8008e68 <_Balloc>
 8009642:	4604      	mov	r4, r0
 8009644:	b930      	cbnz	r0, 8009654 <__d2b+0x24>
 8009646:	4602      	mov	r2, r0
 8009648:	4b23      	ldr	r3, [pc, #140]	@ (80096d8 <__d2b+0xa8>)
 800964a:	4824      	ldr	r0, [pc, #144]	@ (80096dc <__d2b+0xac>)
 800964c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009650:	f001 f996 	bl	800a980 <__assert_func>
 8009654:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800965c:	b10d      	cbz	r5, 8009662 <__d2b+0x32>
 800965e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009662:	9301      	str	r3, [sp, #4]
 8009664:	f1b8 0300 	subs.w	r3, r8, #0
 8009668:	d023      	beq.n	80096b2 <__d2b+0x82>
 800966a:	4668      	mov	r0, sp
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	f7ff fd0c 	bl	800908a <__lo0bits>
 8009672:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009676:	b1d0      	cbz	r0, 80096ae <__d2b+0x7e>
 8009678:	f1c0 0320 	rsb	r3, r0, #32
 800967c:	fa02 f303 	lsl.w	r3, r2, r3
 8009680:	430b      	orrs	r3, r1
 8009682:	40c2      	lsrs	r2, r0
 8009684:	6163      	str	r3, [r4, #20]
 8009686:	9201      	str	r2, [sp, #4]
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	61a3      	str	r3, [r4, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	bf0c      	ite	eq
 8009690:	2201      	moveq	r2, #1
 8009692:	2202      	movne	r2, #2
 8009694:	6122      	str	r2, [r4, #16]
 8009696:	b1a5      	cbz	r5, 80096c2 <__d2b+0x92>
 8009698:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800969c:	4405      	add	r5, r0
 800969e:	603d      	str	r5, [r7, #0]
 80096a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80096a4:	6030      	str	r0, [r6, #0]
 80096a6:	4620      	mov	r0, r4
 80096a8:	b003      	add	sp, #12
 80096aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ae:	6161      	str	r1, [r4, #20]
 80096b0:	e7ea      	b.n	8009688 <__d2b+0x58>
 80096b2:	a801      	add	r0, sp, #4
 80096b4:	f7ff fce9 	bl	800908a <__lo0bits>
 80096b8:	9b01      	ldr	r3, [sp, #4]
 80096ba:	6163      	str	r3, [r4, #20]
 80096bc:	3020      	adds	r0, #32
 80096be:	2201      	movs	r2, #1
 80096c0:	e7e8      	b.n	8009694 <__d2b+0x64>
 80096c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096ca:	6038      	str	r0, [r7, #0]
 80096cc:	6918      	ldr	r0, [r3, #16]
 80096ce:	f7ff fcbd 	bl	800904c <__hi0bits>
 80096d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d6:	e7e5      	b.n	80096a4 <__d2b+0x74>
 80096d8:	0800b8c1 	.word	0x0800b8c1
 80096dc:	0800b8d2 	.word	0x0800b8d2

080096e0 <__ratio>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	b085      	sub	sp, #20
 80096e6:	e9cd 1000 	strd	r1, r0, [sp]
 80096ea:	a902      	add	r1, sp, #8
 80096ec:	f7ff ff56 	bl	800959c <__b2d>
 80096f0:	9800      	ldr	r0, [sp, #0]
 80096f2:	a903      	add	r1, sp, #12
 80096f4:	ec55 4b10 	vmov	r4, r5, d0
 80096f8:	f7ff ff50 	bl	800959c <__b2d>
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	6919      	ldr	r1, [r3, #16]
 8009700:	9b00      	ldr	r3, [sp, #0]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	1ac9      	subs	r1, r1, r3
 8009706:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	ec5b ab10 	vmov	sl, fp, d0
 8009710:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfce      	itee	gt
 8009718:	462a      	movgt	r2, r5
 800971a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800971e:	465a      	movle	r2, fp
 8009720:	462f      	mov	r7, r5
 8009722:	46d9      	mov	r9, fp
 8009724:	bfcc      	ite	gt
 8009726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800972a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800972e:	464b      	mov	r3, r9
 8009730:	4652      	mov	r2, sl
 8009732:	4620      	mov	r0, r4
 8009734:	4639      	mov	r1, r7
 8009736:	f7f7 f8b9 	bl	80008ac <__aeabi_ddiv>
 800973a:	ec41 0b10 	vmov	d0, r0, r1
 800973e:	b005      	add	sp, #20
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009744 <__copybits>:
 8009744:	3901      	subs	r1, #1
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	1149      	asrs	r1, r1, #5
 800974a:	6914      	ldr	r4, [r2, #16]
 800974c:	3101      	adds	r1, #1
 800974e:	f102 0314 	add.w	r3, r2, #20
 8009752:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800975a:	1f05      	subs	r5, r0, #4
 800975c:	42a3      	cmp	r3, r4
 800975e:	d30c      	bcc.n	800977a <__copybits+0x36>
 8009760:	1aa3      	subs	r3, r4, r2
 8009762:	3b11      	subs	r3, #17
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	3211      	adds	r2, #17
 800976a:	42a2      	cmp	r2, r4
 800976c:	bf88      	it	hi
 800976e:	2300      	movhi	r3, #0
 8009770:	4418      	add	r0, r3
 8009772:	2300      	movs	r3, #0
 8009774:	4288      	cmp	r0, r1
 8009776:	d305      	bcc.n	8009784 <__copybits+0x40>
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	f853 6b04 	ldr.w	r6, [r3], #4
 800977e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009782:	e7eb      	b.n	800975c <__copybits+0x18>
 8009784:	f840 3b04 	str.w	r3, [r0], #4
 8009788:	e7f4      	b.n	8009774 <__copybits+0x30>

0800978a <__any_on>:
 800978a:	f100 0214 	add.w	r2, r0, #20
 800978e:	6900      	ldr	r0, [r0, #16]
 8009790:	114b      	asrs	r3, r1, #5
 8009792:	4298      	cmp	r0, r3
 8009794:	b510      	push	{r4, lr}
 8009796:	db11      	blt.n	80097bc <__any_on+0x32>
 8009798:	dd0a      	ble.n	80097b0 <__any_on+0x26>
 800979a:	f011 011f 	ands.w	r1, r1, #31
 800979e:	d007      	beq.n	80097b0 <__any_on+0x26>
 80097a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097a4:	fa24 f001 	lsr.w	r0, r4, r1
 80097a8:	fa00 f101 	lsl.w	r1, r0, r1
 80097ac:	428c      	cmp	r4, r1
 80097ae:	d10b      	bne.n	80097c8 <__any_on+0x3e>
 80097b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d803      	bhi.n	80097c0 <__any_on+0x36>
 80097b8:	2000      	movs	r0, #0
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	4603      	mov	r3, r0
 80097be:	e7f7      	b.n	80097b0 <__any_on+0x26>
 80097c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097c4:	2900      	cmp	r1, #0
 80097c6:	d0f5      	beq.n	80097b4 <__any_on+0x2a>
 80097c8:	2001      	movs	r0, #1
 80097ca:	e7f6      	b.n	80097ba <__any_on+0x30>

080097cc <sulp>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4604      	mov	r4, r0
 80097d0:	460d      	mov	r5, r1
 80097d2:	ec45 4b10 	vmov	d0, r4, r5
 80097d6:	4616      	mov	r6, r2
 80097d8:	f7ff feba 	bl	8009550 <__ulp>
 80097dc:	ec51 0b10 	vmov	r0, r1, d0
 80097e0:	b17e      	cbz	r6, 8009802 <sulp+0x36>
 80097e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd09      	ble.n	8009802 <sulp+0x36>
 80097ee:	051b      	lsls	r3, r3, #20
 80097f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80097f4:	2400      	movs	r4, #0
 80097f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80097fa:	4622      	mov	r2, r4
 80097fc:	462b      	mov	r3, r5
 80097fe:	f7f6 ff2b 	bl	8000658 <__aeabi_dmul>
 8009802:	ec41 0b10 	vmov	d0, r0, r1
 8009806:	bd70      	pop	{r4, r5, r6, pc}

08009808 <_strtod_l>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	b09f      	sub	sp, #124	@ 0x7c
 800980e:	460c      	mov	r4, r1
 8009810:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009812:	2200      	movs	r2, #0
 8009814:	921a      	str	r2, [sp, #104]	@ 0x68
 8009816:	9005      	str	r0, [sp, #20]
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	f04f 0b00 	mov.w	fp, #0
 8009820:	460a      	mov	r2, r1
 8009822:	9219      	str	r2, [sp, #100]	@ 0x64
 8009824:	7811      	ldrb	r1, [r2, #0]
 8009826:	292b      	cmp	r1, #43	@ 0x2b
 8009828:	d04a      	beq.n	80098c0 <_strtod_l+0xb8>
 800982a:	d838      	bhi.n	800989e <_strtod_l+0x96>
 800982c:	290d      	cmp	r1, #13
 800982e:	d832      	bhi.n	8009896 <_strtod_l+0x8e>
 8009830:	2908      	cmp	r1, #8
 8009832:	d832      	bhi.n	800989a <_strtod_l+0x92>
 8009834:	2900      	cmp	r1, #0
 8009836:	d03b      	beq.n	80098b0 <_strtod_l+0xa8>
 8009838:	2200      	movs	r2, #0
 800983a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800983c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800983e:	782a      	ldrb	r2, [r5, #0]
 8009840:	2a30      	cmp	r2, #48	@ 0x30
 8009842:	f040 80b3 	bne.w	80099ac <_strtod_l+0x1a4>
 8009846:	786a      	ldrb	r2, [r5, #1]
 8009848:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800984c:	2a58      	cmp	r2, #88	@ 0x58
 800984e:	d16e      	bne.n	800992e <_strtod_l+0x126>
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	ab1a      	add	r3, sp, #104	@ 0x68
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4a8e      	ldr	r2, [pc, #568]	@ (8009a94 <_strtod_l+0x28c>)
 800985c:	9805      	ldr	r0, [sp, #20]
 800985e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009860:	a919      	add	r1, sp, #100	@ 0x64
 8009862:	f001 f927 	bl	800aab4 <__gethex>
 8009866:	f010 060f 	ands.w	r6, r0, #15
 800986a:	4604      	mov	r4, r0
 800986c:	d005      	beq.n	800987a <_strtod_l+0x72>
 800986e:	2e06      	cmp	r6, #6
 8009870:	d128      	bne.n	80098c4 <_strtod_l+0xbc>
 8009872:	3501      	adds	r5, #1
 8009874:	2300      	movs	r3, #0
 8009876:	9519      	str	r5, [sp, #100]	@ 0x64
 8009878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800987a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 858e 	bne.w	800a39e <_strtod_l+0xb96>
 8009882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009884:	b1cb      	cbz	r3, 80098ba <_strtod_l+0xb2>
 8009886:	4652      	mov	r2, sl
 8009888:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800988c:	ec43 2b10 	vmov	d0, r2, r3
 8009890:	b01f      	add	sp, #124	@ 0x7c
 8009892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009896:	2920      	cmp	r1, #32
 8009898:	d1ce      	bne.n	8009838 <_strtod_l+0x30>
 800989a:	3201      	adds	r2, #1
 800989c:	e7c1      	b.n	8009822 <_strtod_l+0x1a>
 800989e:	292d      	cmp	r1, #45	@ 0x2d
 80098a0:	d1ca      	bne.n	8009838 <_strtod_l+0x30>
 80098a2:	2101      	movs	r1, #1
 80098a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098a6:	1c51      	adds	r1, r2, #1
 80098a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80098aa:	7852      	ldrb	r2, [r2, #1]
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d1c5      	bne.n	800983c <_strtod_l+0x34>
 80098b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8570 	bne.w	800a39a <_strtod_l+0xb92>
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	e7e5      	b.n	800988c <_strtod_l+0x84>
 80098c0:	2100      	movs	r1, #0
 80098c2:	e7ef      	b.n	80098a4 <_strtod_l+0x9c>
 80098c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098c6:	b13a      	cbz	r2, 80098d8 <_strtod_l+0xd0>
 80098c8:	2135      	movs	r1, #53	@ 0x35
 80098ca:	a81c      	add	r0, sp, #112	@ 0x70
 80098cc:	f7ff ff3a 	bl	8009744 <__copybits>
 80098d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	f7ff fb08 	bl	8008ee8 <_Bfree>
 80098d8:	3e01      	subs	r6, #1
 80098da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098dc:	2e04      	cmp	r6, #4
 80098de:	d806      	bhi.n	80098ee <_strtod_l+0xe6>
 80098e0:	e8df f006 	tbb	[pc, r6]
 80098e4:	201d0314 	.word	0x201d0314
 80098e8:	14          	.byte	0x14
 80098e9:	00          	.byte	0x00
 80098ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80098ee:	05e1      	lsls	r1, r4, #23
 80098f0:	bf48      	it	mi
 80098f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80098f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098fa:	0d1b      	lsrs	r3, r3, #20
 80098fc:	051b      	lsls	r3, r3, #20
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1bb      	bne.n	800987a <_strtod_l+0x72>
 8009902:	f7fe fb2f 	bl	8007f64 <__errno>
 8009906:	2322      	movs	r3, #34	@ 0x22
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	e7b6      	b.n	800987a <_strtod_l+0x72>
 800990c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009910:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009914:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009918:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800991c:	e7e7      	b.n	80098ee <_strtod_l+0xe6>
 800991e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009a9c <_strtod_l+0x294>
 8009922:	e7e4      	b.n	80098ee <_strtod_l+0xe6>
 8009924:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009928:	f04f 3aff 	mov.w	sl, #4294967295
 800992c:	e7df      	b.n	80098ee <_strtod_l+0xe6>
 800992e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	9219      	str	r2, [sp, #100]	@ 0x64
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b30      	cmp	r3, #48	@ 0x30
 8009938:	d0f9      	beq.n	800992e <_strtod_l+0x126>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d09d      	beq.n	800987a <_strtod_l+0x72>
 800993e:	2301      	movs	r3, #1
 8009940:	9309      	str	r3, [sp, #36]	@ 0x24
 8009942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009944:	930c      	str	r3, [sp, #48]	@ 0x30
 8009946:	2300      	movs	r3, #0
 8009948:	9308      	str	r3, [sp, #32]
 800994a:	930a      	str	r3, [sp, #40]	@ 0x28
 800994c:	461f      	mov	r7, r3
 800994e:	220a      	movs	r2, #10
 8009950:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009952:	7805      	ldrb	r5, [r0, #0]
 8009954:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009958:	b2d9      	uxtb	r1, r3
 800995a:	2909      	cmp	r1, #9
 800995c:	d928      	bls.n	80099b0 <_strtod_l+0x1a8>
 800995e:	494e      	ldr	r1, [pc, #312]	@ (8009a98 <_strtod_l+0x290>)
 8009960:	2201      	movs	r2, #1
 8009962:	f000 ffd5 	bl	800a910 <strncmp>
 8009966:	2800      	cmp	r0, #0
 8009968:	d032      	beq.n	80099d0 <_strtod_l+0x1c8>
 800996a:	2000      	movs	r0, #0
 800996c:	462a      	mov	r2, r5
 800996e:	4681      	mov	r9, r0
 8009970:	463d      	mov	r5, r7
 8009972:	4603      	mov	r3, r0
 8009974:	2a65      	cmp	r2, #101	@ 0x65
 8009976:	d001      	beq.n	800997c <_strtod_l+0x174>
 8009978:	2a45      	cmp	r2, #69	@ 0x45
 800997a:	d114      	bne.n	80099a6 <_strtod_l+0x19e>
 800997c:	b91d      	cbnz	r5, 8009986 <_strtod_l+0x17e>
 800997e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009980:	4302      	orrs	r2, r0
 8009982:	d095      	beq.n	80098b0 <_strtod_l+0xa8>
 8009984:	2500      	movs	r5, #0
 8009986:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009988:	1c62      	adds	r2, r4, #1
 800998a:	9219      	str	r2, [sp, #100]	@ 0x64
 800998c:	7862      	ldrb	r2, [r4, #1]
 800998e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009990:	d077      	beq.n	8009a82 <_strtod_l+0x27a>
 8009992:	2a2d      	cmp	r2, #45	@ 0x2d
 8009994:	d07b      	beq.n	8009a8e <_strtod_l+0x286>
 8009996:	f04f 0c00 	mov.w	ip, #0
 800999a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800999e:	2909      	cmp	r1, #9
 80099a0:	f240 8082 	bls.w	8009aa8 <_strtod_l+0x2a0>
 80099a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80099a6:	f04f 0800 	mov.w	r8, #0
 80099aa:	e0a2      	b.n	8009af2 <_strtod_l+0x2ea>
 80099ac:	2300      	movs	r3, #0
 80099ae:	e7c7      	b.n	8009940 <_strtod_l+0x138>
 80099b0:	2f08      	cmp	r7, #8
 80099b2:	bfd5      	itete	le
 80099b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80099b6:	9908      	ldrgt	r1, [sp, #32]
 80099b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80099bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80099c0:	f100 0001 	add.w	r0, r0, #1
 80099c4:	bfd4      	ite	le
 80099c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80099c8:	9308      	strgt	r3, [sp, #32]
 80099ca:	3701      	adds	r7, #1
 80099cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80099ce:	e7bf      	b.n	8009950 <_strtod_l+0x148>
 80099d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80099d6:	785a      	ldrb	r2, [r3, #1]
 80099d8:	b37f      	cbz	r7, 8009a3a <_strtod_l+0x232>
 80099da:	4681      	mov	r9, r0
 80099dc:	463d      	mov	r5, r7
 80099de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80099e2:	2b09      	cmp	r3, #9
 80099e4:	d912      	bls.n	8009a0c <_strtod_l+0x204>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e7c4      	b.n	8009974 <_strtod_l+0x16c>
 80099ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80099f0:	785a      	ldrb	r2, [r3, #1]
 80099f2:	3001      	adds	r0, #1
 80099f4:	2a30      	cmp	r2, #48	@ 0x30
 80099f6:	d0f8      	beq.n	80099ea <_strtod_l+0x1e2>
 80099f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	f200 84d3 	bhi.w	800a3a8 <_strtod_l+0xba0>
 8009a02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a04:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a06:	4681      	mov	r9, r0
 8009a08:	2000      	movs	r0, #0
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	3a30      	subs	r2, #48	@ 0x30
 8009a0e:	f100 0301 	add.w	r3, r0, #1
 8009a12:	d02a      	beq.n	8009a6a <_strtod_l+0x262>
 8009a14:	4499      	add	r9, r3
 8009a16:	eb00 0c05 	add.w	ip, r0, r5
 8009a1a:	462b      	mov	r3, r5
 8009a1c:	210a      	movs	r1, #10
 8009a1e:	4563      	cmp	r3, ip
 8009a20:	d10d      	bne.n	8009a3e <_strtod_l+0x236>
 8009a22:	1c69      	adds	r1, r5, #1
 8009a24:	4401      	add	r1, r0
 8009a26:	4428      	add	r0, r5
 8009a28:	2808      	cmp	r0, #8
 8009a2a:	dc16      	bgt.n	8009a5a <_strtod_l+0x252>
 8009a2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a2e:	230a      	movs	r3, #10
 8009a30:	fb03 2300 	mla	r3, r3, r0, r2
 8009a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a36:	2300      	movs	r3, #0
 8009a38:	e018      	b.n	8009a6c <_strtod_l+0x264>
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	e7da      	b.n	80099f4 <_strtod_l+0x1ec>
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	f103 0301 	add.w	r3, r3, #1
 8009a44:	dc03      	bgt.n	8009a4e <_strtod_l+0x246>
 8009a46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a48:	434e      	muls	r6, r1
 8009a4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a4c:	e7e7      	b.n	8009a1e <_strtod_l+0x216>
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	bfde      	ittt	le
 8009a52:	9e08      	ldrle	r6, [sp, #32]
 8009a54:	434e      	mulle	r6, r1
 8009a56:	9608      	strle	r6, [sp, #32]
 8009a58:	e7e1      	b.n	8009a1e <_strtod_l+0x216>
 8009a5a:	280f      	cmp	r0, #15
 8009a5c:	dceb      	bgt.n	8009a36 <_strtod_l+0x22e>
 8009a5e:	9808      	ldr	r0, [sp, #32]
 8009a60:	230a      	movs	r3, #10
 8009a62:	fb03 2300 	mla	r3, r3, r0, r2
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	e7e5      	b.n	8009a36 <_strtod_l+0x22e>
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a6e:	1c50      	adds	r0, r2, #1
 8009a70:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a72:	7852      	ldrb	r2, [r2, #1]
 8009a74:	4618      	mov	r0, r3
 8009a76:	460d      	mov	r5, r1
 8009a78:	e7b1      	b.n	80099de <_strtod_l+0x1d6>
 8009a7a:	f04f 0900 	mov.w	r9, #0
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e77d      	b.n	800997e <_strtod_l+0x176>
 8009a82:	f04f 0c00 	mov.w	ip, #0
 8009a86:	1ca2      	adds	r2, r4, #2
 8009a88:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a8a:	78a2      	ldrb	r2, [r4, #2]
 8009a8c:	e785      	b.n	800999a <_strtod_l+0x192>
 8009a8e:	f04f 0c01 	mov.w	ip, #1
 8009a92:	e7f8      	b.n	8009a86 <_strtod_l+0x27e>
 8009a94:	0800ba40 	.word	0x0800ba40
 8009a98:	0800ba28 	.word	0x0800ba28
 8009a9c:	7ff00000 	.word	0x7ff00000
 8009aa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009aa2:	1c51      	adds	r1, r2, #1
 8009aa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aa6:	7852      	ldrb	r2, [r2, #1]
 8009aa8:	2a30      	cmp	r2, #48	@ 0x30
 8009aaa:	d0f9      	beq.n	8009aa0 <_strtod_l+0x298>
 8009aac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ab0:	2908      	cmp	r1, #8
 8009ab2:	f63f af78 	bhi.w	80099a6 <_strtod_l+0x19e>
 8009ab6:	3a30      	subs	r2, #48	@ 0x30
 8009ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009aba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009abc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009abe:	f04f 080a 	mov.w	r8, #10
 8009ac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ac4:	1c56      	adds	r6, r2, #1
 8009ac6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ac8:	7852      	ldrb	r2, [r2, #1]
 8009aca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ace:	f1be 0f09 	cmp.w	lr, #9
 8009ad2:	d939      	bls.n	8009b48 <_strtod_l+0x340>
 8009ad4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ad6:	1a76      	subs	r6, r6, r1
 8009ad8:	2e08      	cmp	r6, #8
 8009ada:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009ade:	dc03      	bgt.n	8009ae8 <_strtod_l+0x2e0>
 8009ae0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ae2:	4588      	cmp	r8, r1
 8009ae4:	bfa8      	it	ge
 8009ae6:	4688      	movge	r8, r1
 8009ae8:	f1bc 0f00 	cmp.w	ip, #0
 8009aec:	d001      	beq.n	8009af2 <_strtod_l+0x2ea>
 8009aee:	f1c8 0800 	rsb	r8, r8, #0
 8009af2:	2d00      	cmp	r5, #0
 8009af4:	d14e      	bne.n	8009b94 <_strtod_l+0x38c>
 8009af6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009af8:	4308      	orrs	r0, r1
 8009afa:	f47f aebe 	bne.w	800987a <_strtod_l+0x72>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f47f aed6 	bne.w	80098b0 <_strtod_l+0xa8>
 8009b04:	2a69      	cmp	r2, #105	@ 0x69
 8009b06:	d028      	beq.n	8009b5a <_strtod_l+0x352>
 8009b08:	dc25      	bgt.n	8009b56 <_strtod_l+0x34e>
 8009b0a:	2a49      	cmp	r2, #73	@ 0x49
 8009b0c:	d025      	beq.n	8009b5a <_strtod_l+0x352>
 8009b0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009b10:	f47f aece 	bne.w	80098b0 <_strtod_l+0xa8>
 8009b14:	499b      	ldr	r1, [pc, #620]	@ (8009d84 <_strtod_l+0x57c>)
 8009b16:	a819      	add	r0, sp, #100	@ 0x64
 8009b18:	f001 f9ee 	bl	800aef8 <__match>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f43f aec7 	beq.w	80098b0 <_strtod_l+0xa8>
 8009b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b28      	cmp	r3, #40	@ 0x28
 8009b28:	d12e      	bne.n	8009b88 <_strtod_l+0x380>
 8009b2a:	4997      	ldr	r1, [pc, #604]	@ (8009d88 <_strtod_l+0x580>)
 8009b2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b2e:	a819      	add	r0, sp, #100	@ 0x64
 8009b30:	f001 f9f6 	bl	800af20 <__hexnan>
 8009b34:	2805      	cmp	r0, #5
 8009b36:	d127      	bne.n	8009b88 <_strtod_l+0x380>
 8009b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009b3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b46:	e698      	b.n	800987a <_strtod_l+0x72>
 8009b48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b4a:	fb08 2101 	mla	r1, r8, r1, r2
 8009b4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b52:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b54:	e7b5      	b.n	8009ac2 <_strtod_l+0x2ba>
 8009b56:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b58:	e7da      	b.n	8009b10 <_strtod_l+0x308>
 8009b5a:	498c      	ldr	r1, [pc, #560]	@ (8009d8c <_strtod_l+0x584>)
 8009b5c:	a819      	add	r0, sp, #100	@ 0x64
 8009b5e:	f001 f9cb 	bl	800aef8 <__match>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f43f aea4 	beq.w	80098b0 <_strtod_l+0xa8>
 8009b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b6a:	4989      	ldr	r1, [pc, #548]	@ (8009d90 <_strtod_l+0x588>)
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	a819      	add	r0, sp, #100	@ 0x64
 8009b70:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b72:	f001 f9c1 	bl	800aef8 <__match>
 8009b76:	b910      	cbnz	r0, 8009b7e <_strtod_l+0x376>
 8009b78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009da0 <_strtod_l+0x598>
 8009b82:	f04f 0a00 	mov.w	sl, #0
 8009b86:	e678      	b.n	800987a <_strtod_l+0x72>
 8009b88:	4882      	ldr	r0, [pc, #520]	@ (8009d94 <_strtod_l+0x58c>)
 8009b8a:	f000 fef1 	bl	800a970 <nan>
 8009b8e:	ec5b ab10 	vmov	sl, fp, d0
 8009b92:	e672      	b.n	800987a <_strtod_l+0x72>
 8009b94:	eba8 0309 	sub.w	r3, r8, r9
 8009b98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	2f00      	cmp	r7, #0
 8009b9e:	bf08      	it	eq
 8009ba0:	462f      	moveq	r7, r5
 8009ba2:	2d10      	cmp	r5, #16
 8009ba4:	462c      	mov	r4, r5
 8009ba6:	bfa8      	it	ge
 8009ba8:	2410      	movge	r4, #16
 8009baa:	f7f6 fcdb 	bl	8000564 <__aeabi_ui2d>
 8009bae:	2d09      	cmp	r5, #9
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	468b      	mov	fp, r1
 8009bb4:	dc13      	bgt.n	8009bde <_strtod_l+0x3d6>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f43f ae5e 	beq.w	800987a <_strtod_l+0x72>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc0:	dd78      	ble.n	8009cb4 <_strtod_l+0x4ac>
 8009bc2:	2b16      	cmp	r3, #22
 8009bc4:	dc5f      	bgt.n	8009c86 <_strtod_l+0x47e>
 8009bc6:	4974      	ldr	r1, [pc, #464]	@ (8009d98 <_strtod_l+0x590>)
 8009bc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	f7f6 fd40 	bl	8000658 <__aeabi_dmul>
 8009bd8:	4682      	mov	sl, r0
 8009bda:	468b      	mov	fp, r1
 8009bdc:	e64d      	b.n	800987a <_strtod_l+0x72>
 8009bde:	4b6e      	ldr	r3, [pc, #440]	@ (8009d98 <_strtod_l+0x590>)
 8009be0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009be4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009be8:	f7f6 fd36 	bl	8000658 <__aeabi_dmul>
 8009bec:	4682      	mov	sl, r0
 8009bee:	9808      	ldr	r0, [sp, #32]
 8009bf0:	468b      	mov	fp, r1
 8009bf2:	f7f6 fcb7 	bl	8000564 <__aeabi_ui2d>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	4659      	mov	r1, fp
 8009bfe:	f7f6 fb75 	bl	80002ec <__adddf3>
 8009c02:	2d0f      	cmp	r5, #15
 8009c04:	4682      	mov	sl, r0
 8009c06:	468b      	mov	fp, r1
 8009c08:	ddd5      	ble.n	8009bb6 <_strtod_l+0x3ae>
 8009c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c0c:	1b2c      	subs	r4, r5, r4
 8009c0e:	441c      	add	r4, r3
 8009c10:	2c00      	cmp	r4, #0
 8009c12:	f340 8096 	ble.w	8009d42 <_strtod_l+0x53a>
 8009c16:	f014 030f 	ands.w	r3, r4, #15
 8009c1a:	d00a      	beq.n	8009c32 <_strtod_l+0x42a>
 8009c1c:	495e      	ldr	r1, [pc, #376]	@ (8009d98 <_strtod_l+0x590>)
 8009c1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c22:	4652      	mov	r2, sl
 8009c24:	465b      	mov	r3, fp
 8009c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2a:	f7f6 fd15 	bl	8000658 <__aeabi_dmul>
 8009c2e:	4682      	mov	sl, r0
 8009c30:	468b      	mov	fp, r1
 8009c32:	f034 040f 	bics.w	r4, r4, #15
 8009c36:	d073      	beq.n	8009d20 <_strtod_l+0x518>
 8009c38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009c3c:	dd48      	ble.n	8009cd0 <_strtod_l+0x4c8>
 8009c3e:	2400      	movs	r4, #0
 8009c40:	46a0      	mov	r8, r4
 8009c42:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c44:	46a1      	mov	r9, r4
 8009c46:	9a05      	ldr	r2, [sp, #20]
 8009c48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009da0 <_strtod_l+0x598>
 8009c4c:	2322      	movs	r3, #34	@ 0x22
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	f04f 0a00 	mov.w	sl, #0
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f43f ae0f 	beq.w	800987a <_strtod_l+0x72>
 8009c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c5e:	9805      	ldr	r0, [sp, #20]
 8009c60:	f7ff f942 	bl	8008ee8 <_Bfree>
 8009c64:	9805      	ldr	r0, [sp, #20]
 8009c66:	4649      	mov	r1, r9
 8009c68:	f7ff f93e 	bl	8008ee8 <_Bfree>
 8009c6c:	9805      	ldr	r0, [sp, #20]
 8009c6e:	4641      	mov	r1, r8
 8009c70:	f7ff f93a 	bl	8008ee8 <_Bfree>
 8009c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c76:	9805      	ldr	r0, [sp, #20]
 8009c78:	f7ff f936 	bl	8008ee8 <_Bfree>
 8009c7c:	9805      	ldr	r0, [sp, #20]
 8009c7e:	4621      	mov	r1, r4
 8009c80:	f7ff f932 	bl	8008ee8 <_Bfree>
 8009c84:	e5f9      	b.n	800987a <_strtod_l+0x72>
 8009c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	dbbc      	blt.n	8009c0a <_strtod_l+0x402>
 8009c90:	4c41      	ldr	r4, [pc, #260]	@ (8009d98 <_strtod_l+0x590>)
 8009c92:	f1c5 050f 	rsb	r5, r5, #15
 8009c96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca2:	f7f6 fcd9 	bl	8000658 <__aeabi_dmul>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca8:	1b5d      	subs	r5, r3, r5
 8009caa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009cb2:	e78f      	b.n	8009bd4 <_strtod_l+0x3cc>
 8009cb4:	3316      	adds	r3, #22
 8009cb6:	dba8      	blt.n	8009c0a <_strtod_l+0x402>
 8009cb8:	4b37      	ldr	r3, [pc, #220]	@ (8009d98 <_strtod_l+0x590>)
 8009cba:	eba9 0808 	sub.w	r8, r9, r8
 8009cbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009cc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	f7f6 fdef 	bl	80008ac <__aeabi_ddiv>
 8009cce:	e783      	b.n	8009bd8 <_strtod_l+0x3d0>
 8009cd0:	4b32      	ldr	r3, [pc, #200]	@ (8009d9c <_strtod_l+0x594>)
 8009cd2:	9308      	str	r3, [sp, #32]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	1124      	asrs	r4, r4, #4
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	461e      	mov	r6, r3
 8009cde:	2c01      	cmp	r4, #1
 8009ce0:	dc21      	bgt.n	8009d26 <_strtod_l+0x51e>
 8009ce2:	b10b      	cbz	r3, 8009ce8 <_strtod_l+0x4e0>
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	468b      	mov	fp, r1
 8009ce8:	492c      	ldr	r1, [pc, #176]	@ (8009d9c <_strtod_l+0x594>)
 8009cea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009cee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cfa:	f7f6 fcad 	bl	8000658 <__aeabi_dmul>
 8009cfe:	4b28      	ldr	r3, [pc, #160]	@ (8009da0 <_strtod_l+0x598>)
 8009d00:	460a      	mov	r2, r1
 8009d02:	400b      	ands	r3, r1
 8009d04:	4927      	ldr	r1, [pc, #156]	@ (8009da4 <_strtod_l+0x59c>)
 8009d06:	428b      	cmp	r3, r1
 8009d08:	4682      	mov	sl, r0
 8009d0a:	d898      	bhi.n	8009c3e <_strtod_l+0x436>
 8009d0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009d10:	428b      	cmp	r3, r1
 8009d12:	bf86      	itte	hi
 8009d14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009da8 <_strtod_l+0x5a0>
 8009d18:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009d20:	2300      	movs	r3, #0
 8009d22:	9308      	str	r3, [sp, #32]
 8009d24:	e07a      	b.n	8009e1c <_strtod_l+0x614>
 8009d26:	07e2      	lsls	r2, r4, #31
 8009d28:	d505      	bpl.n	8009d36 <_strtod_l+0x52e>
 8009d2a:	9b08      	ldr	r3, [sp, #32]
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fc92 	bl	8000658 <__aeabi_dmul>
 8009d34:	2301      	movs	r3, #1
 8009d36:	9a08      	ldr	r2, [sp, #32]
 8009d38:	3208      	adds	r2, #8
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	1064      	asrs	r4, r4, #1
 8009d3e:	9208      	str	r2, [sp, #32]
 8009d40:	e7cd      	b.n	8009cde <_strtod_l+0x4d6>
 8009d42:	d0ed      	beq.n	8009d20 <_strtod_l+0x518>
 8009d44:	4264      	negs	r4, r4
 8009d46:	f014 020f 	ands.w	r2, r4, #15
 8009d4a:	d00a      	beq.n	8009d62 <_strtod_l+0x55a>
 8009d4c:	4b12      	ldr	r3, [pc, #72]	@ (8009d98 <_strtod_l+0x590>)
 8009d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d52:	4650      	mov	r0, sl
 8009d54:	4659      	mov	r1, fp
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f7f6 fda7 	bl	80008ac <__aeabi_ddiv>
 8009d5e:	4682      	mov	sl, r0
 8009d60:	468b      	mov	fp, r1
 8009d62:	1124      	asrs	r4, r4, #4
 8009d64:	d0dc      	beq.n	8009d20 <_strtod_l+0x518>
 8009d66:	2c1f      	cmp	r4, #31
 8009d68:	dd20      	ble.n	8009dac <_strtod_l+0x5a4>
 8009d6a:	2400      	movs	r4, #0
 8009d6c:	46a0      	mov	r8, r4
 8009d6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d70:	46a1      	mov	r9, r4
 8009d72:	9a05      	ldr	r2, [sp, #20]
 8009d74:	2322      	movs	r3, #34	@ 0x22
 8009d76:	f04f 0a00 	mov.w	sl, #0
 8009d7a:	f04f 0b00 	mov.w	fp, #0
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	e768      	b.n	8009c54 <_strtod_l+0x44c>
 8009d82:	bf00      	nop
 8009d84:	0800b819 	.word	0x0800b819
 8009d88:	0800ba2c 	.word	0x0800ba2c
 8009d8c:	0800b811 	.word	0x0800b811
 8009d90:	0800b848 	.word	0x0800b848
 8009d94:	0800bbd5 	.word	0x0800bbd5
 8009d98:	0800b960 	.word	0x0800b960
 8009d9c:	0800b938 	.word	0x0800b938
 8009da0:	7ff00000 	.word	0x7ff00000
 8009da4:	7ca00000 	.word	0x7ca00000
 8009da8:	7fefffff 	.word	0x7fefffff
 8009dac:	f014 0310 	ands.w	r3, r4, #16
 8009db0:	bf18      	it	ne
 8009db2:	236a      	movne	r3, #106	@ 0x6a
 8009db4:	4ea9      	ldr	r6, [pc, #676]	@ (800a05c <_strtod_l+0x854>)
 8009db6:	9308      	str	r3, [sp, #32]
 8009db8:	4650      	mov	r0, sl
 8009dba:	4659      	mov	r1, fp
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	07e2      	lsls	r2, r4, #31
 8009dc0:	d504      	bpl.n	8009dcc <_strtod_l+0x5c4>
 8009dc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dc6:	f7f6 fc47 	bl	8000658 <__aeabi_dmul>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	1064      	asrs	r4, r4, #1
 8009dce:	f106 0608 	add.w	r6, r6, #8
 8009dd2:	d1f4      	bne.n	8009dbe <_strtod_l+0x5b6>
 8009dd4:	b10b      	cbz	r3, 8009dda <_strtod_l+0x5d2>
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	468b      	mov	fp, r1
 8009dda:	9b08      	ldr	r3, [sp, #32]
 8009ddc:	b1b3      	cbz	r3, 8009e0c <_strtod_l+0x604>
 8009dde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009de2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	4659      	mov	r1, fp
 8009dea:	dd0f      	ble.n	8009e0c <_strtod_l+0x604>
 8009dec:	2b1f      	cmp	r3, #31
 8009dee:	dd55      	ble.n	8009e9c <_strtod_l+0x694>
 8009df0:	2b34      	cmp	r3, #52	@ 0x34
 8009df2:	bfde      	ittt	le
 8009df4:	f04f 33ff 	movle.w	r3, #4294967295
 8009df8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009dfc:	4093      	lslle	r3, r2
 8009dfe:	f04f 0a00 	mov.w	sl, #0
 8009e02:	bfcc      	ite	gt
 8009e04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009e08:	ea03 0b01 	andle.w	fp, r3, r1
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 fe88 	bl	8000b28 <__aeabi_dcmpeq>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d1a6      	bne.n	8009d6a <_strtod_l+0x562>
 8009e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e22:	9805      	ldr	r0, [sp, #20]
 8009e24:	462b      	mov	r3, r5
 8009e26:	463a      	mov	r2, r7
 8009e28:	f7ff f8c6 	bl	8008fb8 <__s2b>
 8009e2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f af05 	beq.w	8009c3e <_strtod_l+0x436>
 8009e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	eba9 0308 	sub.w	r3, r9, r8
 8009e3c:	bfa8      	it	ge
 8009e3e:	2300      	movge	r3, #0
 8009e40:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e42:	2400      	movs	r4, #0
 8009e44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e48:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e4a:	46a0      	mov	r8, r4
 8009e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4e:	9805      	ldr	r0, [sp, #20]
 8009e50:	6859      	ldr	r1, [r3, #4]
 8009e52:	f7ff f809 	bl	8008e68 <_Balloc>
 8009e56:	4681      	mov	r9, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f aef4 	beq.w	8009c46 <_strtod_l+0x43e>
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e60:	691a      	ldr	r2, [r3, #16]
 8009e62:	3202      	adds	r2, #2
 8009e64:	f103 010c 	add.w	r1, r3, #12
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	300c      	adds	r0, #12
 8009e6c:	f000 fd72 	bl	800a954 <memcpy>
 8009e70:	ec4b ab10 	vmov	d0, sl, fp
 8009e74:	9805      	ldr	r0, [sp, #20]
 8009e76:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e78:	a91b      	add	r1, sp, #108	@ 0x6c
 8009e7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009e7e:	f7ff fbd7 	bl	8009630 <__d2b>
 8009e82:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f43f aede 	beq.w	8009c46 <_strtod_l+0x43e>
 8009e8a:	9805      	ldr	r0, [sp, #20]
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	f7ff f929 	bl	80090e4 <__i2b>
 8009e92:	4680      	mov	r8, r0
 8009e94:	b948      	cbnz	r0, 8009eaa <_strtod_l+0x6a2>
 8009e96:	f04f 0800 	mov.w	r8, #0
 8009e9a:	e6d4      	b.n	8009c46 <_strtod_l+0x43e>
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ea8:	e7b0      	b.n	8009e0c <_strtod_l+0x604>
 8009eaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009eac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009eae:	2d00      	cmp	r5, #0
 8009eb0:	bfab      	itete	ge
 8009eb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009eb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009eb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009eb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009eba:	bfac      	ite	ge
 8009ebc:	18ef      	addge	r7, r5, r3
 8009ebe:	1b5e      	sublt	r6, r3, r5
 8009ec0:	9b08      	ldr	r3, [sp, #32]
 8009ec2:	1aed      	subs	r5, r5, r3
 8009ec4:	4415      	add	r5, r2
 8009ec6:	4b66      	ldr	r3, [pc, #408]	@ (800a060 <_strtod_l+0x858>)
 8009ec8:	3d01      	subs	r5, #1
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ed0:	da50      	bge.n	8009f74 <_strtod_l+0x76c>
 8009ed2:	1b5b      	subs	r3, r3, r5
 8009ed4:	2b1f      	cmp	r3, #31
 8009ed6:	eba2 0203 	sub.w	r2, r2, r3
 8009eda:	f04f 0101 	mov.w	r1, #1
 8009ede:	dc3d      	bgt.n	8009f5c <_strtod_l+0x754>
 8009ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eea:	18bd      	adds	r5, r7, r2
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	42af      	cmp	r7, r5
 8009ef0:	4416      	add	r6, r2
 8009ef2:	441e      	add	r6, r3
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	bfa8      	it	ge
 8009ef8:	462b      	movge	r3, r5
 8009efa:	42b3      	cmp	r3, r6
 8009efc:	bfa8      	it	ge
 8009efe:	4633      	movge	r3, r6
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfc2      	ittt	gt
 8009f04:	1aed      	subgt	r5, r5, r3
 8009f06:	1af6      	subgt	r6, r6, r3
 8009f08:	1aff      	subgt	r7, r7, r3
 8009f0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dd16      	ble.n	8009f3e <_strtod_l+0x736>
 8009f10:	4641      	mov	r1, r8
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	461a      	mov	r2, r3
 8009f16:	f7ff f9a5 	bl	8009264 <__pow5mult>
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d0ba      	beq.n	8009e96 <_strtod_l+0x68e>
 8009f20:	4601      	mov	r1, r0
 8009f22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f24:	9805      	ldr	r0, [sp, #20]
 8009f26:	f7ff f8f3 	bl	8009110 <__multiply>
 8009f2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f ae8a 	beq.w	8009c46 <_strtod_l+0x43e>
 8009f32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	f7fe ffd7 	bl	8008ee8 <_Bfree>
 8009f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	dc1d      	bgt.n	8009f7e <_strtod_l+0x776>
 8009f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd23      	ble.n	8009f90 <_strtod_l+0x788>
 8009f48:	4649      	mov	r1, r9
 8009f4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	f7ff f989 	bl	8009264 <__pow5mult>
 8009f52:	4681      	mov	r9, r0
 8009f54:	b9e0      	cbnz	r0, 8009f90 <_strtod_l+0x788>
 8009f56:	f04f 0900 	mov.w	r9, #0
 8009f5a:	e674      	b.n	8009c46 <_strtod_l+0x43e>
 8009f5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009f60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009f64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009f68:	35e2      	adds	r5, #226	@ 0xe2
 8009f6a:	fa01 f305 	lsl.w	r3, r1, r5
 8009f6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009f72:	e7ba      	b.n	8009eea <_strtod_l+0x6e2>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f78:	2301      	movs	r3, #1
 8009f7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f7c:	e7b5      	b.n	8009eea <_strtod_l+0x6e2>
 8009f7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f80:	9805      	ldr	r0, [sp, #20]
 8009f82:	462a      	mov	r2, r5
 8009f84:	f7ff f9c8 	bl	8009318 <__lshift>
 8009f88:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1d9      	bne.n	8009f42 <_strtod_l+0x73a>
 8009f8e:	e65a      	b.n	8009c46 <_strtod_l+0x43e>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	dd07      	ble.n	8009fa4 <_strtod_l+0x79c>
 8009f94:	4649      	mov	r1, r9
 8009f96:	9805      	ldr	r0, [sp, #20]
 8009f98:	4632      	mov	r2, r6
 8009f9a:	f7ff f9bd 	bl	8009318 <__lshift>
 8009f9e:	4681      	mov	r9, r0
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d0d8      	beq.n	8009f56 <_strtod_l+0x74e>
 8009fa4:	2f00      	cmp	r7, #0
 8009fa6:	dd08      	ble.n	8009fba <_strtod_l+0x7b2>
 8009fa8:	4641      	mov	r1, r8
 8009faa:	9805      	ldr	r0, [sp, #20]
 8009fac:	463a      	mov	r2, r7
 8009fae:	f7ff f9b3 	bl	8009318 <__lshift>
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f43f ae46 	beq.w	8009c46 <_strtod_l+0x43e>
 8009fba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	464a      	mov	r2, r9
 8009fc0:	f7ff fa32 	bl	8009428 <__mdiff>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f43f ae3d 	beq.w	8009c46 <_strtod_l+0x43e>
 8009fcc:	68c3      	ldr	r3, [r0, #12]
 8009fce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60c3      	str	r3, [r0, #12]
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	f7ff fa0b 	bl	80093f0 <__mcmp>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	da46      	bge.n	800a06c <_strtod_l+0x864>
 8009fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8009fe4:	d16c      	bne.n	800a0c0 <_strtod_l+0x8b8>
 8009fe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d168      	bne.n	800a0c0 <_strtod_l+0x8b8>
 8009fee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ff2:	0d1b      	lsrs	r3, r3, #20
 8009ff4:	051b      	lsls	r3, r3, #20
 8009ff6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ffa:	d961      	bls.n	800a0c0 <_strtod_l+0x8b8>
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	b913      	cbnz	r3, 800a006 <_strtod_l+0x7fe>
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	2b01      	cmp	r3, #1
 800a004:	dd5c      	ble.n	800a0c0 <_strtod_l+0x8b8>
 800a006:	4621      	mov	r1, r4
 800a008:	2201      	movs	r2, #1
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	f7ff f984 	bl	8009318 <__lshift>
 800a010:	4641      	mov	r1, r8
 800a012:	4604      	mov	r4, r0
 800a014:	f7ff f9ec 	bl	80093f0 <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	dd51      	ble.n	800a0c0 <_strtod_l+0x8b8>
 800a01c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a020:	9a08      	ldr	r2, [sp, #32]
 800a022:	0d1b      	lsrs	r3, r3, #20
 800a024:	051b      	lsls	r3, r3, #20
 800a026:	2a00      	cmp	r2, #0
 800a028:	d06b      	beq.n	800a102 <_strtod_l+0x8fa>
 800a02a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a02e:	d868      	bhi.n	800a102 <_strtod_l+0x8fa>
 800a030:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a034:	f67f ae9d 	bls.w	8009d72 <_strtod_l+0x56a>
 800a038:	4b0a      	ldr	r3, [pc, #40]	@ (800a064 <_strtod_l+0x85c>)
 800a03a:	4650      	mov	r0, sl
 800a03c:	4659      	mov	r1, fp
 800a03e:	2200      	movs	r2, #0
 800a040:	f7f6 fb0a 	bl	8000658 <__aeabi_dmul>
 800a044:	4b08      	ldr	r3, [pc, #32]	@ (800a068 <_strtod_l+0x860>)
 800a046:	400b      	ands	r3, r1
 800a048:	4682      	mov	sl, r0
 800a04a:	468b      	mov	fp, r1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f47f ae05 	bne.w	8009c5c <_strtod_l+0x454>
 800a052:	9a05      	ldr	r2, [sp, #20]
 800a054:	2322      	movs	r3, #34	@ 0x22
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	e600      	b.n	8009c5c <_strtod_l+0x454>
 800a05a:	bf00      	nop
 800a05c:	0800ba58 	.word	0x0800ba58
 800a060:	fffffc02 	.word	0xfffffc02
 800a064:	39500000 	.word	0x39500000
 800a068:	7ff00000 	.word	0x7ff00000
 800a06c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a070:	d165      	bne.n	800a13e <_strtod_l+0x936>
 800a072:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a078:	b35a      	cbz	r2, 800a0d2 <_strtod_l+0x8ca>
 800a07a:	4a9f      	ldr	r2, [pc, #636]	@ (800a2f8 <_strtod_l+0xaf0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d12b      	bne.n	800a0d8 <_strtod_l+0x8d0>
 800a080:	9b08      	ldr	r3, [sp, #32]
 800a082:	4651      	mov	r1, sl
 800a084:	b303      	cbz	r3, 800a0c8 <_strtod_l+0x8c0>
 800a086:	4b9d      	ldr	r3, [pc, #628]	@ (800a2fc <_strtod_l+0xaf4>)
 800a088:	465a      	mov	r2, fp
 800a08a:	4013      	ands	r3, r2
 800a08c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	d81b      	bhi.n	800a0ce <_strtod_l+0x8c6>
 800a096:	0d1b      	lsrs	r3, r3, #20
 800a098:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	d119      	bne.n	800a0d8 <_strtod_l+0x8d0>
 800a0a4:	4b96      	ldr	r3, [pc, #600]	@ (800a300 <_strtod_l+0xaf8>)
 800a0a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d102      	bne.n	800a0b2 <_strtod_l+0x8aa>
 800a0ac:	3101      	adds	r1, #1
 800a0ae:	f43f adca 	beq.w	8009c46 <_strtod_l+0x43e>
 800a0b2:	4b92      	ldr	r3, [pc, #584]	@ (800a2fc <_strtod_l+0xaf4>)
 800a0b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0b6:	401a      	ands	r2, r3
 800a0b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a0bc:	f04f 0a00 	mov.w	sl, #0
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1b8      	bne.n	800a038 <_strtod_l+0x830>
 800a0c6:	e5c9      	b.n	8009c5c <_strtod_l+0x454>
 800a0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0cc:	e7e8      	b.n	800a0a0 <_strtod_l+0x898>
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	e7e6      	b.n	800a0a0 <_strtod_l+0x898>
 800a0d2:	ea53 030a 	orrs.w	r3, r3, sl
 800a0d6:	d0a1      	beq.n	800a01c <_strtod_l+0x814>
 800a0d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0da:	b1db      	cbz	r3, 800a114 <_strtod_l+0x90c>
 800a0dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0de:	4213      	tst	r3, r2
 800a0e0:	d0ee      	beq.n	800a0c0 <_strtod_l+0x8b8>
 800a0e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0e4:	9a08      	ldr	r2, [sp, #32]
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	b1bb      	cbz	r3, 800a11c <_strtod_l+0x914>
 800a0ec:	f7ff fb6e 	bl	80097cc <sulp>
 800a0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0f4:	ec53 2b10 	vmov	r2, r3, d0
 800a0f8:	f7f6 f8f8 	bl	80002ec <__adddf3>
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	468b      	mov	fp, r1
 800a100:	e7de      	b.n	800a0c0 <_strtod_l+0x8b8>
 800a102:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a106:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a10a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a10e:	f04f 3aff 	mov.w	sl, #4294967295
 800a112:	e7d5      	b.n	800a0c0 <_strtod_l+0x8b8>
 800a114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a116:	ea13 0f0a 	tst.w	r3, sl
 800a11a:	e7e1      	b.n	800a0e0 <_strtod_l+0x8d8>
 800a11c:	f7ff fb56 	bl	80097cc <sulp>
 800a120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a124:	ec53 2b10 	vmov	r2, r3, d0
 800a128:	f7f6 f8de 	bl	80002e8 <__aeabi_dsub>
 800a12c:	2200      	movs	r2, #0
 800a12e:	2300      	movs	r3, #0
 800a130:	4682      	mov	sl, r0
 800a132:	468b      	mov	fp, r1
 800a134:	f7f6 fcf8 	bl	8000b28 <__aeabi_dcmpeq>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d0c1      	beq.n	800a0c0 <_strtod_l+0x8b8>
 800a13c:	e619      	b.n	8009d72 <_strtod_l+0x56a>
 800a13e:	4641      	mov	r1, r8
 800a140:	4620      	mov	r0, r4
 800a142:	f7ff facd 	bl	80096e0 <__ratio>
 800a146:	ec57 6b10 	vmov	r6, r7, d0
 800a14a:	2200      	movs	r2, #0
 800a14c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f7f6 fcfc 	bl	8000b50 <__aeabi_dcmple>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d06f      	beq.n	800a23c <_strtod_l+0xa34>
 800a15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d17a      	bne.n	800a258 <_strtod_l+0xa50>
 800a162:	f1ba 0f00 	cmp.w	sl, #0
 800a166:	d158      	bne.n	800a21a <_strtod_l+0xa12>
 800a168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a16a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d15a      	bne.n	800a228 <_strtod_l+0xa20>
 800a172:	4b64      	ldr	r3, [pc, #400]	@ (800a304 <_strtod_l+0xafc>)
 800a174:	2200      	movs	r2, #0
 800a176:	4630      	mov	r0, r6
 800a178:	4639      	mov	r1, r7
 800a17a:	f7f6 fcdf 	bl	8000b3c <__aeabi_dcmplt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d159      	bne.n	800a236 <_strtod_l+0xa2e>
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	4b60      	ldr	r3, [pc, #384]	@ (800a308 <_strtod_l+0xb00>)
 800a188:	2200      	movs	r2, #0
 800a18a:	f7f6 fa65 	bl	8000658 <__aeabi_dmul>
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a196:	9606      	str	r6, [sp, #24]
 800a198:	9307      	str	r3, [sp, #28]
 800a19a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a19e:	4d57      	ldr	r5, [pc, #348]	@ (800a2fc <_strtod_l+0xaf4>)
 800a1a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a6:	401d      	ands	r5, r3
 800a1a8:	4b58      	ldr	r3, [pc, #352]	@ (800a30c <_strtod_l+0xb04>)
 800a1aa:	429d      	cmp	r5, r3
 800a1ac:	f040 80b2 	bne.w	800a314 <_strtod_l+0xb0c>
 800a1b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a1b6:	ec4b ab10 	vmov	d0, sl, fp
 800a1ba:	f7ff f9c9 	bl	8009550 <__ulp>
 800a1be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1c2:	ec51 0b10 	vmov	r0, r1, d0
 800a1c6:	f7f6 fa47 	bl	8000658 <__aeabi_dmul>
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	f7f6 f88d 	bl	80002ec <__adddf3>
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4949      	ldr	r1, [pc, #292]	@ (800a2fc <_strtod_l+0xaf4>)
 800a1d6:	4a4e      	ldr	r2, [pc, #312]	@ (800a310 <_strtod_l+0xb08>)
 800a1d8:	4019      	ands	r1, r3
 800a1da:	4291      	cmp	r1, r2
 800a1dc:	4682      	mov	sl, r0
 800a1de:	d942      	bls.n	800a266 <_strtod_l+0xa5e>
 800a1e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1e2:	4b47      	ldr	r3, [pc, #284]	@ (800a300 <_strtod_l+0xaf8>)
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d103      	bne.n	800a1f0 <_strtod_l+0x9e8>
 800a1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f43f ad2b 	beq.w	8009c46 <_strtod_l+0x43e>
 800a1f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a300 <_strtod_l+0xaf8>
 800a1f4:	f04f 3aff 	mov.w	sl, #4294967295
 800a1f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1fa:	9805      	ldr	r0, [sp, #20]
 800a1fc:	f7fe fe74 	bl	8008ee8 <_Bfree>
 800a200:	9805      	ldr	r0, [sp, #20]
 800a202:	4649      	mov	r1, r9
 800a204:	f7fe fe70 	bl	8008ee8 <_Bfree>
 800a208:	9805      	ldr	r0, [sp, #20]
 800a20a:	4641      	mov	r1, r8
 800a20c:	f7fe fe6c 	bl	8008ee8 <_Bfree>
 800a210:	9805      	ldr	r0, [sp, #20]
 800a212:	4621      	mov	r1, r4
 800a214:	f7fe fe68 	bl	8008ee8 <_Bfree>
 800a218:	e618      	b.n	8009e4c <_strtod_l+0x644>
 800a21a:	f1ba 0f01 	cmp.w	sl, #1
 800a21e:	d103      	bne.n	800a228 <_strtod_l+0xa20>
 800a220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a222:	2b00      	cmp	r3, #0
 800a224:	f43f ada5 	beq.w	8009d72 <_strtod_l+0x56a>
 800a228:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a2d8 <_strtod_l+0xad0>
 800a22c:	4f35      	ldr	r7, [pc, #212]	@ (800a304 <_strtod_l+0xafc>)
 800a22e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a232:	2600      	movs	r6, #0
 800a234:	e7b1      	b.n	800a19a <_strtod_l+0x992>
 800a236:	4f34      	ldr	r7, [pc, #208]	@ (800a308 <_strtod_l+0xb00>)
 800a238:	2600      	movs	r6, #0
 800a23a:	e7aa      	b.n	800a192 <_strtod_l+0x98a>
 800a23c:	4b32      	ldr	r3, [pc, #200]	@ (800a308 <_strtod_l+0xb00>)
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	2200      	movs	r2, #0
 800a244:	f7f6 fa08 	bl	8000658 <__aeabi_dmul>
 800a248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d09f      	beq.n	800a192 <_strtod_l+0x98a>
 800a252:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a256:	e7a0      	b.n	800a19a <_strtod_l+0x992>
 800a258:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a2e0 <_strtod_l+0xad8>
 800a25c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a260:	ec57 6b17 	vmov	r6, r7, d7
 800a264:	e799      	b.n	800a19a <_strtod_l+0x992>
 800a266:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1c1      	bne.n	800a1f8 <_strtod_l+0x9f0>
 800a274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a278:	0d1b      	lsrs	r3, r3, #20
 800a27a:	051b      	lsls	r3, r3, #20
 800a27c:	429d      	cmp	r5, r3
 800a27e:	d1bb      	bne.n	800a1f8 <_strtod_l+0x9f0>
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fd48 	bl	8000d18 <__aeabi_d2lz>
 800a288:	f7f6 f9b8 	bl	80005fc <__aeabi_l2d>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	f7f6 f828 	bl	80002e8 <__aeabi_dsub>
 800a298:	460b      	mov	r3, r1
 800a29a:	4602      	mov	r2, r0
 800a29c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a2a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	ea46 060a 	orr.w	r6, r6, sl
 800a2aa:	431e      	orrs	r6, r3
 800a2ac:	d06f      	beq.n	800a38e <_strtod_l+0xb86>
 800a2ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2e8 <_strtod_l+0xae0>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f7f6 fc42 	bl	8000b3c <__aeabi_dcmplt>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f47f accf 	bne.w	8009c5c <_strtod_l+0x454>
 800a2be:	a30c      	add	r3, pc, #48	@ (adr r3, 800a2f0 <_strtod_l+0xae8>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c8:	f7f6 fc56 	bl	8000b78 <__aeabi_dcmpgt>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d093      	beq.n	800a1f8 <_strtod_l+0x9f0>
 800a2d0:	e4c4      	b.n	8009c5c <_strtod_l+0x454>
 800a2d2:	bf00      	nop
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	00000000 	.word	0x00000000
 800a2dc:	bff00000 	.word	0xbff00000
 800a2e0:	00000000 	.word	0x00000000
 800a2e4:	3ff00000 	.word	0x3ff00000
 800a2e8:	94a03595 	.word	0x94a03595
 800a2ec:	3fdfffff 	.word	0x3fdfffff
 800a2f0:	35afe535 	.word	0x35afe535
 800a2f4:	3fe00000 	.word	0x3fe00000
 800a2f8:	000fffff 	.word	0x000fffff
 800a2fc:	7ff00000 	.word	0x7ff00000
 800a300:	7fefffff 	.word	0x7fefffff
 800a304:	3ff00000 	.word	0x3ff00000
 800a308:	3fe00000 	.word	0x3fe00000
 800a30c:	7fe00000 	.word	0x7fe00000
 800a310:	7c9fffff 	.word	0x7c9fffff
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	b323      	cbz	r3, 800a362 <_strtod_l+0xb5a>
 800a318:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a31c:	d821      	bhi.n	800a362 <_strtod_l+0xb5a>
 800a31e:	a328      	add	r3, pc, #160	@ (adr r3, 800a3c0 <_strtod_l+0xbb8>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f6 fc12 	bl	8000b50 <__aeabi_dcmple>
 800a32c:	b1a0      	cbz	r0, 800a358 <_strtod_l+0xb50>
 800a32e:	4639      	mov	r1, r7
 800a330:	4630      	mov	r0, r6
 800a332:	f7f6 fc69 	bl	8000c08 <__aeabi_d2uiz>
 800a336:	2801      	cmp	r0, #1
 800a338:	bf38      	it	cc
 800a33a:	2001      	movcc	r0, #1
 800a33c:	f7f6 f912 	bl	8000564 <__aeabi_ui2d>
 800a340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	b9fb      	cbnz	r3, 800a388 <_strtod_l+0xb80>
 800a348:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a34c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a34e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a350:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a354:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a358:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a35a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a35e:	1b5b      	subs	r3, r3, r5
 800a360:	9311      	str	r3, [sp, #68]	@ 0x44
 800a362:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a366:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a36a:	f7ff f8f1 	bl	8009550 <__ulp>
 800a36e:	4650      	mov	r0, sl
 800a370:	ec53 2b10 	vmov	r2, r3, d0
 800a374:	4659      	mov	r1, fp
 800a376:	f7f6 f96f 	bl	8000658 <__aeabi_dmul>
 800a37a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a37e:	f7f5 ffb5 	bl	80002ec <__adddf3>
 800a382:	4682      	mov	sl, r0
 800a384:	468b      	mov	fp, r1
 800a386:	e770      	b.n	800a26a <_strtod_l+0xa62>
 800a388:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a38c:	e7e0      	b.n	800a350 <_strtod_l+0xb48>
 800a38e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3c8 <_strtod_l+0xbc0>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f6 fbd2 	bl	8000b3c <__aeabi_dcmplt>
 800a398:	e798      	b.n	800a2cc <_strtod_l+0xac4>
 800a39a:	2300      	movs	r3, #0
 800a39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a39e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a3a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	f7ff ba6d 	b.w	8009882 <_strtod_l+0x7a>
 800a3a8:	2a65      	cmp	r2, #101	@ 0x65
 800a3aa:	f43f ab66 	beq.w	8009a7a <_strtod_l+0x272>
 800a3ae:	2a45      	cmp	r2, #69	@ 0x45
 800a3b0:	f43f ab63 	beq.w	8009a7a <_strtod_l+0x272>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f7ff bb9e 	b.w	8009af6 <_strtod_l+0x2ee>
 800a3ba:	bf00      	nop
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	ffc00000 	.word	0xffc00000
 800a3c4:	41dfffff 	.word	0x41dfffff
 800a3c8:	94a03595 	.word	0x94a03595
 800a3cc:	3fcfffff 	.word	0x3fcfffff

0800a3d0 <_strtod_r>:
 800a3d0:	4b01      	ldr	r3, [pc, #4]	@ (800a3d8 <_strtod_r+0x8>)
 800a3d2:	f7ff ba19 	b.w	8009808 <_strtod_l>
 800a3d6:	bf00      	nop
 800a3d8:	200001f0 	.word	0x200001f0

0800a3dc <_strtol_l.constprop.0>:
 800a3dc:	2b24      	cmp	r3, #36	@ 0x24
 800a3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e2:	4686      	mov	lr, r0
 800a3e4:	4690      	mov	r8, r2
 800a3e6:	d801      	bhi.n	800a3ec <_strtol_l.constprop.0+0x10>
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d106      	bne.n	800a3fa <_strtol_l.constprop.0+0x1e>
 800a3ec:	f7fd fdba 	bl	8007f64 <__errno>
 800a3f0:	2316      	movs	r3, #22
 800a3f2:	6003      	str	r3, [r0, #0]
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	4834      	ldr	r0, [pc, #208]	@ (800a4cc <_strtol_l.constprop.0+0xf0>)
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	462a      	mov	r2, r5
 800a400:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a404:	5d06      	ldrb	r6, [r0, r4]
 800a406:	f016 0608 	ands.w	r6, r6, #8
 800a40a:	d1f8      	bne.n	800a3fe <_strtol_l.constprop.0+0x22>
 800a40c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a40e:	d12d      	bne.n	800a46c <_strtol_l.constprop.0+0x90>
 800a410:	782c      	ldrb	r4, [r5, #0]
 800a412:	2601      	movs	r6, #1
 800a414:	1c95      	adds	r5, r2, #2
 800a416:	f033 0210 	bics.w	r2, r3, #16
 800a41a:	d109      	bne.n	800a430 <_strtol_l.constprop.0+0x54>
 800a41c:	2c30      	cmp	r4, #48	@ 0x30
 800a41e:	d12a      	bne.n	800a476 <_strtol_l.constprop.0+0x9a>
 800a420:	782a      	ldrb	r2, [r5, #0]
 800a422:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a426:	2a58      	cmp	r2, #88	@ 0x58
 800a428:	d125      	bne.n	800a476 <_strtol_l.constprop.0+0x9a>
 800a42a:	786c      	ldrb	r4, [r5, #1]
 800a42c:	2310      	movs	r3, #16
 800a42e:	3502      	adds	r5, #2
 800a430:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a434:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a438:	2200      	movs	r2, #0
 800a43a:	fbbc f9f3 	udiv	r9, ip, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	fb03 ca19 	mls	sl, r3, r9, ip
 800a444:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a448:	2f09      	cmp	r7, #9
 800a44a:	d81b      	bhi.n	800a484 <_strtol_l.constprop.0+0xa8>
 800a44c:	463c      	mov	r4, r7
 800a44e:	42a3      	cmp	r3, r4
 800a450:	dd27      	ble.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a452:	1c57      	adds	r7, r2, #1
 800a454:	d007      	beq.n	800a466 <_strtol_l.constprop.0+0x8a>
 800a456:	4581      	cmp	r9, r0
 800a458:	d320      	bcc.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a45a:	d101      	bne.n	800a460 <_strtol_l.constprop.0+0x84>
 800a45c:	45a2      	cmp	sl, r4
 800a45e:	db1d      	blt.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a460:	fb00 4003 	mla	r0, r0, r3, r4
 800a464:	2201      	movs	r2, #1
 800a466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a46a:	e7eb      	b.n	800a444 <_strtol_l.constprop.0+0x68>
 800a46c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a46e:	bf04      	itt	eq
 800a470:	782c      	ldrbeq	r4, [r5, #0]
 800a472:	1c95      	addeq	r5, r2, #2
 800a474:	e7cf      	b.n	800a416 <_strtol_l.constprop.0+0x3a>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1da      	bne.n	800a430 <_strtol_l.constprop.0+0x54>
 800a47a:	2c30      	cmp	r4, #48	@ 0x30
 800a47c:	bf0c      	ite	eq
 800a47e:	2308      	moveq	r3, #8
 800a480:	230a      	movne	r3, #10
 800a482:	e7d5      	b.n	800a430 <_strtol_l.constprop.0+0x54>
 800a484:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a488:	2f19      	cmp	r7, #25
 800a48a:	d801      	bhi.n	800a490 <_strtol_l.constprop.0+0xb4>
 800a48c:	3c37      	subs	r4, #55	@ 0x37
 800a48e:	e7de      	b.n	800a44e <_strtol_l.constprop.0+0x72>
 800a490:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a494:	2f19      	cmp	r7, #25
 800a496:	d804      	bhi.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a498:	3c57      	subs	r4, #87	@ 0x57
 800a49a:	e7d8      	b.n	800a44e <_strtol_l.constprop.0+0x72>
 800a49c:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a0:	e7e1      	b.n	800a466 <_strtol_l.constprop.0+0x8a>
 800a4a2:	1c53      	adds	r3, r2, #1
 800a4a4:	d108      	bne.n	800a4b8 <_strtol_l.constprop.0+0xdc>
 800a4a6:	2322      	movs	r3, #34	@ 0x22
 800a4a8:	f8ce 3000 	str.w	r3, [lr]
 800a4ac:	4660      	mov	r0, ip
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	d0a0      	beq.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a4b4:	1e69      	subs	r1, r5, #1
 800a4b6:	e006      	b.n	800a4c6 <_strtol_l.constprop.0+0xea>
 800a4b8:	b106      	cbz	r6, 800a4bc <_strtol_l.constprop.0+0xe0>
 800a4ba:	4240      	negs	r0, r0
 800a4bc:	f1b8 0f00 	cmp.w	r8, #0
 800a4c0:	d099      	beq.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	d1f6      	bne.n	800a4b4 <_strtol_l.constprop.0+0xd8>
 800a4c6:	f8c8 1000 	str.w	r1, [r8]
 800a4ca:	e794      	b.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a4cc:	0800ba81 	.word	0x0800ba81

0800a4d0 <_strtol_r>:
 800a4d0:	f7ff bf84 	b.w	800a3dc <_strtol_l.constprop.0>

0800a4d4 <__ssputs_r>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	688e      	ldr	r6, [r1, #8]
 800a4da:	461f      	mov	r7, r3
 800a4dc:	42be      	cmp	r6, r7
 800a4de:	680b      	ldr	r3, [r1, #0]
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	4690      	mov	r8, r2
 800a4e6:	d82d      	bhi.n	800a544 <__ssputs_r+0x70>
 800a4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4f0:	d026      	beq.n	800a540 <__ssputs_r+0x6c>
 800a4f2:	6965      	ldr	r5, [r4, #20]
 800a4f4:	6909      	ldr	r1, [r1, #16]
 800a4f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4fa:	eba3 0901 	sub.w	r9, r3, r1
 800a4fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a502:	1c7b      	adds	r3, r7, #1
 800a504:	444b      	add	r3, r9
 800a506:	106d      	asrs	r5, r5, #1
 800a508:	429d      	cmp	r5, r3
 800a50a:	bf38      	it	cc
 800a50c:	461d      	movcc	r5, r3
 800a50e:	0553      	lsls	r3, r2, #21
 800a510:	d527      	bpl.n	800a562 <__ssputs_r+0x8e>
 800a512:	4629      	mov	r1, r5
 800a514:	f7fe fc1c 	bl	8008d50 <_malloc_r>
 800a518:	4606      	mov	r6, r0
 800a51a:	b360      	cbz	r0, 800a576 <__ssputs_r+0xa2>
 800a51c:	6921      	ldr	r1, [r4, #16]
 800a51e:	464a      	mov	r2, r9
 800a520:	f000 fa18 	bl	800a954 <memcpy>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	6165      	str	r5, [r4, #20]
 800a534:	444e      	add	r6, r9
 800a536:	eba5 0509 	sub.w	r5, r5, r9
 800a53a:	6026      	str	r6, [r4, #0]
 800a53c:	60a5      	str	r5, [r4, #8]
 800a53e:	463e      	mov	r6, r7
 800a540:	42be      	cmp	r6, r7
 800a542:	d900      	bls.n	800a546 <__ssputs_r+0x72>
 800a544:	463e      	mov	r6, r7
 800a546:	6820      	ldr	r0, [r4, #0]
 800a548:	4632      	mov	r2, r6
 800a54a:	4641      	mov	r1, r8
 800a54c:	f000 f9c6 	bl	800a8dc <memmove>
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	1b9b      	subs	r3, r3, r6
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	4433      	add	r3, r6
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	2000      	movs	r0, #0
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	462a      	mov	r2, r5
 800a564:	f000 fd89 	bl	800b07a <_realloc_r>
 800a568:	4606      	mov	r6, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1e0      	bne.n	800a530 <__ssputs_r+0x5c>
 800a56e:	6921      	ldr	r1, [r4, #16]
 800a570:	4650      	mov	r0, sl
 800a572:	f7fe fb79 	bl	8008c68 <_free_r>
 800a576:	230c      	movs	r3, #12
 800a578:	f8ca 3000 	str.w	r3, [sl]
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	f04f 30ff 	mov.w	r0, #4294967295
 800a588:	e7e9      	b.n	800a55e <__ssputs_r+0x8a>
	...

0800a58c <_svfiprintf_r>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	4698      	mov	r8, r3
 800a592:	898b      	ldrh	r3, [r1, #12]
 800a594:	061b      	lsls	r3, r3, #24
 800a596:	b09d      	sub	sp, #116	@ 0x74
 800a598:	4607      	mov	r7, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	4614      	mov	r4, r2
 800a59e:	d510      	bpl.n	800a5c2 <_svfiprintf_r+0x36>
 800a5a0:	690b      	ldr	r3, [r1, #16]
 800a5a2:	b973      	cbnz	r3, 800a5c2 <_svfiprintf_r+0x36>
 800a5a4:	2140      	movs	r1, #64	@ 0x40
 800a5a6:	f7fe fbd3 	bl	8008d50 <_malloc_r>
 800a5aa:	6028      	str	r0, [r5, #0]
 800a5ac:	6128      	str	r0, [r5, #16]
 800a5ae:	b930      	cbnz	r0, 800a5be <_svfiprintf_r+0x32>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	b01d      	add	sp, #116	@ 0x74
 800a5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5be:	2340      	movs	r3, #64	@ 0x40
 800a5c0:	616b      	str	r3, [r5, #20]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d0:	2330      	movs	r3, #48	@ 0x30
 800a5d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a770 <_svfiprintf_r+0x1e4>
 800a5d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5da:	f04f 0901 	mov.w	r9, #1
 800a5de:	4623      	mov	r3, r4
 800a5e0:	469a      	mov	sl, r3
 800a5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e6:	b10a      	cbz	r2, 800a5ec <_svfiprintf_r+0x60>
 800a5e8:	2a25      	cmp	r2, #37	@ 0x25
 800a5ea:	d1f9      	bne.n	800a5e0 <_svfiprintf_r+0x54>
 800a5ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f0:	d00b      	beq.n	800a60a <_svfiprintf_r+0x7e>
 800a5f2:	465b      	mov	r3, fp
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7ff ff6b 	bl	800a4d4 <__ssputs_r>
 800a5fe:	3001      	adds	r0, #1
 800a600:	f000 80a7 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a606:	445a      	add	r2, fp
 800a608:	9209      	str	r2, [sp, #36]	@ 0x24
 800a60a:	f89a 3000 	ldrb.w	r3, [sl]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 809f 	beq.w	800a752 <_svfiprintf_r+0x1c6>
 800a614:	2300      	movs	r3, #0
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61e:	f10a 0a01 	add.w	sl, sl, #1
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	9307      	str	r3, [sp, #28]
 800a626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a62a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a62c:	4654      	mov	r4, sl
 800a62e:	2205      	movs	r2, #5
 800a630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a634:	484e      	ldr	r0, [pc, #312]	@ (800a770 <_svfiprintf_r+0x1e4>)
 800a636:	f7f5 fdfb 	bl	8000230 <memchr>
 800a63a:	9a04      	ldr	r2, [sp, #16]
 800a63c:	b9d8      	cbnz	r0, 800a676 <_svfiprintf_r+0xea>
 800a63e:	06d0      	lsls	r0, r2, #27
 800a640:	bf44      	itt	mi
 800a642:	2320      	movmi	r3, #32
 800a644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a648:	0711      	lsls	r1, r2, #28
 800a64a:	bf44      	itt	mi
 800a64c:	232b      	movmi	r3, #43	@ 0x2b
 800a64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a652:	f89a 3000 	ldrb.w	r3, [sl]
 800a656:	2b2a      	cmp	r3, #42	@ 0x2a
 800a658:	d015      	beq.n	800a686 <_svfiprintf_r+0xfa>
 800a65a:	9a07      	ldr	r2, [sp, #28]
 800a65c:	4654      	mov	r4, sl
 800a65e:	2000      	movs	r0, #0
 800a660:	f04f 0c0a 	mov.w	ip, #10
 800a664:	4621      	mov	r1, r4
 800a666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66a:	3b30      	subs	r3, #48	@ 0x30
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d94b      	bls.n	800a708 <_svfiprintf_r+0x17c>
 800a670:	b1b0      	cbz	r0, 800a6a0 <_svfiprintf_r+0x114>
 800a672:	9207      	str	r2, [sp, #28]
 800a674:	e014      	b.n	800a6a0 <_svfiprintf_r+0x114>
 800a676:	eba0 0308 	sub.w	r3, r0, r8
 800a67a:	fa09 f303 	lsl.w	r3, r9, r3
 800a67e:	4313      	orrs	r3, r2
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	46a2      	mov	sl, r4
 800a684:	e7d2      	b.n	800a62c <_svfiprintf_r+0xa0>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	1d19      	adds	r1, r3, #4
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	9103      	str	r1, [sp, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bfbb      	ittet	lt
 800a692:	425b      	neglt	r3, r3
 800a694:	f042 0202 	orrlt.w	r2, r2, #2
 800a698:	9307      	strge	r3, [sp, #28]
 800a69a:	9307      	strlt	r3, [sp, #28]
 800a69c:	bfb8      	it	lt
 800a69e:	9204      	strlt	r2, [sp, #16]
 800a6a0:	7823      	ldrb	r3, [r4, #0]
 800a6a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6a4:	d10a      	bne.n	800a6bc <_svfiprintf_r+0x130>
 800a6a6:	7863      	ldrb	r3, [r4, #1]
 800a6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6aa:	d132      	bne.n	800a712 <_svfiprintf_r+0x186>
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	1d1a      	adds	r2, r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	9203      	str	r2, [sp, #12]
 800a6b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6b8:	3402      	adds	r4, #2
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a780 <_svfiprintf_r+0x1f4>
 800a6c0:	7821      	ldrb	r1, [r4, #0]
 800a6c2:	2203      	movs	r2, #3
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	f7f5 fdb3 	bl	8000230 <memchr>
 800a6ca:	b138      	cbz	r0, 800a6dc <_svfiprintf_r+0x150>
 800a6cc:	9b04      	ldr	r3, [sp, #16]
 800a6ce:	eba0 000a 	sub.w	r0, r0, sl
 800a6d2:	2240      	movs	r2, #64	@ 0x40
 800a6d4:	4082      	lsls	r2, r0
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	4824      	ldr	r0, [pc, #144]	@ (800a774 <_svfiprintf_r+0x1e8>)
 800a6e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6e6:	2206      	movs	r2, #6
 800a6e8:	f7f5 fda2 	bl	8000230 <memchr>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d036      	beq.n	800a75e <_svfiprintf_r+0x1d2>
 800a6f0:	4b21      	ldr	r3, [pc, #132]	@ (800a778 <_svfiprintf_r+0x1ec>)
 800a6f2:	bb1b      	cbnz	r3, 800a73c <_svfiprintf_r+0x1b0>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3307      	adds	r3, #7
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	4433      	add	r3, r6
 800a704:	9309      	str	r3, [sp, #36]	@ 0x24
 800a706:	e76a      	b.n	800a5de <_svfiprintf_r+0x52>
 800a708:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70c:	460c      	mov	r4, r1
 800a70e:	2001      	movs	r0, #1
 800a710:	e7a8      	b.n	800a664 <_svfiprintf_r+0xd8>
 800a712:	2300      	movs	r3, #0
 800a714:	3401      	adds	r4, #1
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	4619      	mov	r1, r3
 800a71a:	f04f 0c0a 	mov.w	ip, #10
 800a71e:	4620      	mov	r0, r4
 800a720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a724:	3a30      	subs	r2, #48	@ 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d903      	bls.n	800a732 <_svfiprintf_r+0x1a6>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0c6      	beq.n	800a6bc <_svfiprintf_r+0x130>
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	e7c4      	b.n	800a6bc <_svfiprintf_r+0x130>
 800a732:	fb0c 2101 	mla	r1, ip, r1, r2
 800a736:	4604      	mov	r4, r0
 800a738:	2301      	movs	r3, #1
 800a73a:	e7f0      	b.n	800a71e <_svfiprintf_r+0x192>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	462a      	mov	r2, r5
 800a742:	4b0e      	ldr	r3, [pc, #56]	@ (800a77c <_svfiprintf_r+0x1f0>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	4638      	mov	r0, r7
 800a748:	f7fc fcc8 	bl	80070dc <_printf_float>
 800a74c:	1c42      	adds	r2, r0, #1
 800a74e:	4606      	mov	r6, r0
 800a750:	d1d6      	bne.n	800a700 <_svfiprintf_r+0x174>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	065b      	lsls	r3, r3, #25
 800a756:	f53f af2d 	bmi.w	800a5b4 <_svfiprintf_r+0x28>
 800a75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a75c:	e72c      	b.n	800a5b8 <_svfiprintf_r+0x2c>
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	462a      	mov	r2, r5
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <_svfiprintf_r+0x1f0>)
 800a766:	a904      	add	r1, sp, #16
 800a768:	4638      	mov	r0, r7
 800a76a:	f7fc ff4f 	bl	800760c <_printf_i>
 800a76e:	e7ed      	b.n	800a74c <_svfiprintf_r+0x1c0>
 800a770:	0800bb81 	.word	0x0800bb81
 800a774:	0800bb8b 	.word	0x0800bb8b
 800a778:	080070dd 	.word	0x080070dd
 800a77c:	0800a4d5 	.word	0x0800a4d5
 800a780:	0800bb87 	.word	0x0800bb87

0800a784 <__sflush_r>:
 800a784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78c:	0716      	lsls	r6, r2, #28
 800a78e:	4605      	mov	r5, r0
 800a790:	460c      	mov	r4, r1
 800a792:	d454      	bmi.n	800a83e <__sflush_r+0xba>
 800a794:	684b      	ldr	r3, [r1, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	dc02      	bgt.n	800a7a0 <__sflush_r+0x1c>
 800a79a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd48      	ble.n	800a832 <__sflush_r+0xae>
 800a7a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	d045      	beq.n	800a832 <__sflush_r+0xae>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7ac:	682f      	ldr	r7, [r5, #0]
 800a7ae:	6a21      	ldr	r1, [r4, #32]
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	d030      	beq.n	800a816 <__sflush_r+0x92>
 800a7b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	0759      	lsls	r1, r3, #29
 800a7ba:	d505      	bpl.n	800a7c8 <__sflush_r+0x44>
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	1ad2      	subs	r2, r2, r3
 800a7c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7c2:	b10b      	cbz	r3, 800a7c8 <__sflush_r+0x44>
 800a7c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7cc:	6a21      	ldr	r1, [r4, #32]
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	47b0      	blx	r6
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	d106      	bne.n	800a7e6 <__sflush_r+0x62>
 800a7d8:	6829      	ldr	r1, [r5, #0]
 800a7da:	291d      	cmp	r1, #29
 800a7dc:	d82b      	bhi.n	800a836 <__sflush_r+0xb2>
 800a7de:	4a2a      	ldr	r2, [pc, #168]	@ (800a888 <__sflush_r+0x104>)
 800a7e0:	410a      	asrs	r2, r1
 800a7e2:	07d6      	lsls	r6, r2, #31
 800a7e4:	d427      	bmi.n	800a836 <__sflush_r+0xb2>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	6062      	str	r2, [r4, #4]
 800a7ea:	04d9      	lsls	r1, r3, #19
 800a7ec:	6922      	ldr	r2, [r4, #16]
 800a7ee:	6022      	str	r2, [r4, #0]
 800a7f0:	d504      	bpl.n	800a7fc <__sflush_r+0x78>
 800a7f2:	1c42      	adds	r2, r0, #1
 800a7f4:	d101      	bne.n	800a7fa <__sflush_r+0x76>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	b903      	cbnz	r3, 800a7fc <__sflush_r+0x78>
 800a7fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7fe:	602f      	str	r7, [r5, #0]
 800a800:	b1b9      	cbz	r1, 800a832 <__sflush_r+0xae>
 800a802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a806:	4299      	cmp	r1, r3
 800a808:	d002      	beq.n	800a810 <__sflush_r+0x8c>
 800a80a:	4628      	mov	r0, r5
 800a80c:	f7fe fa2c 	bl	8008c68 <_free_r>
 800a810:	2300      	movs	r3, #0
 800a812:	6363      	str	r3, [r4, #52]	@ 0x34
 800a814:	e00d      	b.n	800a832 <__sflush_r+0xae>
 800a816:	2301      	movs	r3, #1
 800a818:	4628      	mov	r0, r5
 800a81a:	47b0      	blx	r6
 800a81c:	4602      	mov	r2, r0
 800a81e:	1c50      	adds	r0, r2, #1
 800a820:	d1c9      	bne.n	800a7b6 <__sflush_r+0x32>
 800a822:	682b      	ldr	r3, [r5, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0c6      	beq.n	800a7b6 <__sflush_r+0x32>
 800a828:	2b1d      	cmp	r3, #29
 800a82a:	d001      	beq.n	800a830 <__sflush_r+0xac>
 800a82c:	2b16      	cmp	r3, #22
 800a82e:	d11e      	bne.n	800a86e <__sflush_r+0xea>
 800a830:	602f      	str	r7, [r5, #0]
 800a832:	2000      	movs	r0, #0
 800a834:	e022      	b.n	800a87c <__sflush_r+0xf8>
 800a836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a83a:	b21b      	sxth	r3, r3
 800a83c:	e01b      	b.n	800a876 <__sflush_r+0xf2>
 800a83e:	690f      	ldr	r7, [r1, #16]
 800a840:	2f00      	cmp	r7, #0
 800a842:	d0f6      	beq.n	800a832 <__sflush_r+0xae>
 800a844:	0793      	lsls	r3, r2, #30
 800a846:	680e      	ldr	r6, [r1, #0]
 800a848:	bf08      	it	eq
 800a84a:	694b      	ldreq	r3, [r1, #20]
 800a84c:	600f      	str	r7, [r1, #0]
 800a84e:	bf18      	it	ne
 800a850:	2300      	movne	r3, #0
 800a852:	eba6 0807 	sub.w	r8, r6, r7
 800a856:	608b      	str	r3, [r1, #8]
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	dde9      	ble.n	800a832 <__sflush_r+0xae>
 800a85e:	6a21      	ldr	r1, [r4, #32]
 800a860:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a862:	4643      	mov	r3, r8
 800a864:	463a      	mov	r2, r7
 800a866:	4628      	mov	r0, r5
 800a868:	47b0      	blx	r6
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dc08      	bgt.n	800a880 <__sflush_r+0xfc>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	f04f 30ff 	mov.w	r0, #4294967295
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	4407      	add	r7, r0
 800a882:	eba8 0800 	sub.w	r8, r8, r0
 800a886:	e7e7      	b.n	800a858 <__sflush_r+0xd4>
 800a888:	dfbffffe 	.word	0xdfbffffe

0800a88c <_fflush_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	690b      	ldr	r3, [r1, #16]
 800a890:	4605      	mov	r5, r0
 800a892:	460c      	mov	r4, r1
 800a894:	b913      	cbnz	r3, 800a89c <_fflush_r+0x10>
 800a896:	2500      	movs	r5, #0
 800a898:	4628      	mov	r0, r5
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	b118      	cbz	r0, 800a8a6 <_fflush_r+0x1a>
 800a89e:	6a03      	ldr	r3, [r0, #32]
 800a8a0:	b90b      	cbnz	r3, 800a8a6 <_fflush_r+0x1a>
 800a8a2:	f7fd fa73 	bl	8007d8c <__sinit>
 800a8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0f3      	beq.n	800a896 <_fflush_r+0xa>
 800a8ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8b0:	07d0      	lsls	r0, r2, #31
 800a8b2:	d404      	bmi.n	800a8be <_fflush_r+0x32>
 800a8b4:	0599      	lsls	r1, r3, #22
 800a8b6:	d402      	bmi.n	800a8be <_fflush_r+0x32>
 800a8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8ba:	f7fd fb7e 	bl	8007fba <__retarget_lock_acquire_recursive>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f7ff ff5f 	bl	800a784 <__sflush_r>
 800a8c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8c8:	07da      	lsls	r2, r3, #31
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	d4e4      	bmi.n	800a898 <_fflush_r+0xc>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	059b      	lsls	r3, r3, #22
 800a8d2:	d4e1      	bmi.n	800a898 <_fflush_r+0xc>
 800a8d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8d6:	f7fd fb71 	bl	8007fbc <__retarget_lock_release_recursive>
 800a8da:	e7dd      	b.n	800a898 <_fflush_r+0xc>

0800a8dc <memmove>:
 800a8dc:	4288      	cmp	r0, r1
 800a8de:	b510      	push	{r4, lr}
 800a8e0:	eb01 0402 	add.w	r4, r1, r2
 800a8e4:	d902      	bls.n	800a8ec <memmove+0x10>
 800a8e6:	4284      	cmp	r4, r0
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	d807      	bhi.n	800a8fc <memmove+0x20>
 800a8ec:	1e43      	subs	r3, r0, #1
 800a8ee:	42a1      	cmp	r1, r4
 800a8f0:	d008      	beq.n	800a904 <memmove+0x28>
 800a8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8fa:	e7f8      	b.n	800a8ee <memmove+0x12>
 800a8fc:	4402      	add	r2, r0
 800a8fe:	4601      	mov	r1, r0
 800a900:	428a      	cmp	r2, r1
 800a902:	d100      	bne.n	800a906 <memmove+0x2a>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a90e:	e7f7      	b.n	800a900 <memmove+0x24>

0800a910 <strncmp>:
 800a910:	b510      	push	{r4, lr}
 800a912:	b16a      	cbz	r2, 800a930 <strncmp+0x20>
 800a914:	3901      	subs	r1, #1
 800a916:	1884      	adds	r4, r0, r2
 800a918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a91c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a920:	429a      	cmp	r2, r3
 800a922:	d103      	bne.n	800a92c <strncmp+0x1c>
 800a924:	42a0      	cmp	r0, r4
 800a926:	d001      	beq.n	800a92c <strncmp+0x1c>
 800a928:	2a00      	cmp	r2, #0
 800a92a:	d1f5      	bne.n	800a918 <strncmp+0x8>
 800a92c:	1ad0      	subs	r0, r2, r3
 800a92e:	bd10      	pop	{r4, pc}
 800a930:	4610      	mov	r0, r2
 800a932:	e7fc      	b.n	800a92e <strncmp+0x1e>

0800a934 <_sbrk_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	@ (800a950 <_sbrk_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f8 fb6c 	bl	800301c <_sbrk>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_sbrk_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_sbrk_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	20000734 	.word	0x20000734

0800a954 <memcpy>:
 800a954:	440a      	add	r2, r1
 800a956:	4291      	cmp	r1, r2
 800a958:	f100 33ff 	add.w	r3, r0, #4294967295
 800a95c:	d100      	bne.n	800a960 <memcpy+0xc>
 800a95e:	4770      	bx	lr
 800a960:	b510      	push	{r4, lr}
 800a962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a96a:	4291      	cmp	r1, r2
 800a96c:	d1f9      	bne.n	800a962 <memcpy+0xe>
 800a96e:	bd10      	pop	{r4, pc}

0800a970 <nan>:
 800a970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a978 <nan+0x8>
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	00000000 	.word	0x00000000
 800a97c:	7ff80000 	.word	0x7ff80000

0800a980 <__assert_func>:
 800a980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a982:	4614      	mov	r4, r2
 800a984:	461a      	mov	r2, r3
 800a986:	4b09      	ldr	r3, [pc, #36]	@ (800a9ac <__assert_func+0x2c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4605      	mov	r5, r0
 800a98c:	68d8      	ldr	r0, [r3, #12]
 800a98e:	b954      	cbnz	r4, 800a9a6 <__assert_func+0x26>
 800a990:	4b07      	ldr	r3, [pc, #28]	@ (800a9b0 <__assert_func+0x30>)
 800a992:	461c      	mov	r4, r3
 800a994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a998:	9100      	str	r1, [sp, #0]
 800a99a:	462b      	mov	r3, r5
 800a99c:	4905      	ldr	r1, [pc, #20]	@ (800a9b4 <__assert_func+0x34>)
 800a99e:	f000 fba7 	bl	800b0f0 <fiprintf>
 800a9a2:	f000 fbb7 	bl	800b114 <abort>
 800a9a6:	4b04      	ldr	r3, [pc, #16]	@ (800a9b8 <__assert_func+0x38>)
 800a9a8:	e7f4      	b.n	800a994 <__assert_func+0x14>
 800a9aa:	bf00      	nop
 800a9ac:	200001a0 	.word	0x200001a0
 800a9b0:	0800bbd5 	.word	0x0800bbd5
 800a9b4:	0800bba7 	.word	0x0800bba7
 800a9b8:	0800bb9a 	.word	0x0800bb9a

0800a9bc <_calloc_r>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	fba1 5402 	umull	r5, r4, r1, r2
 800a9c2:	b93c      	cbnz	r4, 800a9d4 <_calloc_r+0x18>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7fe f9c3 	bl	8008d50 <_malloc_r>
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	b928      	cbnz	r0, 800a9da <_calloc_r+0x1e>
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	220c      	movs	r2, #12
 800a9d6:	6002      	str	r2, [r0, #0]
 800a9d8:	e7f9      	b.n	800a9ce <_calloc_r+0x12>
 800a9da:	462a      	mov	r2, r5
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f7fd fa6e 	bl	8007ebe <memset>
 800a9e2:	e7f5      	b.n	800a9d0 <_calloc_r+0x14>

0800a9e4 <rshift>:
 800a9e4:	6903      	ldr	r3, [r0, #16]
 800a9e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9f2:	f100 0414 	add.w	r4, r0, #20
 800a9f6:	dd45      	ble.n	800aa84 <rshift+0xa0>
 800a9f8:	f011 011f 	ands.w	r1, r1, #31
 800a9fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa04:	d10c      	bne.n	800aa20 <rshift+0x3c>
 800aa06:	f100 0710 	add.w	r7, r0, #16
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	42b1      	cmp	r1, r6
 800aa0e:	d334      	bcc.n	800aa7a <rshift+0x96>
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	1eea      	subs	r2, r5, #3
 800aa16:	4296      	cmp	r6, r2
 800aa18:	bf38      	it	cc
 800aa1a:	2300      	movcc	r3, #0
 800aa1c:	4423      	add	r3, r4
 800aa1e:	e015      	b.n	800aa4c <rshift+0x68>
 800aa20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa24:	f1c1 0820 	rsb	r8, r1, #32
 800aa28:	40cf      	lsrs	r7, r1
 800aa2a:	f105 0e04 	add.w	lr, r5, #4
 800aa2e:	46a1      	mov	r9, r4
 800aa30:	4576      	cmp	r6, lr
 800aa32:	46f4      	mov	ip, lr
 800aa34:	d815      	bhi.n	800aa62 <rshift+0x7e>
 800aa36:	1a9a      	subs	r2, r3, r2
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	3a04      	subs	r2, #4
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	42ae      	cmp	r6, r5
 800aa40:	bf38      	it	cc
 800aa42:	2200      	movcc	r2, #0
 800aa44:	18a3      	adds	r3, r4, r2
 800aa46:	50a7      	str	r7, [r4, r2]
 800aa48:	b107      	cbz	r7, 800aa4c <rshift+0x68>
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	1b1a      	subs	r2, r3, r4
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa54:	bf08      	it	eq
 800aa56:	2300      	moveq	r3, #0
 800aa58:	6102      	str	r2, [r0, #16]
 800aa5a:	bf08      	it	eq
 800aa5c:	6143      	streq	r3, [r0, #20]
 800aa5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa62:	f8dc c000 	ldr.w	ip, [ip]
 800aa66:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa6a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa6e:	f849 7b04 	str.w	r7, [r9], #4
 800aa72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa76:	40cf      	lsrs	r7, r1
 800aa78:	e7da      	b.n	800aa30 <rshift+0x4c>
 800aa7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa82:	e7c3      	b.n	800aa0c <rshift+0x28>
 800aa84:	4623      	mov	r3, r4
 800aa86:	e7e1      	b.n	800aa4c <rshift+0x68>

0800aa88 <__hexdig_fun>:
 800aa88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa8c:	2b09      	cmp	r3, #9
 800aa8e:	d802      	bhi.n	800aa96 <__hexdig_fun+0xe>
 800aa90:	3820      	subs	r0, #32
 800aa92:	b2c0      	uxtb	r0, r0
 800aa94:	4770      	bx	lr
 800aa96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	d801      	bhi.n	800aaa2 <__hexdig_fun+0x1a>
 800aa9e:	3847      	subs	r0, #71	@ 0x47
 800aaa0:	e7f7      	b.n	800aa92 <__hexdig_fun+0xa>
 800aaa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d801      	bhi.n	800aaae <__hexdig_fun+0x26>
 800aaaa:	3827      	subs	r0, #39	@ 0x27
 800aaac:	e7f1      	b.n	800aa92 <__hexdig_fun+0xa>
 800aaae:	2000      	movs	r0, #0
 800aab0:	4770      	bx	lr
	...

0800aab4 <__gethex>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	b085      	sub	sp, #20
 800aaba:	468a      	mov	sl, r1
 800aabc:	9302      	str	r3, [sp, #8]
 800aabe:	680b      	ldr	r3, [r1, #0]
 800aac0:	9001      	str	r0, [sp, #4]
 800aac2:	4690      	mov	r8, r2
 800aac4:	1c9c      	adds	r4, r3, #2
 800aac6:	46a1      	mov	r9, r4
 800aac8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aacc:	2830      	cmp	r0, #48	@ 0x30
 800aace:	d0fa      	beq.n	800aac6 <__gethex+0x12>
 800aad0:	eba9 0303 	sub.w	r3, r9, r3
 800aad4:	f1a3 0b02 	sub.w	fp, r3, #2
 800aad8:	f7ff ffd6 	bl	800aa88 <__hexdig_fun>
 800aadc:	4605      	mov	r5, r0
 800aade:	2800      	cmp	r0, #0
 800aae0:	d168      	bne.n	800abb4 <__gethex+0x100>
 800aae2:	49a0      	ldr	r1, [pc, #640]	@ (800ad64 <__gethex+0x2b0>)
 800aae4:	2201      	movs	r2, #1
 800aae6:	4648      	mov	r0, r9
 800aae8:	f7ff ff12 	bl	800a910 <strncmp>
 800aaec:	4607      	mov	r7, r0
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d167      	bne.n	800abc2 <__gethex+0x10e>
 800aaf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aaf6:	4626      	mov	r6, r4
 800aaf8:	f7ff ffc6 	bl	800aa88 <__hexdig_fun>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d062      	beq.n	800abc6 <__gethex+0x112>
 800ab00:	4623      	mov	r3, r4
 800ab02:	7818      	ldrb	r0, [r3, #0]
 800ab04:	2830      	cmp	r0, #48	@ 0x30
 800ab06:	4699      	mov	r9, r3
 800ab08:	f103 0301 	add.w	r3, r3, #1
 800ab0c:	d0f9      	beq.n	800ab02 <__gethex+0x4e>
 800ab0e:	f7ff ffbb 	bl	800aa88 <__hexdig_fun>
 800ab12:	fab0 f580 	clz	r5, r0
 800ab16:	096d      	lsrs	r5, r5, #5
 800ab18:	f04f 0b01 	mov.w	fp, #1
 800ab1c:	464a      	mov	r2, r9
 800ab1e:	4616      	mov	r6, r2
 800ab20:	3201      	adds	r2, #1
 800ab22:	7830      	ldrb	r0, [r6, #0]
 800ab24:	f7ff ffb0 	bl	800aa88 <__hexdig_fun>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1f8      	bne.n	800ab1e <__gethex+0x6a>
 800ab2c:	498d      	ldr	r1, [pc, #564]	@ (800ad64 <__gethex+0x2b0>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff feed 	bl	800a910 <strncmp>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d13f      	bne.n	800abba <__gethex+0x106>
 800ab3a:	b944      	cbnz	r4, 800ab4e <__gethex+0x9a>
 800ab3c:	1c74      	adds	r4, r6, #1
 800ab3e:	4622      	mov	r2, r4
 800ab40:	4616      	mov	r6, r2
 800ab42:	3201      	adds	r2, #1
 800ab44:	7830      	ldrb	r0, [r6, #0]
 800ab46:	f7ff ff9f 	bl	800aa88 <__hexdig_fun>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d1f8      	bne.n	800ab40 <__gethex+0x8c>
 800ab4e:	1ba4      	subs	r4, r4, r6
 800ab50:	00a7      	lsls	r7, r4, #2
 800ab52:	7833      	ldrb	r3, [r6, #0]
 800ab54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab58:	2b50      	cmp	r3, #80	@ 0x50
 800ab5a:	d13e      	bne.n	800abda <__gethex+0x126>
 800ab5c:	7873      	ldrb	r3, [r6, #1]
 800ab5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab60:	d033      	beq.n	800abca <__gethex+0x116>
 800ab62:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab64:	d034      	beq.n	800abd0 <__gethex+0x11c>
 800ab66:	1c71      	adds	r1, r6, #1
 800ab68:	2400      	movs	r4, #0
 800ab6a:	7808      	ldrb	r0, [r1, #0]
 800ab6c:	f7ff ff8c 	bl	800aa88 <__hexdig_fun>
 800ab70:	1e43      	subs	r3, r0, #1
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b18      	cmp	r3, #24
 800ab76:	d830      	bhi.n	800abda <__gethex+0x126>
 800ab78:	f1a0 0210 	sub.w	r2, r0, #16
 800ab7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab80:	f7ff ff82 	bl	800aa88 <__hexdig_fun>
 800ab84:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab88:	fa5f fc8c 	uxtb.w	ip, ip
 800ab8c:	f1bc 0f18 	cmp.w	ip, #24
 800ab90:	f04f 030a 	mov.w	r3, #10
 800ab94:	d91e      	bls.n	800abd4 <__gethex+0x120>
 800ab96:	b104      	cbz	r4, 800ab9a <__gethex+0xe6>
 800ab98:	4252      	negs	r2, r2
 800ab9a:	4417      	add	r7, r2
 800ab9c:	f8ca 1000 	str.w	r1, [sl]
 800aba0:	b1ed      	cbz	r5, 800abde <__gethex+0x12a>
 800aba2:	f1bb 0f00 	cmp.w	fp, #0
 800aba6:	bf0c      	ite	eq
 800aba8:	2506      	moveq	r5, #6
 800abaa:	2500      	movne	r5, #0
 800abac:	4628      	mov	r0, r5
 800abae:	b005      	add	sp, #20
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	2500      	movs	r5, #0
 800abb6:	462c      	mov	r4, r5
 800abb8:	e7b0      	b.n	800ab1c <__gethex+0x68>
 800abba:	2c00      	cmp	r4, #0
 800abbc:	d1c7      	bne.n	800ab4e <__gethex+0x9a>
 800abbe:	4627      	mov	r7, r4
 800abc0:	e7c7      	b.n	800ab52 <__gethex+0x9e>
 800abc2:	464e      	mov	r6, r9
 800abc4:	462f      	mov	r7, r5
 800abc6:	2501      	movs	r5, #1
 800abc8:	e7c3      	b.n	800ab52 <__gethex+0x9e>
 800abca:	2400      	movs	r4, #0
 800abcc:	1cb1      	adds	r1, r6, #2
 800abce:	e7cc      	b.n	800ab6a <__gethex+0xb6>
 800abd0:	2401      	movs	r4, #1
 800abd2:	e7fb      	b.n	800abcc <__gethex+0x118>
 800abd4:	fb03 0002 	mla	r0, r3, r2, r0
 800abd8:	e7ce      	b.n	800ab78 <__gethex+0xc4>
 800abda:	4631      	mov	r1, r6
 800abdc:	e7de      	b.n	800ab9c <__gethex+0xe8>
 800abde:	eba6 0309 	sub.w	r3, r6, r9
 800abe2:	3b01      	subs	r3, #1
 800abe4:	4629      	mov	r1, r5
 800abe6:	2b07      	cmp	r3, #7
 800abe8:	dc0a      	bgt.n	800ac00 <__gethex+0x14c>
 800abea:	9801      	ldr	r0, [sp, #4]
 800abec:	f7fe f93c 	bl	8008e68 <_Balloc>
 800abf0:	4604      	mov	r4, r0
 800abf2:	b940      	cbnz	r0, 800ac06 <__gethex+0x152>
 800abf4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad68 <__gethex+0x2b4>)
 800abf6:	4602      	mov	r2, r0
 800abf8:	21e4      	movs	r1, #228	@ 0xe4
 800abfa:	485c      	ldr	r0, [pc, #368]	@ (800ad6c <__gethex+0x2b8>)
 800abfc:	f7ff fec0 	bl	800a980 <__assert_func>
 800ac00:	3101      	adds	r1, #1
 800ac02:	105b      	asrs	r3, r3, #1
 800ac04:	e7ef      	b.n	800abe6 <__gethex+0x132>
 800ac06:	f100 0a14 	add.w	sl, r0, #20
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	4655      	mov	r5, sl
 800ac0e:	469b      	mov	fp, r3
 800ac10:	45b1      	cmp	r9, r6
 800ac12:	d337      	bcc.n	800ac84 <__gethex+0x1d0>
 800ac14:	f845 bb04 	str.w	fp, [r5], #4
 800ac18:	eba5 050a 	sub.w	r5, r5, sl
 800ac1c:	10ad      	asrs	r5, r5, #2
 800ac1e:	6125      	str	r5, [r4, #16]
 800ac20:	4658      	mov	r0, fp
 800ac22:	f7fe fa13 	bl	800904c <__hi0bits>
 800ac26:	016d      	lsls	r5, r5, #5
 800ac28:	f8d8 6000 	ldr.w	r6, [r8]
 800ac2c:	1a2d      	subs	r5, r5, r0
 800ac2e:	42b5      	cmp	r5, r6
 800ac30:	dd54      	ble.n	800acdc <__gethex+0x228>
 800ac32:	1bad      	subs	r5, r5, r6
 800ac34:	4629      	mov	r1, r5
 800ac36:	4620      	mov	r0, r4
 800ac38:	f7fe fda7 	bl	800978a <__any_on>
 800ac3c:	4681      	mov	r9, r0
 800ac3e:	b178      	cbz	r0, 800ac60 <__gethex+0x1ac>
 800ac40:	1e6b      	subs	r3, r5, #1
 800ac42:	1159      	asrs	r1, r3, #5
 800ac44:	f003 021f 	and.w	r2, r3, #31
 800ac48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	fa09 f202 	lsl.w	r2, r9, r2
 800ac54:	420a      	tst	r2, r1
 800ac56:	d003      	beq.n	800ac60 <__gethex+0x1ac>
 800ac58:	454b      	cmp	r3, r9
 800ac5a:	dc36      	bgt.n	800acca <__gethex+0x216>
 800ac5c:	f04f 0902 	mov.w	r9, #2
 800ac60:	4629      	mov	r1, r5
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff febe 	bl	800a9e4 <rshift>
 800ac68:	442f      	add	r7, r5
 800ac6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac6e:	42bb      	cmp	r3, r7
 800ac70:	da42      	bge.n	800acf8 <__gethex+0x244>
 800ac72:	9801      	ldr	r0, [sp, #4]
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7fe f937 	bl	8008ee8 <_Bfree>
 800ac7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	25a3      	movs	r5, #163	@ 0xa3
 800ac82:	e793      	b.n	800abac <__gethex+0xf8>
 800ac84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac88:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac8a:	d012      	beq.n	800acb2 <__gethex+0x1fe>
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	d104      	bne.n	800ac9a <__gethex+0x1e6>
 800ac90:	f845 bb04 	str.w	fp, [r5], #4
 800ac94:	f04f 0b00 	mov.w	fp, #0
 800ac98:	465b      	mov	r3, fp
 800ac9a:	7830      	ldrb	r0, [r6, #0]
 800ac9c:	9303      	str	r3, [sp, #12]
 800ac9e:	f7ff fef3 	bl	800aa88 <__hexdig_fun>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	f000 000f 	and.w	r0, r0, #15
 800aca8:	4098      	lsls	r0, r3
 800acaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800acae:	3304      	adds	r3, #4
 800acb0:	e7ae      	b.n	800ac10 <__gethex+0x15c>
 800acb2:	45b1      	cmp	r9, r6
 800acb4:	d8ea      	bhi.n	800ac8c <__gethex+0x1d8>
 800acb6:	492b      	ldr	r1, [pc, #172]	@ (800ad64 <__gethex+0x2b0>)
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	2201      	movs	r2, #1
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7ff fe27 	bl	800a910 <strncmp>
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1e1      	bne.n	800ac8c <__gethex+0x1d8>
 800acc8:	e7a2      	b.n	800ac10 <__gethex+0x15c>
 800acca:	1ea9      	subs	r1, r5, #2
 800accc:	4620      	mov	r0, r4
 800acce:	f7fe fd5c 	bl	800978a <__any_on>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0c2      	beq.n	800ac5c <__gethex+0x1a8>
 800acd6:	f04f 0903 	mov.w	r9, #3
 800acda:	e7c1      	b.n	800ac60 <__gethex+0x1ac>
 800acdc:	da09      	bge.n	800acf2 <__gethex+0x23e>
 800acde:	1b75      	subs	r5, r6, r5
 800ace0:	4621      	mov	r1, r4
 800ace2:	9801      	ldr	r0, [sp, #4]
 800ace4:	462a      	mov	r2, r5
 800ace6:	f7fe fb17 	bl	8009318 <__lshift>
 800acea:	1b7f      	subs	r7, r7, r5
 800acec:	4604      	mov	r4, r0
 800acee:	f100 0a14 	add.w	sl, r0, #20
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	e7b8      	b.n	800ac6a <__gethex+0x1b6>
 800acf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acfc:	42bd      	cmp	r5, r7
 800acfe:	dd6f      	ble.n	800ade0 <__gethex+0x32c>
 800ad00:	1bed      	subs	r5, r5, r7
 800ad02:	42ae      	cmp	r6, r5
 800ad04:	dc34      	bgt.n	800ad70 <__gethex+0x2bc>
 800ad06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d022      	beq.n	800ad54 <__gethex+0x2a0>
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d024      	beq.n	800ad5c <__gethex+0x2a8>
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d115      	bne.n	800ad42 <__gethex+0x28e>
 800ad16:	42ae      	cmp	r6, r5
 800ad18:	d113      	bne.n	800ad42 <__gethex+0x28e>
 800ad1a:	2e01      	cmp	r6, #1
 800ad1c:	d10b      	bne.n	800ad36 <__gethex+0x282>
 800ad1e:	9a02      	ldr	r2, [sp, #8]
 800ad20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	2301      	movs	r3, #1
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	f8ca 3000 	str.w	r3, [sl]
 800ad2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad30:	2562      	movs	r5, #98	@ 0x62
 800ad32:	601c      	str	r4, [r3, #0]
 800ad34:	e73a      	b.n	800abac <__gethex+0xf8>
 800ad36:	1e71      	subs	r1, r6, #1
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f7fe fd26 	bl	800978a <__any_on>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d1ed      	bne.n	800ad1e <__gethex+0x26a>
 800ad42:	9801      	ldr	r0, [sp, #4]
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7fe f8cf 	bl	8008ee8 <_Bfree>
 800ad4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	2550      	movs	r5, #80	@ 0x50
 800ad52:	e72b      	b.n	800abac <__gethex+0xf8>
 800ad54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f3      	bne.n	800ad42 <__gethex+0x28e>
 800ad5a:	e7e0      	b.n	800ad1e <__gethex+0x26a>
 800ad5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1dd      	bne.n	800ad1e <__gethex+0x26a>
 800ad62:	e7ee      	b.n	800ad42 <__gethex+0x28e>
 800ad64:	0800ba28 	.word	0x0800ba28
 800ad68:	0800b8c1 	.word	0x0800b8c1
 800ad6c:	0800bbd6 	.word	0x0800bbd6
 800ad70:	1e6f      	subs	r7, r5, #1
 800ad72:	f1b9 0f00 	cmp.w	r9, #0
 800ad76:	d130      	bne.n	800adda <__gethex+0x326>
 800ad78:	b127      	cbz	r7, 800ad84 <__gethex+0x2d0>
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7fe fd04 	bl	800978a <__any_on>
 800ad82:	4681      	mov	r9, r0
 800ad84:	117a      	asrs	r2, r7, #5
 800ad86:	2301      	movs	r3, #1
 800ad88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad8c:	f007 071f 	and.w	r7, r7, #31
 800ad90:	40bb      	lsls	r3, r7
 800ad92:	4213      	tst	r3, r2
 800ad94:	4629      	mov	r1, r5
 800ad96:	4620      	mov	r0, r4
 800ad98:	bf18      	it	ne
 800ad9a:	f049 0902 	orrne.w	r9, r9, #2
 800ad9e:	f7ff fe21 	bl	800a9e4 <rshift>
 800ada2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ada6:	1b76      	subs	r6, r6, r5
 800ada8:	2502      	movs	r5, #2
 800adaa:	f1b9 0f00 	cmp.w	r9, #0
 800adae:	d047      	beq.n	800ae40 <__gethex+0x38c>
 800adb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d015      	beq.n	800ade4 <__gethex+0x330>
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d017      	beq.n	800adec <__gethex+0x338>
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d109      	bne.n	800add4 <__gethex+0x320>
 800adc0:	f019 0f02 	tst.w	r9, #2
 800adc4:	d006      	beq.n	800add4 <__gethex+0x320>
 800adc6:	f8da 3000 	ldr.w	r3, [sl]
 800adca:	ea49 0903 	orr.w	r9, r9, r3
 800adce:	f019 0f01 	tst.w	r9, #1
 800add2:	d10e      	bne.n	800adf2 <__gethex+0x33e>
 800add4:	f045 0510 	orr.w	r5, r5, #16
 800add8:	e032      	b.n	800ae40 <__gethex+0x38c>
 800adda:	f04f 0901 	mov.w	r9, #1
 800adde:	e7d1      	b.n	800ad84 <__gethex+0x2d0>
 800ade0:	2501      	movs	r5, #1
 800ade2:	e7e2      	b.n	800adaa <__gethex+0x2f6>
 800ade4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade6:	f1c3 0301 	rsb	r3, r3, #1
 800adea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0f0      	beq.n	800add4 <__gethex+0x320>
 800adf2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adf6:	f104 0314 	add.w	r3, r4, #20
 800adfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae02:	f04f 0c00 	mov.w	ip, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae10:	d01b      	beq.n	800ae4a <__gethex+0x396>
 800ae12:	3201      	adds	r2, #1
 800ae14:	6002      	str	r2, [r0, #0]
 800ae16:	2d02      	cmp	r5, #2
 800ae18:	f104 0314 	add.w	r3, r4, #20
 800ae1c:	d13c      	bne.n	800ae98 <__gethex+0x3e4>
 800ae1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ae22:	3a01      	subs	r2, #1
 800ae24:	42b2      	cmp	r2, r6
 800ae26:	d109      	bne.n	800ae3c <__gethex+0x388>
 800ae28:	1171      	asrs	r1, r6, #5
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae30:	f006 061f 	and.w	r6, r6, #31
 800ae34:	fa02 f606 	lsl.w	r6, r2, r6
 800ae38:	421e      	tst	r6, r3
 800ae3a:	d13a      	bne.n	800aeb2 <__gethex+0x3fe>
 800ae3c:	f045 0520 	orr.w	r5, r5, #32
 800ae40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae42:	601c      	str	r4, [r3, #0]
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	601f      	str	r7, [r3, #0]
 800ae48:	e6b0      	b.n	800abac <__gethex+0xf8>
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae50:	d8d9      	bhi.n	800ae06 <__gethex+0x352>
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	459b      	cmp	fp, r3
 800ae56:	db17      	blt.n	800ae88 <__gethex+0x3d4>
 800ae58:	6861      	ldr	r1, [r4, #4]
 800ae5a:	9801      	ldr	r0, [sp, #4]
 800ae5c:	3101      	adds	r1, #1
 800ae5e:	f7fe f803 	bl	8008e68 <_Balloc>
 800ae62:	4681      	mov	r9, r0
 800ae64:	b918      	cbnz	r0, 800ae6e <__gethex+0x3ba>
 800ae66:	4b1a      	ldr	r3, [pc, #104]	@ (800aed0 <__gethex+0x41c>)
 800ae68:	4602      	mov	r2, r0
 800ae6a:	2184      	movs	r1, #132	@ 0x84
 800ae6c:	e6c5      	b.n	800abfa <__gethex+0x146>
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	3202      	adds	r2, #2
 800ae72:	f104 010c 	add.w	r1, r4, #12
 800ae76:	0092      	lsls	r2, r2, #2
 800ae78:	300c      	adds	r0, #12
 800ae7a:	f7ff fd6b 	bl	800a954 <memcpy>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	9801      	ldr	r0, [sp, #4]
 800ae82:	f7fe f831 	bl	8008ee8 <_Bfree>
 800ae86:	464c      	mov	r4, r9
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae90:	6122      	str	r2, [r4, #16]
 800ae92:	2201      	movs	r2, #1
 800ae94:	615a      	str	r2, [r3, #20]
 800ae96:	e7be      	b.n	800ae16 <__gethex+0x362>
 800ae98:	6922      	ldr	r2, [r4, #16]
 800ae9a:	455a      	cmp	r2, fp
 800ae9c:	dd0b      	ble.n	800aeb6 <__gethex+0x402>
 800ae9e:	2101      	movs	r1, #1
 800aea0:	4620      	mov	r0, r4
 800aea2:	f7ff fd9f 	bl	800a9e4 <rshift>
 800aea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeaa:	3701      	adds	r7, #1
 800aeac:	42bb      	cmp	r3, r7
 800aeae:	f6ff aee0 	blt.w	800ac72 <__gethex+0x1be>
 800aeb2:	2501      	movs	r5, #1
 800aeb4:	e7c2      	b.n	800ae3c <__gethex+0x388>
 800aeb6:	f016 061f 	ands.w	r6, r6, #31
 800aeba:	d0fa      	beq.n	800aeb2 <__gethex+0x3fe>
 800aebc:	4453      	add	r3, sl
 800aebe:	f1c6 0620 	rsb	r6, r6, #32
 800aec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aec6:	f7fe f8c1 	bl	800904c <__hi0bits>
 800aeca:	42b0      	cmp	r0, r6
 800aecc:	dbe7      	blt.n	800ae9e <__gethex+0x3ea>
 800aece:	e7f0      	b.n	800aeb2 <__gethex+0x3fe>
 800aed0:	0800b8c1 	.word	0x0800b8c1

0800aed4 <L_shift>:
 800aed4:	f1c2 0208 	rsb	r2, r2, #8
 800aed8:	0092      	lsls	r2, r2, #2
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	f1c2 0620 	rsb	r6, r2, #32
 800aee0:	6843      	ldr	r3, [r0, #4]
 800aee2:	6804      	ldr	r4, [r0, #0]
 800aee4:	fa03 f506 	lsl.w	r5, r3, r6
 800aee8:	432c      	orrs	r4, r5
 800aeea:	40d3      	lsrs	r3, r2
 800aeec:	6004      	str	r4, [r0, #0]
 800aeee:	f840 3f04 	str.w	r3, [r0, #4]!
 800aef2:	4288      	cmp	r0, r1
 800aef4:	d3f4      	bcc.n	800aee0 <L_shift+0xc>
 800aef6:	bd70      	pop	{r4, r5, r6, pc}

0800aef8 <__match>:
 800aef8:	b530      	push	{r4, r5, lr}
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af02:	b914      	cbnz	r4, 800af0a <__match+0x12>
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	2001      	movs	r0, #1
 800af08:	bd30      	pop	{r4, r5, pc}
 800af0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800af12:	2d19      	cmp	r5, #25
 800af14:	bf98      	it	ls
 800af16:	3220      	addls	r2, #32
 800af18:	42a2      	cmp	r2, r4
 800af1a:	d0f0      	beq.n	800aefe <__match+0x6>
 800af1c:	2000      	movs	r0, #0
 800af1e:	e7f3      	b.n	800af08 <__match+0x10>

0800af20 <__hexnan>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	680b      	ldr	r3, [r1, #0]
 800af26:	6801      	ldr	r1, [r0, #0]
 800af28:	115e      	asrs	r6, r3, #5
 800af2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af2e:	f013 031f 	ands.w	r3, r3, #31
 800af32:	b087      	sub	sp, #28
 800af34:	bf18      	it	ne
 800af36:	3604      	addne	r6, #4
 800af38:	2500      	movs	r5, #0
 800af3a:	1f37      	subs	r7, r6, #4
 800af3c:	4682      	mov	sl, r0
 800af3e:	4690      	mov	r8, r2
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	f846 5c04 	str.w	r5, [r6, #-4]
 800af46:	46b9      	mov	r9, r7
 800af48:	463c      	mov	r4, r7
 800af4a:	9502      	str	r5, [sp, #8]
 800af4c:	46ab      	mov	fp, r5
 800af4e:	784a      	ldrb	r2, [r1, #1]
 800af50:	1c4b      	adds	r3, r1, #1
 800af52:	9303      	str	r3, [sp, #12]
 800af54:	b342      	cbz	r2, 800afa8 <__hexnan+0x88>
 800af56:	4610      	mov	r0, r2
 800af58:	9105      	str	r1, [sp, #20]
 800af5a:	9204      	str	r2, [sp, #16]
 800af5c:	f7ff fd94 	bl	800aa88 <__hexdig_fun>
 800af60:	2800      	cmp	r0, #0
 800af62:	d151      	bne.n	800b008 <__hexnan+0xe8>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	9905      	ldr	r1, [sp, #20]
 800af68:	2a20      	cmp	r2, #32
 800af6a:	d818      	bhi.n	800af9e <__hexnan+0x7e>
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	459b      	cmp	fp, r3
 800af70:	dd13      	ble.n	800af9a <__hexnan+0x7a>
 800af72:	454c      	cmp	r4, r9
 800af74:	d206      	bcs.n	800af84 <__hexnan+0x64>
 800af76:	2d07      	cmp	r5, #7
 800af78:	dc04      	bgt.n	800af84 <__hexnan+0x64>
 800af7a:	462a      	mov	r2, r5
 800af7c:	4649      	mov	r1, r9
 800af7e:	4620      	mov	r0, r4
 800af80:	f7ff ffa8 	bl	800aed4 <L_shift>
 800af84:	4544      	cmp	r4, r8
 800af86:	d952      	bls.n	800b02e <__hexnan+0x10e>
 800af88:	2300      	movs	r3, #0
 800af8a:	f1a4 0904 	sub.w	r9, r4, #4
 800af8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af92:	f8cd b008 	str.w	fp, [sp, #8]
 800af96:	464c      	mov	r4, r9
 800af98:	461d      	mov	r5, r3
 800af9a:	9903      	ldr	r1, [sp, #12]
 800af9c:	e7d7      	b.n	800af4e <__hexnan+0x2e>
 800af9e:	2a29      	cmp	r2, #41	@ 0x29
 800afa0:	d157      	bne.n	800b052 <__hexnan+0x132>
 800afa2:	3102      	adds	r1, #2
 800afa4:	f8ca 1000 	str.w	r1, [sl]
 800afa8:	f1bb 0f00 	cmp.w	fp, #0
 800afac:	d051      	beq.n	800b052 <__hexnan+0x132>
 800afae:	454c      	cmp	r4, r9
 800afb0:	d206      	bcs.n	800afc0 <__hexnan+0xa0>
 800afb2:	2d07      	cmp	r5, #7
 800afb4:	dc04      	bgt.n	800afc0 <__hexnan+0xa0>
 800afb6:	462a      	mov	r2, r5
 800afb8:	4649      	mov	r1, r9
 800afba:	4620      	mov	r0, r4
 800afbc:	f7ff ff8a 	bl	800aed4 <L_shift>
 800afc0:	4544      	cmp	r4, r8
 800afc2:	d936      	bls.n	800b032 <__hexnan+0x112>
 800afc4:	f1a8 0204 	sub.w	r2, r8, #4
 800afc8:	4623      	mov	r3, r4
 800afca:	f853 1b04 	ldr.w	r1, [r3], #4
 800afce:	f842 1f04 	str.w	r1, [r2, #4]!
 800afd2:	429f      	cmp	r7, r3
 800afd4:	d2f9      	bcs.n	800afca <__hexnan+0xaa>
 800afd6:	1b3b      	subs	r3, r7, r4
 800afd8:	f023 0303 	bic.w	r3, r3, #3
 800afdc:	3304      	adds	r3, #4
 800afde:	3401      	adds	r4, #1
 800afe0:	3e03      	subs	r6, #3
 800afe2:	42b4      	cmp	r4, r6
 800afe4:	bf88      	it	hi
 800afe6:	2304      	movhi	r3, #4
 800afe8:	4443      	add	r3, r8
 800afea:	2200      	movs	r2, #0
 800afec:	f843 2b04 	str.w	r2, [r3], #4
 800aff0:	429f      	cmp	r7, r3
 800aff2:	d2fb      	bcs.n	800afec <__hexnan+0xcc>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	b91b      	cbnz	r3, 800b000 <__hexnan+0xe0>
 800aff8:	4547      	cmp	r7, r8
 800affa:	d128      	bne.n	800b04e <__hexnan+0x12e>
 800affc:	2301      	movs	r3, #1
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	2005      	movs	r0, #5
 800b002:	b007      	add	sp, #28
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	3501      	adds	r5, #1
 800b00a:	2d08      	cmp	r5, #8
 800b00c:	f10b 0b01 	add.w	fp, fp, #1
 800b010:	dd06      	ble.n	800b020 <__hexnan+0x100>
 800b012:	4544      	cmp	r4, r8
 800b014:	d9c1      	bls.n	800af9a <__hexnan+0x7a>
 800b016:	2300      	movs	r3, #0
 800b018:	f844 3c04 	str.w	r3, [r4, #-4]
 800b01c:	2501      	movs	r5, #1
 800b01e:	3c04      	subs	r4, #4
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	f000 000f 	and.w	r0, r0, #15
 800b026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b02a:	6020      	str	r0, [r4, #0]
 800b02c:	e7b5      	b.n	800af9a <__hexnan+0x7a>
 800b02e:	2508      	movs	r5, #8
 800b030:	e7b3      	b.n	800af9a <__hexnan+0x7a>
 800b032:	9b01      	ldr	r3, [sp, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0dd      	beq.n	800aff4 <__hexnan+0xd4>
 800b038:	f1c3 0320 	rsb	r3, r3, #32
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	40da      	lsrs	r2, r3
 800b042:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b046:	4013      	ands	r3, r2
 800b048:	f846 3c04 	str.w	r3, [r6, #-4]
 800b04c:	e7d2      	b.n	800aff4 <__hexnan+0xd4>
 800b04e:	3f04      	subs	r7, #4
 800b050:	e7d0      	b.n	800aff4 <__hexnan+0xd4>
 800b052:	2004      	movs	r0, #4
 800b054:	e7d5      	b.n	800b002 <__hexnan+0xe2>

0800b056 <__ascii_mbtowc>:
 800b056:	b082      	sub	sp, #8
 800b058:	b901      	cbnz	r1, 800b05c <__ascii_mbtowc+0x6>
 800b05a:	a901      	add	r1, sp, #4
 800b05c:	b142      	cbz	r2, 800b070 <__ascii_mbtowc+0x1a>
 800b05e:	b14b      	cbz	r3, 800b074 <__ascii_mbtowc+0x1e>
 800b060:	7813      	ldrb	r3, [r2, #0]
 800b062:	600b      	str	r3, [r1, #0]
 800b064:	7812      	ldrb	r2, [r2, #0]
 800b066:	1e10      	subs	r0, r2, #0
 800b068:	bf18      	it	ne
 800b06a:	2001      	movne	r0, #1
 800b06c:	b002      	add	sp, #8
 800b06e:	4770      	bx	lr
 800b070:	4610      	mov	r0, r2
 800b072:	e7fb      	b.n	800b06c <__ascii_mbtowc+0x16>
 800b074:	f06f 0001 	mvn.w	r0, #1
 800b078:	e7f8      	b.n	800b06c <__ascii_mbtowc+0x16>

0800b07a <_realloc_r>:
 800b07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07e:	4680      	mov	r8, r0
 800b080:	4615      	mov	r5, r2
 800b082:	460c      	mov	r4, r1
 800b084:	b921      	cbnz	r1, 800b090 <_realloc_r+0x16>
 800b086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b08a:	4611      	mov	r1, r2
 800b08c:	f7fd be60 	b.w	8008d50 <_malloc_r>
 800b090:	b92a      	cbnz	r2, 800b09e <_realloc_r+0x24>
 800b092:	f7fd fde9 	bl	8008c68 <_free_r>
 800b096:	2400      	movs	r4, #0
 800b098:	4620      	mov	r0, r4
 800b09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09e:	f000 f840 	bl	800b122 <_malloc_usable_size_r>
 800b0a2:	4285      	cmp	r5, r0
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	d802      	bhi.n	800b0ae <_realloc_r+0x34>
 800b0a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0ac:	d8f4      	bhi.n	800b098 <_realloc_r+0x1e>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	f7fd fe4d 	bl	8008d50 <_malloc_r>
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d0ec      	beq.n	800b096 <_realloc_r+0x1c>
 800b0bc:	42b5      	cmp	r5, r6
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	bf28      	it	cs
 800b0c4:	4632      	movcs	r2, r6
 800b0c6:	f7ff fc45 	bl	800a954 <memcpy>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	f7fd fdcb 	bl	8008c68 <_free_r>
 800b0d2:	463c      	mov	r4, r7
 800b0d4:	e7e0      	b.n	800b098 <_realloc_r+0x1e>

0800b0d6 <__ascii_wctomb>:
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	b141      	cbz	r1, 800b0ee <__ascii_wctomb+0x18>
 800b0dc:	2aff      	cmp	r2, #255	@ 0xff
 800b0de:	d904      	bls.n	800b0ea <__ascii_wctomb+0x14>
 800b0e0:	228a      	movs	r2, #138	@ 0x8a
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	4770      	bx	lr
 800b0ea:	700a      	strb	r2, [r1, #0]
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	4770      	bx	lr

0800b0f0 <fiprintf>:
 800b0f0:	b40e      	push	{r1, r2, r3}
 800b0f2:	b503      	push	{r0, r1, lr}
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	4805      	ldr	r0, [pc, #20]	@ (800b110 <fiprintf+0x20>)
 800b0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	f000 f83f 	bl	800b184 <_vfiprintf_r>
 800b106:	b002      	add	sp, #8
 800b108:	f85d eb04 	ldr.w	lr, [sp], #4
 800b10c:	b003      	add	sp, #12
 800b10e:	4770      	bx	lr
 800b110:	200001a0 	.word	0x200001a0

0800b114 <abort>:
 800b114:	b508      	push	{r3, lr}
 800b116:	2006      	movs	r0, #6
 800b118:	f000 fa08 	bl	800b52c <raise>
 800b11c:	2001      	movs	r0, #1
 800b11e:	f7f7 ff05 	bl	8002f2c <_exit>

0800b122 <_malloc_usable_size_r>:
 800b122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b126:	1f18      	subs	r0, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfbc      	itt	lt
 800b12c:	580b      	ldrlt	r3, [r1, r0]
 800b12e:	18c0      	addlt	r0, r0, r3
 800b130:	4770      	bx	lr

0800b132 <__sfputc_r>:
 800b132:	6893      	ldr	r3, [r2, #8]
 800b134:	3b01      	subs	r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	b410      	push	{r4}
 800b13a:	6093      	str	r3, [r2, #8]
 800b13c:	da08      	bge.n	800b150 <__sfputc_r+0x1e>
 800b13e:	6994      	ldr	r4, [r2, #24]
 800b140:	42a3      	cmp	r3, r4
 800b142:	db01      	blt.n	800b148 <__sfputc_r+0x16>
 800b144:	290a      	cmp	r1, #10
 800b146:	d103      	bne.n	800b150 <__sfputc_r+0x1e>
 800b148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14c:	f000 b932 	b.w	800b3b4 <__swbuf_r>
 800b150:	6813      	ldr	r3, [r2, #0]
 800b152:	1c58      	adds	r0, r3, #1
 800b154:	6010      	str	r0, [r2, #0]
 800b156:	7019      	strb	r1, [r3, #0]
 800b158:	4608      	mov	r0, r1
 800b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <__sfputs_r>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	4614      	mov	r4, r2
 800b168:	18d5      	adds	r5, r2, r3
 800b16a:	42ac      	cmp	r4, r5
 800b16c:	d101      	bne.n	800b172 <__sfputs_r+0x12>
 800b16e:	2000      	movs	r0, #0
 800b170:	e007      	b.n	800b182 <__sfputs_r+0x22>
 800b172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b176:	463a      	mov	r2, r7
 800b178:	4630      	mov	r0, r6
 800b17a:	f7ff ffda 	bl	800b132 <__sfputc_r>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d1f3      	bne.n	800b16a <__sfputs_r+0xa>
 800b182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b184 <_vfiprintf_r>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	460d      	mov	r5, r1
 800b18a:	b09d      	sub	sp, #116	@ 0x74
 800b18c:	4614      	mov	r4, r2
 800b18e:	4698      	mov	r8, r3
 800b190:	4606      	mov	r6, r0
 800b192:	b118      	cbz	r0, 800b19c <_vfiprintf_r+0x18>
 800b194:	6a03      	ldr	r3, [r0, #32]
 800b196:	b90b      	cbnz	r3, 800b19c <_vfiprintf_r+0x18>
 800b198:	f7fc fdf8 	bl	8007d8c <__sinit>
 800b19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7fc ff06 	bl	8007fba <__retarget_lock_acquire_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	071b      	lsls	r3, r3, #28
 800b1b2:	d501      	bpl.n	800b1b8 <_vfiprintf_r+0x34>
 800b1b4:	692b      	ldr	r3, [r5, #16]
 800b1b6:	b99b      	cbnz	r3, 800b1e0 <_vfiprintf_r+0x5c>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 f938 	bl	800b430 <__swsetup_r>
 800b1c0:	b170      	cbz	r0, 800b1e0 <_vfiprintf_r+0x5c>
 800b1c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c4:	07dc      	lsls	r4, r3, #31
 800b1c6:	d504      	bpl.n	800b1d2 <_vfiprintf_r+0x4e>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b01d      	add	sp, #116	@ 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	0598      	lsls	r0, r3, #22
 800b1d6:	d4f7      	bmi.n	800b1c8 <_vfiprintf_r+0x44>
 800b1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1da:	f7fc feef 	bl	8007fbc <__retarget_lock_release_recursive>
 800b1de:	e7f3      	b.n	800b1c8 <_vfiprintf_r+0x44>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ee:	2330      	movs	r3, #48	@ 0x30
 800b1f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a0 <_vfiprintf_r+0x21c>
 800b1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1f8:	f04f 0901 	mov.w	r9, #1
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	469a      	mov	sl, r3
 800b200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b204:	b10a      	cbz	r2, 800b20a <_vfiprintf_r+0x86>
 800b206:	2a25      	cmp	r2, #37	@ 0x25
 800b208:	d1f9      	bne.n	800b1fe <_vfiprintf_r+0x7a>
 800b20a:	ebba 0b04 	subs.w	fp, sl, r4
 800b20e:	d00b      	beq.n	800b228 <_vfiprintf_r+0xa4>
 800b210:	465b      	mov	r3, fp
 800b212:	4622      	mov	r2, r4
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffa2 	bl	800b160 <__sfputs_r>
 800b21c:	3001      	adds	r0, #1
 800b21e:	f000 80a7 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b224:	445a      	add	r2, fp
 800b226:	9209      	str	r2, [sp, #36]	@ 0x24
 800b228:	f89a 3000 	ldrb.w	r3, [sl]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 809f 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b232:	2300      	movs	r3, #0
 800b234:	f04f 32ff 	mov.w	r2, #4294967295
 800b238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23c:	f10a 0a01 	add.w	sl, sl, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b248:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24a:	4654      	mov	r4, sl
 800b24c:	2205      	movs	r2, #5
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4853      	ldr	r0, [pc, #332]	@ (800b3a0 <_vfiprintf_r+0x21c>)
 800b254:	f7f4 ffec 	bl	8000230 <memchr>
 800b258:	9a04      	ldr	r2, [sp, #16]
 800b25a:	b9d8      	cbnz	r0, 800b294 <_vfiprintf_r+0x110>
 800b25c:	06d1      	lsls	r1, r2, #27
 800b25e:	bf44      	itt	mi
 800b260:	2320      	movmi	r3, #32
 800b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b266:	0713      	lsls	r3, r2, #28
 800b268:	bf44      	itt	mi
 800b26a:	232b      	movmi	r3, #43	@ 0x2b
 800b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b270:	f89a 3000 	ldrb.w	r3, [sl]
 800b274:	2b2a      	cmp	r3, #42	@ 0x2a
 800b276:	d015      	beq.n	800b2a4 <_vfiprintf_r+0x120>
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	4654      	mov	r4, sl
 800b27c:	2000      	movs	r0, #0
 800b27e:	f04f 0c0a 	mov.w	ip, #10
 800b282:	4621      	mov	r1, r4
 800b284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b288:	3b30      	subs	r3, #48	@ 0x30
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d94b      	bls.n	800b326 <_vfiprintf_r+0x1a2>
 800b28e:	b1b0      	cbz	r0, 800b2be <_vfiprintf_r+0x13a>
 800b290:	9207      	str	r2, [sp, #28]
 800b292:	e014      	b.n	800b2be <_vfiprintf_r+0x13a>
 800b294:	eba0 0308 	sub.w	r3, r0, r8
 800b298:	fa09 f303 	lsl.w	r3, r9, r3
 800b29c:	4313      	orrs	r3, r2
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	46a2      	mov	sl, r4
 800b2a2:	e7d2      	b.n	800b24a <_vfiprintf_r+0xc6>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	1d19      	adds	r1, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	9103      	str	r1, [sp, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfbb      	ittet	lt
 800b2b0:	425b      	neglt	r3, r3
 800b2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b6:	9307      	strge	r3, [sp, #28]
 800b2b8:	9307      	strlt	r3, [sp, #28]
 800b2ba:	bfb8      	it	lt
 800b2bc:	9204      	strlt	r2, [sp, #16]
 800b2be:	7823      	ldrb	r3, [r4, #0]
 800b2c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c2:	d10a      	bne.n	800b2da <_vfiprintf_r+0x156>
 800b2c4:	7863      	ldrb	r3, [r4, #1]
 800b2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c8:	d132      	bne.n	800b330 <_vfiprintf_r+0x1ac>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	1d1a      	adds	r2, r3, #4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	9203      	str	r2, [sp, #12]
 800b2d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b0 <_vfiprintf_r+0x22c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ffa4 	bl	8000230 <memchr>
 800b2e8:	b138      	cbz	r0, 800b2fa <_vfiprintf_r+0x176>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	2240      	movs	r2, #64	@ 0x40
 800b2f2:	4082      	lsls	r2, r0
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	3401      	adds	r4, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fe:	4829      	ldr	r0, [pc, #164]	@ (800b3a4 <_vfiprintf_r+0x220>)
 800b300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b304:	2206      	movs	r2, #6
 800b306:	f7f4 ff93 	bl	8000230 <memchr>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d03f      	beq.n	800b38e <_vfiprintf_r+0x20a>
 800b30e:	4b26      	ldr	r3, [pc, #152]	@ (800b3a8 <_vfiprintf_r+0x224>)
 800b310:	bb1b      	cbnz	r3, 800b35a <_vfiprintf_r+0x1d6>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	3307      	adds	r3, #7
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	3308      	adds	r3, #8
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	443b      	add	r3, r7
 800b322:	9309      	str	r3, [sp, #36]	@ 0x24
 800b324:	e76a      	b.n	800b1fc <_vfiprintf_r+0x78>
 800b326:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32a:	460c      	mov	r4, r1
 800b32c:	2001      	movs	r0, #1
 800b32e:	e7a8      	b.n	800b282 <_vfiprintf_r+0xfe>
 800b330:	2300      	movs	r3, #0
 800b332:	3401      	adds	r4, #1
 800b334:	9305      	str	r3, [sp, #20]
 800b336:	4619      	mov	r1, r3
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4620      	mov	r0, r4
 800b33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b342:	3a30      	subs	r2, #48	@ 0x30
 800b344:	2a09      	cmp	r2, #9
 800b346:	d903      	bls.n	800b350 <_vfiprintf_r+0x1cc>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0c6      	beq.n	800b2da <_vfiprintf_r+0x156>
 800b34c:	9105      	str	r1, [sp, #20]
 800b34e:	e7c4      	b.n	800b2da <_vfiprintf_r+0x156>
 800b350:	fb0c 2101 	mla	r1, ip, r1, r2
 800b354:	4604      	mov	r4, r0
 800b356:	2301      	movs	r3, #1
 800b358:	e7f0      	b.n	800b33c <_vfiprintf_r+0x1b8>
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	462a      	mov	r2, r5
 800b360:	4b12      	ldr	r3, [pc, #72]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b362:	a904      	add	r1, sp, #16
 800b364:	4630      	mov	r0, r6
 800b366:	f7fb feb9 	bl	80070dc <_printf_float>
 800b36a:	4607      	mov	r7, r0
 800b36c:	1c78      	adds	r0, r7, #1
 800b36e:	d1d6      	bne.n	800b31e <_vfiprintf_r+0x19a>
 800b370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b37e:	f7fc fe1d 	bl	8007fbc <__retarget_lock_release_recursive>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	065b      	lsls	r3, r3, #25
 800b386:	f53f af1f 	bmi.w	800b1c8 <_vfiprintf_r+0x44>
 800b38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b38c:	e71e      	b.n	800b1cc <_vfiprintf_r+0x48>
 800b38e:	ab03      	add	r3, sp, #12
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	462a      	mov	r2, r5
 800b394:	4b05      	ldr	r3, [pc, #20]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b396:	a904      	add	r1, sp, #16
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fc f937 	bl	800760c <_printf_i>
 800b39e:	e7e4      	b.n	800b36a <_vfiprintf_r+0x1e6>
 800b3a0:	0800bb81 	.word	0x0800bb81
 800b3a4:	0800bb8b 	.word	0x0800bb8b
 800b3a8:	080070dd 	.word	0x080070dd
 800b3ac:	0800b161 	.word	0x0800b161
 800b3b0:	0800bb87 	.word	0x0800bb87

0800b3b4 <__swbuf_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	b118      	cbz	r0, 800b3c6 <__swbuf_r+0x12>
 800b3be:	6a03      	ldr	r3, [r0, #32]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <__swbuf_r+0x12>
 800b3c2:	f7fc fce3 	bl	8007d8c <__sinit>
 800b3c6:	69a3      	ldr	r3, [r4, #24]
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	071a      	lsls	r2, r3, #28
 800b3ce:	d501      	bpl.n	800b3d4 <__swbuf_r+0x20>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	b943      	cbnz	r3, 800b3e6 <__swbuf_r+0x32>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f82a 	bl	800b430 <__swsetup_r>
 800b3dc:	b118      	cbz	r0, 800b3e6 <__swbuf_r+0x32>
 800b3de:	f04f 37ff 	mov.w	r7, #4294967295
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	1a98      	subs	r0, r3, r2
 800b3ec:	6963      	ldr	r3, [r4, #20]
 800b3ee:	b2f6      	uxtb	r6, r6
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	4637      	mov	r7, r6
 800b3f4:	dc05      	bgt.n	800b402 <__swbuf_r+0x4e>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f7ff fa47 	bl	800a88c <_fflush_r>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d1ed      	bne.n	800b3de <__swbuf_r+0x2a>
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	3b01      	subs	r3, #1
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	6022      	str	r2, [r4, #0]
 800b40e:	701e      	strb	r6, [r3, #0]
 800b410:	6962      	ldr	r2, [r4, #20]
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	429a      	cmp	r2, r3
 800b416:	d004      	beq.n	800b422 <__swbuf_r+0x6e>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	07db      	lsls	r3, r3, #31
 800b41c:	d5e1      	bpl.n	800b3e2 <__swbuf_r+0x2e>
 800b41e:	2e0a      	cmp	r6, #10
 800b420:	d1df      	bne.n	800b3e2 <__swbuf_r+0x2e>
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f7ff fa31 	bl	800a88c <_fflush_r>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0d9      	beq.n	800b3e2 <__swbuf_r+0x2e>
 800b42e:	e7d6      	b.n	800b3de <__swbuf_r+0x2a>

0800b430 <__swsetup_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4b29      	ldr	r3, [pc, #164]	@ (800b4d8 <__swsetup_r+0xa8>)
 800b434:	4605      	mov	r5, r0
 800b436:	6818      	ldr	r0, [r3, #0]
 800b438:	460c      	mov	r4, r1
 800b43a:	b118      	cbz	r0, 800b444 <__swsetup_r+0x14>
 800b43c:	6a03      	ldr	r3, [r0, #32]
 800b43e:	b90b      	cbnz	r3, 800b444 <__swsetup_r+0x14>
 800b440:	f7fc fca4 	bl	8007d8c <__sinit>
 800b444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b448:	0719      	lsls	r1, r3, #28
 800b44a:	d422      	bmi.n	800b492 <__swsetup_r+0x62>
 800b44c:	06da      	lsls	r2, r3, #27
 800b44e:	d407      	bmi.n	800b460 <__swsetup_r+0x30>
 800b450:	2209      	movs	r2, #9
 800b452:	602a      	str	r2, [r5, #0]
 800b454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	e033      	b.n	800b4c8 <__swsetup_r+0x98>
 800b460:	0758      	lsls	r0, r3, #29
 800b462:	d512      	bpl.n	800b48a <__swsetup_r+0x5a>
 800b464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b466:	b141      	cbz	r1, 800b47a <__swsetup_r+0x4a>
 800b468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d002      	beq.n	800b476 <__swsetup_r+0x46>
 800b470:	4628      	mov	r0, r5
 800b472:	f7fd fbf9 	bl	8008c68 <_free_r>
 800b476:	2300      	movs	r3, #0
 800b478:	6363      	str	r3, [r4, #52]	@ 0x34
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	2300      	movs	r3, #0
 800b484:	6063      	str	r3, [r4, #4]
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f043 0308 	orr.w	r3, r3, #8
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	b94b      	cbnz	r3, 800b4aa <__swsetup_r+0x7a>
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a0:	d003      	beq.n	800b4aa <__swsetup_r+0x7a>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f883 	bl	800b5b0 <__smakebuf_r>
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	f013 0201 	ands.w	r2, r3, #1
 800b4b2:	d00a      	beq.n	800b4ca <__swsetup_r+0x9a>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	60a2      	str	r2, [r4, #8]
 800b4b8:	6962      	ldr	r2, [r4, #20]
 800b4ba:	4252      	negs	r2, r2
 800b4bc:	61a2      	str	r2, [r4, #24]
 800b4be:	6922      	ldr	r2, [r4, #16]
 800b4c0:	b942      	cbnz	r2, 800b4d4 <__swsetup_r+0xa4>
 800b4c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4c6:	d1c5      	bne.n	800b454 <__swsetup_r+0x24>
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	0799      	lsls	r1, r3, #30
 800b4cc:	bf58      	it	pl
 800b4ce:	6962      	ldrpl	r2, [r4, #20]
 800b4d0:	60a2      	str	r2, [r4, #8]
 800b4d2:	e7f4      	b.n	800b4be <__swsetup_r+0x8e>
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7f7      	b.n	800b4c8 <__swsetup_r+0x98>
 800b4d8:	200001a0 	.word	0x200001a0

0800b4dc <_raise_r>:
 800b4dc:	291f      	cmp	r1, #31
 800b4de:	b538      	push	{r3, r4, r5, lr}
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	d904      	bls.n	800b4f0 <_raise_r+0x14>
 800b4e6:	2316      	movs	r3, #22
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4f2:	b112      	cbz	r2, 800b4fa <_raise_r+0x1e>
 800b4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4f8:	b94b      	cbnz	r3, 800b50e <_raise_r+0x32>
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f830 	bl	800b560 <_getpid_r>
 800b500:	4622      	mov	r2, r4
 800b502:	4601      	mov	r1, r0
 800b504:	4628      	mov	r0, r5
 800b506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b50a:	f000 b817 	b.w	800b53c <_kill_r>
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d00a      	beq.n	800b528 <_raise_r+0x4c>
 800b512:	1c59      	adds	r1, r3, #1
 800b514:	d103      	bne.n	800b51e <_raise_r+0x42>
 800b516:	2316      	movs	r3, #22
 800b518:	6003      	str	r3, [r0, #0]
 800b51a:	2001      	movs	r0, #1
 800b51c:	e7e7      	b.n	800b4ee <_raise_r+0x12>
 800b51e:	2100      	movs	r1, #0
 800b520:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b524:	4620      	mov	r0, r4
 800b526:	4798      	blx	r3
 800b528:	2000      	movs	r0, #0
 800b52a:	e7e0      	b.n	800b4ee <_raise_r+0x12>

0800b52c <raise>:
 800b52c:	4b02      	ldr	r3, [pc, #8]	@ (800b538 <raise+0xc>)
 800b52e:	4601      	mov	r1, r0
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f7ff bfd3 	b.w	800b4dc <_raise_r>
 800b536:	bf00      	nop
 800b538:	200001a0 	.word	0x200001a0

0800b53c <_kill_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	@ (800b55c <_kill_r+0x20>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	4611      	mov	r1, r2
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f7f7 fcdf 	bl	8002f0c <_kill>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d102      	bne.n	800b558 <_kill_r+0x1c>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	b103      	cbz	r3, 800b558 <_kill_r+0x1c>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20000734 	.word	0x20000734

0800b560 <_getpid_r>:
 800b560:	f7f7 bccc 	b.w	8002efc <_getpid>

0800b564 <__swhatbuf_r>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	2900      	cmp	r1, #0
 800b56e:	b096      	sub	sp, #88	@ 0x58
 800b570:	4615      	mov	r5, r2
 800b572:	461e      	mov	r6, r3
 800b574:	da0d      	bge.n	800b592 <__swhatbuf_r+0x2e>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b57c:	f04f 0100 	mov.w	r1, #0
 800b580:	bf14      	ite	ne
 800b582:	2340      	movne	r3, #64	@ 0x40
 800b584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b588:	2000      	movs	r0, #0
 800b58a:	6031      	str	r1, [r6, #0]
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	b016      	add	sp, #88	@ 0x58
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	466a      	mov	r2, sp
 800b594:	f000 f848 	bl	800b628 <_fstat_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	dbec      	blt.n	800b576 <__swhatbuf_r+0x12>
 800b59c:	9901      	ldr	r1, [sp, #4]
 800b59e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5a6:	4259      	negs	r1, r3
 800b5a8:	4159      	adcs	r1, r3
 800b5aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ae:	e7eb      	b.n	800b588 <__swhatbuf_r+0x24>

0800b5b0 <__smakebuf_r>:
 800b5b0:	898b      	ldrh	r3, [r1, #12]
 800b5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b4:	079d      	lsls	r5, r3, #30
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	d507      	bpl.n	800b5cc <__smakebuf_r+0x1c>
 800b5bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	6163      	str	r3, [r4, #20]
 800b5c8:	b003      	add	sp, #12
 800b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5cc:	ab01      	add	r3, sp, #4
 800b5ce:	466a      	mov	r2, sp
 800b5d0:	f7ff ffc8 	bl	800b564 <__swhatbuf_r>
 800b5d4:	9f00      	ldr	r7, [sp, #0]
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7fd fbb8 	bl	8008d50 <_malloc_r>
 800b5e0:	b948      	cbnz	r0, 800b5f6 <__smakebuf_r+0x46>
 800b5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e6:	059a      	lsls	r2, r3, #22
 800b5e8:	d4ee      	bmi.n	800b5c8 <__smakebuf_r+0x18>
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0302 	orr.w	r3, r3, #2
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	e7e2      	b.n	800b5bc <__smakebuf_r+0xc>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	6020      	str	r0, [r4, #0]
 800b5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b606:	b15b      	cbz	r3, 800b620 <__smakebuf_r+0x70>
 800b608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 f81d 	bl	800b64c <_isatty_r>
 800b612:	b128      	cbz	r0, 800b620 <__smakebuf_r+0x70>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	431d      	orrs	r5, r3
 800b624:	81a5      	strh	r5, [r4, #12]
 800b626:	e7cf      	b.n	800b5c8 <__smakebuf_r+0x18>

0800b628 <_fstat_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d07      	ldr	r5, [pc, #28]	@ (800b648 <_fstat_r+0x20>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	4611      	mov	r1, r2
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	f7f7 fcc9 	bl	8002fcc <_fstat>
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	d102      	bne.n	800b644 <_fstat_r+0x1c>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b103      	cbz	r3, 800b644 <_fstat_r+0x1c>
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	bd38      	pop	{r3, r4, r5, pc}
 800b646:	bf00      	nop
 800b648:	20000734 	.word	0x20000734

0800b64c <_isatty_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d06      	ldr	r5, [pc, #24]	@ (800b668 <_isatty_r+0x1c>)
 800b650:	2300      	movs	r3, #0
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	f7f7 fcc8 	bl	8002fec <_isatty>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_isatty_r+0x1a>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_isatty_r+0x1a>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000734 	.word	0x20000734

0800b66c <_init>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr

0800b678 <_fini>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr
