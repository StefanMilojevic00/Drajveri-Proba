
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080099f8  080099f8  0000a9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e50  08009e50  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009e50  08009e50  0000ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e58  08009e58  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e58  08009e58  0000ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e5c  08009e5c  0000ae5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009e60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001dc  0800a03c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800a03c  0000b494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bb5  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  0001ddc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00020ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  00021c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298da  00000000  00000000  000228bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ab3  00000000  00000000  0004c195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbeae  00000000  00000000  00062c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015eaf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  0015eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001642f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080099dc 	.word	0x080099dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080099dc 	.word	0x080099dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <AlarmInit>:
#include "Buzzer.h"

static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 8001028:	2204      	movs	r2, #4
 800102a:	4903      	ldr	r1, [pc, #12]	@ (8001038 <AlarmInit+0x14>)
 800102c:	4803      	ldr	r0, [pc, #12]	@ (800103c <AlarmInit+0x18>)
 800102e:	f000 f81b 	bl	8001068 <Buzzer_init>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000
 800103c:	200001f8 	.word	0x200001f8

08001040 <AlarmON>:

void AlarmON()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 8001044:	2101      	movs	r1, #1
 8001046:	4802      	ldr	r0, [pc, #8]	@ (8001050 <AlarmON+0x10>)
 8001048:	f000 f821 	bl	800108e <BuzzerWritePin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f8 	.word	0x200001f8

08001054 <AlarmOFF>:

void AlarmOFF()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 8001058:	2100      	movs	r1, #0
 800105a:	4802      	ldr	r0, [pc, #8]	@ (8001064 <AlarmOFF+0x10>)
 800105c:	f000 f817 	bl	800108e <BuzzerWritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001f8 	.word	0x200001f8

08001068 <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	809a      	strh	r2, [r3, #4]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	889b      	ldrh	r3, [r3, #4]
 80010a2:	78fa      	ldrb	r2, [r7, #3]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 f905 	bl	80032b4 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 80010b8:	f000 f810 	bl	80010dc <MQ9_GetRawValue>
 80010bc:	4603      	mov	r3, r0
 80010be:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f822 	bl	800110c <MQ9_ConverRaw2Real>
 80010c8:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	ee07 3a90 	vmov	s15, r3
}
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue(/*MQ9_t* MQ9*/)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80010e2:	4809      	ldr	r0, [pc, #36]	@ (8001108 <MQ9_GetRawValue+0x2c>)
 80010e4:	f001 f988 	bl	80023f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	4806      	ldr	r0, [pc, #24]	@ (8001108 <MQ9_GetRawValue+0x2c>)
 80010ee:	f001 fa51 	bl	8002594 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MQ9_GetRawValue+0x2c>)
 80010f4:	f001 fad9 	bl	80026aa <HAL_ADC_GetValue>
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
	return raw;
 80010fc:	88fb      	ldrh	r3, [r7, #6]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000200 	.word	0x20000200

0800110c <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MQ9_ConverRaw2Real+0x48>)
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MQ9_ConverRaw2Real+0x4c>)
 800111e:	ed93 7a00 	vldr	s14, [r3]
 8001122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001126:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001134:	ed97 7a03 	vldr	s14, [r7, #12]
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	ee07 3a90 	vmov	s15, r3
}
 8001146:	eeb0 0a67 	vmov.f32	s0, s15
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000

0800115c <UART_TransmitString>:
#include "UART.h"

extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff f8a3 	bl	80002b0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <UART_TransmitString+0x28>)
 8001176:	f003 fc45 	bl	8004a04 <HAL_UART_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200002b8 	.word	0x200002b8

08001188 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	@ 0x40
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff f9f8 	bl	8000588 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	f107 000c 	add.w	r0, r7, #12
 80011a0:	490a      	ldr	r1, [pc, #40]	@ (80011cc <UART_TransmitFloat+0x44>)
 80011a2:	f004 ffe3 	bl	800616c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f880 	bl	80002b0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f107 010c 	add.w	r1, r7, #12
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <UART_TransmitFloat+0x48>)
 80011be:	f003 fc21 	bl	8004a04 <HAL_UART_Transmit>
}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	@ 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080099f8 	.word	0x080099f8
 80011d0:	200002b8 	.word	0x200002b8

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011da:	f001 f848 	bl	800226e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011de:	f000 f839 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e2:	f000 f96f 	bl	80014c4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80011e6:	f000 f8a5 	bl	8001334 <MX_ADC3_Init>
  MX_CRC_Init();
 80011ea:	f000 f8f5 	bl	80013d8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80011ee:	f000 f939 	bl	8001464 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80011f2:	f000 f913 	bl	800141c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  AlarmInit();
 80011f6:	f7ff ff15 	bl	8001024 <AlarmInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PPM = ReadGasSensor();
 80011fa:	f7ff ff5a 	bl	80010b2 <ReadGasSensor>
 80011fe:	ed87 0a03 	vstr	s0, [r7, #12]
	  char msg1[] = "PPM = ";
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <main+0x78>)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120a:	6018      	str	r0, [r3, #0]
 800120c:	3304      	adds	r3, #4
 800120e:	8019      	strh	r1, [r3, #0]
 8001210:	3302      	adds	r3, #2
 8001212:	0c0a      	lsrs	r2, r1, #16
 8001214:	701a      	strb	r2, [r3, #0]
	  UART_TransmitString(msg1);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff9f 	bl	800115c <UART_TransmitString>
	  UART_TransmitFloat(PPM);
 800121e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001222:	f7ff ffb1 	bl	8001188 <UART_TransmitFloat>
	  if(PPM > 2100)
 8001226:	edd7 7a03 	vldr	s15, [r7, #12]
 800122a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001250 <main+0x7c>
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dd02      	ble.n	800123e <main+0x6a>
	  {
		  AlarmON();
 8001238:	f7ff ff02 	bl	8001040 <AlarmON>
 800123c:	e001      	b.n	8001242 <main+0x6e>
	  }
	  else
	  {
		  AlarmOFF();
 800123e:	f7ff ff09 	bl	8001054 <AlarmOFF>
	  }
	  HAL_Delay(1000); //Simulating something else
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f001 f86f 	bl	8002328 <HAL_Delay>
  {
 800124a:	e7d6      	b.n	80011fa <main+0x26>
 800124c:	08009a00 	.word	0x08009a00
 8001250:	45034000 	.word	0x45034000

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	@ 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	@ 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 ffe5 	bl	8006232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001278:	f002 f836 	bl	80032e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <SystemClock_Config+0xd8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <SystemClock_Config+0xd8>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SystemClock_Config+0xd8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <SystemClock_Config+0xdc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a25      	ldr	r2, [pc, #148]	@ (8001330 <SystemClock_Config+0xdc>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <SystemClock_Config+0xdc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012c0:	2319      	movs	r3, #25
 80012c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80012c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012ce:	2309      	movs	r3, #9
 80012d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 f866 	bl	80033a8 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012e2:	f000 fd39 	bl	8001d58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012e6:	f002 f80f 	bl	8003308 <HAL_PWREx_EnableOverDrive>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012f0:	f000 fd32 	bl	8001d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001300:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2106      	movs	r1, #6
 8001312:	4618      	mov	r0, r3
 8001314:	f002 faec 	bl	80038f0 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800131e:	f000 fd1b 	bl	8001d58 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	@ 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <MX_ADC3_Init+0x9c>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_ADC3_Init+0x98>)
 800134e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001352:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_ADC3_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <MX_ADC3_Init+0xa0>)
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_ADC3_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001382:	2201      	movs	r2, #1
 8001384:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_ADC3_Init+0x98>)
 8001396:	f000 ffeb 	bl	8002370 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fcda 	bl	8001d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_ADC3_Init+0x98>)
 80013b6:	f001 f985 	bl	80026c4 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fcca 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000200 	.word	0x20000200
 80013d0:	40012200 	.word	0x40012200
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <MX_CRC_Init+0x40>)
 80013e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_CRC_Init+0x3c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_CRC_Init+0x3c>)
 8001402:	f001 fcc1 	bl	8002d88 <HAL_CRC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800140c:	f000 fca4 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000248 	.word	0x20000248
 8001418:	40023000 	.word	0x40023000

0800141c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_TIM11_Init+0x40>)
 8001422:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <MX_TIM11_Init+0x44>)
 8001424:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <MX_TIM11_Init+0x40>)
 8001428:	f640 026f 	movw	r2, #2159	@ 0x86f
 800142c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_TIM11_Init+0x40>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_TIM11_Init+0x40>)
 8001436:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800143a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b07      	ldr	r3, [pc, #28]	@ (800145c <MX_TIM11_Init+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <MX_TIM11_Init+0x40>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	@ (800145c <MX_TIM11_Init+0x40>)
 800144a:	f003 f827 	bl	800449c <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001454:	f000 fc80 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000026c 	.word	0x2000026c
 8001460:	40014800 	.word	0x40014800

08001464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <MX_USART1_UART_Init+0x5c>)
 800146c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_USART1_UART_Init+0x58>)
 80014a8:	f003 fa5e 	bl	8004968 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014b2:	f000 fc51 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002b8 	.word	0x200002b8
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b090      	sub	sp, #64	@ 0x40
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014da:	4bae      	ldr	r3, [pc, #696]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4aad      	ldr	r2, [pc, #692]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4bab      	ldr	r3, [pc, #684]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f2:	4ba8      	ldr	r3, [pc, #672]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4aa7      	ldr	r2, [pc, #668]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80014f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4ba2      	ldr	r3, [pc, #648]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4aa1      	ldr	r2, [pc, #644]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b9f      	ldr	r3, [pc, #636]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	623b      	str	r3, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	4b9c      	ldr	r3, [pc, #624]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a9b      	ldr	r2, [pc, #620]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b99      	ldr	r3, [pc, #612]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b96      	ldr	r3, [pc, #600]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a95      	ldr	r2, [pc, #596]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b93      	ldr	r3, [pc, #588]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b90      	ldr	r3, [pc, #576]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a8f      	ldr	r2, [pc, #572]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b8d      	ldr	r3, [pc, #564]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800156a:	4b8a      	ldr	r3, [pc, #552]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a89      	ldr	r2, [pc, #548]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b87      	ldr	r3, [pc, #540]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001582:	4b84      	ldr	r3, [pc, #528]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a83      	ldr	r2, [pc, #524]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b81      	ldr	r3, [pc, #516]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800159a:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a7d      	ldr	r2, [pc, #500]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b78      	ldr	r3, [pc, #480]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a77      	ldr	r2, [pc, #476]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015b8:	f043 0320 	orr.w	r3, r3, #32
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b75      	ldr	r3, [pc, #468]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	4b72      	ldr	r3, [pc, #456]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a71      	ldr	r2, [pc, #452]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <MX_GPIO_Init+0x2d0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	486c      	ldr	r0, [pc, #432]	@ (8001798 <MX_GPIO_Init+0x2d4>)
 80015e8:	f001 fe64 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	210c      	movs	r1, #12
 80015f0:	486a      	ldr	r0, [pc, #424]	@ (800179c <MX_GPIO_Init+0x2d8>)
 80015f2:	f001 fe5f 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2108      	movs	r1, #8
 80015fa:	4869      	ldr	r0, [pc, #420]	@ (80017a0 <MX_GPIO_Init+0x2dc>)
 80015fc:	f001 fe5a 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001606:	4865      	ldr	r0, [pc, #404]	@ (800179c <MX_GPIO_Init+0x2d8>)
 8001608:	f001 fe54 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001612:	4864      	ldr	r0, [pc, #400]	@ (80017a4 <MX_GPIO_Init+0x2e0>)
 8001614:	f001 fe4e 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	21c8      	movs	r1, #200	@ 0xc8
 800161c:	4862      	ldr	r0, [pc, #392]	@ (80017a8 <MX_GPIO_Init+0x2e4>)
 800161e:	f001 fe49 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001622:	2310      	movs	r3, #16
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001632:	230e      	movs	r3, #14
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	485b      	ldr	r0, [pc, #364]	@ (80017ac <MX_GPIO_Init+0x2e8>)
 800163e:	f001 fc8d 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001642:	2308      	movs	r3, #8
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	4855      	ldr	r0, [pc, #340]	@ (80017ac <MX_GPIO_Init+0x2e8>)
 8001656:	f001 fc81 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800165a:	2304      	movs	r3, #4
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800166a:	2309      	movs	r3, #9
 800166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001672:	4619      	mov	r1, r3
 8001674:	484d      	ldr	r0, [pc, #308]	@ (80017ac <MX_GPIO_Init+0x2e8>)
 8001676:	f001 fc71 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800167a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168c:	230b      	movs	r3, #11
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001694:	4619      	mov	r1, r3
 8001696:	4844      	ldr	r0, [pc, #272]	@ (80017a8 <MX_GPIO_Init+0x2e4>)
 8001698:	f001 fc60 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800169c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ae:	230c      	movs	r3, #12
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b6:	4619      	mov	r1, r3
 80016b8:	483c      	ldr	r0, [pc, #240]	@ (80017ac <MX_GPIO_Init+0x2e8>)
 80016ba:	f001 fc4f 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d0:	2304      	movs	r3, #4
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d8:	4619      	mov	r1, r3
 80016da:	4835      	ldr	r0, [pc, #212]	@ (80017b0 <MX_GPIO_Init+0x2ec>)
 80016dc:	f001 fc3e 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80016e0:	2310      	movs	r3, #16
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f8:	4619      	mov	r1, r3
 80016fa:	482d      	ldr	r0, [pc, #180]	@ (80017b0 <MX_GPIO_Init+0x2ec>)
 80016fc:	f001 fc2e 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001710:	2308      	movs	r3, #8
 8001712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001718:	4619      	mov	r1, r3
 800171a:	481f      	ldr	r0, [pc, #124]	@ (8001798 <MX_GPIO_Init+0x2d4>)
 800171c:	f001 fc1e 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001720:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001732:	230c      	movs	r3, #12
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <MX_GPIO_Init+0x2f0>)
 800173e:	f001 fc0d 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001754:	2301      	movs	r3, #1
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <MX_GPIO_Init+0x2f4>)
 8001760:	f001 fbfc 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001764:	2360      	movs	r3, #96	@ 0x60
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001774:	230d      	movs	r3, #13
 8001776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	480b      	ldr	r0, [pc, #44]	@ (80017ac <MX_GPIO_Init+0x2e8>)
 8001780:	f001 fbec 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001784:	2340      	movs	r3, #64	@ 0x40
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001790:	e014      	b.n	80017bc <MX_GPIO_Init+0x2f8>
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40020c00 	.word	0x40020c00
 800179c:	40022000 	.word	0x40022000
 80017a0:	40022800 	.word	0x40022800
 80017a4:	40021c00 	.word	0x40021c00
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017c0:	230a      	movs	r3, #10
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	48bc      	ldr	r0, [pc, #752]	@ (8001abc <MX_GPIO_Init+0x5f8>)
 80017cc:	f001 fbc6 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80017d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e2:	230c      	movs	r3, #12
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	48b4      	ldr	r0, [pc, #720]	@ (8001ac0 <MX_GPIO_Init+0x5fc>)
 80017ee:	f001 fbb5 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80017f2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001804:	230e      	movs	r3, #14
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	48ad      	ldr	r0, [pc, #692]	@ (8001ac4 <MX_GPIO_Init+0x600>)
 8001810:	f001 fba4 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	48a6      	ldr	r0, [pc, #664]	@ (8001ac4 <MX_GPIO_Init+0x600>)
 800182a:	f001 fb97 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800182e:	2340      	movs	r3, #64	@ 0x40
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001832:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	48a1      	ldr	r0, [pc, #644]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001844:	f001 fb8a 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001848:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800185a:	230c      	movs	r3, #12
 800185c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4898      	ldr	r0, [pc, #608]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001866:	f001 fb79 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800186a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800187c:	230a      	movs	r3, #10
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4891      	ldr	r0, [pc, #580]	@ (8001acc <MX_GPIO_Init+0x608>)
 8001888:	f001 fb68 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800188c:	23f0      	movs	r3, #240	@ 0xf0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800189c:	230a      	movs	r3, #10
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	488a      	ldr	r0, [pc, #552]	@ (8001ad0 <MX_GPIO_Init+0x60c>)
 80018a8:	f001 fb58 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80018ac:	23f7      	movs	r3, #247	@ 0xf7
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018bc:	230e      	movs	r3, #14
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4883      	ldr	r0, [pc, #524]	@ (8001ad4 <MX_GPIO_Init+0x610>)
 80018c8:	f001 fb48 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80018cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018de:	2309      	movs	r3, #9
 80018e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	4875      	ldr	r0, [pc, #468]	@ (8001ac0 <MX_GPIO_Init+0x5fc>)
 80018ea:	f001 fb37 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80018ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001900:	230a      	movs	r3, #10
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	486d      	ldr	r0, [pc, #436]	@ (8001ac0 <MX_GPIO_Init+0x5fc>)
 800190c:	f001 fb26 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001910:	2320      	movs	r3, #32
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4868      	ldr	r0, [pc, #416]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001928:	f001 fb18 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800192c:	2308      	movs	r3, #8
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800193c:	230d      	movs	r3, #13
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4860      	ldr	r0, [pc, #384]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001948:	f001 fb08 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin;
 800194c:	230c      	movs	r3, #12
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001954:	2302      	movs	r3, #2
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	485b      	ldr	r0, [pc, #364]	@ (8001ad0 <MX_GPIO_Init+0x60c>)
 8001964:	f001 fafa 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197a:	4619      	mov	r1, r3
 800197c:	4856      	ldr	r0, [pc, #344]	@ (8001ad8 <MX_GPIO_Init+0x614>)
 800197e:	f001 faed 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001982:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001994:	230c      	movs	r3, #12
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199c:	4619      	mov	r1, r3
 800199e:	484f      	ldr	r0, [pc, #316]	@ (8001adc <MX_GPIO_Init+0x618>)
 80019a0:	f001 fadc 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019a4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019b6:	230e      	movs	r3, #14
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019be:	4619      	mov	r1, r3
 80019c0:	4843      	ldr	r0, [pc, #268]	@ (8001ad0 <MX_GPIO_Init+0x60c>)
 80019c2:	f001 facb 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019c6:	2308      	movs	r3, #8
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	483d      	ldr	r0, [pc, #244]	@ (8001ad4 <MX_GPIO_Init+0x610>)
 80019de:	f001 fabd 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80019e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019f4:	230d      	movs	r3, #13
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4830      	ldr	r0, [pc, #192]	@ (8001ac0 <MX_GPIO_Init+0x5fc>)
 8001a00:	f001 faac 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a04:	2310      	movs	r3, #16
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	482c      	ldr	r0, [pc, #176]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001a18:	f001 faa0 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4824      	ldr	r0, [pc, #144]	@ (8001ac8 <MX_GPIO_Init+0x604>)
 8001a38:	f001 fa90 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a3c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4823      	ldr	r0, [pc, #140]	@ (8001ae0 <MX_GPIO_Init+0x61c>)
 8001a52:	f001 fa83 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001a56:	2302      	movs	r3, #2
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a66:	2305      	movs	r3, #5
 8001a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4817      	ldr	r0, [pc, #92]	@ (8001ad0 <MX_GPIO_Init+0x60c>)
 8001a72:	f001 fa73 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <MX_GPIO_Init+0x60c>)
 8001a90:	f001 fa64 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <MX_GPIO_Init+0x61c>)
 8001aae:	f001 fa55 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ab2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e013      	b.n	8001ae4 <MX_GPIO_Init+0x620>
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40022400 	.word	0x40022400
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40022800 	.word	0x40022800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aee:	230d      	movs	r3, #13
 8001af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	4890      	ldr	r0, [pc, #576]	@ (8001d3c <MX_GPIO_Init+0x878>)
 8001afa:	f001 fa2f 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001afe:	2301      	movs	r3, #1
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b16:	4619      	mov	r1, r3
 8001b18:	4889      	ldr	r0, [pc, #548]	@ (8001d40 <MX_GPIO_Init+0x87c>)
 8001b1a:	f001 fa1f 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 8001b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b30:	4619      	mov	r1, r3
 8001b32:	4883      	ldr	r0, [pc, #524]	@ (8001d40 <MX_GPIO_Init+0x87c>)
 8001b34:	f001 fa12 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	487b      	ldr	r0, [pc, #492]	@ (8001d44 <MX_GPIO_Init+0x880>)
 8001b56:	f001 fa01 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4873      	ldr	r0, [pc, #460]	@ (8001d40 <MX_GPIO_Init+0x87c>)
 8001b72:	f001 f9f3 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001b76:	23c0      	movs	r3, #192	@ 0xc0
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b86:	2308      	movs	r3, #8
 8001b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	486d      	ldr	r0, [pc, #436]	@ (8001d48 <MX_GPIO_Init+0x884>)
 8001b92:	f001 f9e3 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001b96:	2328      	movs	r3, #40	@ 0x28
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4862      	ldr	r0, [pc, #392]	@ (8001d3c <MX_GPIO_Init+0x878>)
 8001bb2:	f001 f9d3 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bb6:	23c8      	movs	r3, #200	@ 0xc8
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	485f      	ldr	r0, [pc, #380]	@ (8001d4c <MX_GPIO_Init+0x888>)
 8001bce:	f001 f9c5 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be2:	230c      	movs	r3, #12
 8001be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	4856      	ldr	r0, [pc, #344]	@ (8001d48 <MX_GPIO_Init+0x884>)
 8001bee:	f001 f9b5 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bf2:	2332      	movs	r3, #50	@ 0x32
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c02:	230b      	movs	r3, #11
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	484e      	ldr	r0, [pc, #312]	@ (8001d48 <MX_GPIO_Init+0x884>)
 8001c0e:	f001 f9a5 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c12:	2304      	movs	r3, #4
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c22:	2309      	movs	r3, #9
 8001c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4848      	ldr	r0, [pc, #288]	@ (8001d50 <MX_GPIO_Init+0x88c>)
 8001c2e:	f001 f995 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c32:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c44:	2309      	movs	r3, #9
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4841      	ldr	r0, [pc, #260]	@ (8001d54 <MX_GPIO_Init+0x890>)
 8001c50:	f001 f984 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c54:	2304      	movs	r3, #4
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4839      	ldr	r0, [pc, #228]	@ (8001d4c <MX_GPIO_Init+0x888>)
 8001c68:	f001 f978 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c6c:	2386      	movs	r3, #134	@ 0x86
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7c:	230b      	movs	r3, #11
 8001c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	482f      	ldr	r0, [pc, #188]	@ (8001d44 <MX_GPIO_Init+0x880>)
 8001c88:	f001 f968 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001c8c:	2350      	movs	r3, #80	@ 0x50
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c9c:	230d      	movs	r3, #13
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4827      	ldr	r0, [pc, #156]	@ (8001d44 <MX_GPIO_Init+0x880>)
 8001ca8:	f001 f958 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481c      	ldr	r0, [pc, #112]	@ (8001d3c <MX_GPIO_Init+0x878>)
 8001cca:	f001 f947 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8001cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4819      	ldr	r0, [pc, #100]	@ (8001d50 <MX_GPIO_Init+0x88c>)
 8001cec:	f001 f936 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001cf0:	2340      	movs	r3, #64	@ 0x40
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d00:	2309      	movs	r3, #9
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <MX_GPIO_Init+0x878>)
 8001d0c:	f001 f926 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d10:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d22:	2305      	movs	r3, #5
 8001d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <MX_GPIO_Init+0x88c>)
 8001d2e:	f001 f915 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d32:	bf00      	nop
 8001d34:	3740      	adds	r7, #64	@ 0x40
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020c00 	.word	0x40020c00

08001d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <Error_Handler+0x8>

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	f06f 0001 	mvn.w	r0, #1
 8001da2:	f000 ffba 	bl	8002d1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_ADC_MspInit+0xa4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d13c      	bne.n	8001e50 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a20      	ldr	r2, [pc, #128]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_ADC_MspInit+0xa8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001e1e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001e22:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e24:	2303      	movs	r3, #3
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <HAL_ADC_MspInit+0xac>)
 8001e34:	f001 f892 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	@ (8001e64 <HAL_ADC_MspInit+0xb0>)
 8001e4c:	f001 f886 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012200 	.word	0x40012200
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40020000 	.word	0x40020000

08001e68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_CRC_MspInit+0x38>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10b      	bne.n	8001e92 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_CRC_MspInit+0x3c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_CRC_MspInit+0x3c>)
 8001e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_CRC_MspInit+0x3c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023000 	.word	0x40023000
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <HAL_TIM_Base_MspInit+0x44>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d113      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	201a      	movs	r0, #26
 8001ed8:	f000 ff1f 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001edc:	201a      	movs	r0, #26
 8001ede:	f000 ff38 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40014800 	.word	0x40014800
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	2284      	movs	r2, #132	@ 0x84
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 f98c 	bl	8006232 <memset>
  if(huart->Instance==USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <HAL_UART_MspInit+0xf4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d15c      	bne.n	8001fde <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f24:	2340      	movs	r3, #64	@ 0x40
 8001f26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fec3 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f3c:	f7ff ff0c 	bl	8001d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f44:	4a29      	ldr	r2, [pc, #164]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	4a1d      	ldr	r2, [pc, #116]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_UART_MspInit+0xf8>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001faa:	4619      	mov	r1, r3
 8001fac:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <HAL_UART_MspInit+0xfc>)
 8001fae:	f000 ffd5 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <HAL_UART_MspInit+0x100>)
 8001fda:	f000 ffbf 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	37b0      	adds	r7, #176	@ 0xb0
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204e:	f000 f94b 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800205e:	f002 fa74 	bl	800454a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000026c 	.word	0x2000026c

0800206c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_kill>:

int _kill(int pid, int sig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002086:	f004 f927 	bl	80062d8 <__errno>
 800208a:	4603      	mov	r3, r0
 800208c:	2216      	movs	r2, #22
 800208e:	601a      	str	r2, [r3, #0]
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_exit>:

void _exit (int status)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe7 	bl	800207c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ae:	bf00      	nop
 80020b0:	e7fd      	b.n	80020ae <_exit+0x12>

080020b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e00a      	b.n	80020da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c4:	f3af 8000 	nop.w
 80020c8:	4601      	mov	r1, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	b2ca      	uxtb	r2, r1
 80020d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbf0      	blt.n	80020c4 <_read+0x12>
  }

  return len;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e009      	b.n	8002112 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	dbf1      	blt.n	80020fe <_write+0x12>
  }
  return len;
 800211a:	687b      	ldr	r3, [r7, #4]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_close>:

int _close(int file)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214c:	605a      	str	r2, [r3, #4]
  return 0;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_isatty>:

int _isatty(int file)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f004 f88c 	bl	80062d8 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20050000 	.word	0x20050000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	20000340 	.word	0x20000340
 80021f4:	20000498 	.word	0x20000498

080021f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800221c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002220:	480d      	ldr	r0, [pc, #52]	@ (8002258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002222:	490e      	ldr	r1, [pc, #56]	@ (800225c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002224:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002238:	4c0b      	ldr	r4, [pc, #44]	@ (8002268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002246:	f7ff ffd7 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224a:	f004 f84b 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224e:	f7fe ffc1 	bl	80011d4 <main>
  bx  lr    
 8002252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002254:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002260:	08009e60 	.word	0x08009e60
  ldr r2, =_sbss
 8002264:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002268:	20000494 	.word	0x20000494

0800226c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC_IRQHandler>

0800226e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002272:	2003      	movs	r0, #3
 8002274:	f000 fd46 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002278:	2000      	movs	r0, #0
 800227a:	f000 f805 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227e:	f7ff fd71 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fd61 	bl	8002d6e <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 fd29 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000010 	.word	0x20000010
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000010 	.word	0x20000010
 800230c:	20000344 	.word	0x20000344

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000344 	.word	0x20000344

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e031      	b.n	80023ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fd10 	bl	8001db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_ADC_Init+0x84>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fad6 	bl	8002970 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023da:	e001      	b.n	80023e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	ffffeefd 	.word	0xffffeefd

080023f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Start+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e0ad      	b.n	800256e <HAL_ADC_Start+0x176>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d018      	beq.n	800245a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002438:	4b50      	ldr	r3, [pc, #320]	@ (800257c <HAL_ADC_Start+0x184>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a50      	ldr	r2, [pc, #320]	@ (8002580 <HAL_ADC_Start+0x188>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9a      	lsrs	r2, r3, #18
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800244c:	e002      	b.n	8002454 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b01      	subs	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d175      	bne.n	8002554 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246c:	4b45      	ldr	r3, [pc, #276]	@ (8002584 <HAL_ADC_Start+0x18c>)
 800246e:	4013      	ands	r3, r2
 8002470:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800248e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a8:	f023 0206 	bic.w	r2, r3, #6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80024ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <HAL_ADC_Start+0x190>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d143      	bne.n	800256c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	e03a      	b.n	800256c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_ADC_Start+0x194>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10e      	bne.n	800251e <HAL_ADC_Start+0x126>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800251c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800251e:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <HAL_ADC_Start+0x190>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d120      	bne.n	800256c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_ADC_Start+0x198>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d11b      	bne.n	800256c <HAL_ADC_Start+0x174>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e00b      	b.n	800256c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008
 8002580:	431bde83 	.word	0x431bde83
 8002584:	fffff8fe 	.word	0xfffff8fe
 8002588:	40012300 	.word	0x40012300
 800258c:	40012000 	.word	0x40012000
 8002590:	40012200 	.word	0x40012200

08002594 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d113      	bne.n	80025da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c0:	d10b      	bne.n	80025da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e063      	b.n	80026a2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025da:	f7ff fe99 	bl	8002310 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e0:	e021      	b.n	8002626 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d01d      	beq.n	8002626 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_ADC_PollForConversion+0x6c>
 80025f0:	f7ff fe8e 	bl	8002310 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d212      	bcs.n	8002626 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d00b      	beq.n	8002626 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e03d      	b.n	80026a2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d1d6      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0212 	mvn.w	r2, #18
 800263c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d123      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11f      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e136      	b.n	800294e <HAL_ADC_ConfigChannel+0x28a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d93a      	bls.n	8002766 <HAL_ADC_ConfigChannel+0xa2>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026f8:	d035      	beq.n	8002766 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	3b1e      	subs	r3, #30
 8002710:	2207      	movs	r2, #7
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	400a      	ands	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8d      	ldr	r2, [pc, #564]	@ (800295c <HAL_ADC_ConfigChannel+0x298>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68d9      	ldr	r1, [r3, #12]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	061a      	lsls	r2, r3, #24
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273e:	e035      	b.n	80027ac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	4603      	mov	r3, r0
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4403      	add	r3, r0
 8002758:	3b1e      	subs	r3, #30
 800275a:	409a      	lsls	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002764:	e022      	b.n	80027ac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	2207      	movs	r2, #7
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6919      	ldr	r1, [r3, #16]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	4603      	mov	r3, r0
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4403      	add	r3, r0
 80027a2:	409a      	lsls	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b06      	cmp	r3, #6
 80027b2:	d824      	bhi.n	80027fe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b05      	subs	r3, #5
 80027c6:	221f      	movs	r2, #31
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43da      	mvns	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	400a      	ands	r2, r1
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b05      	subs	r3, #5
 80027f0:	fa00 f203 	lsl.w	r2, r0, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80027fc:	e04c      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d824      	bhi.n	8002850 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b23      	subs	r3, #35	@ 0x23
 8002818:	221f      	movs	r2, #31
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	3b23      	subs	r3, #35	@ 0x23
 8002842:	fa00 f203 	lsl.w	r2, r0, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
 800284e:	e023      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b41      	subs	r3, #65	@ 0x41
 8002862:	221f      	movs	r2, #31
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43da      	mvns	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	400a      	ands	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b41      	subs	r3, #65	@ 0x41
 800288c:	fa00 f203 	lsl.w	r2, r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a30      	ldr	r2, [pc, #192]	@ (8002960 <HAL_ADC_ConfigChannel+0x29c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10a      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1f4>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80028b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a28      	ldr	r2, [pc, #160]	@ (8002960 <HAL_ADC_ConfigChannel+0x29c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10f      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d10b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028d4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028d6:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 80028dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <HAL_ADC_ConfigChannel+0x29c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d12b      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x280>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <HAL_ADC_ConfigChannel+0x298>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x23a>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b11      	cmp	r3, #17
 80028fc:	d122      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 8002904:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002908:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <HAL_ADC_ConfigChannel+0x2a0>)
 8002910:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002914:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a10      	ldr	r2, [pc, #64]	@ (800295c <HAL_ADC_ConfigChannel+0x298>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_ADC_ConfigChannel+0x2a4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a11      	ldr	r2, [pc, #68]	@ (800296c <HAL_ADC_ConfigChannel+0x2a8>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0c9a      	lsrs	r2, r3, #18
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002936:	e002      	b.n	800293e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3b01      	subs	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	10000012 	.word	0x10000012
 8002960:	40012000 	.word	0x40012000
 8002964:	40012300 	.word	0x40012300
 8002968:	20000008 	.word	0x20000008
 800296c:	431bde83 	.word	0x431bde83

08002970 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002978:	4b78      	ldr	r3, [pc, #480]	@ (8002b5c <ADC_Init+0x1ec>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a77      	ldr	r2, [pc, #476]	@ (8002b5c <ADC_Init+0x1ec>)
 800297e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002982:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002984:	4b75      	ldr	r3, [pc, #468]	@ (8002b5c <ADC_Init+0x1ec>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4973      	ldr	r1, [pc, #460]	@ (8002b5c <ADC_Init+0x1ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	021a      	lsls	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6899      	ldr	r1, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	4a58      	ldr	r2, [pc, #352]	@ (8002b60 <ADC_Init+0x1f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	e00f      	b.n	8002a6a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0202 	bic.w	r2, r2, #2
 8002a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6899      	ldr	r1, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	005a      	lsls	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ab6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	035a      	lsls	r2, r3, #13
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	e007      	b.n	8002ae0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ade:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	051a      	lsls	r2, r3, #20
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b22:	025a      	lsls	r2, r3, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	029a      	lsls	r2, r3, #10
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40012300 	.word	0x40012300
 8002b60:	0f000001 	.word	0x0f000001

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00
 8002ba8:	05fa0000 	.word	0x05fa0000

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	@ (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	@ 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff3e 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff8e 	bl	8002c58 <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff31 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e054      	b.n	8002e44 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7f5b      	ldrb	r3, [r3, #29]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff f85c 	bl	8001e68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_CRC_Init+0xc4>)
 8002dc4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0218 	bic.w	r2, r2, #24
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	e00c      	b.n	8002df2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f834 	bl	8002e50 <HAL_CRCEx_Polynomial_Set>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e028      	b.n	8002e44 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	795b      	ldrb	r3, [r3, #5]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	e004      	b.n	8002e10 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6912      	ldr	r2, [r2, #16]
 8002e0e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	04c11db7 	.word	0x04c11db7

08002e50 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e60:	231f      	movs	r3, #31
 8002e62:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e64:	bf00      	nop
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	613a      	str	r2, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_CRCEx_Polynomial_Set+0x34>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b18      	cmp	r3, #24
 8002e88:	d846      	bhi.n	8002f18 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002f1f 	.word	0x08002f1f
 8002e94:	08002f19 	.word	0x08002f19
 8002e98:	08002f19 	.word	0x08002f19
 8002e9c:	08002f19 	.word	0x08002f19
 8002ea0:	08002f19 	.word	0x08002f19
 8002ea4:	08002f19 	.word	0x08002f19
 8002ea8:	08002f19 	.word	0x08002f19
 8002eac:	08002f19 	.word	0x08002f19
 8002eb0:	08002f0d 	.word	0x08002f0d
 8002eb4:	08002f19 	.word	0x08002f19
 8002eb8:	08002f19 	.word	0x08002f19
 8002ebc:	08002f19 	.word	0x08002f19
 8002ec0:	08002f19 	.word	0x08002f19
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f19 	.word	0x08002f19
 8002ed0:	08002f01 	.word	0x08002f01
 8002ed4:	08002f19 	.word	0x08002f19
 8002ed8:	08002f19 	.word	0x08002f19
 8002edc:	08002f19 	.word	0x08002f19
 8002ee0:	08002f19 	.word	0x08002f19
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002ef5 	.word	0x08002ef5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d913      	bls.n	8002f22 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002efe:	e010      	b.n	8002f22 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d90f      	bls.n	8002f26 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f0a:	e00c      	b.n	8002f26 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	d90b      	bls.n	8002f2a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f16:	e008      	b.n	8002f2a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1c:	e006      	b.n	8002f2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e004      	b.n	8002f2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f22:	bf00      	nop
 8002f24:	e002      	b.n	8002f2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f2a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10d      	bne.n	8002f4e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 0118 	bic.w	r1, r3, #24
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e175      	b.n	8003268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8164 	bne.w	8003262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d005      	beq.n	8002fb2 <HAL_GPIO_Init+0x56>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d130      	bne.n	8003014 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80be 	beq.w	8003262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_GPIO_Init+0x324>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_GPIO_Init+0x324>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b63      	ldr	r3, [pc, #396]	@ (8003280 <HAL_GPIO_Init+0x324>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030fe:	4a61      	ldr	r2, [pc, #388]	@ (8003284 <HAL_GPIO_Init+0x328>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a58      	ldr	r2, [pc, #352]	@ (8003288 <HAL_GPIO_Init+0x32c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d037      	beq.n	800319a <HAL_GPIO_Init+0x23e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a57      	ldr	r2, [pc, #348]	@ (800328c <HAL_GPIO_Init+0x330>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d031      	beq.n	8003196 <HAL_GPIO_Init+0x23a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_GPIO_Init+0x334>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02b      	beq.n	8003192 <HAL_GPIO_Init+0x236>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a55      	ldr	r2, [pc, #340]	@ (8003294 <HAL_GPIO_Init+0x338>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x232>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a54      	ldr	r2, [pc, #336]	@ (8003298 <HAL_GPIO_Init+0x33c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x22e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a53      	ldr	r2, [pc, #332]	@ (800329c <HAL_GPIO_Init+0x340>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x22a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a52      	ldr	r2, [pc, #328]	@ (80032a0 <HAL_GPIO_Init+0x344>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x226>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a51      	ldr	r2, [pc, #324]	@ (80032a4 <HAL_GPIO_Init+0x348>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x222>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a50      	ldr	r2, [pc, #320]	@ (80032a8 <HAL_GPIO_Init+0x34c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x21e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4f      	ldr	r2, [pc, #316]	@ (80032ac <HAL_GPIO_Init+0x350>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x21a>
 8003172:	2309      	movs	r3, #9
 8003174:	e012      	b.n	800319c <HAL_GPIO_Init+0x240>
 8003176:	230a      	movs	r3, #10
 8003178:	e010      	b.n	800319c <HAL_GPIO_Init+0x240>
 800317a:	2308      	movs	r3, #8
 800317c:	e00e      	b.n	800319c <HAL_GPIO_Init+0x240>
 800317e:	2307      	movs	r3, #7
 8003180:	e00c      	b.n	800319c <HAL_GPIO_Init+0x240>
 8003182:	2306      	movs	r3, #6
 8003184:	e00a      	b.n	800319c <HAL_GPIO_Init+0x240>
 8003186:	2305      	movs	r3, #5
 8003188:	e008      	b.n	800319c <HAL_GPIO_Init+0x240>
 800318a:	2304      	movs	r3, #4
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x240>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x240>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x240>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x240>
 800319a:	2300      	movs	r3, #0
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x328>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031de:	4a34      	ldr	r2, [pc, #208]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e4:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320e:	4b28      	ldr	r3, [pc, #160]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003232:	4a1f      	ldr	r2, [pc, #124]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003238:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <HAL_GPIO_Init+0x354>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	f67f ae86 	bls.w	8002f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40021400 	.word	0x40021400
 80032a0:	40021800 	.word	0x40021800
 80032a4:	40021c00 	.word	0x40021c00
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022400 	.word	0x40022400
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	@ 0x40
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003336:	f7fe ffeb 	bl	8002310 <HAL_GetTick>
 800333a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800333c:	e009      	b.n	8003352 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333e:	f7fe ffe7 	bl	8002310 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800334c:	d901      	bls.n	8003352 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e022      	b.n	8003398 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003352:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335e:	d1ee      	bne.n	800333e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003360:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0f      	ldr	r2, [pc, #60]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336c:	f7fe ffd0 	bl	8002310 <HAL_GetTick>
 8003370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003372:	e009      	b.n	8003388 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003374:	f7fe ffcc 	bl	8002310 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003382:	d901      	bls.n	8003388 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e007      	b.n	8003398 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003394:	d1ee      	bne.n	8003374 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e291      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8087 	beq.w	80034da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	4b96      	ldr	r3, [pc, #600]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d00c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d8:	4b93      	ldr	r3, [pc, #588]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d112      	bne.n	800340a <HAL_RCC_OscConfig+0x62>
 80033e4:	4b90      	ldr	r3, [pc, #576]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x130>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d168      	bne.n	80034d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e26b      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x7a>
 8003414:	4b84      	ldr	r3, [pc, #528]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a83      	ldr	r2, [pc, #524]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e02e      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x9c>
 800342a:	4b7f      	ldr	r3, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7b      	ldr	r2, [pc, #492]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800343c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0xc0>
 800344e:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b73      	ldr	r3, [pc, #460]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a72      	ldr	r2, [pc, #456]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003468:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b6c      	ldr	r3, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6b      	ldr	r2, [pc, #428]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe ff42 	bl	8002310 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe ff3e 	bl	8002310 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e21f      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe ff2e 	bl	8002310 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe ff2a 	bl	8002310 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e20b      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b57      	ldr	r3, [pc, #348]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x110>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d069      	beq.n	80035ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e6:	4b50      	ldr	r3, [pc, #320]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x190>
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x17a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1df      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	493d      	ldr	r1, [pc, #244]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e040      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fee0 	bl	8002310 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fedc 	bl	8002310 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1bd      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4b30      	ldr	r3, [pc, #192]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b2d      	ldr	r3, [pc, #180]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4929      	ldr	r1, [pc, #164]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
 8003586:	e018      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe febc 	bl	8002310 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe feb8 	bl	8002310 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e199      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d038      	beq.n	8003638 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d2:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fe99 	bl	8002310 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe fe95 	bl	8002310 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e176      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x23a>
 8003600:	e01a      	b.n	8003638 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe fe7f 	bl	8002310 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe fe7b 	bl	8002310 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d903      	bls.n	800362c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e15c      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
 8003628:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b91      	ldr	r3, [pc, #580]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a4 	beq.w	800378e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b8b      	ldr	r3, [pc, #556]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	4a87      	ldr	r2, [pc, #540]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	@ 0x40
 800365e:	4b85      	ldr	r3, [pc, #532]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800367a:	4b7f      	ldr	r3, [pc, #508]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe fe43 	bl	8002310 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fe3f 	bl	8002310 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	@ 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e120      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	4b75      	ldr	r3, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x31a>
 80036b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	e02d      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x33c>
 80036ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ce:	4a69      	ldr	r2, [pc, #420]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d6:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	4a66      	ldr	r2, [pc, #408]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e2:	e01c      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x35e>
 80036ec:	4b61      	ldr	r3, [pc, #388]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a60      	ldr	r2, [pc, #384]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
 8003704:	e00b      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 8003706:	4b5b      	ldr	r3, [pc, #364]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	@ 0x70
 8003712:	4b58      	ldr	r3, [pc, #352]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003716:	4a57      	ldr	r2, [pc, #348]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe fdf3 	bl	8002310 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fdef 	bl	8002310 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0ce      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b4b      	ldr	r3, [pc, #300]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCC_OscConfig+0x386>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe fddd 	bl	8002310 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe fdd9 	bl	8002310 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4a3b      	ldr	r2, [pc, #236]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80a4 	beq.w	80038e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b36      	ldr	r3, [pc, #216]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d06b      	beq.n	800387c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d149      	bne.n	8003840 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fdaa 	bl	8002310 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fda6 	bl	8002310 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e087      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4313      	orrs	r3, r2
 8003804:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800380a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fd7a 	bl	8002310 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fe fd76 	bl	8002310 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e057      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x478>
 800383e:	e04f      	b.n	80038e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003840:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fd60 	bl	8002310 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe fd5c 	bl	8002310 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e03d      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <HAL_RCC_OscConfig+0x4cc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x4ac>
 8003872:	e035      	b.n	80038e0 <HAL_RCC_OscConfig+0x538>
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x544>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d028      	beq.n	80038dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d121      	bne.n	80038dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11a      	bne.n	80038dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0d0      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d910      	bls.n	8003938 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b67      	ldr	r3, [pc, #412]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 020f 	bic.w	r2, r3, #15
 800391e:	4965      	ldr	r1, [pc, #404]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b63      	ldr	r3, [pc, #396]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b8      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003950:	4b59      	ldr	r3, [pc, #356]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a58      	ldr	r2, [pc, #352]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003956:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800395a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003968:	4b53      	ldr	r3, [pc, #332]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	494d      	ldr	r1, [pc, #308]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d040      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d115      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e07f      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e073      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06b      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4936      	ldr	r1, [pc, #216]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e4:	f7fe fc94 	bl	8002310 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fe fc90 	bl	8002310 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e053      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d210      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 020f 	bic.w	r2, r3, #15
 8003a2a:	4922      	ldr	r1, [pc, #136]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e032      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4916      	ldr	r1, [pc, #88]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	490e      	ldr	r1, [pc, #56]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a82:	f000 f821 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a86:	4602      	mov	r2, r0
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	490a      	ldr	r1, [pc, #40]	@ (8003abc <HAL_RCC_ClockConfig+0x1cc>)
 8003a94:	5ccb      	ldrb	r3, [r1, r3]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1d0>)
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1d4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fbf0 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023c00 	.word	0x40023c00
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	08009a08 	.word	0x08009a08
 8003ac0:	20000008 	.word	0x20000008
 8003ac4:	2000000c 	.word	0x2000000c

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b090      	sub	sp, #64	@ 0x40
 8003ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad8:	2300      	movs	r3, #0
 8003ada:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae0:	4b59      	ldr	r3, [pc, #356]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d00d      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x40>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	f200 80a1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x34>
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003afa:	e09b      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b00:	e09b      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b02:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b06:	e098      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b08:	4b4f      	ldr	r3, [pc, #316]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b12:	4b4d      	ldr	r3, [pc, #308]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b30:	2100      	movs	r1, #0
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b34:	fb03 f201 	mul.w	r2, r3, r1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a43      	ldr	r2, [pc, #268]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b42:	fba0 1202 	umull	r1, r2, r0, r2
 8003b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b48:	460a      	mov	r2, r1
 8003b4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b4e:	4413      	add	r3, r2
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	2200      	movs	r2, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b62:	f7fd f8b1 	bl	8000cc8 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6e:	e053      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4b35      	ldr	r3, [pc, #212]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	2200      	movs	r2, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	617a      	str	r2, [r7, #20]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b82:	f04f 0b00 	mov.w	fp, #0
 8003b86:	4652      	mov	r2, sl
 8003b88:	465b      	mov	r3, fp
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b98:	0150      	lsls	r0, r2, #5
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ba2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bba:	ebb2 0408 	subs.w	r4, r2, r8
 8003bbe:	eb63 0509 	sbc.w	r5, r3, r9
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	00eb      	lsls	r3, r5, #3
 8003bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd0:	00e2      	lsls	r2, r4, #3
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	eb14 030a 	adds.w	r3, r4, sl
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	eb45 030b 	adc.w	r3, r5, fp
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	2200      	movs	r2, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	60fa      	str	r2, [r7, #12]
 8003c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c0c:	f7fd f85c 	bl	8000cc8 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3740      	adds	r7, #64	@ 0x40
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	017d7840 	.word	0x017d7840

08003c54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000008 	.word	0x20000008

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	08009a18 	.word	0x08009a18

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08009a18 	.word	0x08009a18

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce4:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	4b66      	ldr	r3, [pc, #408]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf8:	4964      	ldr	r1, [pc, #400]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d16:	4b5d      	ldr	r3, [pc, #372]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	4959      	ldr	r1, [pc, #356]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d017      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d52:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	494a      	ldr	r1, [pc, #296]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d70:	d101      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 808b 	beq.w	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	4a39      	ldr	r2, [pc, #228]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dac:	4b37      	ldr	r3, [pc, #220]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db8:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc4:	f7fe faa4 	bl	8002310 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe faa0 	bl	8002310 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e357      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dde:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dea:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d035      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d02e      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e08:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e12:	4b1e      	ldr	r3, [pc, #120]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a1a      	ldr	r2, [pc, #104]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e30:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d114      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fa68 	bl	8002310 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fe fa64 	bl	8002310 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e319      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ee      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	4901      	ldr	r1, [pc, #4]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40007000 	.word	0x40007000
 8003e94:	0ffffcff 	.word	0x0ffffcff
 8003e98:	4baa      	ldr	r3, [pc, #680]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4aa9      	ldr	r2, [pc, #676]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ea2:	6093      	str	r3, [r2, #8]
 8003ea4:	4ba7      	ldr	r3, [pc, #668]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	49a4      	ldr	r1, [pc, #656]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d010      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ec2:	4ba0      	ldr	r3, [pc, #640]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec8:	4a9e      	ldr	r2, [pc, #632]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ece:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003edc:	4999      	ldr	r1, [pc, #612]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef0:	4b94      	ldr	r3, [pc, #592]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003efe:	4991      	ldr	r1, [pc, #580]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f12:	4b8c      	ldr	r3, [pc, #560]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f20:	4988      	ldr	r1, [pc, #544]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f34:	4b83      	ldr	r3, [pc, #524]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f42:	4980      	ldr	r1, [pc, #512]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f56:	4b7b      	ldr	r3, [pc, #492]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4977      	ldr	r1, [pc, #476]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f78:	4b72      	ldr	r3, [pc, #456]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	496f      	ldr	r1, [pc, #444]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa0:	f023 020c 	bic.w	r2, r3, #12
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa8:	4966      	ldr	r1, [pc, #408]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fbc:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	495e      	ldr	r1, [pc, #376]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fde:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	4955      	ldr	r1, [pc, #340]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004000:	4b50      	ldr	r3, [pc, #320]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	494d      	ldr	r1, [pc, #308]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004022:	4b48      	ldr	r3, [pc, #288]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	4944      	ldr	r1, [pc, #272]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004044:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004052:	493c      	ldr	r1, [pc, #240]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	4933      	ldr	r1, [pc, #204]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004088:	4b2e      	ldr	r3, [pc, #184]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004096:	492b      	ldr	r1, [pc, #172]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040aa:	4b26      	ldr	r3, [pc, #152]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b8:	4922      	ldr	r1, [pc, #136]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c8:	d101      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ea:	4b16      	ldr	r3, [pc, #88]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f8:	4912      	ldr	r1, [pc, #72]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800410c:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411c:	4909      	ldr	r1, [pc, #36]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d006      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80d9 	beq.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004138:	4b02      	ldr	r3, [pc, #8]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a01      	ldr	r2, [pc, #4]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004144:	40023800 	.word	0x40023800
 8004148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414a:	f7fe f8e1 	bl	8002310 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004152:	f7fe f8dd 	bl	8002310 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	@ 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e194      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004164:	4b6c      	ldr	r3, [pc, #432]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d021      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004180:	2b00      	cmp	r3, #0
 8004182:	d11d      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004184:	4b64      	ldr	r3, [pc, #400]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004192:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004198:	0e1b      	lsrs	r3, r3, #24
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	019a      	lsls	r2, r3, #6
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	071b      	lsls	r3, r3, #28
 80041b8:	4957      	ldr	r1, [pc, #348]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02e      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ea:	d129      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041fa:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004200:	0f1b      	lsrs	r3, r3, #28
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	431a      	orrs	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	071b      	lsls	r3, r3, #28
 8004220:	493d      	ldr	r1, [pc, #244]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004228:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800422e:	f023 021f 	bic.w	r2, r3, #31
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	3b01      	subs	r3, #1
 8004238:	4937      	ldr	r1, [pc, #220]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01d      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800424c:	4b32      	ldr	r3, [pc, #200]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004252:	0e1b      	lsrs	r3, r3, #24
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800425a:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004260:	0f1b      	lsrs	r3, r3, #28
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	019a      	lsls	r2, r3, #6
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	431a      	orrs	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	071b      	lsls	r3, r3, #28
 8004280:	4925      	ldr	r1, [pc, #148]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d011      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	019a      	lsls	r2, r3, #6
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	071b      	lsls	r3, r3, #28
 80042b0:	4919      	ldr	r1, [pc, #100]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b8:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fe f824 	bl	8002310 <HAL_GetTick>
 80042c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042cc:	f7fe f820 	bl	8002310 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0d7      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	f040 80cd 	bne.w	800448c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042f2:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fe f807 	bl	8002310 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004306:	f7fe f803 	bl	8002310 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	@ 0x64
 8004312:	d903      	bls.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0ba      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004318:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800431c:	4b5e      	ldr	r3, [pc, #376]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004328:	d0ed      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004352:	4b51      	ldr	r3, [pc, #324]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004360:	4b4d      	ldr	r3, [pc, #308]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	0f1b      	lsrs	r3, r3, #28
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	019a      	lsls	r2, r3, #6
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	4944      	ldr	r1, [pc, #272]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800438e:	4b42      	ldr	r3, [pc, #264]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004394:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	3b01      	subs	r3, #1
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	493d      	ldr	r1, [pc, #244]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043bc:	d11d      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043be:	4b36      	ldr	r3, [pc, #216]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043cc:	4b32      	ldr	r3, [pc, #200]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	0f1b      	lsrs	r3, r3, #28
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	019a      	lsls	r2, r3, #6
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	071b      	lsls	r3, r3, #28
 80043f2:	4929      	ldr	r1, [pc, #164]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d028      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004406:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004414:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	019a      	lsls	r2, r3, #6
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	431a      	orrs	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	071b      	lsls	r3, r3, #28
 800443a:	4917      	ldr	r1, [pc, #92]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004442:	4b15      	ldr	r3, [pc, #84]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004448:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	4911      	ldr	r1, [pc, #68]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0e      	ldr	r2, [pc, #56]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fd ff54 	bl	8002310 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800446c:	f7fd ff50 	bl	8002310 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e007      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448a:	d1ef      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e049      	b.n	8004542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd fcf0 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 f986 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d122      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d11b      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f06f 0202 	mvn.w	r2, #2
 8004576:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f90f 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 8004592:	e005      	b.n	80045a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f901 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f912 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d122      	bne.n	80045fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d11b      	bne.n	80045fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f06f 0204 	mvn.w	r2, #4
 80045ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f8e5 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80045e6:	e005      	b.n	80045f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8d7 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8e8 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d122      	bne.n	800464e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b08      	cmp	r3, #8
 8004614:	d11b      	bne.n	800464e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0208 	mvn.w	r2, #8
 800461e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2204      	movs	r2, #4
 8004624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8bb 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 800463a:	e005      	b.n	8004648 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8ad 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8be 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d122      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d11b      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0210 	mvn.w	r2, #16
 8004672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2208      	movs	r2, #8
 8004678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f891 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 800468e:	e005      	b.n	800469c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f883 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f894 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10e      	bne.n	80046ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0201 	mvn.w	r2, #1
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f85d 	bl	8004788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b80      	cmp	r3, #128	@ 0x80
 80046da:	d10e      	bne.n	80046fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b80      	cmp	r3, #128	@ 0x80
 80046e8:	d107      	bne.n	80046fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f923 	bl	8004940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	2b80      	cmp	r3, #128	@ 0x80
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f916 	bl	8004954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004732:	2b40      	cmp	r3, #64	@ 0x40
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f842 	bl	80047d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d10e      	bne.n	8004780 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d107      	bne.n	8004780 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0220 	mvn.w	r2, #32
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8d6 	bl	800492c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a40      	ldr	r2, [pc, #256]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480a:	d00f      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3d      	ldr	r2, [pc, #244]	@ (8004904 <TIM_Base_SetConfig+0x118>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3c      	ldr	r2, [pc, #240]	@ (8004908 <TIM_Base_SetConfig+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3b      	ldr	r2, [pc, #236]	@ (800490c <TIM_Base_SetConfig+0x120>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3a      	ldr	r2, [pc, #232]	@ (8004910 <TIM_Base_SetConfig+0x124>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2f      	ldr	r2, [pc, #188]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d02b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d027      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2c      	ldr	r2, [pc, #176]	@ (8004904 <TIM_Base_SetConfig+0x118>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d023      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <TIM_Base_SetConfig+0x11c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2a      	ldr	r2, [pc, #168]	@ (800490c <TIM_Base_SetConfig+0x120>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a29      	ldr	r2, [pc, #164]	@ (8004910 <TIM_Base_SetConfig+0x124>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d017      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a28      	ldr	r2, [pc, #160]	@ (8004914 <TIM_Base_SetConfig+0x128>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a27      	ldr	r2, [pc, #156]	@ (8004918 <TIM_Base_SetConfig+0x12c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a26      	ldr	r2, [pc, #152]	@ (800491c <TIM_Base_SetConfig+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a25      	ldr	r2, [pc, #148]	@ (8004920 <TIM_Base_SetConfig+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a24      	ldr	r2, [pc, #144]	@ (8004924 <TIM_Base_SetConfig+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a23      	ldr	r2, [pc, #140]	@ (8004928 <TIM_Base_SetConfig+0x13c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <TIM_Base_SetConfig+0xf8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a0c      	ldr	r2, [pc, #48]	@ (8004910 <TIM_Base_SetConfig+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	615a      	str	r2, [r3, #20]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40010400 	.word	0x40010400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800
 8004920:	40001800 	.word	0x40001800
 8004924:	40001c00 	.word	0x40001c00
 8004928:	40002000 	.word	0x40002000

0800492c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e040      	b.n	80049fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd fab2 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	@ 0x24
 8004994:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8b0 	bl	8004b0c <UART_SetConfig>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e022      	b.n	80049fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fb08 	bl	8004fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb8f 	bl	8005118 <UART_CheckIdleState>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	@ 0x28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d171      	bne.n	8004b00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_UART_Transmit+0x24>
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e06a      	b.n	8004b02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2221      	movs	r2, #33	@ 0x21
 8004a38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a3a:	f7fd fc69 	bl	8002310 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a58:	d108      	bne.n	8004a6c <HAL_UART_Transmit+0x68>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e003      	b.n	8004a74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a74:	e02c      	b.n	8004ad0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2180      	movs	r1, #128	@ 0x80
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fb80 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e038      	b.n	8004b02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	e007      	b.n	8004abe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1cc      	bne.n	8004a76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2140      	movs	r1, #64	@ 0x40
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb4d 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e005      	b.n	8004b02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4ba6      	ldr	r3, [pc, #664]	@ (8004dd0 <UART_SetConfig+0x2c4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	6979      	ldr	r1, [r7, #20]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a94      	ldr	r2, [pc, #592]	@ (8004dd4 <UART_SetConfig+0x2c8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d120      	bne.n	8004bca <UART_SetConfig+0xbe>
 8004b88:	4b93      	ldr	r3, [pc, #588]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d816      	bhi.n	8004bc4 <UART_SetConfig+0xb8>
 8004b96:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <UART_SetConfig+0x90>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bb3 	.word	0x08004bb3
 8004ba8:	08004bbf 	.word	0x08004bbf
 8004bac:	2301      	movs	r3, #1
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e150      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	77fb      	strb	r3, [r7, #31]
 8004bb6:	e14d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e14a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e147      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e144      	b.n	8004e54 <UART_SetConfig+0x348>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a83      	ldr	r2, [pc, #524]	@ (8004ddc <UART_SetConfig+0x2d0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d132      	bne.n	8004c3a <UART_SetConfig+0x12e>
 8004bd4:	4b80      	ldr	r3, [pc, #512]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d828      	bhi.n	8004c34 <UART_SetConfig+0x128>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0xdc>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c1d 	.word	0x08004c1d
 8004bec:	08004c35 	.word	0x08004c35
 8004bf0:	08004c35 	.word	0x08004c35
 8004bf4:	08004c35 	.word	0x08004c35
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c35 	.word	0x08004c35
 8004c00:	08004c35 	.word	0x08004c35
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004c23 	.word	0x08004c23
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c35 	.word	0x08004c35
 8004c18:	08004c2f 	.word	0x08004c2f
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e118      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e115      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e112      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e10f      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e10c      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a68      	ldr	r2, [pc, #416]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d120      	bne.n	8004c86 <UART_SetConfig+0x17a>
 8004c44:	4b64      	ldr	r3, [pc, #400]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c4e:	2b30      	cmp	r3, #48	@ 0x30
 8004c50:	d013      	beq.n	8004c7a <UART_SetConfig+0x16e>
 8004c52:	2b30      	cmp	r3, #48	@ 0x30
 8004c54:	d814      	bhi.n	8004c80 <UART_SetConfig+0x174>
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d009      	beq.n	8004c6e <UART_SetConfig+0x162>
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d810      	bhi.n	8004c80 <UART_SetConfig+0x174>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <UART_SetConfig+0x15c>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d006      	beq.n	8004c74 <UART_SetConfig+0x168>
 8004c66:	e00b      	b.n	8004c80 <UART_SetConfig+0x174>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0f2      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0ef      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0ec      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0e9      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0e6      	b.n	8004e54 <UART_SetConfig+0x348>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a56      	ldr	r2, [pc, #344]	@ (8004de4 <UART_SetConfig+0x2d8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d120      	bne.n	8004cd2 <UART_SetConfig+0x1c6>
 8004c90:	4b51      	ldr	r3, [pc, #324]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c9c:	d013      	beq.n	8004cc6 <UART_SetConfig+0x1ba>
 8004c9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ca0:	d814      	bhi.n	8004ccc <UART_SetConfig+0x1c0>
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d009      	beq.n	8004cba <UART_SetConfig+0x1ae>
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d810      	bhi.n	8004ccc <UART_SetConfig+0x1c0>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x1a8>
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d006      	beq.n	8004cc0 <UART_SetConfig+0x1b4>
 8004cb2:	e00b      	b.n	8004ccc <UART_SetConfig+0x1c0>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0cc      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e0c9      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0c6      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e0c3      	b.n	8004e54 <UART_SetConfig+0x348>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e0c0      	b.n	8004e54 <UART_SetConfig+0x348>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a44      	ldr	r2, [pc, #272]	@ (8004de8 <UART_SetConfig+0x2dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d125      	bne.n	8004d28 <UART_SetConfig+0x21c>
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cea:	d017      	beq.n	8004d1c <UART_SetConfig+0x210>
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf0:	d817      	bhi.n	8004d22 <UART_SetConfig+0x216>
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf6:	d00b      	beq.n	8004d10 <UART_SetConfig+0x204>
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfc:	d811      	bhi.n	8004d22 <UART_SetConfig+0x216>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <UART_SetConfig+0x1fe>
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d06:	d006      	beq.n	8004d16 <UART_SetConfig+0x20a>
 8004d08:	e00b      	b.n	8004d22 <UART_SetConfig+0x216>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0a1      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d10:	2302      	movs	r3, #2
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e09e      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d16:	2304      	movs	r3, #4
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e09b      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e098      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d22:	2310      	movs	r3, #16
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e095      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dec <UART_SetConfig+0x2e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d125      	bne.n	8004d7e <UART_SetConfig+0x272>
 8004d32:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d40:	d017      	beq.n	8004d72 <UART_SetConfig+0x266>
 8004d42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d46:	d817      	bhi.n	8004d78 <UART_SetConfig+0x26c>
 8004d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4c:	d00b      	beq.n	8004d66 <UART_SetConfig+0x25a>
 8004d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d52:	d811      	bhi.n	8004d78 <UART_SetConfig+0x26c>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <UART_SetConfig+0x254>
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5c:	d006      	beq.n	8004d6c <UART_SetConfig+0x260>
 8004d5e:	e00b      	b.n	8004d78 <UART_SetConfig+0x26c>
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e076      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d66:	2302      	movs	r3, #2
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e073      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e070      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d72:	2308      	movs	r3, #8
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e06d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e06a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <UART_SetConfig+0x2e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d138      	bne.n	8004dfa <UART_SetConfig+0x2ee>
 8004d88:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d96:	d017      	beq.n	8004dc8 <UART_SetConfig+0x2bc>
 8004d98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d9c:	d82a      	bhi.n	8004df4 <UART_SetConfig+0x2e8>
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da2:	d00b      	beq.n	8004dbc <UART_SetConfig+0x2b0>
 8004da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da8:	d824      	bhi.n	8004df4 <UART_SetConfig+0x2e8>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <UART_SetConfig+0x2aa>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d006      	beq.n	8004dc2 <UART_SetConfig+0x2b6>
 8004db4:	e01e      	b.n	8004df4 <UART_SetConfig+0x2e8>
 8004db6:	2300      	movs	r3, #0
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e04b      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e048      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e045      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e042      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dce:	bf00      	nop
 8004dd0:	efff69f3 	.word	0xefff69f3
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40004800 	.word	0x40004800
 8004de4:	40004c00 	.word	0x40004c00
 8004de8:	40005000 	.word	0x40005000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	40007800 	.word	0x40007800
 8004df4:	2310      	movs	r3, #16
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e02c      	b.n	8004e54 <UART_SetConfig+0x348>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a72      	ldr	r2, [pc, #456]	@ (8004fc8 <UART_SetConfig+0x4bc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d125      	bne.n	8004e50 <UART_SetConfig+0x344>
 8004e04:	4b71      	ldr	r3, [pc, #452]	@ (8004fcc <UART_SetConfig+0x4c0>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e12:	d017      	beq.n	8004e44 <UART_SetConfig+0x338>
 8004e14:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e18:	d817      	bhi.n	8004e4a <UART_SetConfig+0x33e>
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1e:	d00b      	beq.n	8004e38 <UART_SetConfig+0x32c>
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e24:	d811      	bhi.n	8004e4a <UART_SetConfig+0x33e>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <UART_SetConfig+0x326>
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2e:	d006      	beq.n	8004e3e <UART_SetConfig+0x332>
 8004e30:	e00b      	b.n	8004e4a <UART_SetConfig+0x33e>
 8004e32:	2300      	movs	r3, #0
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e00d      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e00a      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e007      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e44:	2308      	movs	r3, #8
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e4a:	2310      	movs	r3, #16
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e001      	b.n	8004e54 <UART_SetConfig+0x348>
 8004e50:	2310      	movs	r3, #16
 8004e52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5c:	d15b      	bne.n	8004f16 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e5e:	7ffb      	ldrb	r3, [r7, #31]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d828      	bhi.n	8004eb6 <UART_SetConfig+0x3aa>
 8004e64:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x360>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	08004eb7 	.word	0x08004eb7
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004eb7 	.word	0x08004eb7
 8004e84:	08004eb7 	.word	0x08004eb7
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004eaf 	.word	0x08004eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe feec 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004e94:	61b8      	str	r0, [r7, #24]
        break;
 8004e96:	e013      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe fefc 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e00f      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd0 <UART_SetConfig+0x4c4>)
 8004ea2:	61bb      	str	r3, [r7, #24]
        break;
 8004ea4:	e00c      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7fe fe0f 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8004eaa:	61b8      	str	r0, [r7, #24]
        break;
 8004eac:	e008      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e004      	b.n	8004ec0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d074      	beq.n	8004fb0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	005a      	lsls	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d916      	bls.n	8004f10 <UART_SetConfig+0x404>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d212      	bcs.n	8004f10 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f023 030f 	bic.w	r3, r3, #15
 8004ef2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	89fa      	ldrh	r2, [r7, #14]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e04f      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	77bb      	strb	r3, [r7, #30]
 8004f14:	e04c      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d828      	bhi.n	8004f6e <UART_SetConfig+0x462>
 8004f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <UART_SetConfig+0x418>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f6f 	.word	0x08004f6f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fe fe90 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004f4c:	61b8      	str	r0, [r7, #24]
        break;
 8004f4e:	e013      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fea0 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e00f      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <UART_SetConfig+0x4c4>)
 8004f5a:	61bb      	str	r3, [r7, #24]
        break;
 8004f5c:	e00c      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fdb3 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8004f62:	61b8      	str	r0, [r7, #24]
        break;
 8004f64:	e008      	b.n	8004f78 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6a:	61bb      	str	r3, [r7, #24]
        break;
 8004f6c:	e004      	b.n	8004f78 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	77bb      	strb	r3, [r7, #30]
        break;
 8004f76:	bf00      	nop
    }

    if (pclk != 0U)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085a      	lsrs	r2, r3, #1
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	441a      	add	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d909      	bls.n	8004fac <UART_SetConfig+0x4a0>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9e:	d205      	bcs.n	8004fac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	e001      	b.n	8004fb0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40007c00 	.word	0x40007c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	00f42400 	.word	0x00f42400

08004fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01a      	beq.n	80050ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d2:	d10a      	bne.n	80050ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005128:	f7fd f8f2 	bl	8002310 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10e      	bne.n	800515a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f81b 	bl	8005186 <UART_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e011      	b.n	800517e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b09c      	sub	sp, #112	@ 0x70
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	e0a7      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	f000 80a3 	beq.w	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd f8b5 	bl	8002310 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d13f      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80051cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80051e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	663b      	str	r3, [r7, #96]	@ 0x60
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800520a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e068      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d050      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005254:	d148      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005280:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	613b      	str	r3, [r7, #16]
   return(result);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052b2:	623a      	str	r2, [r7, #32]
 80052b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e010      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	f43f af48 	beq.w	8005198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3770      	adds	r7, #112	@ 0x70
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <__cvt>:
 8005312:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005316:	ec57 6b10 	vmov	r6, r7, d0
 800531a:	2f00      	cmp	r7, #0
 800531c:	460c      	mov	r4, r1
 800531e:	4619      	mov	r1, r3
 8005320:	463b      	mov	r3, r7
 8005322:	bfbb      	ittet	lt
 8005324:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005328:	461f      	movlt	r7, r3
 800532a:	2300      	movge	r3, #0
 800532c:	232d      	movlt	r3, #45	@ 0x2d
 800532e:	700b      	strb	r3, [r1, #0]
 8005330:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005332:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005336:	4691      	mov	r9, r2
 8005338:	f023 0820 	bic.w	r8, r3, #32
 800533c:	bfbc      	itt	lt
 800533e:	4632      	movlt	r2, r6
 8005340:	4616      	movlt	r6, r2
 8005342:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005346:	d005      	beq.n	8005354 <__cvt+0x42>
 8005348:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800534c:	d100      	bne.n	8005350 <__cvt+0x3e>
 800534e:	3401      	adds	r4, #1
 8005350:	2102      	movs	r1, #2
 8005352:	e000      	b.n	8005356 <__cvt+0x44>
 8005354:	2103      	movs	r1, #3
 8005356:	ab03      	add	r3, sp, #12
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	ab02      	add	r3, sp, #8
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	ec47 6b10 	vmov	d0, r6, r7
 8005362:	4653      	mov	r3, sl
 8005364:	4622      	mov	r2, r4
 8005366:	f001 f873 	bl	8006450 <_dtoa_r>
 800536a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800536e:	4605      	mov	r5, r0
 8005370:	d119      	bne.n	80053a6 <__cvt+0x94>
 8005372:	f019 0f01 	tst.w	r9, #1
 8005376:	d00e      	beq.n	8005396 <__cvt+0x84>
 8005378:	eb00 0904 	add.w	r9, r0, r4
 800537c:	2200      	movs	r2, #0
 800537e:	2300      	movs	r3, #0
 8005380:	4630      	mov	r0, r6
 8005382:	4639      	mov	r1, r7
 8005384:	f7fb fbc0 	bl	8000b08 <__aeabi_dcmpeq>
 8005388:	b108      	cbz	r0, 800538e <__cvt+0x7c>
 800538a:	f8cd 900c 	str.w	r9, [sp, #12]
 800538e:	2230      	movs	r2, #48	@ 0x30
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	454b      	cmp	r3, r9
 8005394:	d31e      	bcc.n	80053d4 <__cvt+0xc2>
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800539a:	1b5b      	subs	r3, r3, r5
 800539c:	4628      	mov	r0, r5
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	b004      	add	sp, #16
 80053a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053aa:	eb00 0904 	add.w	r9, r0, r4
 80053ae:	d1e5      	bne.n	800537c <__cvt+0x6a>
 80053b0:	7803      	ldrb	r3, [r0, #0]
 80053b2:	2b30      	cmp	r3, #48	@ 0x30
 80053b4:	d10a      	bne.n	80053cc <__cvt+0xba>
 80053b6:	2200      	movs	r2, #0
 80053b8:	2300      	movs	r3, #0
 80053ba:	4630      	mov	r0, r6
 80053bc:	4639      	mov	r1, r7
 80053be:	f7fb fba3 	bl	8000b08 <__aeabi_dcmpeq>
 80053c2:	b918      	cbnz	r0, 80053cc <__cvt+0xba>
 80053c4:	f1c4 0401 	rsb	r4, r4, #1
 80053c8:	f8ca 4000 	str.w	r4, [sl]
 80053cc:	f8da 3000 	ldr.w	r3, [sl]
 80053d0:	4499      	add	r9, r3
 80053d2:	e7d3      	b.n	800537c <__cvt+0x6a>
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	9103      	str	r1, [sp, #12]
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e7d9      	b.n	8005390 <__cvt+0x7e>

080053dc <__exponent>:
 80053dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053de:	2900      	cmp	r1, #0
 80053e0:	bfba      	itte	lt
 80053e2:	4249      	neglt	r1, r1
 80053e4:	232d      	movlt	r3, #45	@ 0x2d
 80053e6:	232b      	movge	r3, #43	@ 0x2b
 80053e8:	2909      	cmp	r1, #9
 80053ea:	7002      	strb	r2, [r0, #0]
 80053ec:	7043      	strb	r3, [r0, #1]
 80053ee:	dd29      	ble.n	8005444 <__exponent+0x68>
 80053f0:	f10d 0307 	add.w	r3, sp, #7
 80053f4:	461d      	mov	r5, r3
 80053f6:	270a      	movs	r7, #10
 80053f8:	461a      	mov	r2, r3
 80053fa:	fbb1 f6f7 	udiv	r6, r1, r7
 80053fe:	fb07 1416 	mls	r4, r7, r6, r1
 8005402:	3430      	adds	r4, #48	@ 0x30
 8005404:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005408:	460c      	mov	r4, r1
 800540a:	2c63      	cmp	r4, #99	@ 0x63
 800540c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005410:	4631      	mov	r1, r6
 8005412:	dcf1      	bgt.n	80053f8 <__exponent+0x1c>
 8005414:	3130      	adds	r1, #48	@ 0x30
 8005416:	1e94      	subs	r4, r2, #2
 8005418:	f803 1c01 	strb.w	r1, [r3, #-1]
 800541c:	1c41      	adds	r1, r0, #1
 800541e:	4623      	mov	r3, r4
 8005420:	42ab      	cmp	r3, r5
 8005422:	d30a      	bcc.n	800543a <__exponent+0x5e>
 8005424:	f10d 0309 	add.w	r3, sp, #9
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	42ac      	cmp	r4, r5
 800542c:	bf88      	it	hi
 800542e:	2300      	movhi	r3, #0
 8005430:	3302      	adds	r3, #2
 8005432:	4403      	add	r3, r0
 8005434:	1a18      	subs	r0, r3, r0
 8005436:	b003      	add	sp, #12
 8005438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800543a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800543e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005442:	e7ed      	b.n	8005420 <__exponent+0x44>
 8005444:	2330      	movs	r3, #48	@ 0x30
 8005446:	3130      	adds	r1, #48	@ 0x30
 8005448:	7083      	strb	r3, [r0, #2]
 800544a:	70c1      	strb	r1, [r0, #3]
 800544c:	1d03      	adds	r3, r0, #4
 800544e:	e7f1      	b.n	8005434 <__exponent+0x58>

08005450 <_printf_float>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	b08d      	sub	sp, #52	@ 0x34
 8005456:	460c      	mov	r4, r1
 8005458:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800545c:	4616      	mov	r6, r2
 800545e:	461f      	mov	r7, r3
 8005460:	4605      	mov	r5, r0
 8005462:	f000 feef 	bl	8006244 <_localeconv_r>
 8005466:	6803      	ldr	r3, [r0, #0]
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fa ff20 	bl	80002b0 <strlen>
 8005470:	2300      	movs	r3, #0
 8005472:	930a      	str	r3, [sp, #40]	@ 0x28
 8005474:	f8d8 3000 	ldr.w	r3, [r8]
 8005478:	9005      	str	r0, [sp, #20]
 800547a:	3307      	adds	r3, #7
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	f103 0208 	add.w	r2, r3, #8
 8005484:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005488:	f8d4 b000 	ldr.w	fp, [r4]
 800548c:	f8c8 2000 	str.w	r2, [r8]
 8005490:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005494:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005498:	9307      	str	r3, [sp, #28]
 800549a:	f8cd 8018 	str.w	r8, [sp, #24]
 800549e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005718 <_printf_float+0x2c8>)
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	f7fb fb5e 	bl	8000b6c <__aeabi_dcmpun>
 80054b0:	bb70      	cbnz	r0, 8005510 <_printf_float+0xc0>
 80054b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054b6:	4b98      	ldr	r3, [pc, #608]	@ (8005718 <_printf_float+0x2c8>)
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
 80054bc:	f7fb fb38 	bl	8000b30 <__aeabi_dcmple>
 80054c0:	bb30      	cbnz	r0, 8005510 <_printf_float+0xc0>
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4640      	mov	r0, r8
 80054c8:	4649      	mov	r1, r9
 80054ca:	f7fb fb27 	bl	8000b1c <__aeabi_dcmplt>
 80054ce:	b110      	cbz	r0, 80054d6 <_printf_float+0x86>
 80054d0:	232d      	movs	r3, #45	@ 0x2d
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d6:	4a91      	ldr	r2, [pc, #580]	@ (800571c <_printf_float+0x2cc>)
 80054d8:	4b91      	ldr	r3, [pc, #580]	@ (8005720 <_printf_float+0x2d0>)
 80054da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054de:	bf94      	ite	ls
 80054e0:	4690      	movls	r8, r2
 80054e2:	4698      	movhi	r8, r3
 80054e4:	2303      	movs	r3, #3
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	f02b 0304 	bic.w	r3, fp, #4
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	f04f 0900 	mov.w	r9, #0
 80054f2:	9700      	str	r7, [sp, #0]
 80054f4:	4633      	mov	r3, r6
 80054f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80054f8:	4621      	mov	r1, r4
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 f9d2 	bl	80058a4 <_printf_common>
 8005500:	3001      	adds	r0, #1
 8005502:	f040 808d 	bne.w	8005620 <_printf_float+0x1d0>
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	b00d      	add	sp, #52	@ 0x34
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fb fb28 	bl	8000b6c <__aeabi_dcmpun>
 800551c:	b140      	cbz	r0, 8005530 <_printf_float+0xe0>
 800551e:	464b      	mov	r3, r9
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfbc      	itt	lt
 8005524:	232d      	movlt	r3, #45	@ 0x2d
 8005526:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800552a:	4a7e      	ldr	r2, [pc, #504]	@ (8005724 <_printf_float+0x2d4>)
 800552c:	4b7e      	ldr	r3, [pc, #504]	@ (8005728 <_printf_float+0x2d8>)
 800552e:	e7d4      	b.n	80054da <_printf_float+0x8a>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005536:	9206      	str	r2, [sp, #24]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	d13b      	bne.n	80055b4 <_printf_float+0x164>
 800553c:	2306      	movs	r3, #6
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005544:	2300      	movs	r3, #0
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	ab0a      	add	r3, sp, #40	@ 0x28
 800554c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005550:	ab09      	add	r3, sp, #36	@ 0x24
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	6861      	ldr	r1, [r4, #4]
 8005556:	ec49 8b10 	vmov	d0, r8, r9
 800555a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800555e:	4628      	mov	r0, r5
 8005560:	f7ff fed7 	bl	8005312 <__cvt>
 8005564:	9b06      	ldr	r3, [sp, #24]
 8005566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005568:	2b47      	cmp	r3, #71	@ 0x47
 800556a:	4680      	mov	r8, r0
 800556c:	d129      	bne.n	80055c2 <_printf_float+0x172>
 800556e:	1cc8      	adds	r0, r1, #3
 8005570:	db02      	blt.n	8005578 <_printf_float+0x128>
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	4299      	cmp	r1, r3
 8005576:	dd41      	ble.n	80055fc <_printf_float+0x1ac>
 8005578:	f1aa 0a02 	sub.w	sl, sl, #2
 800557c:	fa5f fa8a 	uxtb.w	sl, sl
 8005580:	3901      	subs	r1, #1
 8005582:	4652      	mov	r2, sl
 8005584:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005588:	9109      	str	r1, [sp, #36]	@ 0x24
 800558a:	f7ff ff27 	bl	80053dc <__exponent>
 800558e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005590:	1813      	adds	r3, r2, r0
 8005592:	2a01      	cmp	r2, #1
 8005594:	4681      	mov	r9, r0
 8005596:	6123      	str	r3, [r4, #16]
 8005598:	dc02      	bgt.n	80055a0 <_printf_float+0x150>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	07d2      	lsls	r2, r2, #31
 800559e:	d501      	bpl.n	80055a4 <_printf_float+0x154>
 80055a0:	3301      	adds	r3, #1
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0a2      	beq.n	80054f2 <_printf_float+0xa2>
 80055ac:	232d      	movs	r3, #45	@ 0x2d
 80055ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b2:	e79e      	b.n	80054f2 <_printf_float+0xa2>
 80055b4:	9a06      	ldr	r2, [sp, #24]
 80055b6:	2a47      	cmp	r2, #71	@ 0x47
 80055b8:	d1c2      	bne.n	8005540 <_printf_float+0xf0>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1c0      	bne.n	8005540 <_printf_float+0xf0>
 80055be:	2301      	movs	r3, #1
 80055c0:	e7bd      	b.n	800553e <_printf_float+0xee>
 80055c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055c6:	d9db      	bls.n	8005580 <_printf_float+0x130>
 80055c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055cc:	d118      	bne.n	8005600 <_printf_float+0x1b0>
 80055ce:	2900      	cmp	r1, #0
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	dd0b      	ble.n	80055ec <_printf_float+0x19c>
 80055d4:	6121      	str	r1, [r4, #16]
 80055d6:	b913      	cbnz	r3, 80055de <_printf_float+0x18e>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	07d0      	lsls	r0, r2, #31
 80055dc:	d502      	bpl.n	80055e4 <_printf_float+0x194>
 80055de:	3301      	adds	r3, #1
 80055e0:	440b      	add	r3, r1
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	e7db      	b.n	80055a4 <_printf_float+0x154>
 80055ec:	b913      	cbnz	r3, 80055f4 <_printf_float+0x1a4>
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	07d2      	lsls	r2, r2, #31
 80055f2:	d501      	bpl.n	80055f8 <_printf_float+0x1a8>
 80055f4:	3302      	adds	r3, #2
 80055f6:	e7f4      	b.n	80055e2 <_printf_float+0x192>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e7f2      	b.n	80055e2 <_printf_float+0x192>
 80055fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005602:	4299      	cmp	r1, r3
 8005604:	db05      	blt.n	8005612 <_printf_float+0x1c2>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6121      	str	r1, [r4, #16]
 800560a:	07d8      	lsls	r0, r3, #31
 800560c:	d5ea      	bpl.n	80055e4 <_printf_float+0x194>
 800560e:	1c4b      	adds	r3, r1, #1
 8005610:	e7e7      	b.n	80055e2 <_printf_float+0x192>
 8005612:	2900      	cmp	r1, #0
 8005614:	bfd4      	ite	le
 8005616:	f1c1 0202 	rsble	r2, r1, #2
 800561a:	2201      	movgt	r2, #1
 800561c:	4413      	add	r3, r2
 800561e:	e7e0      	b.n	80055e2 <_printf_float+0x192>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	055a      	lsls	r2, r3, #21
 8005624:	d407      	bmi.n	8005636 <_printf_float+0x1e6>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	4642      	mov	r2, r8
 800562a:	4631      	mov	r1, r6
 800562c:	4628      	mov	r0, r5
 800562e:	47b8      	blx	r7
 8005630:	3001      	adds	r0, #1
 8005632:	d12b      	bne.n	800568c <_printf_float+0x23c>
 8005634:	e767      	b.n	8005506 <_printf_float+0xb6>
 8005636:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800563a:	f240 80dd 	bls.w	80057f8 <_printf_float+0x3a8>
 800563e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005642:	2200      	movs	r2, #0
 8005644:	2300      	movs	r3, #0
 8005646:	f7fb fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800564a:	2800      	cmp	r0, #0
 800564c:	d033      	beq.n	80056b6 <_printf_float+0x266>
 800564e:	4a37      	ldr	r2, [pc, #220]	@ (800572c <_printf_float+0x2dc>)
 8005650:	2301      	movs	r3, #1
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f af54 	beq.w	8005506 <_printf_float+0xb6>
 800565e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005662:	4543      	cmp	r3, r8
 8005664:	db02      	blt.n	800566c <_printf_float+0x21c>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	07d8      	lsls	r0, r3, #31
 800566a:	d50f      	bpl.n	800568c <_printf_float+0x23c>
 800566c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af45 	beq.w	8005506 <_printf_float+0xb6>
 800567c:	f04f 0900 	mov.w	r9, #0
 8005680:	f108 38ff 	add.w	r8, r8, #4294967295
 8005684:	f104 0a1a 	add.w	sl, r4, #26
 8005688:	45c8      	cmp	r8, r9
 800568a:	dc09      	bgt.n	80056a0 <_printf_float+0x250>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	079b      	lsls	r3, r3, #30
 8005690:	f100 8103 	bmi.w	800589a <_printf_float+0x44a>
 8005694:	68e0      	ldr	r0, [r4, #12]
 8005696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005698:	4298      	cmp	r0, r3
 800569a:	bfb8      	it	lt
 800569c:	4618      	movlt	r0, r3
 800569e:	e734      	b.n	800550a <_printf_float+0xba>
 80056a0:	2301      	movs	r3, #1
 80056a2:	4652      	mov	r2, sl
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af2b 	beq.w	8005506 <_printf_float+0xb6>
 80056b0:	f109 0901 	add.w	r9, r9, #1
 80056b4:	e7e8      	b.n	8005688 <_printf_float+0x238>
 80056b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dc39      	bgt.n	8005730 <_printf_float+0x2e0>
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <_printf_float+0x2dc>)
 80056be:	2301      	movs	r3, #1
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f af1d 	beq.w	8005506 <_printf_float+0xb6>
 80056cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056d0:	ea59 0303 	orrs.w	r3, r9, r3
 80056d4:	d102      	bne.n	80056dc <_printf_float+0x28c>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	07d9      	lsls	r1, r3, #31
 80056da:	d5d7      	bpl.n	800568c <_printf_float+0x23c>
 80056dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f af0d 	beq.w	8005506 <_printf_float+0xb6>
 80056ec:	f04f 0a00 	mov.w	sl, #0
 80056f0:	f104 0b1a 	add.w	fp, r4, #26
 80056f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f6:	425b      	negs	r3, r3
 80056f8:	4553      	cmp	r3, sl
 80056fa:	dc01      	bgt.n	8005700 <_printf_float+0x2b0>
 80056fc:	464b      	mov	r3, r9
 80056fe:	e793      	b.n	8005628 <_printf_float+0x1d8>
 8005700:	2301      	movs	r3, #1
 8005702:	465a      	mov	r2, fp
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f aefb 	beq.w	8005506 <_printf_float+0xb6>
 8005710:	f10a 0a01 	add.w	sl, sl, #1
 8005714:	e7ee      	b.n	80056f4 <_printf_float+0x2a4>
 8005716:	bf00      	nop
 8005718:	7fefffff 	.word	0x7fefffff
 800571c:	08009a20 	.word	0x08009a20
 8005720:	08009a24 	.word	0x08009a24
 8005724:	08009a28 	.word	0x08009a28
 8005728:	08009a2c 	.word	0x08009a2c
 800572c:	08009a30 	.word	0x08009a30
 8005730:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005732:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005736:	4553      	cmp	r3, sl
 8005738:	bfa8      	it	ge
 800573a:	4653      	movge	r3, sl
 800573c:	2b00      	cmp	r3, #0
 800573e:	4699      	mov	r9, r3
 8005740:	dc36      	bgt.n	80057b0 <_printf_float+0x360>
 8005742:	f04f 0b00 	mov.w	fp, #0
 8005746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574a:	f104 021a 	add.w	r2, r4, #26
 800574e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005750:	9306      	str	r3, [sp, #24]
 8005752:	eba3 0309 	sub.w	r3, r3, r9
 8005756:	455b      	cmp	r3, fp
 8005758:	dc31      	bgt.n	80057be <_printf_float+0x36e>
 800575a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575c:	459a      	cmp	sl, r3
 800575e:	dc3a      	bgt.n	80057d6 <_printf_float+0x386>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d437      	bmi.n	80057d6 <_printf_float+0x386>
 8005766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005768:	ebaa 0903 	sub.w	r9, sl, r3
 800576c:	9b06      	ldr	r3, [sp, #24]
 800576e:	ebaa 0303 	sub.w	r3, sl, r3
 8005772:	4599      	cmp	r9, r3
 8005774:	bfa8      	it	ge
 8005776:	4699      	movge	r9, r3
 8005778:	f1b9 0f00 	cmp.w	r9, #0
 800577c:	dc33      	bgt.n	80057e6 <_printf_float+0x396>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005786:	f104 0b1a 	add.w	fp, r4, #26
 800578a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578c:	ebaa 0303 	sub.w	r3, sl, r3
 8005790:	eba3 0309 	sub.w	r3, r3, r9
 8005794:	4543      	cmp	r3, r8
 8005796:	f77f af79 	ble.w	800568c <_printf_float+0x23c>
 800579a:	2301      	movs	r3, #1
 800579c:	465a      	mov	r2, fp
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f aeae 	beq.w	8005506 <_printf_float+0xb6>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	e7ec      	b.n	800578a <_printf_float+0x33a>
 80057b0:	4642      	mov	r2, r8
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	d1c2      	bne.n	8005742 <_printf_float+0x2f2>
 80057bc:	e6a3      	b.n	8005506 <_printf_float+0xb6>
 80057be:	2301      	movs	r3, #1
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	9206      	str	r2, [sp, #24]
 80057c6:	47b8      	blx	r7
 80057c8:	3001      	adds	r0, #1
 80057ca:	f43f ae9c 	beq.w	8005506 <_printf_float+0xb6>
 80057ce:	9a06      	ldr	r2, [sp, #24]
 80057d0:	f10b 0b01 	add.w	fp, fp, #1
 80057d4:	e7bb      	b.n	800574e <_printf_float+0x2fe>
 80057d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	d1c0      	bne.n	8005766 <_printf_float+0x316>
 80057e4:	e68f      	b.n	8005506 <_printf_float+0xb6>
 80057e6:	9a06      	ldr	r2, [sp, #24]
 80057e8:	464b      	mov	r3, r9
 80057ea:	4442      	add	r2, r8
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	d1c3      	bne.n	800577e <_printf_float+0x32e>
 80057f6:	e686      	b.n	8005506 <_printf_float+0xb6>
 80057f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057fc:	f1ba 0f01 	cmp.w	sl, #1
 8005800:	dc01      	bgt.n	8005806 <_printf_float+0x3b6>
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d536      	bpl.n	8005874 <_printf_float+0x424>
 8005806:	2301      	movs	r3, #1
 8005808:	4642      	mov	r2, r8
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae78 	beq.w	8005506 <_printf_float+0xb6>
 8005816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae70 	beq.w	8005506 <_printf_float+0xb6>
 8005826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800582a:	2200      	movs	r2, #0
 800582c:	2300      	movs	r3, #0
 800582e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005832:	f7fb f969 	bl	8000b08 <__aeabi_dcmpeq>
 8005836:	b9c0      	cbnz	r0, 800586a <_printf_float+0x41a>
 8005838:	4653      	mov	r3, sl
 800583a:	f108 0201 	add.w	r2, r8, #1
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	d10c      	bne.n	8005862 <_printf_float+0x412>
 8005848:	e65d      	b.n	8005506 <_printf_float+0xb6>
 800584a:	2301      	movs	r3, #1
 800584c:	465a      	mov	r2, fp
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f ae56 	beq.w	8005506 <_printf_float+0xb6>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	45d0      	cmp	r8, sl
 8005860:	dbf3      	blt.n	800584a <_printf_float+0x3fa>
 8005862:	464b      	mov	r3, r9
 8005864:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005868:	e6df      	b.n	800562a <_printf_float+0x1da>
 800586a:	f04f 0800 	mov.w	r8, #0
 800586e:	f104 0b1a 	add.w	fp, r4, #26
 8005872:	e7f4      	b.n	800585e <_printf_float+0x40e>
 8005874:	2301      	movs	r3, #1
 8005876:	4642      	mov	r2, r8
 8005878:	e7e1      	b.n	800583e <_printf_float+0x3ee>
 800587a:	2301      	movs	r3, #1
 800587c:	464a      	mov	r2, r9
 800587e:	4631      	mov	r1, r6
 8005880:	4628      	mov	r0, r5
 8005882:	47b8      	blx	r7
 8005884:	3001      	adds	r0, #1
 8005886:	f43f ae3e 	beq.w	8005506 <_printf_float+0xb6>
 800588a:	f108 0801 	add.w	r8, r8, #1
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005892:	1a5b      	subs	r3, r3, r1
 8005894:	4543      	cmp	r3, r8
 8005896:	dcf0      	bgt.n	800587a <_printf_float+0x42a>
 8005898:	e6fc      	b.n	8005694 <_printf_float+0x244>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	f104 0919 	add.w	r9, r4, #25
 80058a2:	e7f4      	b.n	800588e <_printf_float+0x43e>

080058a4 <_printf_common>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	4616      	mov	r6, r2
 80058aa:	4698      	mov	r8, r3
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	bfb8      	it	lt
 80058b8:	4613      	movlt	r3, r2
 80058ba:	6033      	str	r3, [r6, #0]
 80058bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058c0:	4607      	mov	r7, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	b10a      	cbz	r2, 80058ca <_printf_common+0x26>
 80058c6:	3301      	adds	r3, #1
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	0699      	lsls	r1, r3, #26
 80058ce:	bf42      	ittt	mi
 80058d0:	6833      	ldrmi	r3, [r6, #0]
 80058d2:	3302      	addmi	r3, #2
 80058d4:	6033      	strmi	r3, [r6, #0]
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	f015 0506 	ands.w	r5, r5, #6
 80058dc:	d106      	bne.n	80058ec <_printf_common+0x48>
 80058de:	f104 0a19 	add.w	sl, r4, #25
 80058e2:	68e3      	ldr	r3, [r4, #12]
 80058e4:	6832      	ldr	r2, [r6, #0]
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	42ab      	cmp	r3, r5
 80058ea:	dc26      	bgt.n	800593a <_printf_common+0x96>
 80058ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	3b00      	subs	r3, #0
 80058f4:	bf18      	it	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	0692      	lsls	r2, r2, #26
 80058fa:	d42b      	bmi.n	8005954 <_printf_common+0xb0>
 80058fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005900:	4641      	mov	r1, r8
 8005902:	4638      	mov	r0, r7
 8005904:	47c8      	blx	r9
 8005906:	3001      	adds	r0, #1
 8005908:	d01e      	beq.n	8005948 <_printf_common+0xa4>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	f003 0306 	and.w	r3, r3, #6
 8005912:	2b04      	cmp	r3, #4
 8005914:	bf02      	ittt	eq
 8005916:	68e5      	ldreq	r5, [r4, #12]
 8005918:	6833      	ldreq	r3, [r6, #0]
 800591a:	1aed      	subeq	r5, r5, r3
 800591c:	68a3      	ldr	r3, [r4, #8]
 800591e:	bf0c      	ite	eq
 8005920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005924:	2500      	movne	r5, #0
 8005926:	4293      	cmp	r3, r2
 8005928:	bfc4      	itt	gt
 800592a:	1a9b      	subgt	r3, r3, r2
 800592c:	18ed      	addgt	r5, r5, r3
 800592e:	2600      	movs	r6, #0
 8005930:	341a      	adds	r4, #26
 8005932:	42b5      	cmp	r5, r6
 8005934:	d11a      	bne.n	800596c <_printf_common+0xc8>
 8005936:	2000      	movs	r0, #0
 8005938:	e008      	b.n	800594c <_printf_common+0xa8>
 800593a:	2301      	movs	r3, #1
 800593c:	4652      	mov	r2, sl
 800593e:	4641      	mov	r1, r8
 8005940:	4638      	mov	r0, r7
 8005942:	47c8      	blx	r9
 8005944:	3001      	adds	r0, #1
 8005946:	d103      	bne.n	8005950 <_printf_common+0xac>
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005950:	3501      	adds	r5, #1
 8005952:	e7c6      	b.n	80058e2 <_printf_common+0x3e>
 8005954:	18e1      	adds	r1, r4, r3
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	2030      	movs	r0, #48	@ 0x30
 800595a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800595e:	4422      	add	r2, r4
 8005960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005968:	3302      	adds	r3, #2
 800596a:	e7c7      	b.n	80058fc <_printf_common+0x58>
 800596c:	2301      	movs	r3, #1
 800596e:	4622      	mov	r2, r4
 8005970:	4641      	mov	r1, r8
 8005972:	4638      	mov	r0, r7
 8005974:	47c8      	blx	r9
 8005976:	3001      	adds	r0, #1
 8005978:	d0e6      	beq.n	8005948 <_printf_common+0xa4>
 800597a:	3601      	adds	r6, #1
 800597c:	e7d9      	b.n	8005932 <_printf_common+0x8e>
	...

08005980 <_printf_i>:
 8005980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	7e0f      	ldrb	r7, [r1, #24]
 8005986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005988:	2f78      	cmp	r7, #120	@ 0x78
 800598a:	4691      	mov	r9, r2
 800598c:	4680      	mov	r8, r0
 800598e:	460c      	mov	r4, r1
 8005990:	469a      	mov	sl, r3
 8005992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005996:	d807      	bhi.n	80059a8 <_printf_i+0x28>
 8005998:	2f62      	cmp	r7, #98	@ 0x62
 800599a:	d80a      	bhi.n	80059b2 <_printf_i+0x32>
 800599c:	2f00      	cmp	r7, #0
 800599e:	f000 80d2 	beq.w	8005b46 <_printf_i+0x1c6>
 80059a2:	2f58      	cmp	r7, #88	@ 0x58
 80059a4:	f000 80b9 	beq.w	8005b1a <_printf_i+0x19a>
 80059a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059b0:	e03a      	b.n	8005a28 <_printf_i+0xa8>
 80059b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059b6:	2b15      	cmp	r3, #21
 80059b8:	d8f6      	bhi.n	80059a8 <_printf_i+0x28>
 80059ba:	a101      	add	r1, pc, #4	@ (adr r1, 80059c0 <_printf_i+0x40>)
 80059bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059c0:	08005a19 	.word	0x08005a19
 80059c4:	08005a2d 	.word	0x08005a2d
 80059c8:	080059a9 	.word	0x080059a9
 80059cc:	080059a9 	.word	0x080059a9
 80059d0:	080059a9 	.word	0x080059a9
 80059d4:	080059a9 	.word	0x080059a9
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	080059a9 	.word	0x080059a9
 80059e0:	080059a9 	.word	0x080059a9
 80059e4:	080059a9 	.word	0x080059a9
 80059e8:	080059a9 	.word	0x080059a9
 80059ec:	08005b2d 	.word	0x08005b2d
 80059f0:	08005a57 	.word	0x08005a57
 80059f4:	08005ae7 	.word	0x08005ae7
 80059f8:	080059a9 	.word	0x080059a9
 80059fc:	080059a9 	.word	0x080059a9
 8005a00:	08005b4f 	.word	0x08005b4f
 8005a04:	080059a9 	.word	0x080059a9
 8005a08:	08005a57 	.word	0x08005a57
 8005a0c:	080059a9 	.word	0x080059a9
 8005a10:	080059a9 	.word	0x080059a9
 8005a14:	08005aef 	.word	0x08005aef
 8005a18:	6833      	ldr	r3, [r6, #0]
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6032      	str	r2, [r6, #0]
 8005a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e09d      	b.n	8005b68 <_printf_i+0x1e8>
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1d19      	adds	r1, r3, #4
 8005a32:	6031      	str	r1, [r6, #0]
 8005a34:	0606      	lsls	r6, r0, #24
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0xbc>
 8005a38:	681d      	ldr	r5, [r3, #0]
 8005a3a:	e003      	b.n	8005a44 <_printf_i+0xc4>
 8005a3c:	0645      	lsls	r5, r0, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0xb8>
 8005a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	da03      	bge.n	8005a50 <_printf_i+0xd0>
 8005a48:	232d      	movs	r3, #45	@ 0x2d
 8005a4a:	426d      	negs	r5, r5
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a50:	4859      	ldr	r0, [pc, #356]	@ (8005bb8 <_printf_i+0x238>)
 8005a52:	230a      	movs	r3, #10
 8005a54:	e011      	b.n	8005a7a <_printf_i+0xfa>
 8005a56:	6821      	ldr	r1, [r4, #0]
 8005a58:	6833      	ldr	r3, [r6, #0]
 8005a5a:	0608      	lsls	r0, r1, #24
 8005a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a60:	d402      	bmi.n	8005a68 <_printf_i+0xe8>
 8005a62:	0649      	lsls	r1, r1, #25
 8005a64:	bf48      	it	mi
 8005a66:	b2ad      	uxthmi	r5, r5
 8005a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a6a:	4853      	ldr	r0, [pc, #332]	@ (8005bb8 <_printf_i+0x238>)
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	bf14      	ite	ne
 8005a70:	230a      	movne	r3, #10
 8005a72:	2308      	moveq	r3, #8
 8005a74:	2100      	movs	r1, #0
 8005a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a7a:	6866      	ldr	r6, [r4, #4]
 8005a7c:	60a6      	str	r6, [r4, #8]
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	bfa2      	ittt	ge
 8005a82:	6821      	ldrge	r1, [r4, #0]
 8005a84:	f021 0104 	bicge.w	r1, r1, #4
 8005a88:	6021      	strge	r1, [r4, #0]
 8005a8a:	b90d      	cbnz	r5, 8005a90 <_printf_i+0x110>
 8005a8c:	2e00      	cmp	r6, #0
 8005a8e:	d04b      	beq.n	8005b28 <_printf_i+0x1a8>
 8005a90:	4616      	mov	r6, r2
 8005a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a96:	fb03 5711 	mls	r7, r3, r1, r5
 8005a9a:	5dc7      	ldrb	r7, [r0, r7]
 8005a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005aa0:	462f      	mov	r7, r5
 8005aa2:	42bb      	cmp	r3, r7
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	d9f4      	bls.n	8005a92 <_printf_i+0x112>
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d10b      	bne.n	8005ac4 <_printf_i+0x144>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	07df      	lsls	r7, r3, #31
 8005ab0:	d508      	bpl.n	8005ac4 <_printf_i+0x144>
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	6861      	ldr	r1, [r4, #4]
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	bfde      	ittt	le
 8005aba:	2330      	movle	r3, #48	@ 0x30
 8005abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ac4:	1b92      	subs	r2, r2, r6
 8005ac6:	6122      	str	r2, [r4, #16]
 8005ac8:	f8cd a000 	str.w	sl, [sp]
 8005acc:	464b      	mov	r3, r9
 8005ace:	aa03      	add	r2, sp, #12
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	f7ff fee6 	bl	80058a4 <_printf_common>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d14a      	bne.n	8005b72 <_printf_i+0x1f2>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	b004      	add	sp, #16
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	f043 0320 	orr.w	r3, r3, #32
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	4833      	ldr	r0, [pc, #204]	@ (8005bbc <_printf_i+0x23c>)
 8005af0:	2778      	movs	r7, #120	@ 0x78
 8005af2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	6831      	ldr	r1, [r6, #0]
 8005afa:	061f      	lsls	r7, r3, #24
 8005afc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b00:	d402      	bmi.n	8005b08 <_printf_i+0x188>
 8005b02:	065f      	lsls	r7, r3, #25
 8005b04:	bf48      	it	mi
 8005b06:	b2ad      	uxthmi	r5, r5
 8005b08:	6031      	str	r1, [r6, #0]
 8005b0a:	07d9      	lsls	r1, r3, #31
 8005b0c:	bf44      	itt	mi
 8005b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b12:	6023      	strmi	r3, [r4, #0]
 8005b14:	b11d      	cbz	r5, 8005b1e <_printf_i+0x19e>
 8005b16:	2310      	movs	r3, #16
 8005b18:	e7ac      	b.n	8005a74 <_printf_i+0xf4>
 8005b1a:	4827      	ldr	r0, [pc, #156]	@ (8005bb8 <_printf_i+0x238>)
 8005b1c:	e7e9      	b.n	8005af2 <_printf_i+0x172>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f023 0320 	bic.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	e7f6      	b.n	8005b16 <_printf_i+0x196>
 8005b28:	4616      	mov	r6, r2
 8005b2a:	e7bd      	b.n	8005aa8 <_printf_i+0x128>
 8005b2c:	6833      	ldr	r3, [r6, #0]
 8005b2e:	6825      	ldr	r5, [r4, #0]
 8005b30:	6961      	ldr	r1, [r4, #20]
 8005b32:	1d18      	adds	r0, r3, #4
 8005b34:	6030      	str	r0, [r6, #0]
 8005b36:	062e      	lsls	r6, r5, #24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	d501      	bpl.n	8005b40 <_printf_i+0x1c0>
 8005b3c:	6019      	str	r1, [r3, #0]
 8005b3e:	e002      	b.n	8005b46 <_printf_i+0x1c6>
 8005b40:	0668      	lsls	r0, r5, #25
 8005b42:	d5fb      	bpl.n	8005b3c <_printf_i+0x1bc>
 8005b44:	8019      	strh	r1, [r3, #0]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	4616      	mov	r6, r2
 8005b4c:	e7bc      	b.n	8005ac8 <_printf_i+0x148>
 8005b4e:	6833      	ldr	r3, [r6, #0]
 8005b50:	1d1a      	adds	r2, r3, #4
 8005b52:	6032      	str	r2, [r6, #0]
 8005b54:	681e      	ldr	r6, [r3, #0]
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7fa fb58 	bl	8000210 <memchr>
 8005b60:	b108      	cbz	r0, 8005b66 <_printf_i+0x1e6>
 8005b62:	1b80      	subs	r0, r0, r6
 8005b64:	6060      	str	r0, [r4, #4]
 8005b66:	6863      	ldr	r3, [r4, #4]
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b70:	e7aa      	b.n	8005ac8 <_printf_i+0x148>
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	4632      	mov	r2, r6
 8005b76:	4649      	mov	r1, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	47d0      	blx	sl
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d0ad      	beq.n	8005adc <_printf_i+0x15c>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	079b      	lsls	r3, r3, #30
 8005b84:	d413      	bmi.n	8005bae <_printf_i+0x22e>
 8005b86:	68e0      	ldr	r0, [r4, #12]
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	4298      	cmp	r0, r3
 8005b8c:	bfb8      	it	lt
 8005b8e:	4618      	movlt	r0, r3
 8005b90:	e7a6      	b.n	8005ae0 <_printf_i+0x160>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4632      	mov	r2, r6
 8005b96:	4649      	mov	r1, r9
 8005b98:	4640      	mov	r0, r8
 8005b9a:	47d0      	blx	sl
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d09d      	beq.n	8005adc <_printf_i+0x15c>
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	9903      	ldr	r1, [sp, #12]
 8005ba6:	1a5b      	subs	r3, r3, r1
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dcf2      	bgt.n	8005b92 <_printf_i+0x212>
 8005bac:	e7eb      	b.n	8005b86 <_printf_i+0x206>
 8005bae:	2500      	movs	r5, #0
 8005bb0:	f104 0619 	add.w	r6, r4, #25
 8005bb4:	e7f5      	b.n	8005ba2 <_printf_i+0x222>
 8005bb6:	bf00      	nop
 8005bb8:	08009a32 	.word	0x08009a32
 8005bbc:	08009a43 	.word	0x08009a43

08005bc0 <_scanf_float>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	4617      	mov	r7, r2
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	688b      	ldr	r3, [r1, #8]
 8005bcc:	1e5a      	subs	r2, r3, #1
 8005bce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005bd2:	bf81      	itttt	hi
 8005bd4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005bd8:	eb03 0b05 	addhi.w	fp, r3, r5
 8005bdc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005be0:	608b      	strhi	r3, [r1, #8]
 8005be2:	680b      	ldr	r3, [r1, #0]
 8005be4:	460a      	mov	r2, r1
 8005be6:	f04f 0500 	mov.w	r5, #0
 8005bea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005bee:	f842 3b1c 	str.w	r3, [r2], #28
 8005bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	bf98      	it	ls
 8005bfc:	f04f 0b00 	movls.w	fp, #0
 8005c00:	9201      	str	r2, [sp, #4]
 8005c02:	4616      	mov	r6, r2
 8005c04:	46aa      	mov	sl, r5
 8005c06:	46a9      	mov	r9, r5
 8005c08:	9502      	str	r5, [sp, #8]
 8005c0a:	68a2      	ldr	r2, [r4, #8]
 8005c0c:	b152      	cbz	r2, 8005c24 <_scanf_float+0x64>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c14:	d864      	bhi.n	8005ce0 <_scanf_float+0x120>
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	d83c      	bhi.n	8005c94 <_scanf_float+0xd4>
 8005c1a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c1e:	b2c8      	uxtb	r0, r1
 8005c20:	280e      	cmp	r0, #14
 8005c22:	d93a      	bls.n	8005c9a <_scanf_float+0xda>
 8005c24:	f1b9 0f00 	cmp.w	r9, #0
 8005c28:	d003      	beq.n	8005c32 <_scanf_float+0x72>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c36:	f1ba 0f01 	cmp.w	sl, #1
 8005c3a:	f200 8117 	bhi.w	8005e6c <_scanf_float+0x2ac>
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	429e      	cmp	r6, r3
 8005c42:	f200 8108 	bhi.w	8005e56 <_scanf_float+0x296>
 8005c46:	2001      	movs	r0, #1
 8005c48:	b007      	add	sp, #28
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005c52:	2a0d      	cmp	r2, #13
 8005c54:	d8e6      	bhi.n	8005c24 <_scanf_float+0x64>
 8005c56:	a101      	add	r1, pc, #4	@ (adr r1, 8005c5c <_scanf_float+0x9c>)
 8005c58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c5c:	08005da3 	.word	0x08005da3
 8005c60:	08005c25 	.word	0x08005c25
 8005c64:	08005c25 	.word	0x08005c25
 8005c68:	08005c25 	.word	0x08005c25
 8005c6c:	08005e03 	.word	0x08005e03
 8005c70:	08005ddb 	.word	0x08005ddb
 8005c74:	08005c25 	.word	0x08005c25
 8005c78:	08005c25 	.word	0x08005c25
 8005c7c:	08005db1 	.word	0x08005db1
 8005c80:	08005c25 	.word	0x08005c25
 8005c84:	08005c25 	.word	0x08005c25
 8005c88:	08005c25 	.word	0x08005c25
 8005c8c:	08005c25 	.word	0x08005c25
 8005c90:	08005d69 	.word	0x08005d69
 8005c94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c98:	e7db      	b.n	8005c52 <_scanf_float+0x92>
 8005c9a:	290e      	cmp	r1, #14
 8005c9c:	d8c2      	bhi.n	8005c24 <_scanf_float+0x64>
 8005c9e:	a001      	add	r0, pc, #4	@ (adr r0, 8005ca4 <_scanf_float+0xe4>)
 8005ca0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ca4:	08005d59 	.word	0x08005d59
 8005ca8:	08005c25 	.word	0x08005c25
 8005cac:	08005d59 	.word	0x08005d59
 8005cb0:	08005def 	.word	0x08005def
 8005cb4:	08005c25 	.word	0x08005c25
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d3f 	.word	0x08005d3f
 8005cc0:	08005d3f 	.word	0x08005d3f
 8005cc4:	08005d3f 	.word	0x08005d3f
 8005cc8:	08005d3f 	.word	0x08005d3f
 8005ccc:	08005d3f 	.word	0x08005d3f
 8005cd0:	08005d3f 	.word	0x08005d3f
 8005cd4:	08005d3f 	.word	0x08005d3f
 8005cd8:	08005d3f 	.word	0x08005d3f
 8005cdc:	08005d3f 	.word	0x08005d3f
 8005ce0:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ce2:	d809      	bhi.n	8005cf8 <_scanf_float+0x138>
 8005ce4:	2b60      	cmp	r3, #96	@ 0x60
 8005ce6:	d8b2      	bhi.n	8005c4e <_scanf_float+0x8e>
 8005ce8:	2b54      	cmp	r3, #84	@ 0x54
 8005cea:	d07b      	beq.n	8005de4 <_scanf_float+0x224>
 8005cec:	2b59      	cmp	r3, #89	@ 0x59
 8005cee:	d199      	bne.n	8005c24 <_scanf_float+0x64>
 8005cf0:	2d07      	cmp	r5, #7
 8005cf2:	d197      	bne.n	8005c24 <_scanf_float+0x64>
 8005cf4:	2508      	movs	r5, #8
 8005cf6:	e02c      	b.n	8005d52 <_scanf_float+0x192>
 8005cf8:	2b74      	cmp	r3, #116	@ 0x74
 8005cfa:	d073      	beq.n	8005de4 <_scanf_float+0x224>
 8005cfc:	2b79      	cmp	r3, #121	@ 0x79
 8005cfe:	e7f6      	b.n	8005cee <_scanf_float+0x12e>
 8005d00:	6821      	ldr	r1, [r4, #0]
 8005d02:	05c8      	lsls	r0, r1, #23
 8005d04:	d51b      	bpl.n	8005d3e <_scanf_float+0x17e>
 8005d06:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d0a:	6021      	str	r1, [r4, #0]
 8005d0c:	f109 0901 	add.w	r9, r9, #1
 8005d10:	f1bb 0f00 	cmp.w	fp, #0
 8005d14:	d003      	beq.n	8005d1e <_scanf_float+0x15e>
 8005d16:	3201      	adds	r2, #1
 8005d18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d1c:	60a2      	str	r2, [r4, #8]
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	f340 8087 	ble.w	8005e44 <_scanf_float+0x284>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	e765      	b.n	8005c0a <_scanf_float+0x4a>
 8005d3e:	eb1a 0105 	adds.w	r1, sl, r5
 8005d42:	f47f af6f 	bne.w	8005c24 <_scanf_float+0x64>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	460d      	mov	r5, r1
 8005d50:	468a      	mov	sl, r1
 8005d52:	f806 3b01 	strb.w	r3, [r6], #1
 8005d56:	e7e2      	b.n	8005d1e <_scanf_float+0x15e>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	0610      	lsls	r0, r2, #24
 8005d5c:	f57f af62 	bpl.w	8005c24 <_scanf_float+0x64>
 8005d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d64:	6022      	str	r2, [r4, #0]
 8005d66:	e7f4      	b.n	8005d52 <_scanf_float+0x192>
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d10e      	bne.n	8005d8c <_scanf_float+0x1cc>
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	d10e      	bne.n	8005d92 <_scanf_float+0x1d2>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d7a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d7e:	d108      	bne.n	8005d92 <_scanf_float+0x1d2>
 8005d80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d84:	6022      	str	r2, [r4, #0]
 8005d86:	f04f 0a01 	mov.w	sl, #1
 8005d8a:	e7e2      	b.n	8005d52 <_scanf_float+0x192>
 8005d8c:	f1ba 0f02 	cmp.w	sl, #2
 8005d90:	d055      	beq.n	8005e3e <_scanf_float+0x27e>
 8005d92:	2d01      	cmp	r5, #1
 8005d94:	d002      	beq.n	8005d9c <_scanf_float+0x1dc>
 8005d96:	2d04      	cmp	r5, #4
 8005d98:	f47f af44 	bne.w	8005c24 <_scanf_float+0x64>
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	b2ed      	uxtb	r5, r5
 8005da0:	e7d7      	b.n	8005d52 <_scanf_float+0x192>
 8005da2:	f1ba 0f01 	cmp.w	sl, #1
 8005da6:	f47f af3d 	bne.w	8005c24 <_scanf_float+0x64>
 8005daa:	f04f 0a02 	mov.w	sl, #2
 8005dae:	e7d0      	b.n	8005d52 <_scanf_float+0x192>
 8005db0:	b97d      	cbnz	r5, 8005dd2 <_scanf_float+0x212>
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	f47f af38 	bne.w	8005c2a <_scanf_float+0x6a>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005dc0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005dc4:	f040 8108 	bne.w	8005fd8 <_scanf_float+0x418>
 8005dc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dcc:	6022      	str	r2, [r4, #0]
 8005dce:	2501      	movs	r5, #1
 8005dd0:	e7bf      	b.n	8005d52 <_scanf_float+0x192>
 8005dd2:	2d03      	cmp	r5, #3
 8005dd4:	d0e2      	beq.n	8005d9c <_scanf_float+0x1dc>
 8005dd6:	2d05      	cmp	r5, #5
 8005dd8:	e7de      	b.n	8005d98 <_scanf_float+0x1d8>
 8005dda:	2d02      	cmp	r5, #2
 8005ddc:	f47f af22 	bne.w	8005c24 <_scanf_float+0x64>
 8005de0:	2503      	movs	r5, #3
 8005de2:	e7b6      	b.n	8005d52 <_scanf_float+0x192>
 8005de4:	2d06      	cmp	r5, #6
 8005de6:	f47f af1d 	bne.w	8005c24 <_scanf_float+0x64>
 8005dea:	2507      	movs	r5, #7
 8005dec:	e7b1      	b.n	8005d52 <_scanf_float+0x192>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	0591      	lsls	r1, r2, #22
 8005df2:	f57f af17 	bpl.w	8005c24 <_scanf_float+0x64>
 8005df6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e00:	e7a7      	b.n	8005d52 <_scanf_float+0x192>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e08:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e0c:	d006      	beq.n	8005e1c <_scanf_float+0x25c>
 8005e0e:	0550      	lsls	r0, r2, #21
 8005e10:	f57f af08 	bpl.w	8005c24 <_scanf_float+0x64>
 8005e14:	f1b9 0f00 	cmp.w	r9, #0
 8005e18:	f000 80de 	beq.w	8005fd8 <_scanf_float+0x418>
 8005e1c:	0591      	lsls	r1, r2, #22
 8005e1e:	bf58      	it	pl
 8005e20:	9902      	ldrpl	r1, [sp, #8]
 8005e22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e26:	bf58      	it	pl
 8005e28:	eba9 0101 	subpl.w	r1, r9, r1
 8005e2c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005e30:	bf58      	it	pl
 8005e32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	f04f 0900 	mov.w	r9, #0
 8005e3c:	e789      	b.n	8005d52 <_scanf_float+0x192>
 8005e3e:	f04f 0a03 	mov.w	sl, #3
 8005e42:	e786      	b.n	8005d52 <_scanf_float+0x192>
 8005e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4798      	blx	r3
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f aedb 	beq.w	8005c0a <_scanf_float+0x4a>
 8005e54:	e6e6      	b.n	8005c24 <_scanf_float+0x64>
 8005e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e5e:	463a      	mov	r2, r7
 8005e60:	4640      	mov	r0, r8
 8005e62:	4798      	blx	r3
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	e6e8      	b.n	8005c3e <_scanf_float+0x7e>
 8005e6c:	1e6b      	subs	r3, r5, #1
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d824      	bhi.n	8005ebc <_scanf_float+0x2fc>
 8005e72:	2d02      	cmp	r5, #2
 8005e74:	d836      	bhi.n	8005ee4 <_scanf_float+0x324>
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	f67f aee4 	bls.w	8005c46 <_scanf_float+0x86>
 8005e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e86:	463a      	mov	r2, r7
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4798      	blx	r3
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	e7f0      	b.n	8005e76 <_scanf_float+0x2b6>
 8005e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e98:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4798      	blx	r3
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eac:	fa5f fa8a 	uxtb.w	sl, sl
 8005eb0:	f1ba 0f02 	cmp.w	sl, #2
 8005eb4:	d1ee      	bne.n	8005e94 <_scanf_float+0x2d4>
 8005eb6:	3d03      	subs	r5, #3
 8005eb8:	b2ed      	uxtb	r5, r5
 8005eba:	1b76      	subs	r6, r6, r5
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	05da      	lsls	r2, r3, #23
 8005ec0:	d530      	bpl.n	8005f24 <_scanf_float+0x364>
 8005ec2:	055b      	lsls	r3, r3, #21
 8005ec4:	d511      	bpl.n	8005eea <_scanf_float+0x32a>
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	429e      	cmp	r6, r3
 8005eca:	f67f aebc 	bls.w	8005c46 <_scanf_float+0x86>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4798      	blx	r3
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e7f0      	b.n	8005ec6 <_scanf_float+0x306>
 8005ee4:	46aa      	mov	sl, r5
 8005ee6:	46b3      	mov	fp, r6
 8005ee8:	e7de      	b.n	8005ea8 <_scanf_float+0x2e8>
 8005eea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	2965      	cmp	r1, #101	@ 0x65
 8005ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ef6:	f106 35ff 	add.w	r5, r6, #4294967295
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	d00c      	beq.n	8005f18 <_scanf_float+0x358>
 8005efe:	2945      	cmp	r1, #69	@ 0x45
 8005f00:	d00a      	beq.n	8005f18 <_scanf_float+0x358>
 8005f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f06:	463a      	mov	r2, r7
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4798      	blx	r3
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	1eb5      	subs	r5, r6, #2
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f1c:	463a      	mov	r2, r7
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4798      	blx	r3
 8005f22:	462e      	mov	r6, r5
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	f012 0210 	ands.w	r2, r2, #16
 8005f2a:	d001      	beq.n	8005f30 <_scanf_float+0x370>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	e68b      	b.n	8005c48 <_scanf_float+0x88>
 8005f30:	7032      	strb	r2, [r6, #0]
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d11c      	bne.n	8005f78 <_scanf_float+0x3b8>
 8005f3e:	9b02      	ldr	r3, [sp, #8]
 8005f40:	454b      	cmp	r3, r9
 8005f42:	eba3 0209 	sub.w	r2, r3, r9
 8005f46:	d123      	bne.n	8005f90 <_scanf_float+0x3d0>
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	f002 fbf7 	bl	8008740 <_strtod_r>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	6821      	ldr	r1, [r4, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f011 0f02 	tst.w	r1, #2
 8005f5c:	ec57 6b10 	vmov	r6, r7, d0
 8005f60:	f103 0204 	add.w	r2, r3, #4
 8005f64:	d01f      	beq.n	8005fa6 <_scanf_float+0x3e6>
 8005f66:	9903      	ldr	r1, [sp, #12]
 8005f68:	600a      	str	r2, [r1, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	e9c3 6700 	strd	r6, r7, [r3]
 8005f70:	68e3      	ldr	r3, [r4, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60e3      	str	r3, [r4, #12]
 8005f76:	e7d9      	b.n	8005f2c <_scanf_float+0x36c>
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0e4      	beq.n	8005f48 <_scanf_float+0x388>
 8005f7e:	9905      	ldr	r1, [sp, #20]
 8005f80:	230a      	movs	r3, #10
 8005f82:	3101      	adds	r1, #1
 8005f84:	4640      	mov	r0, r8
 8005f86:	f002 fc5b 	bl	8008840 <_strtol_r>
 8005f8a:	9b04      	ldr	r3, [sp, #16]
 8005f8c:	9e05      	ldr	r6, [sp, #20]
 8005f8e:	1ac2      	subs	r2, r0, r3
 8005f90:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f94:	429e      	cmp	r6, r3
 8005f96:	bf28      	it	cs
 8005f98:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f9c:	4910      	ldr	r1, [pc, #64]	@ (8005fe0 <_scanf_float+0x420>)
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f8e4 	bl	800616c <siprintf>
 8005fa4:	e7d0      	b.n	8005f48 <_scanf_float+0x388>
 8005fa6:	f011 0f04 	tst.w	r1, #4
 8005faa:	9903      	ldr	r1, [sp, #12]
 8005fac:	600a      	str	r2, [r1, #0]
 8005fae:	d1dc      	bne.n	8005f6a <_scanf_float+0x3aa>
 8005fb0:	681d      	ldr	r5, [r3, #0]
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa fdd7 	bl	8000b6c <__aeabi_dcmpun>
 8005fbe:	b128      	cbz	r0, 8005fcc <_scanf_float+0x40c>
 8005fc0:	4808      	ldr	r0, [pc, #32]	@ (8005fe4 <_scanf_float+0x424>)
 8005fc2:	f000 f9b7 	bl	8006334 <nanf>
 8005fc6:	ed85 0a00 	vstr	s0, [r5]
 8005fca:	e7d1      	b.n	8005f70 <_scanf_float+0x3b0>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fe2a 	bl	8000c28 <__aeabi_d2f>
 8005fd4:	6028      	str	r0, [r5, #0]
 8005fd6:	e7cb      	b.n	8005f70 <_scanf_float+0x3b0>
 8005fd8:	f04f 0900 	mov.w	r9, #0
 8005fdc:	e629      	b.n	8005c32 <_scanf_float+0x72>
 8005fde:	bf00      	nop
 8005fe0:	08009a54 	.word	0x08009a54
 8005fe4:	08009ded 	.word	0x08009ded

08005fe8 <std>:
 8005fe8:	2300      	movs	r3, #0
 8005fea:	b510      	push	{r4, lr}
 8005fec:	4604      	mov	r4, r0
 8005fee:	e9c0 3300 	strd	r3, r3, [r0]
 8005ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ff6:	6083      	str	r3, [r0, #8]
 8005ff8:	8181      	strh	r1, [r0, #12]
 8005ffa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ffc:	81c2      	strh	r2, [r0, #14]
 8005ffe:	6183      	str	r3, [r0, #24]
 8006000:	4619      	mov	r1, r3
 8006002:	2208      	movs	r2, #8
 8006004:	305c      	adds	r0, #92	@ 0x5c
 8006006:	f000 f914 	bl	8006232 <memset>
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <std+0x58>)
 800600c:	6263      	str	r3, [r4, #36]	@ 0x24
 800600e:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <std+0x5c>)
 8006010:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <std+0x60>)
 8006014:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <std+0x64>)
 8006018:	6323      	str	r3, [r4, #48]	@ 0x30
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <std+0x68>)
 800601c:	6224      	str	r4, [r4, #32]
 800601e:	429c      	cmp	r4, r3
 8006020:	d006      	beq.n	8006030 <std+0x48>
 8006022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006026:	4294      	cmp	r4, r2
 8006028:	d002      	beq.n	8006030 <std+0x48>
 800602a:	33d0      	adds	r3, #208	@ 0xd0
 800602c:	429c      	cmp	r4, r3
 800602e:	d105      	bne.n	800603c <std+0x54>
 8006030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006038:	f000 b978 	b.w	800632c <__retarget_lock_init_recursive>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	080061ad 	.word	0x080061ad
 8006044:	080061cf 	.word	0x080061cf
 8006048:	08006207 	.word	0x08006207
 800604c:	0800622b 	.word	0x0800622b
 8006050:	20000348 	.word	0x20000348

08006054 <stdio_exit_handler>:
 8006054:	4a02      	ldr	r2, [pc, #8]	@ (8006060 <stdio_exit_handler+0xc>)
 8006056:	4903      	ldr	r1, [pc, #12]	@ (8006064 <stdio_exit_handler+0x10>)
 8006058:	4803      	ldr	r0, [pc, #12]	@ (8006068 <stdio_exit_handler+0x14>)
 800605a:	f000 b869 	b.w	8006130 <_fwalk_sglue>
 800605e:	bf00      	nop
 8006060:	20000014 	.word	0x20000014
 8006064:	08008bfd 	.word	0x08008bfd
 8006068:	20000024 	.word	0x20000024

0800606c <cleanup_stdio>:
 800606c:	6841      	ldr	r1, [r0, #4]
 800606e:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <cleanup_stdio+0x34>)
 8006070:	4299      	cmp	r1, r3
 8006072:	b510      	push	{r4, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	d001      	beq.n	800607c <cleanup_stdio+0x10>
 8006078:	f002 fdc0 	bl	8008bfc <_fflush_r>
 800607c:	68a1      	ldr	r1, [r4, #8]
 800607e:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <cleanup_stdio+0x38>)
 8006080:	4299      	cmp	r1, r3
 8006082:	d002      	beq.n	800608a <cleanup_stdio+0x1e>
 8006084:	4620      	mov	r0, r4
 8006086:	f002 fdb9 	bl	8008bfc <_fflush_r>
 800608a:	68e1      	ldr	r1, [r4, #12]
 800608c:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <cleanup_stdio+0x3c>)
 800608e:	4299      	cmp	r1, r3
 8006090:	d004      	beq.n	800609c <cleanup_stdio+0x30>
 8006092:	4620      	mov	r0, r4
 8006094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006098:	f002 bdb0 	b.w	8008bfc <_fflush_r>
 800609c:	bd10      	pop	{r4, pc}
 800609e:	bf00      	nop
 80060a0:	20000348 	.word	0x20000348
 80060a4:	200003b0 	.word	0x200003b0
 80060a8:	20000418 	.word	0x20000418

080060ac <global_stdio_init.part.0>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <global_stdio_init.part.0+0x30>)
 80060b0:	4c0b      	ldr	r4, [pc, #44]	@ (80060e0 <global_stdio_init.part.0+0x34>)
 80060b2:	4a0c      	ldr	r2, [pc, #48]	@ (80060e4 <global_stdio_init.part.0+0x38>)
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	4620      	mov	r0, r4
 80060b8:	2200      	movs	r2, #0
 80060ba:	2104      	movs	r1, #4
 80060bc:	f7ff ff94 	bl	8005fe8 <std>
 80060c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060c4:	2201      	movs	r2, #1
 80060c6:	2109      	movs	r1, #9
 80060c8:	f7ff ff8e 	bl	8005fe8 <std>
 80060cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060d0:	2202      	movs	r2, #2
 80060d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d6:	2112      	movs	r1, #18
 80060d8:	f7ff bf86 	b.w	8005fe8 <std>
 80060dc:	20000480 	.word	0x20000480
 80060e0:	20000348 	.word	0x20000348
 80060e4:	08006055 	.word	0x08006055

080060e8 <__sfp_lock_acquire>:
 80060e8:	4801      	ldr	r0, [pc, #4]	@ (80060f0 <__sfp_lock_acquire+0x8>)
 80060ea:	f000 b920 	b.w	800632e <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000489 	.word	0x20000489

080060f4 <__sfp_lock_release>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__sfp_lock_release+0x8>)
 80060f6:	f000 b91b 	b.w	8006330 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000489 	.word	0x20000489

08006100 <__sinit>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	f7ff fff0 	bl	80060e8 <__sfp_lock_acquire>
 8006108:	6a23      	ldr	r3, [r4, #32]
 800610a:	b11b      	cbz	r3, 8006114 <__sinit+0x14>
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f7ff bff0 	b.w	80060f4 <__sfp_lock_release>
 8006114:	4b04      	ldr	r3, [pc, #16]	@ (8006128 <__sinit+0x28>)
 8006116:	6223      	str	r3, [r4, #32]
 8006118:	4b04      	ldr	r3, [pc, #16]	@ (800612c <__sinit+0x2c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f5      	bne.n	800610c <__sinit+0xc>
 8006120:	f7ff ffc4 	bl	80060ac <global_stdio_init.part.0>
 8006124:	e7f2      	b.n	800610c <__sinit+0xc>
 8006126:	bf00      	nop
 8006128:	0800606d 	.word	0x0800606d
 800612c:	20000480 	.word	0x20000480

08006130 <_fwalk_sglue>:
 8006130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006134:	4607      	mov	r7, r0
 8006136:	4688      	mov	r8, r1
 8006138:	4614      	mov	r4, r2
 800613a:	2600      	movs	r6, #0
 800613c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006140:	f1b9 0901 	subs.w	r9, r9, #1
 8006144:	d505      	bpl.n	8006152 <_fwalk_sglue+0x22>
 8006146:	6824      	ldr	r4, [r4, #0]
 8006148:	2c00      	cmp	r4, #0
 800614a:	d1f7      	bne.n	800613c <_fwalk_sglue+0xc>
 800614c:	4630      	mov	r0, r6
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d907      	bls.n	8006168 <_fwalk_sglue+0x38>
 8006158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800615c:	3301      	adds	r3, #1
 800615e:	d003      	beq.n	8006168 <_fwalk_sglue+0x38>
 8006160:	4629      	mov	r1, r5
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	4306      	orrs	r6, r0
 8006168:	3568      	adds	r5, #104	@ 0x68
 800616a:	e7e9      	b.n	8006140 <_fwalk_sglue+0x10>

0800616c <siprintf>:
 800616c:	b40e      	push	{r1, r2, r3}
 800616e:	b500      	push	{lr}
 8006170:	b09c      	sub	sp, #112	@ 0x70
 8006172:	ab1d      	add	r3, sp, #116	@ 0x74
 8006174:	9002      	str	r0, [sp, #8]
 8006176:	9006      	str	r0, [sp, #24]
 8006178:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800617c:	4809      	ldr	r0, [pc, #36]	@ (80061a4 <siprintf+0x38>)
 800617e:	9107      	str	r1, [sp, #28]
 8006180:	9104      	str	r1, [sp, #16]
 8006182:	4909      	ldr	r1, [pc, #36]	@ (80061a8 <siprintf+0x3c>)
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	9105      	str	r1, [sp, #20]
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	a902      	add	r1, sp, #8
 8006190:	f002 fbb4 	bl	80088fc <_svfiprintf_r>
 8006194:	9b02      	ldr	r3, [sp, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	b01c      	add	sp, #112	@ 0x70
 800619c:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a0:	b003      	add	sp, #12
 80061a2:	4770      	bx	lr
 80061a4:	20000020 	.word	0x20000020
 80061a8:	ffff0208 	.word	0xffff0208

080061ac <__sread>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	460c      	mov	r4, r1
 80061b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b4:	f000 f86c 	bl	8006290 <_read_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	bfab      	itete	ge
 80061bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061be:	89a3      	ldrhlt	r3, [r4, #12]
 80061c0:	181b      	addge	r3, r3, r0
 80061c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061c6:	bfac      	ite	ge
 80061c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061ca:	81a3      	strhlt	r3, [r4, #12]
 80061cc:	bd10      	pop	{r4, pc}

080061ce <__swrite>:
 80061ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d2:	461f      	mov	r7, r3
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	05db      	lsls	r3, r3, #23
 80061d8:	4605      	mov	r5, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	4616      	mov	r6, r2
 80061de:	d505      	bpl.n	80061ec <__swrite+0x1e>
 80061e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e4:	2302      	movs	r3, #2
 80061e6:	2200      	movs	r2, #0
 80061e8:	f000 f840 	bl	800626c <_lseek_r>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	4632      	mov	r2, r6
 80061fa:	463b      	mov	r3, r7
 80061fc:	4628      	mov	r0, r5
 80061fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006202:	f000 b857 	b.w	80062b4 <_write_r>

08006206 <__sseek>:
 8006206:	b510      	push	{r4, lr}
 8006208:	460c      	mov	r4, r1
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 f82d 	bl	800626c <_lseek_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	bf15      	itete	ne
 8006218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800621a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800621e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006222:	81a3      	strheq	r3, [r4, #12]
 8006224:	bf18      	it	ne
 8006226:	81a3      	strhne	r3, [r4, #12]
 8006228:	bd10      	pop	{r4, pc}

0800622a <__sclose>:
 800622a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622e:	f000 b80d 	b.w	800624c <_close_r>

08006232 <memset>:
 8006232:	4402      	add	r2, r0
 8006234:	4603      	mov	r3, r0
 8006236:	4293      	cmp	r3, r2
 8006238:	d100      	bne.n	800623c <memset+0xa>
 800623a:	4770      	bx	lr
 800623c:	f803 1b01 	strb.w	r1, [r3], #1
 8006240:	e7f9      	b.n	8006236 <memset+0x4>
	...

08006244 <_localeconv_r>:
 8006244:	4800      	ldr	r0, [pc, #0]	@ (8006248 <_localeconv_r+0x4>)
 8006246:	4770      	bx	lr
 8006248:	20000160 	.word	0x20000160

0800624c <_close_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_close_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fb ff64 	bl	8002124 <_close>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_close_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_close_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000484 	.word	0x20000484

0800626c <_lseek_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	@ (800628c <_lseek_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fb ff79 	bl	8002172 <_lseek>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_lseek_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_lseek_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000484 	.word	0x20000484

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_read_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fb ff07 	bl	80020b2 <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000484 	.word	0x20000484

080062b4 <_write_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	@ (80062d4 <_write_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fb ff12 	bl	80020ec <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_write_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_write_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20000484 	.word	0x20000484

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	@ (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000020 	.word	0x20000020

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4d0d      	ldr	r5, [pc, #52]	@ (800631c <__libc_init_array+0x38>)
 80062e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006320 <__libc_init_array+0x3c>)
 80062ea:	1b64      	subs	r4, r4, r5
 80062ec:	10a4      	asrs	r4, r4, #2
 80062ee:	2600      	movs	r6, #0
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006324 <__libc_init_array+0x40>)
 80062f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006328 <__libc_init_array+0x44>)
 80062f8:	f003 fb70 	bl	80099dc <_init>
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	2600      	movs	r6, #0
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	08009e58 	.word	0x08009e58
 8006320:	08009e58 	.word	0x08009e58
 8006324:	08009e58 	.word	0x08009e58
 8006328:	08009e5c 	.word	0x08009e5c

0800632c <__retarget_lock_init_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_acquire_recursive>:
 800632e:	4770      	bx	lr

08006330 <__retarget_lock_release_recursive>:
 8006330:	4770      	bx	lr
	...

08006334 <nanf>:
 8006334:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800633c <nanf+0x8>
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	7fc00000 	.word	0x7fc00000

08006340 <quorem>:
 8006340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	6903      	ldr	r3, [r0, #16]
 8006346:	690c      	ldr	r4, [r1, #16]
 8006348:	42a3      	cmp	r3, r4
 800634a:	4607      	mov	r7, r0
 800634c:	db7e      	blt.n	800644c <quorem+0x10c>
 800634e:	3c01      	subs	r4, #1
 8006350:	f101 0814 	add.w	r8, r1, #20
 8006354:	00a3      	lsls	r3, r4, #2
 8006356:	f100 0514 	add.w	r5, r0, #20
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006366:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800636a:	3301      	adds	r3, #1
 800636c:	429a      	cmp	r2, r3
 800636e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006372:	fbb2 f6f3 	udiv	r6, r2, r3
 8006376:	d32e      	bcc.n	80063d6 <quorem+0x96>
 8006378:	f04f 0a00 	mov.w	sl, #0
 800637c:	46c4      	mov	ip, r8
 800637e:	46ae      	mov	lr, r5
 8006380:	46d3      	mov	fp, sl
 8006382:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006386:	b298      	uxth	r0, r3
 8006388:	fb06 a000 	mla	r0, r6, r0, sl
 800638c:	0c02      	lsrs	r2, r0, #16
 800638e:	0c1b      	lsrs	r3, r3, #16
 8006390:	fb06 2303 	mla	r3, r6, r3, r2
 8006394:	f8de 2000 	ldr.w	r2, [lr]
 8006398:	b280      	uxth	r0, r0
 800639a:	b292      	uxth	r2, r2
 800639c:	1a12      	subs	r2, r2, r0
 800639e:	445a      	add	r2, fp
 80063a0:	f8de 0000 	ldr.w	r0, [lr]
 80063a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063b2:	b292      	uxth	r2, r2
 80063b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063b8:	45e1      	cmp	r9, ip
 80063ba:	f84e 2b04 	str.w	r2, [lr], #4
 80063be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063c2:	d2de      	bcs.n	8006382 <quorem+0x42>
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	58eb      	ldr	r3, [r5, r3]
 80063c8:	b92b      	cbnz	r3, 80063d6 <quorem+0x96>
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	429d      	cmp	r5, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	d32f      	bcc.n	8006434 <quorem+0xf4>
 80063d4:	613c      	str	r4, [r7, #16]
 80063d6:	4638      	mov	r0, r7
 80063d8:	f001 f9c2 	bl	8007760 <__mcmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	db25      	blt.n	800642c <quorem+0xec>
 80063e0:	4629      	mov	r1, r5
 80063e2:	2000      	movs	r0, #0
 80063e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80063e8:	f8d1 c000 	ldr.w	ip, [r1]
 80063ec:	fa1f fe82 	uxth.w	lr, r2
 80063f0:	fa1f f38c 	uxth.w	r3, ip
 80063f4:	eba3 030e 	sub.w	r3, r3, lr
 80063f8:	4403      	add	r3, r0
 80063fa:	0c12      	lsrs	r2, r2, #16
 80063fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006400:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640a:	45c1      	cmp	r9, r8
 800640c:	f841 3b04 	str.w	r3, [r1], #4
 8006410:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006414:	d2e6      	bcs.n	80063e4 <quorem+0xa4>
 8006416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800641a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641e:	b922      	cbnz	r2, 800642a <quorem+0xea>
 8006420:	3b04      	subs	r3, #4
 8006422:	429d      	cmp	r5, r3
 8006424:	461a      	mov	r2, r3
 8006426:	d30b      	bcc.n	8006440 <quorem+0x100>
 8006428:	613c      	str	r4, [r7, #16]
 800642a:	3601      	adds	r6, #1
 800642c:	4630      	mov	r0, r6
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	3b04      	subs	r3, #4
 8006438:	2a00      	cmp	r2, #0
 800643a:	d1cb      	bne.n	80063d4 <quorem+0x94>
 800643c:	3c01      	subs	r4, #1
 800643e:	e7c6      	b.n	80063ce <quorem+0x8e>
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	3b04      	subs	r3, #4
 8006444:	2a00      	cmp	r2, #0
 8006446:	d1ef      	bne.n	8006428 <quorem+0xe8>
 8006448:	3c01      	subs	r4, #1
 800644a:	e7ea      	b.n	8006422 <quorem+0xe2>
 800644c:	2000      	movs	r0, #0
 800644e:	e7ee      	b.n	800642e <quorem+0xee>

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	69c7      	ldr	r7, [r0, #28]
 8006456:	b099      	sub	sp, #100	@ 0x64
 8006458:	ed8d 0b02 	vstr	d0, [sp, #8]
 800645c:	ec55 4b10 	vmov	r4, r5, d0
 8006460:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006462:	9109      	str	r1, [sp, #36]	@ 0x24
 8006464:	4683      	mov	fp, r0
 8006466:	920e      	str	r2, [sp, #56]	@ 0x38
 8006468:	9313      	str	r3, [sp, #76]	@ 0x4c
 800646a:	b97f      	cbnz	r7, 800648c <_dtoa_r+0x3c>
 800646c:	2010      	movs	r0, #16
 800646e:	f000 fdfd 	bl	800706c <malloc>
 8006472:	4602      	mov	r2, r0
 8006474:	f8cb 001c 	str.w	r0, [fp, #28]
 8006478:	b920      	cbnz	r0, 8006484 <_dtoa_r+0x34>
 800647a:	4ba7      	ldr	r3, [pc, #668]	@ (8006718 <_dtoa_r+0x2c8>)
 800647c:	21ef      	movs	r1, #239	@ 0xef
 800647e:	48a7      	ldr	r0, [pc, #668]	@ (800671c <_dtoa_r+0x2cc>)
 8006480:	f002 fc36 	bl	8008cf0 <__assert_func>
 8006484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006488:	6007      	str	r7, [r0, #0]
 800648a:	60c7      	str	r7, [r0, #12]
 800648c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	b159      	cbz	r1, 80064ac <_dtoa_r+0x5c>
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	604a      	str	r2, [r1, #4]
 8006498:	2301      	movs	r3, #1
 800649a:	4093      	lsls	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 feda 	bl	8007258 <_Bfree>
 80064a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	1e2b      	subs	r3, r5, #0
 80064ae:	bfb9      	ittee	lt
 80064b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	9303      	strlt	r3, [sp, #12]
 80064b6:	2300      	movge	r3, #0
 80064b8:	6033      	strge	r3, [r6, #0]
 80064ba:	9f03      	ldr	r7, [sp, #12]
 80064bc:	4b98      	ldr	r3, [pc, #608]	@ (8006720 <_dtoa_r+0x2d0>)
 80064be:	bfbc      	itt	lt
 80064c0:	2201      	movlt	r2, #1
 80064c2:	6032      	strlt	r2, [r6, #0]
 80064c4:	43bb      	bics	r3, r7
 80064c6:	d112      	bne.n	80064ee <_dtoa_r+0x9e>
 80064c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064d4:	4323      	orrs	r3, r4
 80064d6:	f000 854d 	beq.w	8006f74 <_dtoa_r+0xb24>
 80064da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006734 <_dtoa_r+0x2e4>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 854f 	beq.w	8006f84 <_dtoa_r+0xb34>
 80064e6:	f10a 0303 	add.w	r3, sl, #3
 80064ea:	f000 bd49 	b.w	8006f80 <_dtoa_r+0xb30>
 80064ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	ec51 0b17 	vmov	r0, r1, d7
 80064f8:	2300      	movs	r3, #0
 80064fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80064fe:	f7fa fb03 	bl	8000b08 <__aeabi_dcmpeq>
 8006502:	4680      	mov	r8, r0
 8006504:	b158      	cbz	r0, 800651e <_dtoa_r+0xce>
 8006506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006508:	2301      	movs	r3, #1
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800650e:	b113      	cbz	r3, 8006516 <_dtoa_r+0xc6>
 8006510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006512:	4b84      	ldr	r3, [pc, #528]	@ (8006724 <_dtoa_r+0x2d4>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006738 <_dtoa_r+0x2e8>
 800651a:	f000 bd33 	b.w	8006f84 <_dtoa_r+0xb34>
 800651e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006522:	aa16      	add	r2, sp, #88	@ 0x58
 8006524:	a917      	add	r1, sp, #92	@ 0x5c
 8006526:	4658      	mov	r0, fp
 8006528:	f001 fa3a 	bl	80079a0 <__d2b>
 800652c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006530:	4681      	mov	r9, r0
 8006532:	2e00      	cmp	r6, #0
 8006534:	d077      	beq.n	8006626 <_dtoa_r+0x1d6>
 8006536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006538:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800653c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800654c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006550:	4619      	mov	r1, r3
 8006552:	2200      	movs	r2, #0
 8006554:	4b74      	ldr	r3, [pc, #464]	@ (8006728 <_dtoa_r+0x2d8>)
 8006556:	f7f9 feb7 	bl	80002c8 <__aeabi_dsub>
 800655a:	a369      	add	r3, pc, #420	@ (adr r3, 8006700 <_dtoa_r+0x2b0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa f86a 	bl	8000638 <__aeabi_dmul>
 8006564:	a368      	add	r3, pc, #416	@ (adr r3, 8006708 <_dtoa_r+0x2b8>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 feaf 	bl	80002cc <__adddf3>
 800656e:	4604      	mov	r4, r0
 8006570:	4630      	mov	r0, r6
 8006572:	460d      	mov	r5, r1
 8006574:	f7f9 fff6 	bl	8000564 <__aeabi_i2d>
 8006578:	a365      	add	r3, pc, #404	@ (adr r3, 8006710 <_dtoa_r+0x2c0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f85b 	bl	8000638 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7f9 fe9f 	bl	80002cc <__adddf3>
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	f7fa fb01 	bl	8000b98 <__aeabi_d2iz>
 8006596:	2200      	movs	r2, #0
 8006598:	4607      	mov	r7, r0
 800659a:	2300      	movs	r3, #0
 800659c:	4620      	mov	r0, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	f7fa fabc 	bl	8000b1c <__aeabi_dcmplt>
 80065a4:	b140      	cbz	r0, 80065b8 <_dtoa_r+0x168>
 80065a6:	4638      	mov	r0, r7
 80065a8:	f7f9 ffdc 	bl	8000564 <__aeabi_i2d>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa faaa 	bl	8000b08 <__aeabi_dcmpeq>
 80065b4:	b900      	cbnz	r0, 80065b8 <_dtoa_r+0x168>
 80065b6:	3f01      	subs	r7, #1
 80065b8:	2f16      	cmp	r7, #22
 80065ba:	d851      	bhi.n	8006660 <_dtoa_r+0x210>
 80065bc:	4b5b      	ldr	r3, [pc, #364]	@ (800672c <_dtoa_r+0x2dc>)
 80065be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ca:	f7fa faa7 	bl	8000b1c <__aeabi_dcmplt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d048      	beq.n	8006664 <_dtoa_r+0x214>
 80065d2:	3f01      	subs	r7, #1
 80065d4:	2300      	movs	r3, #0
 80065d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80065d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065da:	1b9b      	subs	r3, r3, r6
 80065dc:	1e5a      	subs	r2, r3, #1
 80065de:	bf44      	itt	mi
 80065e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80065e4:	2300      	movmi	r3, #0
 80065e6:	9208      	str	r2, [sp, #32]
 80065e8:	bf54      	ite	pl
 80065ea:	f04f 0800 	movpl.w	r8, #0
 80065ee:	9308      	strmi	r3, [sp, #32]
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	db39      	blt.n	8006668 <_dtoa_r+0x218>
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80065f8:	443b      	add	r3, r7
 80065fa:	9308      	str	r3, [sp, #32]
 80065fc:	2300      	movs	r3, #0
 80065fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006602:	2b09      	cmp	r3, #9
 8006604:	d864      	bhi.n	80066d0 <_dtoa_r+0x280>
 8006606:	2b05      	cmp	r3, #5
 8006608:	bfc4      	itt	gt
 800660a:	3b04      	subgt	r3, #4
 800660c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800660e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006610:	f1a3 0302 	sub.w	r3, r3, #2
 8006614:	bfcc      	ite	gt
 8006616:	2400      	movgt	r4, #0
 8006618:	2401      	movle	r4, #1
 800661a:	2b03      	cmp	r3, #3
 800661c:	d863      	bhi.n	80066e6 <_dtoa_r+0x296>
 800661e:	e8df f003 	tbb	[pc, r3]
 8006622:	372a      	.short	0x372a
 8006624:	5535      	.short	0x5535
 8006626:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800662a:	441e      	add	r6, r3
 800662c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006630:	2b20      	cmp	r3, #32
 8006632:	bfc1      	itttt	gt
 8006634:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006638:	409f      	lslgt	r7, r3
 800663a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800663e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006642:	bfd6      	itet	le
 8006644:	f1c3 0320 	rsble	r3, r3, #32
 8006648:	ea47 0003 	orrgt.w	r0, r7, r3
 800664c:	fa04 f003 	lslle.w	r0, r4, r3
 8006650:	f7f9 ff78 	bl	8000544 <__aeabi_ui2d>
 8006654:	2201      	movs	r2, #1
 8006656:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800665a:	3e01      	subs	r6, #1
 800665c:	9214      	str	r2, [sp, #80]	@ 0x50
 800665e:	e777      	b.n	8006550 <_dtoa_r+0x100>
 8006660:	2301      	movs	r3, #1
 8006662:	e7b8      	b.n	80065d6 <_dtoa_r+0x186>
 8006664:	9012      	str	r0, [sp, #72]	@ 0x48
 8006666:	e7b7      	b.n	80065d8 <_dtoa_r+0x188>
 8006668:	427b      	negs	r3, r7
 800666a:	930a      	str	r3, [sp, #40]	@ 0x28
 800666c:	2300      	movs	r3, #0
 800666e:	eba8 0807 	sub.w	r8, r8, r7
 8006672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006674:	e7c4      	b.n	8006600 <_dtoa_r+0x1b0>
 8006676:	2300      	movs	r3, #0
 8006678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800667a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800667c:	2b00      	cmp	r3, #0
 800667e:	dc35      	bgt.n	80066ec <_dtoa_r+0x29c>
 8006680:	2301      	movs	r3, #1
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	461a      	mov	r2, r3
 8006688:	920e      	str	r2, [sp, #56]	@ 0x38
 800668a:	e00b      	b.n	80066a4 <_dtoa_r+0x254>
 800668c:	2301      	movs	r3, #1
 800668e:	e7f3      	b.n	8006678 <_dtoa_r+0x228>
 8006690:	2300      	movs	r3, #0
 8006692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	2301      	movlt	r3, #1
 80066a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066a8:	2100      	movs	r1, #0
 80066aa:	2204      	movs	r2, #4
 80066ac:	f102 0514 	add.w	r5, r2, #20
 80066b0:	429d      	cmp	r5, r3
 80066b2:	d91f      	bls.n	80066f4 <_dtoa_r+0x2a4>
 80066b4:	6041      	str	r1, [r0, #4]
 80066b6:	4658      	mov	r0, fp
 80066b8:	f000 fd8e 	bl	80071d8 <_Balloc>
 80066bc:	4682      	mov	sl, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	d13c      	bne.n	800673c <_dtoa_r+0x2ec>
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <_dtoa_r+0x2e0>)
 80066c4:	4602      	mov	r2, r0
 80066c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80066ca:	e6d8      	b.n	800647e <_dtoa_r+0x2e>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e7e0      	b.n	8006692 <_dtoa_r+0x242>
 80066d0:	2401      	movs	r4, #1
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	9307      	str	r3, [sp, #28]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2312      	movs	r3, #18
 80066e4:	e7d0      	b.n	8006688 <_dtoa_r+0x238>
 80066e6:	2301      	movs	r3, #1
 80066e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ea:	e7f5      	b.n	80066d8 <_dtoa_r+0x288>
 80066ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	9307      	str	r3, [sp, #28]
 80066f2:	e7d7      	b.n	80066a4 <_dtoa_r+0x254>
 80066f4:	3101      	adds	r1, #1
 80066f6:	0052      	lsls	r2, r2, #1
 80066f8:	e7d8      	b.n	80066ac <_dtoa_r+0x25c>
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w
 8006700:	636f4361 	.word	0x636f4361
 8006704:	3fd287a7 	.word	0x3fd287a7
 8006708:	8b60c8b3 	.word	0x8b60c8b3
 800670c:	3fc68a28 	.word	0x3fc68a28
 8006710:	509f79fb 	.word	0x509f79fb
 8006714:	3fd34413 	.word	0x3fd34413
 8006718:	08009a66 	.word	0x08009a66
 800671c:	08009a7d 	.word	0x08009a7d
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	08009a31 	.word	0x08009a31
 8006728:	3ff80000 	.word	0x3ff80000
 800672c:	08009b78 	.word	0x08009b78
 8006730:	08009ad5 	.word	0x08009ad5
 8006734:	08009a62 	.word	0x08009a62
 8006738:	08009a30 	.word	0x08009a30
 800673c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006740:	6018      	str	r0, [r3, #0]
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	2b0e      	cmp	r3, #14
 8006746:	f200 80a4 	bhi.w	8006892 <_dtoa_r+0x442>
 800674a:	2c00      	cmp	r4, #0
 800674c:	f000 80a1 	beq.w	8006892 <_dtoa_r+0x442>
 8006750:	2f00      	cmp	r7, #0
 8006752:	dd33      	ble.n	80067bc <_dtoa_r+0x36c>
 8006754:	4bad      	ldr	r3, [pc, #692]	@ (8006a0c <_dtoa_r+0x5bc>)
 8006756:	f007 020f 	and.w	r2, r7, #15
 800675a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800675e:	ed93 7b00 	vldr	d7, [r3]
 8006762:	05f8      	lsls	r0, r7, #23
 8006764:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006768:	ea4f 1427 	mov.w	r4, r7, asr #4
 800676c:	d516      	bpl.n	800679c <_dtoa_r+0x34c>
 800676e:	4ba8      	ldr	r3, [pc, #672]	@ (8006a10 <_dtoa_r+0x5c0>)
 8006770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006778:	f7fa f888 	bl	800088c <__aeabi_ddiv>
 800677c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006780:	f004 040f 	and.w	r4, r4, #15
 8006784:	2603      	movs	r6, #3
 8006786:	4da2      	ldr	r5, [pc, #648]	@ (8006a10 <_dtoa_r+0x5c0>)
 8006788:	b954      	cbnz	r4, 80067a0 <_dtoa_r+0x350>
 800678a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006792:	f7fa f87b 	bl	800088c <__aeabi_ddiv>
 8006796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679a:	e028      	b.n	80067ee <_dtoa_r+0x39e>
 800679c:	2602      	movs	r6, #2
 800679e:	e7f2      	b.n	8006786 <_dtoa_r+0x336>
 80067a0:	07e1      	lsls	r1, r4, #31
 80067a2:	d508      	bpl.n	80067b6 <_dtoa_r+0x366>
 80067a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067ac:	f7f9 ff44 	bl	8000638 <__aeabi_dmul>
 80067b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b4:	3601      	adds	r6, #1
 80067b6:	1064      	asrs	r4, r4, #1
 80067b8:	3508      	adds	r5, #8
 80067ba:	e7e5      	b.n	8006788 <_dtoa_r+0x338>
 80067bc:	f000 80d2 	beq.w	8006964 <_dtoa_r+0x514>
 80067c0:	427c      	negs	r4, r7
 80067c2:	4b92      	ldr	r3, [pc, #584]	@ (8006a0c <_dtoa_r+0x5bc>)
 80067c4:	4d92      	ldr	r5, [pc, #584]	@ (8006a10 <_dtoa_r+0x5c0>)
 80067c6:	f004 020f 	and.w	r2, r4, #15
 80067ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067d6:	f7f9 ff2f 	bl	8000638 <__aeabi_dmul>
 80067da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067de:	1124      	asrs	r4, r4, #4
 80067e0:	2300      	movs	r3, #0
 80067e2:	2602      	movs	r6, #2
 80067e4:	2c00      	cmp	r4, #0
 80067e6:	f040 80b2 	bne.w	800694e <_dtoa_r+0x4fe>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1d3      	bne.n	8006796 <_dtoa_r+0x346>
 80067ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80b7 	beq.w	8006968 <_dtoa_r+0x518>
 80067fa:	4b86      	ldr	r3, [pc, #536]	@ (8006a14 <_dtoa_r+0x5c4>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f98b 	bl	8000b1c <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	f000 80ae 	beq.w	8006968 <_dtoa_r+0x518>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80aa 	beq.w	8006968 <_dtoa_r+0x518>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd37      	ble.n	800688a <_dtoa_r+0x43a>
 800681a:	1e7b      	subs	r3, r7, #1
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	4620      	mov	r0, r4
 8006820:	4b7d      	ldr	r3, [pc, #500]	@ (8006a18 <_dtoa_r+0x5c8>)
 8006822:	2200      	movs	r2, #0
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 ff07 	bl	8000638 <__aeabi_dmul>
 800682a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800682e:	9c00      	ldr	r4, [sp, #0]
 8006830:	3601      	adds	r6, #1
 8006832:	4630      	mov	r0, r6
 8006834:	f7f9 fe96 	bl	8000564 <__aeabi_i2d>
 8006838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800683c:	f7f9 fefc 	bl	8000638 <__aeabi_dmul>
 8006840:	4b76      	ldr	r3, [pc, #472]	@ (8006a1c <_dtoa_r+0x5cc>)
 8006842:	2200      	movs	r2, #0
 8006844:	f7f9 fd42 	bl	80002cc <__adddf3>
 8006848:	4605      	mov	r5, r0
 800684a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800684e:	2c00      	cmp	r4, #0
 8006850:	f040 808d 	bne.w	800696e <_dtoa_r+0x51e>
 8006854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006858:	4b71      	ldr	r3, [pc, #452]	@ (8006a20 <_dtoa_r+0x5d0>)
 800685a:	2200      	movs	r2, #0
 800685c:	f7f9 fd34 	bl	80002c8 <__aeabi_dsub>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006868:	462a      	mov	r2, r5
 800686a:	4633      	mov	r3, r6
 800686c:	f7fa f974 	bl	8000b58 <__aeabi_dcmpgt>
 8006870:	2800      	cmp	r0, #0
 8006872:	f040 828b 	bne.w	8006d8c <_dtoa_r+0x93c>
 8006876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687a:	462a      	mov	r2, r5
 800687c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006880:	f7fa f94c 	bl	8000b1c <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	f040 8128 	bne.w	8006ada <_dtoa_r+0x68a>
 800688a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800688e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006894:	2b00      	cmp	r3, #0
 8006896:	f2c0 815a 	blt.w	8006b4e <_dtoa_r+0x6fe>
 800689a:	2f0e      	cmp	r7, #14
 800689c:	f300 8157 	bgt.w	8006b4e <_dtoa_r+0x6fe>
 80068a0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a0c <_dtoa_r+0x5bc>)
 80068a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068a6:	ed93 7b00 	vldr	d7, [r3]
 80068aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	ed8d 7b00 	vstr	d7, [sp]
 80068b2:	da03      	bge.n	80068bc <_dtoa_r+0x46c>
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f340 8101 	ble.w	8006abe <_dtoa_r+0x66e>
 80068bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068c0:	4656      	mov	r6, sl
 80068c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c6:	4620      	mov	r0, r4
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7f9 ffdf 	bl	800088c <__aeabi_ddiv>
 80068ce:	f7fa f963 	bl	8000b98 <__aeabi_d2iz>
 80068d2:	4680      	mov	r8, r0
 80068d4:	f7f9 fe46 	bl	8000564 <__aeabi_i2d>
 80068d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068dc:	f7f9 feac 	bl	8000638 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068ec:	f7f9 fcec 	bl	80002c8 <__aeabi_dsub>
 80068f0:	f806 4b01 	strb.w	r4, [r6], #1
 80068f4:	9d07      	ldr	r5, [sp, #28]
 80068f6:	eba6 040a 	sub.w	r4, r6, sl
 80068fa:	42a5      	cmp	r5, r4
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	f040 8117 	bne.w	8006b32 <_dtoa_r+0x6e2>
 8006904:	f7f9 fce2 	bl	80002cc <__adddf3>
 8006908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	f7fa f922 	bl	8000b58 <__aeabi_dcmpgt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 80f9 	bne.w	8006b0c <_dtoa_r+0x6bc>
 800691a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7fa f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 8006926:	b118      	cbz	r0, 8006930 <_dtoa_r+0x4e0>
 8006928:	f018 0f01 	tst.w	r8, #1
 800692c:	f040 80ee 	bne.w	8006b0c <_dtoa_r+0x6bc>
 8006930:	4649      	mov	r1, r9
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fc90 	bl	8007258 <_Bfree>
 8006938:	2300      	movs	r3, #0
 800693a:	7033      	strb	r3, [r6, #0]
 800693c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800693e:	3701      	adds	r7, #1
 8006940:	601f      	str	r7, [r3, #0]
 8006942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 831d 	beq.w	8006f84 <_dtoa_r+0xb34>
 800694a:	601e      	str	r6, [r3, #0]
 800694c:	e31a      	b.n	8006f84 <_dtoa_r+0xb34>
 800694e:	07e2      	lsls	r2, r4, #31
 8006950:	d505      	bpl.n	800695e <_dtoa_r+0x50e>
 8006952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006956:	f7f9 fe6f 	bl	8000638 <__aeabi_dmul>
 800695a:	3601      	adds	r6, #1
 800695c:	2301      	movs	r3, #1
 800695e:	1064      	asrs	r4, r4, #1
 8006960:	3508      	adds	r5, #8
 8006962:	e73f      	b.n	80067e4 <_dtoa_r+0x394>
 8006964:	2602      	movs	r6, #2
 8006966:	e742      	b.n	80067ee <_dtoa_r+0x39e>
 8006968:	9c07      	ldr	r4, [sp, #28]
 800696a:	9704      	str	r7, [sp, #16]
 800696c:	e761      	b.n	8006832 <_dtoa_r+0x3e2>
 800696e:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <_dtoa_r+0x5bc>)
 8006970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800697a:	4454      	add	r4, sl
 800697c:	2900      	cmp	r1, #0
 800697e:	d053      	beq.n	8006a28 <_dtoa_r+0x5d8>
 8006980:	4928      	ldr	r1, [pc, #160]	@ (8006a24 <_dtoa_r+0x5d4>)
 8006982:	2000      	movs	r0, #0
 8006984:	f7f9 ff82 	bl	800088c <__aeabi_ddiv>
 8006988:	4633      	mov	r3, r6
 800698a:	462a      	mov	r2, r5
 800698c:	f7f9 fc9c 	bl	80002c8 <__aeabi_dsub>
 8006990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006994:	4656      	mov	r6, sl
 8006996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800699a:	f7fa f8fd 	bl	8000b98 <__aeabi_d2iz>
 800699e:	4605      	mov	r5, r0
 80069a0:	f7f9 fde0 	bl	8000564 <__aeabi_i2d>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ac:	f7f9 fc8c 	bl	80002c8 <__aeabi_dsub>
 80069b0:	3530      	adds	r5, #48	@ 0x30
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ba:	f806 5b01 	strb.w	r5, [r6], #1
 80069be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c2:	f7fa f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d171      	bne.n	8006aae <_dtoa_r+0x65e>
 80069ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ce:	4911      	ldr	r1, [pc, #68]	@ (8006a14 <_dtoa_r+0x5c4>)
 80069d0:	2000      	movs	r0, #0
 80069d2:	f7f9 fc79 	bl	80002c8 <__aeabi_dsub>
 80069d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069da:	f7fa f89f 	bl	8000b1c <__aeabi_dcmplt>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f040 8095 	bne.w	8006b0e <_dtoa_r+0x6be>
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	f43f af50 	beq.w	800688a <_dtoa_r+0x43a>
 80069ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <_dtoa_r+0x5c8>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f7f9 fe21 	bl	8000638 <__aeabi_dmul>
 80069f6:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <_dtoa_r+0x5c8>)
 80069f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069fc:	2200      	movs	r2, #0
 80069fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a02:	f7f9 fe19 	bl	8000638 <__aeabi_dmul>
 8006a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a0a:	e7c4      	b.n	8006996 <_dtoa_r+0x546>
 8006a0c:	08009b78 	.word	0x08009b78
 8006a10:	08009b50 	.word	0x08009b50
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	401c0000 	.word	0x401c0000
 8006a20:	40140000 	.word	0x40140000
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7f9 fe04 	bl	8000638 <__aeabi_dmul>
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a36:	4656      	mov	r6, sl
 8006a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3c:	f7fa f8ac 	bl	8000b98 <__aeabi_d2iz>
 8006a40:	4605      	mov	r5, r0
 8006a42:	f7f9 fd8f 	bl	8000564 <__aeabi_i2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4e:	f7f9 fc3b 	bl	80002c8 <__aeabi_dsub>
 8006a52:	3530      	adds	r5, #48	@ 0x30
 8006a54:	f806 5b01 	strb.w	r5, [r6], #1
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	42a6      	cmp	r6, r4
 8006a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	d124      	bne.n	8006ab2 <_dtoa_r+0x662>
 8006a68:	4bac      	ldr	r3, [pc, #688]	@ (8006d1c <_dtoa_r+0x8cc>)
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a6e:	f7f9 fc2d 	bl	80002cc <__adddf3>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7a:	f7fa f86d 	bl	8000b58 <__aeabi_dcmpgt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d145      	bne.n	8006b0e <_dtoa_r+0x6be>
 8006a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a86:	49a5      	ldr	r1, [pc, #660]	@ (8006d1c <_dtoa_r+0x8cc>)
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7f9 fc1d 	bl	80002c8 <__aeabi_dsub>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a96:	f7fa f841 	bl	8000b1c <__aeabi_dcmplt>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f43f aef5 	beq.w	800688a <_dtoa_r+0x43a>
 8006aa0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006aa2:	1e73      	subs	r3, r6, #1
 8006aa4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006aaa:	2b30      	cmp	r3, #48	@ 0x30
 8006aac:	d0f8      	beq.n	8006aa0 <_dtoa_r+0x650>
 8006aae:	9f04      	ldr	r7, [sp, #16]
 8006ab0:	e73e      	b.n	8006930 <_dtoa_r+0x4e0>
 8006ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8006d20 <_dtoa_r+0x8d0>)
 8006ab4:	f7f9 fdc0 	bl	8000638 <__aeabi_dmul>
 8006ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006abc:	e7bc      	b.n	8006a38 <_dtoa_r+0x5e8>
 8006abe:	d10c      	bne.n	8006ada <_dtoa_r+0x68a>
 8006ac0:	4b98      	ldr	r3, [pc, #608]	@ (8006d24 <_dtoa_r+0x8d4>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ac8:	f7f9 fdb6 	bl	8000638 <__aeabi_dmul>
 8006acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad0:	f7fa f838 	bl	8000b44 <__aeabi_dcmpge>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f000 8157 	beq.w	8006d88 <_dtoa_r+0x938>
 8006ada:	2400      	movs	r4, #0
 8006adc:	4625      	mov	r5, r4
 8006ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	4656      	mov	r6, sl
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fbb4 	bl	8007258 <_Bfree>
 8006af0:	2d00      	cmp	r5, #0
 8006af2:	d0dc      	beq.n	8006aae <_dtoa_r+0x65e>
 8006af4:	b12f      	cbz	r7, 8006b02 <_dtoa_r+0x6b2>
 8006af6:	42af      	cmp	r7, r5
 8006af8:	d003      	beq.n	8006b02 <_dtoa_r+0x6b2>
 8006afa:	4639      	mov	r1, r7
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 fbab 	bl	8007258 <_Bfree>
 8006b02:	4629      	mov	r1, r5
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fba7 	bl	8007258 <_Bfree>
 8006b0a:	e7d0      	b.n	8006aae <_dtoa_r+0x65e>
 8006b0c:	9704      	str	r7, [sp, #16]
 8006b0e:	4633      	mov	r3, r6
 8006b10:	461e      	mov	r6, r3
 8006b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b16:	2a39      	cmp	r2, #57	@ 0x39
 8006b18:	d107      	bne.n	8006b2a <_dtoa_r+0x6da>
 8006b1a:	459a      	cmp	sl, r3
 8006b1c:	d1f8      	bne.n	8006b10 <_dtoa_r+0x6c0>
 8006b1e:	9a04      	ldr	r2, [sp, #16]
 8006b20:	3201      	adds	r2, #1
 8006b22:	9204      	str	r2, [sp, #16]
 8006b24:	2230      	movs	r2, #48	@ 0x30
 8006b26:	f88a 2000 	strb.w	r2, [sl]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	3201      	adds	r2, #1
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e7bd      	b.n	8006aae <_dtoa_r+0x65e>
 8006b32:	4b7b      	ldr	r3, [pc, #492]	@ (8006d20 <_dtoa_r+0x8d0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	f7f9 fd7f 	bl	8000638 <__aeabi_dmul>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	f7f9 ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f43f aebb 	beq.w	80068c2 <_dtoa_r+0x472>
 8006b4c:	e6f0      	b.n	8006930 <_dtoa_r+0x4e0>
 8006b4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	f000 80db 	beq.w	8006d0c <_dtoa_r+0x8bc>
 8006b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b58:	2a01      	cmp	r2, #1
 8006b5a:	f300 80bf 	bgt.w	8006cdc <_dtoa_r+0x88c>
 8006b5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	f000 80b7 	beq.w	8006cd4 <_dtoa_r+0x884>
 8006b66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b6c:	4646      	mov	r6, r8
 8006b6e:	9a08      	ldr	r2, [sp, #32]
 8006b70:	2101      	movs	r1, #1
 8006b72:	441a      	add	r2, r3
 8006b74:	4658      	mov	r0, fp
 8006b76:	4498      	add	r8, r3
 8006b78:	9208      	str	r2, [sp, #32]
 8006b7a:	f000 fc6b 	bl	8007454 <__i2b>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	b15e      	cbz	r6, 8006b9a <_dtoa_r+0x74a>
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dd08      	ble.n	8006b9a <_dtoa_r+0x74a>
 8006b88:	42b3      	cmp	r3, r6
 8006b8a:	9a08      	ldr	r2, [sp, #32]
 8006b8c:	bfa8      	it	ge
 8006b8e:	4633      	movge	r3, r6
 8006b90:	eba8 0803 	sub.w	r8, r8, r3
 8006b94:	1af6      	subs	r6, r6, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9c:	b1f3      	cbz	r3, 8006bdc <_dtoa_r+0x78c>
 8006b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80b7 	beq.w	8006d14 <_dtoa_r+0x8c4>
 8006ba6:	b18c      	cbz	r4, 8006bcc <_dtoa_r+0x77c>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4622      	mov	r2, r4
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fd11 	bl	80075d4 <__pow5mult>
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	4658      	mov	r0, fp
 8006bba:	f000 fc61 	bl	8007480 <__multiply>
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	9004      	str	r0, [sp, #16]
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f000 fb48 	bl	8007258 <_Bfree>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	4699      	mov	r9, r3
 8006bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bce:	1b1a      	subs	r2, r3, r4
 8006bd0:	d004      	beq.n	8006bdc <_dtoa_r+0x78c>
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	f000 fcfd 	bl	80075d4 <__pow5mult>
 8006bda:	4681      	mov	r9, r0
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4658      	mov	r0, fp
 8006be0:	f000 fc38 	bl	8007454 <__i2b>
 8006be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006be6:	4604      	mov	r4, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 81cf 	beq.w	8006f8c <_dtoa_r+0xb3c>
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fcee 	bl	80075d4 <__pow5mult>
 8006bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	f300 8095 	bgt.w	8006d2c <_dtoa_r+0x8dc>
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 8087 	bne.w	8006d18 <_dtoa_r+0x8c8>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 8089 	bne.w	8006d28 <_dtoa_r+0x8d8>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c1c:	0d1b      	lsrs	r3, r3, #20
 8006c1e:	051b      	lsls	r3, r3, #20
 8006c20:	b12b      	cbz	r3, 8006c2e <_dtoa_r+0x7de>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	3301      	adds	r3, #1
 8006c26:	9308      	str	r3, [sp, #32]
 8006c28:	f108 0801 	add.w	r8, r8, #1
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 81b0 	beq.w	8006f98 <_dtoa_r+0xb48>
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c3e:	6918      	ldr	r0, [r3, #16]
 8006c40:	f000 fbbc 	bl	80073bc <__hi0bits>
 8006c44:	f1c0 0020 	rsb	r0, r0, #32
 8006c48:	9b08      	ldr	r3, [sp, #32]
 8006c4a:	4418      	add	r0, r3
 8006c4c:	f010 001f 	ands.w	r0, r0, #31
 8006c50:	d077      	beq.n	8006d42 <_dtoa_r+0x8f2>
 8006c52:	f1c0 0320 	rsb	r3, r0, #32
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	dd6b      	ble.n	8006d32 <_dtoa_r+0x8e2>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	f1c0 001c 	rsb	r0, r0, #28
 8006c60:	4403      	add	r3, r0
 8006c62:	4480      	add	r8, r0
 8006c64:	4406      	add	r6, r0
 8006c66:	9308      	str	r3, [sp, #32]
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	dd05      	ble.n	8006c7a <_dtoa_r+0x82a>
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4642      	mov	r2, r8
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 fd08 	bl	8007688 <__lshift>
 8006c78:	4681      	mov	r9, r0
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd05      	ble.n	8006c8c <_dtoa_r+0x83c>
 8006c80:	4621      	mov	r1, r4
 8006c82:	461a      	mov	r2, r3
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fcff 	bl	8007688 <__lshift>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d059      	beq.n	8006d46 <_dtoa_r+0x8f6>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4648      	mov	r0, r9
 8006c96:	f000 fd63 	bl	8007760 <__mcmp>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	da53      	bge.n	8006d46 <_dtoa_r+0x8f6>
 8006c9e:	1e7b      	subs	r3, r7, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f000 faf7 	bl	800729c <__multadd>
 8006cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8172 	beq.w	8006f9c <_dtoa_r+0xb4c>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4629      	mov	r1, r5
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 faec 	bl	800729c <__multadd>
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	4605      	mov	r5, r0
 8006cca:	dc67      	bgt.n	8006d9c <_dtoa_r+0x94c>
 8006ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	dc41      	bgt.n	8006d56 <_dtoa_r+0x906>
 8006cd2:	e063      	b.n	8006d9c <_dtoa_r+0x94c>
 8006cd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006cd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cda:	e746      	b.n	8006b6a <_dtoa_r+0x71a>
 8006cdc:	9b07      	ldr	r3, [sp, #28]
 8006cde:	1e5c      	subs	r4, r3, #1
 8006ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce2:	42a3      	cmp	r3, r4
 8006ce4:	bfbf      	itttt	lt
 8006ce6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ce8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006cea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cec:	1ae3      	sublt	r3, r4, r3
 8006cee:	bfb4      	ite	lt
 8006cf0:	18d2      	addlt	r2, r2, r3
 8006cf2:	1b1c      	subge	r4, r3, r4
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	bfbc      	itt	lt
 8006cf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006cfa:	2400      	movlt	r4, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bfb5      	itete	lt
 8006d00:	eba8 0603 	sublt.w	r6, r8, r3
 8006d04:	9b07      	ldrge	r3, [sp, #28]
 8006d06:	2300      	movlt	r3, #0
 8006d08:	4646      	movge	r6, r8
 8006d0a:	e730      	b.n	8006b6e <_dtoa_r+0x71e>
 8006d0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d10:	4646      	mov	r6, r8
 8006d12:	e735      	b.n	8006b80 <_dtoa_r+0x730>
 8006d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d16:	e75c      	b.n	8006bd2 <_dtoa_r+0x782>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e788      	b.n	8006c2e <_dtoa_r+0x7de>
 8006d1c:	3fe00000 	.word	0x3fe00000
 8006d20:	40240000 	.word	0x40240000
 8006d24:	40140000 	.word	0x40140000
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	e780      	b.n	8006c2e <_dtoa_r+0x7de>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	e782      	b.n	8006c38 <_dtoa_r+0x7e8>
 8006d32:	d099      	beq.n	8006c68 <_dtoa_r+0x818>
 8006d34:	9a08      	ldr	r2, [sp, #32]
 8006d36:	331c      	adds	r3, #28
 8006d38:	441a      	add	r2, r3
 8006d3a:	4498      	add	r8, r3
 8006d3c:	441e      	add	r6, r3
 8006d3e:	9208      	str	r2, [sp, #32]
 8006d40:	e792      	b.n	8006c68 <_dtoa_r+0x818>
 8006d42:	4603      	mov	r3, r0
 8006d44:	e7f6      	b.n	8006d34 <_dtoa_r+0x8e4>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	9704      	str	r7, [sp, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dc20      	bgt.n	8006d90 <_dtoa_r+0x940>
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	dd1e      	ble.n	8006d94 <_dtoa_r+0x944>
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f47f aec0 	bne.w	8006ade <_dtoa_r+0x68e>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	2205      	movs	r2, #5
 8006d62:	4658      	mov	r0, fp
 8006d64:	f000 fa9a 	bl	800729c <__multadd>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fcf7 	bl	8007760 <__mcmp>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f77f aeb3 	ble.w	8006ade <_dtoa_r+0x68e>
 8006d78:	4656      	mov	r6, sl
 8006d7a:	2331      	movs	r3, #49	@ 0x31
 8006d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	3301      	adds	r3, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	e6ae      	b.n	8006ae6 <_dtoa_r+0x696>
 8006d88:	9c07      	ldr	r4, [sp, #28]
 8006d8a:	9704      	str	r7, [sp, #16]
 8006d8c:	4625      	mov	r5, r4
 8006d8e:	e7f3      	b.n	8006d78 <_dtoa_r+0x928>
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8104 	beq.w	8006fa4 <_dtoa_r+0xb54>
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	dd05      	ble.n	8006dac <_dtoa_r+0x95c>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4632      	mov	r2, r6
 8006da4:	4658      	mov	r0, fp
 8006da6:	f000 fc6f 	bl	8007688 <__lshift>
 8006daa:	4605      	mov	r5, r0
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d05a      	beq.n	8006e68 <_dtoa_r+0xa18>
 8006db2:	6869      	ldr	r1, [r5, #4]
 8006db4:	4658      	mov	r0, fp
 8006db6:	f000 fa0f 	bl	80071d8 <_Balloc>
 8006dba:	4606      	mov	r6, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <_dtoa_r+0x97a>
 8006dbe:	4b84      	ldr	r3, [pc, #528]	@ (8006fd0 <_dtoa_r+0xb80>)
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dc6:	f7ff bb5a 	b.w	800647e <_dtoa_r+0x2e>
 8006dca:	692a      	ldr	r2, [r5, #16]
 8006dcc:	3202      	adds	r2, #2
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	f105 010c 	add.w	r1, r5, #12
 8006dd4:	300c      	adds	r0, #12
 8006dd6:	f001 ff75 	bl	8008cc4 <memcpy>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4658      	mov	r0, fp
 8006de0:	f000 fc52 	bl	8007688 <__lshift>
 8006de4:	f10a 0301 	add.w	r3, sl, #1
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	4453      	add	r3, sl
 8006dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	462f      	mov	r7, r5
 8006df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4648      	mov	r0, r9
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	f7ff fa9b 	bl	8006340 <quorem>
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	9002      	str	r0, [sp, #8]
 8006e0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e12:	4648      	mov	r0, r9
 8006e14:	f000 fca4 	bl	8007760 <__mcmp>
 8006e18:	462a      	mov	r2, r5
 8006e1a:	9008      	str	r0, [sp, #32]
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4658      	mov	r0, fp
 8006e20:	f000 fcba 	bl	8007798 <__mdiff>
 8006e24:	68c2      	ldr	r2, [r0, #12]
 8006e26:	4606      	mov	r6, r0
 8006e28:	bb02      	cbnz	r2, 8006e6c <_dtoa_r+0xa1c>
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 fc97 	bl	8007760 <__mcmp>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4631      	mov	r1, r6
 8006e36:	4658      	mov	r0, fp
 8006e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e3a:	f000 fa0d 	bl	8007258 <_Bfree>
 8006e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e42:	9e07      	ldr	r6, [sp, #28]
 8006e44:	ea43 0102 	orr.w	r1, r3, r2
 8006e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4a:	4319      	orrs	r1, r3
 8006e4c:	d110      	bne.n	8006e70 <_dtoa_r+0xa20>
 8006e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e52:	d029      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd02      	ble.n	8006e60 <_dtoa_r+0xa10>
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e60:	9b00      	ldr	r3, [sp, #0]
 8006e62:	f883 8000 	strb.w	r8, [r3]
 8006e66:	e63f      	b.n	8006ae8 <_dtoa_r+0x698>
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e7bb      	b.n	8006de4 <_dtoa_r+0x994>
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	e7e1      	b.n	8006e34 <_dtoa_r+0x9e4>
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	db04      	blt.n	8006e80 <_dtoa_r+0xa30>
 8006e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	d120      	bne.n	8006ec2 <_dtoa_r+0xa72>
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	dded      	ble.n	8006e60 <_dtoa_r+0xa10>
 8006e84:	4649      	mov	r1, r9
 8006e86:	2201      	movs	r2, #1
 8006e88:	4658      	mov	r0, fp
 8006e8a:	f000 fbfd 	bl	8007688 <__lshift>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4681      	mov	r9, r0
 8006e92:	f000 fc65 	bl	8007760 <__mcmp>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	dc03      	bgt.n	8006ea2 <_dtoa_r+0xa52>
 8006e9a:	d1e1      	bne.n	8006e60 <_dtoa_r+0xa10>
 8006e9c:	f018 0f01 	tst.w	r8, #1
 8006ea0:	d0de      	beq.n	8006e60 <_dtoa_r+0xa10>
 8006ea2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ea6:	d1d8      	bne.n	8006e5a <_dtoa_r+0xa0a>
 8006ea8:	9a00      	ldr	r2, [sp, #0]
 8006eaa:	2339      	movs	r3, #57	@ 0x39
 8006eac:	7013      	strb	r3, [r2, #0]
 8006eae:	4633      	mov	r3, r6
 8006eb0:	461e      	mov	r6, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006eb8:	2a39      	cmp	r2, #57	@ 0x39
 8006eba:	d052      	beq.n	8006f62 <_dtoa_r+0xb12>
 8006ebc:	3201      	adds	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e612      	b.n	8006ae8 <_dtoa_r+0x698>
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	dd07      	ble.n	8006ed6 <_dtoa_r+0xa86>
 8006ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eca:	d0ed      	beq.n	8006ea8 <_dtoa_r+0xa58>
 8006ecc:	9a00      	ldr	r2, [sp, #0]
 8006ece:	f108 0301 	add.w	r3, r8, #1
 8006ed2:	7013      	strb	r3, [r2, #0]
 8006ed4:	e608      	b.n	8006ae8 <_dtoa_r+0x698>
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d028      	beq.n	8006f36 <_dtoa_r+0xae6>
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	220a      	movs	r2, #10
 8006eea:	4658      	mov	r0, fp
 8006eec:	f000 f9d6 	bl	800729c <__multadd>
 8006ef0:	42af      	cmp	r7, r5
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	f04f 020a 	mov.w	r2, #10
 8006efc:	4639      	mov	r1, r7
 8006efe:	4658      	mov	r0, fp
 8006f00:	d107      	bne.n	8006f12 <_dtoa_r+0xac2>
 8006f02:	f000 f9cb 	bl	800729c <__multadd>
 8006f06:	4607      	mov	r7, r0
 8006f08:	4605      	mov	r5, r0
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	e774      	b.n	8006dfc <_dtoa_r+0x9ac>
 8006f12:	f000 f9c3 	bl	800729c <__multadd>
 8006f16:	4629      	mov	r1, r5
 8006f18:	4607      	mov	r7, r0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 f9bc 	bl	800729c <__multadd>
 8006f24:	4605      	mov	r5, r0
 8006f26:	e7f0      	b.n	8006f0a <_dtoa_r+0xaba>
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfcc      	ite	gt
 8006f2e:	461e      	movgt	r6, r3
 8006f30:	2601      	movle	r6, #1
 8006f32:	4456      	add	r6, sl
 8006f34:	2700      	movs	r7, #0
 8006f36:	4649      	mov	r1, r9
 8006f38:	2201      	movs	r2, #1
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f000 fba4 	bl	8007688 <__lshift>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4681      	mov	r9, r0
 8006f44:	f000 fc0c 	bl	8007760 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dcb0      	bgt.n	8006eae <_dtoa_r+0xa5e>
 8006f4c:	d102      	bne.n	8006f54 <_dtoa_r+0xb04>
 8006f4e:	f018 0f01 	tst.w	r8, #1
 8006f52:	d1ac      	bne.n	8006eae <_dtoa_r+0xa5e>
 8006f54:	4633      	mov	r3, r6
 8006f56:	461e      	mov	r6, r3
 8006f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f5c:	2a30      	cmp	r2, #48	@ 0x30
 8006f5e:	d0fa      	beq.n	8006f56 <_dtoa_r+0xb06>
 8006f60:	e5c2      	b.n	8006ae8 <_dtoa_r+0x698>
 8006f62:	459a      	cmp	sl, r3
 8006f64:	d1a4      	bne.n	8006eb0 <_dtoa_r+0xa60>
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	2331      	movs	r3, #49	@ 0x31
 8006f6e:	f88a 3000 	strb.w	r3, [sl]
 8006f72:	e5b9      	b.n	8006ae8 <_dtoa_r+0x698>
 8006f74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fd4 <_dtoa_r+0xb84>
 8006f7a:	b11b      	cbz	r3, 8006f84 <_dtoa_r+0xb34>
 8006f7c:	f10a 0308 	add.w	r3, sl, #8
 8006f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	4650      	mov	r0, sl
 8006f86:	b019      	add	sp, #100	@ 0x64
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	f77f ae37 	ble.w	8006c02 <_dtoa_r+0x7b2>
 8006f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f98:	2001      	movs	r0, #1
 8006f9a:	e655      	b.n	8006c48 <_dtoa_r+0x7f8>
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f77f aed6 	ble.w	8006d50 <_dtoa_r+0x900>
 8006fa4:	4656      	mov	r6, sl
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f7ff f9c9 	bl	8006340 <quorem>
 8006fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fb2:	f806 8b01 	strb.w	r8, [r6], #1
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	eba6 020a 	sub.w	r2, r6, sl
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	ddb3      	ble.n	8006f28 <_dtoa_r+0xad8>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f000 f968 	bl	800729c <__multadd>
 8006fcc:	4681      	mov	r9, r0
 8006fce:	e7ea      	b.n	8006fa6 <_dtoa_r+0xb56>
 8006fd0:	08009ad5 	.word	0x08009ad5
 8006fd4:	08009a59 	.word	0x08009a59

08006fd8 <_free_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4605      	mov	r5, r0
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	d041      	beq.n	8007064 <_free_r+0x8c>
 8006fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe4:	1f0c      	subs	r4, r1, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	18e4      	addlt	r4, r4, r3
 8006fec:	f000 f8e8 	bl	80071c0 <__malloc_lock>
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <_free_r+0x90>)
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	b933      	cbnz	r3, 8007004 <_free_r+0x2c>
 8006ff6:	6063      	str	r3, [r4, #4]
 8006ff8:	6014      	str	r4, [r2, #0]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007000:	f000 b8e4 	b.w	80071cc <__malloc_unlock>
 8007004:	42a3      	cmp	r3, r4
 8007006:	d908      	bls.n	800701a <_free_r+0x42>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	1821      	adds	r1, r4, r0
 800700c:	428b      	cmp	r3, r1
 800700e:	bf01      	itttt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	1809      	addeq	r1, r1, r0
 8007016:	6021      	streq	r1, [r4, #0]
 8007018:	e7ed      	b.n	8006ff6 <_free_r+0x1e>
 800701a:	461a      	mov	r2, r3
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b10b      	cbz	r3, 8007024 <_free_r+0x4c>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d9fa      	bls.n	800701a <_free_r+0x42>
 8007024:	6811      	ldr	r1, [r2, #0]
 8007026:	1850      	adds	r0, r2, r1
 8007028:	42a0      	cmp	r0, r4
 800702a:	d10b      	bne.n	8007044 <_free_r+0x6c>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	4401      	add	r1, r0
 8007030:	1850      	adds	r0, r2, r1
 8007032:	4283      	cmp	r3, r0
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	d1e0      	bne.n	8006ffa <_free_r+0x22>
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	6053      	str	r3, [r2, #4]
 800703e:	4408      	add	r0, r1
 8007040:	6010      	str	r0, [r2, #0]
 8007042:	e7da      	b.n	8006ffa <_free_r+0x22>
 8007044:	d902      	bls.n	800704c <_free_r+0x74>
 8007046:	230c      	movs	r3, #12
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	e7d6      	b.n	8006ffa <_free_r+0x22>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	1821      	adds	r1, r4, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	bf04      	itt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	bf04      	itt	eq
 800705c:	1809      	addeq	r1, r1, r0
 800705e:	6021      	streq	r1, [r4, #0]
 8007060:	6054      	str	r4, [r2, #4]
 8007062:	e7ca      	b.n	8006ffa <_free_r+0x22>
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	20000490 	.word	0x20000490

0800706c <malloc>:
 800706c:	4b02      	ldr	r3, [pc, #8]	@ (8007078 <malloc+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f000 b825 	b.w	80070c0 <_malloc_r>
 8007076:	bf00      	nop
 8007078:	20000020 	.word	0x20000020

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0f      	ldr	r6, [pc, #60]	@ (80070bc <sbrk_aligned+0x40>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f001 fe0c 	bl	8008ca4 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f001 fe07 	bl	8008ca4 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d103      	bne.n	80070a2 <sbrk_aligned+0x26>
 800709a:	f04f 34ff 	mov.w	r4, #4294967295
 800709e:	4620      	mov	r0, r4
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d0f8      	beq.n	800709e <sbrk_aligned+0x22>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f001 fdf8 	bl	8008ca4 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1f2      	bne.n	800709e <sbrk_aligned+0x22>
 80070b8:	e7ef      	b.n	800709a <sbrk_aligned+0x1e>
 80070ba:	bf00      	nop
 80070bc:	2000048c 	.word	0x2000048c

080070c0 <_malloc_r>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	1ccd      	adds	r5, r1, #3
 80070c6:	f025 0503 	bic.w	r5, r5, #3
 80070ca:	3508      	adds	r5, #8
 80070cc:	2d0c      	cmp	r5, #12
 80070ce:	bf38      	it	cc
 80070d0:	250c      	movcc	r5, #12
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	db01      	blt.n	80070dc <_malloc_r+0x1c>
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d904      	bls.n	80070e6 <_malloc_r+0x26>
 80070dc:	230c      	movs	r3, #12
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	2000      	movs	r0, #0
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071bc <_malloc_r+0xfc>
 80070ea:	f000 f869 	bl	80071c0 <__malloc_lock>
 80070ee:	f8d8 3000 	ldr.w	r3, [r8]
 80070f2:	461c      	mov	r4, r3
 80070f4:	bb44      	cbnz	r4, 8007148 <_malloc_r+0x88>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ffbf 	bl	800707c <sbrk_aligned>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	4604      	mov	r4, r0
 8007102:	d158      	bne.n	80071b6 <_malloc_r+0xf6>
 8007104:	f8d8 4000 	ldr.w	r4, [r8]
 8007108:	4627      	mov	r7, r4
 800710a:	2f00      	cmp	r7, #0
 800710c:	d143      	bne.n	8007196 <_malloc_r+0xd6>
 800710e:	2c00      	cmp	r4, #0
 8007110:	d04b      	beq.n	80071aa <_malloc_r+0xea>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	eb04 0903 	add.w	r9, r4, r3
 800711c:	f001 fdc2 	bl	8008ca4 <_sbrk_r>
 8007120:	4581      	cmp	r9, r0
 8007122:	d142      	bne.n	80071aa <_malloc_r+0xea>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	1a6d      	subs	r5, r5, r1
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ffa6 	bl	800707c <sbrk_aligned>
 8007130:	3001      	adds	r0, #1
 8007132:	d03a      	beq.n	80071aa <_malloc_r+0xea>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	442b      	add	r3, r5
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	bb62      	cbnz	r2, 800719c <_malloc_r+0xdc>
 8007142:	f8c8 7000 	str.w	r7, [r8]
 8007146:	e00f      	b.n	8007168 <_malloc_r+0xa8>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	1b52      	subs	r2, r2, r5
 800714c:	d420      	bmi.n	8007190 <_malloc_r+0xd0>
 800714e:	2a0b      	cmp	r2, #11
 8007150:	d917      	bls.n	8007182 <_malloc_r+0xc2>
 8007152:	1961      	adds	r1, r4, r5
 8007154:	42a3      	cmp	r3, r4
 8007156:	6025      	str	r5, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	6059      	strne	r1, [r3, #4]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	bf08      	it	eq
 8007160:	f8c8 1000 	streq.w	r1, [r8]
 8007164:	5162      	str	r2, [r4, r5]
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f82f 	bl	80071cc <__malloc_unlock>
 800716e:	f104 000b 	add.w	r0, r4, #11
 8007172:	1d23      	adds	r3, r4, #4
 8007174:	f020 0007 	bic.w	r0, r0, #7
 8007178:	1ac2      	subs	r2, r0, r3
 800717a:	bf1c      	itt	ne
 800717c:	1a1b      	subne	r3, r3, r0
 800717e:	50a3      	strne	r3, [r4, r2]
 8007180:	e7af      	b.n	80070e2 <_malloc_r+0x22>
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	42a3      	cmp	r3, r4
 8007186:	bf0c      	ite	eq
 8007188:	f8c8 2000 	streq.w	r2, [r8]
 800718c:	605a      	strne	r2, [r3, #4]
 800718e:	e7eb      	b.n	8007168 <_malloc_r+0xa8>
 8007190:	4623      	mov	r3, r4
 8007192:	6864      	ldr	r4, [r4, #4]
 8007194:	e7ae      	b.n	80070f4 <_malloc_r+0x34>
 8007196:	463c      	mov	r4, r7
 8007198:	687f      	ldr	r7, [r7, #4]
 800719a:	e7b6      	b.n	800710a <_malloc_r+0x4a>
 800719c:	461a      	mov	r2, r3
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d1fb      	bne.n	800719c <_malloc_r+0xdc>
 80071a4:	2300      	movs	r3, #0
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	e7de      	b.n	8007168 <_malloc_r+0xa8>
 80071aa:	230c      	movs	r3, #12
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	4630      	mov	r0, r6
 80071b0:	f000 f80c 	bl	80071cc <__malloc_unlock>
 80071b4:	e794      	b.n	80070e0 <_malloc_r+0x20>
 80071b6:	6005      	str	r5, [r0, #0]
 80071b8:	e7d6      	b.n	8007168 <_malloc_r+0xa8>
 80071ba:	bf00      	nop
 80071bc:	20000490 	.word	0x20000490

080071c0 <__malloc_lock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_lock+0x8>)
 80071c2:	f7ff b8b4 	b.w	800632e <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	20000488 	.word	0x20000488

080071cc <__malloc_unlock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	@ (80071d4 <__malloc_unlock+0x8>)
 80071ce:	f7ff b8af 	b.w	8006330 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	20000488 	.word	0x20000488

080071d8 <_Balloc>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	69c6      	ldr	r6, [r0, #28]
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	b976      	cbnz	r6, 8007200 <_Balloc+0x28>
 80071e2:	2010      	movs	r0, #16
 80071e4:	f7ff ff42 	bl	800706c <malloc>
 80071e8:	4602      	mov	r2, r0
 80071ea:	61e0      	str	r0, [r4, #28]
 80071ec:	b920      	cbnz	r0, 80071f8 <_Balloc+0x20>
 80071ee:	4b18      	ldr	r3, [pc, #96]	@ (8007250 <_Balloc+0x78>)
 80071f0:	4818      	ldr	r0, [pc, #96]	@ (8007254 <_Balloc+0x7c>)
 80071f2:	216b      	movs	r1, #107	@ 0x6b
 80071f4:	f001 fd7c 	bl	8008cf0 <__assert_func>
 80071f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071fc:	6006      	str	r6, [r0, #0]
 80071fe:	60c6      	str	r6, [r0, #12]
 8007200:	69e6      	ldr	r6, [r4, #28]
 8007202:	68f3      	ldr	r3, [r6, #12]
 8007204:	b183      	cbz	r3, 8007228 <_Balloc+0x50>
 8007206:	69e3      	ldr	r3, [r4, #28]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800720e:	b9b8      	cbnz	r0, 8007240 <_Balloc+0x68>
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f605 	lsl.w	r6, r1, r5
 8007216:	1d72      	adds	r2, r6, #5
 8007218:	0092      	lsls	r2, r2, #2
 800721a:	4620      	mov	r0, r4
 800721c:	f001 fd86 	bl	8008d2c <_calloc_r>
 8007220:	b160      	cbz	r0, 800723c <_Balloc+0x64>
 8007222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007226:	e00e      	b.n	8007246 <_Balloc+0x6e>
 8007228:	2221      	movs	r2, #33	@ 0x21
 800722a:	2104      	movs	r1, #4
 800722c:	4620      	mov	r0, r4
 800722e:	f001 fd7d 	bl	8008d2c <_calloc_r>
 8007232:	69e3      	ldr	r3, [r4, #28]
 8007234:	60f0      	str	r0, [r6, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e4      	bne.n	8007206 <_Balloc+0x2e>
 800723c:	2000      	movs	r0, #0
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	6802      	ldr	r2, [r0, #0]
 8007242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007246:	2300      	movs	r3, #0
 8007248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800724c:	e7f7      	b.n	800723e <_Balloc+0x66>
 800724e:	bf00      	nop
 8007250:	08009a66 	.word	0x08009a66
 8007254:	08009ae6 	.word	0x08009ae6

08007258 <_Bfree>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	69c6      	ldr	r6, [r0, #28]
 800725c:	4605      	mov	r5, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b976      	cbnz	r6, 8007280 <_Bfree+0x28>
 8007262:	2010      	movs	r0, #16
 8007264:	f7ff ff02 	bl	800706c <malloc>
 8007268:	4602      	mov	r2, r0
 800726a:	61e8      	str	r0, [r5, #28]
 800726c:	b920      	cbnz	r0, 8007278 <_Bfree+0x20>
 800726e:	4b09      	ldr	r3, [pc, #36]	@ (8007294 <_Bfree+0x3c>)
 8007270:	4809      	ldr	r0, [pc, #36]	@ (8007298 <_Bfree+0x40>)
 8007272:	218f      	movs	r1, #143	@ 0x8f
 8007274:	f001 fd3c 	bl	8008cf0 <__assert_func>
 8007278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800727c:	6006      	str	r6, [r0, #0]
 800727e:	60c6      	str	r6, [r0, #12]
 8007280:	b13c      	cbz	r4, 8007292 <_Bfree+0x3a>
 8007282:	69eb      	ldr	r3, [r5, #28]
 8007284:	6862      	ldr	r2, [r4, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800728c:	6021      	str	r1, [r4, #0]
 800728e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	08009a66 	.word	0x08009a66
 8007298:	08009ae6 	.word	0x08009ae6

0800729c <__multadd>:
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	690d      	ldr	r5, [r1, #16]
 80072a2:	4607      	mov	r7, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	461e      	mov	r6, r3
 80072a8:	f101 0c14 	add.w	ip, r1, #20
 80072ac:	2000      	movs	r0, #0
 80072ae:	f8dc 3000 	ldr.w	r3, [ip]
 80072b2:	b299      	uxth	r1, r3
 80072b4:	fb02 6101 	mla	r1, r2, r1, r6
 80072b8:	0c1e      	lsrs	r6, r3, #16
 80072ba:	0c0b      	lsrs	r3, r1, #16
 80072bc:	fb02 3306 	mla	r3, r2, r6, r3
 80072c0:	b289      	uxth	r1, r1
 80072c2:	3001      	adds	r0, #1
 80072c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072c8:	4285      	cmp	r5, r0
 80072ca:	f84c 1b04 	str.w	r1, [ip], #4
 80072ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072d2:	dcec      	bgt.n	80072ae <__multadd+0x12>
 80072d4:	b30e      	cbz	r6, 800731a <__multadd+0x7e>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc19      	bgt.n	8007310 <__multadd+0x74>
 80072dc:	6861      	ldr	r1, [r4, #4]
 80072de:	4638      	mov	r0, r7
 80072e0:	3101      	adds	r1, #1
 80072e2:	f7ff ff79 	bl	80071d8 <_Balloc>
 80072e6:	4680      	mov	r8, r0
 80072e8:	b928      	cbnz	r0, 80072f6 <__multadd+0x5a>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <__multadd+0x84>)
 80072ee:	480d      	ldr	r0, [pc, #52]	@ (8007324 <__multadd+0x88>)
 80072f0:	21ba      	movs	r1, #186	@ 0xba
 80072f2:	f001 fcfd 	bl	8008cf0 <__assert_func>
 80072f6:	6922      	ldr	r2, [r4, #16]
 80072f8:	3202      	adds	r2, #2
 80072fa:	f104 010c 	add.w	r1, r4, #12
 80072fe:	0092      	lsls	r2, r2, #2
 8007300:	300c      	adds	r0, #12
 8007302:	f001 fcdf 	bl	8008cc4 <memcpy>
 8007306:	4621      	mov	r1, r4
 8007308:	4638      	mov	r0, r7
 800730a:	f7ff ffa5 	bl	8007258 <_Bfree>
 800730e:	4644      	mov	r4, r8
 8007310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007314:	3501      	adds	r5, #1
 8007316:	615e      	str	r6, [r3, #20]
 8007318:	6125      	str	r5, [r4, #16]
 800731a:	4620      	mov	r0, r4
 800731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007320:	08009ad5 	.word	0x08009ad5
 8007324:	08009ae6 	.word	0x08009ae6

08007328 <__s2b>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	4615      	mov	r5, r2
 8007330:	461f      	mov	r7, r3
 8007332:	2209      	movs	r2, #9
 8007334:	3308      	adds	r3, #8
 8007336:	4606      	mov	r6, r0
 8007338:	fb93 f3f2 	sdiv	r3, r3, r2
 800733c:	2100      	movs	r1, #0
 800733e:	2201      	movs	r2, #1
 8007340:	429a      	cmp	r2, r3
 8007342:	db09      	blt.n	8007358 <__s2b+0x30>
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff ff47 	bl	80071d8 <_Balloc>
 800734a:	b940      	cbnz	r0, 800735e <__s2b+0x36>
 800734c:	4602      	mov	r2, r0
 800734e:	4b19      	ldr	r3, [pc, #100]	@ (80073b4 <__s2b+0x8c>)
 8007350:	4819      	ldr	r0, [pc, #100]	@ (80073b8 <__s2b+0x90>)
 8007352:	21d3      	movs	r1, #211	@ 0xd3
 8007354:	f001 fccc 	bl	8008cf0 <__assert_func>
 8007358:	0052      	lsls	r2, r2, #1
 800735a:	3101      	adds	r1, #1
 800735c:	e7f0      	b.n	8007340 <__s2b+0x18>
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	6143      	str	r3, [r0, #20]
 8007362:	2d09      	cmp	r5, #9
 8007364:	f04f 0301 	mov.w	r3, #1
 8007368:	6103      	str	r3, [r0, #16]
 800736a:	dd16      	ble.n	800739a <__s2b+0x72>
 800736c:	f104 0909 	add.w	r9, r4, #9
 8007370:	46c8      	mov	r8, r9
 8007372:	442c      	add	r4, r5
 8007374:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007378:	4601      	mov	r1, r0
 800737a:	3b30      	subs	r3, #48	@ 0x30
 800737c:	220a      	movs	r2, #10
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ff8c 	bl	800729c <__multadd>
 8007384:	45a0      	cmp	r8, r4
 8007386:	d1f5      	bne.n	8007374 <__s2b+0x4c>
 8007388:	f1a5 0408 	sub.w	r4, r5, #8
 800738c:	444c      	add	r4, r9
 800738e:	1b2d      	subs	r5, r5, r4
 8007390:	1963      	adds	r3, r4, r5
 8007392:	42bb      	cmp	r3, r7
 8007394:	db04      	blt.n	80073a0 <__s2b+0x78>
 8007396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739a:	340a      	adds	r4, #10
 800739c:	2509      	movs	r5, #9
 800739e:	e7f6      	b.n	800738e <__s2b+0x66>
 80073a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073a4:	4601      	mov	r1, r0
 80073a6:	3b30      	subs	r3, #48	@ 0x30
 80073a8:	220a      	movs	r2, #10
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7ff ff76 	bl	800729c <__multadd>
 80073b0:	e7ee      	b.n	8007390 <__s2b+0x68>
 80073b2:	bf00      	nop
 80073b4:	08009ad5 	.word	0x08009ad5
 80073b8:	08009ae6 	.word	0x08009ae6

080073bc <__hi0bits>:
 80073bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073c0:	4603      	mov	r3, r0
 80073c2:	bf36      	itet	cc
 80073c4:	0403      	lslcc	r3, r0, #16
 80073c6:	2000      	movcs	r0, #0
 80073c8:	2010      	movcc	r0, #16
 80073ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ce:	bf3c      	itt	cc
 80073d0:	021b      	lslcc	r3, r3, #8
 80073d2:	3008      	addcc	r0, #8
 80073d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073d8:	bf3c      	itt	cc
 80073da:	011b      	lslcc	r3, r3, #4
 80073dc:	3004      	addcc	r0, #4
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e2:	bf3c      	itt	cc
 80073e4:	009b      	lslcc	r3, r3, #2
 80073e6:	3002      	addcc	r0, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db05      	blt.n	80073f8 <__hi0bits+0x3c>
 80073ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073f0:	f100 0001 	add.w	r0, r0, #1
 80073f4:	bf08      	it	eq
 80073f6:	2020      	moveq	r0, #32
 80073f8:	4770      	bx	lr

080073fa <__lo0bits>:
 80073fa:	6803      	ldr	r3, [r0, #0]
 80073fc:	4602      	mov	r2, r0
 80073fe:	f013 0007 	ands.w	r0, r3, #7
 8007402:	d00b      	beq.n	800741c <__lo0bits+0x22>
 8007404:	07d9      	lsls	r1, r3, #31
 8007406:	d421      	bmi.n	800744c <__lo0bits+0x52>
 8007408:	0798      	lsls	r0, r3, #30
 800740a:	bf49      	itett	mi
 800740c:	085b      	lsrmi	r3, r3, #1
 800740e:	089b      	lsrpl	r3, r3, #2
 8007410:	2001      	movmi	r0, #1
 8007412:	6013      	strmi	r3, [r2, #0]
 8007414:	bf5c      	itt	pl
 8007416:	6013      	strpl	r3, [r2, #0]
 8007418:	2002      	movpl	r0, #2
 800741a:	4770      	bx	lr
 800741c:	b299      	uxth	r1, r3
 800741e:	b909      	cbnz	r1, 8007424 <__lo0bits+0x2a>
 8007420:	0c1b      	lsrs	r3, r3, #16
 8007422:	2010      	movs	r0, #16
 8007424:	b2d9      	uxtb	r1, r3
 8007426:	b909      	cbnz	r1, 800742c <__lo0bits+0x32>
 8007428:	3008      	adds	r0, #8
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	0719      	lsls	r1, r3, #28
 800742e:	bf04      	itt	eq
 8007430:	091b      	lsreq	r3, r3, #4
 8007432:	3004      	addeq	r0, #4
 8007434:	0799      	lsls	r1, r3, #30
 8007436:	bf04      	itt	eq
 8007438:	089b      	lsreq	r3, r3, #2
 800743a:	3002      	addeq	r0, #2
 800743c:	07d9      	lsls	r1, r3, #31
 800743e:	d403      	bmi.n	8007448 <__lo0bits+0x4e>
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	f100 0001 	add.w	r0, r0, #1
 8007446:	d003      	beq.n	8007450 <__lo0bits+0x56>
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4770      	bx	lr
 800744c:	2000      	movs	r0, #0
 800744e:	4770      	bx	lr
 8007450:	2020      	movs	r0, #32
 8007452:	4770      	bx	lr

08007454 <__i2b>:
 8007454:	b510      	push	{r4, lr}
 8007456:	460c      	mov	r4, r1
 8007458:	2101      	movs	r1, #1
 800745a:	f7ff febd 	bl	80071d8 <_Balloc>
 800745e:	4602      	mov	r2, r0
 8007460:	b928      	cbnz	r0, 800746e <__i2b+0x1a>
 8007462:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <__i2b+0x24>)
 8007464:	4805      	ldr	r0, [pc, #20]	@ (800747c <__i2b+0x28>)
 8007466:	f240 1145 	movw	r1, #325	@ 0x145
 800746a:	f001 fc41 	bl	8008cf0 <__assert_func>
 800746e:	2301      	movs	r3, #1
 8007470:	6144      	str	r4, [r0, #20]
 8007472:	6103      	str	r3, [r0, #16]
 8007474:	bd10      	pop	{r4, pc}
 8007476:	bf00      	nop
 8007478:	08009ad5 	.word	0x08009ad5
 800747c:	08009ae6 	.word	0x08009ae6

08007480 <__multiply>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	4614      	mov	r4, r2
 8007486:	690a      	ldr	r2, [r1, #16]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	bfa8      	it	ge
 800748e:	4623      	movge	r3, r4
 8007490:	460f      	mov	r7, r1
 8007492:	bfa4      	itt	ge
 8007494:	460c      	movge	r4, r1
 8007496:	461f      	movge	r7, r3
 8007498:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800749c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	6861      	ldr	r1, [r4, #4]
 80074a4:	eb0a 0609 	add.w	r6, sl, r9
 80074a8:	42b3      	cmp	r3, r6
 80074aa:	b085      	sub	sp, #20
 80074ac:	bfb8      	it	lt
 80074ae:	3101      	addlt	r1, #1
 80074b0:	f7ff fe92 	bl	80071d8 <_Balloc>
 80074b4:	b930      	cbnz	r0, 80074c4 <__multiply+0x44>
 80074b6:	4602      	mov	r2, r0
 80074b8:	4b44      	ldr	r3, [pc, #272]	@ (80075cc <__multiply+0x14c>)
 80074ba:	4845      	ldr	r0, [pc, #276]	@ (80075d0 <__multiply+0x150>)
 80074bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074c0:	f001 fc16 	bl	8008cf0 <__assert_func>
 80074c4:	f100 0514 	add.w	r5, r0, #20
 80074c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074cc:	462b      	mov	r3, r5
 80074ce:	2200      	movs	r2, #0
 80074d0:	4543      	cmp	r3, r8
 80074d2:	d321      	bcc.n	8007518 <__multiply+0x98>
 80074d4:	f107 0114 	add.w	r1, r7, #20
 80074d8:	f104 0214 	add.w	r2, r4, #20
 80074dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80074e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80074e4:	9302      	str	r3, [sp, #8]
 80074e6:	1b13      	subs	r3, r2, r4
 80074e8:	3b15      	subs	r3, #21
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	3304      	adds	r3, #4
 80074f0:	f104 0715 	add.w	r7, r4, #21
 80074f4:	42ba      	cmp	r2, r7
 80074f6:	bf38      	it	cc
 80074f8:	2304      	movcc	r3, #4
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	9b02      	ldr	r3, [sp, #8]
 80074fe:	9103      	str	r1, [sp, #12]
 8007500:	428b      	cmp	r3, r1
 8007502:	d80c      	bhi.n	800751e <__multiply+0x9e>
 8007504:	2e00      	cmp	r6, #0
 8007506:	dd03      	ble.n	8007510 <__multiply+0x90>
 8007508:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800750c:	2b00      	cmp	r3, #0
 800750e:	d05b      	beq.n	80075c8 <__multiply+0x148>
 8007510:	6106      	str	r6, [r0, #16]
 8007512:	b005      	add	sp, #20
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007518:	f843 2b04 	str.w	r2, [r3], #4
 800751c:	e7d8      	b.n	80074d0 <__multiply+0x50>
 800751e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007522:	f1ba 0f00 	cmp.w	sl, #0
 8007526:	d024      	beq.n	8007572 <__multiply+0xf2>
 8007528:	f104 0e14 	add.w	lr, r4, #20
 800752c:	46a9      	mov	r9, r5
 800752e:	f04f 0c00 	mov.w	ip, #0
 8007532:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007536:	f8d9 3000 	ldr.w	r3, [r9]
 800753a:	fa1f fb87 	uxth.w	fp, r7
 800753e:	b29b      	uxth	r3, r3
 8007540:	fb0a 330b 	mla	r3, sl, fp, r3
 8007544:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007548:	f8d9 7000 	ldr.w	r7, [r9]
 800754c:	4463      	add	r3, ip
 800754e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007552:	fb0a c70b 	mla	r7, sl, fp, ip
 8007556:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800755a:	b29b      	uxth	r3, r3
 800755c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007560:	4572      	cmp	r2, lr
 8007562:	f849 3b04 	str.w	r3, [r9], #4
 8007566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800756a:	d8e2      	bhi.n	8007532 <__multiply+0xb2>
 800756c:	9b01      	ldr	r3, [sp, #4]
 800756e:	f845 c003 	str.w	ip, [r5, r3]
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007578:	3104      	adds	r1, #4
 800757a:	f1b9 0f00 	cmp.w	r9, #0
 800757e:	d021      	beq.n	80075c4 <__multiply+0x144>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	f104 0c14 	add.w	ip, r4, #20
 8007586:	46ae      	mov	lr, r5
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	f8bc b000 	ldrh.w	fp, [ip]
 8007590:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007594:	fb09 770b 	mla	r7, r9, fp, r7
 8007598:	4457      	add	r7, sl
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075a0:	f84e 3b04 	str.w	r3, [lr], #4
 80075a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ac:	f8be 3000 	ldrh.w	r3, [lr]
 80075b0:	fb09 330a 	mla	r3, r9, sl, r3
 80075b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075b8:	4562      	cmp	r2, ip
 80075ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075be:	d8e5      	bhi.n	800758c <__multiply+0x10c>
 80075c0:	9f01      	ldr	r7, [sp, #4]
 80075c2:	51eb      	str	r3, [r5, r7]
 80075c4:	3504      	adds	r5, #4
 80075c6:	e799      	b.n	80074fc <__multiply+0x7c>
 80075c8:	3e01      	subs	r6, #1
 80075ca:	e79b      	b.n	8007504 <__multiply+0x84>
 80075cc:	08009ad5 	.word	0x08009ad5
 80075d0:	08009ae6 	.word	0x08009ae6

080075d4 <__pow5mult>:
 80075d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d8:	4615      	mov	r5, r2
 80075da:	f012 0203 	ands.w	r2, r2, #3
 80075de:	4607      	mov	r7, r0
 80075e0:	460e      	mov	r6, r1
 80075e2:	d007      	beq.n	80075f4 <__pow5mult+0x20>
 80075e4:	4c25      	ldr	r4, [pc, #148]	@ (800767c <__pow5mult+0xa8>)
 80075e6:	3a01      	subs	r2, #1
 80075e8:	2300      	movs	r3, #0
 80075ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ee:	f7ff fe55 	bl	800729c <__multadd>
 80075f2:	4606      	mov	r6, r0
 80075f4:	10ad      	asrs	r5, r5, #2
 80075f6:	d03d      	beq.n	8007674 <__pow5mult+0xa0>
 80075f8:	69fc      	ldr	r4, [r7, #28]
 80075fa:	b97c      	cbnz	r4, 800761c <__pow5mult+0x48>
 80075fc:	2010      	movs	r0, #16
 80075fe:	f7ff fd35 	bl	800706c <malloc>
 8007602:	4602      	mov	r2, r0
 8007604:	61f8      	str	r0, [r7, #28]
 8007606:	b928      	cbnz	r0, 8007614 <__pow5mult+0x40>
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <__pow5mult+0xac>)
 800760a:	481e      	ldr	r0, [pc, #120]	@ (8007684 <__pow5mult+0xb0>)
 800760c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007610:	f001 fb6e 	bl	8008cf0 <__assert_func>
 8007614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007618:	6004      	str	r4, [r0, #0]
 800761a:	60c4      	str	r4, [r0, #12]
 800761c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007624:	b94c      	cbnz	r4, 800763a <__pow5mult+0x66>
 8007626:	f240 2171 	movw	r1, #625	@ 0x271
 800762a:	4638      	mov	r0, r7
 800762c:	f7ff ff12 	bl	8007454 <__i2b>
 8007630:	2300      	movs	r3, #0
 8007632:	f8c8 0008 	str.w	r0, [r8, #8]
 8007636:	4604      	mov	r4, r0
 8007638:	6003      	str	r3, [r0, #0]
 800763a:	f04f 0900 	mov.w	r9, #0
 800763e:	07eb      	lsls	r3, r5, #31
 8007640:	d50a      	bpl.n	8007658 <__pow5mult+0x84>
 8007642:	4631      	mov	r1, r6
 8007644:	4622      	mov	r2, r4
 8007646:	4638      	mov	r0, r7
 8007648:	f7ff ff1a 	bl	8007480 <__multiply>
 800764c:	4631      	mov	r1, r6
 800764e:	4680      	mov	r8, r0
 8007650:	4638      	mov	r0, r7
 8007652:	f7ff fe01 	bl	8007258 <_Bfree>
 8007656:	4646      	mov	r6, r8
 8007658:	106d      	asrs	r5, r5, #1
 800765a:	d00b      	beq.n	8007674 <__pow5mult+0xa0>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	b938      	cbnz	r0, 8007670 <__pow5mult+0x9c>
 8007660:	4622      	mov	r2, r4
 8007662:	4621      	mov	r1, r4
 8007664:	4638      	mov	r0, r7
 8007666:	f7ff ff0b 	bl	8007480 <__multiply>
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	f8c0 9000 	str.w	r9, [r0]
 8007670:	4604      	mov	r4, r0
 8007672:	e7e4      	b.n	800763e <__pow5mult+0x6a>
 8007674:	4630      	mov	r0, r6
 8007676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800767a:	bf00      	nop
 800767c:	08009b40 	.word	0x08009b40
 8007680:	08009a66 	.word	0x08009a66
 8007684:	08009ae6 	.word	0x08009ae6

08007688 <__lshift>:
 8007688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	460c      	mov	r4, r1
 800768e:	6849      	ldr	r1, [r1, #4]
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007696:	68a3      	ldr	r3, [r4, #8]
 8007698:	4607      	mov	r7, r0
 800769a:	4691      	mov	r9, r2
 800769c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076a0:	f108 0601 	add.w	r6, r8, #1
 80076a4:	42b3      	cmp	r3, r6
 80076a6:	db0b      	blt.n	80076c0 <__lshift+0x38>
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff fd95 	bl	80071d8 <_Balloc>
 80076ae:	4605      	mov	r5, r0
 80076b0:	b948      	cbnz	r0, 80076c6 <__lshift+0x3e>
 80076b2:	4602      	mov	r2, r0
 80076b4:	4b28      	ldr	r3, [pc, #160]	@ (8007758 <__lshift+0xd0>)
 80076b6:	4829      	ldr	r0, [pc, #164]	@ (800775c <__lshift+0xd4>)
 80076b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076bc:	f001 fb18 	bl	8008cf0 <__assert_func>
 80076c0:	3101      	adds	r1, #1
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	e7ee      	b.n	80076a4 <__lshift+0x1c>
 80076c6:	2300      	movs	r3, #0
 80076c8:	f100 0114 	add.w	r1, r0, #20
 80076cc:	f100 0210 	add.w	r2, r0, #16
 80076d0:	4618      	mov	r0, r3
 80076d2:	4553      	cmp	r3, sl
 80076d4:	db33      	blt.n	800773e <__lshift+0xb6>
 80076d6:	6920      	ldr	r0, [r4, #16]
 80076d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076dc:	f104 0314 	add.w	r3, r4, #20
 80076e0:	f019 091f 	ands.w	r9, r9, #31
 80076e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076ec:	d02b      	beq.n	8007746 <__lshift+0xbe>
 80076ee:	f1c9 0e20 	rsb	lr, r9, #32
 80076f2:	468a      	mov	sl, r1
 80076f4:	2200      	movs	r2, #0
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	fa00 f009 	lsl.w	r0, r0, r9
 80076fc:	4310      	orrs	r0, r2
 80076fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007702:	f853 2b04 	ldr.w	r2, [r3], #4
 8007706:	459c      	cmp	ip, r3
 8007708:	fa22 f20e 	lsr.w	r2, r2, lr
 800770c:	d8f3      	bhi.n	80076f6 <__lshift+0x6e>
 800770e:	ebac 0304 	sub.w	r3, ip, r4
 8007712:	3b15      	subs	r3, #21
 8007714:	f023 0303 	bic.w	r3, r3, #3
 8007718:	3304      	adds	r3, #4
 800771a:	f104 0015 	add.w	r0, r4, #21
 800771e:	4584      	cmp	ip, r0
 8007720:	bf38      	it	cc
 8007722:	2304      	movcc	r3, #4
 8007724:	50ca      	str	r2, [r1, r3]
 8007726:	b10a      	cbz	r2, 800772c <__lshift+0xa4>
 8007728:	f108 0602 	add.w	r6, r8, #2
 800772c:	3e01      	subs	r6, #1
 800772e:	4638      	mov	r0, r7
 8007730:	612e      	str	r6, [r5, #16]
 8007732:	4621      	mov	r1, r4
 8007734:	f7ff fd90 	bl	8007258 <_Bfree>
 8007738:	4628      	mov	r0, r5
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007742:	3301      	adds	r3, #1
 8007744:	e7c5      	b.n	80076d2 <__lshift+0x4a>
 8007746:	3904      	subs	r1, #4
 8007748:	f853 2b04 	ldr.w	r2, [r3], #4
 800774c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007750:	459c      	cmp	ip, r3
 8007752:	d8f9      	bhi.n	8007748 <__lshift+0xc0>
 8007754:	e7ea      	b.n	800772c <__lshift+0xa4>
 8007756:	bf00      	nop
 8007758:	08009ad5 	.word	0x08009ad5
 800775c:	08009ae6 	.word	0x08009ae6

08007760 <__mcmp>:
 8007760:	690a      	ldr	r2, [r1, #16]
 8007762:	4603      	mov	r3, r0
 8007764:	6900      	ldr	r0, [r0, #16]
 8007766:	1a80      	subs	r0, r0, r2
 8007768:	b530      	push	{r4, r5, lr}
 800776a:	d10e      	bne.n	800778a <__mcmp+0x2a>
 800776c:	3314      	adds	r3, #20
 800776e:	3114      	adds	r1, #20
 8007770:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007774:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800777c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007780:	4295      	cmp	r5, r2
 8007782:	d003      	beq.n	800778c <__mcmp+0x2c>
 8007784:	d205      	bcs.n	8007792 <__mcmp+0x32>
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	bd30      	pop	{r4, r5, pc}
 800778c:	42a3      	cmp	r3, r4
 800778e:	d3f3      	bcc.n	8007778 <__mcmp+0x18>
 8007790:	e7fb      	b.n	800778a <__mcmp+0x2a>
 8007792:	2001      	movs	r0, #1
 8007794:	e7f9      	b.n	800778a <__mcmp+0x2a>
	...

08007798 <__mdiff>:
 8007798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	4689      	mov	r9, r1
 800779e:	4606      	mov	r6, r0
 80077a0:	4611      	mov	r1, r2
 80077a2:	4648      	mov	r0, r9
 80077a4:	4614      	mov	r4, r2
 80077a6:	f7ff ffdb 	bl	8007760 <__mcmp>
 80077aa:	1e05      	subs	r5, r0, #0
 80077ac:	d112      	bne.n	80077d4 <__mdiff+0x3c>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff fd11 	bl	80071d8 <_Balloc>
 80077b6:	4602      	mov	r2, r0
 80077b8:	b928      	cbnz	r0, 80077c6 <__mdiff+0x2e>
 80077ba:	4b3f      	ldr	r3, [pc, #252]	@ (80078b8 <__mdiff+0x120>)
 80077bc:	f240 2137 	movw	r1, #567	@ 0x237
 80077c0:	483e      	ldr	r0, [pc, #248]	@ (80078bc <__mdiff+0x124>)
 80077c2:	f001 fa95 	bl	8008cf0 <__assert_func>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077cc:	4610      	mov	r0, r2
 80077ce:	b003      	add	sp, #12
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	bfbc      	itt	lt
 80077d6:	464b      	movlt	r3, r9
 80077d8:	46a1      	movlt	r9, r4
 80077da:	4630      	mov	r0, r6
 80077dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077e0:	bfba      	itte	lt
 80077e2:	461c      	movlt	r4, r3
 80077e4:	2501      	movlt	r5, #1
 80077e6:	2500      	movge	r5, #0
 80077e8:	f7ff fcf6 	bl	80071d8 <_Balloc>
 80077ec:	4602      	mov	r2, r0
 80077ee:	b918      	cbnz	r0, 80077f8 <__mdiff+0x60>
 80077f0:	4b31      	ldr	r3, [pc, #196]	@ (80078b8 <__mdiff+0x120>)
 80077f2:	f240 2145 	movw	r1, #581	@ 0x245
 80077f6:	e7e3      	b.n	80077c0 <__mdiff+0x28>
 80077f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077fc:	6926      	ldr	r6, [r4, #16]
 80077fe:	60c5      	str	r5, [r0, #12]
 8007800:	f109 0310 	add.w	r3, r9, #16
 8007804:	f109 0514 	add.w	r5, r9, #20
 8007808:	f104 0e14 	add.w	lr, r4, #20
 800780c:	f100 0b14 	add.w	fp, r0, #20
 8007810:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007814:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	46d9      	mov	r9, fp
 800781c:	f04f 0c00 	mov.w	ip, #0
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007826:	f853 af04 	ldr.w	sl, [r3, #4]!
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	fa1f f38a 	uxth.w	r3, sl
 8007830:	4619      	mov	r1, r3
 8007832:	b283      	uxth	r3, r0
 8007834:	1acb      	subs	r3, r1, r3
 8007836:	0c00      	lsrs	r0, r0, #16
 8007838:	4463      	add	r3, ip
 800783a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800783e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007848:	4576      	cmp	r6, lr
 800784a:	f849 3b04 	str.w	r3, [r9], #4
 800784e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007852:	d8e5      	bhi.n	8007820 <__mdiff+0x88>
 8007854:	1b33      	subs	r3, r6, r4
 8007856:	3b15      	subs	r3, #21
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	3415      	adds	r4, #21
 800785e:	3304      	adds	r3, #4
 8007860:	42a6      	cmp	r6, r4
 8007862:	bf38      	it	cc
 8007864:	2304      	movcc	r3, #4
 8007866:	441d      	add	r5, r3
 8007868:	445b      	add	r3, fp
 800786a:	461e      	mov	r6, r3
 800786c:	462c      	mov	r4, r5
 800786e:	4544      	cmp	r4, r8
 8007870:	d30e      	bcc.n	8007890 <__mdiff+0xf8>
 8007872:	f108 0103 	add.w	r1, r8, #3
 8007876:	1b49      	subs	r1, r1, r5
 8007878:	f021 0103 	bic.w	r1, r1, #3
 800787c:	3d03      	subs	r5, #3
 800787e:	45a8      	cmp	r8, r5
 8007880:	bf38      	it	cc
 8007882:	2100      	movcc	r1, #0
 8007884:	440b      	add	r3, r1
 8007886:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800788a:	b191      	cbz	r1, 80078b2 <__mdiff+0x11a>
 800788c:	6117      	str	r7, [r2, #16]
 800788e:	e79d      	b.n	80077cc <__mdiff+0x34>
 8007890:	f854 1b04 	ldr.w	r1, [r4], #4
 8007894:	46e6      	mov	lr, ip
 8007896:	0c08      	lsrs	r0, r1, #16
 8007898:	fa1c fc81 	uxtah	ip, ip, r1
 800789c:	4471      	add	r1, lr
 800789e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078a2:	b289      	uxth	r1, r1
 80078a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078a8:	f846 1b04 	str.w	r1, [r6], #4
 80078ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078b0:	e7dd      	b.n	800786e <__mdiff+0xd6>
 80078b2:	3f01      	subs	r7, #1
 80078b4:	e7e7      	b.n	8007886 <__mdiff+0xee>
 80078b6:	bf00      	nop
 80078b8:	08009ad5 	.word	0x08009ad5
 80078bc:	08009ae6 	.word	0x08009ae6

080078c0 <__ulp>:
 80078c0:	b082      	sub	sp, #8
 80078c2:	ed8d 0b00 	vstr	d0, [sp]
 80078c6:	9a01      	ldr	r2, [sp, #4]
 80078c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <__ulp+0x48>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	dc08      	bgt.n	80078e6 <__ulp+0x26>
 80078d4:	425b      	negs	r3, r3
 80078d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80078da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80078de:	da04      	bge.n	80078ea <__ulp+0x2a>
 80078e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80078e4:	4113      	asrs	r3, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	e008      	b.n	80078fc <__ulp+0x3c>
 80078ea:	f1a2 0314 	sub.w	r3, r2, #20
 80078ee:	2b1e      	cmp	r3, #30
 80078f0:	bfda      	itte	le
 80078f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80078f6:	40da      	lsrle	r2, r3
 80078f8:	2201      	movgt	r2, #1
 80078fa:	2300      	movs	r3, #0
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	ec41 0b10 	vmov	d0, r0, r1
 8007904:	b002      	add	sp, #8
 8007906:	4770      	bx	lr
 8007908:	7ff00000 	.word	0x7ff00000

0800790c <__b2d>:
 800790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007910:	6906      	ldr	r6, [r0, #16]
 8007912:	f100 0814 	add.w	r8, r0, #20
 8007916:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800791a:	1f37      	subs	r7, r6, #4
 800791c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007920:	4610      	mov	r0, r2
 8007922:	f7ff fd4b 	bl	80073bc <__hi0bits>
 8007926:	f1c0 0320 	rsb	r3, r0, #32
 800792a:	280a      	cmp	r0, #10
 800792c:	600b      	str	r3, [r1, #0]
 800792e:	491b      	ldr	r1, [pc, #108]	@ (800799c <__b2d+0x90>)
 8007930:	dc15      	bgt.n	800795e <__b2d+0x52>
 8007932:	f1c0 0c0b 	rsb	ip, r0, #11
 8007936:	fa22 f30c 	lsr.w	r3, r2, ip
 800793a:	45b8      	cmp	r8, r7
 800793c:	ea43 0501 	orr.w	r5, r3, r1
 8007940:	bf34      	ite	cc
 8007942:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007946:	2300      	movcs	r3, #0
 8007948:	3015      	adds	r0, #21
 800794a:	fa02 f000 	lsl.w	r0, r2, r0
 800794e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007952:	4303      	orrs	r3, r0
 8007954:	461c      	mov	r4, r3
 8007956:	ec45 4b10 	vmov	d0, r4, r5
 800795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795e:	45b8      	cmp	r8, r7
 8007960:	bf3a      	itte	cc
 8007962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007966:	f1a6 0708 	subcc.w	r7, r6, #8
 800796a:	2300      	movcs	r3, #0
 800796c:	380b      	subs	r0, #11
 800796e:	d012      	beq.n	8007996 <__b2d+0x8a>
 8007970:	f1c0 0120 	rsb	r1, r0, #32
 8007974:	fa23 f401 	lsr.w	r4, r3, r1
 8007978:	4082      	lsls	r2, r0
 800797a:	4322      	orrs	r2, r4
 800797c:	4547      	cmp	r7, r8
 800797e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007982:	bf8c      	ite	hi
 8007984:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007988:	2200      	movls	r2, #0
 800798a:	4083      	lsls	r3, r0
 800798c:	40ca      	lsrs	r2, r1
 800798e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007992:	4313      	orrs	r3, r2
 8007994:	e7de      	b.n	8007954 <__b2d+0x48>
 8007996:	ea42 0501 	orr.w	r5, r2, r1
 800799a:	e7db      	b.n	8007954 <__b2d+0x48>
 800799c:	3ff00000 	.word	0x3ff00000

080079a0 <__d2b>:
 80079a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079a4:	460f      	mov	r7, r1
 80079a6:	2101      	movs	r1, #1
 80079a8:	ec59 8b10 	vmov	r8, r9, d0
 80079ac:	4616      	mov	r6, r2
 80079ae:	f7ff fc13 	bl	80071d8 <_Balloc>
 80079b2:	4604      	mov	r4, r0
 80079b4:	b930      	cbnz	r0, 80079c4 <__d2b+0x24>
 80079b6:	4602      	mov	r2, r0
 80079b8:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <__d2b+0xa8>)
 80079ba:	4824      	ldr	r0, [pc, #144]	@ (8007a4c <__d2b+0xac>)
 80079bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80079c0:	f001 f996 	bl	8008cf0 <__assert_func>
 80079c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079cc:	b10d      	cbz	r5, 80079d2 <__d2b+0x32>
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	f1b8 0300 	subs.w	r3, r8, #0
 80079d8:	d023      	beq.n	8007a22 <__d2b+0x82>
 80079da:	4668      	mov	r0, sp
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	f7ff fd0c 	bl	80073fa <__lo0bits>
 80079e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079e6:	b1d0      	cbz	r0, 8007a1e <__d2b+0x7e>
 80079e8:	f1c0 0320 	rsb	r3, r0, #32
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	430b      	orrs	r3, r1
 80079f2:	40c2      	lsrs	r2, r0
 80079f4:	6163      	str	r3, [r4, #20]
 80079f6:	9201      	str	r2, [sp, #4]
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	61a3      	str	r3, [r4, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bf0c      	ite	eq
 8007a00:	2201      	moveq	r2, #1
 8007a02:	2202      	movne	r2, #2
 8007a04:	6122      	str	r2, [r4, #16]
 8007a06:	b1a5      	cbz	r5, 8007a32 <__d2b+0x92>
 8007a08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a0c:	4405      	add	r5, r0
 8007a0e:	603d      	str	r5, [r7, #0]
 8007a10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a14:	6030      	str	r0, [r6, #0]
 8007a16:	4620      	mov	r0, r4
 8007a18:	b003      	add	sp, #12
 8007a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	6161      	str	r1, [r4, #20]
 8007a20:	e7ea      	b.n	80079f8 <__d2b+0x58>
 8007a22:	a801      	add	r0, sp, #4
 8007a24:	f7ff fce9 	bl	80073fa <__lo0bits>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	6163      	str	r3, [r4, #20]
 8007a2c:	3020      	adds	r0, #32
 8007a2e:	2201      	movs	r2, #1
 8007a30:	e7e8      	b.n	8007a04 <__d2b+0x64>
 8007a32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a3a:	6038      	str	r0, [r7, #0]
 8007a3c:	6918      	ldr	r0, [r3, #16]
 8007a3e:	f7ff fcbd 	bl	80073bc <__hi0bits>
 8007a42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a46:	e7e5      	b.n	8007a14 <__d2b+0x74>
 8007a48:	08009ad5 	.word	0x08009ad5
 8007a4c:	08009ae6 	.word	0x08009ae6

08007a50 <__ratio>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	b085      	sub	sp, #20
 8007a56:	e9cd 1000 	strd	r1, r0, [sp]
 8007a5a:	a902      	add	r1, sp, #8
 8007a5c:	f7ff ff56 	bl	800790c <__b2d>
 8007a60:	9800      	ldr	r0, [sp, #0]
 8007a62:	a903      	add	r1, sp, #12
 8007a64:	ec55 4b10 	vmov	r4, r5, d0
 8007a68:	f7ff ff50 	bl	800790c <__b2d>
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	6919      	ldr	r1, [r3, #16]
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	1ac9      	subs	r1, r1, r3
 8007a76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	ec5b ab10 	vmov	sl, fp, d0
 8007a80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bfce      	itee	gt
 8007a88:	462a      	movgt	r2, r5
 8007a8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a8e:	465a      	movle	r2, fp
 8007a90:	462f      	mov	r7, r5
 8007a92:	46d9      	mov	r9, fp
 8007a94:	bfcc      	ite	gt
 8007a96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007a9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007a9e:	464b      	mov	r3, r9
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	f7f8 fef1 	bl	800088c <__aeabi_ddiv>
 8007aaa:	ec41 0b10 	vmov	d0, r0, r1
 8007aae:	b005      	add	sp, #20
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ab4 <__copybits>:
 8007ab4:	3901      	subs	r1, #1
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	1149      	asrs	r1, r1, #5
 8007aba:	6914      	ldr	r4, [r2, #16]
 8007abc:	3101      	adds	r1, #1
 8007abe:	f102 0314 	add.w	r3, r2, #20
 8007ac2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ac6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007aca:	1f05      	subs	r5, r0, #4
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d30c      	bcc.n	8007aea <__copybits+0x36>
 8007ad0:	1aa3      	subs	r3, r4, r2
 8007ad2:	3b11      	subs	r3, #17
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	3211      	adds	r2, #17
 8007ada:	42a2      	cmp	r2, r4
 8007adc:	bf88      	it	hi
 8007ade:	2300      	movhi	r3, #0
 8007ae0:	4418      	add	r0, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4288      	cmp	r0, r1
 8007ae6:	d305      	bcc.n	8007af4 <__copybits+0x40>
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
 8007aea:	f853 6b04 	ldr.w	r6, [r3], #4
 8007aee:	f845 6f04 	str.w	r6, [r5, #4]!
 8007af2:	e7eb      	b.n	8007acc <__copybits+0x18>
 8007af4:	f840 3b04 	str.w	r3, [r0], #4
 8007af8:	e7f4      	b.n	8007ae4 <__copybits+0x30>

08007afa <__any_on>:
 8007afa:	f100 0214 	add.w	r2, r0, #20
 8007afe:	6900      	ldr	r0, [r0, #16]
 8007b00:	114b      	asrs	r3, r1, #5
 8007b02:	4298      	cmp	r0, r3
 8007b04:	b510      	push	{r4, lr}
 8007b06:	db11      	blt.n	8007b2c <__any_on+0x32>
 8007b08:	dd0a      	ble.n	8007b20 <__any_on+0x26>
 8007b0a:	f011 011f 	ands.w	r1, r1, #31
 8007b0e:	d007      	beq.n	8007b20 <__any_on+0x26>
 8007b10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b14:	fa24 f001 	lsr.w	r0, r4, r1
 8007b18:	fa00 f101 	lsl.w	r1, r0, r1
 8007b1c:	428c      	cmp	r4, r1
 8007b1e:	d10b      	bne.n	8007b38 <__any_on+0x3e>
 8007b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d803      	bhi.n	8007b30 <__any_on+0x36>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	bd10      	pop	{r4, pc}
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	e7f7      	b.n	8007b20 <__any_on+0x26>
 8007b30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b34:	2900      	cmp	r1, #0
 8007b36:	d0f5      	beq.n	8007b24 <__any_on+0x2a>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e7f6      	b.n	8007b2a <__any_on+0x30>

08007b3c <sulp>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	ec45 4b10 	vmov	d0, r4, r5
 8007b46:	4616      	mov	r6, r2
 8007b48:	f7ff feba 	bl	80078c0 <__ulp>
 8007b4c:	ec51 0b10 	vmov	r0, r1, d0
 8007b50:	b17e      	cbz	r6, 8007b72 <sulp+0x36>
 8007b52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd09      	ble.n	8007b72 <sulp+0x36>
 8007b5e:	051b      	lsls	r3, r3, #20
 8007b60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b64:	2400      	movs	r4, #0
 8007b66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	f7f8 fd63 	bl	8000638 <__aeabi_dmul>
 8007b72:	ec41 0b10 	vmov	d0, r0, r1
 8007b76:	bd70      	pop	{r4, r5, r6, pc}

08007b78 <_strtod_l>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	b09f      	sub	sp, #124	@ 0x7c
 8007b7e:	460c      	mov	r4, r1
 8007b80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b82:	2200      	movs	r2, #0
 8007b84:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b86:	9005      	str	r0, [sp, #20]
 8007b88:	f04f 0a00 	mov.w	sl, #0
 8007b8c:	f04f 0b00 	mov.w	fp, #0
 8007b90:	460a      	mov	r2, r1
 8007b92:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b94:	7811      	ldrb	r1, [r2, #0]
 8007b96:	292b      	cmp	r1, #43	@ 0x2b
 8007b98:	d04a      	beq.n	8007c30 <_strtod_l+0xb8>
 8007b9a:	d838      	bhi.n	8007c0e <_strtod_l+0x96>
 8007b9c:	290d      	cmp	r1, #13
 8007b9e:	d832      	bhi.n	8007c06 <_strtod_l+0x8e>
 8007ba0:	2908      	cmp	r1, #8
 8007ba2:	d832      	bhi.n	8007c0a <_strtod_l+0x92>
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d03b      	beq.n	8007c20 <_strtod_l+0xa8>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007bae:	782a      	ldrb	r2, [r5, #0]
 8007bb0:	2a30      	cmp	r2, #48	@ 0x30
 8007bb2:	f040 80b3 	bne.w	8007d1c <_strtod_l+0x1a4>
 8007bb6:	786a      	ldrb	r2, [r5, #1]
 8007bb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007bbc:	2a58      	cmp	r2, #88	@ 0x58
 8007bbe:	d16e      	bne.n	8007c9e <_strtod_l+0x126>
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4a8e      	ldr	r2, [pc, #568]	@ (8007e04 <_strtod_l+0x28c>)
 8007bcc:	9805      	ldr	r0, [sp, #20]
 8007bce:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bd0:	a919      	add	r1, sp, #100	@ 0x64
 8007bd2:	f001 f927 	bl	8008e24 <__gethex>
 8007bd6:	f010 060f 	ands.w	r6, r0, #15
 8007bda:	4604      	mov	r4, r0
 8007bdc:	d005      	beq.n	8007bea <_strtod_l+0x72>
 8007bde:	2e06      	cmp	r6, #6
 8007be0:	d128      	bne.n	8007c34 <_strtod_l+0xbc>
 8007be2:	3501      	adds	r5, #1
 8007be4:	2300      	movs	r3, #0
 8007be6:	9519      	str	r5, [sp, #100]	@ 0x64
 8007be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 858e 	bne.w	800870e <_strtod_l+0xb96>
 8007bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bf4:	b1cb      	cbz	r3, 8007c2a <_strtod_l+0xb2>
 8007bf6:	4652      	mov	r2, sl
 8007bf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007bfc:	ec43 2b10 	vmov	d0, r2, r3
 8007c00:	b01f      	add	sp, #124	@ 0x7c
 8007c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c06:	2920      	cmp	r1, #32
 8007c08:	d1ce      	bne.n	8007ba8 <_strtod_l+0x30>
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	e7c1      	b.n	8007b92 <_strtod_l+0x1a>
 8007c0e:	292d      	cmp	r1, #45	@ 0x2d
 8007c10:	d1ca      	bne.n	8007ba8 <_strtod_l+0x30>
 8007c12:	2101      	movs	r1, #1
 8007c14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c16:	1c51      	adds	r1, r2, #1
 8007c18:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c1a:	7852      	ldrb	r2, [r2, #1]
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	d1c5      	bne.n	8007bac <_strtod_l+0x34>
 8007c20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c22:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 8570 	bne.w	800870a <_strtod_l+0xb92>
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	e7e5      	b.n	8007bfc <_strtod_l+0x84>
 8007c30:	2100      	movs	r1, #0
 8007c32:	e7ef      	b.n	8007c14 <_strtod_l+0x9c>
 8007c34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c36:	b13a      	cbz	r2, 8007c48 <_strtod_l+0xd0>
 8007c38:	2135      	movs	r1, #53	@ 0x35
 8007c3a:	a81c      	add	r0, sp, #112	@ 0x70
 8007c3c:	f7ff ff3a 	bl	8007ab4 <__copybits>
 8007c40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c42:	9805      	ldr	r0, [sp, #20]
 8007c44:	f7ff fb08 	bl	8007258 <_Bfree>
 8007c48:	3e01      	subs	r6, #1
 8007c4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c4c:	2e04      	cmp	r6, #4
 8007c4e:	d806      	bhi.n	8007c5e <_strtod_l+0xe6>
 8007c50:	e8df f006 	tbb	[pc, r6]
 8007c54:	201d0314 	.word	0x201d0314
 8007c58:	14          	.byte	0x14
 8007c59:	00          	.byte	0x00
 8007c5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c5e:	05e1      	lsls	r1, r4, #23
 8007c60:	bf48      	it	mi
 8007c62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c6a:	0d1b      	lsrs	r3, r3, #20
 8007c6c:	051b      	lsls	r3, r3, #20
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1bb      	bne.n	8007bea <_strtod_l+0x72>
 8007c72:	f7fe fb31 	bl	80062d8 <__errno>
 8007c76:	2322      	movs	r3, #34	@ 0x22
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	e7b6      	b.n	8007bea <_strtod_l+0x72>
 8007c7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c8c:	e7e7      	b.n	8007c5e <_strtod_l+0xe6>
 8007c8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007e0c <_strtod_l+0x294>
 8007c92:	e7e4      	b.n	8007c5e <_strtod_l+0xe6>
 8007c94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c98:	f04f 3aff 	mov.w	sl, #4294967295
 8007c9c:	e7df      	b.n	8007c5e <_strtod_l+0xe6>
 8007c9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b30      	cmp	r3, #48	@ 0x30
 8007ca8:	d0f9      	beq.n	8007c9e <_strtod_l+0x126>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d09d      	beq.n	8007bea <_strtod_l+0x72>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9308      	str	r3, [sp, #32]
 8007cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cbc:	461f      	mov	r7, r3
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007cc2:	7805      	ldrb	r5, [r0, #0]
 8007cc4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007cc8:	b2d9      	uxtb	r1, r3
 8007cca:	2909      	cmp	r1, #9
 8007ccc:	d928      	bls.n	8007d20 <_strtod_l+0x1a8>
 8007cce:	494e      	ldr	r1, [pc, #312]	@ (8007e08 <_strtod_l+0x290>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f000 ffd5 	bl	8008c80 <strncmp>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d032      	beq.n	8007d40 <_strtod_l+0x1c8>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4681      	mov	r9, r0
 8007ce0:	463d      	mov	r5, r7
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2a65      	cmp	r2, #101	@ 0x65
 8007ce6:	d001      	beq.n	8007cec <_strtod_l+0x174>
 8007ce8:	2a45      	cmp	r2, #69	@ 0x45
 8007cea:	d114      	bne.n	8007d16 <_strtod_l+0x19e>
 8007cec:	b91d      	cbnz	r5, 8007cf6 <_strtod_l+0x17e>
 8007cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cf0:	4302      	orrs	r2, r0
 8007cf2:	d095      	beq.n	8007c20 <_strtod_l+0xa8>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007cf8:	1c62      	adds	r2, r4, #1
 8007cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cfc:	7862      	ldrb	r2, [r4, #1]
 8007cfe:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d00:	d077      	beq.n	8007df2 <_strtod_l+0x27a>
 8007d02:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d04:	d07b      	beq.n	8007dfe <_strtod_l+0x286>
 8007d06:	f04f 0c00 	mov.w	ip, #0
 8007d0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d0e:	2909      	cmp	r1, #9
 8007d10:	f240 8082 	bls.w	8007e18 <_strtod_l+0x2a0>
 8007d14:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	e0a2      	b.n	8007e62 <_strtod_l+0x2ea>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e7c7      	b.n	8007cb0 <_strtod_l+0x138>
 8007d20:	2f08      	cmp	r7, #8
 8007d22:	bfd5      	itete	le
 8007d24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d26:	9908      	ldrgt	r1, [sp, #32]
 8007d28:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d30:	f100 0001 	add.w	r0, r0, #1
 8007d34:	bfd4      	ite	le
 8007d36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d38:	9308      	strgt	r3, [sp, #32]
 8007d3a:	3701      	adds	r7, #1
 8007d3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d3e:	e7bf      	b.n	8007cc0 <_strtod_l+0x148>
 8007d40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	b37f      	cbz	r7, 8007daa <_strtod_l+0x232>
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	463d      	mov	r5, r7
 8007d4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d912      	bls.n	8007d7c <_strtod_l+0x204>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e7c4      	b.n	8007ce4 <_strtod_l+0x16c>
 8007d5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d60:	785a      	ldrb	r2, [r3, #1]
 8007d62:	3001      	adds	r0, #1
 8007d64:	2a30      	cmp	r2, #48	@ 0x30
 8007d66:	d0f8      	beq.n	8007d5a <_strtod_l+0x1e2>
 8007d68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	f200 84d3 	bhi.w	8008718 <_strtod_l+0xba0>
 8007d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d76:	4681      	mov	r9, r0
 8007d78:	2000      	movs	r0, #0
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	3a30      	subs	r2, #48	@ 0x30
 8007d7e:	f100 0301 	add.w	r3, r0, #1
 8007d82:	d02a      	beq.n	8007dda <_strtod_l+0x262>
 8007d84:	4499      	add	r9, r3
 8007d86:	eb00 0c05 	add.w	ip, r0, r5
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	210a      	movs	r1, #10
 8007d8e:	4563      	cmp	r3, ip
 8007d90:	d10d      	bne.n	8007dae <_strtod_l+0x236>
 8007d92:	1c69      	adds	r1, r5, #1
 8007d94:	4401      	add	r1, r0
 8007d96:	4428      	add	r0, r5
 8007d98:	2808      	cmp	r0, #8
 8007d9a:	dc16      	bgt.n	8007dca <_strtod_l+0x252>
 8007d9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d9e:	230a      	movs	r3, #10
 8007da0:	fb03 2300 	mla	r3, r3, r0, r2
 8007da4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da6:	2300      	movs	r3, #0
 8007da8:	e018      	b.n	8007ddc <_strtod_l+0x264>
 8007daa:	4638      	mov	r0, r7
 8007dac:	e7da      	b.n	8007d64 <_strtod_l+0x1ec>
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	f103 0301 	add.w	r3, r3, #1
 8007db4:	dc03      	bgt.n	8007dbe <_strtod_l+0x246>
 8007db6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007db8:	434e      	muls	r6, r1
 8007dba:	960a      	str	r6, [sp, #40]	@ 0x28
 8007dbc:	e7e7      	b.n	8007d8e <_strtod_l+0x216>
 8007dbe:	2b10      	cmp	r3, #16
 8007dc0:	bfde      	ittt	le
 8007dc2:	9e08      	ldrle	r6, [sp, #32]
 8007dc4:	434e      	mulle	r6, r1
 8007dc6:	9608      	strle	r6, [sp, #32]
 8007dc8:	e7e1      	b.n	8007d8e <_strtod_l+0x216>
 8007dca:	280f      	cmp	r0, #15
 8007dcc:	dceb      	bgt.n	8007da6 <_strtod_l+0x22e>
 8007dce:	9808      	ldr	r0, [sp, #32]
 8007dd0:	230a      	movs	r3, #10
 8007dd2:	fb03 2300 	mla	r3, r3, r0, r2
 8007dd6:	9308      	str	r3, [sp, #32]
 8007dd8:	e7e5      	b.n	8007da6 <_strtod_l+0x22e>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dde:	1c50      	adds	r0, r2, #1
 8007de0:	9019      	str	r0, [sp, #100]	@ 0x64
 8007de2:	7852      	ldrb	r2, [r2, #1]
 8007de4:	4618      	mov	r0, r3
 8007de6:	460d      	mov	r5, r1
 8007de8:	e7b1      	b.n	8007d4e <_strtod_l+0x1d6>
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	2301      	movs	r3, #1
 8007df0:	e77d      	b.n	8007cee <_strtod_l+0x176>
 8007df2:	f04f 0c00 	mov.w	ip, #0
 8007df6:	1ca2      	adds	r2, r4, #2
 8007df8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dfa:	78a2      	ldrb	r2, [r4, #2]
 8007dfc:	e785      	b.n	8007d0a <_strtod_l+0x192>
 8007dfe:	f04f 0c01 	mov.w	ip, #1
 8007e02:	e7f8      	b.n	8007df6 <_strtod_l+0x27e>
 8007e04:	08009c58 	.word	0x08009c58
 8007e08:	08009c40 	.word	0x08009c40
 8007e0c:	7ff00000 	.word	0x7ff00000
 8007e10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e12:	1c51      	adds	r1, r2, #1
 8007e14:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e16:	7852      	ldrb	r2, [r2, #1]
 8007e18:	2a30      	cmp	r2, #48	@ 0x30
 8007e1a:	d0f9      	beq.n	8007e10 <_strtod_l+0x298>
 8007e1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e20:	2908      	cmp	r1, #8
 8007e22:	f63f af78 	bhi.w	8007d16 <_strtod_l+0x19e>
 8007e26:	3a30      	subs	r2, #48	@ 0x30
 8007e28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e2e:	f04f 080a 	mov.w	r8, #10
 8007e32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e34:	1c56      	adds	r6, r2, #1
 8007e36:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e38:	7852      	ldrb	r2, [r2, #1]
 8007e3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e3e:	f1be 0f09 	cmp.w	lr, #9
 8007e42:	d939      	bls.n	8007eb8 <_strtod_l+0x340>
 8007e44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e46:	1a76      	subs	r6, r6, r1
 8007e48:	2e08      	cmp	r6, #8
 8007e4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e4e:	dc03      	bgt.n	8007e58 <_strtod_l+0x2e0>
 8007e50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e52:	4588      	cmp	r8, r1
 8007e54:	bfa8      	it	ge
 8007e56:	4688      	movge	r8, r1
 8007e58:	f1bc 0f00 	cmp.w	ip, #0
 8007e5c:	d001      	beq.n	8007e62 <_strtod_l+0x2ea>
 8007e5e:	f1c8 0800 	rsb	r8, r8, #0
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	d14e      	bne.n	8007f04 <_strtod_l+0x38c>
 8007e66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e68:	4308      	orrs	r0, r1
 8007e6a:	f47f aebe 	bne.w	8007bea <_strtod_l+0x72>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f47f aed6 	bne.w	8007c20 <_strtod_l+0xa8>
 8007e74:	2a69      	cmp	r2, #105	@ 0x69
 8007e76:	d028      	beq.n	8007eca <_strtod_l+0x352>
 8007e78:	dc25      	bgt.n	8007ec6 <_strtod_l+0x34e>
 8007e7a:	2a49      	cmp	r2, #73	@ 0x49
 8007e7c:	d025      	beq.n	8007eca <_strtod_l+0x352>
 8007e7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e80:	f47f aece 	bne.w	8007c20 <_strtod_l+0xa8>
 8007e84:	499b      	ldr	r1, [pc, #620]	@ (80080f4 <_strtod_l+0x57c>)
 8007e86:	a819      	add	r0, sp, #100	@ 0x64
 8007e88:	f001 f9ee 	bl	8009268 <__match>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f aec7 	beq.w	8007c20 <_strtod_l+0xa8>
 8007e92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b28      	cmp	r3, #40	@ 0x28
 8007e98:	d12e      	bne.n	8007ef8 <_strtod_l+0x380>
 8007e9a:	4997      	ldr	r1, [pc, #604]	@ (80080f8 <_strtod_l+0x580>)
 8007e9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e9e:	a819      	add	r0, sp, #100	@ 0x64
 8007ea0:	f001 f9f6 	bl	8009290 <__hexnan>
 8007ea4:	2805      	cmp	r0, #5
 8007ea6:	d127      	bne.n	8007ef8 <_strtod_l+0x380>
 8007ea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007eaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007eae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007eb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007eb6:	e698      	b.n	8007bea <_strtod_l+0x72>
 8007eb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007eba:	fb08 2101 	mla	r1, r8, r1, r2
 8007ebe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ec2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ec4:	e7b5      	b.n	8007e32 <_strtod_l+0x2ba>
 8007ec6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ec8:	e7da      	b.n	8007e80 <_strtod_l+0x308>
 8007eca:	498c      	ldr	r1, [pc, #560]	@ (80080fc <_strtod_l+0x584>)
 8007ecc:	a819      	add	r0, sp, #100	@ 0x64
 8007ece:	f001 f9cb 	bl	8009268 <__match>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f43f aea4 	beq.w	8007c20 <_strtod_l+0xa8>
 8007ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eda:	4989      	ldr	r1, [pc, #548]	@ (8008100 <_strtod_l+0x588>)
 8007edc:	3b01      	subs	r3, #1
 8007ede:	a819      	add	r0, sp, #100	@ 0x64
 8007ee0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ee2:	f001 f9c1 	bl	8009268 <__match>
 8007ee6:	b910      	cbnz	r0, 8007eee <_strtod_l+0x376>
 8007ee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eea:	3301      	adds	r3, #1
 8007eec:	9319      	str	r3, [sp, #100]	@ 0x64
 8007eee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008110 <_strtod_l+0x598>
 8007ef2:	f04f 0a00 	mov.w	sl, #0
 8007ef6:	e678      	b.n	8007bea <_strtod_l+0x72>
 8007ef8:	4882      	ldr	r0, [pc, #520]	@ (8008104 <_strtod_l+0x58c>)
 8007efa:	f000 fef1 	bl	8008ce0 <nan>
 8007efe:	ec5b ab10 	vmov	sl, fp, d0
 8007f02:	e672      	b.n	8007bea <_strtod_l+0x72>
 8007f04:	eba8 0309 	sub.w	r3, r8, r9
 8007f08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	bf08      	it	eq
 8007f10:	462f      	moveq	r7, r5
 8007f12:	2d10      	cmp	r5, #16
 8007f14:	462c      	mov	r4, r5
 8007f16:	bfa8      	it	ge
 8007f18:	2410      	movge	r4, #16
 8007f1a:	f7f8 fb13 	bl	8000544 <__aeabi_ui2d>
 8007f1e:	2d09      	cmp	r5, #9
 8007f20:	4682      	mov	sl, r0
 8007f22:	468b      	mov	fp, r1
 8007f24:	dc13      	bgt.n	8007f4e <_strtod_l+0x3d6>
 8007f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f43f ae5e 	beq.w	8007bea <_strtod_l+0x72>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	dd78      	ble.n	8008024 <_strtod_l+0x4ac>
 8007f32:	2b16      	cmp	r3, #22
 8007f34:	dc5f      	bgt.n	8007ff6 <_strtod_l+0x47e>
 8007f36:	4974      	ldr	r1, [pc, #464]	@ (8008108 <_strtod_l+0x590>)
 8007f38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f40:	4652      	mov	r2, sl
 8007f42:	465b      	mov	r3, fp
 8007f44:	f7f8 fb78 	bl	8000638 <__aeabi_dmul>
 8007f48:	4682      	mov	sl, r0
 8007f4a:	468b      	mov	fp, r1
 8007f4c:	e64d      	b.n	8007bea <_strtod_l+0x72>
 8007f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8008108 <_strtod_l+0x590>)
 8007f50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f58:	f7f8 fb6e 	bl	8000638 <__aeabi_dmul>
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	9808      	ldr	r0, [sp, #32]
 8007f60:	468b      	mov	fp, r1
 8007f62:	f7f8 faef 	bl	8000544 <__aeabi_ui2d>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	f7f8 f9ad 	bl	80002cc <__adddf3>
 8007f72:	2d0f      	cmp	r5, #15
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	ddd5      	ble.n	8007f26 <_strtod_l+0x3ae>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	1b2c      	subs	r4, r5, r4
 8007f7e:	441c      	add	r4, r3
 8007f80:	2c00      	cmp	r4, #0
 8007f82:	f340 8096 	ble.w	80080b2 <_strtod_l+0x53a>
 8007f86:	f014 030f 	ands.w	r3, r4, #15
 8007f8a:	d00a      	beq.n	8007fa2 <_strtod_l+0x42a>
 8007f8c:	495e      	ldr	r1, [pc, #376]	@ (8008108 <_strtod_l+0x590>)
 8007f8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f92:	4652      	mov	r2, sl
 8007f94:	465b      	mov	r3, fp
 8007f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9a:	f7f8 fb4d 	bl	8000638 <__aeabi_dmul>
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	468b      	mov	fp, r1
 8007fa2:	f034 040f 	bics.w	r4, r4, #15
 8007fa6:	d073      	beq.n	8008090 <_strtod_l+0x518>
 8007fa8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007fac:	dd48      	ble.n	8008040 <_strtod_l+0x4c8>
 8007fae:	2400      	movs	r4, #0
 8007fb0:	46a0      	mov	r8, r4
 8007fb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007fb4:	46a1      	mov	r9, r4
 8007fb6:	9a05      	ldr	r2, [sp, #20]
 8007fb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008110 <_strtod_l+0x598>
 8007fbc:	2322      	movs	r3, #34	@ 0x22
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	f04f 0a00 	mov.w	sl, #0
 8007fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f43f ae0f 	beq.w	8007bea <_strtod_l+0x72>
 8007fcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	f7ff f942 	bl	8007258 <_Bfree>
 8007fd4:	9805      	ldr	r0, [sp, #20]
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7ff f93e 	bl	8007258 <_Bfree>
 8007fdc:	9805      	ldr	r0, [sp, #20]
 8007fde:	4641      	mov	r1, r8
 8007fe0:	f7ff f93a 	bl	8007258 <_Bfree>
 8007fe4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fe6:	9805      	ldr	r0, [sp, #20]
 8007fe8:	f7ff f936 	bl	8007258 <_Bfree>
 8007fec:	9805      	ldr	r0, [sp, #20]
 8007fee:	4621      	mov	r1, r4
 8007ff0:	f7ff f932 	bl	8007258 <_Bfree>
 8007ff4:	e5f9      	b.n	8007bea <_strtod_l+0x72>
 8007ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	dbbc      	blt.n	8007f7a <_strtod_l+0x402>
 8008000:	4c41      	ldr	r4, [pc, #260]	@ (8008108 <_strtod_l+0x590>)
 8008002:	f1c5 050f 	rsb	r5, r5, #15
 8008006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800800a:	4652      	mov	r2, sl
 800800c:	465b      	mov	r3, fp
 800800e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008012:	f7f8 fb11 	bl	8000638 <__aeabi_dmul>
 8008016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008018:	1b5d      	subs	r5, r3, r5
 800801a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800801e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008022:	e78f      	b.n	8007f44 <_strtod_l+0x3cc>
 8008024:	3316      	adds	r3, #22
 8008026:	dba8      	blt.n	8007f7a <_strtod_l+0x402>
 8008028:	4b37      	ldr	r3, [pc, #220]	@ (8008108 <_strtod_l+0x590>)
 800802a:	eba9 0808 	sub.w	r8, r9, r8
 800802e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008032:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008036:	4650      	mov	r0, sl
 8008038:	4659      	mov	r1, fp
 800803a:	f7f8 fc27 	bl	800088c <__aeabi_ddiv>
 800803e:	e783      	b.n	8007f48 <_strtod_l+0x3d0>
 8008040:	4b32      	ldr	r3, [pc, #200]	@ (800810c <_strtod_l+0x594>)
 8008042:	9308      	str	r3, [sp, #32]
 8008044:	2300      	movs	r3, #0
 8008046:	1124      	asrs	r4, r4, #4
 8008048:	4650      	mov	r0, sl
 800804a:	4659      	mov	r1, fp
 800804c:	461e      	mov	r6, r3
 800804e:	2c01      	cmp	r4, #1
 8008050:	dc21      	bgt.n	8008096 <_strtod_l+0x51e>
 8008052:	b10b      	cbz	r3, 8008058 <_strtod_l+0x4e0>
 8008054:	4682      	mov	sl, r0
 8008056:	468b      	mov	fp, r1
 8008058:	492c      	ldr	r1, [pc, #176]	@ (800810c <_strtod_l+0x594>)
 800805a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800805e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008062:	4652      	mov	r2, sl
 8008064:	465b      	mov	r3, fp
 8008066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800806a:	f7f8 fae5 	bl	8000638 <__aeabi_dmul>
 800806e:	4b28      	ldr	r3, [pc, #160]	@ (8008110 <_strtod_l+0x598>)
 8008070:	460a      	mov	r2, r1
 8008072:	400b      	ands	r3, r1
 8008074:	4927      	ldr	r1, [pc, #156]	@ (8008114 <_strtod_l+0x59c>)
 8008076:	428b      	cmp	r3, r1
 8008078:	4682      	mov	sl, r0
 800807a:	d898      	bhi.n	8007fae <_strtod_l+0x436>
 800807c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008080:	428b      	cmp	r3, r1
 8008082:	bf86      	itte	hi
 8008084:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008118 <_strtod_l+0x5a0>
 8008088:	f04f 3aff 	movhi.w	sl, #4294967295
 800808c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008090:	2300      	movs	r3, #0
 8008092:	9308      	str	r3, [sp, #32]
 8008094:	e07a      	b.n	800818c <_strtod_l+0x614>
 8008096:	07e2      	lsls	r2, r4, #31
 8008098:	d505      	bpl.n	80080a6 <_strtod_l+0x52e>
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 faca 	bl	8000638 <__aeabi_dmul>
 80080a4:	2301      	movs	r3, #1
 80080a6:	9a08      	ldr	r2, [sp, #32]
 80080a8:	3208      	adds	r2, #8
 80080aa:	3601      	adds	r6, #1
 80080ac:	1064      	asrs	r4, r4, #1
 80080ae:	9208      	str	r2, [sp, #32]
 80080b0:	e7cd      	b.n	800804e <_strtod_l+0x4d6>
 80080b2:	d0ed      	beq.n	8008090 <_strtod_l+0x518>
 80080b4:	4264      	negs	r4, r4
 80080b6:	f014 020f 	ands.w	r2, r4, #15
 80080ba:	d00a      	beq.n	80080d2 <_strtod_l+0x55a>
 80080bc:	4b12      	ldr	r3, [pc, #72]	@ (8008108 <_strtod_l+0x590>)
 80080be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c2:	4650      	mov	r0, sl
 80080c4:	4659      	mov	r1, fp
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fbdf 	bl	800088c <__aeabi_ddiv>
 80080ce:	4682      	mov	sl, r0
 80080d0:	468b      	mov	fp, r1
 80080d2:	1124      	asrs	r4, r4, #4
 80080d4:	d0dc      	beq.n	8008090 <_strtod_l+0x518>
 80080d6:	2c1f      	cmp	r4, #31
 80080d8:	dd20      	ble.n	800811c <_strtod_l+0x5a4>
 80080da:	2400      	movs	r4, #0
 80080dc:	46a0      	mov	r8, r4
 80080de:	940a      	str	r4, [sp, #40]	@ 0x28
 80080e0:	46a1      	mov	r9, r4
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	2322      	movs	r3, #34	@ 0x22
 80080e6:	f04f 0a00 	mov.w	sl, #0
 80080ea:	f04f 0b00 	mov.w	fp, #0
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e768      	b.n	8007fc4 <_strtod_l+0x44c>
 80080f2:	bf00      	nop
 80080f4:	08009a2d 	.word	0x08009a2d
 80080f8:	08009c44 	.word	0x08009c44
 80080fc:	08009a25 	.word	0x08009a25
 8008100:	08009a5c 	.word	0x08009a5c
 8008104:	08009ded 	.word	0x08009ded
 8008108:	08009b78 	.word	0x08009b78
 800810c:	08009b50 	.word	0x08009b50
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	7ca00000 	.word	0x7ca00000
 8008118:	7fefffff 	.word	0x7fefffff
 800811c:	f014 0310 	ands.w	r3, r4, #16
 8008120:	bf18      	it	ne
 8008122:	236a      	movne	r3, #106	@ 0x6a
 8008124:	4ea9      	ldr	r6, [pc, #676]	@ (80083cc <_strtod_l+0x854>)
 8008126:	9308      	str	r3, [sp, #32]
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	2300      	movs	r3, #0
 800812e:	07e2      	lsls	r2, r4, #31
 8008130:	d504      	bpl.n	800813c <_strtod_l+0x5c4>
 8008132:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008136:	f7f8 fa7f 	bl	8000638 <__aeabi_dmul>
 800813a:	2301      	movs	r3, #1
 800813c:	1064      	asrs	r4, r4, #1
 800813e:	f106 0608 	add.w	r6, r6, #8
 8008142:	d1f4      	bne.n	800812e <_strtod_l+0x5b6>
 8008144:	b10b      	cbz	r3, 800814a <_strtod_l+0x5d2>
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	b1b3      	cbz	r3, 800817c <_strtod_l+0x604>
 800814e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008152:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008156:	2b00      	cmp	r3, #0
 8008158:	4659      	mov	r1, fp
 800815a:	dd0f      	ble.n	800817c <_strtod_l+0x604>
 800815c:	2b1f      	cmp	r3, #31
 800815e:	dd55      	ble.n	800820c <_strtod_l+0x694>
 8008160:	2b34      	cmp	r3, #52	@ 0x34
 8008162:	bfde      	ittt	le
 8008164:	f04f 33ff 	movle.w	r3, #4294967295
 8008168:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800816c:	4093      	lslle	r3, r2
 800816e:	f04f 0a00 	mov.w	sl, #0
 8008172:	bfcc      	ite	gt
 8008174:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008178:	ea03 0b01 	andle.w	fp, r3, r1
 800817c:	2200      	movs	r2, #0
 800817e:	2300      	movs	r3, #0
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	f7f8 fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 8008188:	2800      	cmp	r0, #0
 800818a:	d1a6      	bne.n	80080da <_strtod_l+0x562>
 800818c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008192:	9805      	ldr	r0, [sp, #20]
 8008194:	462b      	mov	r3, r5
 8008196:	463a      	mov	r2, r7
 8008198:	f7ff f8c6 	bl	8007328 <__s2b>
 800819c:	900a      	str	r0, [sp, #40]	@ 0x28
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f af05 	beq.w	8007fae <_strtod_l+0x436>
 80081a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	eba9 0308 	sub.w	r3, r9, r8
 80081ac:	bfa8      	it	ge
 80081ae:	2300      	movge	r3, #0
 80081b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80081b2:	2400      	movs	r4, #0
 80081b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80081ba:	46a0      	mov	r8, r4
 80081bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081be:	9805      	ldr	r0, [sp, #20]
 80081c0:	6859      	ldr	r1, [r3, #4]
 80081c2:	f7ff f809 	bl	80071d8 <_Balloc>
 80081c6:	4681      	mov	r9, r0
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f43f aef4 	beq.w	8007fb6 <_strtod_l+0x43e>
 80081ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	3202      	adds	r2, #2
 80081d4:	f103 010c 	add.w	r1, r3, #12
 80081d8:	0092      	lsls	r2, r2, #2
 80081da:	300c      	adds	r0, #12
 80081dc:	f000 fd72 	bl	8008cc4 <memcpy>
 80081e0:	ec4b ab10 	vmov	d0, sl, fp
 80081e4:	9805      	ldr	r0, [sp, #20]
 80081e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80081e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80081ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80081ee:	f7ff fbd7 	bl	80079a0 <__d2b>
 80081f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f43f aede 	beq.w	8007fb6 <_strtod_l+0x43e>
 80081fa:	9805      	ldr	r0, [sp, #20]
 80081fc:	2101      	movs	r1, #1
 80081fe:	f7ff f929 	bl	8007454 <__i2b>
 8008202:	4680      	mov	r8, r0
 8008204:	b948      	cbnz	r0, 800821a <_strtod_l+0x6a2>
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	e6d4      	b.n	8007fb6 <_strtod_l+0x43e>
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	ea03 0a0a 	and.w	sl, r3, sl
 8008218:	e7b0      	b.n	800817c <_strtod_l+0x604>
 800821a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800821c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800821e:	2d00      	cmp	r5, #0
 8008220:	bfab      	itete	ge
 8008222:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008224:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008226:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008228:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800822a:	bfac      	ite	ge
 800822c:	18ef      	addge	r7, r5, r3
 800822e:	1b5e      	sublt	r6, r3, r5
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	1aed      	subs	r5, r5, r3
 8008234:	4415      	add	r5, r2
 8008236:	4b66      	ldr	r3, [pc, #408]	@ (80083d0 <_strtod_l+0x858>)
 8008238:	3d01      	subs	r5, #1
 800823a:	429d      	cmp	r5, r3
 800823c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008240:	da50      	bge.n	80082e4 <_strtod_l+0x76c>
 8008242:	1b5b      	subs	r3, r3, r5
 8008244:	2b1f      	cmp	r3, #31
 8008246:	eba2 0203 	sub.w	r2, r2, r3
 800824a:	f04f 0101 	mov.w	r1, #1
 800824e:	dc3d      	bgt.n	80082cc <_strtod_l+0x754>
 8008250:	fa01 f303 	lsl.w	r3, r1, r3
 8008254:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008256:	2300      	movs	r3, #0
 8008258:	9310      	str	r3, [sp, #64]	@ 0x40
 800825a:	18bd      	adds	r5, r7, r2
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	42af      	cmp	r7, r5
 8008260:	4416      	add	r6, r2
 8008262:	441e      	add	r6, r3
 8008264:	463b      	mov	r3, r7
 8008266:	bfa8      	it	ge
 8008268:	462b      	movge	r3, r5
 800826a:	42b3      	cmp	r3, r6
 800826c:	bfa8      	it	ge
 800826e:	4633      	movge	r3, r6
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfc2      	ittt	gt
 8008274:	1aed      	subgt	r5, r5, r3
 8008276:	1af6      	subgt	r6, r6, r3
 8008278:	1aff      	subgt	r7, r7, r3
 800827a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd16      	ble.n	80082ae <_strtod_l+0x736>
 8008280:	4641      	mov	r1, r8
 8008282:	9805      	ldr	r0, [sp, #20]
 8008284:	461a      	mov	r2, r3
 8008286:	f7ff f9a5 	bl	80075d4 <__pow5mult>
 800828a:	4680      	mov	r8, r0
 800828c:	2800      	cmp	r0, #0
 800828e:	d0ba      	beq.n	8008206 <_strtod_l+0x68e>
 8008290:	4601      	mov	r1, r0
 8008292:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008294:	9805      	ldr	r0, [sp, #20]
 8008296:	f7ff f8f3 	bl	8007480 <__multiply>
 800829a:	900e      	str	r0, [sp, #56]	@ 0x38
 800829c:	2800      	cmp	r0, #0
 800829e:	f43f ae8a 	beq.w	8007fb6 <_strtod_l+0x43e>
 80082a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082a4:	9805      	ldr	r0, [sp, #20]
 80082a6:	f7fe ffd7 	bl	8007258 <_Bfree>
 80082aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	dc1d      	bgt.n	80082ee <_strtod_l+0x776>
 80082b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd23      	ble.n	8008300 <_strtod_l+0x788>
 80082b8:	4649      	mov	r1, r9
 80082ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80082bc:	9805      	ldr	r0, [sp, #20]
 80082be:	f7ff f989 	bl	80075d4 <__pow5mult>
 80082c2:	4681      	mov	r9, r0
 80082c4:	b9e0      	cbnz	r0, 8008300 <_strtod_l+0x788>
 80082c6:	f04f 0900 	mov.w	r9, #0
 80082ca:	e674      	b.n	8007fb6 <_strtod_l+0x43e>
 80082cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80082d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80082d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80082d8:	35e2      	adds	r5, #226	@ 0xe2
 80082da:	fa01 f305 	lsl.w	r3, r1, r5
 80082de:	9310      	str	r3, [sp, #64]	@ 0x40
 80082e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082e2:	e7ba      	b.n	800825a <_strtod_l+0x6e2>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80082e8:	2301      	movs	r3, #1
 80082ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082ec:	e7b5      	b.n	800825a <_strtod_l+0x6e2>
 80082ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082f0:	9805      	ldr	r0, [sp, #20]
 80082f2:	462a      	mov	r2, r5
 80082f4:	f7ff f9c8 	bl	8007688 <__lshift>
 80082f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d1d9      	bne.n	80082b2 <_strtod_l+0x73a>
 80082fe:	e65a      	b.n	8007fb6 <_strtod_l+0x43e>
 8008300:	2e00      	cmp	r6, #0
 8008302:	dd07      	ble.n	8008314 <_strtod_l+0x79c>
 8008304:	4649      	mov	r1, r9
 8008306:	9805      	ldr	r0, [sp, #20]
 8008308:	4632      	mov	r2, r6
 800830a:	f7ff f9bd 	bl	8007688 <__lshift>
 800830e:	4681      	mov	r9, r0
 8008310:	2800      	cmp	r0, #0
 8008312:	d0d8      	beq.n	80082c6 <_strtod_l+0x74e>
 8008314:	2f00      	cmp	r7, #0
 8008316:	dd08      	ble.n	800832a <_strtod_l+0x7b2>
 8008318:	4641      	mov	r1, r8
 800831a:	9805      	ldr	r0, [sp, #20]
 800831c:	463a      	mov	r2, r7
 800831e:	f7ff f9b3 	bl	8007688 <__lshift>
 8008322:	4680      	mov	r8, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f ae46 	beq.w	8007fb6 <_strtod_l+0x43e>
 800832a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800832c:	9805      	ldr	r0, [sp, #20]
 800832e:	464a      	mov	r2, r9
 8008330:	f7ff fa32 	bl	8007798 <__mdiff>
 8008334:	4604      	mov	r4, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f ae3d 	beq.w	8007fb6 <_strtod_l+0x43e>
 800833c:	68c3      	ldr	r3, [r0, #12]
 800833e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008340:	2300      	movs	r3, #0
 8008342:	60c3      	str	r3, [r0, #12]
 8008344:	4641      	mov	r1, r8
 8008346:	f7ff fa0b 	bl	8007760 <__mcmp>
 800834a:	2800      	cmp	r0, #0
 800834c:	da46      	bge.n	80083dc <_strtod_l+0x864>
 800834e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008350:	ea53 030a 	orrs.w	r3, r3, sl
 8008354:	d16c      	bne.n	8008430 <_strtod_l+0x8b8>
 8008356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800835a:	2b00      	cmp	r3, #0
 800835c:	d168      	bne.n	8008430 <_strtod_l+0x8b8>
 800835e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008362:	0d1b      	lsrs	r3, r3, #20
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800836a:	d961      	bls.n	8008430 <_strtod_l+0x8b8>
 800836c:	6963      	ldr	r3, [r4, #20]
 800836e:	b913      	cbnz	r3, 8008376 <_strtod_l+0x7fe>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	2b01      	cmp	r3, #1
 8008374:	dd5c      	ble.n	8008430 <_strtod_l+0x8b8>
 8008376:	4621      	mov	r1, r4
 8008378:	2201      	movs	r2, #1
 800837a:	9805      	ldr	r0, [sp, #20]
 800837c:	f7ff f984 	bl	8007688 <__lshift>
 8008380:	4641      	mov	r1, r8
 8008382:	4604      	mov	r4, r0
 8008384:	f7ff f9ec 	bl	8007760 <__mcmp>
 8008388:	2800      	cmp	r0, #0
 800838a:	dd51      	ble.n	8008430 <_strtod_l+0x8b8>
 800838c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008390:	9a08      	ldr	r2, [sp, #32]
 8008392:	0d1b      	lsrs	r3, r3, #20
 8008394:	051b      	lsls	r3, r3, #20
 8008396:	2a00      	cmp	r2, #0
 8008398:	d06b      	beq.n	8008472 <_strtod_l+0x8fa>
 800839a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800839e:	d868      	bhi.n	8008472 <_strtod_l+0x8fa>
 80083a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80083a4:	f67f ae9d 	bls.w	80080e2 <_strtod_l+0x56a>
 80083a8:	4b0a      	ldr	r3, [pc, #40]	@ (80083d4 <_strtod_l+0x85c>)
 80083aa:	4650      	mov	r0, sl
 80083ac:	4659      	mov	r1, fp
 80083ae:	2200      	movs	r2, #0
 80083b0:	f7f8 f942 	bl	8000638 <__aeabi_dmul>
 80083b4:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <_strtod_l+0x860>)
 80083b6:	400b      	ands	r3, r1
 80083b8:	4682      	mov	sl, r0
 80083ba:	468b      	mov	fp, r1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f ae05 	bne.w	8007fcc <_strtod_l+0x454>
 80083c2:	9a05      	ldr	r2, [sp, #20]
 80083c4:	2322      	movs	r3, #34	@ 0x22
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	e600      	b.n	8007fcc <_strtod_l+0x454>
 80083ca:	bf00      	nop
 80083cc:	08009c70 	.word	0x08009c70
 80083d0:	fffffc02 	.word	0xfffffc02
 80083d4:	39500000 	.word	0x39500000
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80083e0:	d165      	bne.n	80084ae <_strtod_l+0x936>
 80083e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083e8:	b35a      	cbz	r2, 8008442 <_strtod_l+0x8ca>
 80083ea:	4a9f      	ldr	r2, [pc, #636]	@ (8008668 <_strtod_l+0xaf0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d12b      	bne.n	8008448 <_strtod_l+0x8d0>
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	4651      	mov	r1, sl
 80083f4:	b303      	cbz	r3, 8008438 <_strtod_l+0x8c0>
 80083f6:	4b9d      	ldr	r3, [pc, #628]	@ (800866c <_strtod_l+0xaf4>)
 80083f8:	465a      	mov	r2, fp
 80083fa:	4013      	ands	r3, r2
 80083fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008400:	f04f 32ff 	mov.w	r2, #4294967295
 8008404:	d81b      	bhi.n	800843e <_strtod_l+0x8c6>
 8008406:	0d1b      	lsrs	r3, r3, #20
 8008408:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	4299      	cmp	r1, r3
 8008412:	d119      	bne.n	8008448 <_strtod_l+0x8d0>
 8008414:	4b96      	ldr	r3, [pc, #600]	@ (8008670 <_strtod_l+0xaf8>)
 8008416:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008418:	429a      	cmp	r2, r3
 800841a:	d102      	bne.n	8008422 <_strtod_l+0x8aa>
 800841c:	3101      	adds	r1, #1
 800841e:	f43f adca 	beq.w	8007fb6 <_strtod_l+0x43e>
 8008422:	4b92      	ldr	r3, [pc, #584]	@ (800866c <_strtod_l+0xaf4>)
 8008424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008426:	401a      	ands	r2, r3
 8008428:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800842c:	f04f 0a00 	mov.w	sl, #0
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1b8      	bne.n	80083a8 <_strtod_l+0x830>
 8008436:	e5c9      	b.n	8007fcc <_strtod_l+0x454>
 8008438:	f04f 33ff 	mov.w	r3, #4294967295
 800843c:	e7e8      	b.n	8008410 <_strtod_l+0x898>
 800843e:	4613      	mov	r3, r2
 8008440:	e7e6      	b.n	8008410 <_strtod_l+0x898>
 8008442:	ea53 030a 	orrs.w	r3, r3, sl
 8008446:	d0a1      	beq.n	800838c <_strtod_l+0x814>
 8008448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800844a:	b1db      	cbz	r3, 8008484 <_strtod_l+0x90c>
 800844c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800844e:	4213      	tst	r3, r2
 8008450:	d0ee      	beq.n	8008430 <_strtod_l+0x8b8>
 8008452:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008454:	9a08      	ldr	r2, [sp, #32]
 8008456:	4650      	mov	r0, sl
 8008458:	4659      	mov	r1, fp
 800845a:	b1bb      	cbz	r3, 800848c <_strtod_l+0x914>
 800845c:	f7ff fb6e 	bl	8007b3c <sulp>
 8008460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008464:	ec53 2b10 	vmov	r2, r3, d0
 8008468:	f7f7 ff30 	bl	80002cc <__adddf3>
 800846c:	4682      	mov	sl, r0
 800846e:	468b      	mov	fp, r1
 8008470:	e7de      	b.n	8008430 <_strtod_l+0x8b8>
 8008472:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008476:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800847a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800847e:	f04f 3aff 	mov.w	sl, #4294967295
 8008482:	e7d5      	b.n	8008430 <_strtod_l+0x8b8>
 8008484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008486:	ea13 0f0a 	tst.w	r3, sl
 800848a:	e7e1      	b.n	8008450 <_strtod_l+0x8d8>
 800848c:	f7ff fb56 	bl	8007b3c <sulp>
 8008490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008494:	ec53 2b10 	vmov	r2, r3, d0
 8008498:	f7f7 ff16 	bl	80002c8 <__aeabi_dsub>
 800849c:	2200      	movs	r2, #0
 800849e:	2300      	movs	r3, #0
 80084a0:	4682      	mov	sl, r0
 80084a2:	468b      	mov	fp, r1
 80084a4:	f7f8 fb30 	bl	8000b08 <__aeabi_dcmpeq>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0c1      	beq.n	8008430 <_strtod_l+0x8b8>
 80084ac:	e619      	b.n	80080e2 <_strtod_l+0x56a>
 80084ae:	4641      	mov	r1, r8
 80084b0:	4620      	mov	r0, r4
 80084b2:	f7ff facd 	bl	8007a50 <__ratio>
 80084b6:	ec57 6b10 	vmov	r6, r7, d0
 80084ba:	2200      	movs	r2, #0
 80084bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb34 	bl	8000b30 <__aeabi_dcmple>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d06f      	beq.n	80085ac <_strtod_l+0xa34>
 80084cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d17a      	bne.n	80085c8 <_strtod_l+0xa50>
 80084d2:	f1ba 0f00 	cmp.w	sl, #0
 80084d6:	d158      	bne.n	800858a <_strtod_l+0xa12>
 80084d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d15a      	bne.n	8008598 <_strtod_l+0xa20>
 80084e2:	4b64      	ldr	r3, [pc, #400]	@ (8008674 <_strtod_l+0xafc>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f8 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d159      	bne.n	80085a6 <_strtod_l+0xa2e>
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	4b60      	ldr	r3, [pc, #384]	@ (8008678 <_strtod_l+0xb00>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008506:	9606      	str	r6, [sp, #24]
 8008508:	9307      	str	r3, [sp, #28]
 800850a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800850e:	4d57      	ldr	r5, [pc, #348]	@ (800866c <_strtod_l+0xaf4>)
 8008510:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008516:	401d      	ands	r5, r3
 8008518:	4b58      	ldr	r3, [pc, #352]	@ (800867c <_strtod_l+0xb04>)
 800851a:	429d      	cmp	r5, r3
 800851c:	f040 80b2 	bne.w	8008684 <_strtod_l+0xb0c>
 8008520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008522:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008526:	ec4b ab10 	vmov	d0, sl, fp
 800852a:	f7ff f9c9 	bl	80078c0 <__ulp>
 800852e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008532:	ec51 0b10 	vmov	r0, r1, d0
 8008536:	f7f8 f87f 	bl	8000638 <__aeabi_dmul>
 800853a:	4652      	mov	r2, sl
 800853c:	465b      	mov	r3, fp
 800853e:	f7f7 fec5 	bl	80002cc <__adddf3>
 8008542:	460b      	mov	r3, r1
 8008544:	4949      	ldr	r1, [pc, #292]	@ (800866c <_strtod_l+0xaf4>)
 8008546:	4a4e      	ldr	r2, [pc, #312]	@ (8008680 <_strtod_l+0xb08>)
 8008548:	4019      	ands	r1, r3
 800854a:	4291      	cmp	r1, r2
 800854c:	4682      	mov	sl, r0
 800854e:	d942      	bls.n	80085d6 <_strtod_l+0xa5e>
 8008550:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008552:	4b47      	ldr	r3, [pc, #284]	@ (8008670 <_strtod_l+0xaf8>)
 8008554:	429a      	cmp	r2, r3
 8008556:	d103      	bne.n	8008560 <_strtod_l+0x9e8>
 8008558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800855a:	3301      	adds	r3, #1
 800855c:	f43f ad2b 	beq.w	8007fb6 <_strtod_l+0x43e>
 8008560:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008670 <_strtod_l+0xaf8>
 8008564:	f04f 3aff 	mov.w	sl, #4294967295
 8008568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	f7fe fe74 	bl	8007258 <_Bfree>
 8008570:	9805      	ldr	r0, [sp, #20]
 8008572:	4649      	mov	r1, r9
 8008574:	f7fe fe70 	bl	8007258 <_Bfree>
 8008578:	9805      	ldr	r0, [sp, #20]
 800857a:	4641      	mov	r1, r8
 800857c:	f7fe fe6c 	bl	8007258 <_Bfree>
 8008580:	9805      	ldr	r0, [sp, #20]
 8008582:	4621      	mov	r1, r4
 8008584:	f7fe fe68 	bl	8007258 <_Bfree>
 8008588:	e618      	b.n	80081bc <_strtod_l+0x644>
 800858a:	f1ba 0f01 	cmp.w	sl, #1
 800858e:	d103      	bne.n	8008598 <_strtod_l+0xa20>
 8008590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008592:	2b00      	cmp	r3, #0
 8008594:	f43f ada5 	beq.w	80080e2 <_strtod_l+0x56a>
 8008598:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008648 <_strtod_l+0xad0>
 800859c:	4f35      	ldr	r7, [pc, #212]	@ (8008674 <_strtod_l+0xafc>)
 800859e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085a2:	2600      	movs	r6, #0
 80085a4:	e7b1      	b.n	800850a <_strtod_l+0x992>
 80085a6:	4f34      	ldr	r7, [pc, #208]	@ (8008678 <_strtod_l+0xb00>)
 80085a8:	2600      	movs	r6, #0
 80085aa:	e7aa      	b.n	8008502 <_strtod_l+0x98a>
 80085ac:	4b32      	ldr	r3, [pc, #200]	@ (8008678 <_strtod_l+0xb00>)
 80085ae:	4630      	mov	r0, r6
 80085b0:	4639      	mov	r1, r7
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f8 f840 	bl	8000638 <__aeabi_dmul>
 80085b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d09f      	beq.n	8008502 <_strtod_l+0x98a>
 80085c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80085c6:	e7a0      	b.n	800850a <_strtod_l+0x992>
 80085c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008650 <_strtod_l+0xad8>
 80085cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085d0:	ec57 6b17 	vmov	r6, r7, d7
 80085d4:	e799      	b.n	800850a <_strtod_l+0x992>
 80085d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80085da:	9b08      	ldr	r3, [sp, #32]
 80085dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1c1      	bne.n	8008568 <_strtod_l+0x9f0>
 80085e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085e8:	0d1b      	lsrs	r3, r3, #20
 80085ea:	051b      	lsls	r3, r3, #20
 80085ec:	429d      	cmp	r5, r3
 80085ee:	d1bb      	bne.n	8008568 <_strtod_l+0x9f0>
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f7f8 fb80 	bl	8000cf8 <__aeabi_d2lz>
 80085f8:	f7f7 fff0 	bl	80005dc <__aeabi_l2d>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4630      	mov	r0, r6
 8008602:	4639      	mov	r1, r7
 8008604:	f7f7 fe60 	bl	80002c8 <__aeabi_dsub>
 8008608:	460b      	mov	r3, r1
 800860a:	4602      	mov	r2, r0
 800860c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008610:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008616:	ea46 060a 	orr.w	r6, r6, sl
 800861a:	431e      	orrs	r6, r3
 800861c:	d06f      	beq.n	80086fe <_strtod_l+0xb86>
 800861e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008658 <_strtod_l+0xae0>)
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f8 fa7a 	bl	8000b1c <__aeabi_dcmplt>
 8008628:	2800      	cmp	r0, #0
 800862a:	f47f accf 	bne.w	8007fcc <_strtod_l+0x454>
 800862e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008660 <_strtod_l+0xae8>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008638:	f7f8 fa8e 	bl	8000b58 <__aeabi_dcmpgt>
 800863c:	2800      	cmp	r0, #0
 800863e:	d093      	beq.n	8008568 <_strtod_l+0x9f0>
 8008640:	e4c4      	b.n	8007fcc <_strtod_l+0x454>
 8008642:	bf00      	nop
 8008644:	f3af 8000 	nop.w
 8008648:	00000000 	.word	0x00000000
 800864c:	bff00000 	.word	0xbff00000
 8008650:	00000000 	.word	0x00000000
 8008654:	3ff00000 	.word	0x3ff00000
 8008658:	94a03595 	.word	0x94a03595
 800865c:	3fdfffff 	.word	0x3fdfffff
 8008660:	35afe535 	.word	0x35afe535
 8008664:	3fe00000 	.word	0x3fe00000
 8008668:	000fffff 	.word	0x000fffff
 800866c:	7ff00000 	.word	0x7ff00000
 8008670:	7fefffff 	.word	0x7fefffff
 8008674:	3ff00000 	.word	0x3ff00000
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	7fe00000 	.word	0x7fe00000
 8008680:	7c9fffff 	.word	0x7c9fffff
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	b323      	cbz	r3, 80086d2 <_strtod_l+0xb5a>
 8008688:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800868c:	d821      	bhi.n	80086d2 <_strtod_l+0xb5a>
 800868e:	a328      	add	r3, pc, #160	@ (adr r3, 8008730 <_strtod_l+0xbb8>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f8 fa4a 	bl	8000b30 <__aeabi_dcmple>
 800869c:	b1a0      	cbz	r0, 80086c8 <_strtod_l+0xb50>
 800869e:	4639      	mov	r1, r7
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7f8 faa1 	bl	8000be8 <__aeabi_d2uiz>
 80086a6:	2801      	cmp	r0, #1
 80086a8:	bf38      	it	cc
 80086aa:	2001      	movcc	r0, #1
 80086ac:	f7f7 ff4a 	bl	8000544 <__aeabi_ui2d>
 80086b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	b9fb      	cbnz	r3, 80086f8 <_strtod_l+0xb80>
 80086b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80086bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80086be:	9315      	str	r3, [sp, #84]	@ 0x54
 80086c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80086c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80086ce:	1b5b      	subs	r3, r3, r5
 80086d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80086d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80086da:	f7ff f8f1 	bl	80078c0 <__ulp>
 80086de:	4650      	mov	r0, sl
 80086e0:	ec53 2b10 	vmov	r2, r3, d0
 80086e4:	4659      	mov	r1, fp
 80086e6:	f7f7 ffa7 	bl	8000638 <__aeabi_dmul>
 80086ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086ee:	f7f7 fded 	bl	80002cc <__adddf3>
 80086f2:	4682      	mov	sl, r0
 80086f4:	468b      	mov	fp, r1
 80086f6:	e770      	b.n	80085da <_strtod_l+0xa62>
 80086f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80086fc:	e7e0      	b.n	80086c0 <_strtod_l+0xb48>
 80086fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008738 <_strtod_l+0xbc0>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f8 fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8008708:	e798      	b.n	800863c <_strtod_l+0xac4>
 800870a:	2300      	movs	r3, #0
 800870c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800870e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	f7ff ba6d 	b.w	8007bf2 <_strtod_l+0x7a>
 8008718:	2a65      	cmp	r2, #101	@ 0x65
 800871a:	f43f ab66 	beq.w	8007dea <_strtod_l+0x272>
 800871e:	2a45      	cmp	r2, #69	@ 0x45
 8008720:	f43f ab63 	beq.w	8007dea <_strtod_l+0x272>
 8008724:	2301      	movs	r3, #1
 8008726:	f7ff bb9e 	b.w	8007e66 <_strtod_l+0x2ee>
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w
 8008730:	ffc00000 	.word	0xffc00000
 8008734:	41dfffff 	.word	0x41dfffff
 8008738:	94a03595 	.word	0x94a03595
 800873c:	3fcfffff 	.word	0x3fcfffff

08008740 <_strtod_r>:
 8008740:	4b01      	ldr	r3, [pc, #4]	@ (8008748 <_strtod_r+0x8>)
 8008742:	f7ff ba19 	b.w	8007b78 <_strtod_l>
 8008746:	bf00      	nop
 8008748:	20000070 	.word	0x20000070

0800874c <_strtol_l.constprop.0>:
 800874c:	2b24      	cmp	r3, #36	@ 0x24
 800874e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008752:	4686      	mov	lr, r0
 8008754:	4690      	mov	r8, r2
 8008756:	d801      	bhi.n	800875c <_strtol_l.constprop.0+0x10>
 8008758:	2b01      	cmp	r3, #1
 800875a:	d106      	bne.n	800876a <_strtol_l.constprop.0+0x1e>
 800875c:	f7fd fdbc 	bl	80062d8 <__errno>
 8008760:	2316      	movs	r3, #22
 8008762:	6003      	str	r3, [r0, #0]
 8008764:	2000      	movs	r0, #0
 8008766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876a:	4834      	ldr	r0, [pc, #208]	@ (800883c <_strtol_l.constprop.0+0xf0>)
 800876c:	460d      	mov	r5, r1
 800876e:	462a      	mov	r2, r5
 8008770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008774:	5d06      	ldrb	r6, [r0, r4]
 8008776:	f016 0608 	ands.w	r6, r6, #8
 800877a:	d1f8      	bne.n	800876e <_strtol_l.constprop.0+0x22>
 800877c:	2c2d      	cmp	r4, #45	@ 0x2d
 800877e:	d12d      	bne.n	80087dc <_strtol_l.constprop.0+0x90>
 8008780:	782c      	ldrb	r4, [r5, #0]
 8008782:	2601      	movs	r6, #1
 8008784:	1c95      	adds	r5, r2, #2
 8008786:	f033 0210 	bics.w	r2, r3, #16
 800878a:	d109      	bne.n	80087a0 <_strtol_l.constprop.0+0x54>
 800878c:	2c30      	cmp	r4, #48	@ 0x30
 800878e:	d12a      	bne.n	80087e6 <_strtol_l.constprop.0+0x9a>
 8008790:	782a      	ldrb	r2, [r5, #0]
 8008792:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008796:	2a58      	cmp	r2, #88	@ 0x58
 8008798:	d125      	bne.n	80087e6 <_strtol_l.constprop.0+0x9a>
 800879a:	786c      	ldrb	r4, [r5, #1]
 800879c:	2310      	movs	r3, #16
 800879e:	3502      	adds	r5, #2
 80087a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087a8:	2200      	movs	r2, #0
 80087aa:	fbbc f9f3 	udiv	r9, ip, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80087b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087b8:	2f09      	cmp	r7, #9
 80087ba:	d81b      	bhi.n	80087f4 <_strtol_l.constprop.0+0xa8>
 80087bc:	463c      	mov	r4, r7
 80087be:	42a3      	cmp	r3, r4
 80087c0:	dd27      	ble.n	8008812 <_strtol_l.constprop.0+0xc6>
 80087c2:	1c57      	adds	r7, r2, #1
 80087c4:	d007      	beq.n	80087d6 <_strtol_l.constprop.0+0x8a>
 80087c6:	4581      	cmp	r9, r0
 80087c8:	d320      	bcc.n	800880c <_strtol_l.constprop.0+0xc0>
 80087ca:	d101      	bne.n	80087d0 <_strtol_l.constprop.0+0x84>
 80087cc:	45a2      	cmp	sl, r4
 80087ce:	db1d      	blt.n	800880c <_strtol_l.constprop.0+0xc0>
 80087d0:	fb00 4003 	mla	r0, r0, r3, r4
 80087d4:	2201      	movs	r2, #1
 80087d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087da:	e7eb      	b.n	80087b4 <_strtol_l.constprop.0+0x68>
 80087dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80087de:	bf04      	itt	eq
 80087e0:	782c      	ldrbeq	r4, [r5, #0]
 80087e2:	1c95      	addeq	r5, r2, #2
 80087e4:	e7cf      	b.n	8008786 <_strtol_l.constprop.0+0x3a>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1da      	bne.n	80087a0 <_strtol_l.constprop.0+0x54>
 80087ea:	2c30      	cmp	r4, #48	@ 0x30
 80087ec:	bf0c      	ite	eq
 80087ee:	2308      	moveq	r3, #8
 80087f0:	230a      	movne	r3, #10
 80087f2:	e7d5      	b.n	80087a0 <_strtol_l.constprop.0+0x54>
 80087f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80087f8:	2f19      	cmp	r7, #25
 80087fa:	d801      	bhi.n	8008800 <_strtol_l.constprop.0+0xb4>
 80087fc:	3c37      	subs	r4, #55	@ 0x37
 80087fe:	e7de      	b.n	80087be <_strtol_l.constprop.0+0x72>
 8008800:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008804:	2f19      	cmp	r7, #25
 8008806:	d804      	bhi.n	8008812 <_strtol_l.constprop.0+0xc6>
 8008808:	3c57      	subs	r4, #87	@ 0x57
 800880a:	e7d8      	b.n	80087be <_strtol_l.constprop.0+0x72>
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	e7e1      	b.n	80087d6 <_strtol_l.constprop.0+0x8a>
 8008812:	1c53      	adds	r3, r2, #1
 8008814:	d108      	bne.n	8008828 <_strtol_l.constprop.0+0xdc>
 8008816:	2322      	movs	r3, #34	@ 0x22
 8008818:	f8ce 3000 	str.w	r3, [lr]
 800881c:	4660      	mov	r0, ip
 800881e:	f1b8 0f00 	cmp.w	r8, #0
 8008822:	d0a0      	beq.n	8008766 <_strtol_l.constprop.0+0x1a>
 8008824:	1e69      	subs	r1, r5, #1
 8008826:	e006      	b.n	8008836 <_strtol_l.constprop.0+0xea>
 8008828:	b106      	cbz	r6, 800882c <_strtol_l.constprop.0+0xe0>
 800882a:	4240      	negs	r0, r0
 800882c:	f1b8 0f00 	cmp.w	r8, #0
 8008830:	d099      	beq.n	8008766 <_strtol_l.constprop.0+0x1a>
 8008832:	2a00      	cmp	r2, #0
 8008834:	d1f6      	bne.n	8008824 <_strtol_l.constprop.0+0xd8>
 8008836:	f8c8 1000 	str.w	r1, [r8]
 800883a:	e794      	b.n	8008766 <_strtol_l.constprop.0+0x1a>
 800883c:	08009c99 	.word	0x08009c99

08008840 <_strtol_r>:
 8008840:	f7ff bf84 	b.w	800874c <_strtol_l.constprop.0>

08008844 <__ssputs_r>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	688e      	ldr	r6, [r1, #8]
 800884a:	461f      	mov	r7, r3
 800884c:	42be      	cmp	r6, r7
 800884e:	680b      	ldr	r3, [r1, #0]
 8008850:	4682      	mov	sl, r0
 8008852:	460c      	mov	r4, r1
 8008854:	4690      	mov	r8, r2
 8008856:	d82d      	bhi.n	80088b4 <__ssputs_r+0x70>
 8008858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800885c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008860:	d026      	beq.n	80088b0 <__ssputs_r+0x6c>
 8008862:	6965      	ldr	r5, [r4, #20]
 8008864:	6909      	ldr	r1, [r1, #16]
 8008866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800886a:	eba3 0901 	sub.w	r9, r3, r1
 800886e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008872:	1c7b      	adds	r3, r7, #1
 8008874:	444b      	add	r3, r9
 8008876:	106d      	asrs	r5, r5, #1
 8008878:	429d      	cmp	r5, r3
 800887a:	bf38      	it	cc
 800887c:	461d      	movcc	r5, r3
 800887e:	0553      	lsls	r3, r2, #21
 8008880:	d527      	bpl.n	80088d2 <__ssputs_r+0x8e>
 8008882:	4629      	mov	r1, r5
 8008884:	f7fe fc1c 	bl	80070c0 <_malloc_r>
 8008888:	4606      	mov	r6, r0
 800888a:	b360      	cbz	r0, 80088e6 <__ssputs_r+0xa2>
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	464a      	mov	r2, r9
 8008890:	f000 fa18 	bl	8008cc4 <memcpy>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800889a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	6126      	str	r6, [r4, #16]
 80088a2:	6165      	str	r5, [r4, #20]
 80088a4:	444e      	add	r6, r9
 80088a6:	eba5 0509 	sub.w	r5, r5, r9
 80088aa:	6026      	str	r6, [r4, #0]
 80088ac:	60a5      	str	r5, [r4, #8]
 80088ae:	463e      	mov	r6, r7
 80088b0:	42be      	cmp	r6, r7
 80088b2:	d900      	bls.n	80088b6 <__ssputs_r+0x72>
 80088b4:	463e      	mov	r6, r7
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	4632      	mov	r2, r6
 80088ba:	4641      	mov	r1, r8
 80088bc:	f000 f9c6 	bl	8008c4c <memmove>
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	1b9b      	subs	r3, r3, r6
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	4433      	add	r3, r6
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	2000      	movs	r0, #0
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	462a      	mov	r2, r5
 80088d4:	f000 fd89 	bl	80093ea <_realloc_r>
 80088d8:	4606      	mov	r6, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1e0      	bne.n	80088a0 <__ssputs_r+0x5c>
 80088de:	6921      	ldr	r1, [r4, #16]
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7fe fb79 	bl	8006fd8 <_free_r>
 80088e6:	230c      	movs	r3, #12
 80088e8:	f8ca 3000 	str.w	r3, [sl]
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e7e9      	b.n	80088ce <__ssputs_r+0x8a>
	...

080088fc <_svfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	4698      	mov	r8, r3
 8008902:	898b      	ldrh	r3, [r1, #12]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	b09d      	sub	sp, #116	@ 0x74
 8008908:	4607      	mov	r7, r0
 800890a:	460d      	mov	r5, r1
 800890c:	4614      	mov	r4, r2
 800890e:	d510      	bpl.n	8008932 <_svfiprintf_r+0x36>
 8008910:	690b      	ldr	r3, [r1, #16]
 8008912:	b973      	cbnz	r3, 8008932 <_svfiprintf_r+0x36>
 8008914:	2140      	movs	r1, #64	@ 0x40
 8008916:	f7fe fbd3 	bl	80070c0 <_malloc_r>
 800891a:	6028      	str	r0, [r5, #0]
 800891c:	6128      	str	r0, [r5, #16]
 800891e:	b930      	cbnz	r0, 800892e <_svfiprintf_r+0x32>
 8008920:	230c      	movs	r3, #12
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	@ 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	2340      	movs	r3, #64	@ 0x40
 8008930:	616b      	str	r3, [r5, #20]
 8008932:	2300      	movs	r3, #0
 8008934:	9309      	str	r3, [sp, #36]	@ 0x24
 8008936:	2320      	movs	r3, #32
 8008938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800893c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008940:	2330      	movs	r3, #48	@ 0x30
 8008942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ae0 <_svfiprintf_r+0x1e4>
 8008946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800894a:	f04f 0901 	mov.w	r9, #1
 800894e:	4623      	mov	r3, r4
 8008950:	469a      	mov	sl, r3
 8008952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008956:	b10a      	cbz	r2, 800895c <_svfiprintf_r+0x60>
 8008958:	2a25      	cmp	r2, #37	@ 0x25
 800895a:	d1f9      	bne.n	8008950 <_svfiprintf_r+0x54>
 800895c:	ebba 0b04 	subs.w	fp, sl, r4
 8008960:	d00b      	beq.n	800897a <_svfiprintf_r+0x7e>
 8008962:	465b      	mov	r3, fp
 8008964:	4622      	mov	r2, r4
 8008966:	4629      	mov	r1, r5
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ff6b 	bl	8008844 <__ssputs_r>
 800896e:	3001      	adds	r0, #1
 8008970:	f000 80a7 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008976:	445a      	add	r2, fp
 8008978:	9209      	str	r2, [sp, #36]	@ 0x24
 800897a:	f89a 3000 	ldrb.w	r3, [sl]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 809f 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008984:	2300      	movs	r3, #0
 8008986:	f04f 32ff 	mov.w	r2, #4294967295
 800898a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898e:	f10a 0a01 	add.w	sl, sl, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800899a:	931a      	str	r3, [sp, #104]	@ 0x68
 800899c:	4654      	mov	r4, sl
 800899e:	2205      	movs	r2, #5
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	484e      	ldr	r0, [pc, #312]	@ (8008ae0 <_svfiprintf_r+0x1e4>)
 80089a6:	f7f7 fc33 	bl	8000210 <memchr>
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	b9d8      	cbnz	r0, 80089e6 <_svfiprintf_r+0xea>
 80089ae:	06d0      	lsls	r0, r2, #27
 80089b0:	bf44      	itt	mi
 80089b2:	2320      	movmi	r3, #32
 80089b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b8:	0711      	lsls	r1, r2, #28
 80089ba:	bf44      	itt	mi
 80089bc:	232b      	movmi	r3, #43	@ 0x2b
 80089be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c2:	f89a 3000 	ldrb.w	r3, [sl]
 80089c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c8:	d015      	beq.n	80089f6 <_svfiprintf_r+0xfa>
 80089ca:	9a07      	ldr	r2, [sp, #28]
 80089cc:	4654      	mov	r4, sl
 80089ce:	2000      	movs	r0, #0
 80089d0:	f04f 0c0a 	mov.w	ip, #10
 80089d4:	4621      	mov	r1, r4
 80089d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089da:	3b30      	subs	r3, #48	@ 0x30
 80089dc:	2b09      	cmp	r3, #9
 80089de:	d94b      	bls.n	8008a78 <_svfiprintf_r+0x17c>
 80089e0:	b1b0      	cbz	r0, 8008a10 <_svfiprintf_r+0x114>
 80089e2:	9207      	str	r2, [sp, #28]
 80089e4:	e014      	b.n	8008a10 <_svfiprintf_r+0x114>
 80089e6:	eba0 0308 	sub.w	r3, r0, r8
 80089ea:	fa09 f303 	lsl.w	r3, r9, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	46a2      	mov	sl, r4
 80089f4:	e7d2      	b.n	800899c <_svfiprintf_r+0xa0>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	1d19      	adds	r1, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9103      	str	r1, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfbb      	ittet	lt
 8008a02:	425b      	neglt	r3, r3
 8008a04:	f042 0202 	orrlt.w	r2, r2, #2
 8008a08:	9307      	strge	r3, [sp, #28]
 8008a0a:	9307      	strlt	r3, [sp, #28]
 8008a0c:	bfb8      	it	lt
 8008a0e:	9204      	strlt	r2, [sp, #16]
 8008a10:	7823      	ldrb	r3, [r4, #0]
 8008a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a14:	d10a      	bne.n	8008a2c <_svfiprintf_r+0x130>
 8008a16:	7863      	ldrb	r3, [r4, #1]
 8008a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a1a:	d132      	bne.n	8008a82 <_svfiprintf_r+0x186>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	9203      	str	r2, [sp, #12]
 8008a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a28:	3402      	adds	r4, #2
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008af0 <_svfiprintf_r+0x1f4>
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	2203      	movs	r2, #3
 8008a34:	4650      	mov	r0, sl
 8008a36:	f7f7 fbeb 	bl	8000210 <memchr>
 8008a3a:	b138      	cbz	r0, 8008a4c <_svfiprintf_r+0x150>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	eba0 000a 	sub.w	r0, r0, sl
 8008a42:	2240      	movs	r2, #64	@ 0x40
 8008a44:	4082      	lsls	r2, r0
 8008a46:	4313      	orrs	r3, r2
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	4824      	ldr	r0, [pc, #144]	@ (8008ae4 <_svfiprintf_r+0x1e8>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a56:	2206      	movs	r2, #6
 8008a58:	f7f7 fbda 	bl	8000210 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d036      	beq.n	8008ace <_svfiprintf_r+0x1d2>
 8008a60:	4b21      	ldr	r3, [pc, #132]	@ (8008ae8 <_svfiprintf_r+0x1ec>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_svfiprintf_r+0x1b0>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	4433      	add	r3, r6
 8008a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a76:	e76a      	b.n	800894e <_svfiprintf_r+0x52>
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7a8      	b.n	80089d4 <_svfiprintf_r+0xd8>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	@ 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_svfiprintf_r+0x1a6>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c6      	beq.n	8008a2c <_svfiprintf_r+0x130>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c4      	b.n	8008a2c <_svfiprintf_r+0x130>
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f0      	b.n	8008a8e <_svfiprintf_r+0x192>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7fc fcca 	bl	8005450 <_printf_float>
 8008abc:	1c42      	adds	r2, r0, #1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	d1d6      	bne.n	8008a70 <_svfiprintf_r+0x174>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	065b      	lsls	r3, r3, #25
 8008ac6:	f53f af2d 	bmi.w	8008924 <_svfiprintf_r+0x28>
 8008aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008acc:	e72c      	b.n	8008928 <_svfiprintf_r+0x2c>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f7fc ff51 	bl	8005980 <_printf_i>
 8008ade:	e7ed      	b.n	8008abc <_svfiprintf_r+0x1c0>
 8008ae0:	08009d99 	.word	0x08009d99
 8008ae4:	08009da3 	.word	0x08009da3
 8008ae8:	08005451 	.word	0x08005451
 8008aec:	08008845 	.word	0x08008845
 8008af0:	08009d9f 	.word	0x08009d9f

08008af4 <__sflush_r>:
 8008af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	0716      	lsls	r6, r2, #28
 8008afe:	4605      	mov	r5, r0
 8008b00:	460c      	mov	r4, r1
 8008b02:	d454      	bmi.n	8008bae <__sflush_r+0xba>
 8008b04:	684b      	ldr	r3, [r1, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc02      	bgt.n	8008b10 <__sflush_r+0x1c>
 8008b0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dd48      	ble.n	8008ba2 <__sflush_r+0xae>
 8008b10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b12:	2e00      	cmp	r6, #0
 8008b14:	d045      	beq.n	8008ba2 <__sflush_r+0xae>
 8008b16:	2300      	movs	r3, #0
 8008b18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b1c:	682f      	ldr	r7, [r5, #0]
 8008b1e:	6a21      	ldr	r1, [r4, #32]
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	d030      	beq.n	8008b86 <__sflush_r+0x92>
 8008b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	0759      	lsls	r1, r3, #29
 8008b2a:	d505      	bpl.n	8008b38 <__sflush_r+0x44>
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b32:	b10b      	cbz	r3, 8008b38 <__sflush_r+0x44>
 8008b34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b3c:	6a21      	ldr	r1, [r4, #32]
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b0      	blx	r6
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	d106      	bne.n	8008b56 <__sflush_r+0x62>
 8008b48:	6829      	ldr	r1, [r5, #0]
 8008b4a:	291d      	cmp	r1, #29
 8008b4c:	d82b      	bhi.n	8008ba6 <__sflush_r+0xb2>
 8008b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf8 <__sflush_r+0x104>)
 8008b50:	410a      	asrs	r2, r1
 8008b52:	07d6      	lsls	r6, r2, #31
 8008b54:	d427      	bmi.n	8008ba6 <__sflush_r+0xb2>
 8008b56:	2200      	movs	r2, #0
 8008b58:	6062      	str	r2, [r4, #4]
 8008b5a:	04d9      	lsls	r1, r3, #19
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	d504      	bpl.n	8008b6c <__sflush_r+0x78>
 8008b62:	1c42      	adds	r2, r0, #1
 8008b64:	d101      	bne.n	8008b6a <__sflush_r+0x76>
 8008b66:	682b      	ldr	r3, [r5, #0]
 8008b68:	b903      	cbnz	r3, 8008b6c <__sflush_r+0x78>
 8008b6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b6e:	602f      	str	r7, [r5, #0]
 8008b70:	b1b9      	cbz	r1, 8008ba2 <__sflush_r+0xae>
 8008b72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b76:	4299      	cmp	r1, r3
 8008b78:	d002      	beq.n	8008b80 <__sflush_r+0x8c>
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7fe fa2c 	bl	8006fd8 <_free_r>
 8008b80:	2300      	movs	r3, #0
 8008b82:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b84:	e00d      	b.n	8008ba2 <__sflush_r+0xae>
 8008b86:	2301      	movs	r3, #1
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b0      	blx	r6
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	1c50      	adds	r0, r2, #1
 8008b90:	d1c9      	bne.n	8008b26 <__sflush_r+0x32>
 8008b92:	682b      	ldr	r3, [r5, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0c6      	beq.n	8008b26 <__sflush_r+0x32>
 8008b98:	2b1d      	cmp	r3, #29
 8008b9a:	d001      	beq.n	8008ba0 <__sflush_r+0xac>
 8008b9c:	2b16      	cmp	r3, #22
 8008b9e:	d11e      	bne.n	8008bde <__sflush_r+0xea>
 8008ba0:	602f      	str	r7, [r5, #0]
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e022      	b.n	8008bec <__sflush_r+0xf8>
 8008ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008baa:	b21b      	sxth	r3, r3
 8008bac:	e01b      	b.n	8008be6 <__sflush_r+0xf2>
 8008bae:	690f      	ldr	r7, [r1, #16]
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	d0f6      	beq.n	8008ba2 <__sflush_r+0xae>
 8008bb4:	0793      	lsls	r3, r2, #30
 8008bb6:	680e      	ldr	r6, [r1, #0]
 8008bb8:	bf08      	it	eq
 8008bba:	694b      	ldreq	r3, [r1, #20]
 8008bbc:	600f      	str	r7, [r1, #0]
 8008bbe:	bf18      	it	ne
 8008bc0:	2300      	movne	r3, #0
 8008bc2:	eba6 0807 	sub.w	r8, r6, r7
 8008bc6:	608b      	str	r3, [r1, #8]
 8008bc8:	f1b8 0f00 	cmp.w	r8, #0
 8008bcc:	dde9      	ble.n	8008ba2 <__sflush_r+0xae>
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bd2:	4643      	mov	r3, r8
 8008bd4:	463a      	mov	r2, r7
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b0      	blx	r6
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	dc08      	bgt.n	8008bf0 <__sflush_r+0xfc>
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf0:	4407      	add	r7, r0
 8008bf2:	eba8 0800 	sub.w	r8, r8, r0
 8008bf6:	e7e7      	b.n	8008bc8 <__sflush_r+0xd4>
 8008bf8:	dfbffffe 	.word	0xdfbffffe

08008bfc <_fflush_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	690b      	ldr	r3, [r1, #16]
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b913      	cbnz	r3, 8008c0c <_fflush_r+0x10>
 8008c06:	2500      	movs	r5, #0
 8008c08:	4628      	mov	r0, r5
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	b118      	cbz	r0, 8008c16 <_fflush_r+0x1a>
 8008c0e:	6a03      	ldr	r3, [r0, #32]
 8008c10:	b90b      	cbnz	r3, 8008c16 <_fflush_r+0x1a>
 8008c12:	f7fd fa75 	bl	8006100 <__sinit>
 8008c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f3      	beq.n	8008c06 <_fflush_r+0xa>
 8008c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c20:	07d0      	lsls	r0, r2, #31
 8008c22:	d404      	bmi.n	8008c2e <_fflush_r+0x32>
 8008c24:	0599      	lsls	r1, r3, #22
 8008c26:	d402      	bmi.n	8008c2e <_fflush_r+0x32>
 8008c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2a:	f7fd fb80 	bl	800632e <__retarget_lock_acquire_recursive>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	4621      	mov	r1, r4
 8008c32:	f7ff ff5f 	bl	8008af4 <__sflush_r>
 8008c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c38:	07da      	lsls	r2, r3, #31
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	d4e4      	bmi.n	8008c08 <_fflush_r+0xc>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	059b      	lsls	r3, r3, #22
 8008c42:	d4e1      	bmi.n	8008c08 <_fflush_r+0xc>
 8008c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c46:	f7fd fb73 	bl	8006330 <__retarget_lock_release_recursive>
 8008c4a:	e7dd      	b.n	8008c08 <_fflush_r+0xc>

08008c4c <memmove>:
 8008c4c:	4288      	cmp	r0, r1
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	eb01 0402 	add.w	r4, r1, r2
 8008c54:	d902      	bls.n	8008c5c <memmove+0x10>
 8008c56:	4284      	cmp	r4, r0
 8008c58:	4623      	mov	r3, r4
 8008c5a:	d807      	bhi.n	8008c6c <memmove+0x20>
 8008c5c:	1e43      	subs	r3, r0, #1
 8008c5e:	42a1      	cmp	r1, r4
 8008c60:	d008      	beq.n	8008c74 <memmove+0x28>
 8008c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c6a:	e7f8      	b.n	8008c5e <memmove+0x12>
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4601      	mov	r1, r0
 8008c70:	428a      	cmp	r2, r1
 8008c72:	d100      	bne.n	8008c76 <memmove+0x2a>
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c7e:	e7f7      	b.n	8008c70 <memmove+0x24>

08008c80 <strncmp>:
 8008c80:	b510      	push	{r4, lr}
 8008c82:	b16a      	cbz	r2, 8008ca0 <strncmp+0x20>
 8008c84:	3901      	subs	r1, #1
 8008c86:	1884      	adds	r4, r0, r2
 8008c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d103      	bne.n	8008c9c <strncmp+0x1c>
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d001      	beq.n	8008c9c <strncmp+0x1c>
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d1f5      	bne.n	8008c88 <strncmp+0x8>
 8008c9c:	1ad0      	subs	r0, r2, r3
 8008c9e:	bd10      	pop	{r4, pc}
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	e7fc      	b.n	8008c9e <strncmp+0x1e>

08008ca4 <_sbrk_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	@ (8008cc0 <_sbrk_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f9 fa6c 	bl	800218c <_sbrk>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_sbrk_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_sbrk_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20000484 	.word	0x20000484

08008cc4 <memcpy>:
 8008cc4:	440a      	add	r2, r1
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ccc:	d100      	bne.n	8008cd0 <memcpy+0xc>
 8008cce:	4770      	bx	lr
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cda:	4291      	cmp	r1, r2
 8008cdc:	d1f9      	bne.n	8008cd2 <memcpy+0xe>
 8008cde:	bd10      	pop	{r4, pc}

08008ce0 <nan>:
 8008ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ce8 <nan+0x8>
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	7ff80000 	.word	0x7ff80000

08008cf0 <__assert_func>:
 8008cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <__assert_func+0x2c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	68d8      	ldr	r0, [r3, #12]
 8008cfe:	b954      	cbnz	r4, 8008d16 <__assert_func+0x26>
 8008d00:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <__assert_func+0x30>)
 8008d02:	461c      	mov	r4, r3
 8008d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d08:	9100      	str	r1, [sp, #0]
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	4905      	ldr	r1, [pc, #20]	@ (8008d24 <__assert_func+0x34>)
 8008d0e:	f000 fba7 	bl	8009460 <fiprintf>
 8008d12:	f000 fbb7 	bl	8009484 <abort>
 8008d16:	4b04      	ldr	r3, [pc, #16]	@ (8008d28 <__assert_func+0x38>)
 8008d18:	e7f4      	b.n	8008d04 <__assert_func+0x14>
 8008d1a:	bf00      	nop
 8008d1c:	20000020 	.word	0x20000020
 8008d20:	08009ded 	.word	0x08009ded
 8008d24:	08009dbf 	.word	0x08009dbf
 8008d28:	08009db2 	.word	0x08009db2

08008d2c <_calloc_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	fba1 5402 	umull	r5, r4, r1, r2
 8008d32:	b93c      	cbnz	r4, 8008d44 <_calloc_r+0x18>
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7fe f9c3 	bl	80070c0 <_malloc_r>
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	b928      	cbnz	r0, 8008d4a <_calloc_r+0x1e>
 8008d3e:	2600      	movs	r6, #0
 8008d40:	4630      	mov	r0, r6
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	220c      	movs	r2, #12
 8008d46:	6002      	str	r2, [r0, #0]
 8008d48:	e7f9      	b.n	8008d3e <_calloc_r+0x12>
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7fd fa70 	bl	8006232 <memset>
 8008d52:	e7f5      	b.n	8008d40 <_calloc_r+0x14>

08008d54 <rshift>:
 8008d54:	6903      	ldr	r3, [r0, #16]
 8008d56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d62:	f100 0414 	add.w	r4, r0, #20
 8008d66:	dd45      	ble.n	8008df4 <rshift+0xa0>
 8008d68:	f011 011f 	ands.w	r1, r1, #31
 8008d6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d74:	d10c      	bne.n	8008d90 <rshift+0x3c>
 8008d76:	f100 0710 	add.w	r7, r0, #16
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	42b1      	cmp	r1, r6
 8008d7e:	d334      	bcc.n	8008dea <rshift+0x96>
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	1eea      	subs	r2, r5, #3
 8008d86:	4296      	cmp	r6, r2
 8008d88:	bf38      	it	cc
 8008d8a:	2300      	movcc	r3, #0
 8008d8c:	4423      	add	r3, r4
 8008d8e:	e015      	b.n	8008dbc <rshift+0x68>
 8008d90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d94:	f1c1 0820 	rsb	r8, r1, #32
 8008d98:	40cf      	lsrs	r7, r1
 8008d9a:	f105 0e04 	add.w	lr, r5, #4
 8008d9e:	46a1      	mov	r9, r4
 8008da0:	4576      	cmp	r6, lr
 8008da2:	46f4      	mov	ip, lr
 8008da4:	d815      	bhi.n	8008dd2 <rshift+0x7e>
 8008da6:	1a9a      	subs	r2, r3, r2
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	3a04      	subs	r2, #4
 8008dac:	3501      	adds	r5, #1
 8008dae:	42ae      	cmp	r6, r5
 8008db0:	bf38      	it	cc
 8008db2:	2200      	movcc	r2, #0
 8008db4:	18a3      	adds	r3, r4, r2
 8008db6:	50a7      	str	r7, [r4, r2]
 8008db8:	b107      	cbz	r7, 8008dbc <rshift+0x68>
 8008dba:	3304      	adds	r3, #4
 8008dbc:	1b1a      	subs	r2, r3, r4
 8008dbe:	42a3      	cmp	r3, r4
 8008dc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008dc4:	bf08      	it	eq
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	6102      	str	r2, [r0, #16]
 8008dca:	bf08      	it	eq
 8008dcc:	6143      	streq	r3, [r0, #20]
 8008dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	f8dc c000 	ldr.w	ip, [ip]
 8008dd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dda:	ea4c 0707 	orr.w	r7, ip, r7
 8008dde:	f849 7b04 	str.w	r7, [r9], #4
 8008de2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008de6:	40cf      	lsrs	r7, r1
 8008de8:	e7da      	b.n	8008da0 <rshift+0x4c>
 8008dea:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dee:	f847 cf04 	str.w	ip, [r7, #4]!
 8008df2:	e7c3      	b.n	8008d7c <rshift+0x28>
 8008df4:	4623      	mov	r3, r4
 8008df6:	e7e1      	b.n	8008dbc <rshift+0x68>

08008df8 <__hexdig_fun>:
 8008df8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d802      	bhi.n	8008e06 <__hexdig_fun+0xe>
 8008e00:	3820      	subs	r0, #32
 8008e02:	b2c0      	uxtb	r0, r0
 8008e04:	4770      	bx	lr
 8008e06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d801      	bhi.n	8008e12 <__hexdig_fun+0x1a>
 8008e0e:	3847      	subs	r0, #71	@ 0x47
 8008e10:	e7f7      	b.n	8008e02 <__hexdig_fun+0xa>
 8008e12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d801      	bhi.n	8008e1e <__hexdig_fun+0x26>
 8008e1a:	3827      	subs	r0, #39	@ 0x27
 8008e1c:	e7f1      	b.n	8008e02 <__hexdig_fun+0xa>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	4770      	bx	lr
	...

08008e24 <__gethex>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	468a      	mov	sl, r1
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	9001      	str	r0, [sp, #4]
 8008e32:	4690      	mov	r8, r2
 8008e34:	1c9c      	adds	r4, r3, #2
 8008e36:	46a1      	mov	r9, r4
 8008e38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e3c:	2830      	cmp	r0, #48	@ 0x30
 8008e3e:	d0fa      	beq.n	8008e36 <__gethex+0x12>
 8008e40:	eba9 0303 	sub.w	r3, r9, r3
 8008e44:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e48:	f7ff ffd6 	bl	8008df8 <__hexdig_fun>
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d168      	bne.n	8008f24 <__gethex+0x100>
 8008e52:	49a0      	ldr	r1, [pc, #640]	@ (80090d4 <__gethex+0x2b0>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	4648      	mov	r0, r9
 8008e58:	f7ff ff12 	bl	8008c80 <strncmp>
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d167      	bne.n	8008f32 <__gethex+0x10e>
 8008e62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e66:	4626      	mov	r6, r4
 8008e68:	f7ff ffc6 	bl	8008df8 <__hexdig_fun>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d062      	beq.n	8008f36 <__gethex+0x112>
 8008e70:	4623      	mov	r3, r4
 8008e72:	7818      	ldrb	r0, [r3, #0]
 8008e74:	2830      	cmp	r0, #48	@ 0x30
 8008e76:	4699      	mov	r9, r3
 8008e78:	f103 0301 	add.w	r3, r3, #1
 8008e7c:	d0f9      	beq.n	8008e72 <__gethex+0x4e>
 8008e7e:	f7ff ffbb 	bl	8008df8 <__hexdig_fun>
 8008e82:	fab0 f580 	clz	r5, r0
 8008e86:	096d      	lsrs	r5, r5, #5
 8008e88:	f04f 0b01 	mov.w	fp, #1
 8008e8c:	464a      	mov	r2, r9
 8008e8e:	4616      	mov	r6, r2
 8008e90:	3201      	adds	r2, #1
 8008e92:	7830      	ldrb	r0, [r6, #0]
 8008e94:	f7ff ffb0 	bl	8008df8 <__hexdig_fun>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d1f8      	bne.n	8008e8e <__gethex+0x6a>
 8008e9c:	498d      	ldr	r1, [pc, #564]	@ (80090d4 <__gethex+0x2b0>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f7ff feed 	bl	8008c80 <strncmp>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d13f      	bne.n	8008f2a <__gethex+0x106>
 8008eaa:	b944      	cbnz	r4, 8008ebe <__gethex+0x9a>
 8008eac:	1c74      	adds	r4, r6, #1
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	3201      	adds	r2, #1
 8008eb4:	7830      	ldrb	r0, [r6, #0]
 8008eb6:	f7ff ff9f 	bl	8008df8 <__hexdig_fun>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d1f8      	bne.n	8008eb0 <__gethex+0x8c>
 8008ebe:	1ba4      	subs	r4, r4, r6
 8008ec0:	00a7      	lsls	r7, r4, #2
 8008ec2:	7833      	ldrb	r3, [r6, #0]
 8008ec4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ec8:	2b50      	cmp	r3, #80	@ 0x50
 8008eca:	d13e      	bne.n	8008f4a <__gethex+0x126>
 8008ecc:	7873      	ldrb	r3, [r6, #1]
 8008ece:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ed0:	d033      	beq.n	8008f3a <__gethex+0x116>
 8008ed2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ed4:	d034      	beq.n	8008f40 <__gethex+0x11c>
 8008ed6:	1c71      	adds	r1, r6, #1
 8008ed8:	2400      	movs	r4, #0
 8008eda:	7808      	ldrb	r0, [r1, #0]
 8008edc:	f7ff ff8c 	bl	8008df8 <__hexdig_fun>
 8008ee0:	1e43      	subs	r3, r0, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b18      	cmp	r3, #24
 8008ee6:	d830      	bhi.n	8008f4a <__gethex+0x126>
 8008ee8:	f1a0 0210 	sub.w	r2, r0, #16
 8008eec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ef0:	f7ff ff82 	bl	8008df8 <__hexdig_fun>
 8008ef4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ef8:	fa5f fc8c 	uxtb.w	ip, ip
 8008efc:	f1bc 0f18 	cmp.w	ip, #24
 8008f00:	f04f 030a 	mov.w	r3, #10
 8008f04:	d91e      	bls.n	8008f44 <__gethex+0x120>
 8008f06:	b104      	cbz	r4, 8008f0a <__gethex+0xe6>
 8008f08:	4252      	negs	r2, r2
 8008f0a:	4417      	add	r7, r2
 8008f0c:	f8ca 1000 	str.w	r1, [sl]
 8008f10:	b1ed      	cbz	r5, 8008f4e <__gethex+0x12a>
 8008f12:	f1bb 0f00 	cmp.w	fp, #0
 8008f16:	bf0c      	ite	eq
 8008f18:	2506      	moveq	r5, #6
 8008f1a:	2500      	movne	r5, #0
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	b005      	add	sp, #20
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	2500      	movs	r5, #0
 8008f26:	462c      	mov	r4, r5
 8008f28:	e7b0      	b.n	8008e8c <__gethex+0x68>
 8008f2a:	2c00      	cmp	r4, #0
 8008f2c:	d1c7      	bne.n	8008ebe <__gethex+0x9a>
 8008f2e:	4627      	mov	r7, r4
 8008f30:	e7c7      	b.n	8008ec2 <__gethex+0x9e>
 8008f32:	464e      	mov	r6, r9
 8008f34:	462f      	mov	r7, r5
 8008f36:	2501      	movs	r5, #1
 8008f38:	e7c3      	b.n	8008ec2 <__gethex+0x9e>
 8008f3a:	2400      	movs	r4, #0
 8008f3c:	1cb1      	adds	r1, r6, #2
 8008f3e:	e7cc      	b.n	8008eda <__gethex+0xb6>
 8008f40:	2401      	movs	r4, #1
 8008f42:	e7fb      	b.n	8008f3c <__gethex+0x118>
 8008f44:	fb03 0002 	mla	r0, r3, r2, r0
 8008f48:	e7ce      	b.n	8008ee8 <__gethex+0xc4>
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	e7de      	b.n	8008f0c <__gethex+0xe8>
 8008f4e:	eba6 0309 	sub.w	r3, r6, r9
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4629      	mov	r1, r5
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	dc0a      	bgt.n	8008f70 <__gethex+0x14c>
 8008f5a:	9801      	ldr	r0, [sp, #4]
 8008f5c:	f7fe f93c 	bl	80071d8 <_Balloc>
 8008f60:	4604      	mov	r4, r0
 8008f62:	b940      	cbnz	r0, 8008f76 <__gethex+0x152>
 8008f64:	4b5c      	ldr	r3, [pc, #368]	@ (80090d8 <__gethex+0x2b4>)
 8008f66:	4602      	mov	r2, r0
 8008f68:	21e4      	movs	r1, #228	@ 0xe4
 8008f6a:	485c      	ldr	r0, [pc, #368]	@ (80090dc <__gethex+0x2b8>)
 8008f6c:	f7ff fec0 	bl	8008cf0 <__assert_func>
 8008f70:	3101      	adds	r1, #1
 8008f72:	105b      	asrs	r3, r3, #1
 8008f74:	e7ef      	b.n	8008f56 <__gethex+0x132>
 8008f76:	f100 0a14 	add.w	sl, r0, #20
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4655      	mov	r5, sl
 8008f7e:	469b      	mov	fp, r3
 8008f80:	45b1      	cmp	r9, r6
 8008f82:	d337      	bcc.n	8008ff4 <__gethex+0x1d0>
 8008f84:	f845 bb04 	str.w	fp, [r5], #4
 8008f88:	eba5 050a 	sub.w	r5, r5, sl
 8008f8c:	10ad      	asrs	r5, r5, #2
 8008f8e:	6125      	str	r5, [r4, #16]
 8008f90:	4658      	mov	r0, fp
 8008f92:	f7fe fa13 	bl	80073bc <__hi0bits>
 8008f96:	016d      	lsls	r5, r5, #5
 8008f98:	f8d8 6000 	ldr.w	r6, [r8]
 8008f9c:	1a2d      	subs	r5, r5, r0
 8008f9e:	42b5      	cmp	r5, r6
 8008fa0:	dd54      	ble.n	800904c <__gethex+0x228>
 8008fa2:	1bad      	subs	r5, r5, r6
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7fe fda7 	bl	8007afa <__any_on>
 8008fac:	4681      	mov	r9, r0
 8008fae:	b178      	cbz	r0, 8008fd0 <__gethex+0x1ac>
 8008fb0:	1e6b      	subs	r3, r5, #1
 8008fb2:	1159      	asrs	r1, r3, #5
 8008fb4:	f003 021f 	and.w	r2, r3, #31
 8008fb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fbc:	f04f 0901 	mov.w	r9, #1
 8008fc0:	fa09 f202 	lsl.w	r2, r9, r2
 8008fc4:	420a      	tst	r2, r1
 8008fc6:	d003      	beq.n	8008fd0 <__gethex+0x1ac>
 8008fc8:	454b      	cmp	r3, r9
 8008fca:	dc36      	bgt.n	800903a <__gethex+0x216>
 8008fcc:	f04f 0902 	mov.w	r9, #2
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f7ff febe 	bl	8008d54 <rshift>
 8008fd8:	442f      	add	r7, r5
 8008fda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fde:	42bb      	cmp	r3, r7
 8008fe0:	da42      	bge.n	8009068 <__gethex+0x244>
 8008fe2:	9801      	ldr	r0, [sp, #4]
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f7fe f937 	bl	8007258 <_Bfree>
 8008fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fec:	2300      	movs	r3, #0
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	25a3      	movs	r5, #163	@ 0xa3
 8008ff2:	e793      	b.n	8008f1c <__gethex+0xf8>
 8008ff4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ff8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ffa:	d012      	beq.n	8009022 <__gethex+0x1fe>
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d104      	bne.n	800900a <__gethex+0x1e6>
 8009000:	f845 bb04 	str.w	fp, [r5], #4
 8009004:	f04f 0b00 	mov.w	fp, #0
 8009008:	465b      	mov	r3, fp
 800900a:	7830      	ldrb	r0, [r6, #0]
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	f7ff fef3 	bl	8008df8 <__hexdig_fun>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	f000 000f 	and.w	r0, r0, #15
 8009018:	4098      	lsls	r0, r3
 800901a:	ea4b 0b00 	orr.w	fp, fp, r0
 800901e:	3304      	adds	r3, #4
 8009020:	e7ae      	b.n	8008f80 <__gethex+0x15c>
 8009022:	45b1      	cmp	r9, r6
 8009024:	d8ea      	bhi.n	8008ffc <__gethex+0x1d8>
 8009026:	492b      	ldr	r1, [pc, #172]	@ (80090d4 <__gethex+0x2b0>)
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff fe27 	bl	8008c80 <strncmp>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	2800      	cmp	r0, #0
 8009036:	d1e1      	bne.n	8008ffc <__gethex+0x1d8>
 8009038:	e7a2      	b.n	8008f80 <__gethex+0x15c>
 800903a:	1ea9      	subs	r1, r5, #2
 800903c:	4620      	mov	r0, r4
 800903e:	f7fe fd5c 	bl	8007afa <__any_on>
 8009042:	2800      	cmp	r0, #0
 8009044:	d0c2      	beq.n	8008fcc <__gethex+0x1a8>
 8009046:	f04f 0903 	mov.w	r9, #3
 800904a:	e7c1      	b.n	8008fd0 <__gethex+0x1ac>
 800904c:	da09      	bge.n	8009062 <__gethex+0x23e>
 800904e:	1b75      	subs	r5, r6, r5
 8009050:	4621      	mov	r1, r4
 8009052:	9801      	ldr	r0, [sp, #4]
 8009054:	462a      	mov	r2, r5
 8009056:	f7fe fb17 	bl	8007688 <__lshift>
 800905a:	1b7f      	subs	r7, r7, r5
 800905c:	4604      	mov	r4, r0
 800905e:	f100 0a14 	add.w	sl, r0, #20
 8009062:	f04f 0900 	mov.w	r9, #0
 8009066:	e7b8      	b.n	8008fda <__gethex+0x1b6>
 8009068:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800906c:	42bd      	cmp	r5, r7
 800906e:	dd6f      	ble.n	8009150 <__gethex+0x32c>
 8009070:	1bed      	subs	r5, r5, r7
 8009072:	42ae      	cmp	r6, r5
 8009074:	dc34      	bgt.n	80090e0 <__gethex+0x2bc>
 8009076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d022      	beq.n	80090c4 <__gethex+0x2a0>
 800907e:	2b03      	cmp	r3, #3
 8009080:	d024      	beq.n	80090cc <__gethex+0x2a8>
 8009082:	2b01      	cmp	r3, #1
 8009084:	d115      	bne.n	80090b2 <__gethex+0x28e>
 8009086:	42ae      	cmp	r6, r5
 8009088:	d113      	bne.n	80090b2 <__gethex+0x28e>
 800908a:	2e01      	cmp	r6, #1
 800908c:	d10b      	bne.n	80090a6 <__gethex+0x282>
 800908e:	9a02      	ldr	r2, [sp, #8]
 8009090:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	2301      	movs	r3, #1
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	f8ca 3000 	str.w	r3, [sl]
 800909e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090a0:	2562      	movs	r5, #98	@ 0x62
 80090a2:	601c      	str	r4, [r3, #0]
 80090a4:	e73a      	b.n	8008f1c <__gethex+0xf8>
 80090a6:	1e71      	subs	r1, r6, #1
 80090a8:	4620      	mov	r0, r4
 80090aa:	f7fe fd26 	bl	8007afa <__any_on>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d1ed      	bne.n	800908e <__gethex+0x26a>
 80090b2:	9801      	ldr	r0, [sp, #4]
 80090b4:	4621      	mov	r1, r4
 80090b6:	f7fe f8cf 	bl	8007258 <_Bfree>
 80090ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090bc:	2300      	movs	r3, #0
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	2550      	movs	r5, #80	@ 0x50
 80090c2:	e72b      	b.n	8008f1c <__gethex+0xf8>
 80090c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f3      	bne.n	80090b2 <__gethex+0x28e>
 80090ca:	e7e0      	b.n	800908e <__gethex+0x26a>
 80090cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1dd      	bne.n	800908e <__gethex+0x26a>
 80090d2:	e7ee      	b.n	80090b2 <__gethex+0x28e>
 80090d4:	08009c40 	.word	0x08009c40
 80090d8:	08009ad5 	.word	0x08009ad5
 80090dc:	08009dee 	.word	0x08009dee
 80090e0:	1e6f      	subs	r7, r5, #1
 80090e2:	f1b9 0f00 	cmp.w	r9, #0
 80090e6:	d130      	bne.n	800914a <__gethex+0x326>
 80090e8:	b127      	cbz	r7, 80090f4 <__gethex+0x2d0>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7fe fd04 	bl	8007afa <__any_on>
 80090f2:	4681      	mov	r9, r0
 80090f4:	117a      	asrs	r2, r7, #5
 80090f6:	2301      	movs	r3, #1
 80090f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090fc:	f007 071f 	and.w	r7, r7, #31
 8009100:	40bb      	lsls	r3, r7
 8009102:	4213      	tst	r3, r2
 8009104:	4629      	mov	r1, r5
 8009106:	4620      	mov	r0, r4
 8009108:	bf18      	it	ne
 800910a:	f049 0902 	orrne.w	r9, r9, #2
 800910e:	f7ff fe21 	bl	8008d54 <rshift>
 8009112:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009116:	1b76      	subs	r6, r6, r5
 8009118:	2502      	movs	r5, #2
 800911a:	f1b9 0f00 	cmp.w	r9, #0
 800911e:	d047      	beq.n	80091b0 <__gethex+0x38c>
 8009120:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d015      	beq.n	8009154 <__gethex+0x330>
 8009128:	2b03      	cmp	r3, #3
 800912a:	d017      	beq.n	800915c <__gethex+0x338>
 800912c:	2b01      	cmp	r3, #1
 800912e:	d109      	bne.n	8009144 <__gethex+0x320>
 8009130:	f019 0f02 	tst.w	r9, #2
 8009134:	d006      	beq.n	8009144 <__gethex+0x320>
 8009136:	f8da 3000 	ldr.w	r3, [sl]
 800913a:	ea49 0903 	orr.w	r9, r9, r3
 800913e:	f019 0f01 	tst.w	r9, #1
 8009142:	d10e      	bne.n	8009162 <__gethex+0x33e>
 8009144:	f045 0510 	orr.w	r5, r5, #16
 8009148:	e032      	b.n	80091b0 <__gethex+0x38c>
 800914a:	f04f 0901 	mov.w	r9, #1
 800914e:	e7d1      	b.n	80090f4 <__gethex+0x2d0>
 8009150:	2501      	movs	r5, #1
 8009152:	e7e2      	b.n	800911a <__gethex+0x2f6>
 8009154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009156:	f1c3 0301 	rsb	r3, r3, #1
 800915a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800915c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0f0      	beq.n	8009144 <__gethex+0x320>
 8009162:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009166:	f104 0314 	add.w	r3, r4, #20
 800916a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800916e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009172:	f04f 0c00 	mov.w	ip, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f853 2b04 	ldr.w	r2, [r3], #4
 800917c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009180:	d01b      	beq.n	80091ba <__gethex+0x396>
 8009182:	3201      	adds	r2, #1
 8009184:	6002      	str	r2, [r0, #0]
 8009186:	2d02      	cmp	r5, #2
 8009188:	f104 0314 	add.w	r3, r4, #20
 800918c:	d13c      	bne.n	8009208 <__gethex+0x3e4>
 800918e:	f8d8 2000 	ldr.w	r2, [r8]
 8009192:	3a01      	subs	r2, #1
 8009194:	42b2      	cmp	r2, r6
 8009196:	d109      	bne.n	80091ac <__gethex+0x388>
 8009198:	1171      	asrs	r1, r6, #5
 800919a:	2201      	movs	r2, #1
 800919c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091a0:	f006 061f 	and.w	r6, r6, #31
 80091a4:	fa02 f606 	lsl.w	r6, r2, r6
 80091a8:	421e      	tst	r6, r3
 80091aa:	d13a      	bne.n	8009222 <__gethex+0x3fe>
 80091ac:	f045 0520 	orr.w	r5, r5, #32
 80091b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b2:	601c      	str	r4, [r3, #0]
 80091b4:	9b02      	ldr	r3, [sp, #8]
 80091b6:	601f      	str	r7, [r3, #0]
 80091b8:	e6b0      	b.n	8008f1c <__gethex+0xf8>
 80091ba:	4299      	cmp	r1, r3
 80091bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80091c0:	d8d9      	bhi.n	8009176 <__gethex+0x352>
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	459b      	cmp	fp, r3
 80091c6:	db17      	blt.n	80091f8 <__gethex+0x3d4>
 80091c8:	6861      	ldr	r1, [r4, #4]
 80091ca:	9801      	ldr	r0, [sp, #4]
 80091cc:	3101      	adds	r1, #1
 80091ce:	f7fe f803 	bl	80071d8 <_Balloc>
 80091d2:	4681      	mov	r9, r0
 80091d4:	b918      	cbnz	r0, 80091de <__gethex+0x3ba>
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <__gethex+0x41c>)
 80091d8:	4602      	mov	r2, r0
 80091da:	2184      	movs	r1, #132	@ 0x84
 80091dc:	e6c5      	b.n	8008f6a <__gethex+0x146>
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	f104 010c 	add.w	r1, r4, #12
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	300c      	adds	r0, #12
 80091ea:	f7ff fd6b 	bl	8008cc4 <memcpy>
 80091ee:	4621      	mov	r1, r4
 80091f0:	9801      	ldr	r0, [sp, #4]
 80091f2:	f7fe f831 	bl	8007258 <_Bfree>
 80091f6:	464c      	mov	r4, r9
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009200:	6122      	str	r2, [r4, #16]
 8009202:	2201      	movs	r2, #1
 8009204:	615a      	str	r2, [r3, #20]
 8009206:	e7be      	b.n	8009186 <__gethex+0x362>
 8009208:	6922      	ldr	r2, [r4, #16]
 800920a:	455a      	cmp	r2, fp
 800920c:	dd0b      	ble.n	8009226 <__gethex+0x402>
 800920e:	2101      	movs	r1, #1
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff fd9f 	bl	8008d54 <rshift>
 8009216:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800921a:	3701      	adds	r7, #1
 800921c:	42bb      	cmp	r3, r7
 800921e:	f6ff aee0 	blt.w	8008fe2 <__gethex+0x1be>
 8009222:	2501      	movs	r5, #1
 8009224:	e7c2      	b.n	80091ac <__gethex+0x388>
 8009226:	f016 061f 	ands.w	r6, r6, #31
 800922a:	d0fa      	beq.n	8009222 <__gethex+0x3fe>
 800922c:	4453      	add	r3, sl
 800922e:	f1c6 0620 	rsb	r6, r6, #32
 8009232:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009236:	f7fe f8c1 	bl	80073bc <__hi0bits>
 800923a:	42b0      	cmp	r0, r6
 800923c:	dbe7      	blt.n	800920e <__gethex+0x3ea>
 800923e:	e7f0      	b.n	8009222 <__gethex+0x3fe>
 8009240:	08009ad5 	.word	0x08009ad5

08009244 <L_shift>:
 8009244:	f1c2 0208 	rsb	r2, r2, #8
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	b570      	push	{r4, r5, r6, lr}
 800924c:	f1c2 0620 	rsb	r6, r2, #32
 8009250:	6843      	ldr	r3, [r0, #4]
 8009252:	6804      	ldr	r4, [r0, #0]
 8009254:	fa03 f506 	lsl.w	r5, r3, r6
 8009258:	432c      	orrs	r4, r5
 800925a:	40d3      	lsrs	r3, r2
 800925c:	6004      	str	r4, [r0, #0]
 800925e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009262:	4288      	cmp	r0, r1
 8009264:	d3f4      	bcc.n	8009250 <L_shift+0xc>
 8009266:	bd70      	pop	{r4, r5, r6, pc}

08009268 <__match>:
 8009268:	b530      	push	{r4, r5, lr}
 800926a:	6803      	ldr	r3, [r0, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009272:	b914      	cbnz	r4, 800927a <__match+0x12>
 8009274:	6003      	str	r3, [r0, #0]
 8009276:	2001      	movs	r0, #1
 8009278:	bd30      	pop	{r4, r5, pc}
 800927a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800927e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009282:	2d19      	cmp	r5, #25
 8009284:	bf98      	it	ls
 8009286:	3220      	addls	r2, #32
 8009288:	42a2      	cmp	r2, r4
 800928a:	d0f0      	beq.n	800926e <__match+0x6>
 800928c:	2000      	movs	r0, #0
 800928e:	e7f3      	b.n	8009278 <__match+0x10>

08009290 <__hexnan>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	680b      	ldr	r3, [r1, #0]
 8009296:	6801      	ldr	r1, [r0, #0]
 8009298:	115e      	asrs	r6, r3, #5
 800929a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800929e:	f013 031f 	ands.w	r3, r3, #31
 80092a2:	b087      	sub	sp, #28
 80092a4:	bf18      	it	ne
 80092a6:	3604      	addne	r6, #4
 80092a8:	2500      	movs	r5, #0
 80092aa:	1f37      	subs	r7, r6, #4
 80092ac:	4682      	mov	sl, r0
 80092ae:	4690      	mov	r8, r2
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80092b6:	46b9      	mov	r9, r7
 80092b8:	463c      	mov	r4, r7
 80092ba:	9502      	str	r5, [sp, #8]
 80092bc:	46ab      	mov	fp, r5
 80092be:	784a      	ldrb	r2, [r1, #1]
 80092c0:	1c4b      	adds	r3, r1, #1
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	b342      	cbz	r2, 8009318 <__hexnan+0x88>
 80092c6:	4610      	mov	r0, r2
 80092c8:	9105      	str	r1, [sp, #20]
 80092ca:	9204      	str	r2, [sp, #16]
 80092cc:	f7ff fd94 	bl	8008df8 <__hexdig_fun>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d151      	bne.n	8009378 <__hexnan+0xe8>
 80092d4:	9a04      	ldr	r2, [sp, #16]
 80092d6:	9905      	ldr	r1, [sp, #20]
 80092d8:	2a20      	cmp	r2, #32
 80092da:	d818      	bhi.n	800930e <__hexnan+0x7e>
 80092dc:	9b02      	ldr	r3, [sp, #8]
 80092de:	459b      	cmp	fp, r3
 80092e0:	dd13      	ble.n	800930a <__hexnan+0x7a>
 80092e2:	454c      	cmp	r4, r9
 80092e4:	d206      	bcs.n	80092f4 <__hexnan+0x64>
 80092e6:	2d07      	cmp	r5, #7
 80092e8:	dc04      	bgt.n	80092f4 <__hexnan+0x64>
 80092ea:	462a      	mov	r2, r5
 80092ec:	4649      	mov	r1, r9
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff ffa8 	bl	8009244 <L_shift>
 80092f4:	4544      	cmp	r4, r8
 80092f6:	d952      	bls.n	800939e <__hexnan+0x10e>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f1a4 0904 	sub.w	r9, r4, #4
 80092fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009302:	f8cd b008 	str.w	fp, [sp, #8]
 8009306:	464c      	mov	r4, r9
 8009308:	461d      	mov	r5, r3
 800930a:	9903      	ldr	r1, [sp, #12]
 800930c:	e7d7      	b.n	80092be <__hexnan+0x2e>
 800930e:	2a29      	cmp	r2, #41	@ 0x29
 8009310:	d157      	bne.n	80093c2 <__hexnan+0x132>
 8009312:	3102      	adds	r1, #2
 8009314:	f8ca 1000 	str.w	r1, [sl]
 8009318:	f1bb 0f00 	cmp.w	fp, #0
 800931c:	d051      	beq.n	80093c2 <__hexnan+0x132>
 800931e:	454c      	cmp	r4, r9
 8009320:	d206      	bcs.n	8009330 <__hexnan+0xa0>
 8009322:	2d07      	cmp	r5, #7
 8009324:	dc04      	bgt.n	8009330 <__hexnan+0xa0>
 8009326:	462a      	mov	r2, r5
 8009328:	4649      	mov	r1, r9
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff ff8a 	bl	8009244 <L_shift>
 8009330:	4544      	cmp	r4, r8
 8009332:	d936      	bls.n	80093a2 <__hexnan+0x112>
 8009334:	f1a8 0204 	sub.w	r2, r8, #4
 8009338:	4623      	mov	r3, r4
 800933a:	f853 1b04 	ldr.w	r1, [r3], #4
 800933e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009342:	429f      	cmp	r7, r3
 8009344:	d2f9      	bcs.n	800933a <__hexnan+0xaa>
 8009346:	1b3b      	subs	r3, r7, r4
 8009348:	f023 0303 	bic.w	r3, r3, #3
 800934c:	3304      	adds	r3, #4
 800934e:	3401      	adds	r4, #1
 8009350:	3e03      	subs	r6, #3
 8009352:	42b4      	cmp	r4, r6
 8009354:	bf88      	it	hi
 8009356:	2304      	movhi	r3, #4
 8009358:	4443      	add	r3, r8
 800935a:	2200      	movs	r2, #0
 800935c:	f843 2b04 	str.w	r2, [r3], #4
 8009360:	429f      	cmp	r7, r3
 8009362:	d2fb      	bcs.n	800935c <__hexnan+0xcc>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	b91b      	cbnz	r3, 8009370 <__hexnan+0xe0>
 8009368:	4547      	cmp	r7, r8
 800936a:	d128      	bne.n	80093be <__hexnan+0x12e>
 800936c:	2301      	movs	r3, #1
 800936e:	603b      	str	r3, [r7, #0]
 8009370:	2005      	movs	r0, #5
 8009372:	b007      	add	sp, #28
 8009374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009378:	3501      	adds	r5, #1
 800937a:	2d08      	cmp	r5, #8
 800937c:	f10b 0b01 	add.w	fp, fp, #1
 8009380:	dd06      	ble.n	8009390 <__hexnan+0x100>
 8009382:	4544      	cmp	r4, r8
 8009384:	d9c1      	bls.n	800930a <__hexnan+0x7a>
 8009386:	2300      	movs	r3, #0
 8009388:	f844 3c04 	str.w	r3, [r4, #-4]
 800938c:	2501      	movs	r5, #1
 800938e:	3c04      	subs	r4, #4
 8009390:	6822      	ldr	r2, [r4, #0]
 8009392:	f000 000f 	and.w	r0, r0, #15
 8009396:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800939a:	6020      	str	r0, [r4, #0]
 800939c:	e7b5      	b.n	800930a <__hexnan+0x7a>
 800939e:	2508      	movs	r5, #8
 80093a0:	e7b3      	b.n	800930a <__hexnan+0x7a>
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0dd      	beq.n	8009364 <__hexnan+0xd4>
 80093a8:	f1c3 0320 	rsb	r3, r3, #32
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295
 80093b0:	40da      	lsrs	r2, r3
 80093b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093b6:	4013      	ands	r3, r2
 80093b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80093bc:	e7d2      	b.n	8009364 <__hexnan+0xd4>
 80093be:	3f04      	subs	r7, #4
 80093c0:	e7d0      	b.n	8009364 <__hexnan+0xd4>
 80093c2:	2004      	movs	r0, #4
 80093c4:	e7d5      	b.n	8009372 <__hexnan+0xe2>

080093c6 <__ascii_mbtowc>:
 80093c6:	b082      	sub	sp, #8
 80093c8:	b901      	cbnz	r1, 80093cc <__ascii_mbtowc+0x6>
 80093ca:	a901      	add	r1, sp, #4
 80093cc:	b142      	cbz	r2, 80093e0 <__ascii_mbtowc+0x1a>
 80093ce:	b14b      	cbz	r3, 80093e4 <__ascii_mbtowc+0x1e>
 80093d0:	7813      	ldrb	r3, [r2, #0]
 80093d2:	600b      	str	r3, [r1, #0]
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	1e10      	subs	r0, r2, #0
 80093d8:	bf18      	it	ne
 80093da:	2001      	movne	r0, #1
 80093dc:	b002      	add	sp, #8
 80093de:	4770      	bx	lr
 80093e0:	4610      	mov	r0, r2
 80093e2:	e7fb      	b.n	80093dc <__ascii_mbtowc+0x16>
 80093e4:	f06f 0001 	mvn.w	r0, #1
 80093e8:	e7f8      	b.n	80093dc <__ascii_mbtowc+0x16>

080093ea <_realloc_r>:
 80093ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ee:	4680      	mov	r8, r0
 80093f0:	4615      	mov	r5, r2
 80093f2:	460c      	mov	r4, r1
 80093f4:	b921      	cbnz	r1, 8009400 <_realloc_r+0x16>
 80093f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	4611      	mov	r1, r2
 80093fc:	f7fd be60 	b.w	80070c0 <_malloc_r>
 8009400:	b92a      	cbnz	r2, 800940e <_realloc_r+0x24>
 8009402:	f7fd fde9 	bl	8006fd8 <_free_r>
 8009406:	2400      	movs	r4, #0
 8009408:	4620      	mov	r0, r4
 800940a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940e:	f000 f840 	bl	8009492 <_malloc_usable_size_r>
 8009412:	4285      	cmp	r5, r0
 8009414:	4606      	mov	r6, r0
 8009416:	d802      	bhi.n	800941e <_realloc_r+0x34>
 8009418:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800941c:	d8f4      	bhi.n	8009408 <_realloc_r+0x1e>
 800941e:	4629      	mov	r1, r5
 8009420:	4640      	mov	r0, r8
 8009422:	f7fd fe4d 	bl	80070c0 <_malloc_r>
 8009426:	4607      	mov	r7, r0
 8009428:	2800      	cmp	r0, #0
 800942a:	d0ec      	beq.n	8009406 <_realloc_r+0x1c>
 800942c:	42b5      	cmp	r5, r6
 800942e:	462a      	mov	r2, r5
 8009430:	4621      	mov	r1, r4
 8009432:	bf28      	it	cs
 8009434:	4632      	movcs	r2, r6
 8009436:	f7ff fc45 	bl	8008cc4 <memcpy>
 800943a:	4621      	mov	r1, r4
 800943c:	4640      	mov	r0, r8
 800943e:	f7fd fdcb 	bl	8006fd8 <_free_r>
 8009442:	463c      	mov	r4, r7
 8009444:	e7e0      	b.n	8009408 <_realloc_r+0x1e>

08009446 <__ascii_wctomb>:
 8009446:	4603      	mov	r3, r0
 8009448:	4608      	mov	r0, r1
 800944a:	b141      	cbz	r1, 800945e <__ascii_wctomb+0x18>
 800944c:	2aff      	cmp	r2, #255	@ 0xff
 800944e:	d904      	bls.n	800945a <__ascii_wctomb+0x14>
 8009450:	228a      	movs	r2, #138	@ 0x8a
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	4770      	bx	lr
 800945a:	700a      	strb	r2, [r1, #0]
 800945c:	2001      	movs	r0, #1
 800945e:	4770      	bx	lr

08009460 <fiprintf>:
 8009460:	b40e      	push	{r1, r2, r3}
 8009462:	b503      	push	{r0, r1, lr}
 8009464:	4601      	mov	r1, r0
 8009466:	ab03      	add	r3, sp, #12
 8009468:	4805      	ldr	r0, [pc, #20]	@ (8009480 <fiprintf+0x20>)
 800946a:	f853 2b04 	ldr.w	r2, [r3], #4
 800946e:	6800      	ldr	r0, [r0, #0]
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	f000 f83f 	bl	80094f4 <_vfiprintf_r>
 8009476:	b002      	add	sp, #8
 8009478:	f85d eb04 	ldr.w	lr, [sp], #4
 800947c:	b003      	add	sp, #12
 800947e:	4770      	bx	lr
 8009480:	20000020 	.word	0x20000020

08009484 <abort>:
 8009484:	b508      	push	{r3, lr}
 8009486:	2006      	movs	r0, #6
 8009488:	f000 fa08 	bl	800989c <raise>
 800948c:	2001      	movs	r0, #1
 800948e:	f7f8 fe05 	bl	800209c <_exit>

08009492 <_malloc_usable_size_r>:
 8009492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009496:	1f18      	subs	r0, r3, #4
 8009498:	2b00      	cmp	r3, #0
 800949a:	bfbc      	itt	lt
 800949c:	580b      	ldrlt	r3, [r1, r0]
 800949e:	18c0      	addlt	r0, r0, r3
 80094a0:	4770      	bx	lr

080094a2 <__sfputc_r>:
 80094a2:	6893      	ldr	r3, [r2, #8]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	b410      	push	{r4}
 80094aa:	6093      	str	r3, [r2, #8]
 80094ac:	da08      	bge.n	80094c0 <__sfputc_r+0x1e>
 80094ae:	6994      	ldr	r4, [r2, #24]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	db01      	blt.n	80094b8 <__sfputc_r+0x16>
 80094b4:	290a      	cmp	r1, #10
 80094b6:	d103      	bne.n	80094c0 <__sfputc_r+0x1e>
 80094b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094bc:	f000 b932 	b.w	8009724 <__swbuf_r>
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	1c58      	adds	r0, r3, #1
 80094c4:	6010      	str	r0, [r2, #0]
 80094c6:	7019      	strb	r1, [r3, #0]
 80094c8:	4608      	mov	r0, r1
 80094ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <__sfputs_r>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	4614      	mov	r4, r2
 80094d8:	18d5      	adds	r5, r2, r3
 80094da:	42ac      	cmp	r4, r5
 80094dc:	d101      	bne.n	80094e2 <__sfputs_r+0x12>
 80094de:	2000      	movs	r0, #0
 80094e0:	e007      	b.n	80094f2 <__sfputs_r+0x22>
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	463a      	mov	r2, r7
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ffda 	bl	80094a2 <__sfputc_r>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	d1f3      	bne.n	80094da <__sfputs_r+0xa>
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094f4 <_vfiprintf_r>:
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	460d      	mov	r5, r1
 80094fa:	b09d      	sub	sp, #116	@ 0x74
 80094fc:	4614      	mov	r4, r2
 80094fe:	4698      	mov	r8, r3
 8009500:	4606      	mov	r6, r0
 8009502:	b118      	cbz	r0, 800950c <_vfiprintf_r+0x18>
 8009504:	6a03      	ldr	r3, [r0, #32]
 8009506:	b90b      	cbnz	r3, 800950c <_vfiprintf_r+0x18>
 8009508:	f7fc fdfa 	bl	8006100 <__sinit>
 800950c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800950e:	07d9      	lsls	r1, r3, #31
 8009510:	d405      	bmi.n	800951e <_vfiprintf_r+0x2a>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	059a      	lsls	r2, r3, #22
 8009516:	d402      	bmi.n	800951e <_vfiprintf_r+0x2a>
 8009518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800951a:	f7fc ff08 	bl	800632e <__retarget_lock_acquire_recursive>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	071b      	lsls	r3, r3, #28
 8009522:	d501      	bpl.n	8009528 <_vfiprintf_r+0x34>
 8009524:	692b      	ldr	r3, [r5, #16]
 8009526:	b99b      	cbnz	r3, 8009550 <_vfiprintf_r+0x5c>
 8009528:	4629      	mov	r1, r5
 800952a:	4630      	mov	r0, r6
 800952c:	f000 f938 	bl	80097a0 <__swsetup_r>
 8009530:	b170      	cbz	r0, 8009550 <_vfiprintf_r+0x5c>
 8009532:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009534:	07dc      	lsls	r4, r3, #31
 8009536:	d504      	bpl.n	8009542 <_vfiprintf_r+0x4e>
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	b01d      	add	sp, #116	@ 0x74
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	89ab      	ldrh	r3, [r5, #12]
 8009544:	0598      	lsls	r0, r3, #22
 8009546:	d4f7      	bmi.n	8009538 <_vfiprintf_r+0x44>
 8009548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800954a:	f7fc fef1 	bl	8006330 <__retarget_lock_release_recursive>
 800954e:	e7f3      	b.n	8009538 <_vfiprintf_r+0x44>
 8009550:	2300      	movs	r3, #0
 8009552:	9309      	str	r3, [sp, #36]	@ 0x24
 8009554:	2320      	movs	r3, #32
 8009556:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800955a:	f8cd 800c 	str.w	r8, [sp, #12]
 800955e:	2330      	movs	r3, #48	@ 0x30
 8009560:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009710 <_vfiprintf_r+0x21c>
 8009564:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009568:	f04f 0901 	mov.w	r9, #1
 800956c:	4623      	mov	r3, r4
 800956e:	469a      	mov	sl, r3
 8009570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009574:	b10a      	cbz	r2, 800957a <_vfiprintf_r+0x86>
 8009576:	2a25      	cmp	r2, #37	@ 0x25
 8009578:	d1f9      	bne.n	800956e <_vfiprintf_r+0x7a>
 800957a:	ebba 0b04 	subs.w	fp, sl, r4
 800957e:	d00b      	beq.n	8009598 <_vfiprintf_r+0xa4>
 8009580:	465b      	mov	r3, fp
 8009582:	4622      	mov	r2, r4
 8009584:	4629      	mov	r1, r5
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff ffa2 	bl	80094d0 <__sfputs_r>
 800958c:	3001      	adds	r0, #1
 800958e:	f000 80a7 	beq.w	80096e0 <_vfiprintf_r+0x1ec>
 8009592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009594:	445a      	add	r2, fp
 8009596:	9209      	str	r2, [sp, #36]	@ 0x24
 8009598:	f89a 3000 	ldrb.w	r3, [sl]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 809f 	beq.w	80096e0 <_vfiprintf_r+0x1ec>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ac:	f10a 0a01 	add.w	sl, sl, #1
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	9307      	str	r3, [sp, #28]
 80095b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80095ba:	4654      	mov	r4, sl
 80095bc:	2205      	movs	r2, #5
 80095be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c2:	4853      	ldr	r0, [pc, #332]	@ (8009710 <_vfiprintf_r+0x21c>)
 80095c4:	f7f6 fe24 	bl	8000210 <memchr>
 80095c8:	9a04      	ldr	r2, [sp, #16]
 80095ca:	b9d8      	cbnz	r0, 8009604 <_vfiprintf_r+0x110>
 80095cc:	06d1      	lsls	r1, r2, #27
 80095ce:	bf44      	itt	mi
 80095d0:	2320      	movmi	r3, #32
 80095d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095d6:	0713      	lsls	r3, r2, #28
 80095d8:	bf44      	itt	mi
 80095da:	232b      	movmi	r3, #43	@ 0x2b
 80095dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80095e6:	d015      	beq.n	8009614 <_vfiprintf_r+0x120>
 80095e8:	9a07      	ldr	r2, [sp, #28]
 80095ea:	4654      	mov	r4, sl
 80095ec:	2000      	movs	r0, #0
 80095ee:	f04f 0c0a 	mov.w	ip, #10
 80095f2:	4621      	mov	r1, r4
 80095f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f8:	3b30      	subs	r3, #48	@ 0x30
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d94b      	bls.n	8009696 <_vfiprintf_r+0x1a2>
 80095fe:	b1b0      	cbz	r0, 800962e <_vfiprintf_r+0x13a>
 8009600:	9207      	str	r2, [sp, #28]
 8009602:	e014      	b.n	800962e <_vfiprintf_r+0x13a>
 8009604:	eba0 0308 	sub.w	r3, r0, r8
 8009608:	fa09 f303 	lsl.w	r3, r9, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	9304      	str	r3, [sp, #16]
 8009610:	46a2      	mov	sl, r4
 8009612:	e7d2      	b.n	80095ba <_vfiprintf_r+0xc6>
 8009614:	9b03      	ldr	r3, [sp, #12]
 8009616:	1d19      	adds	r1, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	9103      	str	r1, [sp, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	bfbb      	ittet	lt
 8009620:	425b      	neglt	r3, r3
 8009622:	f042 0202 	orrlt.w	r2, r2, #2
 8009626:	9307      	strge	r3, [sp, #28]
 8009628:	9307      	strlt	r3, [sp, #28]
 800962a:	bfb8      	it	lt
 800962c:	9204      	strlt	r2, [sp, #16]
 800962e:	7823      	ldrb	r3, [r4, #0]
 8009630:	2b2e      	cmp	r3, #46	@ 0x2e
 8009632:	d10a      	bne.n	800964a <_vfiprintf_r+0x156>
 8009634:	7863      	ldrb	r3, [r4, #1]
 8009636:	2b2a      	cmp	r3, #42	@ 0x2a
 8009638:	d132      	bne.n	80096a0 <_vfiprintf_r+0x1ac>
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	9203      	str	r2, [sp, #12]
 8009642:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009646:	3402      	adds	r4, #2
 8009648:	9305      	str	r3, [sp, #20]
 800964a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009720 <_vfiprintf_r+0x22c>
 800964e:	7821      	ldrb	r1, [r4, #0]
 8009650:	2203      	movs	r2, #3
 8009652:	4650      	mov	r0, sl
 8009654:	f7f6 fddc 	bl	8000210 <memchr>
 8009658:	b138      	cbz	r0, 800966a <_vfiprintf_r+0x176>
 800965a:	9b04      	ldr	r3, [sp, #16]
 800965c:	eba0 000a 	sub.w	r0, r0, sl
 8009660:	2240      	movs	r2, #64	@ 0x40
 8009662:	4082      	lsls	r2, r0
 8009664:	4313      	orrs	r3, r2
 8009666:	3401      	adds	r4, #1
 8009668:	9304      	str	r3, [sp, #16]
 800966a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966e:	4829      	ldr	r0, [pc, #164]	@ (8009714 <_vfiprintf_r+0x220>)
 8009670:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009674:	2206      	movs	r2, #6
 8009676:	f7f6 fdcb 	bl	8000210 <memchr>
 800967a:	2800      	cmp	r0, #0
 800967c:	d03f      	beq.n	80096fe <_vfiprintf_r+0x20a>
 800967e:	4b26      	ldr	r3, [pc, #152]	@ (8009718 <_vfiprintf_r+0x224>)
 8009680:	bb1b      	cbnz	r3, 80096ca <_vfiprintf_r+0x1d6>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	3307      	adds	r3, #7
 8009686:	f023 0307 	bic.w	r3, r3, #7
 800968a:	3308      	adds	r3, #8
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	443b      	add	r3, r7
 8009692:	9309      	str	r3, [sp, #36]	@ 0x24
 8009694:	e76a      	b.n	800956c <_vfiprintf_r+0x78>
 8009696:	fb0c 3202 	mla	r2, ip, r2, r3
 800969a:	460c      	mov	r4, r1
 800969c:	2001      	movs	r0, #1
 800969e:	e7a8      	b.n	80095f2 <_vfiprintf_r+0xfe>
 80096a0:	2300      	movs	r3, #0
 80096a2:	3401      	adds	r4, #1
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	4619      	mov	r1, r3
 80096a8:	f04f 0c0a 	mov.w	ip, #10
 80096ac:	4620      	mov	r0, r4
 80096ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b2:	3a30      	subs	r2, #48	@ 0x30
 80096b4:	2a09      	cmp	r2, #9
 80096b6:	d903      	bls.n	80096c0 <_vfiprintf_r+0x1cc>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0c6      	beq.n	800964a <_vfiprintf_r+0x156>
 80096bc:	9105      	str	r1, [sp, #20]
 80096be:	e7c4      	b.n	800964a <_vfiprintf_r+0x156>
 80096c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c4:	4604      	mov	r4, r0
 80096c6:	2301      	movs	r3, #1
 80096c8:	e7f0      	b.n	80096ac <_vfiprintf_r+0x1b8>
 80096ca:	ab03      	add	r3, sp, #12
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	462a      	mov	r2, r5
 80096d0:	4b12      	ldr	r3, [pc, #72]	@ (800971c <_vfiprintf_r+0x228>)
 80096d2:	a904      	add	r1, sp, #16
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7fb febb 	bl	8005450 <_printf_float>
 80096da:	4607      	mov	r7, r0
 80096dc:	1c78      	adds	r0, r7, #1
 80096de:	d1d6      	bne.n	800968e <_vfiprintf_r+0x19a>
 80096e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096e2:	07d9      	lsls	r1, r3, #31
 80096e4:	d405      	bmi.n	80096f2 <_vfiprintf_r+0x1fe>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_vfiprintf_r+0x1fe>
 80096ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096ee:	f7fc fe1f 	bl	8006330 <__retarget_lock_release_recursive>
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	065b      	lsls	r3, r3, #25
 80096f6:	f53f af1f 	bmi.w	8009538 <_vfiprintf_r+0x44>
 80096fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096fc:	e71e      	b.n	800953c <_vfiprintf_r+0x48>
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	462a      	mov	r2, r5
 8009704:	4b05      	ldr	r3, [pc, #20]	@ (800971c <_vfiprintf_r+0x228>)
 8009706:	a904      	add	r1, sp, #16
 8009708:	4630      	mov	r0, r6
 800970a:	f7fc f939 	bl	8005980 <_printf_i>
 800970e:	e7e4      	b.n	80096da <_vfiprintf_r+0x1e6>
 8009710:	08009d99 	.word	0x08009d99
 8009714:	08009da3 	.word	0x08009da3
 8009718:	08005451 	.word	0x08005451
 800971c:	080094d1 	.word	0x080094d1
 8009720:	08009d9f 	.word	0x08009d9f

08009724 <__swbuf_r>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	460e      	mov	r6, r1
 8009728:	4614      	mov	r4, r2
 800972a:	4605      	mov	r5, r0
 800972c:	b118      	cbz	r0, 8009736 <__swbuf_r+0x12>
 800972e:	6a03      	ldr	r3, [r0, #32]
 8009730:	b90b      	cbnz	r3, 8009736 <__swbuf_r+0x12>
 8009732:	f7fc fce5 	bl	8006100 <__sinit>
 8009736:	69a3      	ldr	r3, [r4, #24]
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	071a      	lsls	r2, r3, #28
 800973e:	d501      	bpl.n	8009744 <__swbuf_r+0x20>
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	b943      	cbnz	r3, 8009756 <__swbuf_r+0x32>
 8009744:	4621      	mov	r1, r4
 8009746:	4628      	mov	r0, r5
 8009748:	f000 f82a 	bl	80097a0 <__swsetup_r>
 800974c:	b118      	cbz	r0, 8009756 <__swbuf_r+0x32>
 800974e:	f04f 37ff 	mov.w	r7, #4294967295
 8009752:	4638      	mov	r0, r7
 8009754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	6922      	ldr	r2, [r4, #16]
 800975a:	1a98      	subs	r0, r3, r2
 800975c:	6963      	ldr	r3, [r4, #20]
 800975e:	b2f6      	uxtb	r6, r6
 8009760:	4283      	cmp	r3, r0
 8009762:	4637      	mov	r7, r6
 8009764:	dc05      	bgt.n	8009772 <__swbuf_r+0x4e>
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f7ff fa47 	bl	8008bfc <_fflush_r>
 800976e:	2800      	cmp	r0, #0
 8009770:	d1ed      	bne.n	800974e <__swbuf_r+0x2a>
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	3b01      	subs	r3, #1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	701e      	strb	r6, [r3, #0]
 8009780:	6962      	ldr	r2, [r4, #20]
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	429a      	cmp	r2, r3
 8009786:	d004      	beq.n	8009792 <__swbuf_r+0x6e>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	07db      	lsls	r3, r3, #31
 800978c:	d5e1      	bpl.n	8009752 <__swbuf_r+0x2e>
 800978e:	2e0a      	cmp	r6, #10
 8009790:	d1df      	bne.n	8009752 <__swbuf_r+0x2e>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f7ff fa31 	bl	8008bfc <_fflush_r>
 800979a:	2800      	cmp	r0, #0
 800979c:	d0d9      	beq.n	8009752 <__swbuf_r+0x2e>
 800979e:	e7d6      	b.n	800974e <__swbuf_r+0x2a>

080097a0 <__swsetup_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4b29      	ldr	r3, [pc, #164]	@ (8009848 <__swsetup_r+0xa8>)
 80097a4:	4605      	mov	r5, r0
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	460c      	mov	r4, r1
 80097aa:	b118      	cbz	r0, 80097b4 <__swsetup_r+0x14>
 80097ac:	6a03      	ldr	r3, [r0, #32]
 80097ae:	b90b      	cbnz	r3, 80097b4 <__swsetup_r+0x14>
 80097b0:	f7fc fca6 	bl	8006100 <__sinit>
 80097b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b8:	0719      	lsls	r1, r3, #28
 80097ba:	d422      	bmi.n	8009802 <__swsetup_r+0x62>
 80097bc:	06da      	lsls	r2, r3, #27
 80097be:	d407      	bmi.n	80097d0 <__swsetup_r+0x30>
 80097c0:	2209      	movs	r2, #9
 80097c2:	602a      	str	r2, [r5, #0]
 80097c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295
 80097ce:	e033      	b.n	8009838 <__swsetup_r+0x98>
 80097d0:	0758      	lsls	r0, r3, #29
 80097d2:	d512      	bpl.n	80097fa <__swsetup_r+0x5a>
 80097d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097d6:	b141      	cbz	r1, 80097ea <__swsetup_r+0x4a>
 80097d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097dc:	4299      	cmp	r1, r3
 80097de:	d002      	beq.n	80097e6 <__swsetup_r+0x46>
 80097e0:	4628      	mov	r0, r5
 80097e2:	f7fd fbf9 	bl	8006fd8 <_free_r>
 80097e6:	2300      	movs	r3, #0
 80097e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	2300      	movs	r3, #0
 80097f4:	6063      	str	r3, [r4, #4]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f043 0308 	orr.w	r3, r3, #8
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	b94b      	cbnz	r3, 800981a <__swsetup_r+0x7a>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800980c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009810:	d003      	beq.n	800981a <__swsetup_r+0x7a>
 8009812:	4621      	mov	r1, r4
 8009814:	4628      	mov	r0, r5
 8009816:	f000 f883 	bl	8009920 <__smakebuf_r>
 800981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981e:	f013 0201 	ands.w	r2, r3, #1
 8009822:	d00a      	beq.n	800983a <__swsetup_r+0x9a>
 8009824:	2200      	movs	r2, #0
 8009826:	60a2      	str	r2, [r4, #8]
 8009828:	6962      	ldr	r2, [r4, #20]
 800982a:	4252      	negs	r2, r2
 800982c:	61a2      	str	r2, [r4, #24]
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	b942      	cbnz	r2, 8009844 <__swsetup_r+0xa4>
 8009832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009836:	d1c5      	bne.n	80097c4 <__swsetup_r+0x24>
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	0799      	lsls	r1, r3, #30
 800983c:	bf58      	it	pl
 800983e:	6962      	ldrpl	r2, [r4, #20]
 8009840:	60a2      	str	r2, [r4, #8]
 8009842:	e7f4      	b.n	800982e <__swsetup_r+0x8e>
 8009844:	2000      	movs	r0, #0
 8009846:	e7f7      	b.n	8009838 <__swsetup_r+0x98>
 8009848:	20000020 	.word	0x20000020

0800984c <_raise_r>:
 800984c:	291f      	cmp	r1, #31
 800984e:	b538      	push	{r3, r4, r5, lr}
 8009850:	4605      	mov	r5, r0
 8009852:	460c      	mov	r4, r1
 8009854:	d904      	bls.n	8009860 <_raise_r+0x14>
 8009856:	2316      	movs	r3, #22
 8009858:	6003      	str	r3, [r0, #0]
 800985a:	f04f 30ff 	mov.w	r0, #4294967295
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009862:	b112      	cbz	r2, 800986a <_raise_r+0x1e>
 8009864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009868:	b94b      	cbnz	r3, 800987e <_raise_r+0x32>
 800986a:	4628      	mov	r0, r5
 800986c:	f000 f830 	bl	80098d0 <_getpid_r>
 8009870:	4622      	mov	r2, r4
 8009872:	4601      	mov	r1, r0
 8009874:	4628      	mov	r0, r5
 8009876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800987a:	f000 b817 	b.w	80098ac <_kill_r>
 800987e:	2b01      	cmp	r3, #1
 8009880:	d00a      	beq.n	8009898 <_raise_r+0x4c>
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	d103      	bne.n	800988e <_raise_r+0x42>
 8009886:	2316      	movs	r3, #22
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	2001      	movs	r0, #1
 800988c:	e7e7      	b.n	800985e <_raise_r+0x12>
 800988e:	2100      	movs	r1, #0
 8009890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009894:	4620      	mov	r0, r4
 8009896:	4798      	blx	r3
 8009898:	2000      	movs	r0, #0
 800989a:	e7e0      	b.n	800985e <_raise_r+0x12>

0800989c <raise>:
 800989c:	4b02      	ldr	r3, [pc, #8]	@ (80098a8 <raise+0xc>)
 800989e:	4601      	mov	r1, r0
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	f7ff bfd3 	b.w	800984c <_raise_r>
 80098a6:	bf00      	nop
 80098a8:	20000020 	.word	0x20000020

080098ac <_kill_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d07      	ldr	r5, [pc, #28]	@ (80098cc <_kill_r+0x20>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	602b      	str	r3, [r5, #0]
 80098ba:	f7f8 fbdf 	bl	800207c <_kill>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	d102      	bne.n	80098c8 <_kill_r+0x1c>
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	b103      	cbz	r3, 80098c8 <_kill_r+0x1c>
 80098c6:	6023      	str	r3, [r4, #0]
 80098c8:	bd38      	pop	{r3, r4, r5, pc}
 80098ca:	bf00      	nop
 80098cc:	20000484 	.word	0x20000484

080098d0 <_getpid_r>:
 80098d0:	f7f8 bbcc 	b.w	800206c <_getpid>

080098d4 <__swhatbuf_r>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	2900      	cmp	r1, #0
 80098de:	b096      	sub	sp, #88	@ 0x58
 80098e0:	4615      	mov	r5, r2
 80098e2:	461e      	mov	r6, r3
 80098e4:	da0d      	bge.n	8009902 <__swhatbuf_r+0x2e>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098ec:	f04f 0100 	mov.w	r1, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2340      	movne	r3, #64	@ 0x40
 80098f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098f8:	2000      	movs	r0, #0
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	b016      	add	sp, #88	@ 0x58
 8009900:	bd70      	pop	{r4, r5, r6, pc}
 8009902:	466a      	mov	r2, sp
 8009904:	f000 f848 	bl	8009998 <_fstat_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	dbec      	blt.n	80098e6 <__swhatbuf_r+0x12>
 800990c:	9901      	ldr	r1, [sp, #4]
 800990e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009916:	4259      	negs	r1, r3
 8009918:	4159      	adcs	r1, r3
 800991a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991e:	e7eb      	b.n	80098f8 <__swhatbuf_r+0x24>

08009920 <__smakebuf_r>:
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009924:	079d      	lsls	r5, r3, #30
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	d507      	bpl.n	800993c <__smakebuf_r+0x1c>
 800992c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	6123      	str	r3, [r4, #16]
 8009934:	2301      	movs	r3, #1
 8009936:	6163      	str	r3, [r4, #20]
 8009938:	b003      	add	sp, #12
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993c:	ab01      	add	r3, sp, #4
 800993e:	466a      	mov	r2, sp
 8009940:	f7ff ffc8 	bl	80098d4 <__swhatbuf_r>
 8009944:	9f00      	ldr	r7, [sp, #0]
 8009946:	4605      	mov	r5, r0
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	f7fd fbb8 	bl	80070c0 <_malloc_r>
 8009950:	b948      	cbnz	r0, 8009966 <__smakebuf_r+0x46>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	059a      	lsls	r2, r3, #22
 8009958:	d4ee      	bmi.n	8009938 <__smakebuf_r+0x18>
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	e7e2      	b.n	800992c <__smakebuf_r+0xc>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	6020      	str	r0, [r4, #0]
 800996a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009976:	b15b      	cbz	r3, 8009990 <__smakebuf_r+0x70>
 8009978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f81d 	bl	80099bc <_isatty_r>
 8009982:	b128      	cbz	r0, 8009990 <__smakebuf_r+0x70>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	431d      	orrs	r5, r3
 8009994:	81a5      	strh	r5, [r4, #12]
 8009996:	e7cf      	b.n	8009938 <__smakebuf_r+0x18>

08009998 <_fstat_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_fstat_r+0x20>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	f7f8 fbc9 	bl	800213c <_fstat>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d102      	bne.n	80099b4 <_fstat_r+0x1c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b103      	cbz	r3, 80099b4 <_fstat_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	20000484 	.word	0x20000484

080099bc <_isatty_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d06      	ldr	r5, [pc, #24]	@ (80099d8 <_isatty_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7f8 fbc8 	bl	800215c <_isatty>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_isatty_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_isatty_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000484 	.word	0x20000484

080099dc <_init>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	bf00      	nop
 80099e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e2:	bc08      	pop	{r3}
 80099e4:	469e      	mov	lr, r3
 80099e6:	4770      	bx	lr

080099e8 <_fini>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr
