
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009e18  08009e18  0000ae18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a270  0800a270  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a270  0800a270  0000b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a278  0800a278  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a278  0800a278  0000b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a27c  0800a27c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a280  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001dc  0800a45c  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800a45c  0000c4d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138e1  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b9  00000000  00000000  0001faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00022ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d22  00000000  00000000  00023fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a828  00000000  00000000  00024d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001976f  00000000  00000000  0004f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc242  00000000  00000000  00068c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005960  00000000  00000000  00164f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009dfc 	.word	0x08009dfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009dfc 	.word	0x08009dfc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <AirQualityIncicatorInit>:
#include "AirQualityIndicator.h"

static ledRow_t loadConfiguration;

void AirQualityIncicatorInit()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800102a:	2340      	movs	r3, #64	@ 0x40
 800102c:	9308      	str	r3, [sp, #32]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <AirQualityIncicatorInit+0x3c>)
 8001030:	9307      	str	r3, [sp, #28]
 8001032:	2301      	movs	r3, #1
 8001034:	9306      	str	r3, [sp, #24]
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <AirQualityIncicatorInit+0x40>)
 8001038:	9305      	str	r3, [sp, #20]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	9304      	str	r3, [sp, #16]
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001040:	9303      	str	r3, [sp, #12]
 8001042:	2310      	movs	r3, #16
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <AirQualityIncicatorInit+0x48>)
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001050:	2240      	movs	r2, #64	@ 0x40
 8001052:	4907      	ldr	r1, [pc, #28]	@ (8001070 <AirQualityIncicatorInit+0x4c>)
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <AirQualityIncicatorInit+0x50>)
 8001056:	f000 f8a3 	bl	80011a0 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40022000 	.word	0x40022000
 8001068:	40021800 	.word	0x40021800
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	200001f8 	.word	0x200001f8

08001078 <SetIndicatorLEDs>:


void SetIndicatorLEDs(float PPM_Value)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 8001082:	ed97 0a01 	vldr	s0, [r7, #4]
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <SetIndicatorLEDs+0x1c>)
 8001088:	f000 f8bc 	bl	8001204 <LedRowWrite>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001f8 	.word	0x200001f8

08001098 <AlarmInit>:
#include "Buzzer.h"

static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 800109c:	2204      	movs	r2, #4
 800109e:	4903      	ldr	r1, [pc, #12]	@ (80010ac <AlarmInit+0x14>)
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <AlarmInit+0x18>)
 80010a2:	f000 f843 	bl	800112c <Buzzer_init>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	20000228 	.word	0x20000228

080010b4 <AlarmON>:

void AlarmON()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <AlarmON+0x10>)
 80010bc:	f000 f849 	bl	8001152 <BuzzerWritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000228 	.word	0x20000228

080010c8 <AlarmOFF>:

void AlarmOFF()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <AlarmOFF+0x10>)
 80010d0:	f000 f83f 	bl	8001152 <BuzzerWritePin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000228 	.word	0x20000228

080010dc <CreateNewButton>:
 *  Created on: Apr 10, 2024
 *      Author: Marko.Manic
 */
#include "Button.h"

void CreateNewButton(struct Button* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    button_instance->btn_polling_flag = false;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	709a      	strb	r2, [r3, #2]
    button_instance->read_button_flag = false;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
    button_instance->btn_press_detect_flag = false;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	711a      	strb	r2, [r3, #4]
    button_instance->btn_last_state = GPIO_PIN_RESET;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
    button_instance->active_state = GPIO_PIN_SET;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	719a      	strb	r2, [r3, #6]
    button_instance->GPIOx = GPIOx;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	739a      	strb	r2, [r3, #14]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	4613      	mov	r3, r2
 8001138:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	809a      	strh	r2, [r3, #4]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	78fa      	ldrb	r2, [r7, #3]
 8001168:	4619      	mov	r1, r3
 800116a:	f002 fa37 	bl	80035dc <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 800117c:	f000 f8f4 	bl	8001368 <MQ9_GetRawValue>
 8001180:	4603      	mov	r3, r0
 8001182:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f906 	bl	8001398 <MQ9_ConverRaw2Real>
 800118c:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	ee07 3a90 	vmov	s15, r3
}
 8001196:	eeb0 0a67 	vmov.f32	s0, s15
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8b3a      	ldrh	r2, [r7, #24]
 80011c6:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8c3a      	ldrh	r2, [r7, #32]
 80011d2:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d8:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80011de:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011e4:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80011ea:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80011f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LedRowWrite>:


void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 8001210:	edd7 7a00 	vldr	s15, [r7]
 8001214:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001350 <LedRowWrite+0x14c>
 8001218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	dd08      	ble.n	8001234 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f002 f9d5 	bl	80035dc <HAL_GPIO_WritePin>
 8001232:	e007      	b.n	8001244 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	f002 f9cc 	bl	80035dc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 8001244:	edd7 7a00 	vldr	s15, [r7]
 8001248:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001354 <LedRowWrite+0x150>
 800124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	dd08      	ble.n	8001268 <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6898      	ldr	r0, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	f002 f9bb 	bl	80035dc <HAL_GPIO_WritePin>
 8001266:	e007      	b.n	8001278 <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6898      	ldr	r0, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	899b      	ldrh	r3, [r3, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	f002 f9b2 	bl	80035dc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 8001278:	edd7 7a00 	vldr	s15, [r7]
 800127c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001358 <LedRowWrite+0x154>
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	dd08      	ble.n	800129c <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6918      	ldr	r0, [r3, #16]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8a9b      	ldrh	r3, [r3, #20]
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f002 f9a1 	bl	80035dc <HAL_GPIO_WritePin>
 800129a:	e007      	b.n	80012ac <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	f002 f998 	bl	80035dc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800135c <LedRowWrite+0x158>
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd08      	ble.n	80012d0 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6998      	ldr	r0, [r3, #24]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	8b9b      	ldrh	r3, [r3, #28]
 80012c6:	2201      	movs	r2, #1
 80012c8:	4619      	mov	r1, r3
 80012ca:	f002 f987 	bl	80035dc <HAL_GPIO_WritePin>
 80012ce:	e007      	b.n	80012e0 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6998      	ldr	r0, [r3, #24]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	8b9b      	ldrh	r3, [r3, #28]
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	f002 f97e 	bl	80035dc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 80012e0:	edd7 7a00 	vldr	s15, [r7]
 80012e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001360 <LedRowWrite+0x15c>
 80012e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd08      	ble.n	8001304 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a18      	ldr	r0, [r3, #32]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	f002 f96d 	bl	80035dc <HAL_GPIO_WritePin>
 8001302:	e007      	b.n	8001314 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a18      	ldr	r0, [r3, #32]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	f002 f964 	bl	80035dc <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 8001314:	edd7 7a00 	vldr	s15, [r7]
 8001318:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001364 <LedRowWrite+0x160>
 800131c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	dd08      	ble.n	8001338 <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	f002 f953 	bl	80035dc <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 8001336:	e007      	b.n	8001348 <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	f002 f94a 	bl	80035dc <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43c80000 	.word	0x43c80000
 8001354:	44160000 	.word	0x44160000
 8001358:	44960000 	.word	0x44960000
 800135c:	44e10000 	.word	0x44e10000
 8001360:	45160000 	.word	0x45160000
 8001364:	453b8000 	.word	0x453b8000

08001368 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue(/*MQ9_t* MQ9*/)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <MQ9_GetRawValue+0x2c>)
 8001370:	f001 f9d6 	bl	8002720 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	4806      	ldr	r0, [pc, #24]	@ (8001394 <MQ9_GetRawValue+0x2c>)
 800137a:	f001 fa9f 	bl	80028bc <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MQ9_GetRawValue+0x2c>)
 8001380:	f001 fb27 	bl	80029d2 <HAL_ADC_GetValue>
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001388:	88fb      	ldrh	r3, [r7, #6]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000240 	.word	0x20000240

08001398 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MQ9_ConverRaw2Real+0x48>)
 80013a4:	edd3 6a00 	vldr	s13, [r3]
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MQ9_ConverRaw2Real+0x4c>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b2:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c8:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	ee07 3a90 	vmov	s15, r3
}
 80013d2:	eeb0 0a67 	vmov.f32	s0, s15
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20000004 	.word	0x20000004
 80013e4:	20000000 	.word	0x20000000

080013e8 <SignalSystemInit>:
#include "Button.h"

struct Button button;

void SignalSystemInit()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 80013ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013f0:	4902      	ldr	r1, [pc, #8]	@ (80013fc <SignalSystemInit+0x14>)
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <SignalSystemInit+0x18>)
 80013f4:	f7ff fe72 	bl	80010dc <CreateNewButton>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40022000 	.word	0x40022000
 8001400:	20000230 	.word	0x20000230

08001404 <AppInit>:
//Messages for sending
char IdleMSG[] = "Sistem ceka na konfiguraciju:";
char PPM_MSG[] = "PPM = ";

void AppInit()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	AlarmInit();
 8001408:	f7ff fe46 	bl	8001098 <AlarmInit>
	SignalSystemInit();
 800140c:	f7ff ffec 	bl	80013e8 <SignalSystemInit>
	AirQualityIncicatorInit();
 8001410:	f7ff fe08 	bl	8001024 <AirQualityIncicatorInit>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <UART_TransmitString>:
#include "UART.h"

extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7fe ff45 	bl	80002b0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	480e      	ldr	r0, [pc, #56]	@ (800146c <UART_TransmitString+0x54>)
 8001432:	f003 fcf5 	bl	8004e20 <HAL_UART_Transmit>
	char ret[] = "\r\n";
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <UART_TransmitString+0x58>)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	8019      	strh	r1, [r3, #0]
 8001442:	3302      	adds	r3, #2
 8001444:	0c12      	lsrs	r2, r2, #16
 8001446:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)ret, strlen(ret), HAL_MAX_DELAY);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ff2f 	bl	80002b0 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	f107 010c 	add.w	r1, r7, #12
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	4803      	ldr	r0, [pc, #12]	@ (800146c <UART_TransmitString+0x54>)
 8001460:	f003 fcde 	bl	8004e20 <HAL_UART_Transmit>
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002f8 	.word	0x200002f8
 8001470:	08009e18 	.word	0x08009e18

08001474 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b090      	sub	sp, #64	@ 0x40
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff f882 	bl	8000588 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f107 000c 	add.w	r0, r7, #12
 800148c:	490a      	ldr	r1, [pc, #40]	@ (80014b8 <UART_TransmitFloat+0x44>)
 800148e:	f005 f87b 	bl	8006588 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff0a 	bl	80002b0 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <UART_TransmitFloat+0x48>)
 80014aa:	f003 fcb9 	bl	8004e20 <HAL_UART_Transmit>
}
 80014ae:	bf00      	nop
 80014b0:	3740      	adds	r7, #64	@ 0x40
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08009e1c 	.word	0x08009e1c
 80014bc:	200002f8 	.word	0x200002f8

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
float PPM;
bool* MarkoFlag = true;
 80014c6:	2301      	movs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f001 f864 	bl	8002596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f000 f843 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f000 f979 	bl	80017c8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80014d6:	f000 f8af 	bl	8001638 <MX_ADC3_Init>
  MX_CRC_Init();
 80014da:	f000 f8ff 	bl	80016dc <MX_CRC_Init>
  MX_USART1_UART_Init();
 80014de:	f000 f943 	bl	8001768 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80014e2:	f000 f91d 	bl	8001720 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
//  AlarmInit();
//  SignalSystemInit();
  AppInit();
 80014e6:	f7ff ff8d 	bl	8001404 <AppInit>

  HAL_TIM_Base_Start_IT(&htim11);
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <main+0x8c>)
 80014ec:	f003 f9c2 	bl	8004874 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PPM = ReadGasSensor();
 80014f0:	f7ff fe41 	bl	8001176 <ReadGasSensor>
 80014f4:	ed87 0a02 	vstr	s0, [r7, #8]
	  char msg1[] = "PPM = ";
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <main+0x90>)
 80014fa:	463b      	mov	r3, r7
 80014fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001500:	6018      	str	r0, [r3, #0]
 8001502:	3304      	adds	r3, #4
 8001504:	8019      	strh	r1, [r3, #0]
 8001506:	3302      	adds	r3, #2
 8001508:	0c0a      	lsrs	r2, r1, #16
 800150a:	701a      	strb	r2, [r3, #0]
	  UART_TransmitString(msg1);
 800150c:	463b      	mov	r3, r7
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff82 	bl	8001418 <UART_TransmitString>
	  UART_TransmitFloat(PPM);
 8001514:	ed97 0a02 	vldr	s0, [r7, #8]
 8001518:	f7ff ffac 	bl	8001474 <UART_TransmitFloat>
	  if(PPM > 2100)
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001554 <main+0x94>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd02      	ble.n	8001534 <main+0x74>
	  {
		  AlarmON();
 800152e:	f7ff fdc1 	bl	80010b4 <AlarmON>
 8001532:	e001      	b.n	8001538 <main+0x78>
	  }
	  else
	  {
		  AlarmOFF();
 8001534:	f7ff fdc8 	bl	80010c8 <AlarmOFF>
	  }

	  SetIndicatorLEDs(PPM);
 8001538:	ed97 0a02 	vldr	s0, [r7, #8]
 800153c:	f7ff fd9c 	bl	8001078 <SetIndicatorLEDs>
	  HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001544:	f001 f884 	bl	8002650 <HAL_Delay>
  {
 8001548:	e7d2      	b.n	80014f0 <main+0x30>
 800154a:	bf00      	nop
 800154c:	200002ac 	.word	0x200002ac
 8001550:	08009e24 	.word	0x08009e24
 8001554:	45034000 	.word	0x45034000

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	@ 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2230      	movs	r2, #48	@ 0x30
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f005 f871 	bl	800664e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800157c:	f002 f848 	bl	8003610 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <SystemClock_Config+0xd8>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a2a      	ldr	r2, [pc, #168]	@ (8001630 <SystemClock_Config+0xd8>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
 800158c:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <SystemClock_Config+0xd8>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <SystemClock_Config+0xdc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a25      	ldr	r2, [pc, #148]	@ (8001634 <SystemClock_Config+0xdc>)
 800159e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <SystemClock_Config+0xdc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015c4:	2319      	movs	r3, #25
 80015c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80015c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80015cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015d2:	2309      	movs	r3, #9
 80015d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 f878 	bl	80036d0 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015e6:	f000 fd4b 	bl	8002080 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015ea:	f002 f821 	bl	8003630 <HAL_PWREx_EnableOverDrive>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80015f4:	f000 fd44 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001604:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2106      	movs	r1, #6
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fafe 	bl	8003c18 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001622:	f000 fd2d 	bl	8002080 <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	@ 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <MX_ADC3_Init+0x9c>)
 800164e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001652:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001656:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800167a:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <MX_ADC3_Init+0xa0>)
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001686:	2201      	movs	r2, #1
 8001688:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_ADC3_Init+0x98>)
 8001694:	2201      	movs	r2, #1
 8001696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001698:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_ADC3_Init+0x98>)
 800169a:	f000 fffd 	bl	8002698 <HAL_ADC_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 fcec 	bl	8002080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_ADC3_Init+0x98>)
 80016ba:	f001 f997 	bl	80029ec <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80016c4:	f000 fcdc 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000240 	.word	0x20000240
 80016d4:	40012200 	.word	0x40012200
 80016d8:	0f000001 	.word	0x0f000001

080016dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <MX_CRC_Init+0x3c>)
 80016e2:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <MX_CRC_Init+0x40>)
 80016e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_CRC_Init+0x3c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_CRC_Init+0x3c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_CRC_Init+0x3c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_CRC_Init+0x3c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_CRC_Init+0x3c>)
 8001700:	2201      	movs	r2, #1
 8001702:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_CRC_Init+0x3c>)
 8001706:	f001 fcd3 	bl	80030b0 <HAL_CRC_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001710:	f000 fcb6 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000288 	.word	0x20000288
 800171c:	40023000 	.word	0x40023000

08001720 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_TIM11_Init+0x40>)
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <MX_TIM11_Init+0x44>)
 8001728:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <MX_TIM11_Init+0x40>)
 800172c:	f640 026f 	movw	r2, #2159	@ 0x86f
 8001730:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_TIM11_Init+0x40>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_TIM11_Init+0x40>)
 800173a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800173e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <MX_TIM11_Init+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_TIM11_Init+0x40>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_TIM11_Init+0x40>)
 800174e:	f003 f839 	bl	80047c4 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001758:	f000 fc92 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200002ac 	.word	0x200002ac
 8001764:	40014800 	.word	0x40014800

08001768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	@ (80017c4 <MX_USART1_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART1_UART_Init+0x58>)
 80017ac:	f003 faea 	bl	8004d84 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 fc63 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002f8 	.word	0x200002f8
 80017c4:	40011000 	.word	0x40011000

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	@ 0x40
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4baf      	ldr	r3, [pc, #700]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4aae      	ldr	r2, [pc, #696]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4bac      	ldr	r3, [pc, #688]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f6:	4ba9      	ldr	r3, [pc, #676]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4aa8      	ldr	r2, [pc, #672]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4ba6      	ldr	r3, [pc, #664]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4ba3      	ldr	r3, [pc, #652]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4aa2      	ldr	r2, [pc, #648]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4ba0      	ldr	r3, [pc, #640]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	4b9d      	ldr	r3, [pc, #628]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a9c      	ldr	r2, [pc, #624]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b9a      	ldr	r3, [pc, #616]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b97      	ldr	r3, [pc, #604]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a96      	ldr	r2, [pc, #600]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b94      	ldr	r3, [pc, #592]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b91      	ldr	r3, [pc, #580]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a90      	ldr	r2, [pc, #576]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b8e      	ldr	r3, [pc, #568]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800186e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a8a      	ldr	r2, [pc, #552]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001874:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b88      	ldr	r3, [pc, #544]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001886:	4b85      	ldr	r3, [pc, #532]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a84      	ldr	r2, [pc, #528]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b82      	ldr	r3, [pc, #520]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800189e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b6:	4b79      	ldr	r3, [pc, #484]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a78      	ldr	r2, [pc, #480]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b76      	ldr	r3, [pc, #472]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	4b73      	ldr	r3, [pc, #460]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a72      	ldr	r2, [pc, #456]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b70      	ldr	r3, [pc, #448]	@ (8001a9c <MX_GPIO_Init+0x2d4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2110      	movs	r1, #16
 80018ea:	486d      	ldr	r0, [pc, #436]	@ (8001aa0 <MX_GPIO_Init+0x2d8>)
 80018ec:	f001 fe76 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2120      	movs	r1, #32
 80018f4:	486b      	ldr	r0, [pc, #428]	@ (8001aa4 <MX_GPIO_Init+0x2dc>)
 80018f6:	f001 fe71 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210d      	movs	r1, #13
 80018fe:	486a      	ldr	r0, [pc, #424]	@ (8001aa8 <MX_GPIO_Init+0x2e0>)
 8001900:	f001 fe6c 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2108      	movs	r1, #8
 8001908:	4868      	ldr	r0, [pc, #416]	@ (8001aac <MX_GPIO_Init+0x2e4>)
 800190a:	f001 fe67 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001914:	4864      	ldr	r0, [pc, #400]	@ (8001aa8 <MX_GPIO_Init+0x2e0>)
 8001916:	f001 fe61 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001920:	4863      	ldr	r0, [pc, #396]	@ (8001ab0 <MX_GPIO_Init+0x2e8>)
 8001922:	f001 fe5b 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2140      	movs	r1, #64	@ 0x40
 800192a:	4862      	ldr	r0, [pc, #392]	@ (8001ab4 <MX_GPIO_Init+0x2ec>)
 800192c:	f001 fe56 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	21c8      	movs	r1, #200	@ 0xc8
 8001934:	4860      	ldr	r0, [pc, #384]	@ (8001ab8 <MX_GPIO_Init+0x2f0>)
 8001936:	f001 fe51 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800193a:	2310      	movs	r3, #16
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800194a:	230e      	movs	r3, #14
 800194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4859      	ldr	r0, [pc, #356]	@ (8001abc <MX_GPIO_Init+0x2f4>)
 8001956:	f001 fc95 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	4853      	ldr	r0, [pc, #332]	@ (8001abc <MX_GPIO_Init+0x2f4>)
 800196e:	f001 fc89 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001972:	2304      	movs	r3, #4
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001982:	2309      	movs	r3, #9
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	484b      	ldr	r0, [pc, #300]	@ (8001abc <MX_GPIO_Init+0x2f4>)
 800198e:	f001 fc79 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001992:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a4:	230b      	movs	r3, #11
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4842      	ldr	r0, [pc, #264]	@ (8001ab8 <MX_GPIO_Init+0x2f0>)
 80019b0:	f001 fc68 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80019b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c6:	230c      	movs	r3, #12
 80019c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ce:	4619      	mov	r1, r3
 80019d0:	483a      	ldr	r0, [pc, #232]	@ (8001abc <MX_GPIO_Init+0x2f4>)
 80019d2:	f001 fc57 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80019d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e8:	2304      	movs	r3, #4
 80019ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	482b      	ldr	r0, [pc, #172]	@ (8001aa0 <MX_GPIO_Init+0x2d8>)
 80019f4:	f001 fc46 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 80019f8:	2310      	movs	r3, #16
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a00:	2302      	movs	r3, #2
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4824      	ldr	r0, [pc, #144]	@ (8001aa0 <MX_GPIO_Init+0x2d8>)
 8001a10:	f001 fc38 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001a24:	2308      	movs	r3, #8
 8001a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481d      	ldr	r0, [pc, #116]	@ (8001aa4 <MX_GPIO_Init+0x2dc>)
 8001a30:	f001 fc28 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001a34:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a46:	230c      	movs	r3, #12
 8001a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4818      	ldr	r0, [pc, #96]	@ (8001ab4 <MX_GPIO_Init+0x2ec>)
 8001a52:	f001 fc17 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4813      	ldr	r0, [pc, #76]	@ (8001ac0 <MX_GPIO_Init+0x2f8>)
 8001a74:	f001 fc06 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001a78:	2360      	movs	r3, #96	@ 0x60
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a88:	230d      	movs	r3, #13
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <MX_GPIO_Init+0x2f4>)
 8001a94:	f001 fbf6 	bl	8003284 <HAL_GPIO_Init>
 8001a98:	e014      	b.n	8001ac4 <MX_GPIO_Init+0x2fc>
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40022800 	.word	0x40022800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001ac4:	2340      	movs	r3, #64	@ 0x40
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	48bc      	ldr	r0, [pc, #752]	@ (8001dd0 <MX_GPIO_Init+0x608>)
 8001ae0:	f001 fbd0 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001ae4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af6:	230c      	movs	r3, #12
 8001af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	48b4      	ldr	r0, [pc, #720]	@ (8001dd4 <MX_GPIO_Init+0x60c>)
 8001b02:	f001 fbbf 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001b06:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b18:	230e      	movs	r3, #14
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b20:	4619      	mov	r1, r3
 8001b22:	48ad      	ldr	r0, [pc, #692]	@ (8001dd8 <MX_GPIO_Init+0x610>)
 8001b24:	f001 fbae 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	48a6      	ldr	r0, [pc, #664]	@ (8001dd8 <MX_GPIO_Init+0x610>)
 8001b3e:	f001 fba1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b42:	2340      	movs	r3, #64	@ 0x40
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	48a1      	ldr	r0, [pc, #644]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001b58:	f001 fb94 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001b5c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	4898      	ldr	r0, [pc, #608]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001b7a:	f001 fb83 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001b7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b90:	230a      	movs	r3, #10
 8001b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4891      	ldr	r0, [pc, #580]	@ (8001de0 <MX_GPIO_Init+0x618>)
 8001b9c:	f001 fb72 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ba0:	23f0      	movs	r3, #240	@ 0xf0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	488a      	ldr	r0, [pc, #552]	@ (8001de4 <MX_GPIO_Init+0x61c>)
 8001bbc:	f001 fb62 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001bc0:	23f7      	movs	r3, #247	@ 0xf7
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4883      	ldr	r0, [pc, #524]	@ (8001de8 <MX_GPIO_Init+0x620>)
 8001bdc:	f001 fb52 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4875      	ldr	r0, [pc, #468]	@ (8001dd4 <MX_GPIO_Init+0x60c>)
 8001bfe:	f001 fb41 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c14:	230a      	movs	r3, #10
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	486d      	ldr	r0, [pc, #436]	@ (8001dd4 <MX_GPIO_Init+0x60c>)
 8001c20:	f001 fb30 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c24:	2320      	movs	r3, #32
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4868      	ldr	r0, [pc, #416]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001c3c:	f001 fb22 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c40:	2308      	movs	r3, #8
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c50:	230d      	movs	r3, #13
 8001c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4860      	ldr	r0, [pc, #384]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001c5c:	f001 fb12 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8001c60:	230d      	movs	r3, #13
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	485b      	ldr	r0, [pc, #364]	@ (8001de4 <MX_GPIO_Init+0x61c>)
 8001c78:	f001 fb04 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4856      	ldr	r0, [pc, #344]	@ (8001dec <MX_GPIO_Init+0x624>)
 8001c92:	f001 faf7 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001c96:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ca8:	230c      	movs	r3, #12
 8001caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	484f      	ldr	r0, [pc, #316]	@ (8001df0 <MX_GPIO_Init+0x628>)
 8001cb4:	f001 fae6 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001cb8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cca:	230e      	movs	r3, #14
 8001ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4843      	ldr	r0, [pc, #268]	@ (8001de4 <MX_GPIO_Init+0x61c>)
 8001cd6:	f001 fad5 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	483d      	ldr	r0, [pc, #244]	@ (8001de8 <MX_GPIO_Init+0x620>)
 8001cf2:	f001 fac7 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001cf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d08:	230d      	movs	r3, #13
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d10:	4619      	mov	r1, r3
 8001d12:	4830      	ldr	r0, [pc, #192]	@ (8001dd4 <MX_GPIO_Init+0x60c>)
 8001d14:	f001 fab6 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	482c      	ldr	r0, [pc, #176]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001d2c:	f001 faaa 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001d30:	2304      	movs	r3, #4
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d40:	230c      	movs	r3, #12
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4824      	ldr	r0, [pc, #144]	@ (8001ddc <MX_GPIO_Init+0x614>)
 8001d4c:	f001 fa9a 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001d50:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	4823      	ldr	r0, [pc, #140]	@ (8001df4 <MX_GPIO_Init+0x62c>)
 8001d66:	f001 fa8d 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d82:	4619      	mov	r1, r3
 8001d84:	4817      	ldr	r0, [pc, #92]	@ (8001de4 <MX_GPIO_Init+0x61c>)
 8001d86:	f001 fa7d 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	4810      	ldr	r0, [pc, #64]	@ (8001de4 <MX_GPIO_Init+0x61c>)
 8001da4:	f001 fa6e 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001da8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <MX_GPIO_Init+0x62c>)
 8001dc2:	f001 fa5f 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001dc6:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e013      	b.n	8001df8 <MX_GPIO_Init+0x630>
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40022400 	.word	0x40022400
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40022800 	.word	0x40022800
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40021400 	.word	0x40021400
 8001df4:	40021c00 	.word	0x40021c00
 8001df8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e02:	230d      	movs	r3, #13
 8001e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4895      	ldr	r0, [pc, #596]	@ (8002064 <MX_GPIO_Init+0x89c>)
 8001e0e:	f001 fa39 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 8001e12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4890      	ldr	r0, [pc, #576]	@ (8002068 <MX_GPIO_Init+0x8a0>)
 8001e28:	f001 fa2c 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4888      	ldr	r0, [pc, #544]	@ (800206c <MX_GPIO_Init+0x8a4>)
 8001e4a:	f001 fa1b 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001e4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e62:	4619      	mov	r1, r3
 8001e64:	4880      	ldr	r0, [pc, #512]	@ (8002068 <MX_GPIO_Init+0x8a0>)
 8001e66:	f001 fa0d 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	487a      	ldr	r0, [pc, #488]	@ (8002070 <MX_GPIO_Init+0x8a8>)
 8001e86:	f001 f9fd 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8001e8a:	2340      	movs	r3, #64	@ 0x40
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e92:	2302      	movs	r3, #2
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4873      	ldr	r0, [pc, #460]	@ (8002070 <MX_GPIO_Init+0x8a8>)
 8001ea2:	f001 f9ef 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001ea6:	2328      	movs	r3, #40	@ 0x28
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4868      	ldr	r0, [pc, #416]	@ (8002064 <MX_GPIO_Init+0x89c>)
 8001ec2:	f001 f9df 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 8001ec6:	23c0      	movs	r3, #192	@ 0xc0
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eda:	4619      	mov	r1, r3
 8001edc:	4865      	ldr	r0, [pc, #404]	@ (8002074 <MX_GPIO_Init+0x8ac>)
 8001ede:	f001 f9d1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001efa:	4619      	mov	r1, r3
 8001efc:	485c      	ldr	r0, [pc, #368]	@ (8002070 <MX_GPIO_Init+0x8a8>)
 8001efe:	f001 f9c1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f02:	2332      	movs	r3, #50	@ 0x32
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f12:	230b      	movs	r3, #11
 8001f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4854      	ldr	r0, [pc, #336]	@ (8002070 <MX_GPIO_Init+0x8a8>)
 8001f1e:	f001 f9b1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f22:	2304      	movs	r3, #4
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f32:	2309      	movs	r3, #9
 8001f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	484e      	ldr	r0, [pc, #312]	@ (8002078 <MX_GPIO_Init+0x8b0>)
 8001f3e:	f001 f9a1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001f42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f54:	2309      	movs	r3, #9
 8001f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4847      	ldr	r0, [pc, #284]	@ (800207c <MX_GPIO_Init+0x8b4>)
 8001f60:	f001 f990 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f64:	2308      	movs	r3, #8
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	483e      	ldr	r0, [pc, #248]	@ (8002074 <MX_GPIO_Init+0x8ac>)
 8001f7c:	f001 f982 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f80:	2304      	movs	r3, #4
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f84:	2300      	movs	r3, #0
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f90:	4619      	mov	r1, r3
 8001f92:	4838      	ldr	r0, [pc, #224]	@ (8002074 <MX_GPIO_Init+0x8ac>)
 8001f94:	f001 f976 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f98:	2386      	movs	r3, #134	@ 0x86
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa8:	230b      	movs	r3, #11
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	482e      	ldr	r0, [pc, #184]	@ (800206c <MX_GPIO_Init+0x8a4>)
 8001fb4:	f001 f966 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001fb8:	2350      	movs	r3, #80	@ 0x50
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fc8:	230d      	movs	r3, #13
 8001fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4826      	ldr	r0, [pc, #152]	@ (800206c <MX_GPIO_Init+0x8a4>)
 8001fd4:	f001 f956 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001fd8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fea:	2304      	movs	r3, #4
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481b      	ldr	r0, [pc, #108]	@ (8002064 <MX_GPIO_Init+0x89c>)
 8001ff6:	f001 f945 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8001ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800200c:	230a      	movs	r3, #10
 800200e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002014:	4619      	mov	r1, r3
 8002016:	4818      	ldr	r0, [pc, #96]	@ (8002078 <MX_GPIO_Init+0x8b0>)
 8002018:	f001 f934 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 800201c:	2340      	movs	r3, #64	@ 0x40
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002024:	2302      	movs	r3, #2
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002030:	4619      	mov	r1, r3
 8002032:	480c      	ldr	r0, [pc, #48]	@ (8002064 <MX_GPIO_Init+0x89c>)
 8002034:	f001 f926 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002038:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800204a:	2305      	movs	r3, #5
 800204c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	4808      	ldr	r0, [pc, #32]	@ (8002078 <MX_GPIO_Init+0x8b0>)
 8002056:	f001 f915 	bl	8003284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800205a:	bf00      	nop
 800205c:	3740      	adds	r7, #64	@ 0x40
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021c00 	.word	0x40021c00
 8002068:	40022000 	.word	0x40022000
 800206c:	40020000 	.word	0x40020000
 8002070:	40020800 	.word	0x40020800
 8002074:	40021800 	.word	0x40021800
 8002078:	40020400 	.word	0x40020400
 800207c:	40020c00 	.word	0x40020c00

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <Error_Handler+0x8>

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_MspInit+0x4c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <HAL_MspInit+0x4c>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	@ 0x40
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	210f      	movs	r1, #15
 80020c6:	f06f 0001 	mvn.w	r0, #1
 80020ca:	f000 ffba 	bl	8003042 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <HAL_ADC_MspInit+0xa4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d13c      	bne.n	8002178 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020fe:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	4a20      	ldr	r2, [pc, #128]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002104:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002108:	6453      	str	r3, [r2, #68]	@ 0x44
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a1a      	ldr	r2, [pc, #104]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_ADC_MspInit+0xa8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002146:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800214a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214c:	2303      	movs	r3, #3
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	480b      	ldr	r0, [pc, #44]	@ (8002188 <HAL_ADC_MspInit+0xac>)
 800215c:	f001 f892 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002160:	2301      	movs	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002164:	2303      	movs	r3, #3
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	@ (800218c <HAL_ADC_MspInit+0xb0>)
 8002174:	f001 f886 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	@ 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40012200 	.word	0x40012200
 8002184:	40023800 	.word	0x40023800
 8002188:	40021400 	.word	0x40021400
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <HAL_CRC_MspInit+0x38>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10b      	bne.n	80021ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_CRC_MspInit+0x3c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_CRC_MspInit+0x3c>)
 80021a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_CRC_MspInit+0x3c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023000 	.word	0x40023000
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_TIM_Base_MspInit+0x44>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d113      	bne.n	800220a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_TIM_Base_MspInit+0x48>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	201a      	movs	r0, #26
 8002200:	f000 ff1f 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002204:	201a      	movs	r0, #26
 8002206:	f000 ff38 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40014800 	.word	0x40014800
 8002218:	40023800 	.word	0x40023800

0800221c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0ac      	sub	sp, #176	@ 0xb0
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	2284      	movs	r2, #132	@ 0x84
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fa06 	bl	800664e <memset>
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a32      	ldr	r2, [pc, #200]	@ (8002310 <HAL_UART_MspInit+0xf4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d15c      	bne.n	8002306 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800224c:	2340      	movs	r3, #64	@ 0x40
 800224e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002250:	2300      	movs	r3, #0
 8002252:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fec3 	bl	8003fe4 <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002264:	f7ff ff0c 	bl	8002080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	6453      	str	r3, [r2, #68]	@ 0x44
 8002274:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	6313      	str	r3, [r2, #48]	@ 0x30
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_UART_MspInit+0xf8>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c8:	2307      	movs	r3, #7
 80022ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022d2:	4619      	mov	r1, r3
 80022d4:	4810      	ldr	r0, [pc, #64]	@ (8002318 <HAL_UART_MspInit+0xfc>)
 80022d6:	f000 ffd5 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80022da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f4:	2307      	movs	r3, #7
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022fe:	4619      	mov	r1, r3
 8002300:	4806      	ldr	r0, [pc, #24]	@ (800231c <HAL_UART_MspInit+0x100>)
 8002302:	f000 ffbf 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	37b0      	adds	r7, #176	@ 0xb0
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40011000 	.word	0x40011000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400
 800231c:	40020000 	.word	0x40020000

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <NMI_Handler+0x4>

08002328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <HardFault_Handler+0x4>

08002330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <MemManage_Handler+0x4>

08002338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <UsageFault_Handler+0x4>

08002348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002376:	f000 f94b 	bl	8002610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002386:	f002 faed 	bl	8004964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200002ac 	.word	0x200002ac

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_kill>:

int _kill(int pid, int sig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ae:	f004 f9a1 	bl	80066f4 <__errno>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2216      	movs	r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
  return -1;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_exit>:

void _exit (int status)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ffe7 	bl	80023a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <_exit+0x12>

080023da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00a      	b.n	8002402 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ec:	f3af 8000 	nop.w
 80023f0:	4601      	mov	r1, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf0      	blt.n	80023ec <_read+0x12>
  }

  return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e009      	b.n	800243a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	dbf1      	blt.n	8002426 <_write+0x12>
  }
  return len;
 8002442:	687b      	ldr	r3, [r7, #4]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_close>:

int _close(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002474:	605a      	str	r2, [r3, #4]
  return 0;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_isatty>:

int _isatty(int file)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <_sbrk+0x5c>)
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <_sbrk+0x60>)
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <_sbrk+0x64>)
 80024d2:	4a12      	ldr	r2, [pc, #72]	@ (800251c <_sbrk+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d207      	bcs.n	80024f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e4:	f004 f906 	bl	80066f4 <__errno>
 80024e8:	4603      	mov	r3, r0
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e009      	b.n	8002508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <_sbrk+0x64>)
 8002504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20050000 	.word	0x20050000
 8002514:	00000400 	.word	0x00000400
 8002518:	20000380 	.word	0x20000380
 800251c:	200004d8 	.word	0x200004d8

08002520 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <SystemInit+0x20>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <SystemInit+0x20>)
 800252c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800257c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002548:	480d      	ldr	r0, [pc, #52]	@ (8002580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254a:	490e      	ldr	r1, [pc, #56]	@ (8002584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800254c:	4a0e      	ldr	r2, [pc, #56]	@ (8002588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002560:	4c0b      	ldr	r4, [pc, #44]	@ (8002590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800256e:	f7ff ffd7 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f004 f8c5 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7fe ffa3 	bl	80014c0 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002588:	0800a280 	.word	0x0800a280
  ldr r2, =_sbss
 800258c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002590:	200004d4 	.word	0x200004d4

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>

08002596 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259a:	2003      	movs	r0, #3
 800259c:	f000 fd46 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 f805 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a6:	f7ff fd71 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b8:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_InitTick+0x54>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_InitTick+0x58>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd61 	bl	8003096 <HAL_SYSTICK_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00e      	b.n	80025fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	d80a      	bhi.n	80025fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e4:	2200      	movs	r2, #0
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f000 fd29 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f0:	4a06      	ldr	r2, [pc, #24]	@ (800260c <HAL_InitTick+0x5c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000008 	.word	0x20000008
 8002608:	20000010 	.word	0x20000010
 800260c:	2000000c 	.word	0x2000000c

08002610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_IncTick+0x20>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_IncTick+0x24>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4413      	add	r3, r2
 8002620:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <HAL_IncTick+0x24>)
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000010 	.word	0x20000010
 8002634:	20000384 	.word	0x20000384

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000384 	.word	0x20000384

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffde 	bl	8002638 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000010 	.word	0x20000010

08002698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e031      	b.n	8002712 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fd10 	bl	80020dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_ADC_Init+0x84>)
 80026dc:	4013      	ands	r3, r2
 80026de:	f043 0202 	orr.w	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fad6 	bl	8002c98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
 8002702:	e001      	b.n	8002708 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	ffffeefd 	.word	0xffffeefd

08002720 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start+0x1a>
 8002736:	2302      	movs	r3, #2
 8002738:	e0ad      	b.n	8002896 <HAL_ADC_Start+0x176>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d018      	beq.n	8002782 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002760:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <HAL_ADC_Start+0x184>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a50      	ldr	r2, [pc, #320]	@ (80028a8 <HAL_ADC_Start+0x188>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9a      	lsrs	r2, r3, #18
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002774:	e002      	b.n	800277c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b01      	subs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f9      	bne.n	8002776 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d175      	bne.n	800287c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002794:	4b45      	ldr	r3, [pc, #276]	@ (80028ac <HAL_ADC_Start+0x18c>)
 8002796:	4013      	ands	r3, r2
 8002798:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	d106      	bne.n	80027da <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	f023 0206 	bic.w	r2, r3, #6
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027f2:	4b2f      	ldr	r3, [pc, #188]	@ (80028b0 <HAL_ADC_Start+0x190>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d143      	bne.n	8002894 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e03a      	b.n	8002894 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <HAL_ADC_Start+0x194>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10e      	bne.n	8002846 <HAL_ADC_Start+0x126>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002844:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002846:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <HAL_ADC_Start+0x190>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d120      	bne.n	8002894 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <HAL_ADC_Start+0x198>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11b      	bne.n	8002894 <HAL_ADC_Start+0x174>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e00b      	b.n	8002894 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008
 80028a8:	431bde83 	.word	0x431bde83
 80028ac:	fffff8fe 	.word	0xfffff8fe
 80028b0:	40012300 	.word	0x40012300
 80028b4:	40012000 	.word	0x40012000
 80028b8:	40012200 	.word	0x40012200

080028bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d8:	d113      	bne.n	8002902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e8:	d10b      	bne.n	8002902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e063      	b.n	80029ca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002902:	f7ff fe99 	bl	8002638 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002908:	e021      	b.n	800294e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d01d      	beq.n	800294e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_PollForConversion+0x6c>
 8002918:	f7ff fe8e 	bl	8002638 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d212      	bcs.n	800294e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d00b      	beq.n	800294e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e03d      	b.n	80029ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d1d6      	bne.n	800290a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0212 	mvn.w	r2, #18
 8002964:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d123      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11f      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e136      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x28a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d93a      	bls.n	8002a8e <HAL_ADC_ConfigChannel+0xa2>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a20:	d035      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68d9      	ldr	r1, [r3, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	3b1e      	subs	r3, #30
 8002a38:	2207      	movs	r2, #7
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a8d      	ldr	r2, [pc, #564]	@ (8002c84 <HAL_ADC_ConfigChannel+0x298>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10a      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	061a      	lsls	r2, r3, #24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	e035      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4403      	add	r3, r0
 8002a80:	3b1e      	subs	r3, #30
 8002a82:	409a      	lsls	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a8c:	e022      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	400a      	ands	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4403      	add	r3, r0
 8002aca:	409a      	lsls	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b05      	subs	r3, #5
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b05      	subs	r3, #5
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b24:	e04c      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d824      	bhi.n	8002b78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b23      	subs	r3, #35	@ 0x23
 8002b40:	221f      	movs	r2, #31
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	3b23      	subs	r3, #35	@ 0x23
 8002b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b76:	e023      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	@ 0x41
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b41      	subs	r3, #65	@ 0x41
 8002bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a30      	ldr	r2, [pc, #192]	@ (8002c88 <HAL_ADC_ConfigChannel+0x29c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1f4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002bda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002bde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a28      	ldr	r2, [pc, #160]	@ (8002c88 <HAL_ADC_ConfigChannel+0x29c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10f      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d10b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a25      	ldr	r2, [pc, #148]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002bf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bfc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002bfe:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a22      	ldr	r2, [pc, #136]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <HAL_ADC_ConfigChannel+0x29c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d12b      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x280>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <HAL_ADC_ConfigChannel+0x298>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0x23a>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b11      	cmp	r3, #17
 8002c24:	d122      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c2c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002c30:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c32:	4b16      	ldr	r3, [pc, #88]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a15      	ldr	r2, [pc, #84]	@ (8002c8c <HAL_ADC_ConfigChannel+0x2a0>)
 8002c38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_ADC_ConfigChannel+0x298>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_ADC_ConfigChannel+0x2a4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a11      	ldr	r2, [pc, #68]	@ (8002c94 <HAL_ADC_ConfigChannel+0x2a8>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9a      	lsrs	r2, r3, #18
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c5e:	e002      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f9      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	10000012 	.word	0x10000012
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	20000008 	.word	0x20000008
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ca0:	4b78      	ldr	r3, [pc, #480]	@ (8002e84 <ADC_Init+0x1ec>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a77      	ldr	r2, [pc, #476]	@ (8002e84 <ADC_Init+0x1ec>)
 8002ca6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002caa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cac:	4b75      	ldr	r3, [pc, #468]	@ (8002e84 <ADC_Init+0x1ec>)
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4973      	ldr	r1, [pc, #460]	@ (8002e84 <ADC_Init+0x1ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	4a58      	ldr	r2, [pc, #352]	@ (8002e88 <ADC_Init+0x1f0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6899      	ldr	r1, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e00f      	b.n	8002d92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0202 	bic.w	r2, r2, #2
 8002da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	005a      	lsls	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	3b01      	subs	r3, #1
 8002dec:	035a      	lsls	r2, r3, #13
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e007      	b.n	8002e08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	051a      	lsls	r2, r3, #20
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e4a:	025a      	lsls	r2, r3, #9
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	029a      	lsls	r2, r3, #10
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012300 	.word	0x40012300
 8002e88:	0f000001 	.word	0x0f000001

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	05fa0000 	.word	0x05fa0000

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	@ (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	@ (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e054      	b.n	800316c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f5b      	ldrb	r3, [r3, #29]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f85c 	bl	8002190 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	791b      	ldrb	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a22      	ldr	r2, [pc, #136]	@ (8003174 <HAL_CRC_Init+0xc4>)
 80030ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0218 	bic.w	r2, r2, #24
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	e00c      	b.n	800311a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	461a      	mov	r2, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f834 	bl	8003178 <HAL_CRCEx_Polynomial_Set>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e028      	b.n	800316c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	795b      	ldrb	r3, [r3, #5]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	e004      	b.n	8003138 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6912      	ldr	r2, [r2, #16]
 8003136:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	04c11db7 	.word	0x04c11db7

08003178 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003188:	231f      	movs	r3, #31
 800318a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800318c:	bf00      	nop
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	613a      	str	r2, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_CRCEx_Polynomial_Set+0x34>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	d846      	bhi.n	8003240 <HAL_CRCEx_Polynomial_Set+0xc8>
 80031b2:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	08003247 	.word	0x08003247
 80031bc:	08003241 	.word	0x08003241
 80031c0:	08003241 	.word	0x08003241
 80031c4:	08003241 	.word	0x08003241
 80031c8:	08003241 	.word	0x08003241
 80031cc:	08003241 	.word	0x08003241
 80031d0:	08003241 	.word	0x08003241
 80031d4:	08003241 	.word	0x08003241
 80031d8:	08003235 	.word	0x08003235
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003241 	.word	0x08003241
 80031e4:	08003241 	.word	0x08003241
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003241 	.word	0x08003241
 80031f4:	08003241 	.word	0x08003241
 80031f8:	08003229 	.word	0x08003229
 80031fc:	08003241 	.word	0x08003241
 8003200:	08003241 	.word	0x08003241
 8003204:	08003241 	.word	0x08003241
 8003208:	08003241 	.word	0x08003241
 800320c:	08003241 	.word	0x08003241
 8003210:	08003241 	.word	0x08003241
 8003214:	08003241 	.word	0x08003241
 8003218:	0800321d 	.word	0x0800321d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d913      	bls.n	800324a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003226:	e010      	b.n	800324a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b07      	cmp	r3, #7
 800322c:	d90f      	bls.n	800324e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003232:	e00c      	b.n	800324e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	d90b      	bls.n	8003252 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800323e:	e008      	b.n	8003252 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
      break;
 8003244:	e006      	b.n	8003254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003246:	bf00      	nop
 8003248:	e004      	b.n	8003254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003252:	bf00      	nop
  }
  if (status == HAL_OK)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 0118 	bic.w	r1, r3, #24
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e175      	b.n	8003590 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032a4:	2201      	movs	r2, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	f040 8164 	bne.w	800358a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d005      	beq.n	80032da <HAL_GPIO_Init+0x56>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d130      	bne.n	800333c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b03      	cmp	r3, #3
 8003346:	d017      	beq.n	8003378 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d123      	bne.n	80033cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	69b9      	ldr	r1, [r7, #24]
 80033c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80be 	beq.w	800358a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	4b66      	ldr	r3, [pc, #408]	@ (80035a8 <HAL_GPIO_Init+0x324>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	4a65      	ldr	r2, [pc, #404]	@ (80035a8 <HAL_GPIO_Init+0x324>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003418:	6453      	str	r3, [r2, #68]	@ 0x44
 800341a:	4b63      	ldr	r3, [pc, #396]	@ (80035a8 <HAL_GPIO_Init+0x324>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003426:	4a61      	ldr	r2, [pc, #388]	@ (80035ac <HAL_GPIO_Init+0x328>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a58      	ldr	r2, [pc, #352]	@ (80035b0 <HAL_GPIO_Init+0x32c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d037      	beq.n	80034c2 <HAL_GPIO_Init+0x23e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a57      	ldr	r2, [pc, #348]	@ (80035b4 <HAL_GPIO_Init+0x330>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d031      	beq.n	80034be <HAL_GPIO_Init+0x23a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <HAL_GPIO_Init+0x236>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a55      	ldr	r2, [pc, #340]	@ (80035bc <HAL_GPIO_Init+0x338>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d025      	beq.n	80034b6 <HAL_GPIO_Init+0x232>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a54      	ldr	r2, [pc, #336]	@ (80035c0 <HAL_GPIO_Init+0x33c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <HAL_GPIO_Init+0x22e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a53      	ldr	r2, [pc, #332]	@ (80035c4 <HAL_GPIO_Init+0x340>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d019      	beq.n	80034ae <HAL_GPIO_Init+0x22a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	@ (80035c8 <HAL_GPIO_Init+0x344>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_GPIO_Init+0x226>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a51      	ldr	r2, [pc, #324]	@ (80035cc <HAL_GPIO_Init+0x348>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00d      	beq.n	80034a6 <HAL_GPIO_Init+0x222>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a50      	ldr	r2, [pc, #320]	@ (80035d0 <HAL_GPIO_Init+0x34c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x21e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4f      	ldr	r2, [pc, #316]	@ (80035d4 <HAL_GPIO_Init+0x350>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_GPIO_Init+0x21a>
 800349a:	2309      	movs	r3, #9
 800349c:	e012      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 800349e:	230a      	movs	r3, #10
 80034a0:	e010      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034a2:	2308      	movs	r3, #8
 80034a4:	e00e      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e00c      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034aa:	2306      	movs	r3, #6
 80034ac:	e00a      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034ae:	2305      	movs	r3, #5
 80034b0:	e008      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e006      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034b6:	2303      	movs	r3, #3
 80034b8:	e004      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e002      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034c2:	2300      	movs	r3, #0
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	4093      	lsls	r3, r2
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034d4:	4935      	ldr	r1, [pc, #212]	@ (80035ac <HAL_GPIO_Init+0x328>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e2:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003506:	4a34      	ldr	r2, [pc, #208]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800350c:	4b32      	ldr	r3, [pc, #200]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003530:	4a29      	ldr	r2, [pc, #164]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003536:	4b28      	ldr	r3, [pc, #160]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355a:	4a1f      	ldr	r2, [pc, #124]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003584:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <HAL_GPIO_Init+0x354>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3301      	adds	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	f67f ae86 	bls.w	80032a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40020c00 	.word	0x40020c00
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40021400 	.word	0x40021400
 80035c8:	40021800 	.word	0x40021800
 80035cc:	40021c00 	.word	0x40021c00
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40022400 	.word	0x40022400
 80035d8:	40013c00 	.word	0x40013c00

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035f8:	e003      	b.n	8003602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	041a      	lsls	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	619a      	str	r2, [r3, #24]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	@ (800362c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40007000 	.word	0x40007000

08003630 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4a22      	ldr	r2, [pc, #136]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6413      	str	r3, [r2, #64]	@ 0x40
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365e:	f7fe ffeb 	bl	8002638 <HAL_GetTick>
 8003662:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003664:	e009      	b.n	800367a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003666:	f7fe ffe7 	bl	8002638 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003674:	d901      	bls.n	800367a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e022      	b.n	80036c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800367a:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d1ee      	bne.n	8003666 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003688:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0f      	ldr	r2, [pc, #60]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003692:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003694:	f7fe ffd0 	bl	8002638 <HAL_GetTick>
 8003698:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800369a:	e009      	b.n	80036b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800369c:	f7fe ffcc 	bl	8002638 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036aa:	d901      	bls.n	80036b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e007      	b.n	80036c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036bc:	d1ee      	bne.n	800369c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e291      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8087 	beq.w	8003802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b96      	ldr	r3, [pc, #600]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003700:	4b93      	ldr	r3, [pc, #588]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d112      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
 800370c:	4b90      	ldr	r3, [pc, #576]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003718:	d10b      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371a:	4b8d      	ldr	r3, [pc, #564]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d06c      	beq.n	8003800 <HAL_RCC_OscConfig+0x130>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d168      	bne.n	8003800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e26b      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x7a>
 800373c:	4b84      	ldr	r3, [pc, #528]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a83      	ldr	r2, [pc, #524]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e02e      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x9c>
 8003752:	4b7f      	ldr	r3, [pc, #508]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7e      	ldr	r2, [pc, #504]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7b      	ldr	r2, [pc, #492]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e01d      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0xc0>
 8003776:	4b76      	ldr	r3, [pc, #472]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b73      	ldr	r3, [pc, #460]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a72      	ldr	r2, [pc, #456]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 8003790:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe ff42 	bl	8002638 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe ff3e 	bl	8002638 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	@ 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e21f      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b61      	ldr	r3, [pc, #388]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe8>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe ff2e 	bl	8002638 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe ff2a 	bl	8002638 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e20b      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	4b57      	ldr	r3, [pc, #348]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x110>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d069      	beq.n	80038e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380e:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381a:	4b4d      	ldr	r3, [pc, #308]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x190>
 8003826:	4b4a      	ldr	r3, [pc, #296]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_RCC_OscConfig+0x17a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1df      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b41      	ldr	r3, [pc, #260]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	493d      	ldr	r1, [pc, #244]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	e040      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a38      	ldr	r2, [pc, #224]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe fee0 	bl	8002638 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe fedc 	bl	8002638 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1bd      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b30      	ldr	r3, [pc, #192]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b2d      	ldr	r3, [pc, #180]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4929      	ldr	r1, [pc, #164]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
 80038ae:	e018      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe febc 	bl	8002638 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fe feb8 	bl	8002638 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e199      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d038      	beq.n	8003960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fa:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fe fe99 	bl	8002638 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390a:	f7fe fe95 	bl	8002638 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e176      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x23a>
 8003928:	e01a      	b.n	8003960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <HAL_RCC_OscConfig+0x280>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fe fe7f 	bl	8002638 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393e:	f7fe fe7b 	bl	8002638 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d903      	bls.n	8003954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e15c      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
 8003950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	4b91      	ldr	r3, [pc, #580]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a4 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a87      	ldr	r2, [pc, #540]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
 8003986:	4b85      	ldr	r3, [pc, #532]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003996:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d118      	bne.n	80039d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ae:	f7fe fe43 	bl	8002638 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fe fe3f 	bl	8002638 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	@ 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e120      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c8:	4b75      	ldr	r3, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x31a>
 80039dc:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e8:	e02d      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x33c>
 80039f2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	4a69      	ldr	r2, [pc, #420]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fe:	4b67      	ldr	r3, [pc, #412]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a66      	ldr	r2, [pc, #408]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	e01c      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCC_OscConfig+0x35e>
 8003a14:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a18:	4a60      	ldr	r2, [pc, #384]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a20:	4b5e      	ldr	r3, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	4a5d      	ldr	r2, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2c:	e00b      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	4a5a      	ldr	r2, [pc, #360]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a3a:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d015      	beq.n	8003a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fdf3 	bl	8002638 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe fdef 	bl	8002638 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0ce      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCC_OscConfig+0x386>
 8003a78:	e014      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fddd 	bl	8002638 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe fdd9 	bl	8002638 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	4b40      	ldr	r3, [pc, #256]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ee      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	4a3b      	ldr	r2, [pc, #236]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a4 	beq.w	8003c08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac0:	4b36      	ldr	r3, [pc, #216]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d06b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d149      	bne.n	8003b68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b31      	ldr	r3, [pc, #196]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fdaa 	bl	8002638 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fda6 	bl	8002638 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e087      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fd7a 	bl	8002638 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fd76 	bl	8002638 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e057      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x478>
 8003b66:	e04f      	b.n	8003c08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe fd60 	bl	8002638 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe fd5c 	bl	8002638 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03d      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4ac>
 8003b9a:	e035      	b.n	8003c08 <HAL_RCC_OscConfig+0x538>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x544>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d028      	beq.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d121      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11a      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d111      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0d0      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b6a      	ldr	r3, [pc, #424]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b67      	ldr	r3, [pc, #412]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	4965      	ldr	r1, [pc, #404]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b63      	ldr	r3, [pc, #396]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b8      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	4b59      	ldr	r3, [pc, #356]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c90:	4b53      	ldr	r3, [pc, #332]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a52      	ldr	r2, [pc, #328]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b50      	ldr	r3, [pc, #320]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	494d      	ldr	r1, [pc, #308]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d040      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b47      	ldr	r3, [pc, #284]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e07f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b41      	ldr	r3, [pc, #260]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e073      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3d      	ldr	r3, [pc, #244]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4936      	ldr	r1, [pc, #216]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fe fc94 	bl	8002638 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fe fc90 	bl	8002638 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e053      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d210      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b24      	ldr	r3, [pc, #144]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 020f 	bic.w	r2, r3, #15
 8003d52:	4922      	ldr	r1, [pc, #136]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e032      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4916      	ldr	r1, [pc, #88]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d96:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	490e      	ldr	r1, [pc, #56]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003daa:	f000 f821 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	490a      	ldr	r1, [pc, #40]	@ (8003de4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a09      	ldr	r2, [pc, #36]	@ (8003de8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dc6:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_ClockConfig+0x1d4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fbf0 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023c00 	.word	0x40023c00
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08009e2c 	.word	0x08009e2c
 8003de8:	20000008 	.word	0x20000008
 8003dec:	2000000c 	.word	0x2000000c

08003df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df4:	b090      	sub	sp, #64	@ 0x40
 8003df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e00:	2300      	movs	r3, #0
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e08:	4b59      	ldr	r3, [pc, #356]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d00d      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x40>
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	f200 80a1 	bhi.w	8003f5c <HAL_RCC_GetSysClockFreq+0x16c>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x34>
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e22:	e09b      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b53      	ldr	r3, [pc, #332]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e28:	e09b      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e2a:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e2e:	e098      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e30:	4b4f      	ldr	r3, [pc, #316]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d028      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e46:	4b4a      	ldr	r3, [pc, #296]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e5c:	fb03 f201 	mul.w	r2, r3, r1
 8003e60:	2300      	movs	r3, #0
 8003e62:	fb00 f303 	mul.w	r3, r0, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	4a43      	ldr	r2, [pc, #268]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e70:	460a      	mov	r2, r1
 8003e72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e76:	4413      	add	r3, r2
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	61fa      	str	r2, [r7, #28]
 8003e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e8a:	f7fc ff1d 	bl	8000cc8 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4613      	mov	r3, r2
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e96:	e053      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e98:	4b35      	ldr	r3, [pc, #212]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	617a      	str	r2, [r7, #20]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eaa:	f04f 0b00 	mov.w	fp, #0
 8003eae:	4652      	mov	r2, sl
 8003eb0:	465b      	mov	r3, fp
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	ebb2 080a 	subs.w	r8, r2, sl
 8003eca:	eb63 090b 	sbc.w	r9, r3, fp
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ede:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ee2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ee6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	00eb      	lsls	r3, r5, #3
 8003ef4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef8:	00e2      	lsls	r2, r4, #3
 8003efa:	4614      	mov	r4, r2
 8003efc:	461d      	mov	r5, r3
 8003efe:	eb14 030a 	adds.w	r3, r4, sl
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	eb45 030b 	adc.w	r3, r5, fp
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f16:	4629      	mov	r1, r5
 8003f18:	028b      	lsls	r3, r1, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f20:	4621      	mov	r1, r4
 8003f22:	028a      	lsls	r2, r1, #10
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	60fa      	str	r2, [r7, #12]
 8003f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f34:	f7fc fec8 	bl	8000cc8 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3740      	adds	r7, #64	@ 0x40
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	017d7840 	.word	0x017d7840

08003f7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f80:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000008 	.word	0x20000008

08003f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f98:	f7ff fff0 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	@ (8003fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08009e3c 	.word	0x08009e3c

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fc0:	f7ff ffdc 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	0b5b      	lsrs	r3, r3, #13
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4903      	ldr	r1, [pc, #12]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08009e3c 	.word	0x08009e3c

08003fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800400c:	4b69      	ldr	r3, [pc, #420]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a68      	ldr	r2, [pc, #416]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004016:	6093      	str	r3, [r2, #8]
 8004018:	4b66      	ldr	r3, [pc, #408]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	4964      	ldr	r1, [pc, #400]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800403e:	4b5d      	ldr	r3, [pc, #372]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004044:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404c:	4959      	ldr	r1, [pc, #356]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405c:	d101      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d017      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800407a:	4b4e      	ldr	r3, [pc, #312]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	494a      	ldr	r1, [pc, #296]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 808b 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	4a39      	ldr	r2, [pc, #228]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d4:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040e0:	4b35      	ldr	r3, [pc, #212]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a34      	ldr	r2, [pc, #208]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fe faa4 	bl	8002638 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f4:	f7fe faa0 	bl	8002638 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e357      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004106:	4b2c      	ldr	r3, [pc, #176]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004112:	4b28      	ldr	r3, [pc, #160]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d035      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	429a      	cmp	r2, r3
 800412e:	d02e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004130:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004138:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413a:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	4a1d      	ldr	r2, [pc, #116]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004146:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	4a1a      	ldr	r2, [pc, #104]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004150:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004152:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004158:	4b16      	ldr	r3, [pc, #88]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d114      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fa68 	bl	8002638 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fa64 	bl	8002638 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e319      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ee      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800419a:	d111      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041aa:	400b      	ands	r3, r1
 80041ac:	4901      	ldr	r1, [pc, #4]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
 80041b2:	e00b      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	0ffffcff 	.word	0x0ffffcff
 80041c0:	4baa      	ldr	r3, [pc, #680]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4aa9      	ldr	r2, [pc, #676]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80041ca:	6093      	str	r3, [r2, #8]
 80041cc:	4ba7      	ldr	r3, [pc, #668]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	49a4      	ldr	r1, [pc, #656]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d010      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041ea:	4ba0      	ldr	r3, [pc, #640]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f0:	4a9e      	ldr	r2, [pc, #632]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80041fa:	4b9c      	ldr	r3, [pc, #624]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	4999      	ldr	r1, [pc, #612]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004218:	4b94      	ldr	r3, [pc, #592]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004226:	4991      	ldr	r1, [pc, #580]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800423a:	4b8c      	ldr	r3, [pc, #560]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004248:	4988      	ldr	r1, [pc, #544]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425c:	4b83      	ldr	r3, [pc, #524]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426a:	4980      	ldr	r1, [pc, #512]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800427e:	4b7b      	ldr	r3, [pc, #492]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	4977      	ldr	r1, [pc, #476]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a0:	4b72      	ldr	r3, [pc, #456]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	496f      	ldr	r1, [pc, #444]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c2:	4b6a      	ldr	r3, [pc, #424]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	f023 020c 	bic.w	r2, r3, #12
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	4966      	ldr	r1, [pc, #408]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e4:	4b61      	ldr	r3, [pc, #388]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	495e      	ldr	r1, [pc, #376]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004306:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	4955      	ldr	r1, [pc, #340]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	494d      	ldr	r1, [pc, #308]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800434a:	4b48      	ldr	r3, [pc, #288]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004350:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	4944      	ldr	r1, [pc, #272]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800436c:	4b3f      	ldr	r3, [pc, #252]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004372:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437a:	493c      	ldr	r1, [pc, #240]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800438e:	4b37      	ldr	r3, [pc, #220]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439c:	4933      	ldr	r1, [pc, #204]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043b0:	4b2e      	ldr	r3, [pc, #184]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043be:	492b      	ldr	r1, [pc, #172]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043d2:	4b26      	ldr	r3, [pc, #152]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e0:	4922      	ldr	r1, [pc, #136]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004412:	4b16      	ldr	r3, [pc, #88]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004420:	4912      	ldr	r1, [pc, #72]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004434:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004444:	4909      	ldr	r1, [pc, #36]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d006      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80d9 	beq.w	8004612 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004460:	4b02      	ldr	r3, [pc, #8]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a01      	ldr	r2, [pc, #4]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800446c:	40023800 	.word	0x40023800
 8004470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004472:	f7fe f8e1 	bl	8002638 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800447a:	f7fe f8dd 	bl	8002638 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	@ 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e194      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800448c:	4b6c      	ldr	r3, [pc, #432]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d021      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d11d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044ac:	4b64      	ldr	r3, [pc, #400]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ba:	4b61      	ldr	r3, [pc, #388]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c0:	0e1b      	lsrs	r3, r3, #24
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	019a      	lsls	r2, r3, #6
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	4957      	ldr	r1, [pc, #348]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02e      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004512:	d129      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004514:	4b4a      	ldr	r3, [pc, #296]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004522:	4b47      	ldr	r3, [pc, #284]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	0f1b      	lsrs	r3, r3, #28
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	019a      	lsls	r2, r3, #6
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	071b      	lsls	r3, r3, #28
 8004548:	493d      	ldr	r1, [pc, #244]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004550:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004556:	f023 021f 	bic.w	r2, r3, #31
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	3b01      	subs	r3, #1
 8004560:	4937      	ldr	r1, [pc, #220]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004574:	4b32      	ldr	r3, [pc, #200]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457a:	0e1b      	lsrs	r3, r3, #24
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004582:	4b2f      	ldr	r3, [pc, #188]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004588:	0f1b      	lsrs	r3, r3, #28
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	019a      	lsls	r2, r3, #6
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	431a      	orrs	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	071b      	lsls	r3, r3, #28
 80045a8:	4925      	ldr	r1, [pc, #148]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d011      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	019a      	lsls	r2, r3, #6
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	071b      	lsls	r3, r3, #28
 80045d8:	4919      	ldr	r1, [pc, #100]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045e0:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a16      	ldr	r2, [pc, #88]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fe f824 	bl	8002638 <HAL_GetTick>
 80045f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045f4:	f7fe f820 	bl	8002638 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0d7      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004606:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b01      	cmp	r3, #1
 8004616:	f040 80cd 	bne.w	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800461a:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fe f807 	bl	8002638 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800462e:	f7fe f803 	bl	8002638 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	@ 0x64
 800463a:	d903      	bls.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0ba      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004640:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004644:	4b5e      	ldr	r3, [pc, #376]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800464c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004650:	d0ed      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02e      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d12a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800467a:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004688:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	0f1b      	lsrs	r3, r3, #28
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	019a      	lsls	r2, r3, #6
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	071b      	lsls	r3, r3, #28
 80046ae:	4944      	ldr	r1, [pc, #272]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046b6:	4b42      	ldr	r3, [pc, #264]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	493d      	ldr	r1, [pc, #244]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d022      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e4:	d11d      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046e6:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	0e1b      	lsrs	r3, r3, #24
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046f4:	4b32      	ldr	r3, [pc, #200]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	0f1b      	lsrs	r3, r3, #28
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	019a      	lsls	r2, r3, #6
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	071b      	lsls	r3, r3, #28
 800471a:	4929      	ldr	r1, [pc, #164]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d028      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800472e:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	0e1b      	lsrs	r3, r3, #24
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800473c:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	019a      	lsls	r2, r3, #6
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	431a      	orrs	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	071b      	lsls	r3, r3, #28
 8004762:	4917      	ldr	r1, [pc, #92]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800476a:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004770:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	4911      	ldr	r1, [pc, #68]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004780:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0e      	ldr	r2, [pc, #56]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fd ff54 	bl	8002638 <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004794:	f7fd ff50 	bl	8002638 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e007      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b2:	d1ef      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e049      	b.n	800486a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fcf0 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fa00 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d001      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e054      	b.n	8004936 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a26      	ldr	r2, [pc, #152]	@ (8004944 <HAL_TIM_Base_Start_IT+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d022      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b6:	d01d      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a22      	ldr	r2, [pc, #136]	@ (8004948 <HAL_TIM_Base_Start_IT+0xd4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d018      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	@ (800494c <HAL_TIM_Base_Start_IT+0xd8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004950 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00e      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1e      	ldr	r2, [pc, #120]	@ (8004954 <HAL_TIM_Base_Start_IT+0xe0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d009      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004958 <HAL_TIM_Base_Start_IT+0xe4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x80>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1b      	ldr	r2, [pc, #108]	@ (800495c <HAL_TIM_Base_Start_IT+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d115      	bne.n	8004920 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HAL_TIM_Base_Start_IT+0xec>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b06      	cmp	r3, #6
 8004904:	d015      	beq.n	8004932 <HAL_TIM_Base_Start_IT+0xbe>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d011      	beq.n	8004932 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491e:	e008      	b.n	8004932 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e000      	b.n	8004934 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40010400 	.word	0x40010400
 8004958:	40014000 	.word	0x40014000
 800495c:	40001800 	.word	0x40001800
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0202 	mvn.w	r2, #2
 8004990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f90f 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f901 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f912 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0204 	mvn.w	r2, #4
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8e5 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8d7 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8e8 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0208 	mvn.w	r2, #8
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8bb 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8ad 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8be 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0210 	mvn.w	r2, #16
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2208      	movs	r2, #8
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f891 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f883 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f894 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0201 	mvn.w	r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f85d 	bl	8004ba2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b80      	cmp	r3, #128	@ 0x80
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f924 	bl	8004d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b80      	cmp	r3, #128	@ 0x80
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f917 	bl	8004d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b40      	cmp	r3, #64	@ 0x40
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f842 	bl	8004bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0220 	mvn.w	r2, #32
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8d7 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a40      	ldr	r2, [pc, #256]	@ (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3a      	ldr	r2, [pc, #232]	@ (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c68:	d027      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d023      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2b      	ldr	r2, [pc, #172]	@ (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <TIM_Base_SetConfig+0x128>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a27      	ldr	r2, [pc, #156]	@ (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <TIM_Base_SetConfig+0x130>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	@ (8004d3c <TIM_Base_SetConfig+0x134>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a24      	ldr	r2, [pc, #144]	@ (8004d40 <TIM_Base_SetConfig+0x138>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	@ (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <TIM_Base_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8004d2c <TIM_Base_SetConfig+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	40001c00 	.word	0x40001c00
 8004d44:	40002000 	.word	0x40002000

08004d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e040      	b.n	8004e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fd fa38 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2224      	movs	r2, #36	@ 0x24
 8004db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8b0 	bl	8004f28 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fb08 	bl	80053f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fb8f 	bl	8005534 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	@ 0x28
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d171      	bne.n	8004f1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Transmit+0x24>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e06a      	b.n	8004f1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2221      	movs	r2, #33	@ 0x21
 8004e54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e56:	f7fd fbef 	bl	8002638 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e74:	d108      	bne.n	8004e88 <HAL_UART_Transmit+0x68>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e003      	b.n	8004e90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e90:	e02c      	b.n	8004eec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2180      	movs	r1, #128	@ 0x80
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fb80 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e038      	b.n	8004f1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e007      	b.n	8004eda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1cc      	bne.n	8004e92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2200      	movs	r2, #0
 8004f00:	2140      	movs	r1, #64	@ 0x40
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fb4d 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e005      	b.n	8004f1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3720      	adds	r7, #32
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4ba6      	ldr	r3, [pc, #664]	@ (80051ec <UART_SetConfig+0x2c4>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a94      	ldr	r2, [pc, #592]	@ (80051f0 <UART_SetConfig+0x2c8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d120      	bne.n	8004fe6 <UART_SetConfig+0xbe>
 8004fa4:	4b93      	ldr	r3, [pc, #588]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d816      	bhi.n	8004fe0 <UART_SetConfig+0xb8>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0x90>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd5 	.word	0x08004fd5
 8004fc0:	08004fcf 	.word	0x08004fcf
 8004fc4:	08004fdb 	.word	0x08004fdb
 8004fc8:	2301      	movs	r3, #1
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e150      	b.n	8005270 <UART_SetConfig+0x348>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e14d      	b.n	8005270 <UART_SetConfig+0x348>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e14a      	b.n	8005270 <UART_SetConfig+0x348>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e147      	b.n	8005270 <UART_SetConfig+0x348>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e144      	b.n	8005270 <UART_SetConfig+0x348>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a83      	ldr	r2, [pc, #524]	@ (80051f8 <UART_SetConfig+0x2d0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d132      	bne.n	8005056 <UART_SetConfig+0x12e>
 8004ff0:	4b80      	ldr	r3, [pc, #512]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d828      	bhi.n	8005050 <UART_SetConfig+0x128>
 8004ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0xdc>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	08005039 	.word	0x08005039
 8005008:	08005051 	.word	0x08005051
 800500c:	08005051 	.word	0x08005051
 8005010:	08005051 	.word	0x08005051
 8005014:	08005045 	.word	0x08005045
 8005018:	08005051 	.word	0x08005051
 800501c:	08005051 	.word	0x08005051
 8005020:	08005051 	.word	0x08005051
 8005024:	0800503f 	.word	0x0800503f
 8005028:	08005051 	.word	0x08005051
 800502c:	08005051 	.word	0x08005051
 8005030:	08005051 	.word	0x08005051
 8005034:	0800504b 	.word	0x0800504b
 8005038:	2300      	movs	r3, #0
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e118      	b.n	8005270 <UART_SetConfig+0x348>
 800503e:	2302      	movs	r3, #2
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e115      	b.n	8005270 <UART_SetConfig+0x348>
 8005044:	2304      	movs	r3, #4
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e112      	b.n	8005270 <UART_SetConfig+0x348>
 800504a:	2308      	movs	r3, #8
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e10f      	b.n	8005270 <UART_SetConfig+0x348>
 8005050:	2310      	movs	r3, #16
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e10c      	b.n	8005270 <UART_SetConfig+0x348>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a68      	ldr	r2, [pc, #416]	@ (80051fc <UART_SetConfig+0x2d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d120      	bne.n	80050a2 <UART_SetConfig+0x17a>
 8005060:	4b64      	ldr	r3, [pc, #400]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800506a:	2b30      	cmp	r3, #48	@ 0x30
 800506c:	d013      	beq.n	8005096 <UART_SetConfig+0x16e>
 800506e:	2b30      	cmp	r3, #48	@ 0x30
 8005070:	d814      	bhi.n	800509c <UART_SetConfig+0x174>
 8005072:	2b20      	cmp	r3, #32
 8005074:	d009      	beq.n	800508a <UART_SetConfig+0x162>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d810      	bhi.n	800509c <UART_SetConfig+0x174>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0x15c>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d006      	beq.n	8005090 <UART_SetConfig+0x168>
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x174>
 8005084:	2300      	movs	r3, #0
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e0f2      	b.n	8005270 <UART_SetConfig+0x348>
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e0ef      	b.n	8005270 <UART_SetConfig+0x348>
 8005090:	2304      	movs	r3, #4
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e0ec      	b.n	8005270 <UART_SetConfig+0x348>
 8005096:	2308      	movs	r3, #8
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e0e9      	b.n	8005270 <UART_SetConfig+0x348>
 800509c:	2310      	movs	r3, #16
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e0e6      	b.n	8005270 <UART_SetConfig+0x348>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a56      	ldr	r2, [pc, #344]	@ (8005200 <UART_SetConfig+0x2d8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d120      	bne.n	80050ee <UART_SetConfig+0x1c6>
 80050ac:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b8:	d013      	beq.n	80050e2 <UART_SetConfig+0x1ba>
 80050ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80050bc:	d814      	bhi.n	80050e8 <UART_SetConfig+0x1c0>
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d009      	beq.n	80050d6 <UART_SetConfig+0x1ae>
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d810      	bhi.n	80050e8 <UART_SetConfig+0x1c0>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <UART_SetConfig+0x1a8>
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d006      	beq.n	80050dc <UART_SetConfig+0x1b4>
 80050ce:	e00b      	b.n	80050e8 <UART_SetConfig+0x1c0>
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e0cc      	b.n	8005270 <UART_SetConfig+0x348>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e0c9      	b.n	8005270 <UART_SetConfig+0x348>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e0c6      	b.n	8005270 <UART_SetConfig+0x348>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e0c3      	b.n	8005270 <UART_SetConfig+0x348>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e0c0      	b.n	8005270 <UART_SetConfig+0x348>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a44      	ldr	r2, [pc, #272]	@ (8005204 <UART_SetConfig+0x2dc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d125      	bne.n	8005144 <UART_SetConfig+0x21c>
 80050f8:	4b3e      	ldr	r3, [pc, #248]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005106:	d017      	beq.n	8005138 <UART_SetConfig+0x210>
 8005108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510c:	d817      	bhi.n	800513e <UART_SetConfig+0x216>
 800510e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005112:	d00b      	beq.n	800512c <UART_SetConfig+0x204>
 8005114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005118:	d811      	bhi.n	800513e <UART_SetConfig+0x216>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <UART_SetConfig+0x1fe>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005122:	d006      	beq.n	8005132 <UART_SetConfig+0x20a>
 8005124:	e00b      	b.n	800513e <UART_SetConfig+0x216>
 8005126:	2300      	movs	r3, #0
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e0a1      	b.n	8005270 <UART_SetConfig+0x348>
 800512c:	2302      	movs	r3, #2
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e09e      	b.n	8005270 <UART_SetConfig+0x348>
 8005132:	2304      	movs	r3, #4
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e09b      	b.n	8005270 <UART_SetConfig+0x348>
 8005138:	2308      	movs	r3, #8
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e098      	b.n	8005270 <UART_SetConfig+0x348>
 800513e:	2310      	movs	r3, #16
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e095      	b.n	8005270 <UART_SetConfig+0x348>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2f      	ldr	r2, [pc, #188]	@ (8005208 <UART_SetConfig+0x2e0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d125      	bne.n	800519a <UART_SetConfig+0x272>
 800514e:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800515c:	d017      	beq.n	800518e <UART_SetConfig+0x266>
 800515e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005162:	d817      	bhi.n	8005194 <UART_SetConfig+0x26c>
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005168:	d00b      	beq.n	8005182 <UART_SetConfig+0x25a>
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516e:	d811      	bhi.n	8005194 <UART_SetConfig+0x26c>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x254>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005178:	d006      	beq.n	8005188 <UART_SetConfig+0x260>
 800517a:	e00b      	b.n	8005194 <UART_SetConfig+0x26c>
 800517c:	2301      	movs	r3, #1
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e076      	b.n	8005270 <UART_SetConfig+0x348>
 8005182:	2302      	movs	r3, #2
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e073      	b.n	8005270 <UART_SetConfig+0x348>
 8005188:	2304      	movs	r3, #4
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e070      	b.n	8005270 <UART_SetConfig+0x348>
 800518e:	2308      	movs	r3, #8
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e06d      	b.n	8005270 <UART_SetConfig+0x348>
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e06a      	b.n	8005270 <UART_SetConfig+0x348>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <UART_SetConfig+0x2e4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d138      	bne.n	8005216 <UART_SetConfig+0x2ee>
 80051a4:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b2:	d017      	beq.n	80051e4 <UART_SetConfig+0x2bc>
 80051b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b8:	d82a      	bhi.n	8005210 <UART_SetConfig+0x2e8>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d00b      	beq.n	80051d8 <UART_SetConfig+0x2b0>
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c4:	d824      	bhi.n	8005210 <UART_SetConfig+0x2e8>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <UART_SetConfig+0x2aa>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ce:	d006      	beq.n	80051de <UART_SetConfig+0x2b6>
 80051d0:	e01e      	b.n	8005210 <UART_SetConfig+0x2e8>
 80051d2:	2300      	movs	r3, #0
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e04b      	b.n	8005270 <UART_SetConfig+0x348>
 80051d8:	2302      	movs	r3, #2
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e048      	b.n	8005270 <UART_SetConfig+0x348>
 80051de:	2304      	movs	r3, #4
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e045      	b.n	8005270 <UART_SetConfig+0x348>
 80051e4:	2308      	movs	r3, #8
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e042      	b.n	8005270 <UART_SetConfig+0x348>
 80051ea:	bf00      	nop
 80051ec:	efff69f3 	.word	0xefff69f3
 80051f0:	40011000 	.word	0x40011000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40004400 	.word	0x40004400
 80051fc:	40004800 	.word	0x40004800
 8005200:	40004c00 	.word	0x40004c00
 8005204:	40005000 	.word	0x40005000
 8005208:	40011400 	.word	0x40011400
 800520c:	40007800 	.word	0x40007800
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e02c      	b.n	8005270 <UART_SetConfig+0x348>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a72      	ldr	r2, [pc, #456]	@ (80053e4 <UART_SetConfig+0x4bc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d125      	bne.n	800526c <UART_SetConfig+0x344>
 8005220:	4b71      	ldr	r3, [pc, #452]	@ (80053e8 <UART_SetConfig+0x4c0>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800522a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800522e:	d017      	beq.n	8005260 <UART_SetConfig+0x338>
 8005230:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005234:	d817      	bhi.n	8005266 <UART_SetConfig+0x33e>
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523a:	d00b      	beq.n	8005254 <UART_SetConfig+0x32c>
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005240:	d811      	bhi.n	8005266 <UART_SetConfig+0x33e>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <UART_SetConfig+0x326>
 8005246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524a:	d006      	beq.n	800525a <UART_SetConfig+0x332>
 800524c:	e00b      	b.n	8005266 <UART_SetConfig+0x33e>
 800524e:	2300      	movs	r3, #0
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e00d      	b.n	8005270 <UART_SetConfig+0x348>
 8005254:	2302      	movs	r3, #2
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e00a      	b.n	8005270 <UART_SetConfig+0x348>
 800525a:	2304      	movs	r3, #4
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e007      	b.n	8005270 <UART_SetConfig+0x348>
 8005260:	2308      	movs	r3, #8
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e004      	b.n	8005270 <UART_SetConfig+0x348>
 8005266:	2310      	movs	r3, #16
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e001      	b.n	8005270 <UART_SetConfig+0x348>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005278:	d15b      	bne.n	8005332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800527a:	7ffb      	ldrb	r3, [r7, #31]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d828      	bhi.n	80052d2 <UART_SetConfig+0x3aa>
 8005280:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <UART_SetConfig+0x360>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fe fe72 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fe fe82 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b4b      	ldr	r3, [pc, #300]	@ (80053ec <UART_SetConfig+0x4c4>)
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fd95 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 80052c6:	61b8      	str	r0, [r7, #24]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77bb      	strb	r3, [r7, #30]
        break;
 80052da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d074      	beq.n	80053cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d916      	bls.n	800532c <UART_SetConfig+0x404>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d212      	bcs.n	800532c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f023 030f 	bic.w	r3, r3, #15
 800530e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	b29a      	uxth	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	4313      	orrs	r3, r2
 8005320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	89fa      	ldrh	r2, [r7, #14]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	e04f      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	77bb      	strb	r3, [r7, #30]
 8005330:	e04c      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005332:	7ffb      	ldrb	r3, [r7, #31]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d828      	bhi.n	800538a <UART_SetConfig+0x462>
 8005338:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <UART_SetConfig+0x418>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	0800538b 	.word	0x0800538b
 8005350:	0800537b 	.word	0x0800537b
 8005354:	0800538b 	.word	0x0800538b
 8005358:	0800538b 	.word	0x0800538b
 800535c:	0800538b 	.word	0x0800538b
 8005360:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7fe fe16 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8005368:	61b8      	str	r0, [r7, #24]
        break;
 800536a:	e013      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7fe fe26 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005370:	61b8      	str	r0, [r7, #24]
        break;
 8005372:	e00f      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <UART_SetConfig+0x4c4>)
 8005376:	61bb      	str	r3, [r7, #24]
        break;
 8005378:	e00c      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7fe fd39 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 800537e:	61b8      	str	r0, [r7, #24]
        break;
 8005380:	e008      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005386:	61bb      	str	r3, [r7, #24]
        break;
 8005388:	e004      	b.n	8005394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	77bb      	strb	r3, [r7, #30]
        break;
 8005392:	bf00      	nop
    }

    if (pclk != 0U)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d018      	beq.n	80053cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085a      	lsrs	r2, r3, #1
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	441a      	add	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d909      	bls.n	80053c8 <UART_SetConfig+0x4a0>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ba:	d205      	bcs.n	80053c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e001      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40007c00 	.word	0x40007c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	00f42400 	.word	0x00f42400

080053f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01a      	beq.n	8005506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ee:	d10a      	bne.n	8005506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005544:	f7fd f878 	bl	8002638 <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10e      	bne.n	8005576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f81b 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e011      	b.n	800559a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b09c      	sub	sp, #112	@ 0x70
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e0a7      	b.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	f000 80a3 	beq.w	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fd f83b 	bl	8002638 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d13f      	bne.n	8005654 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80055e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80055f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	@ 0x60
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005626:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005628:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800562c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e068      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d050      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005670:	d148      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800567a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005690:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
 800569c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80056ce:	623a      	str	r2, [r7, #32]
 80056d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	61bb      	str	r3, [r7, #24]
   return(result);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e010      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	f43f af48 	beq.w	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3770      	adds	r7, #112	@ 0x70
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <__cvt>:
 800572e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005732:	ec57 6b10 	vmov	r6, r7, d0
 8005736:	2f00      	cmp	r7, #0
 8005738:	460c      	mov	r4, r1
 800573a:	4619      	mov	r1, r3
 800573c:	463b      	mov	r3, r7
 800573e:	bfbb      	ittet	lt
 8005740:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005744:	461f      	movlt	r7, r3
 8005746:	2300      	movge	r3, #0
 8005748:	232d      	movlt	r3, #45	@ 0x2d
 800574a:	700b      	strb	r3, [r1, #0]
 800574c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800574e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005752:	4691      	mov	r9, r2
 8005754:	f023 0820 	bic.w	r8, r3, #32
 8005758:	bfbc      	itt	lt
 800575a:	4632      	movlt	r2, r6
 800575c:	4616      	movlt	r6, r2
 800575e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005762:	d005      	beq.n	8005770 <__cvt+0x42>
 8005764:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005768:	d100      	bne.n	800576c <__cvt+0x3e>
 800576a:	3401      	adds	r4, #1
 800576c:	2102      	movs	r1, #2
 800576e:	e000      	b.n	8005772 <__cvt+0x44>
 8005770:	2103      	movs	r1, #3
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	ab02      	add	r3, sp, #8
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	ec47 6b10 	vmov	d0, r6, r7
 800577e:	4653      	mov	r3, sl
 8005780:	4622      	mov	r2, r4
 8005782:	f001 f875 	bl	8006870 <_dtoa_r>
 8005786:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800578a:	4605      	mov	r5, r0
 800578c:	d119      	bne.n	80057c2 <__cvt+0x94>
 800578e:	f019 0f01 	tst.w	r9, #1
 8005792:	d00e      	beq.n	80057b2 <__cvt+0x84>
 8005794:	eb00 0904 	add.w	r9, r0, r4
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fb f9b2 	bl	8000b08 <__aeabi_dcmpeq>
 80057a4:	b108      	cbz	r0, 80057aa <__cvt+0x7c>
 80057a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80057aa:	2230      	movs	r2, #48	@ 0x30
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	454b      	cmp	r3, r9
 80057b0:	d31e      	bcc.n	80057f0 <__cvt+0xc2>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057b6:	1b5b      	subs	r3, r3, r5
 80057b8:	4628      	mov	r0, r5
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	b004      	add	sp, #16
 80057be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057c6:	eb00 0904 	add.w	r9, r0, r4
 80057ca:	d1e5      	bne.n	8005798 <__cvt+0x6a>
 80057cc:	7803      	ldrb	r3, [r0, #0]
 80057ce:	2b30      	cmp	r3, #48	@ 0x30
 80057d0:	d10a      	bne.n	80057e8 <__cvt+0xba>
 80057d2:	2200      	movs	r2, #0
 80057d4:	2300      	movs	r3, #0
 80057d6:	4630      	mov	r0, r6
 80057d8:	4639      	mov	r1, r7
 80057da:	f7fb f995 	bl	8000b08 <__aeabi_dcmpeq>
 80057de:	b918      	cbnz	r0, 80057e8 <__cvt+0xba>
 80057e0:	f1c4 0401 	rsb	r4, r4, #1
 80057e4:	f8ca 4000 	str.w	r4, [sl]
 80057e8:	f8da 3000 	ldr.w	r3, [sl]
 80057ec:	4499      	add	r9, r3
 80057ee:	e7d3      	b.n	8005798 <__cvt+0x6a>
 80057f0:	1c59      	adds	r1, r3, #1
 80057f2:	9103      	str	r1, [sp, #12]
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e7d9      	b.n	80057ac <__cvt+0x7e>

080057f8 <__exponent>:
 80057f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057fa:	2900      	cmp	r1, #0
 80057fc:	bfba      	itte	lt
 80057fe:	4249      	neglt	r1, r1
 8005800:	232d      	movlt	r3, #45	@ 0x2d
 8005802:	232b      	movge	r3, #43	@ 0x2b
 8005804:	2909      	cmp	r1, #9
 8005806:	7002      	strb	r2, [r0, #0]
 8005808:	7043      	strb	r3, [r0, #1]
 800580a:	dd29      	ble.n	8005860 <__exponent+0x68>
 800580c:	f10d 0307 	add.w	r3, sp, #7
 8005810:	461d      	mov	r5, r3
 8005812:	270a      	movs	r7, #10
 8005814:	461a      	mov	r2, r3
 8005816:	fbb1 f6f7 	udiv	r6, r1, r7
 800581a:	fb07 1416 	mls	r4, r7, r6, r1
 800581e:	3430      	adds	r4, #48	@ 0x30
 8005820:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005824:	460c      	mov	r4, r1
 8005826:	2c63      	cmp	r4, #99	@ 0x63
 8005828:	f103 33ff 	add.w	r3, r3, #4294967295
 800582c:	4631      	mov	r1, r6
 800582e:	dcf1      	bgt.n	8005814 <__exponent+0x1c>
 8005830:	3130      	adds	r1, #48	@ 0x30
 8005832:	1e94      	subs	r4, r2, #2
 8005834:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005838:	1c41      	adds	r1, r0, #1
 800583a:	4623      	mov	r3, r4
 800583c:	42ab      	cmp	r3, r5
 800583e:	d30a      	bcc.n	8005856 <__exponent+0x5e>
 8005840:	f10d 0309 	add.w	r3, sp, #9
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	42ac      	cmp	r4, r5
 8005848:	bf88      	it	hi
 800584a:	2300      	movhi	r3, #0
 800584c:	3302      	adds	r3, #2
 800584e:	4403      	add	r3, r0
 8005850:	1a18      	subs	r0, r3, r0
 8005852:	b003      	add	sp, #12
 8005854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005856:	f813 6b01 	ldrb.w	r6, [r3], #1
 800585a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800585e:	e7ed      	b.n	800583c <__exponent+0x44>
 8005860:	2330      	movs	r3, #48	@ 0x30
 8005862:	3130      	adds	r1, #48	@ 0x30
 8005864:	7083      	strb	r3, [r0, #2]
 8005866:	70c1      	strb	r1, [r0, #3]
 8005868:	1d03      	adds	r3, r0, #4
 800586a:	e7f1      	b.n	8005850 <__exponent+0x58>

0800586c <_printf_float>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	b08d      	sub	sp, #52	@ 0x34
 8005872:	460c      	mov	r4, r1
 8005874:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005878:	4616      	mov	r6, r2
 800587a:	461f      	mov	r7, r3
 800587c:	4605      	mov	r5, r0
 800587e:	f000 feef 	bl	8006660 <_localeconv_r>
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fd12 	bl	80002b0 <strlen>
 800588c:	2300      	movs	r3, #0
 800588e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005890:	f8d8 3000 	ldr.w	r3, [r8]
 8005894:	9005      	str	r0, [sp, #20]
 8005896:	3307      	adds	r3, #7
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	f103 0208 	add.w	r2, r3, #8
 80058a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058a4:	f8d4 b000 	ldr.w	fp, [r4]
 80058a8:	f8c8 2000 	str.w	r2, [r8]
 80058ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058b4:	9307      	str	r3, [sp, #28]
 80058b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b34 <_printf_float+0x2c8>)
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	f7fb f950 	bl	8000b6c <__aeabi_dcmpun>
 80058cc:	bb70      	cbnz	r0, 800592c <_printf_float+0xc0>
 80058ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d2:	4b98      	ldr	r3, [pc, #608]	@ (8005b34 <_printf_float+0x2c8>)
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	f7fb f92a 	bl	8000b30 <__aeabi_dcmple>
 80058dc:	bb30      	cbnz	r0, 800592c <_printf_float+0xc0>
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f7fb f919 	bl	8000b1c <__aeabi_dcmplt>
 80058ea:	b110      	cbz	r0, 80058f2 <_printf_float+0x86>
 80058ec:	232d      	movs	r3, #45	@ 0x2d
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f2:	4a91      	ldr	r2, [pc, #580]	@ (8005b38 <_printf_float+0x2cc>)
 80058f4:	4b91      	ldr	r3, [pc, #580]	@ (8005b3c <_printf_float+0x2d0>)
 80058f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058fa:	bf94      	ite	ls
 80058fc:	4690      	movls	r8, r2
 80058fe:	4698      	movhi	r8, r3
 8005900:	2303      	movs	r3, #3
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	f02b 0304 	bic.w	r3, fp, #4
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	9700      	str	r7, [sp, #0]
 8005910:	4633      	mov	r3, r6
 8005912:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f9d2 	bl	8005cc0 <_printf_common>
 800591c:	3001      	adds	r0, #1
 800591e:	f040 808d 	bne.w	8005a3c <_printf_float+0x1d0>
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	b00d      	add	sp, #52	@ 0x34
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	4640      	mov	r0, r8
 8005932:	4649      	mov	r1, r9
 8005934:	f7fb f91a 	bl	8000b6c <__aeabi_dcmpun>
 8005938:	b140      	cbz	r0, 800594c <_printf_float+0xe0>
 800593a:	464b      	mov	r3, r9
 800593c:	2b00      	cmp	r3, #0
 800593e:	bfbc      	itt	lt
 8005940:	232d      	movlt	r3, #45	@ 0x2d
 8005942:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005946:	4a7e      	ldr	r2, [pc, #504]	@ (8005b40 <_printf_float+0x2d4>)
 8005948:	4b7e      	ldr	r3, [pc, #504]	@ (8005b44 <_printf_float+0x2d8>)
 800594a:	e7d4      	b.n	80058f6 <_printf_float+0x8a>
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005952:	9206      	str	r2, [sp, #24]
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	d13b      	bne.n	80059d0 <_printf_float+0x164>
 8005958:	2306      	movs	r3, #6
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005960:	2300      	movs	r3, #0
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	ab0a      	add	r3, sp, #40	@ 0x28
 8005968:	e9cd a301 	strd	sl, r3, [sp, #4]
 800596c:	ab09      	add	r3, sp, #36	@ 0x24
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	ec49 8b10 	vmov	d0, r8, r9
 8005976:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fed7 	bl	800572e <__cvt>
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005984:	2b47      	cmp	r3, #71	@ 0x47
 8005986:	4680      	mov	r8, r0
 8005988:	d129      	bne.n	80059de <_printf_float+0x172>
 800598a:	1cc8      	adds	r0, r1, #3
 800598c:	db02      	blt.n	8005994 <_printf_float+0x128>
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	4299      	cmp	r1, r3
 8005992:	dd41      	ble.n	8005a18 <_printf_float+0x1ac>
 8005994:	f1aa 0a02 	sub.w	sl, sl, #2
 8005998:	fa5f fa8a 	uxtb.w	sl, sl
 800599c:	3901      	subs	r1, #1
 800599e:	4652      	mov	r2, sl
 80059a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80059a6:	f7ff ff27 	bl	80057f8 <__exponent>
 80059aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059ac:	1813      	adds	r3, r2, r0
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	4681      	mov	r9, r0
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	dc02      	bgt.n	80059bc <_printf_float+0x150>
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	07d2      	lsls	r2, r2, #31
 80059ba:	d501      	bpl.n	80059c0 <_printf_float+0x154>
 80059bc:	3301      	adds	r3, #1
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0a2      	beq.n	800590e <_printf_float+0xa2>
 80059c8:	232d      	movs	r3, #45	@ 0x2d
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ce:	e79e      	b.n	800590e <_printf_float+0xa2>
 80059d0:	9a06      	ldr	r2, [sp, #24]
 80059d2:	2a47      	cmp	r2, #71	@ 0x47
 80059d4:	d1c2      	bne.n	800595c <_printf_float+0xf0>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1c0      	bne.n	800595c <_printf_float+0xf0>
 80059da:	2301      	movs	r3, #1
 80059dc:	e7bd      	b.n	800595a <_printf_float+0xee>
 80059de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059e2:	d9db      	bls.n	800599c <_printf_float+0x130>
 80059e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059e8:	d118      	bne.n	8005a1c <_printf_float+0x1b0>
 80059ea:	2900      	cmp	r1, #0
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	dd0b      	ble.n	8005a08 <_printf_float+0x19c>
 80059f0:	6121      	str	r1, [r4, #16]
 80059f2:	b913      	cbnz	r3, 80059fa <_printf_float+0x18e>
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	07d0      	lsls	r0, r2, #31
 80059f8:	d502      	bpl.n	8005a00 <_printf_float+0x194>
 80059fa:	3301      	adds	r3, #1
 80059fc:	440b      	add	r3, r1
 80059fe:	6123      	str	r3, [r4, #16]
 8005a00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a02:	f04f 0900 	mov.w	r9, #0
 8005a06:	e7db      	b.n	80059c0 <_printf_float+0x154>
 8005a08:	b913      	cbnz	r3, 8005a10 <_printf_float+0x1a4>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d2      	lsls	r2, r2, #31
 8005a0e:	d501      	bpl.n	8005a14 <_printf_float+0x1a8>
 8005a10:	3302      	adds	r3, #2
 8005a12:	e7f4      	b.n	80059fe <_printf_float+0x192>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e7f2      	b.n	80059fe <_printf_float+0x192>
 8005a18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	db05      	blt.n	8005a2e <_printf_float+0x1c2>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	6121      	str	r1, [r4, #16]
 8005a26:	07d8      	lsls	r0, r3, #31
 8005a28:	d5ea      	bpl.n	8005a00 <_printf_float+0x194>
 8005a2a:	1c4b      	adds	r3, r1, #1
 8005a2c:	e7e7      	b.n	80059fe <_printf_float+0x192>
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	bfd4      	ite	le
 8005a32:	f1c1 0202 	rsble	r2, r1, #2
 8005a36:	2201      	movgt	r2, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	e7e0      	b.n	80059fe <_printf_float+0x192>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	055a      	lsls	r2, r3, #21
 8005a40:	d407      	bmi.n	8005a52 <_printf_float+0x1e6>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	4642      	mov	r2, r8
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d12b      	bne.n	8005aa8 <_printf_float+0x23c>
 8005a50:	e767      	b.n	8005922 <_printf_float+0xb6>
 8005a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a56:	f240 80dd 	bls.w	8005c14 <_printf_float+0x3a8>
 8005a5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	f7fb f851 	bl	8000b08 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d033      	beq.n	8005ad2 <_printf_float+0x266>
 8005a6a:	4a37      	ldr	r2, [pc, #220]	@ (8005b48 <_printf_float+0x2dc>)
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	f43f af54 	beq.w	8005922 <_printf_float+0xb6>
 8005a7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a7e:	4543      	cmp	r3, r8
 8005a80:	db02      	blt.n	8005a88 <_printf_float+0x21c>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	07d8      	lsls	r0, r3, #31
 8005a86:	d50f      	bpl.n	8005aa8 <_printf_float+0x23c>
 8005a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	f43f af45 	beq.w	8005922 <_printf_float+0xb6>
 8005a98:	f04f 0900 	mov.w	r9, #0
 8005a9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005aa0:	f104 0a1a 	add.w	sl, r4, #26
 8005aa4:	45c8      	cmp	r8, r9
 8005aa6:	dc09      	bgt.n	8005abc <_printf_float+0x250>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	079b      	lsls	r3, r3, #30
 8005aac:	f100 8103 	bmi.w	8005cb6 <_printf_float+0x44a>
 8005ab0:	68e0      	ldr	r0, [r4, #12]
 8005ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ab4:	4298      	cmp	r0, r3
 8005ab6:	bfb8      	it	lt
 8005ab8:	4618      	movlt	r0, r3
 8005aba:	e734      	b.n	8005926 <_printf_float+0xba>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4652      	mov	r2, sl
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f af2b 	beq.w	8005922 <_printf_float+0xb6>
 8005acc:	f109 0901 	add.w	r9, r9, #1
 8005ad0:	e7e8      	b.n	8005aa4 <_printf_float+0x238>
 8005ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dc39      	bgt.n	8005b4c <_printf_float+0x2e0>
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <_printf_float+0x2dc>)
 8005ada:	2301      	movs	r3, #1
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f af1d 	beq.w	8005922 <_printf_float+0xb6>
 8005ae8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005aec:	ea59 0303 	orrs.w	r3, r9, r3
 8005af0:	d102      	bne.n	8005af8 <_printf_float+0x28c>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	07d9      	lsls	r1, r3, #31
 8005af6:	d5d7      	bpl.n	8005aa8 <_printf_float+0x23c>
 8005af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f af0d 	beq.w	8005922 <_printf_float+0xb6>
 8005b08:	f04f 0a00 	mov.w	sl, #0
 8005b0c:	f104 0b1a 	add.w	fp, r4, #26
 8005b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b12:	425b      	negs	r3, r3
 8005b14:	4553      	cmp	r3, sl
 8005b16:	dc01      	bgt.n	8005b1c <_printf_float+0x2b0>
 8005b18:	464b      	mov	r3, r9
 8005b1a:	e793      	b.n	8005a44 <_printf_float+0x1d8>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	465a      	mov	r2, fp
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f aefb 	beq.w	8005922 <_printf_float+0xb6>
 8005b2c:	f10a 0a01 	add.w	sl, sl, #1
 8005b30:	e7ee      	b.n	8005b10 <_printf_float+0x2a4>
 8005b32:	bf00      	nop
 8005b34:	7fefffff 	.word	0x7fefffff
 8005b38:	08009e44 	.word	0x08009e44
 8005b3c:	08009e48 	.word	0x08009e48
 8005b40:	08009e4c 	.word	0x08009e4c
 8005b44:	08009e50 	.word	0x08009e50
 8005b48:	08009e54 	.word	0x08009e54
 8005b4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b52:	4553      	cmp	r3, sl
 8005b54:	bfa8      	it	ge
 8005b56:	4653      	movge	r3, sl
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	4699      	mov	r9, r3
 8005b5c:	dc36      	bgt.n	8005bcc <_printf_float+0x360>
 8005b5e:	f04f 0b00 	mov.w	fp, #0
 8005b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b66:	f104 021a 	add.w	r2, r4, #26
 8005b6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	eba3 0309 	sub.w	r3, r3, r9
 8005b72:	455b      	cmp	r3, fp
 8005b74:	dc31      	bgt.n	8005bda <_printf_float+0x36e>
 8005b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b78:	459a      	cmp	sl, r3
 8005b7a:	dc3a      	bgt.n	8005bf2 <_printf_float+0x386>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	07da      	lsls	r2, r3, #31
 8005b80:	d437      	bmi.n	8005bf2 <_printf_float+0x386>
 8005b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b84:	ebaa 0903 	sub.w	r9, sl, r3
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b8e:	4599      	cmp	r9, r3
 8005b90:	bfa8      	it	ge
 8005b92:	4699      	movge	r9, r3
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	dc33      	bgt.n	8005c02 <_printf_float+0x396>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba2:	f104 0b1a 	add.w	fp, r4, #26
 8005ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bac:	eba3 0309 	sub.w	r3, r3, r9
 8005bb0:	4543      	cmp	r3, r8
 8005bb2:	f77f af79 	ble.w	8005aa8 <_printf_float+0x23c>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	465a      	mov	r2, fp
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f43f aeae 	beq.w	8005922 <_printf_float+0xb6>
 8005bc6:	f108 0801 	add.w	r8, r8, #1
 8005bca:	e7ec      	b.n	8005ba6 <_printf_float+0x33a>
 8005bcc:	4642      	mov	r2, r8
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d1c2      	bne.n	8005b5e <_printf_float+0x2f2>
 8005bd8:	e6a3      	b.n	8005922 <_printf_float+0xb6>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	9206      	str	r2, [sp, #24]
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae9c 	beq.w	8005922 <_printf_float+0xb6>
 8005bea:	9a06      	ldr	r2, [sp, #24]
 8005bec:	f10b 0b01 	add.w	fp, fp, #1
 8005bf0:	e7bb      	b.n	8005b6a <_printf_float+0x2fe>
 8005bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d1c0      	bne.n	8005b82 <_printf_float+0x316>
 8005c00:	e68f      	b.n	8005922 <_printf_float+0xb6>
 8005c02:	9a06      	ldr	r2, [sp, #24]
 8005c04:	464b      	mov	r3, r9
 8005c06:	4442      	add	r2, r8
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1c3      	bne.n	8005b9a <_printf_float+0x32e>
 8005c12:	e686      	b.n	8005922 <_printf_float+0xb6>
 8005c14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c18:	f1ba 0f01 	cmp.w	sl, #1
 8005c1c:	dc01      	bgt.n	8005c22 <_printf_float+0x3b6>
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d536      	bpl.n	8005c90 <_printf_float+0x424>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4642      	mov	r2, r8
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f43f ae78 	beq.w	8005922 <_printf_float+0xb6>
 8005c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f ae70 	beq.w	8005922 <_printf_float+0xb6>
 8005c42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c4e:	f7fa ff5b 	bl	8000b08 <__aeabi_dcmpeq>
 8005c52:	b9c0      	cbnz	r0, 8005c86 <_printf_float+0x41a>
 8005c54:	4653      	mov	r3, sl
 8005c56:	f108 0201 	add.w	r2, r8, #1
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b8      	blx	r7
 8005c60:	3001      	adds	r0, #1
 8005c62:	d10c      	bne.n	8005c7e <_printf_float+0x412>
 8005c64:	e65d      	b.n	8005922 <_printf_float+0xb6>
 8005c66:	2301      	movs	r3, #1
 8005c68:	465a      	mov	r2, fp
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae56 	beq.w	8005922 <_printf_float+0xb6>
 8005c76:	f108 0801 	add.w	r8, r8, #1
 8005c7a:	45d0      	cmp	r8, sl
 8005c7c:	dbf3      	blt.n	8005c66 <_printf_float+0x3fa>
 8005c7e:	464b      	mov	r3, r9
 8005c80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c84:	e6df      	b.n	8005a46 <_printf_float+0x1da>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0b1a 	add.w	fp, r4, #26
 8005c8e:	e7f4      	b.n	8005c7a <_printf_float+0x40e>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4642      	mov	r2, r8
 8005c94:	e7e1      	b.n	8005c5a <_printf_float+0x3ee>
 8005c96:	2301      	movs	r3, #1
 8005c98:	464a      	mov	r2, r9
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae3e 	beq.w	8005922 <_printf_float+0xb6>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	dcf0      	bgt.n	8005c96 <_printf_float+0x42a>
 8005cb4:	e6fc      	b.n	8005ab0 <_printf_float+0x244>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	f104 0919 	add.w	r9, r4, #25
 8005cbe:	e7f4      	b.n	8005caa <_printf_float+0x43e>

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	3b00      	subs	r3, #0
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c8      	blx	r9
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf02      	ittt	eq
 8005d32:	68e5      	ldreq	r5, [r4, #12]
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	1aed      	subeq	r5, r5, r3
 8005d38:	68a3      	ldr	r3, [r4, #8]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c8      	blx	r9
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	@ 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c8      	blx	r9
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005da4:	2f78      	cmp	r7, #120	@ 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	@ 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d2 	beq.w	8005f62 <_printf_i+0x1c6>
 8005dbe:	2f58      	cmp	r7, #88	@ 0x58
 8005dc0:	f000 80b9 	beq.w	8005f36 <_printf_i+0x19a>
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f49 	.word	0x08005f49
 8005e0c:	08005e73 	.word	0x08005e73
 8005e10:	08005f03 	.word	0x08005f03
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f6b 	.word	0x08005f6b
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e73 	.word	0x08005e73
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f0b 	.word	0x08005f0b
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6032      	str	r2, [r6, #0]
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e09d      	b.n	8005f84 <_printf_i+0x1e8>
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	0606      	lsls	r6, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xbc>
 8005e54:	681d      	ldr	r5, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <_printf_i+0xc4>
 8005e58:	0645      	lsls	r5, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xb8>
 8005e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_i+0xd0>
 8005e64:	232d      	movs	r3, #45	@ 0x2d
 8005e66:	426d      	negs	r5, r5
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e6c:	4859      	ldr	r0, [pc, #356]	@ (8005fd4 <_printf_i+0x238>)
 8005e6e:	230a      	movs	r3, #10
 8005e70:	e011      	b.n	8005e96 <_printf_i+0xfa>
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	0608      	lsls	r0, r1, #24
 8005e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e7c:	d402      	bmi.n	8005e84 <_printf_i+0xe8>
 8005e7e:	0649      	lsls	r1, r1, #25
 8005e80:	bf48      	it	mi
 8005e82:	b2ad      	uxthmi	r5, r5
 8005e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e86:	4853      	ldr	r0, [pc, #332]	@ (8005fd4 <_printf_i+0x238>)
 8005e88:	6033      	str	r3, [r6, #0]
 8005e8a:	bf14      	ite	ne
 8005e8c:	230a      	movne	r3, #10
 8005e8e:	2308      	moveq	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e96:	6866      	ldr	r6, [r4, #4]
 8005e98:	60a6      	str	r6, [r4, #8]
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	bfa2      	ittt	ge
 8005e9e:	6821      	ldrge	r1, [r4, #0]
 8005ea0:	f021 0104 	bicge.w	r1, r1, #4
 8005ea4:	6021      	strge	r1, [r4, #0]
 8005ea6:	b90d      	cbnz	r5, 8005eac <_printf_i+0x110>
 8005ea8:	2e00      	cmp	r6, #0
 8005eaa:	d04b      	beq.n	8005f44 <_printf_i+0x1a8>
 8005eac:	4616      	mov	r6, r2
 8005eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb6:	5dc7      	ldrb	r7, [r0, r7]
 8005eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ebc:	462f      	mov	r7, r5
 8005ebe:	42bb      	cmp	r3, r7
 8005ec0:	460d      	mov	r5, r1
 8005ec2:	d9f4      	bls.n	8005eae <_printf_i+0x112>
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d10b      	bne.n	8005ee0 <_printf_i+0x144>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	07df      	lsls	r7, r3, #31
 8005ecc:	d508      	bpl.n	8005ee0 <_printf_i+0x144>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	bfde      	ittt	le
 8005ed6:	2330      	movle	r3, #48	@ 0x30
 8005ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee0:	1b92      	subs	r2, r2, r6
 8005ee2:	6122      	str	r2, [r4, #16]
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	464b      	mov	r3, r9
 8005eea:	aa03      	add	r2, sp, #12
 8005eec:	4621      	mov	r1, r4
 8005eee:	4640      	mov	r0, r8
 8005ef0:	f7ff fee6 	bl	8005cc0 <_printf_common>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d14a      	bne.n	8005f8e <_printf_i+0x1f2>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	b004      	add	sp, #16
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	4833      	ldr	r0, [pc, #204]	@ (8005fd8 <_printf_i+0x23c>)
 8005f0c:	2778      	movs	r7, #120	@ 0x78
 8005f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	6831      	ldr	r1, [r6, #0]
 8005f16:	061f      	lsls	r7, r3, #24
 8005f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f1c:	d402      	bmi.n	8005f24 <_printf_i+0x188>
 8005f1e:	065f      	lsls	r7, r3, #25
 8005f20:	bf48      	it	mi
 8005f22:	b2ad      	uxthmi	r5, r5
 8005f24:	6031      	str	r1, [r6, #0]
 8005f26:	07d9      	lsls	r1, r3, #31
 8005f28:	bf44      	itt	mi
 8005f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f2e:	6023      	strmi	r3, [r4, #0]
 8005f30:	b11d      	cbz	r5, 8005f3a <_printf_i+0x19e>
 8005f32:	2310      	movs	r3, #16
 8005f34:	e7ac      	b.n	8005e90 <_printf_i+0xf4>
 8005f36:	4827      	ldr	r0, [pc, #156]	@ (8005fd4 <_printf_i+0x238>)
 8005f38:	e7e9      	b.n	8005f0e <_printf_i+0x172>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f023 0320 	bic.w	r3, r3, #32
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	e7f6      	b.n	8005f32 <_printf_i+0x196>
 8005f44:	4616      	mov	r6, r2
 8005f46:	e7bd      	b.n	8005ec4 <_printf_i+0x128>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	6961      	ldr	r1, [r4, #20]
 8005f4e:	1d18      	adds	r0, r3, #4
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	062e      	lsls	r6, r5, #24
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0x1c0>
 8005f58:	6019      	str	r1, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0x1c6>
 8005f5c:	0668      	lsls	r0, r5, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0x1bc>
 8005f60:	8019      	strh	r1, [r3, #0]
 8005f62:	2300      	movs	r3, #0
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	4616      	mov	r6, r2
 8005f68:	e7bc      	b.n	8005ee4 <_printf_i+0x148>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	1d1a      	adds	r2, r3, #4
 8005f6e:	6032      	str	r2, [r6, #0]
 8005f70:	681e      	ldr	r6, [r3, #0]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	2100      	movs	r1, #0
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7fa f94a 	bl	8000210 <memchr>
 8005f7c:	b108      	cbz	r0, 8005f82 <_printf_i+0x1e6>
 8005f7e:	1b80      	subs	r0, r0, r6
 8005f80:	6060      	str	r0, [r4, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	2300      	movs	r3, #0
 8005f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f8c:	e7aa      	b.n	8005ee4 <_printf_i+0x148>
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	4632      	mov	r2, r6
 8005f92:	4649      	mov	r1, r9
 8005f94:	4640      	mov	r0, r8
 8005f96:	47d0      	blx	sl
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d0ad      	beq.n	8005ef8 <_printf_i+0x15c>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	079b      	lsls	r3, r3, #30
 8005fa0:	d413      	bmi.n	8005fca <_printf_i+0x22e>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	bfb8      	it	lt
 8005faa:	4618      	movlt	r0, r3
 8005fac:	e7a6      	b.n	8005efc <_printf_i+0x160>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d09d      	beq.n	8005ef8 <_printf_i+0x15c>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	1a5b      	subs	r3, r3, r1
 8005fc4:	42ab      	cmp	r3, r5
 8005fc6:	dcf2      	bgt.n	8005fae <_printf_i+0x212>
 8005fc8:	e7eb      	b.n	8005fa2 <_printf_i+0x206>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	f104 0619 	add.w	r6, r4, #25
 8005fd0:	e7f5      	b.n	8005fbe <_printf_i+0x222>
 8005fd2:	bf00      	nop
 8005fd4:	08009e56 	.word	0x08009e56
 8005fd8:	08009e67 	.word	0x08009e67

08005fdc <_scanf_float>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	b087      	sub	sp, #28
 8005fe2:	4617      	mov	r7, r2
 8005fe4:	9303      	str	r3, [sp, #12]
 8005fe6:	688b      	ldr	r3, [r1, #8]
 8005fe8:	1e5a      	subs	r2, r3, #1
 8005fea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005fee:	bf81      	itttt	hi
 8005ff0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ff4:	eb03 0b05 	addhi.w	fp, r3, r5
 8005ff8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ffc:	608b      	strhi	r3, [r1, #8]
 8005ffe:	680b      	ldr	r3, [r1, #0]
 8006000:	460a      	mov	r2, r1
 8006002:	f04f 0500 	mov.w	r5, #0
 8006006:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800600a:	f842 3b1c 	str.w	r3, [r2], #28
 800600e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006012:	4680      	mov	r8, r0
 8006014:	460c      	mov	r4, r1
 8006016:	bf98      	it	ls
 8006018:	f04f 0b00 	movls.w	fp, #0
 800601c:	9201      	str	r2, [sp, #4]
 800601e:	4616      	mov	r6, r2
 8006020:	46aa      	mov	sl, r5
 8006022:	46a9      	mov	r9, r5
 8006024:	9502      	str	r5, [sp, #8]
 8006026:	68a2      	ldr	r2, [r4, #8]
 8006028:	b152      	cbz	r2, 8006040 <_scanf_float+0x64>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006030:	d864      	bhi.n	80060fc <_scanf_float+0x120>
 8006032:	2b40      	cmp	r3, #64	@ 0x40
 8006034:	d83c      	bhi.n	80060b0 <_scanf_float+0xd4>
 8006036:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800603a:	b2c8      	uxtb	r0, r1
 800603c:	280e      	cmp	r0, #14
 800603e:	d93a      	bls.n	80060b6 <_scanf_float+0xda>
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	d003      	beq.n	800604e <_scanf_float+0x72>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006052:	f1ba 0f01 	cmp.w	sl, #1
 8006056:	f200 8117 	bhi.w	8006288 <_scanf_float+0x2ac>
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	429e      	cmp	r6, r3
 800605e:	f200 8108 	bhi.w	8006272 <_scanf_float+0x296>
 8006062:	2001      	movs	r0, #1
 8006064:	b007      	add	sp, #28
 8006066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800606e:	2a0d      	cmp	r2, #13
 8006070:	d8e6      	bhi.n	8006040 <_scanf_float+0x64>
 8006072:	a101      	add	r1, pc, #4	@ (adr r1, 8006078 <_scanf_float+0x9c>)
 8006074:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006078:	080061bf 	.word	0x080061bf
 800607c:	08006041 	.word	0x08006041
 8006080:	08006041 	.word	0x08006041
 8006084:	08006041 	.word	0x08006041
 8006088:	0800621f 	.word	0x0800621f
 800608c:	080061f7 	.word	0x080061f7
 8006090:	08006041 	.word	0x08006041
 8006094:	08006041 	.word	0x08006041
 8006098:	080061cd 	.word	0x080061cd
 800609c:	08006041 	.word	0x08006041
 80060a0:	08006041 	.word	0x08006041
 80060a4:	08006041 	.word	0x08006041
 80060a8:	08006041 	.word	0x08006041
 80060ac:	08006185 	.word	0x08006185
 80060b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80060b4:	e7db      	b.n	800606e <_scanf_float+0x92>
 80060b6:	290e      	cmp	r1, #14
 80060b8:	d8c2      	bhi.n	8006040 <_scanf_float+0x64>
 80060ba:	a001      	add	r0, pc, #4	@ (adr r0, 80060c0 <_scanf_float+0xe4>)
 80060bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060c0:	08006175 	.word	0x08006175
 80060c4:	08006041 	.word	0x08006041
 80060c8:	08006175 	.word	0x08006175
 80060cc:	0800620b 	.word	0x0800620b
 80060d0:	08006041 	.word	0x08006041
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800615b 	.word	0x0800615b
 80060dc:	0800615b 	.word	0x0800615b
 80060e0:	0800615b 	.word	0x0800615b
 80060e4:	0800615b 	.word	0x0800615b
 80060e8:	0800615b 	.word	0x0800615b
 80060ec:	0800615b 	.word	0x0800615b
 80060f0:	0800615b 	.word	0x0800615b
 80060f4:	0800615b 	.word	0x0800615b
 80060f8:	0800615b 	.word	0x0800615b
 80060fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80060fe:	d809      	bhi.n	8006114 <_scanf_float+0x138>
 8006100:	2b60      	cmp	r3, #96	@ 0x60
 8006102:	d8b2      	bhi.n	800606a <_scanf_float+0x8e>
 8006104:	2b54      	cmp	r3, #84	@ 0x54
 8006106:	d07b      	beq.n	8006200 <_scanf_float+0x224>
 8006108:	2b59      	cmp	r3, #89	@ 0x59
 800610a:	d199      	bne.n	8006040 <_scanf_float+0x64>
 800610c:	2d07      	cmp	r5, #7
 800610e:	d197      	bne.n	8006040 <_scanf_float+0x64>
 8006110:	2508      	movs	r5, #8
 8006112:	e02c      	b.n	800616e <_scanf_float+0x192>
 8006114:	2b74      	cmp	r3, #116	@ 0x74
 8006116:	d073      	beq.n	8006200 <_scanf_float+0x224>
 8006118:	2b79      	cmp	r3, #121	@ 0x79
 800611a:	e7f6      	b.n	800610a <_scanf_float+0x12e>
 800611c:	6821      	ldr	r1, [r4, #0]
 800611e:	05c8      	lsls	r0, r1, #23
 8006120:	d51b      	bpl.n	800615a <_scanf_float+0x17e>
 8006122:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006126:	6021      	str	r1, [r4, #0]
 8006128:	f109 0901 	add.w	r9, r9, #1
 800612c:	f1bb 0f00 	cmp.w	fp, #0
 8006130:	d003      	beq.n	800613a <_scanf_float+0x15e>
 8006132:	3201      	adds	r2, #1
 8006134:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006138:	60a2      	str	r2, [r4, #8]
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	3b01      	subs	r3, #1
 800613e:	60a3      	str	r3, [r4, #8]
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	3301      	adds	r3, #1
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	f340 8087 	ble.w	8006260 <_scanf_float+0x284>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	e765      	b.n	8006026 <_scanf_float+0x4a>
 800615a:	eb1a 0105 	adds.w	r1, sl, r5
 800615e:	f47f af6f 	bne.w	8006040 <_scanf_float+0x64>
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006168:	6022      	str	r2, [r4, #0]
 800616a:	460d      	mov	r5, r1
 800616c:	468a      	mov	sl, r1
 800616e:	f806 3b01 	strb.w	r3, [r6], #1
 8006172:	e7e2      	b.n	800613a <_scanf_float+0x15e>
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	0610      	lsls	r0, r2, #24
 8006178:	f57f af62 	bpl.w	8006040 <_scanf_float+0x64>
 800617c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006180:	6022      	str	r2, [r4, #0]
 8006182:	e7f4      	b.n	800616e <_scanf_float+0x192>
 8006184:	f1ba 0f00 	cmp.w	sl, #0
 8006188:	d10e      	bne.n	80061a8 <_scanf_float+0x1cc>
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	d10e      	bne.n	80061ae <_scanf_float+0x1d2>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006196:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800619a:	d108      	bne.n	80061ae <_scanf_float+0x1d2>
 800619c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	f04f 0a01 	mov.w	sl, #1
 80061a6:	e7e2      	b.n	800616e <_scanf_float+0x192>
 80061a8:	f1ba 0f02 	cmp.w	sl, #2
 80061ac:	d055      	beq.n	800625a <_scanf_float+0x27e>
 80061ae:	2d01      	cmp	r5, #1
 80061b0:	d002      	beq.n	80061b8 <_scanf_float+0x1dc>
 80061b2:	2d04      	cmp	r5, #4
 80061b4:	f47f af44 	bne.w	8006040 <_scanf_float+0x64>
 80061b8:	3501      	adds	r5, #1
 80061ba:	b2ed      	uxtb	r5, r5
 80061bc:	e7d7      	b.n	800616e <_scanf_float+0x192>
 80061be:	f1ba 0f01 	cmp.w	sl, #1
 80061c2:	f47f af3d 	bne.w	8006040 <_scanf_float+0x64>
 80061c6:	f04f 0a02 	mov.w	sl, #2
 80061ca:	e7d0      	b.n	800616e <_scanf_float+0x192>
 80061cc:	b97d      	cbnz	r5, 80061ee <_scanf_float+0x212>
 80061ce:	f1b9 0f00 	cmp.w	r9, #0
 80061d2:	f47f af38 	bne.w	8006046 <_scanf_float+0x6a>
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061e0:	f040 8108 	bne.w	80063f4 <_scanf_float+0x418>
 80061e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	2501      	movs	r5, #1
 80061ec:	e7bf      	b.n	800616e <_scanf_float+0x192>
 80061ee:	2d03      	cmp	r5, #3
 80061f0:	d0e2      	beq.n	80061b8 <_scanf_float+0x1dc>
 80061f2:	2d05      	cmp	r5, #5
 80061f4:	e7de      	b.n	80061b4 <_scanf_float+0x1d8>
 80061f6:	2d02      	cmp	r5, #2
 80061f8:	f47f af22 	bne.w	8006040 <_scanf_float+0x64>
 80061fc:	2503      	movs	r5, #3
 80061fe:	e7b6      	b.n	800616e <_scanf_float+0x192>
 8006200:	2d06      	cmp	r5, #6
 8006202:	f47f af1d 	bne.w	8006040 <_scanf_float+0x64>
 8006206:	2507      	movs	r5, #7
 8006208:	e7b1      	b.n	800616e <_scanf_float+0x192>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	0591      	lsls	r1, r2, #22
 800620e:	f57f af17 	bpl.w	8006040 <_scanf_float+0x64>
 8006212:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	f8cd 9008 	str.w	r9, [sp, #8]
 800621c:	e7a7      	b.n	800616e <_scanf_float+0x192>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006224:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006228:	d006      	beq.n	8006238 <_scanf_float+0x25c>
 800622a:	0550      	lsls	r0, r2, #21
 800622c:	f57f af08 	bpl.w	8006040 <_scanf_float+0x64>
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	f000 80de 	beq.w	80063f4 <_scanf_float+0x418>
 8006238:	0591      	lsls	r1, r2, #22
 800623a:	bf58      	it	pl
 800623c:	9902      	ldrpl	r1, [sp, #8]
 800623e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006242:	bf58      	it	pl
 8006244:	eba9 0101 	subpl.w	r1, r9, r1
 8006248:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800624c:	bf58      	it	pl
 800624e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	f04f 0900 	mov.w	r9, #0
 8006258:	e789      	b.n	800616e <_scanf_float+0x192>
 800625a:	f04f 0a03 	mov.w	sl, #3
 800625e:	e786      	b.n	800616e <_scanf_float+0x192>
 8006260:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006264:	4639      	mov	r1, r7
 8006266:	4640      	mov	r0, r8
 8006268:	4798      	blx	r3
 800626a:	2800      	cmp	r0, #0
 800626c:	f43f aedb 	beq.w	8006026 <_scanf_float+0x4a>
 8006270:	e6e6      	b.n	8006040 <_scanf_float+0x64>
 8006272:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006276:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800627a:	463a      	mov	r2, r7
 800627c:	4640      	mov	r0, r8
 800627e:	4798      	blx	r3
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	3b01      	subs	r3, #1
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	e6e8      	b.n	800605a <_scanf_float+0x7e>
 8006288:	1e6b      	subs	r3, r5, #1
 800628a:	2b06      	cmp	r3, #6
 800628c:	d824      	bhi.n	80062d8 <_scanf_float+0x2fc>
 800628e:	2d02      	cmp	r5, #2
 8006290:	d836      	bhi.n	8006300 <_scanf_float+0x324>
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	429e      	cmp	r6, r3
 8006296:	f67f aee4 	bls.w	8006062 <_scanf_float+0x86>
 800629a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800629e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062a2:	463a      	mov	r2, r7
 80062a4:	4640      	mov	r0, r8
 80062a6:	4798      	blx	r3
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	e7f0      	b.n	8006292 <_scanf_float+0x2b6>
 80062b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80062b8:	463a      	mov	r2, r7
 80062ba:	4640      	mov	r0, r8
 80062bc:	4798      	blx	r3
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062c8:	fa5f fa8a 	uxtb.w	sl, sl
 80062cc:	f1ba 0f02 	cmp.w	sl, #2
 80062d0:	d1ee      	bne.n	80062b0 <_scanf_float+0x2d4>
 80062d2:	3d03      	subs	r5, #3
 80062d4:	b2ed      	uxtb	r5, r5
 80062d6:	1b76      	subs	r6, r6, r5
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	05da      	lsls	r2, r3, #23
 80062dc:	d530      	bpl.n	8006340 <_scanf_float+0x364>
 80062de:	055b      	lsls	r3, r3, #21
 80062e0:	d511      	bpl.n	8006306 <_scanf_float+0x32a>
 80062e2:	9b01      	ldr	r3, [sp, #4]
 80062e4:	429e      	cmp	r6, r3
 80062e6:	f67f aebc 	bls.w	8006062 <_scanf_float+0x86>
 80062ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062f2:	463a      	mov	r2, r7
 80062f4:	4640      	mov	r0, r8
 80062f6:	4798      	blx	r3
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	e7f0      	b.n	80062e2 <_scanf_float+0x306>
 8006300:	46aa      	mov	sl, r5
 8006302:	46b3      	mov	fp, r6
 8006304:	e7de      	b.n	80062c4 <_scanf_float+0x2e8>
 8006306:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	2965      	cmp	r1, #101	@ 0x65
 800630e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006312:	f106 35ff 	add.w	r5, r6, #4294967295
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	d00c      	beq.n	8006334 <_scanf_float+0x358>
 800631a:	2945      	cmp	r1, #69	@ 0x45
 800631c:	d00a      	beq.n	8006334 <_scanf_float+0x358>
 800631e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006322:	463a      	mov	r2, r7
 8006324:	4640      	mov	r0, r8
 8006326:	4798      	blx	r3
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800632e:	3b01      	subs	r3, #1
 8006330:	1eb5      	subs	r5, r6, #2
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006338:	463a      	mov	r2, r7
 800633a:	4640      	mov	r0, r8
 800633c:	4798      	blx	r3
 800633e:	462e      	mov	r6, r5
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	f012 0210 	ands.w	r2, r2, #16
 8006346:	d001      	beq.n	800634c <_scanf_float+0x370>
 8006348:	2000      	movs	r0, #0
 800634a:	e68b      	b.n	8006064 <_scanf_float+0x88>
 800634c:	7032      	strb	r2, [r6, #0]
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006358:	d11c      	bne.n	8006394 <_scanf_float+0x3b8>
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	454b      	cmp	r3, r9
 800635e:	eba3 0209 	sub.w	r2, r3, r9
 8006362:	d123      	bne.n	80063ac <_scanf_float+0x3d0>
 8006364:	9901      	ldr	r1, [sp, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	4640      	mov	r0, r8
 800636a:	f002 fbf9 	bl	8008b60 <_strtod_r>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f011 0f02 	tst.w	r1, #2
 8006378:	ec57 6b10 	vmov	r6, r7, d0
 800637c:	f103 0204 	add.w	r2, r3, #4
 8006380:	d01f      	beq.n	80063c2 <_scanf_float+0x3e6>
 8006382:	9903      	ldr	r1, [sp, #12]
 8006384:	600a      	str	r2, [r1, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	e9c3 6700 	strd	r6, r7, [r3]
 800638c:	68e3      	ldr	r3, [r4, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60e3      	str	r3, [r4, #12]
 8006392:	e7d9      	b.n	8006348 <_scanf_float+0x36c>
 8006394:	9b04      	ldr	r3, [sp, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0e4      	beq.n	8006364 <_scanf_float+0x388>
 800639a:	9905      	ldr	r1, [sp, #20]
 800639c:	230a      	movs	r3, #10
 800639e:	3101      	adds	r1, #1
 80063a0:	4640      	mov	r0, r8
 80063a2:	f002 fc5d 	bl	8008c60 <_strtol_r>
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	9e05      	ldr	r6, [sp, #20]
 80063aa:	1ac2      	subs	r2, r0, r3
 80063ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80063b0:	429e      	cmp	r6, r3
 80063b2:	bf28      	it	cs
 80063b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80063b8:	4910      	ldr	r1, [pc, #64]	@ (80063fc <_scanf_float+0x420>)
 80063ba:	4630      	mov	r0, r6
 80063bc:	f000 f8e4 	bl	8006588 <siprintf>
 80063c0:	e7d0      	b.n	8006364 <_scanf_float+0x388>
 80063c2:	f011 0f04 	tst.w	r1, #4
 80063c6:	9903      	ldr	r1, [sp, #12]
 80063c8:	600a      	str	r2, [r1, #0]
 80063ca:	d1dc      	bne.n	8006386 <_scanf_float+0x3aa>
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	4632      	mov	r2, r6
 80063d0:	463b      	mov	r3, r7
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7fa fbc9 	bl	8000b6c <__aeabi_dcmpun>
 80063da:	b128      	cbz	r0, 80063e8 <_scanf_float+0x40c>
 80063dc:	4808      	ldr	r0, [pc, #32]	@ (8006400 <_scanf_float+0x424>)
 80063de:	f000 f9b7 	bl	8006750 <nanf>
 80063e2:	ed85 0a00 	vstr	s0, [r5]
 80063e6:	e7d1      	b.n	800638c <_scanf_float+0x3b0>
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7fa fc1c 	bl	8000c28 <__aeabi_d2f>
 80063f0:	6028      	str	r0, [r5, #0]
 80063f2:	e7cb      	b.n	800638c <_scanf_float+0x3b0>
 80063f4:	f04f 0900 	mov.w	r9, #0
 80063f8:	e629      	b.n	800604e <_scanf_float+0x72>
 80063fa:	bf00      	nop
 80063fc:	08009e78 	.word	0x08009e78
 8006400:	0800a20d 	.word	0x0800a20d

08006404 <std>:
 8006404:	2300      	movs	r3, #0
 8006406:	b510      	push	{r4, lr}
 8006408:	4604      	mov	r4, r0
 800640a:	e9c0 3300 	strd	r3, r3, [r0]
 800640e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006412:	6083      	str	r3, [r0, #8]
 8006414:	8181      	strh	r1, [r0, #12]
 8006416:	6643      	str	r3, [r0, #100]	@ 0x64
 8006418:	81c2      	strh	r2, [r0, #14]
 800641a:	6183      	str	r3, [r0, #24]
 800641c:	4619      	mov	r1, r3
 800641e:	2208      	movs	r2, #8
 8006420:	305c      	adds	r0, #92	@ 0x5c
 8006422:	f000 f914 	bl	800664e <memset>
 8006426:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <std+0x58>)
 8006428:	6263      	str	r3, [r4, #36]	@ 0x24
 800642a:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <std+0x5c>)
 800642c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <std+0x60>)
 8006430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006432:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <std+0x64>)
 8006434:	6323      	str	r3, [r4, #48]	@ 0x30
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <std+0x68>)
 8006438:	6224      	str	r4, [r4, #32]
 800643a:	429c      	cmp	r4, r3
 800643c:	d006      	beq.n	800644c <std+0x48>
 800643e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006442:	4294      	cmp	r4, r2
 8006444:	d002      	beq.n	800644c <std+0x48>
 8006446:	33d0      	adds	r3, #208	@ 0xd0
 8006448:	429c      	cmp	r4, r3
 800644a:	d105      	bne.n	8006458 <std+0x54>
 800644c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006454:	f000 b978 	b.w	8006748 <__retarget_lock_init_recursive>
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	080065c9 	.word	0x080065c9
 8006460:	080065eb 	.word	0x080065eb
 8006464:	08006623 	.word	0x08006623
 8006468:	08006647 	.word	0x08006647
 800646c:	20000388 	.word	0x20000388

08006470 <stdio_exit_handler>:
 8006470:	4a02      	ldr	r2, [pc, #8]	@ (800647c <stdio_exit_handler+0xc>)
 8006472:	4903      	ldr	r1, [pc, #12]	@ (8006480 <stdio_exit_handler+0x10>)
 8006474:	4803      	ldr	r0, [pc, #12]	@ (8006484 <stdio_exit_handler+0x14>)
 8006476:	f000 b869 	b.w	800654c <_fwalk_sglue>
 800647a:	bf00      	nop
 800647c:	20000014 	.word	0x20000014
 8006480:	0800901d 	.word	0x0800901d
 8006484:	20000024 	.word	0x20000024

08006488 <cleanup_stdio>:
 8006488:	6841      	ldr	r1, [r0, #4]
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <cleanup_stdio+0x34>)
 800648c:	4299      	cmp	r1, r3
 800648e:	b510      	push	{r4, lr}
 8006490:	4604      	mov	r4, r0
 8006492:	d001      	beq.n	8006498 <cleanup_stdio+0x10>
 8006494:	f002 fdc2 	bl	800901c <_fflush_r>
 8006498:	68a1      	ldr	r1, [r4, #8]
 800649a:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <cleanup_stdio+0x38>)
 800649c:	4299      	cmp	r1, r3
 800649e:	d002      	beq.n	80064a6 <cleanup_stdio+0x1e>
 80064a0:	4620      	mov	r0, r4
 80064a2:	f002 fdbb 	bl	800901c <_fflush_r>
 80064a6:	68e1      	ldr	r1, [r4, #12]
 80064a8:	4b06      	ldr	r3, [pc, #24]	@ (80064c4 <cleanup_stdio+0x3c>)
 80064aa:	4299      	cmp	r1, r3
 80064ac:	d004      	beq.n	80064b8 <cleanup_stdio+0x30>
 80064ae:	4620      	mov	r0, r4
 80064b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b4:	f002 bdb2 	b.w	800901c <_fflush_r>
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	bf00      	nop
 80064bc:	20000388 	.word	0x20000388
 80064c0:	200003f0 	.word	0x200003f0
 80064c4:	20000458 	.word	0x20000458

080064c8 <global_stdio_init.part.0>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <global_stdio_init.part.0+0x30>)
 80064cc:	4c0b      	ldr	r4, [pc, #44]	@ (80064fc <global_stdio_init.part.0+0x34>)
 80064ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006500 <global_stdio_init.part.0+0x38>)
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	4620      	mov	r0, r4
 80064d4:	2200      	movs	r2, #0
 80064d6:	2104      	movs	r1, #4
 80064d8:	f7ff ff94 	bl	8006404 <std>
 80064dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064e0:	2201      	movs	r2, #1
 80064e2:	2109      	movs	r1, #9
 80064e4:	f7ff ff8e 	bl	8006404 <std>
 80064e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064ec:	2202      	movs	r2, #2
 80064ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064f2:	2112      	movs	r1, #18
 80064f4:	f7ff bf86 	b.w	8006404 <std>
 80064f8:	200004c0 	.word	0x200004c0
 80064fc:	20000388 	.word	0x20000388
 8006500:	08006471 	.word	0x08006471

08006504 <__sfp_lock_acquire>:
 8006504:	4801      	ldr	r0, [pc, #4]	@ (800650c <__sfp_lock_acquire+0x8>)
 8006506:	f000 b920 	b.w	800674a <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	200004c9 	.word	0x200004c9

08006510 <__sfp_lock_release>:
 8006510:	4801      	ldr	r0, [pc, #4]	@ (8006518 <__sfp_lock_release+0x8>)
 8006512:	f000 b91b 	b.w	800674c <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	200004c9 	.word	0x200004c9

0800651c <__sinit>:
 800651c:	b510      	push	{r4, lr}
 800651e:	4604      	mov	r4, r0
 8006520:	f7ff fff0 	bl	8006504 <__sfp_lock_acquire>
 8006524:	6a23      	ldr	r3, [r4, #32]
 8006526:	b11b      	cbz	r3, 8006530 <__sinit+0x14>
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f7ff bff0 	b.w	8006510 <__sfp_lock_release>
 8006530:	4b04      	ldr	r3, [pc, #16]	@ (8006544 <__sinit+0x28>)
 8006532:	6223      	str	r3, [r4, #32]
 8006534:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <__sinit+0x2c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f5      	bne.n	8006528 <__sinit+0xc>
 800653c:	f7ff ffc4 	bl	80064c8 <global_stdio_init.part.0>
 8006540:	e7f2      	b.n	8006528 <__sinit+0xc>
 8006542:	bf00      	nop
 8006544:	08006489 	.word	0x08006489
 8006548:	200004c0 	.word	0x200004c0

0800654c <_fwalk_sglue>:
 800654c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006550:	4607      	mov	r7, r0
 8006552:	4688      	mov	r8, r1
 8006554:	4614      	mov	r4, r2
 8006556:	2600      	movs	r6, #0
 8006558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800655c:	f1b9 0901 	subs.w	r9, r9, #1
 8006560:	d505      	bpl.n	800656e <_fwalk_sglue+0x22>
 8006562:	6824      	ldr	r4, [r4, #0]
 8006564:	2c00      	cmp	r4, #0
 8006566:	d1f7      	bne.n	8006558 <_fwalk_sglue+0xc>
 8006568:	4630      	mov	r0, r6
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	89ab      	ldrh	r3, [r5, #12]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d907      	bls.n	8006584 <_fwalk_sglue+0x38>
 8006574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006578:	3301      	adds	r3, #1
 800657a:	d003      	beq.n	8006584 <_fwalk_sglue+0x38>
 800657c:	4629      	mov	r1, r5
 800657e:	4638      	mov	r0, r7
 8006580:	47c0      	blx	r8
 8006582:	4306      	orrs	r6, r0
 8006584:	3568      	adds	r5, #104	@ 0x68
 8006586:	e7e9      	b.n	800655c <_fwalk_sglue+0x10>

08006588 <siprintf>:
 8006588:	b40e      	push	{r1, r2, r3}
 800658a:	b500      	push	{lr}
 800658c:	b09c      	sub	sp, #112	@ 0x70
 800658e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006590:	9002      	str	r0, [sp, #8]
 8006592:	9006      	str	r0, [sp, #24]
 8006594:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006598:	4809      	ldr	r0, [pc, #36]	@ (80065c0 <siprintf+0x38>)
 800659a:	9107      	str	r1, [sp, #28]
 800659c:	9104      	str	r1, [sp, #16]
 800659e:	4909      	ldr	r1, [pc, #36]	@ (80065c4 <siprintf+0x3c>)
 80065a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a4:	9105      	str	r1, [sp, #20]
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	a902      	add	r1, sp, #8
 80065ac:	f002 fbb6 	bl	8008d1c <_svfiprintf_r>
 80065b0:	9b02      	ldr	r3, [sp, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	b01c      	add	sp, #112	@ 0x70
 80065b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065bc:	b003      	add	sp, #12
 80065be:	4770      	bx	lr
 80065c0:	20000020 	.word	0x20000020
 80065c4:	ffff0208 	.word	0xffff0208

080065c8 <__sread>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	460c      	mov	r4, r1
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	f000 f86c 	bl	80066ac <_read_r>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	bfab      	itete	ge
 80065d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065da:	89a3      	ldrhlt	r3, [r4, #12]
 80065dc:	181b      	addge	r3, r3, r0
 80065de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065e2:	bfac      	ite	ge
 80065e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065e6:	81a3      	strhlt	r3, [r4, #12]
 80065e8:	bd10      	pop	{r4, pc}

080065ea <__swrite>:
 80065ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	461f      	mov	r7, r3
 80065f0:	898b      	ldrh	r3, [r1, #12]
 80065f2:	05db      	lsls	r3, r3, #23
 80065f4:	4605      	mov	r5, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	4616      	mov	r6, r2
 80065fa:	d505      	bpl.n	8006608 <__swrite+0x1e>
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	2302      	movs	r3, #2
 8006602:	2200      	movs	r2, #0
 8006604:	f000 f840 	bl	8006688 <_lseek_r>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	4632      	mov	r2, r6
 8006616:	463b      	mov	r3, r7
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	f000 b857 	b.w	80066d0 <_write_r>

08006622 <__sseek>:
 8006622:	b510      	push	{r4, lr}
 8006624:	460c      	mov	r4, r1
 8006626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662a:	f000 f82d 	bl	8006688 <_lseek_r>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	bf15      	itete	ne
 8006634:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800663a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800663e:	81a3      	strheq	r3, [r4, #12]
 8006640:	bf18      	it	ne
 8006642:	81a3      	strhne	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__sclose>:
 8006646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664a:	f000 b80d 	b.w	8006668 <_close_r>

0800664e <memset>:
 800664e:	4402      	add	r2, r0
 8006650:	4603      	mov	r3, r0
 8006652:	4293      	cmp	r3, r2
 8006654:	d100      	bne.n	8006658 <memset+0xa>
 8006656:	4770      	bx	lr
 8006658:	f803 1b01 	strb.w	r1, [r3], #1
 800665c:	e7f9      	b.n	8006652 <memset+0x4>
	...

08006660 <_localeconv_r>:
 8006660:	4800      	ldr	r0, [pc, #0]	@ (8006664 <_localeconv_r+0x4>)
 8006662:	4770      	bx	lr
 8006664:	20000160 	.word	0x20000160

08006668 <_close_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	@ (8006684 <_close_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fb feea 	bl	800244c <_close>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_close_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_close_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	200004c4 	.word	0x200004c4

08006688 <_lseek_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	@ (80066a8 <_lseek_r+0x20>)
 800668c:	4604      	mov	r4, r0
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fb feff 	bl	800249a <_lseek>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_lseek_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_lseek_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	200004c4 	.word	0x200004c4

080066ac <_read_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	@ (80066cc <_read_r+0x20>)
 80066b0:	4604      	mov	r4, r0
 80066b2:	4608      	mov	r0, r1
 80066b4:	4611      	mov	r1, r2
 80066b6:	2200      	movs	r2, #0
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fb fe8d 	bl	80023da <_read>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_read_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_read_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	200004c4 	.word	0x200004c4

080066d0 <_write_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	@ (80066f0 <_write_r+0x20>)
 80066d4:	4604      	mov	r4, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fb fe98 	bl	8002414 <_write>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_write_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_write_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200004c4 	.word	0x200004c4

080066f4 <__errno>:
 80066f4:	4b01      	ldr	r3, [pc, #4]	@ (80066fc <__errno+0x8>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000020 	.word	0x20000020

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	@ (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	@ (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	@ (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	@ (8006744 <__libc_init_array+0x44>)
 8006714:	f003 fb72 	bl	8009dfc <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	0800a278 	.word	0x0800a278
 800673c:	0800a278 	.word	0x0800a278
 8006740:	0800a278 	.word	0x0800a278
 8006744:	0800a27c 	.word	0x0800a27c

08006748 <__retarget_lock_init_recursive>:
 8006748:	4770      	bx	lr

0800674a <__retarget_lock_acquire_recursive>:
 800674a:	4770      	bx	lr

0800674c <__retarget_lock_release_recursive>:
 800674c:	4770      	bx	lr
	...

08006750 <nanf>:
 8006750:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006758 <nanf+0x8>
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	7fc00000 	.word	0x7fc00000

0800675c <quorem>:
 800675c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	6903      	ldr	r3, [r0, #16]
 8006762:	690c      	ldr	r4, [r1, #16]
 8006764:	42a3      	cmp	r3, r4
 8006766:	4607      	mov	r7, r0
 8006768:	db7e      	blt.n	8006868 <quorem+0x10c>
 800676a:	3c01      	subs	r4, #1
 800676c:	f101 0814 	add.w	r8, r1, #20
 8006770:	00a3      	lsls	r3, r4, #2
 8006772:	f100 0514 	add.w	r5, r0, #20
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006786:	3301      	adds	r3, #1
 8006788:	429a      	cmp	r2, r3
 800678a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800678e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006792:	d32e      	bcc.n	80067f2 <quorem+0x96>
 8006794:	f04f 0a00 	mov.w	sl, #0
 8006798:	46c4      	mov	ip, r8
 800679a:	46ae      	mov	lr, r5
 800679c:	46d3      	mov	fp, sl
 800679e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067a2:	b298      	uxth	r0, r3
 80067a4:	fb06 a000 	mla	r0, r6, r0, sl
 80067a8:	0c02      	lsrs	r2, r0, #16
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	fb06 2303 	mla	r3, r6, r3, r2
 80067b0:	f8de 2000 	ldr.w	r2, [lr]
 80067b4:	b280      	uxth	r0, r0
 80067b6:	b292      	uxth	r2, r2
 80067b8:	1a12      	subs	r2, r2, r0
 80067ba:	445a      	add	r2, fp
 80067bc:	f8de 0000 	ldr.w	r0, [lr]
 80067c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80067ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80067ce:	b292      	uxth	r2, r2
 80067d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067d4:	45e1      	cmp	r9, ip
 80067d6:	f84e 2b04 	str.w	r2, [lr], #4
 80067da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067de:	d2de      	bcs.n	800679e <quorem+0x42>
 80067e0:	9b00      	ldr	r3, [sp, #0]
 80067e2:	58eb      	ldr	r3, [r5, r3]
 80067e4:	b92b      	cbnz	r3, 80067f2 <quorem+0x96>
 80067e6:	9b01      	ldr	r3, [sp, #4]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	429d      	cmp	r5, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	d32f      	bcc.n	8006850 <quorem+0xf4>
 80067f0:	613c      	str	r4, [r7, #16]
 80067f2:	4638      	mov	r0, r7
 80067f4:	f001 f9c4 	bl	8007b80 <__mcmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	db25      	blt.n	8006848 <quorem+0xec>
 80067fc:	4629      	mov	r1, r5
 80067fe:	2000      	movs	r0, #0
 8006800:	f858 2b04 	ldr.w	r2, [r8], #4
 8006804:	f8d1 c000 	ldr.w	ip, [r1]
 8006808:	fa1f fe82 	uxth.w	lr, r2
 800680c:	fa1f f38c 	uxth.w	r3, ip
 8006810:	eba3 030e 	sub.w	r3, r3, lr
 8006814:	4403      	add	r3, r0
 8006816:	0c12      	lsrs	r2, r2, #16
 8006818:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800681c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006820:	b29b      	uxth	r3, r3
 8006822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006826:	45c1      	cmp	r9, r8
 8006828:	f841 3b04 	str.w	r3, [r1], #4
 800682c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006830:	d2e6      	bcs.n	8006800 <quorem+0xa4>
 8006832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800683a:	b922      	cbnz	r2, 8006846 <quorem+0xea>
 800683c:	3b04      	subs	r3, #4
 800683e:	429d      	cmp	r5, r3
 8006840:	461a      	mov	r2, r3
 8006842:	d30b      	bcc.n	800685c <quorem+0x100>
 8006844:	613c      	str	r4, [r7, #16]
 8006846:	3601      	adds	r6, #1
 8006848:	4630      	mov	r0, r6
 800684a:	b003      	add	sp, #12
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	3b04      	subs	r3, #4
 8006854:	2a00      	cmp	r2, #0
 8006856:	d1cb      	bne.n	80067f0 <quorem+0x94>
 8006858:	3c01      	subs	r4, #1
 800685a:	e7c6      	b.n	80067ea <quorem+0x8e>
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	3b04      	subs	r3, #4
 8006860:	2a00      	cmp	r2, #0
 8006862:	d1ef      	bne.n	8006844 <quorem+0xe8>
 8006864:	3c01      	subs	r4, #1
 8006866:	e7ea      	b.n	800683e <quorem+0xe2>
 8006868:	2000      	movs	r0, #0
 800686a:	e7ee      	b.n	800684a <quorem+0xee>
 800686c:	0000      	movs	r0, r0
	...

08006870 <_dtoa_r>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	69c7      	ldr	r7, [r0, #28]
 8006876:	b099      	sub	sp, #100	@ 0x64
 8006878:	ed8d 0b02 	vstr	d0, [sp, #8]
 800687c:	ec55 4b10 	vmov	r4, r5, d0
 8006880:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006882:	9109      	str	r1, [sp, #36]	@ 0x24
 8006884:	4683      	mov	fp, r0
 8006886:	920e      	str	r2, [sp, #56]	@ 0x38
 8006888:	9313      	str	r3, [sp, #76]	@ 0x4c
 800688a:	b97f      	cbnz	r7, 80068ac <_dtoa_r+0x3c>
 800688c:	2010      	movs	r0, #16
 800688e:	f000 fdfd 	bl	800748c <malloc>
 8006892:	4602      	mov	r2, r0
 8006894:	f8cb 001c 	str.w	r0, [fp, #28]
 8006898:	b920      	cbnz	r0, 80068a4 <_dtoa_r+0x34>
 800689a:	4ba7      	ldr	r3, [pc, #668]	@ (8006b38 <_dtoa_r+0x2c8>)
 800689c:	21ef      	movs	r1, #239	@ 0xef
 800689e:	48a7      	ldr	r0, [pc, #668]	@ (8006b3c <_dtoa_r+0x2cc>)
 80068a0:	f002 fc36 	bl	8009110 <__assert_func>
 80068a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068a8:	6007      	str	r7, [r0, #0]
 80068aa:	60c7      	str	r7, [r0, #12]
 80068ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	b159      	cbz	r1, 80068cc <_dtoa_r+0x5c>
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	604a      	str	r2, [r1, #4]
 80068b8:	2301      	movs	r3, #1
 80068ba:	4093      	lsls	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
 80068be:	4658      	mov	r0, fp
 80068c0:	f000 feda 	bl	8007678 <_Bfree>
 80068c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	1e2b      	subs	r3, r5, #0
 80068ce:	bfb9      	ittee	lt
 80068d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80068d4:	9303      	strlt	r3, [sp, #12]
 80068d6:	2300      	movge	r3, #0
 80068d8:	6033      	strge	r3, [r6, #0]
 80068da:	9f03      	ldr	r7, [sp, #12]
 80068dc:	4b98      	ldr	r3, [pc, #608]	@ (8006b40 <_dtoa_r+0x2d0>)
 80068de:	bfbc      	itt	lt
 80068e0:	2201      	movlt	r2, #1
 80068e2:	6032      	strlt	r2, [r6, #0]
 80068e4:	43bb      	bics	r3, r7
 80068e6:	d112      	bne.n	800690e <_dtoa_r+0x9e>
 80068e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068f4:	4323      	orrs	r3, r4
 80068f6:	f000 854d 	beq.w	8007394 <_dtoa_r+0xb24>
 80068fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006b54 <_dtoa_r+0x2e4>
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 854f 	beq.w	80073a4 <_dtoa_r+0xb34>
 8006906:	f10a 0303 	add.w	r3, sl, #3
 800690a:	f000 bd49 	b.w	80073a0 <_dtoa_r+0xb30>
 800690e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	ec51 0b17 	vmov	r0, r1, d7
 8006918:	2300      	movs	r3, #0
 800691a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800691e:	f7fa f8f3 	bl	8000b08 <__aeabi_dcmpeq>
 8006922:	4680      	mov	r8, r0
 8006924:	b158      	cbz	r0, 800693e <_dtoa_r+0xce>
 8006926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006928:	2301      	movs	r3, #1
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800692e:	b113      	cbz	r3, 8006936 <_dtoa_r+0xc6>
 8006930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006932:	4b84      	ldr	r3, [pc, #528]	@ (8006b44 <_dtoa_r+0x2d4>)
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006b58 <_dtoa_r+0x2e8>
 800693a:	f000 bd33 	b.w	80073a4 <_dtoa_r+0xb34>
 800693e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006942:	aa16      	add	r2, sp, #88	@ 0x58
 8006944:	a917      	add	r1, sp, #92	@ 0x5c
 8006946:	4658      	mov	r0, fp
 8006948:	f001 fa3a 	bl	8007dc0 <__d2b>
 800694c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006950:	4681      	mov	r9, r0
 8006952:	2e00      	cmp	r6, #0
 8006954:	d077      	beq.n	8006a46 <_dtoa_r+0x1d6>
 8006956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006958:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006964:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006968:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800696c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006970:	4619      	mov	r1, r3
 8006972:	2200      	movs	r2, #0
 8006974:	4b74      	ldr	r3, [pc, #464]	@ (8006b48 <_dtoa_r+0x2d8>)
 8006976:	f7f9 fca7 	bl	80002c8 <__aeabi_dsub>
 800697a:	a369      	add	r3, pc, #420	@ (adr r3, 8006b20 <_dtoa_r+0x2b0>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 fe5a 	bl	8000638 <__aeabi_dmul>
 8006984:	a368      	add	r3, pc, #416	@ (adr r3, 8006b28 <_dtoa_r+0x2b8>)
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f7f9 fc9f 	bl	80002cc <__adddf3>
 800698e:	4604      	mov	r4, r0
 8006990:	4630      	mov	r0, r6
 8006992:	460d      	mov	r5, r1
 8006994:	f7f9 fde6 	bl	8000564 <__aeabi_i2d>
 8006998:	a365      	add	r3, pc, #404	@ (adr r3, 8006b30 <_dtoa_r+0x2c0>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 fe4b 	bl	8000638 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 fc8f 	bl	80002cc <__adddf3>
 80069ae:	4604      	mov	r4, r0
 80069b0:	460d      	mov	r5, r1
 80069b2:	f7fa f8f1 	bl	8000b98 <__aeabi_d2iz>
 80069b6:	2200      	movs	r2, #0
 80069b8:	4607      	mov	r7, r0
 80069ba:	2300      	movs	r3, #0
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7fa f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80069c4:	b140      	cbz	r0, 80069d8 <_dtoa_r+0x168>
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7f9 fdcc 	bl	8000564 <__aeabi_i2d>
 80069cc:	4622      	mov	r2, r4
 80069ce:	462b      	mov	r3, r5
 80069d0:	f7fa f89a 	bl	8000b08 <__aeabi_dcmpeq>
 80069d4:	b900      	cbnz	r0, 80069d8 <_dtoa_r+0x168>
 80069d6:	3f01      	subs	r7, #1
 80069d8:	2f16      	cmp	r7, #22
 80069da:	d851      	bhi.n	8006a80 <_dtoa_r+0x210>
 80069dc:	4b5b      	ldr	r3, [pc, #364]	@ (8006b4c <_dtoa_r+0x2dc>)
 80069de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ea:	f7fa f897 	bl	8000b1c <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d048      	beq.n	8006a84 <_dtoa_r+0x214>
 80069f2:	3f01      	subs	r7, #1
 80069f4:	2300      	movs	r3, #0
 80069f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80069f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80069fa:	1b9b      	subs	r3, r3, r6
 80069fc:	1e5a      	subs	r2, r3, #1
 80069fe:	bf44      	itt	mi
 8006a00:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a04:	2300      	movmi	r3, #0
 8006a06:	9208      	str	r2, [sp, #32]
 8006a08:	bf54      	ite	pl
 8006a0a:	f04f 0800 	movpl.w	r8, #0
 8006a0e:	9308      	strmi	r3, [sp, #32]
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	db39      	blt.n	8006a88 <_dtoa_r+0x218>
 8006a14:	9b08      	ldr	r3, [sp, #32]
 8006a16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a18:	443b      	add	r3, r7
 8006a1a:	9308      	str	r3, [sp, #32]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	d864      	bhi.n	8006af0 <_dtoa_r+0x280>
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	bfc4      	itt	gt
 8006a2a:	3b04      	subgt	r3, #4
 8006a2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a30:	f1a3 0302 	sub.w	r3, r3, #2
 8006a34:	bfcc      	ite	gt
 8006a36:	2400      	movgt	r4, #0
 8006a38:	2401      	movle	r4, #1
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d863      	bhi.n	8006b06 <_dtoa_r+0x296>
 8006a3e:	e8df f003 	tbb	[pc, r3]
 8006a42:	372a      	.short	0x372a
 8006a44:	5535      	.short	0x5535
 8006a46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006a4a:	441e      	add	r6, r3
 8006a4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	bfc1      	itttt	gt
 8006a54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a58:	409f      	lslgt	r7, r3
 8006a5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a62:	bfd6      	itet	le
 8006a64:	f1c3 0320 	rsble	r3, r3, #32
 8006a68:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a6c:	fa04 f003 	lslle.w	r0, r4, r3
 8006a70:	f7f9 fd68 	bl	8000544 <__aeabi_ui2d>
 8006a74:	2201      	movs	r2, #1
 8006a76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a7a:	3e01      	subs	r6, #1
 8006a7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a7e:	e777      	b.n	8006970 <_dtoa_r+0x100>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e7b8      	b.n	80069f6 <_dtoa_r+0x186>
 8006a84:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a86:	e7b7      	b.n	80069f8 <_dtoa_r+0x188>
 8006a88:	427b      	negs	r3, r7
 8006a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	eba8 0807 	sub.w	r8, r8, r7
 8006a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a94:	e7c4      	b.n	8006a20 <_dtoa_r+0x1b0>
 8006a96:	2300      	movs	r3, #0
 8006a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc35      	bgt.n	8006b0c <_dtoa_r+0x29c>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	9307      	str	r3, [sp, #28]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006aaa:	e00b      	b.n	8006ac4 <_dtoa_r+0x254>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7f3      	b.n	8006a98 <_dtoa_r+0x228>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	bfb8      	it	lt
 8006ac2:	2301      	movlt	r3, #1
 8006ac4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2204      	movs	r2, #4
 8006acc:	f102 0514 	add.w	r5, r2, #20
 8006ad0:	429d      	cmp	r5, r3
 8006ad2:	d91f      	bls.n	8006b14 <_dtoa_r+0x2a4>
 8006ad4:	6041      	str	r1, [r0, #4]
 8006ad6:	4658      	mov	r0, fp
 8006ad8:	f000 fd8e 	bl	80075f8 <_Balloc>
 8006adc:	4682      	mov	sl, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d13c      	bne.n	8006b5c <_dtoa_r+0x2ec>
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b50 <_dtoa_r+0x2e0>)
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006aea:	e6d8      	b.n	800689e <_dtoa_r+0x2e>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e7e0      	b.n	8006ab2 <_dtoa_r+0x242>
 8006af0:	2401      	movs	r4, #1
 8006af2:	2300      	movs	r3, #0
 8006af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	2200      	movs	r2, #0
 8006b02:	2312      	movs	r3, #18
 8006b04:	e7d0      	b.n	8006aa8 <_dtoa_r+0x238>
 8006b06:	2301      	movs	r3, #1
 8006b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b0a:	e7f5      	b.n	8006af8 <_dtoa_r+0x288>
 8006b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	e7d7      	b.n	8006ac4 <_dtoa_r+0x254>
 8006b14:	3101      	adds	r1, #1
 8006b16:	0052      	lsls	r2, r2, #1
 8006b18:	e7d8      	b.n	8006acc <_dtoa_r+0x25c>
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w
 8006b20:	636f4361 	.word	0x636f4361
 8006b24:	3fd287a7 	.word	0x3fd287a7
 8006b28:	8b60c8b3 	.word	0x8b60c8b3
 8006b2c:	3fc68a28 	.word	0x3fc68a28
 8006b30:	509f79fb 	.word	0x509f79fb
 8006b34:	3fd34413 	.word	0x3fd34413
 8006b38:	08009e8a 	.word	0x08009e8a
 8006b3c:	08009ea1 	.word	0x08009ea1
 8006b40:	7ff00000 	.word	0x7ff00000
 8006b44:	08009e55 	.word	0x08009e55
 8006b48:	3ff80000 	.word	0x3ff80000
 8006b4c:	08009f98 	.word	0x08009f98
 8006b50:	08009ef9 	.word	0x08009ef9
 8006b54:	08009e86 	.word	0x08009e86
 8006b58:	08009e54 	.word	0x08009e54
 8006b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b60:	6018      	str	r0, [r3, #0]
 8006b62:	9b07      	ldr	r3, [sp, #28]
 8006b64:	2b0e      	cmp	r3, #14
 8006b66:	f200 80a4 	bhi.w	8006cb2 <_dtoa_r+0x442>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	f000 80a1 	beq.w	8006cb2 <_dtoa_r+0x442>
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	dd33      	ble.n	8006bdc <_dtoa_r+0x36c>
 8006b74:	4bad      	ldr	r3, [pc, #692]	@ (8006e2c <_dtoa_r+0x5bc>)
 8006b76:	f007 020f 	and.w	r2, r7, #15
 8006b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b7e:	ed93 7b00 	vldr	d7, [r3]
 8006b82:	05f8      	lsls	r0, r7, #23
 8006b84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b8c:	d516      	bpl.n	8006bbc <_dtoa_r+0x34c>
 8006b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8006e30 <_dtoa_r+0x5c0>)
 8006b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b98:	f7f9 fe78 	bl	800088c <__aeabi_ddiv>
 8006b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba0:	f004 040f 	and.w	r4, r4, #15
 8006ba4:	2603      	movs	r6, #3
 8006ba6:	4da2      	ldr	r5, [pc, #648]	@ (8006e30 <_dtoa_r+0x5c0>)
 8006ba8:	b954      	cbnz	r4, 8006bc0 <_dtoa_r+0x350>
 8006baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb2:	f7f9 fe6b 	bl	800088c <__aeabi_ddiv>
 8006bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bba:	e028      	b.n	8006c0e <_dtoa_r+0x39e>
 8006bbc:	2602      	movs	r6, #2
 8006bbe:	e7f2      	b.n	8006ba6 <_dtoa_r+0x336>
 8006bc0:	07e1      	lsls	r1, r4, #31
 8006bc2:	d508      	bpl.n	8006bd6 <_dtoa_r+0x366>
 8006bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bcc:	f7f9 fd34 	bl	8000638 <__aeabi_dmul>
 8006bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd4:	3601      	adds	r6, #1
 8006bd6:	1064      	asrs	r4, r4, #1
 8006bd8:	3508      	adds	r5, #8
 8006bda:	e7e5      	b.n	8006ba8 <_dtoa_r+0x338>
 8006bdc:	f000 80d2 	beq.w	8006d84 <_dtoa_r+0x514>
 8006be0:	427c      	negs	r4, r7
 8006be2:	4b92      	ldr	r3, [pc, #584]	@ (8006e2c <_dtoa_r+0x5bc>)
 8006be4:	4d92      	ldr	r5, [pc, #584]	@ (8006e30 <_dtoa_r+0x5c0>)
 8006be6:	f004 020f 	and.w	r2, r4, #15
 8006bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bf6:	f7f9 fd1f 	bl	8000638 <__aeabi_dmul>
 8006bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bfe:	1124      	asrs	r4, r4, #4
 8006c00:	2300      	movs	r3, #0
 8006c02:	2602      	movs	r6, #2
 8006c04:	2c00      	cmp	r4, #0
 8006c06:	f040 80b2 	bne.w	8006d6e <_dtoa_r+0x4fe>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1d3      	bne.n	8006bb6 <_dtoa_r+0x346>
 8006c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 80b7 	beq.w	8006d88 <_dtoa_r+0x518>
 8006c1a:	4b86      	ldr	r3, [pc, #536]	@ (8006e34 <_dtoa_r+0x5c4>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 ff7b 	bl	8000b1c <__aeabi_dcmplt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f000 80ae 	beq.w	8006d88 <_dtoa_r+0x518>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80aa 	beq.w	8006d88 <_dtoa_r+0x518>
 8006c34:	9b00      	ldr	r3, [sp, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dd37      	ble.n	8006caa <_dtoa_r+0x43a>
 8006c3a:	1e7b      	subs	r3, r7, #1
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4b7d      	ldr	r3, [pc, #500]	@ (8006e38 <_dtoa_r+0x5c8>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 fcf7 	bl	8000638 <__aeabi_dmul>
 8006c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4e:	9c00      	ldr	r4, [sp, #0]
 8006c50:	3601      	adds	r6, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7f9 fc86 	bl	8000564 <__aeabi_i2d>
 8006c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	4b76      	ldr	r3, [pc, #472]	@ (8006e3c <_dtoa_r+0x5cc>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	f7f9 fb32 	bl	80002cc <__adddf3>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c6e:	2c00      	cmp	r4, #0
 8006c70:	f040 808d 	bne.w	8006d8e <_dtoa_r+0x51e>
 8006c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c78:	4b71      	ldr	r3, [pc, #452]	@ (8006e40 <_dtoa_r+0x5d0>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 fb24 	bl	80002c8 <__aeabi_dsub>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4633      	mov	r3, r6
 8006c8c:	f7f9 ff64 	bl	8000b58 <__aeabi_dcmpgt>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f040 828b 	bne.w	80071ac <_dtoa_r+0x93c>
 8006c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ca0:	f7f9 ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f040 8128 	bne.w	8006efa <_dtoa_r+0x68a>
 8006caa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006cb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f2c0 815a 	blt.w	8006f6e <_dtoa_r+0x6fe>
 8006cba:	2f0e      	cmp	r7, #14
 8006cbc:	f300 8157 	bgt.w	8006f6e <_dtoa_r+0x6fe>
 8006cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e2c <_dtoa_r+0x5bc>)
 8006cc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cc6:	ed93 7b00 	vldr	d7, [r3]
 8006cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	ed8d 7b00 	vstr	d7, [sp]
 8006cd2:	da03      	bge.n	8006cdc <_dtoa_r+0x46c>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f340 8101 	ble.w	8006ede <_dtoa_r+0x66e>
 8006cdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ce0:	4656      	mov	r6, sl
 8006ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7f9 fdcf 	bl	800088c <__aeabi_ddiv>
 8006cee:	f7f9 ff53 	bl	8000b98 <__aeabi_d2iz>
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	f7f9 fc36 	bl	8000564 <__aeabi_i2d>
 8006cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cfc:	f7f9 fc9c 	bl	8000638 <__aeabi_dmul>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d0c:	f7f9 fadc 	bl	80002c8 <__aeabi_dsub>
 8006d10:	f806 4b01 	strb.w	r4, [r6], #1
 8006d14:	9d07      	ldr	r5, [sp, #28]
 8006d16:	eba6 040a 	sub.w	r4, r6, sl
 8006d1a:	42a5      	cmp	r5, r4
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	f040 8117 	bne.w	8006f52 <_dtoa_r+0x6e2>
 8006d24:	f7f9 fad2 	bl	80002cc <__adddf3>
 8006d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	460d      	mov	r5, r1
 8006d30:	f7f9 ff12 	bl	8000b58 <__aeabi_dcmpgt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 80f9 	bne.w	8006f2c <_dtoa_r+0x6bc>
 8006d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fee1 	bl	8000b08 <__aeabi_dcmpeq>
 8006d46:	b118      	cbz	r0, 8006d50 <_dtoa_r+0x4e0>
 8006d48:	f018 0f01 	tst.w	r8, #1
 8006d4c:	f040 80ee 	bne.w	8006f2c <_dtoa_r+0x6bc>
 8006d50:	4649      	mov	r1, r9
 8006d52:	4658      	mov	r0, fp
 8006d54:	f000 fc90 	bl	8007678 <_Bfree>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	7033      	strb	r3, [r6, #0]
 8006d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d5e:	3701      	adds	r7, #1
 8006d60:	601f      	str	r7, [r3, #0]
 8006d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 831d 	beq.w	80073a4 <_dtoa_r+0xb34>
 8006d6a:	601e      	str	r6, [r3, #0]
 8006d6c:	e31a      	b.n	80073a4 <_dtoa_r+0xb34>
 8006d6e:	07e2      	lsls	r2, r4, #31
 8006d70:	d505      	bpl.n	8006d7e <_dtoa_r+0x50e>
 8006d72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d76:	f7f9 fc5f 	bl	8000638 <__aeabi_dmul>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	1064      	asrs	r4, r4, #1
 8006d80:	3508      	adds	r5, #8
 8006d82:	e73f      	b.n	8006c04 <_dtoa_r+0x394>
 8006d84:	2602      	movs	r6, #2
 8006d86:	e742      	b.n	8006c0e <_dtoa_r+0x39e>
 8006d88:	9c07      	ldr	r4, [sp, #28]
 8006d8a:	9704      	str	r7, [sp, #16]
 8006d8c:	e761      	b.n	8006c52 <_dtoa_r+0x3e2>
 8006d8e:	4b27      	ldr	r3, [pc, #156]	@ (8006e2c <_dtoa_r+0x5bc>)
 8006d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d9a:	4454      	add	r4, sl
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d053      	beq.n	8006e48 <_dtoa_r+0x5d8>
 8006da0:	4928      	ldr	r1, [pc, #160]	@ (8006e44 <_dtoa_r+0x5d4>)
 8006da2:	2000      	movs	r0, #0
 8006da4:	f7f9 fd72 	bl	800088c <__aeabi_ddiv>
 8006da8:	4633      	mov	r3, r6
 8006daa:	462a      	mov	r2, r5
 8006dac:	f7f9 fa8c 	bl	80002c8 <__aeabi_dsub>
 8006db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006db4:	4656      	mov	r6, sl
 8006db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dba:	f7f9 feed 	bl	8000b98 <__aeabi_d2iz>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	f7f9 fbd0 	bl	8000564 <__aeabi_i2d>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dcc:	f7f9 fa7c 	bl	80002c8 <__aeabi_dsub>
 8006dd0:	3530      	adds	r5, #48	@ 0x30
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dda:	f806 5b01 	strb.w	r5, [r6], #1
 8006dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006de2:	f7f9 fe9b 	bl	8000b1c <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d171      	bne.n	8006ece <_dtoa_r+0x65e>
 8006dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dee:	4911      	ldr	r1, [pc, #68]	@ (8006e34 <_dtoa_r+0x5c4>)
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7f9 fa69 	bl	80002c8 <__aeabi_dsub>
 8006df6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dfa:	f7f9 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f040 8095 	bne.w	8006f2e <_dtoa_r+0x6be>
 8006e04:	42a6      	cmp	r6, r4
 8006e06:	f43f af50 	beq.w	8006caa <_dtoa_r+0x43a>
 8006e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <_dtoa_r+0x5c8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	f7f9 fc11 	bl	8000638 <__aeabi_dmul>
 8006e16:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <_dtoa_r+0x5c8>)
 8006e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e22:	f7f9 fc09 	bl	8000638 <__aeabi_dmul>
 8006e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e2a:	e7c4      	b.n	8006db6 <_dtoa_r+0x546>
 8006e2c:	08009f98 	.word	0x08009f98
 8006e30:	08009f70 	.word	0x08009f70
 8006e34:	3ff00000 	.word	0x3ff00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	401c0000 	.word	0x401c0000
 8006e40:	40140000 	.word	0x40140000
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7f9 fbf4 	bl	8000638 <__aeabi_dmul>
 8006e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e54:	9415      	str	r4, [sp, #84]	@ 0x54
 8006e56:	4656      	mov	r6, sl
 8006e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5c:	f7f9 fe9c 	bl	8000b98 <__aeabi_d2iz>
 8006e60:	4605      	mov	r5, r0
 8006e62:	f7f9 fb7f 	bl	8000564 <__aeabi_i2d>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6e:	f7f9 fa2b 	bl	80002c8 <__aeabi_dsub>
 8006e72:	3530      	adds	r5, #48	@ 0x30
 8006e74:	f806 5b01 	strb.w	r5, [r6], #1
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	42a6      	cmp	r6, r4
 8006e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	d124      	bne.n	8006ed2 <_dtoa_r+0x662>
 8006e88:	4bac      	ldr	r3, [pc, #688]	@ (800713c <_dtoa_r+0x8cc>)
 8006e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e8e:	f7f9 fa1d 	bl	80002cc <__adddf3>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e9a:	f7f9 fe5d 	bl	8000b58 <__aeabi_dcmpgt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d145      	bne.n	8006f2e <_dtoa_r+0x6be>
 8006ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ea6:	49a5      	ldr	r1, [pc, #660]	@ (800713c <_dtoa_r+0x8cc>)
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f7f9 fa0d 	bl	80002c8 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb6:	f7f9 fe31 	bl	8000b1c <__aeabi_dcmplt>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f43f aef5 	beq.w	8006caa <_dtoa_r+0x43a>
 8006ec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006ec2:	1e73      	subs	r3, r6, #1
 8006ec4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006eca:	2b30      	cmp	r3, #48	@ 0x30
 8006ecc:	d0f8      	beq.n	8006ec0 <_dtoa_r+0x650>
 8006ece:	9f04      	ldr	r7, [sp, #16]
 8006ed0:	e73e      	b.n	8006d50 <_dtoa_r+0x4e0>
 8006ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8007140 <_dtoa_r+0x8d0>)
 8006ed4:	f7f9 fbb0 	bl	8000638 <__aeabi_dmul>
 8006ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006edc:	e7bc      	b.n	8006e58 <_dtoa_r+0x5e8>
 8006ede:	d10c      	bne.n	8006efa <_dtoa_r+0x68a>
 8006ee0:	4b98      	ldr	r3, [pc, #608]	@ (8007144 <_dtoa_r+0x8d4>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee8:	f7f9 fba6 	bl	8000638 <__aeabi_dmul>
 8006eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ef0:	f7f9 fe28 	bl	8000b44 <__aeabi_dcmpge>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f000 8157 	beq.w	80071a8 <_dtoa_r+0x938>
 8006efa:	2400      	movs	r4, #0
 8006efc:	4625      	mov	r5, r4
 8006efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f00:	43db      	mvns	r3, r3
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	4656      	mov	r6, sl
 8006f06:	2700      	movs	r7, #0
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fbb4 	bl	8007678 <_Bfree>
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	d0dc      	beq.n	8006ece <_dtoa_r+0x65e>
 8006f14:	b12f      	cbz	r7, 8006f22 <_dtoa_r+0x6b2>
 8006f16:	42af      	cmp	r7, r5
 8006f18:	d003      	beq.n	8006f22 <_dtoa_r+0x6b2>
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	4658      	mov	r0, fp
 8006f1e:	f000 fbab 	bl	8007678 <_Bfree>
 8006f22:	4629      	mov	r1, r5
 8006f24:	4658      	mov	r0, fp
 8006f26:	f000 fba7 	bl	8007678 <_Bfree>
 8006f2a:	e7d0      	b.n	8006ece <_dtoa_r+0x65e>
 8006f2c:	9704      	str	r7, [sp, #16]
 8006f2e:	4633      	mov	r3, r6
 8006f30:	461e      	mov	r6, r3
 8006f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f36:	2a39      	cmp	r2, #57	@ 0x39
 8006f38:	d107      	bne.n	8006f4a <_dtoa_r+0x6da>
 8006f3a:	459a      	cmp	sl, r3
 8006f3c:	d1f8      	bne.n	8006f30 <_dtoa_r+0x6c0>
 8006f3e:	9a04      	ldr	r2, [sp, #16]
 8006f40:	3201      	adds	r2, #1
 8006f42:	9204      	str	r2, [sp, #16]
 8006f44:	2230      	movs	r2, #48	@ 0x30
 8006f46:	f88a 2000 	strb.w	r2, [sl]
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	3201      	adds	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	e7bd      	b.n	8006ece <_dtoa_r+0x65e>
 8006f52:	4b7b      	ldr	r3, [pc, #492]	@ (8007140 <_dtoa_r+0x8d0>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	f7f9 fb6f 	bl	8000638 <__aeabi_dmul>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	f7f9 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f43f aebb 	beq.w	8006ce2 <_dtoa_r+0x472>
 8006f6c:	e6f0      	b.n	8006d50 <_dtoa_r+0x4e0>
 8006f6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	f000 80db 	beq.w	800712c <_dtoa_r+0x8bc>
 8006f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f78:	2a01      	cmp	r2, #1
 8006f7a:	f300 80bf 	bgt.w	80070fc <_dtoa_r+0x88c>
 8006f7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	f000 80b7 	beq.w	80070f4 <_dtoa_r+0x884>
 8006f86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f8c:	4646      	mov	r6, r8
 8006f8e:	9a08      	ldr	r2, [sp, #32]
 8006f90:	2101      	movs	r1, #1
 8006f92:	441a      	add	r2, r3
 8006f94:	4658      	mov	r0, fp
 8006f96:	4498      	add	r8, r3
 8006f98:	9208      	str	r2, [sp, #32]
 8006f9a:	f000 fc6b 	bl	8007874 <__i2b>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b15e      	cbz	r6, 8006fba <_dtoa_r+0x74a>
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dd08      	ble.n	8006fba <_dtoa_r+0x74a>
 8006fa8:	42b3      	cmp	r3, r6
 8006faa:	9a08      	ldr	r2, [sp, #32]
 8006fac:	bfa8      	it	ge
 8006fae:	4633      	movge	r3, r6
 8006fb0:	eba8 0803 	sub.w	r8, r8, r3
 8006fb4:	1af6      	subs	r6, r6, r3
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	9308      	str	r3, [sp, #32]
 8006fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fbc:	b1f3      	cbz	r3, 8006ffc <_dtoa_r+0x78c>
 8006fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80b7 	beq.w	8007134 <_dtoa_r+0x8c4>
 8006fc6:	b18c      	cbz	r4, 8006fec <_dtoa_r+0x77c>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4658      	mov	r0, fp
 8006fce:	f000 fd11 	bl	80079f4 <__pow5mult>
 8006fd2:	464a      	mov	r2, r9
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	4658      	mov	r0, fp
 8006fda:	f000 fc61 	bl	80078a0 <__multiply>
 8006fde:	4649      	mov	r1, r9
 8006fe0:	9004      	str	r0, [sp, #16]
 8006fe2:	4658      	mov	r0, fp
 8006fe4:	f000 fb48 	bl	8007678 <_Bfree>
 8006fe8:	9b04      	ldr	r3, [sp, #16]
 8006fea:	4699      	mov	r9, r3
 8006fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fee:	1b1a      	subs	r2, r3, r4
 8006ff0:	d004      	beq.n	8006ffc <_dtoa_r+0x78c>
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	f000 fcfd 	bl	80079f4 <__pow5mult>
 8006ffa:	4681      	mov	r9, r0
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 fc38 	bl	8007874 <__i2b>
 8007004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007006:	4604      	mov	r4, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 81cf 	beq.w	80073ac <_dtoa_r+0xb3c>
 800700e:	461a      	mov	r2, r3
 8007010:	4601      	mov	r1, r0
 8007012:	4658      	mov	r0, fp
 8007014:	f000 fcee 	bl	80079f4 <__pow5mult>
 8007018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800701a:	2b01      	cmp	r3, #1
 800701c:	4604      	mov	r4, r0
 800701e:	f300 8095 	bgt.w	800714c <_dtoa_r+0x8dc>
 8007022:	9b02      	ldr	r3, [sp, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 8087 	bne.w	8007138 <_dtoa_r+0x8c8>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 8089 	bne.w	8007148 <_dtoa_r+0x8d8>
 8007036:	9b03      	ldr	r3, [sp, #12]
 8007038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800703c:	0d1b      	lsrs	r3, r3, #20
 800703e:	051b      	lsls	r3, r3, #20
 8007040:	b12b      	cbz	r3, 800704e <_dtoa_r+0x7de>
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	3301      	adds	r3, #1
 8007046:	9308      	str	r3, [sp, #32]
 8007048:	f108 0801 	add.w	r8, r8, #1
 800704c:	2301      	movs	r3, #1
 800704e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 81b0 	beq.w	80073b8 <_dtoa_r+0xb48>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800705e:	6918      	ldr	r0, [r3, #16]
 8007060:	f000 fbbc 	bl	80077dc <__hi0bits>
 8007064:	f1c0 0020 	rsb	r0, r0, #32
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	4418      	add	r0, r3
 800706c:	f010 001f 	ands.w	r0, r0, #31
 8007070:	d077      	beq.n	8007162 <_dtoa_r+0x8f2>
 8007072:	f1c0 0320 	rsb	r3, r0, #32
 8007076:	2b04      	cmp	r3, #4
 8007078:	dd6b      	ble.n	8007152 <_dtoa_r+0x8e2>
 800707a:	9b08      	ldr	r3, [sp, #32]
 800707c:	f1c0 001c 	rsb	r0, r0, #28
 8007080:	4403      	add	r3, r0
 8007082:	4480      	add	r8, r0
 8007084:	4406      	add	r6, r0
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	f1b8 0f00 	cmp.w	r8, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x82a>
 800708e:	4649      	mov	r1, r9
 8007090:	4642      	mov	r2, r8
 8007092:	4658      	mov	r0, fp
 8007094:	f000 fd08 	bl	8007aa8 <__lshift>
 8007098:	4681      	mov	r9, r0
 800709a:	9b08      	ldr	r3, [sp, #32]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dd05      	ble.n	80070ac <_dtoa_r+0x83c>
 80070a0:	4621      	mov	r1, r4
 80070a2:	461a      	mov	r2, r3
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 fcff 	bl	8007aa8 <__lshift>
 80070aa:	4604      	mov	r4, r0
 80070ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d059      	beq.n	8007166 <_dtoa_r+0x8f6>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4648      	mov	r0, r9
 80070b6:	f000 fd63 	bl	8007b80 <__mcmp>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	da53      	bge.n	8007166 <_dtoa_r+0x8f6>
 80070be:	1e7b      	subs	r3, r7, #1
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	4649      	mov	r1, r9
 80070c4:	2300      	movs	r3, #0
 80070c6:	220a      	movs	r2, #10
 80070c8:	4658      	mov	r0, fp
 80070ca:	f000 faf7 	bl	80076bc <__multadd>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d0:	4681      	mov	r9, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8172 	beq.w	80073bc <_dtoa_r+0xb4c>
 80070d8:	2300      	movs	r3, #0
 80070da:	4629      	mov	r1, r5
 80070dc:	220a      	movs	r2, #10
 80070de:	4658      	mov	r0, fp
 80070e0:	f000 faec 	bl	80076bc <__multadd>
 80070e4:	9b00      	ldr	r3, [sp, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	4605      	mov	r5, r0
 80070ea:	dc67      	bgt.n	80071bc <_dtoa_r+0x94c>
 80070ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	dc41      	bgt.n	8007176 <_dtoa_r+0x906>
 80070f2:	e063      	b.n	80071bc <_dtoa_r+0x94c>
 80070f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070fa:	e746      	b.n	8006f8a <_dtoa_r+0x71a>
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	1e5c      	subs	r4, r3, #1
 8007100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007102:	42a3      	cmp	r3, r4
 8007104:	bfbf      	itttt	lt
 8007106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007108:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800710a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800710c:	1ae3      	sublt	r3, r4, r3
 800710e:	bfb4      	ite	lt
 8007110:	18d2      	addlt	r2, r2, r3
 8007112:	1b1c      	subge	r4, r3, r4
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	bfbc      	itt	lt
 8007118:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800711a:	2400      	movlt	r4, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfb5      	itete	lt
 8007120:	eba8 0603 	sublt.w	r6, r8, r3
 8007124:	9b07      	ldrge	r3, [sp, #28]
 8007126:	2300      	movlt	r3, #0
 8007128:	4646      	movge	r6, r8
 800712a:	e730      	b.n	8006f8e <_dtoa_r+0x71e>
 800712c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800712e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007130:	4646      	mov	r6, r8
 8007132:	e735      	b.n	8006fa0 <_dtoa_r+0x730>
 8007134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007136:	e75c      	b.n	8006ff2 <_dtoa_r+0x782>
 8007138:	2300      	movs	r3, #0
 800713a:	e788      	b.n	800704e <_dtoa_r+0x7de>
 800713c:	3fe00000 	.word	0x3fe00000
 8007140:	40240000 	.word	0x40240000
 8007144:	40140000 	.word	0x40140000
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	e780      	b.n	800704e <_dtoa_r+0x7de>
 800714c:	2300      	movs	r3, #0
 800714e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007150:	e782      	b.n	8007058 <_dtoa_r+0x7e8>
 8007152:	d099      	beq.n	8007088 <_dtoa_r+0x818>
 8007154:	9a08      	ldr	r2, [sp, #32]
 8007156:	331c      	adds	r3, #28
 8007158:	441a      	add	r2, r3
 800715a:	4498      	add	r8, r3
 800715c:	441e      	add	r6, r3
 800715e:	9208      	str	r2, [sp, #32]
 8007160:	e792      	b.n	8007088 <_dtoa_r+0x818>
 8007162:	4603      	mov	r3, r0
 8007164:	e7f6      	b.n	8007154 <_dtoa_r+0x8e4>
 8007166:	9b07      	ldr	r3, [sp, #28]
 8007168:	9704      	str	r7, [sp, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc20      	bgt.n	80071b0 <_dtoa_r+0x940>
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007172:	2b02      	cmp	r3, #2
 8007174:	dd1e      	ble.n	80071b4 <_dtoa_r+0x944>
 8007176:	9b00      	ldr	r3, [sp, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f aec0 	bne.w	8006efe <_dtoa_r+0x68e>
 800717e:	4621      	mov	r1, r4
 8007180:	2205      	movs	r2, #5
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fa9a 	bl	80076bc <__multadd>
 8007188:	4601      	mov	r1, r0
 800718a:	4604      	mov	r4, r0
 800718c:	4648      	mov	r0, r9
 800718e:	f000 fcf7 	bl	8007b80 <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	f77f aeb3 	ble.w	8006efe <_dtoa_r+0x68e>
 8007198:	4656      	mov	r6, sl
 800719a:	2331      	movs	r3, #49	@ 0x31
 800719c:	f806 3b01 	strb.w	r3, [r6], #1
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	3301      	adds	r3, #1
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	e6ae      	b.n	8006f06 <_dtoa_r+0x696>
 80071a8:	9c07      	ldr	r4, [sp, #28]
 80071aa:	9704      	str	r7, [sp, #16]
 80071ac:	4625      	mov	r5, r4
 80071ae:	e7f3      	b.n	8007198 <_dtoa_r+0x928>
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 8104 	beq.w	80073c4 <_dtoa_r+0xb54>
 80071bc:	2e00      	cmp	r6, #0
 80071be:	dd05      	ble.n	80071cc <_dtoa_r+0x95c>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4632      	mov	r2, r6
 80071c4:	4658      	mov	r0, fp
 80071c6:	f000 fc6f 	bl	8007aa8 <__lshift>
 80071ca:	4605      	mov	r5, r0
 80071cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d05a      	beq.n	8007288 <_dtoa_r+0xa18>
 80071d2:	6869      	ldr	r1, [r5, #4]
 80071d4:	4658      	mov	r0, fp
 80071d6:	f000 fa0f 	bl	80075f8 <_Balloc>
 80071da:	4606      	mov	r6, r0
 80071dc:	b928      	cbnz	r0, 80071ea <_dtoa_r+0x97a>
 80071de:	4b84      	ldr	r3, [pc, #528]	@ (80073f0 <_dtoa_r+0xb80>)
 80071e0:	4602      	mov	r2, r0
 80071e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071e6:	f7ff bb5a 	b.w	800689e <_dtoa_r+0x2e>
 80071ea:	692a      	ldr	r2, [r5, #16]
 80071ec:	3202      	adds	r2, #2
 80071ee:	0092      	lsls	r2, r2, #2
 80071f0:	f105 010c 	add.w	r1, r5, #12
 80071f4:	300c      	adds	r0, #12
 80071f6:	f001 ff75 	bl	80090e4 <memcpy>
 80071fa:	2201      	movs	r2, #1
 80071fc:	4631      	mov	r1, r6
 80071fe:	4658      	mov	r0, fp
 8007200:	f000 fc52 	bl	8007aa8 <__lshift>
 8007204:	f10a 0301 	add.w	r3, sl, #1
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	4453      	add	r3, sl
 800720e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	462f      	mov	r7, r5
 8007218:	930a      	str	r3, [sp, #40]	@ 0x28
 800721a:	4605      	mov	r5, r0
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	4621      	mov	r1, r4
 8007220:	3b01      	subs	r3, #1
 8007222:	4648      	mov	r0, r9
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	f7ff fa99 	bl	800675c <quorem>
 800722a:	4639      	mov	r1, r7
 800722c:	9002      	str	r0, [sp, #8]
 800722e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007232:	4648      	mov	r0, r9
 8007234:	f000 fca4 	bl	8007b80 <__mcmp>
 8007238:	462a      	mov	r2, r5
 800723a:	9008      	str	r0, [sp, #32]
 800723c:	4621      	mov	r1, r4
 800723e:	4658      	mov	r0, fp
 8007240:	f000 fcba 	bl	8007bb8 <__mdiff>
 8007244:	68c2      	ldr	r2, [r0, #12]
 8007246:	4606      	mov	r6, r0
 8007248:	bb02      	cbnz	r2, 800728c <_dtoa_r+0xa1c>
 800724a:	4601      	mov	r1, r0
 800724c:	4648      	mov	r0, r9
 800724e:	f000 fc97 	bl	8007b80 <__mcmp>
 8007252:	4602      	mov	r2, r0
 8007254:	4631      	mov	r1, r6
 8007256:	4658      	mov	r0, fp
 8007258:	920e      	str	r2, [sp, #56]	@ 0x38
 800725a:	f000 fa0d 	bl	8007678 <_Bfree>
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007262:	9e07      	ldr	r6, [sp, #28]
 8007264:	ea43 0102 	orr.w	r1, r3, r2
 8007268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726a:	4319      	orrs	r1, r3
 800726c:	d110      	bne.n	8007290 <_dtoa_r+0xa20>
 800726e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007272:	d029      	beq.n	80072c8 <_dtoa_r+0xa58>
 8007274:	9b08      	ldr	r3, [sp, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	dd02      	ble.n	8007280 <_dtoa_r+0xa10>
 800727a:	9b02      	ldr	r3, [sp, #8]
 800727c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007280:	9b00      	ldr	r3, [sp, #0]
 8007282:	f883 8000 	strb.w	r8, [r3]
 8007286:	e63f      	b.n	8006f08 <_dtoa_r+0x698>
 8007288:	4628      	mov	r0, r5
 800728a:	e7bb      	b.n	8007204 <_dtoa_r+0x994>
 800728c:	2201      	movs	r2, #1
 800728e:	e7e1      	b.n	8007254 <_dtoa_r+0x9e4>
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	db04      	blt.n	80072a0 <_dtoa_r+0xa30>
 8007296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007298:	430b      	orrs	r3, r1
 800729a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800729c:	430b      	orrs	r3, r1
 800729e:	d120      	bne.n	80072e2 <_dtoa_r+0xa72>
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	dded      	ble.n	8007280 <_dtoa_r+0xa10>
 80072a4:	4649      	mov	r1, r9
 80072a6:	2201      	movs	r2, #1
 80072a8:	4658      	mov	r0, fp
 80072aa:	f000 fbfd 	bl	8007aa8 <__lshift>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4681      	mov	r9, r0
 80072b2:	f000 fc65 	bl	8007b80 <__mcmp>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	dc03      	bgt.n	80072c2 <_dtoa_r+0xa52>
 80072ba:	d1e1      	bne.n	8007280 <_dtoa_r+0xa10>
 80072bc:	f018 0f01 	tst.w	r8, #1
 80072c0:	d0de      	beq.n	8007280 <_dtoa_r+0xa10>
 80072c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072c6:	d1d8      	bne.n	800727a <_dtoa_r+0xa0a>
 80072c8:	9a00      	ldr	r2, [sp, #0]
 80072ca:	2339      	movs	r3, #57	@ 0x39
 80072cc:	7013      	strb	r3, [r2, #0]
 80072ce:	4633      	mov	r3, r6
 80072d0:	461e      	mov	r6, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072d8:	2a39      	cmp	r2, #57	@ 0x39
 80072da:	d052      	beq.n	8007382 <_dtoa_r+0xb12>
 80072dc:	3201      	adds	r2, #1
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	e612      	b.n	8006f08 <_dtoa_r+0x698>
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	dd07      	ble.n	80072f6 <_dtoa_r+0xa86>
 80072e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072ea:	d0ed      	beq.n	80072c8 <_dtoa_r+0xa58>
 80072ec:	9a00      	ldr	r2, [sp, #0]
 80072ee:	f108 0301 	add.w	r3, r8, #1
 80072f2:	7013      	strb	r3, [r2, #0]
 80072f4:	e608      	b.n	8006f08 <_dtoa_r+0x698>
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	9a07      	ldr	r2, [sp, #28]
 80072fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80072fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007300:	4293      	cmp	r3, r2
 8007302:	d028      	beq.n	8007356 <_dtoa_r+0xae6>
 8007304:	4649      	mov	r1, r9
 8007306:	2300      	movs	r3, #0
 8007308:	220a      	movs	r2, #10
 800730a:	4658      	mov	r0, fp
 800730c:	f000 f9d6 	bl	80076bc <__multadd>
 8007310:	42af      	cmp	r7, r5
 8007312:	4681      	mov	r9, r0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	f04f 020a 	mov.w	r2, #10
 800731c:	4639      	mov	r1, r7
 800731e:	4658      	mov	r0, fp
 8007320:	d107      	bne.n	8007332 <_dtoa_r+0xac2>
 8007322:	f000 f9cb 	bl	80076bc <__multadd>
 8007326:	4607      	mov	r7, r0
 8007328:	4605      	mov	r5, r0
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	e774      	b.n	800721c <_dtoa_r+0x9ac>
 8007332:	f000 f9c3 	bl	80076bc <__multadd>
 8007336:	4629      	mov	r1, r5
 8007338:	4607      	mov	r7, r0
 800733a:	2300      	movs	r3, #0
 800733c:	220a      	movs	r2, #10
 800733e:	4658      	mov	r0, fp
 8007340:	f000 f9bc 	bl	80076bc <__multadd>
 8007344:	4605      	mov	r5, r0
 8007346:	e7f0      	b.n	800732a <_dtoa_r+0xaba>
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	bfcc      	ite	gt
 800734e:	461e      	movgt	r6, r3
 8007350:	2601      	movle	r6, #1
 8007352:	4456      	add	r6, sl
 8007354:	2700      	movs	r7, #0
 8007356:	4649      	mov	r1, r9
 8007358:	2201      	movs	r2, #1
 800735a:	4658      	mov	r0, fp
 800735c:	f000 fba4 	bl	8007aa8 <__lshift>
 8007360:	4621      	mov	r1, r4
 8007362:	4681      	mov	r9, r0
 8007364:	f000 fc0c 	bl	8007b80 <__mcmp>
 8007368:	2800      	cmp	r0, #0
 800736a:	dcb0      	bgt.n	80072ce <_dtoa_r+0xa5e>
 800736c:	d102      	bne.n	8007374 <_dtoa_r+0xb04>
 800736e:	f018 0f01 	tst.w	r8, #1
 8007372:	d1ac      	bne.n	80072ce <_dtoa_r+0xa5e>
 8007374:	4633      	mov	r3, r6
 8007376:	461e      	mov	r6, r3
 8007378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800737c:	2a30      	cmp	r2, #48	@ 0x30
 800737e:	d0fa      	beq.n	8007376 <_dtoa_r+0xb06>
 8007380:	e5c2      	b.n	8006f08 <_dtoa_r+0x698>
 8007382:	459a      	cmp	sl, r3
 8007384:	d1a4      	bne.n	80072d0 <_dtoa_r+0xa60>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	3301      	adds	r3, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	2331      	movs	r3, #49	@ 0x31
 800738e:	f88a 3000 	strb.w	r3, [sl]
 8007392:	e5b9      	b.n	8006f08 <_dtoa_r+0x698>
 8007394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80073f4 <_dtoa_r+0xb84>
 800739a:	b11b      	cbz	r3, 80073a4 <_dtoa_r+0xb34>
 800739c:	f10a 0308 	add.w	r3, sl, #8
 80073a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	4650      	mov	r0, sl
 80073a6:	b019      	add	sp, #100	@ 0x64
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	f77f ae37 	ble.w	8007022 <_dtoa_r+0x7b2>
 80073b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b8:	2001      	movs	r0, #1
 80073ba:	e655      	b.n	8007068 <_dtoa_r+0x7f8>
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f77f aed6 	ble.w	8007170 <_dtoa_r+0x900>
 80073c4:	4656      	mov	r6, sl
 80073c6:	4621      	mov	r1, r4
 80073c8:	4648      	mov	r0, r9
 80073ca:	f7ff f9c7 	bl	800675c <quorem>
 80073ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073d2:	f806 8b01 	strb.w	r8, [r6], #1
 80073d6:	9b00      	ldr	r3, [sp, #0]
 80073d8:	eba6 020a 	sub.w	r2, r6, sl
 80073dc:	4293      	cmp	r3, r2
 80073de:	ddb3      	ble.n	8007348 <_dtoa_r+0xad8>
 80073e0:	4649      	mov	r1, r9
 80073e2:	2300      	movs	r3, #0
 80073e4:	220a      	movs	r2, #10
 80073e6:	4658      	mov	r0, fp
 80073e8:	f000 f968 	bl	80076bc <__multadd>
 80073ec:	4681      	mov	r9, r0
 80073ee:	e7ea      	b.n	80073c6 <_dtoa_r+0xb56>
 80073f0:	08009ef9 	.word	0x08009ef9
 80073f4:	08009e7d 	.word	0x08009e7d

080073f8 <_free_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d041      	beq.n	8007484 <_free_r+0x8c>
 8007400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007404:	1f0c      	subs	r4, r1, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfb8      	it	lt
 800740a:	18e4      	addlt	r4, r4, r3
 800740c:	f000 f8e8 	bl	80075e0 <__malloc_lock>
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <_free_r+0x90>)
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x2c>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	4628      	mov	r0, r5
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007420:	f000 b8e4 	b.w	80075ec <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x42>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	1821      	adds	r1, r4, r0
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1809      	addeq	r1, r1, r0
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x1e>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x4c>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x42>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1850      	adds	r0, r2, r1
 8007448:	42a0      	cmp	r0, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x6c>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	4401      	add	r1, r0
 8007450:	1850      	adds	r0, r2, r1
 8007452:	4283      	cmp	r3, r0
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x22>
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	4408      	add	r0, r1
 8007460:	6010      	str	r0, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x22>
 8007464:	d902      	bls.n	800746c <_free_r+0x74>
 8007466:	230c      	movs	r3, #12
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x22>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	1821      	adds	r1, r4, r0
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1809      	addeq	r1, r1, r0
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x22>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	200004d0 	.word	0x200004d0

0800748c <malloc>:
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <malloc+0xc>)
 800748e:	4601      	mov	r1, r0
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	f000 b825 	b.w	80074e0 <_malloc_r>
 8007496:	bf00      	nop
 8007498:	20000020 	.word	0x20000020

0800749c <sbrk_aligned>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	4e0f      	ldr	r6, [pc, #60]	@ (80074dc <sbrk_aligned+0x40>)
 80074a0:	460c      	mov	r4, r1
 80074a2:	6831      	ldr	r1, [r6, #0]
 80074a4:	4605      	mov	r5, r0
 80074a6:	b911      	cbnz	r1, 80074ae <sbrk_aligned+0x12>
 80074a8:	f001 fe0c 	bl	80090c4 <_sbrk_r>
 80074ac:	6030      	str	r0, [r6, #0]
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f001 fe07 	bl	80090c4 <_sbrk_r>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d103      	bne.n	80074c2 <sbrk_aligned+0x26>
 80074ba:	f04f 34ff 	mov.w	r4, #4294967295
 80074be:	4620      	mov	r0, r4
 80074c0:	bd70      	pop	{r4, r5, r6, pc}
 80074c2:	1cc4      	adds	r4, r0, #3
 80074c4:	f024 0403 	bic.w	r4, r4, #3
 80074c8:	42a0      	cmp	r0, r4
 80074ca:	d0f8      	beq.n	80074be <sbrk_aligned+0x22>
 80074cc:	1a21      	subs	r1, r4, r0
 80074ce:	4628      	mov	r0, r5
 80074d0:	f001 fdf8 	bl	80090c4 <_sbrk_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1f2      	bne.n	80074be <sbrk_aligned+0x22>
 80074d8:	e7ef      	b.n	80074ba <sbrk_aligned+0x1e>
 80074da:	bf00      	nop
 80074dc:	200004cc 	.word	0x200004cc

080074e0 <_malloc_r>:
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e4:	1ccd      	adds	r5, r1, #3
 80074e6:	f025 0503 	bic.w	r5, r5, #3
 80074ea:	3508      	adds	r5, #8
 80074ec:	2d0c      	cmp	r5, #12
 80074ee:	bf38      	it	cc
 80074f0:	250c      	movcc	r5, #12
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	4606      	mov	r6, r0
 80074f6:	db01      	blt.n	80074fc <_malloc_r+0x1c>
 80074f8:	42a9      	cmp	r1, r5
 80074fa:	d904      	bls.n	8007506 <_malloc_r+0x26>
 80074fc:	230c      	movs	r3, #12
 80074fe:	6033      	str	r3, [r6, #0]
 8007500:	2000      	movs	r0, #0
 8007502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075dc <_malloc_r+0xfc>
 800750a:	f000 f869 	bl	80075e0 <__malloc_lock>
 800750e:	f8d8 3000 	ldr.w	r3, [r8]
 8007512:	461c      	mov	r4, r3
 8007514:	bb44      	cbnz	r4, 8007568 <_malloc_r+0x88>
 8007516:	4629      	mov	r1, r5
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff ffbf 	bl	800749c <sbrk_aligned>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	4604      	mov	r4, r0
 8007522:	d158      	bne.n	80075d6 <_malloc_r+0xf6>
 8007524:	f8d8 4000 	ldr.w	r4, [r8]
 8007528:	4627      	mov	r7, r4
 800752a:	2f00      	cmp	r7, #0
 800752c:	d143      	bne.n	80075b6 <_malloc_r+0xd6>
 800752e:	2c00      	cmp	r4, #0
 8007530:	d04b      	beq.n	80075ca <_malloc_r+0xea>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	4639      	mov	r1, r7
 8007536:	4630      	mov	r0, r6
 8007538:	eb04 0903 	add.w	r9, r4, r3
 800753c:	f001 fdc2 	bl	80090c4 <_sbrk_r>
 8007540:	4581      	cmp	r9, r0
 8007542:	d142      	bne.n	80075ca <_malloc_r+0xea>
 8007544:	6821      	ldr	r1, [r4, #0]
 8007546:	1a6d      	subs	r5, r5, r1
 8007548:	4629      	mov	r1, r5
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff ffa6 	bl	800749c <sbrk_aligned>
 8007550:	3001      	adds	r0, #1
 8007552:	d03a      	beq.n	80075ca <_malloc_r+0xea>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	442b      	add	r3, r5
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	f8d8 3000 	ldr.w	r3, [r8]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	bb62      	cbnz	r2, 80075bc <_malloc_r+0xdc>
 8007562:	f8c8 7000 	str.w	r7, [r8]
 8007566:	e00f      	b.n	8007588 <_malloc_r+0xa8>
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	1b52      	subs	r2, r2, r5
 800756c:	d420      	bmi.n	80075b0 <_malloc_r+0xd0>
 800756e:	2a0b      	cmp	r2, #11
 8007570:	d917      	bls.n	80075a2 <_malloc_r+0xc2>
 8007572:	1961      	adds	r1, r4, r5
 8007574:	42a3      	cmp	r3, r4
 8007576:	6025      	str	r5, [r4, #0]
 8007578:	bf18      	it	ne
 800757a:	6059      	strne	r1, [r3, #4]
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	bf08      	it	eq
 8007580:	f8c8 1000 	streq.w	r1, [r8]
 8007584:	5162      	str	r2, [r4, r5]
 8007586:	604b      	str	r3, [r1, #4]
 8007588:	4630      	mov	r0, r6
 800758a:	f000 f82f 	bl	80075ec <__malloc_unlock>
 800758e:	f104 000b 	add.w	r0, r4, #11
 8007592:	1d23      	adds	r3, r4, #4
 8007594:	f020 0007 	bic.w	r0, r0, #7
 8007598:	1ac2      	subs	r2, r0, r3
 800759a:	bf1c      	itt	ne
 800759c:	1a1b      	subne	r3, r3, r0
 800759e:	50a3      	strne	r3, [r4, r2]
 80075a0:	e7af      	b.n	8007502 <_malloc_r+0x22>
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	bf0c      	ite	eq
 80075a8:	f8c8 2000 	streq.w	r2, [r8]
 80075ac:	605a      	strne	r2, [r3, #4]
 80075ae:	e7eb      	b.n	8007588 <_malloc_r+0xa8>
 80075b0:	4623      	mov	r3, r4
 80075b2:	6864      	ldr	r4, [r4, #4]
 80075b4:	e7ae      	b.n	8007514 <_malloc_r+0x34>
 80075b6:	463c      	mov	r4, r7
 80075b8:	687f      	ldr	r7, [r7, #4]
 80075ba:	e7b6      	b.n	800752a <_malloc_r+0x4a>
 80075bc:	461a      	mov	r2, r3
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d1fb      	bne.n	80075bc <_malloc_r+0xdc>
 80075c4:	2300      	movs	r3, #0
 80075c6:	6053      	str	r3, [r2, #4]
 80075c8:	e7de      	b.n	8007588 <_malloc_r+0xa8>
 80075ca:	230c      	movs	r3, #12
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 f80c 	bl	80075ec <__malloc_unlock>
 80075d4:	e794      	b.n	8007500 <_malloc_r+0x20>
 80075d6:	6005      	str	r5, [r0, #0]
 80075d8:	e7d6      	b.n	8007588 <_malloc_r+0xa8>
 80075da:	bf00      	nop
 80075dc:	200004d0 	.word	0x200004d0

080075e0 <__malloc_lock>:
 80075e0:	4801      	ldr	r0, [pc, #4]	@ (80075e8 <__malloc_lock+0x8>)
 80075e2:	f7ff b8b2 	b.w	800674a <__retarget_lock_acquire_recursive>
 80075e6:	bf00      	nop
 80075e8:	200004c8 	.word	0x200004c8

080075ec <__malloc_unlock>:
 80075ec:	4801      	ldr	r0, [pc, #4]	@ (80075f4 <__malloc_unlock+0x8>)
 80075ee:	f7ff b8ad 	b.w	800674c <__retarget_lock_release_recursive>
 80075f2:	bf00      	nop
 80075f4:	200004c8 	.word	0x200004c8

080075f8 <_Balloc>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	69c6      	ldr	r6, [r0, #28]
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	b976      	cbnz	r6, 8007620 <_Balloc+0x28>
 8007602:	2010      	movs	r0, #16
 8007604:	f7ff ff42 	bl	800748c <malloc>
 8007608:	4602      	mov	r2, r0
 800760a:	61e0      	str	r0, [r4, #28]
 800760c:	b920      	cbnz	r0, 8007618 <_Balloc+0x20>
 800760e:	4b18      	ldr	r3, [pc, #96]	@ (8007670 <_Balloc+0x78>)
 8007610:	4818      	ldr	r0, [pc, #96]	@ (8007674 <_Balloc+0x7c>)
 8007612:	216b      	movs	r1, #107	@ 0x6b
 8007614:	f001 fd7c 	bl	8009110 <__assert_func>
 8007618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800761c:	6006      	str	r6, [r0, #0]
 800761e:	60c6      	str	r6, [r0, #12]
 8007620:	69e6      	ldr	r6, [r4, #28]
 8007622:	68f3      	ldr	r3, [r6, #12]
 8007624:	b183      	cbz	r3, 8007648 <_Balloc+0x50>
 8007626:	69e3      	ldr	r3, [r4, #28]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800762e:	b9b8      	cbnz	r0, 8007660 <_Balloc+0x68>
 8007630:	2101      	movs	r1, #1
 8007632:	fa01 f605 	lsl.w	r6, r1, r5
 8007636:	1d72      	adds	r2, r6, #5
 8007638:	0092      	lsls	r2, r2, #2
 800763a:	4620      	mov	r0, r4
 800763c:	f001 fd86 	bl	800914c <_calloc_r>
 8007640:	b160      	cbz	r0, 800765c <_Balloc+0x64>
 8007642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007646:	e00e      	b.n	8007666 <_Balloc+0x6e>
 8007648:	2221      	movs	r2, #33	@ 0x21
 800764a:	2104      	movs	r1, #4
 800764c:	4620      	mov	r0, r4
 800764e:	f001 fd7d 	bl	800914c <_calloc_r>
 8007652:	69e3      	ldr	r3, [r4, #28]
 8007654:	60f0      	str	r0, [r6, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e4      	bne.n	8007626 <_Balloc+0x2e>
 800765c:	2000      	movs	r0, #0
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	6802      	ldr	r2, [r0, #0]
 8007662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007666:	2300      	movs	r3, #0
 8007668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800766c:	e7f7      	b.n	800765e <_Balloc+0x66>
 800766e:	bf00      	nop
 8007670:	08009e8a 	.word	0x08009e8a
 8007674:	08009f0a 	.word	0x08009f0a

08007678 <_Bfree>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	69c6      	ldr	r6, [r0, #28]
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b976      	cbnz	r6, 80076a0 <_Bfree+0x28>
 8007682:	2010      	movs	r0, #16
 8007684:	f7ff ff02 	bl	800748c <malloc>
 8007688:	4602      	mov	r2, r0
 800768a:	61e8      	str	r0, [r5, #28]
 800768c:	b920      	cbnz	r0, 8007698 <_Bfree+0x20>
 800768e:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <_Bfree+0x3c>)
 8007690:	4809      	ldr	r0, [pc, #36]	@ (80076b8 <_Bfree+0x40>)
 8007692:	218f      	movs	r1, #143	@ 0x8f
 8007694:	f001 fd3c 	bl	8009110 <__assert_func>
 8007698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800769c:	6006      	str	r6, [r0, #0]
 800769e:	60c6      	str	r6, [r0, #12]
 80076a0:	b13c      	cbz	r4, 80076b2 <_Bfree+0x3a>
 80076a2:	69eb      	ldr	r3, [r5, #28]
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ac:	6021      	str	r1, [r4, #0]
 80076ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	08009e8a 	.word	0x08009e8a
 80076b8:	08009f0a 	.word	0x08009f0a

080076bc <__multadd>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	690d      	ldr	r5, [r1, #16]
 80076c2:	4607      	mov	r7, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	461e      	mov	r6, r3
 80076c8:	f101 0c14 	add.w	ip, r1, #20
 80076cc:	2000      	movs	r0, #0
 80076ce:	f8dc 3000 	ldr.w	r3, [ip]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	fb02 6101 	mla	r1, r2, r1, r6
 80076d8:	0c1e      	lsrs	r6, r3, #16
 80076da:	0c0b      	lsrs	r3, r1, #16
 80076dc:	fb02 3306 	mla	r3, r2, r6, r3
 80076e0:	b289      	uxth	r1, r1
 80076e2:	3001      	adds	r0, #1
 80076e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076e8:	4285      	cmp	r5, r0
 80076ea:	f84c 1b04 	str.w	r1, [ip], #4
 80076ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076f2:	dcec      	bgt.n	80076ce <__multadd+0x12>
 80076f4:	b30e      	cbz	r6, 800773a <__multadd+0x7e>
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dc19      	bgt.n	8007730 <__multadd+0x74>
 80076fc:	6861      	ldr	r1, [r4, #4]
 80076fe:	4638      	mov	r0, r7
 8007700:	3101      	adds	r1, #1
 8007702:	f7ff ff79 	bl	80075f8 <_Balloc>
 8007706:	4680      	mov	r8, r0
 8007708:	b928      	cbnz	r0, 8007716 <__multadd+0x5a>
 800770a:	4602      	mov	r2, r0
 800770c:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <__multadd+0x84>)
 800770e:	480d      	ldr	r0, [pc, #52]	@ (8007744 <__multadd+0x88>)
 8007710:	21ba      	movs	r1, #186	@ 0xba
 8007712:	f001 fcfd 	bl	8009110 <__assert_func>
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	3202      	adds	r2, #2
 800771a:	f104 010c 	add.w	r1, r4, #12
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	300c      	adds	r0, #12
 8007722:	f001 fcdf 	bl	80090e4 <memcpy>
 8007726:	4621      	mov	r1, r4
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ffa5 	bl	8007678 <_Bfree>
 800772e:	4644      	mov	r4, r8
 8007730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007734:	3501      	adds	r5, #1
 8007736:	615e      	str	r6, [r3, #20]
 8007738:	6125      	str	r5, [r4, #16]
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	08009ef9 	.word	0x08009ef9
 8007744:	08009f0a 	.word	0x08009f0a

08007748 <__s2b>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	4615      	mov	r5, r2
 8007750:	461f      	mov	r7, r3
 8007752:	2209      	movs	r2, #9
 8007754:	3308      	adds	r3, #8
 8007756:	4606      	mov	r6, r0
 8007758:	fb93 f3f2 	sdiv	r3, r3, r2
 800775c:	2100      	movs	r1, #0
 800775e:	2201      	movs	r2, #1
 8007760:	429a      	cmp	r2, r3
 8007762:	db09      	blt.n	8007778 <__s2b+0x30>
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff ff47 	bl	80075f8 <_Balloc>
 800776a:	b940      	cbnz	r0, 800777e <__s2b+0x36>
 800776c:	4602      	mov	r2, r0
 800776e:	4b19      	ldr	r3, [pc, #100]	@ (80077d4 <__s2b+0x8c>)
 8007770:	4819      	ldr	r0, [pc, #100]	@ (80077d8 <__s2b+0x90>)
 8007772:	21d3      	movs	r1, #211	@ 0xd3
 8007774:	f001 fccc 	bl	8009110 <__assert_func>
 8007778:	0052      	lsls	r2, r2, #1
 800777a:	3101      	adds	r1, #1
 800777c:	e7f0      	b.n	8007760 <__s2b+0x18>
 800777e:	9b08      	ldr	r3, [sp, #32]
 8007780:	6143      	str	r3, [r0, #20]
 8007782:	2d09      	cmp	r5, #9
 8007784:	f04f 0301 	mov.w	r3, #1
 8007788:	6103      	str	r3, [r0, #16]
 800778a:	dd16      	ble.n	80077ba <__s2b+0x72>
 800778c:	f104 0909 	add.w	r9, r4, #9
 8007790:	46c8      	mov	r8, r9
 8007792:	442c      	add	r4, r5
 8007794:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007798:	4601      	mov	r1, r0
 800779a:	3b30      	subs	r3, #48	@ 0x30
 800779c:	220a      	movs	r2, #10
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ff8c 	bl	80076bc <__multadd>
 80077a4:	45a0      	cmp	r8, r4
 80077a6:	d1f5      	bne.n	8007794 <__s2b+0x4c>
 80077a8:	f1a5 0408 	sub.w	r4, r5, #8
 80077ac:	444c      	add	r4, r9
 80077ae:	1b2d      	subs	r5, r5, r4
 80077b0:	1963      	adds	r3, r4, r5
 80077b2:	42bb      	cmp	r3, r7
 80077b4:	db04      	blt.n	80077c0 <__s2b+0x78>
 80077b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ba:	340a      	adds	r4, #10
 80077bc:	2509      	movs	r5, #9
 80077be:	e7f6      	b.n	80077ae <__s2b+0x66>
 80077c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077c4:	4601      	mov	r1, r0
 80077c6:	3b30      	subs	r3, #48	@ 0x30
 80077c8:	220a      	movs	r2, #10
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ff76 	bl	80076bc <__multadd>
 80077d0:	e7ee      	b.n	80077b0 <__s2b+0x68>
 80077d2:	bf00      	nop
 80077d4:	08009ef9 	.word	0x08009ef9
 80077d8:	08009f0a 	.word	0x08009f0a

080077dc <__hi0bits>:
 80077dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077e0:	4603      	mov	r3, r0
 80077e2:	bf36      	itet	cc
 80077e4:	0403      	lslcc	r3, r0, #16
 80077e6:	2000      	movcs	r0, #0
 80077e8:	2010      	movcc	r0, #16
 80077ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ee:	bf3c      	itt	cc
 80077f0:	021b      	lslcc	r3, r3, #8
 80077f2:	3008      	addcc	r0, #8
 80077f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f8:	bf3c      	itt	cc
 80077fa:	011b      	lslcc	r3, r3, #4
 80077fc:	3004      	addcc	r0, #4
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007802:	bf3c      	itt	cc
 8007804:	009b      	lslcc	r3, r3, #2
 8007806:	3002      	addcc	r0, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	db05      	blt.n	8007818 <__hi0bits+0x3c>
 800780c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007810:	f100 0001 	add.w	r0, r0, #1
 8007814:	bf08      	it	eq
 8007816:	2020      	moveq	r0, #32
 8007818:	4770      	bx	lr

0800781a <__lo0bits>:
 800781a:	6803      	ldr	r3, [r0, #0]
 800781c:	4602      	mov	r2, r0
 800781e:	f013 0007 	ands.w	r0, r3, #7
 8007822:	d00b      	beq.n	800783c <__lo0bits+0x22>
 8007824:	07d9      	lsls	r1, r3, #31
 8007826:	d421      	bmi.n	800786c <__lo0bits+0x52>
 8007828:	0798      	lsls	r0, r3, #30
 800782a:	bf49      	itett	mi
 800782c:	085b      	lsrmi	r3, r3, #1
 800782e:	089b      	lsrpl	r3, r3, #2
 8007830:	2001      	movmi	r0, #1
 8007832:	6013      	strmi	r3, [r2, #0]
 8007834:	bf5c      	itt	pl
 8007836:	6013      	strpl	r3, [r2, #0]
 8007838:	2002      	movpl	r0, #2
 800783a:	4770      	bx	lr
 800783c:	b299      	uxth	r1, r3
 800783e:	b909      	cbnz	r1, 8007844 <__lo0bits+0x2a>
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	2010      	movs	r0, #16
 8007844:	b2d9      	uxtb	r1, r3
 8007846:	b909      	cbnz	r1, 800784c <__lo0bits+0x32>
 8007848:	3008      	adds	r0, #8
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	0719      	lsls	r1, r3, #28
 800784e:	bf04      	itt	eq
 8007850:	091b      	lsreq	r3, r3, #4
 8007852:	3004      	addeq	r0, #4
 8007854:	0799      	lsls	r1, r3, #30
 8007856:	bf04      	itt	eq
 8007858:	089b      	lsreq	r3, r3, #2
 800785a:	3002      	addeq	r0, #2
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	d403      	bmi.n	8007868 <__lo0bits+0x4e>
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	f100 0001 	add.w	r0, r0, #1
 8007866:	d003      	beq.n	8007870 <__lo0bits+0x56>
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4770      	bx	lr
 800786c:	2000      	movs	r0, #0
 800786e:	4770      	bx	lr
 8007870:	2020      	movs	r0, #32
 8007872:	4770      	bx	lr

08007874 <__i2b>:
 8007874:	b510      	push	{r4, lr}
 8007876:	460c      	mov	r4, r1
 8007878:	2101      	movs	r1, #1
 800787a:	f7ff febd 	bl	80075f8 <_Balloc>
 800787e:	4602      	mov	r2, r0
 8007880:	b928      	cbnz	r0, 800788e <__i2b+0x1a>
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <__i2b+0x24>)
 8007884:	4805      	ldr	r0, [pc, #20]	@ (800789c <__i2b+0x28>)
 8007886:	f240 1145 	movw	r1, #325	@ 0x145
 800788a:	f001 fc41 	bl	8009110 <__assert_func>
 800788e:	2301      	movs	r3, #1
 8007890:	6144      	str	r4, [r0, #20]
 8007892:	6103      	str	r3, [r0, #16]
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	08009ef9 	.word	0x08009ef9
 800789c:	08009f0a 	.word	0x08009f0a

080078a0 <__multiply>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4614      	mov	r4, r2
 80078a6:	690a      	ldr	r2, [r1, #16]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	bfa8      	it	ge
 80078ae:	4623      	movge	r3, r4
 80078b0:	460f      	mov	r7, r1
 80078b2:	bfa4      	itt	ge
 80078b4:	460c      	movge	r4, r1
 80078b6:	461f      	movge	r7, r3
 80078b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	6861      	ldr	r1, [r4, #4]
 80078c4:	eb0a 0609 	add.w	r6, sl, r9
 80078c8:	42b3      	cmp	r3, r6
 80078ca:	b085      	sub	sp, #20
 80078cc:	bfb8      	it	lt
 80078ce:	3101      	addlt	r1, #1
 80078d0:	f7ff fe92 	bl	80075f8 <_Balloc>
 80078d4:	b930      	cbnz	r0, 80078e4 <__multiply+0x44>
 80078d6:	4602      	mov	r2, r0
 80078d8:	4b44      	ldr	r3, [pc, #272]	@ (80079ec <__multiply+0x14c>)
 80078da:	4845      	ldr	r0, [pc, #276]	@ (80079f0 <__multiply+0x150>)
 80078dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078e0:	f001 fc16 	bl	8009110 <__assert_func>
 80078e4:	f100 0514 	add.w	r5, r0, #20
 80078e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078ec:	462b      	mov	r3, r5
 80078ee:	2200      	movs	r2, #0
 80078f0:	4543      	cmp	r3, r8
 80078f2:	d321      	bcc.n	8007938 <__multiply+0x98>
 80078f4:	f107 0114 	add.w	r1, r7, #20
 80078f8:	f104 0214 	add.w	r2, r4, #20
 80078fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007900:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007904:	9302      	str	r3, [sp, #8]
 8007906:	1b13      	subs	r3, r2, r4
 8007908:	3b15      	subs	r3, #21
 800790a:	f023 0303 	bic.w	r3, r3, #3
 800790e:	3304      	adds	r3, #4
 8007910:	f104 0715 	add.w	r7, r4, #21
 8007914:	42ba      	cmp	r2, r7
 8007916:	bf38      	it	cc
 8007918:	2304      	movcc	r3, #4
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	9b02      	ldr	r3, [sp, #8]
 800791e:	9103      	str	r1, [sp, #12]
 8007920:	428b      	cmp	r3, r1
 8007922:	d80c      	bhi.n	800793e <__multiply+0x9e>
 8007924:	2e00      	cmp	r6, #0
 8007926:	dd03      	ble.n	8007930 <__multiply+0x90>
 8007928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05b      	beq.n	80079e8 <__multiply+0x148>
 8007930:	6106      	str	r6, [r0, #16]
 8007932:	b005      	add	sp, #20
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	f843 2b04 	str.w	r2, [r3], #4
 800793c:	e7d8      	b.n	80078f0 <__multiply+0x50>
 800793e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007942:	f1ba 0f00 	cmp.w	sl, #0
 8007946:	d024      	beq.n	8007992 <__multiply+0xf2>
 8007948:	f104 0e14 	add.w	lr, r4, #20
 800794c:	46a9      	mov	r9, r5
 800794e:	f04f 0c00 	mov.w	ip, #0
 8007952:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007956:	f8d9 3000 	ldr.w	r3, [r9]
 800795a:	fa1f fb87 	uxth.w	fp, r7
 800795e:	b29b      	uxth	r3, r3
 8007960:	fb0a 330b 	mla	r3, sl, fp, r3
 8007964:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007968:	f8d9 7000 	ldr.w	r7, [r9]
 800796c:	4463      	add	r3, ip
 800796e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007972:	fb0a c70b 	mla	r7, sl, fp, ip
 8007976:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800797a:	b29b      	uxth	r3, r3
 800797c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007980:	4572      	cmp	r2, lr
 8007982:	f849 3b04 	str.w	r3, [r9], #4
 8007986:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800798a:	d8e2      	bhi.n	8007952 <__multiply+0xb2>
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	f845 c003 	str.w	ip, [r5, r3]
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007998:	3104      	adds	r1, #4
 800799a:	f1b9 0f00 	cmp.w	r9, #0
 800799e:	d021      	beq.n	80079e4 <__multiply+0x144>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	f104 0c14 	add.w	ip, r4, #20
 80079a6:	46ae      	mov	lr, r5
 80079a8:	f04f 0a00 	mov.w	sl, #0
 80079ac:	f8bc b000 	ldrh.w	fp, [ip]
 80079b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079b4:	fb09 770b 	mla	r7, r9, fp, r7
 80079b8:	4457      	add	r7, sl
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079c0:	f84e 3b04 	str.w	r3, [lr], #4
 80079c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079cc:	f8be 3000 	ldrh.w	r3, [lr]
 80079d0:	fb09 330a 	mla	r3, r9, sl, r3
 80079d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079d8:	4562      	cmp	r2, ip
 80079da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079de:	d8e5      	bhi.n	80079ac <__multiply+0x10c>
 80079e0:	9f01      	ldr	r7, [sp, #4]
 80079e2:	51eb      	str	r3, [r5, r7]
 80079e4:	3504      	adds	r5, #4
 80079e6:	e799      	b.n	800791c <__multiply+0x7c>
 80079e8:	3e01      	subs	r6, #1
 80079ea:	e79b      	b.n	8007924 <__multiply+0x84>
 80079ec:	08009ef9 	.word	0x08009ef9
 80079f0:	08009f0a 	.word	0x08009f0a

080079f4 <__pow5mult>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4615      	mov	r5, r2
 80079fa:	f012 0203 	ands.w	r2, r2, #3
 80079fe:	4607      	mov	r7, r0
 8007a00:	460e      	mov	r6, r1
 8007a02:	d007      	beq.n	8007a14 <__pow5mult+0x20>
 8007a04:	4c25      	ldr	r4, [pc, #148]	@ (8007a9c <__pow5mult+0xa8>)
 8007a06:	3a01      	subs	r2, #1
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a0e:	f7ff fe55 	bl	80076bc <__multadd>
 8007a12:	4606      	mov	r6, r0
 8007a14:	10ad      	asrs	r5, r5, #2
 8007a16:	d03d      	beq.n	8007a94 <__pow5mult+0xa0>
 8007a18:	69fc      	ldr	r4, [r7, #28]
 8007a1a:	b97c      	cbnz	r4, 8007a3c <__pow5mult+0x48>
 8007a1c:	2010      	movs	r0, #16
 8007a1e:	f7ff fd35 	bl	800748c <malloc>
 8007a22:	4602      	mov	r2, r0
 8007a24:	61f8      	str	r0, [r7, #28]
 8007a26:	b928      	cbnz	r0, 8007a34 <__pow5mult+0x40>
 8007a28:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa0 <__pow5mult+0xac>)
 8007a2a:	481e      	ldr	r0, [pc, #120]	@ (8007aa4 <__pow5mult+0xb0>)
 8007a2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a30:	f001 fb6e 	bl	8009110 <__assert_func>
 8007a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a38:	6004      	str	r4, [r0, #0]
 8007a3a:	60c4      	str	r4, [r0, #12]
 8007a3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a44:	b94c      	cbnz	r4, 8007a5a <__pow5mult+0x66>
 8007a46:	f240 2171 	movw	r1, #625	@ 0x271
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	f7ff ff12 	bl	8007874 <__i2b>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a56:	4604      	mov	r4, r0
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	07eb      	lsls	r3, r5, #31
 8007a60:	d50a      	bpl.n	8007a78 <__pow5mult+0x84>
 8007a62:	4631      	mov	r1, r6
 8007a64:	4622      	mov	r2, r4
 8007a66:	4638      	mov	r0, r7
 8007a68:	f7ff ff1a 	bl	80078a0 <__multiply>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4680      	mov	r8, r0
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff fe01 	bl	8007678 <_Bfree>
 8007a76:	4646      	mov	r6, r8
 8007a78:	106d      	asrs	r5, r5, #1
 8007a7a:	d00b      	beq.n	8007a94 <__pow5mult+0xa0>
 8007a7c:	6820      	ldr	r0, [r4, #0]
 8007a7e:	b938      	cbnz	r0, 8007a90 <__pow5mult+0x9c>
 8007a80:	4622      	mov	r2, r4
 8007a82:	4621      	mov	r1, r4
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff ff0b 	bl	80078a0 <__multiply>
 8007a8a:	6020      	str	r0, [r4, #0]
 8007a8c:	f8c0 9000 	str.w	r9, [r0]
 8007a90:	4604      	mov	r4, r0
 8007a92:	e7e4      	b.n	8007a5e <__pow5mult+0x6a>
 8007a94:	4630      	mov	r0, r6
 8007a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08009f64 	.word	0x08009f64
 8007aa0:	08009e8a 	.word	0x08009e8a
 8007aa4:	08009f0a 	.word	0x08009f0a

08007aa8 <__lshift>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	460c      	mov	r4, r1
 8007aae:	6849      	ldr	r1, [r1, #4]
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	4607      	mov	r7, r0
 8007aba:	4691      	mov	r9, r2
 8007abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ac0:	f108 0601 	add.w	r6, r8, #1
 8007ac4:	42b3      	cmp	r3, r6
 8007ac6:	db0b      	blt.n	8007ae0 <__lshift+0x38>
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7ff fd95 	bl	80075f8 <_Balloc>
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b948      	cbnz	r0, 8007ae6 <__lshift+0x3e>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b28      	ldr	r3, [pc, #160]	@ (8007b78 <__lshift+0xd0>)
 8007ad6:	4829      	ldr	r0, [pc, #164]	@ (8007b7c <__lshift+0xd4>)
 8007ad8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007adc:	f001 fb18 	bl	8009110 <__assert_func>
 8007ae0:	3101      	adds	r1, #1
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__lshift+0x1c>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f100 0114 	add.w	r1, r0, #20
 8007aec:	f100 0210 	add.w	r2, r0, #16
 8007af0:	4618      	mov	r0, r3
 8007af2:	4553      	cmp	r3, sl
 8007af4:	db33      	blt.n	8007b5e <__lshift+0xb6>
 8007af6:	6920      	ldr	r0, [r4, #16]
 8007af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007afc:	f104 0314 	add.w	r3, r4, #20
 8007b00:	f019 091f 	ands.w	r9, r9, #31
 8007b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b0c:	d02b      	beq.n	8007b66 <__lshift+0xbe>
 8007b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b12:	468a      	mov	sl, r1
 8007b14:	2200      	movs	r2, #0
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	fa00 f009 	lsl.w	r0, r0, r9
 8007b1c:	4310      	orrs	r0, r2
 8007b1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b26:	459c      	cmp	ip, r3
 8007b28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b2c:	d8f3      	bhi.n	8007b16 <__lshift+0x6e>
 8007b2e:	ebac 0304 	sub.w	r3, ip, r4
 8007b32:	3b15      	subs	r3, #21
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	3304      	adds	r3, #4
 8007b3a:	f104 0015 	add.w	r0, r4, #21
 8007b3e:	4584      	cmp	ip, r0
 8007b40:	bf38      	it	cc
 8007b42:	2304      	movcc	r3, #4
 8007b44:	50ca      	str	r2, [r1, r3]
 8007b46:	b10a      	cbz	r2, 8007b4c <__lshift+0xa4>
 8007b48:	f108 0602 	add.w	r6, r8, #2
 8007b4c:	3e01      	subs	r6, #1
 8007b4e:	4638      	mov	r0, r7
 8007b50:	612e      	str	r6, [r5, #16]
 8007b52:	4621      	mov	r1, r4
 8007b54:	f7ff fd90 	bl	8007678 <_Bfree>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b62:	3301      	adds	r3, #1
 8007b64:	e7c5      	b.n	8007af2 <__lshift+0x4a>
 8007b66:	3904      	subs	r1, #4
 8007b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b70:	459c      	cmp	ip, r3
 8007b72:	d8f9      	bhi.n	8007b68 <__lshift+0xc0>
 8007b74:	e7ea      	b.n	8007b4c <__lshift+0xa4>
 8007b76:	bf00      	nop
 8007b78:	08009ef9 	.word	0x08009ef9
 8007b7c:	08009f0a 	.word	0x08009f0a

08007b80 <__mcmp>:
 8007b80:	690a      	ldr	r2, [r1, #16]
 8007b82:	4603      	mov	r3, r0
 8007b84:	6900      	ldr	r0, [r0, #16]
 8007b86:	1a80      	subs	r0, r0, r2
 8007b88:	b530      	push	{r4, r5, lr}
 8007b8a:	d10e      	bne.n	8007baa <__mcmp+0x2a>
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	3114      	adds	r1, #20
 8007b90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ba0:	4295      	cmp	r5, r2
 8007ba2:	d003      	beq.n	8007bac <__mcmp+0x2c>
 8007ba4:	d205      	bcs.n	8007bb2 <__mcmp+0x32>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	bd30      	pop	{r4, r5, pc}
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d3f3      	bcc.n	8007b98 <__mcmp+0x18>
 8007bb0:	e7fb      	b.n	8007baa <__mcmp+0x2a>
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e7f9      	b.n	8007baa <__mcmp+0x2a>
	...

08007bb8 <__mdiff>:
 8007bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4648      	mov	r0, r9
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	f7ff ffdb 	bl	8007b80 <__mcmp>
 8007bca:	1e05      	subs	r5, r0, #0
 8007bcc:	d112      	bne.n	8007bf4 <__mdiff+0x3c>
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fd11 	bl	80075f8 <_Balloc>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <__mdiff+0x2e>
 8007bda:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd8 <__mdiff+0x120>)
 8007bdc:	f240 2137 	movw	r1, #567	@ 0x237
 8007be0:	483e      	ldr	r0, [pc, #248]	@ (8007cdc <__mdiff+0x124>)
 8007be2:	f001 fa95 	bl	8009110 <__assert_func>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bec:	4610      	mov	r0, r2
 8007bee:	b003      	add	sp, #12
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf4:	bfbc      	itt	lt
 8007bf6:	464b      	movlt	r3, r9
 8007bf8:	46a1      	movlt	r9, r4
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c00:	bfba      	itte	lt
 8007c02:	461c      	movlt	r4, r3
 8007c04:	2501      	movlt	r5, #1
 8007c06:	2500      	movge	r5, #0
 8007c08:	f7ff fcf6 	bl	80075f8 <_Balloc>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	b918      	cbnz	r0, 8007c18 <__mdiff+0x60>
 8007c10:	4b31      	ldr	r3, [pc, #196]	@ (8007cd8 <__mdiff+0x120>)
 8007c12:	f240 2145 	movw	r1, #581	@ 0x245
 8007c16:	e7e3      	b.n	8007be0 <__mdiff+0x28>
 8007c18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c1c:	6926      	ldr	r6, [r4, #16]
 8007c1e:	60c5      	str	r5, [r0, #12]
 8007c20:	f109 0310 	add.w	r3, r9, #16
 8007c24:	f109 0514 	add.w	r5, r9, #20
 8007c28:	f104 0e14 	add.w	lr, r4, #20
 8007c2c:	f100 0b14 	add.w	fp, r0, #20
 8007c30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	46d9      	mov	r9, fp
 8007c3c:	f04f 0c00 	mov.w	ip, #0
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	fa1f f38a 	uxth.w	r3, sl
 8007c50:	4619      	mov	r1, r3
 8007c52:	b283      	uxth	r3, r0
 8007c54:	1acb      	subs	r3, r1, r3
 8007c56:	0c00      	lsrs	r0, r0, #16
 8007c58:	4463      	add	r3, ip
 8007c5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c68:	4576      	cmp	r6, lr
 8007c6a:	f849 3b04 	str.w	r3, [r9], #4
 8007c6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c72:	d8e5      	bhi.n	8007c40 <__mdiff+0x88>
 8007c74:	1b33      	subs	r3, r6, r4
 8007c76:	3b15      	subs	r3, #21
 8007c78:	f023 0303 	bic.w	r3, r3, #3
 8007c7c:	3415      	adds	r4, #21
 8007c7e:	3304      	adds	r3, #4
 8007c80:	42a6      	cmp	r6, r4
 8007c82:	bf38      	it	cc
 8007c84:	2304      	movcc	r3, #4
 8007c86:	441d      	add	r5, r3
 8007c88:	445b      	add	r3, fp
 8007c8a:	461e      	mov	r6, r3
 8007c8c:	462c      	mov	r4, r5
 8007c8e:	4544      	cmp	r4, r8
 8007c90:	d30e      	bcc.n	8007cb0 <__mdiff+0xf8>
 8007c92:	f108 0103 	add.w	r1, r8, #3
 8007c96:	1b49      	subs	r1, r1, r5
 8007c98:	f021 0103 	bic.w	r1, r1, #3
 8007c9c:	3d03      	subs	r5, #3
 8007c9e:	45a8      	cmp	r8, r5
 8007ca0:	bf38      	it	cc
 8007ca2:	2100      	movcc	r1, #0
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007caa:	b191      	cbz	r1, 8007cd2 <__mdiff+0x11a>
 8007cac:	6117      	str	r7, [r2, #16]
 8007cae:	e79d      	b.n	8007bec <__mdiff+0x34>
 8007cb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cb4:	46e6      	mov	lr, ip
 8007cb6:	0c08      	lsrs	r0, r1, #16
 8007cb8:	fa1c fc81 	uxtah	ip, ip, r1
 8007cbc:	4471      	add	r1, lr
 8007cbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cc2:	b289      	uxth	r1, r1
 8007cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cc8:	f846 1b04 	str.w	r1, [r6], #4
 8007ccc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cd0:	e7dd      	b.n	8007c8e <__mdiff+0xd6>
 8007cd2:	3f01      	subs	r7, #1
 8007cd4:	e7e7      	b.n	8007ca6 <__mdiff+0xee>
 8007cd6:	bf00      	nop
 8007cd8:	08009ef9 	.word	0x08009ef9
 8007cdc:	08009f0a 	.word	0x08009f0a

08007ce0 <__ulp>:
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	ed8d 0b00 	vstr	d0, [sp]
 8007ce6:	9a01      	ldr	r2, [sp, #4]
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d28 <__ulp+0x48>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc08      	bgt.n	8007d06 <__ulp+0x26>
 8007cf4:	425b      	negs	r3, r3
 8007cf6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007cfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007cfe:	da04      	bge.n	8007d0a <__ulp+0x2a>
 8007d00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d04:	4113      	asrs	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	e008      	b.n	8007d1c <__ulp+0x3c>
 8007d0a:	f1a2 0314 	sub.w	r3, r2, #20
 8007d0e:	2b1e      	cmp	r3, #30
 8007d10:	bfda      	itte	le
 8007d12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d16:	40da      	lsrle	r2, r3
 8007d18:	2201      	movgt	r2, #1
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4610      	mov	r0, r2
 8007d20:	ec41 0b10 	vmov	d0, r0, r1
 8007d24:	b002      	add	sp, #8
 8007d26:	4770      	bx	lr
 8007d28:	7ff00000 	.word	0x7ff00000

08007d2c <__b2d>:
 8007d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d30:	6906      	ldr	r6, [r0, #16]
 8007d32:	f100 0814 	add.w	r8, r0, #20
 8007d36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d3a:	1f37      	subs	r7, r6, #4
 8007d3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff fd4b 	bl	80077dc <__hi0bits>
 8007d46:	f1c0 0320 	rsb	r3, r0, #32
 8007d4a:	280a      	cmp	r0, #10
 8007d4c:	600b      	str	r3, [r1, #0]
 8007d4e:	491b      	ldr	r1, [pc, #108]	@ (8007dbc <__b2d+0x90>)
 8007d50:	dc15      	bgt.n	8007d7e <__b2d+0x52>
 8007d52:	f1c0 0c0b 	rsb	ip, r0, #11
 8007d56:	fa22 f30c 	lsr.w	r3, r2, ip
 8007d5a:	45b8      	cmp	r8, r7
 8007d5c:	ea43 0501 	orr.w	r5, r3, r1
 8007d60:	bf34      	ite	cc
 8007d62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d66:	2300      	movcs	r3, #0
 8007d68:	3015      	adds	r0, #21
 8007d6a:	fa02 f000 	lsl.w	r0, r2, r0
 8007d6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d72:	4303      	orrs	r3, r0
 8007d74:	461c      	mov	r4, r3
 8007d76:	ec45 4b10 	vmov	d0, r4, r5
 8007d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d7e:	45b8      	cmp	r8, r7
 8007d80:	bf3a      	itte	cc
 8007d82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d86:	f1a6 0708 	subcc.w	r7, r6, #8
 8007d8a:	2300      	movcs	r3, #0
 8007d8c:	380b      	subs	r0, #11
 8007d8e:	d012      	beq.n	8007db6 <__b2d+0x8a>
 8007d90:	f1c0 0120 	rsb	r1, r0, #32
 8007d94:	fa23 f401 	lsr.w	r4, r3, r1
 8007d98:	4082      	lsls	r2, r0
 8007d9a:	4322      	orrs	r2, r4
 8007d9c:	4547      	cmp	r7, r8
 8007d9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007da2:	bf8c      	ite	hi
 8007da4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007da8:	2200      	movls	r2, #0
 8007daa:	4083      	lsls	r3, r0
 8007dac:	40ca      	lsrs	r2, r1
 8007dae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007db2:	4313      	orrs	r3, r2
 8007db4:	e7de      	b.n	8007d74 <__b2d+0x48>
 8007db6:	ea42 0501 	orr.w	r5, r2, r1
 8007dba:	e7db      	b.n	8007d74 <__b2d+0x48>
 8007dbc:	3ff00000 	.word	0x3ff00000

08007dc0 <__d2b>:
 8007dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	ec59 8b10 	vmov	r8, r9, d0
 8007dcc:	4616      	mov	r6, r2
 8007dce:	f7ff fc13 	bl	80075f8 <_Balloc>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b930      	cbnz	r0, 8007de4 <__d2b+0x24>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b23      	ldr	r3, [pc, #140]	@ (8007e68 <__d2b+0xa8>)
 8007dda:	4824      	ldr	r0, [pc, #144]	@ (8007e6c <__d2b+0xac>)
 8007ddc:	f240 310f 	movw	r1, #783	@ 0x30f
 8007de0:	f001 f996 	bl	8009110 <__assert_func>
 8007de4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dec:	b10d      	cbz	r5, 8007df2 <__d2b+0x32>
 8007dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	f1b8 0300 	subs.w	r3, r8, #0
 8007df8:	d023      	beq.n	8007e42 <__d2b+0x82>
 8007dfa:	4668      	mov	r0, sp
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	f7ff fd0c 	bl	800781a <__lo0bits>
 8007e02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e06:	b1d0      	cbz	r0, 8007e3e <__d2b+0x7e>
 8007e08:	f1c0 0320 	rsb	r3, r0, #32
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	430b      	orrs	r3, r1
 8007e12:	40c2      	lsrs	r2, r0
 8007e14:	6163      	str	r3, [r4, #20]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	61a3      	str	r3, [r4, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf0c      	ite	eq
 8007e20:	2201      	moveq	r2, #1
 8007e22:	2202      	movne	r2, #2
 8007e24:	6122      	str	r2, [r4, #16]
 8007e26:	b1a5      	cbz	r5, 8007e52 <__d2b+0x92>
 8007e28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e2c:	4405      	add	r5, r0
 8007e2e:	603d      	str	r5, [r7, #0]
 8007e30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e34:	6030      	str	r0, [r6, #0]
 8007e36:	4620      	mov	r0, r4
 8007e38:	b003      	add	sp, #12
 8007e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	6161      	str	r1, [r4, #20]
 8007e40:	e7ea      	b.n	8007e18 <__d2b+0x58>
 8007e42:	a801      	add	r0, sp, #4
 8007e44:	f7ff fce9 	bl	800781a <__lo0bits>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	6163      	str	r3, [r4, #20]
 8007e4c:	3020      	adds	r0, #32
 8007e4e:	2201      	movs	r2, #1
 8007e50:	e7e8      	b.n	8007e24 <__d2b+0x64>
 8007e52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e5a:	6038      	str	r0, [r7, #0]
 8007e5c:	6918      	ldr	r0, [r3, #16]
 8007e5e:	f7ff fcbd 	bl	80077dc <__hi0bits>
 8007e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e66:	e7e5      	b.n	8007e34 <__d2b+0x74>
 8007e68:	08009ef9 	.word	0x08009ef9
 8007e6c:	08009f0a 	.word	0x08009f0a

08007e70 <__ratio>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	b085      	sub	sp, #20
 8007e76:	e9cd 1000 	strd	r1, r0, [sp]
 8007e7a:	a902      	add	r1, sp, #8
 8007e7c:	f7ff ff56 	bl	8007d2c <__b2d>
 8007e80:	9800      	ldr	r0, [sp, #0]
 8007e82:	a903      	add	r1, sp, #12
 8007e84:	ec55 4b10 	vmov	r4, r5, d0
 8007e88:	f7ff ff50 	bl	8007d2c <__b2d>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	6919      	ldr	r1, [r3, #16]
 8007e90:	9b00      	ldr	r3, [sp, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	1ac9      	subs	r1, r1, r3
 8007e96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	ec5b ab10 	vmov	sl, fp, d0
 8007ea0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfce      	itee	gt
 8007ea8:	462a      	movgt	r2, r5
 8007eaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007eae:	465a      	movle	r2, fp
 8007eb0:	462f      	mov	r7, r5
 8007eb2:	46d9      	mov	r9, fp
 8007eb4:	bfcc      	ite	gt
 8007eb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007eba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	f7f8 fce1 	bl	800088c <__aeabi_ddiv>
 8007eca:	ec41 0b10 	vmov	d0, r0, r1
 8007ece:	b005      	add	sp, #20
 8007ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ed4 <__copybits>:
 8007ed4:	3901      	subs	r1, #1
 8007ed6:	b570      	push	{r4, r5, r6, lr}
 8007ed8:	1149      	asrs	r1, r1, #5
 8007eda:	6914      	ldr	r4, [r2, #16]
 8007edc:	3101      	adds	r1, #1
 8007ede:	f102 0314 	add.w	r3, r2, #20
 8007ee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eea:	1f05      	subs	r5, r0, #4
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d30c      	bcc.n	8007f0a <__copybits+0x36>
 8007ef0:	1aa3      	subs	r3, r4, r2
 8007ef2:	3b11      	subs	r3, #17
 8007ef4:	f023 0303 	bic.w	r3, r3, #3
 8007ef8:	3211      	adds	r2, #17
 8007efa:	42a2      	cmp	r2, r4
 8007efc:	bf88      	it	hi
 8007efe:	2300      	movhi	r3, #0
 8007f00:	4418      	add	r0, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	4288      	cmp	r0, r1
 8007f06:	d305      	bcc.n	8007f14 <__copybits+0x40>
 8007f08:	bd70      	pop	{r4, r5, r6, pc}
 8007f0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f12:	e7eb      	b.n	8007eec <__copybits+0x18>
 8007f14:	f840 3b04 	str.w	r3, [r0], #4
 8007f18:	e7f4      	b.n	8007f04 <__copybits+0x30>

08007f1a <__any_on>:
 8007f1a:	f100 0214 	add.w	r2, r0, #20
 8007f1e:	6900      	ldr	r0, [r0, #16]
 8007f20:	114b      	asrs	r3, r1, #5
 8007f22:	4298      	cmp	r0, r3
 8007f24:	b510      	push	{r4, lr}
 8007f26:	db11      	blt.n	8007f4c <__any_on+0x32>
 8007f28:	dd0a      	ble.n	8007f40 <__any_on+0x26>
 8007f2a:	f011 011f 	ands.w	r1, r1, #31
 8007f2e:	d007      	beq.n	8007f40 <__any_on+0x26>
 8007f30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f34:	fa24 f001 	lsr.w	r0, r4, r1
 8007f38:	fa00 f101 	lsl.w	r1, r0, r1
 8007f3c:	428c      	cmp	r4, r1
 8007f3e:	d10b      	bne.n	8007f58 <__any_on+0x3e>
 8007f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d803      	bhi.n	8007f50 <__any_on+0x36>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	bd10      	pop	{r4, pc}
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	e7f7      	b.n	8007f40 <__any_on+0x26>
 8007f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d0f5      	beq.n	8007f44 <__any_on+0x2a>
 8007f58:	2001      	movs	r0, #1
 8007f5a:	e7f6      	b.n	8007f4a <__any_on+0x30>

08007f5c <sulp>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
 8007f62:	ec45 4b10 	vmov	d0, r4, r5
 8007f66:	4616      	mov	r6, r2
 8007f68:	f7ff feba 	bl	8007ce0 <__ulp>
 8007f6c:	ec51 0b10 	vmov	r0, r1, d0
 8007f70:	b17e      	cbz	r6, 8007f92 <sulp+0x36>
 8007f72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dd09      	ble.n	8007f92 <sulp+0x36>
 8007f7e:	051b      	lsls	r3, r3, #20
 8007f80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f84:	2400      	movs	r4, #0
 8007f86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 fb53 	bl	8000638 <__aeabi_dmul>
 8007f92:	ec41 0b10 	vmov	d0, r0, r1
 8007f96:	bd70      	pop	{r4, r5, r6, pc}

08007f98 <_strtod_l>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	b09f      	sub	sp, #124	@ 0x7c
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007fa6:	9005      	str	r0, [sp, #20]
 8007fa8:	f04f 0a00 	mov.w	sl, #0
 8007fac:	f04f 0b00 	mov.w	fp, #0
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fb4:	7811      	ldrb	r1, [r2, #0]
 8007fb6:	292b      	cmp	r1, #43	@ 0x2b
 8007fb8:	d04a      	beq.n	8008050 <_strtod_l+0xb8>
 8007fba:	d838      	bhi.n	800802e <_strtod_l+0x96>
 8007fbc:	290d      	cmp	r1, #13
 8007fbe:	d832      	bhi.n	8008026 <_strtod_l+0x8e>
 8007fc0:	2908      	cmp	r1, #8
 8007fc2:	d832      	bhi.n	800802a <_strtod_l+0x92>
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d03b      	beq.n	8008040 <_strtod_l+0xa8>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007fcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007fce:	782a      	ldrb	r2, [r5, #0]
 8007fd0:	2a30      	cmp	r2, #48	@ 0x30
 8007fd2:	f040 80b3 	bne.w	800813c <_strtod_l+0x1a4>
 8007fd6:	786a      	ldrb	r2, [r5, #1]
 8007fd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fdc:	2a58      	cmp	r2, #88	@ 0x58
 8007fde:	d16e      	bne.n	80080be <_strtod_l+0x126>
 8007fe0:	9302      	str	r3, [sp, #8]
 8007fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	4a8e      	ldr	r2, [pc, #568]	@ (8008224 <_strtod_l+0x28c>)
 8007fec:	9805      	ldr	r0, [sp, #20]
 8007fee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ff0:	a919      	add	r1, sp, #100	@ 0x64
 8007ff2:	f001 f927 	bl	8009244 <__gethex>
 8007ff6:	f010 060f 	ands.w	r6, r0, #15
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	d005      	beq.n	800800a <_strtod_l+0x72>
 8007ffe:	2e06      	cmp	r6, #6
 8008000:	d128      	bne.n	8008054 <_strtod_l+0xbc>
 8008002:	3501      	adds	r5, #1
 8008004:	2300      	movs	r3, #0
 8008006:	9519      	str	r5, [sp, #100]	@ 0x64
 8008008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800800a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 858e 	bne.w	8008b2e <_strtod_l+0xb96>
 8008012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008014:	b1cb      	cbz	r3, 800804a <_strtod_l+0xb2>
 8008016:	4652      	mov	r2, sl
 8008018:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800801c:	ec43 2b10 	vmov	d0, r2, r3
 8008020:	b01f      	add	sp, #124	@ 0x7c
 8008022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	2920      	cmp	r1, #32
 8008028:	d1ce      	bne.n	8007fc8 <_strtod_l+0x30>
 800802a:	3201      	adds	r2, #1
 800802c:	e7c1      	b.n	8007fb2 <_strtod_l+0x1a>
 800802e:	292d      	cmp	r1, #45	@ 0x2d
 8008030:	d1ca      	bne.n	8007fc8 <_strtod_l+0x30>
 8008032:	2101      	movs	r1, #1
 8008034:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008036:	1c51      	adds	r1, r2, #1
 8008038:	9119      	str	r1, [sp, #100]	@ 0x64
 800803a:	7852      	ldrb	r2, [r2, #1]
 800803c:	2a00      	cmp	r2, #0
 800803e:	d1c5      	bne.n	8007fcc <_strtod_l+0x34>
 8008040:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008042:	9419      	str	r4, [sp, #100]	@ 0x64
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 8570 	bne.w	8008b2a <_strtod_l+0xb92>
 800804a:	4652      	mov	r2, sl
 800804c:	465b      	mov	r3, fp
 800804e:	e7e5      	b.n	800801c <_strtod_l+0x84>
 8008050:	2100      	movs	r1, #0
 8008052:	e7ef      	b.n	8008034 <_strtod_l+0x9c>
 8008054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008056:	b13a      	cbz	r2, 8008068 <_strtod_l+0xd0>
 8008058:	2135      	movs	r1, #53	@ 0x35
 800805a:	a81c      	add	r0, sp, #112	@ 0x70
 800805c:	f7ff ff3a 	bl	8007ed4 <__copybits>
 8008060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008062:	9805      	ldr	r0, [sp, #20]
 8008064:	f7ff fb08 	bl	8007678 <_Bfree>
 8008068:	3e01      	subs	r6, #1
 800806a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800806c:	2e04      	cmp	r6, #4
 800806e:	d806      	bhi.n	800807e <_strtod_l+0xe6>
 8008070:	e8df f006 	tbb	[pc, r6]
 8008074:	201d0314 	.word	0x201d0314
 8008078:	14          	.byte	0x14
 8008079:	00          	.byte	0x00
 800807a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800807e:	05e1      	lsls	r1, r4, #23
 8008080:	bf48      	it	mi
 8008082:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800808a:	0d1b      	lsrs	r3, r3, #20
 800808c:	051b      	lsls	r3, r3, #20
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1bb      	bne.n	800800a <_strtod_l+0x72>
 8008092:	f7fe fb2f 	bl	80066f4 <__errno>
 8008096:	2322      	movs	r3, #34	@ 0x22
 8008098:	6003      	str	r3, [r0, #0]
 800809a:	e7b6      	b.n	800800a <_strtod_l+0x72>
 800809c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80080a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80080a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080ac:	e7e7      	b.n	800807e <_strtod_l+0xe6>
 80080ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800822c <_strtod_l+0x294>
 80080b2:	e7e4      	b.n	800807e <_strtod_l+0xe6>
 80080b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80080b8:	f04f 3aff 	mov.w	sl, #4294967295
 80080bc:	e7df      	b.n	800807e <_strtod_l+0xe6>
 80080be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b30      	cmp	r3, #48	@ 0x30
 80080c8:	d0f9      	beq.n	80080be <_strtod_l+0x126>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d09d      	beq.n	800800a <_strtod_l+0x72>
 80080ce:	2301      	movs	r3, #1
 80080d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80080d6:	2300      	movs	r3, #0
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	930a      	str	r3, [sp, #40]	@ 0x28
 80080dc:	461f      	mov	r7, r3
 80080de:	220a      	movs	r2, #10
 80080e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80080e2:	7805      	ldrb	r5, [r0, #0]
 80080e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80080e8:	b2d9      	uxtb	r1, r3
 80080ea:	2909      	cmp	r1, #9
 80080ec:	d928      	bls.n	8008140 <_strtod_l+0x1a8>
 80080ee:	494e      	ldr	r1, [pc, #312]	@ (8008228 <_strtod_l+0x290>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	f000 ffd5 	bl	80090a0 <strncmp>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d032      	beq.n	8008160 <_strtod_l+0x1c8>
 80080fa:	2000      	movs	r0, #0
 80080fc:	462a      	mov	r2, r5
 80080fe:	4681      	mov	r9, r0
 8008100:	463d      	mov	r5, r7
 8008102:	4603      	mov	r3, r0
 8008104:	2a65      	cmp	r2, #101	@ 0x65
 8008106:	d001      	beq.n	800810c <_strtod_l+0x174>
 8008108:	2a45      	cmp	r2, #69	@ 0x45
 800810a:	d114      	bne.n	8008136 <_strtod_l+0x19e>
 800810c:	b91d      	cbnz	r5, 8008116 <_strtod_l+0x17e>
 800810e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008110:	4302      	orrs	r2, r0
 8008112:	d095      	beq.n	8008040 <_strtod_l+0xa8>
 8008114:	2500      	movs	r5, #0
 8008116:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008118:	1c62      	adds	r2, r4, #1
 800811a:	9219      	str	r2, [sp, #100]	@ 0x64
 800811c:	7862      	ldrb	r2, [r4, #1]
 800811e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008120:	d077      	beq.n	8008212 <_strtod_l+0x27a>
 8008122:	2a2d      	cmp	r2, #45	@ 0x2d
 8008124:	d07b      	beq.n	800821e <_strtod_l+0x286>
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800812e:	2909      	cmp	r1, #9
 8008130:	f240 8082 	bls.w	8008238 <_strtod_l+0x2a0>
 8008134:	9419      	str	r4, [sp, #100]	@ 0x64
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	e0a2      	b.n	8008282 <_strtod_l+0x2ea>
 800813c:	2300      	movs	r3, #0
 800813e:	e7c7      	b.n	80080d0 <_strtod_l+0x138>
 8008140:	2f08      	cmp	r7, #8
 8008142:	bfd5      	itete	le
 8008144:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008146:	9908      	ldrgt	r1, [sp, #32]
 8008148:	fb02 3301 	mlale	r3, r2, r1, r3
 800814c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008150:	f100 0001 	add.w	r0, r0, #1
 8008154:	bfd4      	ite	le
 8008156:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008158:	9308      	strgt	r3, [sp, #32]
 800815a:	3701      	adds	r7, #1
 800815c:	9019      	str	r0, [sp, #100]	@ 0x64
 800815e:	e7bf      	b.n	80080e0 <_strtod_l+0x148>
 8008160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	9219      	str	r2, [sp, #100]	@ 0x64
 8008166:	785a      	ldrb	r2, [r3, #1]
 8008168:	b37f      	cbz	r7, 80081ca <_strtod_l+0x232>
 800816a:	4681      	mov	r9, r0
 800816c:	463d      	mov	r5, r7
 800816e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008172:	2b09      	cmp	r3, #9
 8008174:	d912      	bls.n	800819c <_strtod_l+0x204>
 8008176:	2301      	movs	r3, #1
 8008178:	e7c4      	b.n	8008104 <_strtod_l+0x16c>
 800817a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008180:	785a      	ldrb	r2, [r3, #1]
 8008182:	3001      	adds	r0, #1
 8008184:	2a30      	cmp	r2, #48	@ 0x30
 8008186:	d0f8      	beq.n	800817a <_strtod_l+0x1e2>
 8008188:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800818c:	2b08      	cmp	r3, #8
 800818e:	f200 84d3 	bhi.w	8008b38 <_strtod_l+0xba0>
 8008192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008194:	930c      	str	r3, [sp, #48]	@ 0x30
 8008196:	4681      	mov	r9, r0
 8008198:	2000      	movs	r0, #0
 800819a:	4605      	mov	r5, r0
 800819c:	3a30      	subs	r2, #48	@ 0x30
 800819e:	f100 0301 	add.w	r3, r0, #1
 80081a2:	d02a      	beq.n	80081fa <_strtod_l+0x262>
 80081a4:	4499      	add	r9, r3
 80081a6:	eb00 0c05 	add.w	ip, r0, r5
 80081aa:	462b      	mov	r3, r5
 80081ac:	210a      	movs	r1, #10
 80081ae:	4563      	cmp	r3, ip
 80081b0:	d10d      	bne.n	80081ce <_strtod_l+0x236>
 80081b2:	1c69      	adds	r1, r5, #1
 80081b4:	4401      	add	r1, r0
 80081b6:	4428      	add	r0, r5
 80081b8:	2808      	cmp	r0, #8
 80081ba:	dc16      	bgt.n	80081ea <_strtod_l+0x252>
 80081bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80081be:	230a      	movs	r3, #10
 80081c0:	fb03 2300 	mla	r3, r3, r0, r2
 80081c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80081c6:	2300      	movs	r3, #0
 80081c8:	e018      	b.n	80081fc <_strtod_l+0x264>
 80081ca:	4638      	mov	r0, r7
 80081cc:	e7da      	b.n	8008184 <_strtod_l+0x1ec>
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	f103 0301 	add.w	r3, r3, #1
 80081d4:	dc03      	bgt.n	80081de <_strtod_l+0x246>
 80081d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80081d8:	434e      	muls	r6, r1
 80081da:	960a      	str	r6, [sp, #40]	@ 0x28
 80081dc:	e7e7      	b.n	80081ae <_strtod_l+0x216>
 80081de:	2b10      	cmp	r3, #16
 80081e0:	bfde      	ittt	le
 80081e2:	9e08      	ldrle	r6, [sp, #32]
 80081e4:	434e      	mulle	r6, r1
 80081e6:	9608      	strle	r6, [sp, #32]
 80081e8:	e7e1      	b.n	80081ae <_strtod_l+0x216>
 80081ea:	280f      	cmp	r0, #15
 80081ec:	dceb      	bgt.n	80081c6 <_strtod_l+0x22e>
 80081ee:	9808      	ldr	r0, [sp, #32]
 80081f0:	230a      	movs	r3, #10
 80081f2:	fb03 2300 	mla	r3, r3, r0, r2
 80081f6:	9308      	str	r3, [sp, #32]
 80081f8:	e7e5      	b.n	80081c6 <_strtod_l+0x22e>
 80081fa:	4629      	mov	r1, r5
 80081fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081fe:	1c50      	adds	r0, r2, #1
 8008200:	9019      	str	r0, [sp, #100]	@ 0x64
 8008202:	7852      	ldrb	r2, [r2, #1]
 8008204:	4618      	mov	r0, r3
 8008206:	460d      	mov	r5, r1
 8008208:	e7b1      	b.n	800816e <_strtod_l+0x1d6>
 800820a:	f04f 0900 	mov.w	r9, #0
 800820e:	2301      	movs	r3, #1
 8008210:	e77d      	b.n	800810e <_strtod_l+0x176>
 8008212:	f04f 0c00 	mov.w	ip, #0
 8008216:	1ca2      	adds	r2, r4, #2
 8008218:	9219      	str	r2, [sp, #100]	@ 0x64
 800821a:	78a2      	ldrb	r2, [r4, #2]
 800821c:	e785      	b.n	800812a <_strtod_l+0x192>
 800821e:	f04f 0c01 	mov.w	ip, #1
 8008222:	e7f8      	b.n	8008216 <_strtod_l+0x27e>
 8008224:	0800a078 	.word	0x0800a078
 8008228:	0800a060 	.word	0x0800a060
 800822c:	7ff00000 	.word	0x7ff00000
 8008230:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008232:	1c51      	adds	r1, r2, #1
 8008234:	9119      	str	r1, [sp, #100]	@ 0x64
 8008236:	7852      	ldrb	r2, [r2, #1]
 8008238:	2a30      	cmp	r2, #48	@ 0x30
 800823a:	d0f9      	beq.n	8008230 <_strtod_l+0x298>
 800823c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008240:	2908      	cmp	r1, #8
 8008242:	f63f af78 	bhi.w	8008136 <_strtod_l+0x19e>
 8008246:	3a30      	subs	r2, #48	@ 0x30
 8008248:	920e      	str	r2, [sp, #56]	@ 0x38
 800824a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800824c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800824e:	f04f 080a 	mov.w	r8, #10
 8008252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008254:	1c56      	adds	r6, r2, #1
 8008256:	9619      	str	r6, [sp, #100]	@ 0x64
 8008258:	7852      	ldrb	r2, [r2, #1]
 800825a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800825e:	f1be 0f09 	cmp.w	lr, #9
 8008262:	d939      	bls.n	80082d8 <_strtod_l+0x340>
 8008264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008266:	1a76      	subs	r6, r6, r1
 8008268:	2e08      	cmp	r6, #8
 800826a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800826e:	dc03      	bgt.n	8008278 <_strtod_l+0x2e0>
 8008270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008272:	4588      	cmp	r8, r1
 8008274:	bfa8      	it	ge
 8008276:	4688      	movge	r8, r1
 8008278:	f1bc 0f00 	cmp.w	ip, #0
 800827c:	d001      	beq.n	8008282 <_strtod_l+0x2ea>
 800827e:	f1c8 0800 	rsb	r8, r8, #0
 8008282:	2d00      	cmp	r5, #0
 8008284:	d14e      	bne.n	8008324 <_strtod_l+0x38c>
 8008286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008288:	4308      	orrs	r0, r1
 800828a:	f47f aebe 	bne.w	800800a <_strtod_l+0x72>
 800828e:	2b00      	cmp	r3, #0
 8008290:	f47f aed6 	bne.w	8008040 <_strtod_l+0xa8>
 8008294:	2a69      	cmp	r2, #105	@ 0x69
 8008296:	d028      	beq.n	80082ea <_strtod_l+0x352>
 8008298:	dc25      	bgt.n	80082e6 <_strtod_l+0x34e>
 800829a:	2a49      	cmp	r2, #73	@ 0x49
 800829c:	d025      	beq.n	80082ea <_strtod_l+0x352>
 800829e:	2a4e      	cmp	r2, #78	@ 0x4e
 80082a0:	f47f aece 	bne.w	8008040 <_strtod_l+0xa8>
 80082a4:	499b      	ldr	r1, [pc, #620]	@ (8008514 <_strtod_l+0x57c>)
 80082a6:	a819      	add	r0, sp, #100	@ 0x64
 80082a8:	f001 f9ee 	bl	8009688 <__match>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f43f aec7 	beq.w	8008040 <_strtod_l+0xa8>
 80082b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b28      	cmp	r3, #40	@ 0x28
 80082b8:	d12e      	bne.n	8008318 <_strtod_l+0x380>
 80082ba:	4997      	ldr	r1, [pc, #604]	@ (8008518 <_strtod_l+0x580>)
 80082bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80082be:	a819      	add	r0, sp, #100	@ 0x64
 80082c0:	f001 f9f6 	bl	80096b0 <__hexnan>
 80082c4:	2805      	cmp	r0, #5
 80082c6:	d127      	bne.n	8008318 <_strtod_l+0x380>
 80082c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80082ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80082d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80082d6:	e698      	b.n	800800a <_strtod_l+0x72>
 80082d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082da:	fb08 2101 	mla	r1, r8, r1, r2
 80082de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80082e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80082e4:	e7b5      	b.n	8008252 <_strtod_l+0x2ba>
 80082e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80082e8:	e7da      	b.n	80082a0 <_strtod_l+0x308>
 80082ea:	498c      	ldr	r1, [pc, #560]	@ (800851c <_strtod_l+0x584>)
 80082ec:	a819      	add	r0, sp, #100	@ 0x64
 80082ee:	f001 f9cb 	bl	8009688 <__match>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f aea4 	beq.w	8008040 <_strtod_l+0xa8>
 80082f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082fa:	4989      	ldr	r1, [pc, #548]	@ (8008520 <_strtod_l+0x588>)
 80082fc:	3b01      	subs	r3, #1
 80082fe:	a819      	add	r0, sp, #100	@ 0x64
 8008300:	9319      	str	r3, [sp, #100]	@ 0x64
 8008302:	f001 f9c1 	bl	8009688 <__match>
 8008306:	b910      	cbnz	r0, 800830e <_strtod_l+0x376>
 8008308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800830a:	3301      	adds	r3, #1
 800830c:	9319      	str	r3, [sp, #100]	@ 0x64
 800830e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008530 <_strtod_l+0x598>
 8008312:	f04f 0a00 	mov.w	sl, #0
 8008316:	e678      	b.n	800800a <_strtod_l+0x72>
 8008318:	4882      	ldr	r0, [pc, #520]	@ (8008524 <_strtod_l+0x58c>)
 800831a:	f000 fef1 	bl	8009100 <nan>
 800831e:	ec5b ab10 	vmov	sl, fp, d0
 8008322:	e672      	b.n	800800a <_strtod_l+0x72>
 8008324:	eba8 0309 	sub.w	r3, r8, r9
 8008328:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800832a:	9309      	str	r3, [sp, #36]	@ 0x24
 800832c:	2f00      	cmp	r7, #0
 800832e:	bf08      	it	eq
 8008330:	462f      	moveq	r7, r5
 8008332:	2d10      	cmp	r5, #16
 8008334:	462c      	mov	r4, r5
 8008336:	bfa8      	it	ge
 8008338:	2410      	movge	r4, #16
 800833a:	f7f8 f903 	bl	8000544 <__aeabi_ui2d>
 800833e:	2d09      	cmp	r5, #9
 8008340:	4682      	mov	sl, r0
 8008342:	468b      	mov	fp, r1
 8008344:	dc13      	bgt.n	800836e <_strtod_l+0x3d6>
 8008346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	f43f ae5e 	beq.w	800800a <_strtod_l+0x72>
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	dd78      	ble.n	8008444 <_strtod_l+0x4ac>
 8008352:	2b16      	cmp	r3, #22
 8008354:	dc5f      	bgt.n	8008416 <_strtod_l+0x47e>
 8008356:	4974      	ldr	r1, [pc, #464]	@ (8008528 <_strtod_l+0x590>)
 8008358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800835c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008360:	4652      	mov	r2, sl
 8008362:	465b      	mov	r3, fp
 8008364:	f7f8 f968 	bl	8000638 <__aeabi_dmul>
 8008368:	4682      	mov	sl, r0
 800836a:	468b      	mov	fp, r1
 800836c:	e64d      	b.n	800800a <_strtod_l+0x72>
 800836e:	4b6e      	ldr	r3, [pc, #440]	@ (8008528 <_strtod_l+0x590>)
 8008370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008374:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008378:	f7f8 f95e 	bl	8000638 <__aeabi_dmul>
 800837c:	4682      	mov	sl, r0
 800837e:	9808      	ldr	r0, [sp, #32]
 8008380:	468b      	mov	fp, r1
 8008382:	f7f8 f8df 	bl	8000544 <__aeabi_ui2d>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f7 ff9d 	bl	80002cc <__adddf3>
 8008392:	2d0f      	cmp	r5, #15
 8008394:	4682      	mov	sl, r0
 8008396:	468b      	mov	fp, r1
 8008398:	ddd5      	ble.n	8008346 <_strtod_l+0x3ae>
 800839a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839c:	1b2c      	subs	r4, r5, r4
 800839e:	441c      	add	r4, r3
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	f340 8096 	ble.w	80084d2 <_strtod_l+0x53a>
 80083a6:	f014 030f 	ands.w	r3, r4, #15
 80083aa:	d00a      	beq.n	80083c2 <_strtod_l+0x42a>
 80083ac:	495e      	ldr	r1, [pc, #376]	@ (8008528 <_strtod_l+0x590>)
 80083ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083b2:	4652      	mov	r2, sl
 80083b4:	465b      	mov	r3, fp
 80083b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ba:	f7f8 f93d 	bl	8000638 <__aeabi_dmul>
 80083be:	4682      	mov	sl, r0
 80083c0:	468b      	mov	fp, r1
 80083c2:	f034 040f 	bics.w	r4, r4, #15
 80083c6:	d073      	beq.n	80084b0 <_strtod_l+0x518>
 80083c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80083cc:	dd48      	ble.n	8008460 <_strtod_l+0x4c8>
 80083ce:	2400      	movs	r4, #0
 80083d0:	46a0      	mov	r8, r4
 80083d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80083d4:	46a1      	mov	r9, r4
 80083d6:	9a05      	ldr	r2, [sp, #20]
 80083d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008530 <_strtod_l+0x598>
 80083dc:	2322      	movs	r3, #34	@ 0x22
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	f04f 0a00 	mov.w	sl, #0
 80083e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f43f ae0f 	beq.w	800800a <_strtod_l+0x72>
 80083ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ee:	9805      	ldr	r0, [sp, #20]
 80083f0:	f7ff f942 	bl	8007678 <_Bfree>
 80083f4:	9805      	ldr	r0, [sp, #20]
 80083f6:	4649      	mov	r1, r9
 80083f8:	f7ff f93e 	bl	8007678 <_Bfree>
 80083fc:	9805      	ldr	r0, [sp, #20]
 80083fe:	4641      	mov	r1, r8
 8008400:	f7ff f93a 	bl	8007678 <_Bfree>
 8008404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008406:	9805      	ldr	r0, [sp, #20]
 8008408:	f7ff f936 	bl	8007678 <_Bfree>
 800840c:	9805      	ldr	r0, [sp, #20]
 800840e:	4621      	mov	r1, r4
 8008410:	f7ff f932 	bl	8007678 <_Bfree>
 8008414:	e5f9      	b.n	800800a <_strtod_l+0x72>
 8008416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008418:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800841c:	4293      	cmp	r3, r2
 800841e:	dbbc      	blt.n	800839a <_strtod_l+0x402>
 8008420:	4c41      	ldr	r4, [pc, #260]	@ (8008528 <_strtod_l+0x590>)
 8008422:	f1c5 050f 	rsb	r5, r5, #15
 8008426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800842a:	4652      	mov	r2, sl
 800842c:	465b      	mov	r3, fp
 800842e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008432:	f7f8 f901 	bl	8000638 <__aeabi_dmul>
 8008436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008438:	1b5d      	subs	r5, r3, r5
 800843a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800843e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008442:	e78f      	b.n	8008364 <_strtod_l+0x3cc>
 8008444:	3316      	adds	r3, #22
 8008446:	dba8      	blt.n	800839a <_strtod_l+0x402>
 8008448:	4b37      	ldr	r3, [pc, #220]	@ (8008528 <_strtod_l+0x590>)
 800844a:	eba9 0808 	sub.w	r8, r9, r8
 800844e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008452:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008456:	4650      	mov	r0, sl
 8008458:	4659      	mov	r1, fp
 800845a:	f7f8 fa17 	bl	800088c <__aeabi_ddiv>
 800845e:	e783      	b.n	8008368 <_strtod_l+0x3d0>
 8008460:	4b32      	ldr	r3, [pc, #200]	@ (800852c <_strtod_l+0x594>)
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	2300      	movs	r3, #0
 8008466:	1124      	asrs	r4, r4, #4
 8008468:	4650      	mov	r0, sl
 800846a:	4659      	mov	r1, fp
 800846c:	461e      	mov	r6, r3
 800846e:	2c01      	cmp	r4, #1
 8008470:	dc21      	bgt.n	80084b6 <_strtod_l+0x51e>
 8008472:	b10b      	cbz	r3, 8008478 <_strtod_l+0x4e0>
 8008474:	4682      	mov	sl, r0
 8008476:	468b      	mov	fp, r1
 8008478:	492c      	ldr	r1, [pc, #176]	@ (800852c <_strtod_l+0x594>)
 800847a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800847e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008482:	4652      	mov	r2, sl
 8008484:	465b      	mov	r3, fp
 8008486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800848a:	f7f8 f8d5 	bl	8000638 <__aeabi_dmul>
 800848e:	4b28      	ldr	r3, [pc, #160]	@ (8008530 <_strtod_l+0x598>)
 8008490:	460a      	mov	r2, r1
 8008492:	400b      	ands	r3, r1
 8008494:	4927      	ldr	r1, [pc, #156]	@ (8008534 <_strtod_l+0x59c>)
 8008496:	428b      	cmp	r3, r1
 8008498:	4682      	mov	sl, r0
 800849a:	d898      	bhi.n	80083ce <_strtod_l+0x436>
 800849c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf86      	itte	hi
 80084a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008538 <_strtod_l+0x5a0>
 80084a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80084ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80084b0:	2300      	movs	r3, #0
 80084b2:	9308      	str	r3, [sp, #32]
 80084b4:	e07a      	b.n	80085ac <_strtod_l+0x614>
 80084b6:	07e2      	lsls	r2, r4, #31
 80084b8:	d505      	bpl.n	80084c6 <_strtod_l+0x52e>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f8ba 	bl	8000638 <__aeabi_dmul>
 80084c4:	2301      	movs	r3, #1
 80084c6:	9a08      	ldr	r2, [sp, #32]
 80084c8:	3208      	adds	r2, #8
 80084ca:	3601      	adds	r6, #1
 80084cc:	1064      	asrs	r4, r4, #1
 80084ce:	9208      	str	r2, [sp, #32]
 80084d0:	e7cd      	b.n	800846e <_strtod_l+0x4d6>
 80084d2:	d0ed      	beq.n	80084b0 <_strtod_l+0x518>
 80084d4:	4264      	negs	r4, r4
 80084d6:	f014 020f 	ands.w	r2, r4, #15
 80084da:	d00a      	beq.n	80084f2 <_strtod_l+0x55a>
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <_strtod_l+0x590>)
 80084de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e2:	4650      	mov	r0, sl
 80084e4:	4659      	mov	r1, fp
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f8 f9cf 	bl	800088c <__aeabi_ddiv>
 80084ee:	4682      	mov	sl, r0
 80084f0:	468b      	mov	fp, r1
 80084f2:	1124      	asrs	r4, r4, #4
 80084f4:	d0dc      	beq.n	80084b0 <_strtod_l+0x518>
 80084f6:	2c1f      	cmp	r4, #31
 80084f8:	dd20      	ble.n	800853c <_strtod_l+0x5a4>
 80084fa:	2400      	movs	r4, #0
 80084fc:	46a0      	mov	r8, r4
 80084fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8008500:	46a1      	mov	r9, r4
 8008502:	9a05      	ldr	r2, [sp, #20]
 8008504:	2322      	movs	r3, #34	@ 0x22
 8008506:	f04f 0a00 	mov.w	sl, #0
 800850a:	f04f 0b00 	mov.w	fp, #0
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	e768      	b.n	80083e4 <_strtod_l+0x44c>
 8008512:	bf00      	nop
 8008514:	08009e51 	.word	0x08009e51
 8008518:	0800a064 	.word	0x0800a064
 800851c:	08009e49 	.word	0x08009e49
 8008520:	08009e80 	.word	0x08009e80
 8008524:	0800a20d 	.word	0x0800a20d
 8008528:	08009f98 	.word	0x08009f98
 800852c:	08009f70 	.word	0x08009f70
 8008530:	7ff00000 	.word	0x7ff00000
 8008534:	7ca00000 	.word	0x7ca00000
 8008538:	7fefffff 	.word	0x7fefffff
 800853c:	f014 0310 	ands.w	r3, r4, #16
 8008540:	bf18      	it	ne
 8008542:	236a      	movne	r3, #106	@ 0x6a
 8008544:	4ea9      	ldr	r6, [pc, #676]	@ (80087ec <_strtod_l+0x854>)
 8008546:	9308      	str	r3, [sp, #32]
 8008548:	4650      	mov	r0, sl
 800854a:	4659      	mov	r1, fp
 800854c:	2300      	movs	r3, #0
 800854e:	07e2      	lsls	r2, r4, #31
 8008550:	d504      	bpl.n	800855c <_strtod_l+0x5c4>
 8008552:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008556:	f7f8 f86f 	bl	8000638 <__aeabi_dmul>
 800855a:	2301      	movs	r3, #1
 800855c:	1064      	asrs	r4, r4, #1
 800855e:	f106 0608 	add.w	r6, r6, #8
 8008562:	d1f4      	bne.n	800854e <_strtod_l+0x5b6>
 8008564:	b10b      	cbz	r3, 800856a <_strtod_l+0x5d2>
 8008566:	4682      	mov	sl, r0
 8008568:	468b      	mov	fp, r1
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	b1b3      	cbz	r3, 800859c <_strtod_l+0x604>
 800856e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008572:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008576:	2b00      	cmp	r3, #0
 8008578:	4659      	mov	r1, fp
 800857a:	dd0f      	ble.n	800859c <_strtod_l+0x604>
 800857c:	2b1f      	cmp	r3, #31
 800857e:	dd55      	ble.n	800862c <_strtod_l+0x694>
 8008580:	2b34      	cmp	r3, #52	@ 0x34
 8008582:	bfde      	ittt	le
 8008584:	f04f 33ff 	movle.w	r3, #4294967295
 8008588:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800858c:	4093      	lslle	r3, r2
 800858e:	f04f 0a00 	mov.w	sl, #0
 8008592:	bfcc      	ite	gt
 8008594:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008598:	ea03 0b01 	andle.w	fp, r3, r1
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4650      	mov	r0, sl
 80085a2:	4659      	mov	r1, fp
 80085a4:	f7f8 fab0 	bl	8000b08 <__aeabi_dcmpeq>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d1a6      	bne.n	80084fa <_strtod_l+0x562>
 80085ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80085b2:	9805      	ldr	r0, [sp, #20]
 80085b4:	462b      	mov	r3, r5
 80085b6:	463a      	mov	r2, r7
 80085b8:	f7ff f8c6 	bl	8007748 <__s2b>
 80085bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80085be:	2800      	cmp	r0, #0
 80085c0:	f43f af05 	beq.w	80083ce <_strtod_l+0x436>
 80085c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	eba9 0308 	sub.w	r3, r9, r8
 80085cc:	bfa8      	it	ge
 80085ce:	2300      	movge	r3, #0
 80085d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80085d2:	2400      	movs	r4, #0
 80085d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80085d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80085da:	46a0      	mov	r8, r4
 80085dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085de:	9805      	ldr	r0, [sp, #20]
 80085e0:	6859      	ldr	r1, [r3, #4]
 80085e2:	f7ff f809 	bl	80075f8 <_Balloc>
 80085e6:	4681      	mov	r9, r0
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f43f aef4 	beq.w	80083d6 <_strtod_l+0x43e>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	3202      	adds	r2, #2
 80085f4:	f103 010c 	add.w	r1, r3, #12
 80085f8:	0092      	lsls	r2, r2, #2
 80085fa:	300c      	adds	r0, #12
 80085fc:	f000 fd72 	bl	80090e4 <memcpy>
 8008600:	ec4b ab10 	vmov	d0, sl, fp
 8008604:	9805      	ldr	r0, [sp, #20]
 8008606:	aa1c      	add	r2, sp, #112	@ 0x70
 8008608:	a91b      	add	r1, sp, #108	@ 0x6c
 800860a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800860e:	f7ff fbd7 	bl	8007dc0 <__d2b>
 8008612:	901a      	str	r0, [sp, #104]	@ 0x68
 8008614:	2800      	cmp	r0, #0
 8008616:	f43f aede 	beq.w	80083d6 <_strtod_l+0x43e>
 800861a:	9805      	ldr	r0, [sp, #20]
 800861c:	2101      	movs	r1, #1
 800861e:	f7ff f929 	bl	8007874 <__i2b>
 8008622:	4680      	mov	r8, r0
 8008624:	b948      	cbnz	r0, 800863a <_strtod_l+0x6a2>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	e6d4      	b.n	80083d6 <_strtod_l+0x43e>
 800862c:	f04f 32ff 	mov.w	r2, #4294967295
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	ea03 0a0a 	and.w	sl, r3, sl
 8008638:	e7b0      	b.n	800859c <_strtod_l+0x604>
 800863a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800863c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800863e:	2d00      	cmp	r5, #0
 8008640:	bfab      	itete	ge
 8008642:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008644:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008646:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008648:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800864a:	bfac      	ite	ge
 800864c:	18ef      	addge	r7, r5, r3
 800864e:	1b5e      	sublt	r6, r3, r5
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	1aed      	subs	r5, r5, r3
 8008654:	4415      	add	r5, r2
 8008656:	4b66      	ldr	r3, [pc, #408]	@ (80087f0 <_strtod_l+0x858>)
 8008658:	3d01      	subs	r5, #1
 800865a:	429d      	cmp	r5, r3
 800865c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008660:	da50      	bge.n	8008704 <_strtod_l+0x76c>
 8008662:	1b5b      	subs	r3, r3, r5
 8008664:	2b1f      	cmp	r3, #31
 8008666:	eba2 0203 	sub.w	r2, r2, r3
 800866a:	f04f 0101 	mov.w	r1, #1
 800866e:	dc3d      	bgt.n	80086ec <_strtod_l+0x754>
 8008670:	fa01 f303 	lsl.w	r3, r1, r3
 8008674:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008676:	2300      	movs	r3, #0
 8008678:	9310      	str	r3, [sp, #64]	@ 0x40
 800867a:	18bd      	adds	r5, r7, r2
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	42af      	cmp	r7, r5
 8008680:	4416      	add	r6, r2
 8008682:	441e      	add	r6, r3
 8008684:	463b      	mov	r3, r7
 8008686:	bfa8      	it	ge
 8008688:	462b      	movge	r3, r5
 800868a:	42b3      	cmp	r3, r6
 800868c:	bfa8      	it	ge
 800868e:	4633      	movge	r3, r6
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfc2      	ittt	gt
 8008694:	1aed      	subgt	r5, r5, r3
 8008696:	1af6      	subgt	r6, r6, r3
 8008698:	1aff      	subgt	r7, r7, r3
 800869a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd16      	ble.n	80086ce <_strtod_l+0x736>
 80086a0:	4641      	mov	r1, r8
 80086a2:	9805      	ldr	r0, [sp, #20]
 80086a4:	461a      	mov	r2, r3
 80086a6:	f7ff f9a5 	bl	80079f4 <__pow5mult>
 80086aa:	4680      	mov	r8, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d0ba      	beq.n	8008626 <_strtod_l+0x68e>
 80086b0:	4601      	mov	r1, r0
 80086b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80086b4:	9805      	ldr	r0, [sp, #20]
 80086b6:	f7ff f8f3 	bl	80078a0 <__multiply>
 80086ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80086bc:	2800      	cmp	r0, #0
 80086be:	f43f ae8a 	beq.w	80083d6 <_strtod_l+0x43e>
 80086c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	f7fe ffd7 	bl	8007678 <_Bfree>
 80086ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	dc1d      	bgt.n	800870e <_strtod_l+0x776>
 80086d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd23      	ble.n	8008720 <_strtod_l+0x788>
 80086d8:	4649      	mov	r1, r9
 80086da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80086dc:	9805      	ldr	r0, [sp, #20]
 80086de:	f7ff f989 	bl	80079f4 <__pow5mult>
 80086e2:	4681      	mov	r9, r0
 80086e4:	b9e0      	cbnz	r0, 8008720 <_strtod_l+0x788>
 80086e6:	f04f 0900 	mov.w	r9, #0
 80086ea:	e674      	b.n	80083d6 <_strtod_l+0x43e>
 80086ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80086f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80086f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80086f8:	35e2      	adds	r5, #226	@ 0xe2
 80086fa:	fa01 f305 	lsl.w	r3, r1, r5
 80086fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008700:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008702:	e7ba      	b.n	800867a <_strtod_l+0x6e2>
 8008704:	2300      	movs	r3, #0
 8008706:	9310      	str	r3, [sp, #64]	@ 0x40
 8008708:	2301      	movs	r3, #1
 800870a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800870c:	e7b5      	b.n	800867a <_strtod_l+0x6e2>
 800870e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008710:	9805      	ldr	r0, [sp, #20]
 8008712:	462a      	mov	r2, r5
 8008714:	f7ff f9c8 	bl	8007aa8 <__lshift>
 8008718:	901a      	str	r0, [sp, #104]	@ 0x68
 800871a:	2800      	cmp	r0, #0
 800871c:	d1d9      	bne.n	80086d2 <_strtod_l+0x73a>
 800871e:	e65a      	b.n	80083d6 <_strtod_l+0x43e>
 8008720:	2e00      	cmp	r6, #0
 8008722:	dd07      	ble.n	8008734 <_strtod_l+0x79c>
 8008724:	4649      	mov	r1, r9
 8008726:	9805      	ldr	r0, [sp, #20]
 8008728:	4632      	mov	r2, r6
 800872a:	f7ff f9bd 	bl	8007aa8 <__lshift>
 800872e:	4681      	mov	r9, r0
 8008730:	2800      	cmp	r0, #0
 8008732:	d0d8      	beq.n	80086e6 <_strtod_l+0x74e>
 8008734:	2f00      	cmp	r7, #0
 8008736:	dd08      	ble.n	800874a <_strtod_l+0x7b2>
 8008738:	4641      	mov	r1, r8
 800873a:	9805      	ldr	r0, [sp, #20]
 800873c:	463a      	mov	r2, r7
 800873e:	f7ff f9b3 	bl	8007aa8 <__lshift>
 8008742:	4680      	mov	r8, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	f43f ae46 	beq.w	80083d6 <_strtod_l+0x43e>
 800874a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	464a      	mov	r2, r9
 8008750:	f7ff fa32 	bl	8007bb8 <__mdiff>
 8008754:	4604      	mov	r4, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f ae3d 	beq.w	80083d6 <_strtod_l+0x43e>
 800875c:	68c3      	ldr	r3, [r0, #12]
 800875e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008760:	2300      	movs	r3, #0
 8008762:	60c3      	str	r3, [r0, #12]
 8008764:	4641      	mov	r1, r8
 8008766:	f7ff fa0b 	bl	8007b80 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	da46      	bge.n	80087fc <_strtod_l+0x864>
 800876e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008770:	ea53 030a 	orrs.w	r3, r3, sl
 8008774:	d16c      	bne.n	8008850 <_strtod_l+0x8b8>
 8008776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800877a:	2b00      	cmp	r3, #0
 800877c:	d168      	bne.n	8008850 <_strtod_l+0x8b8>
 800877e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008782:	0d1b      	lsrs	r3, r3, #20
 8008784:	051b      	lsls	r3, r3, #20
 8008786:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800878a:	d961      	bls.n	8008850 <_strtod_l+0x8b8>
 800878c:	6963      	ldr	r3, [r4, #20]
 800878e:	b913      	cbnz	r3, 8008796 <_strtod_l+0x7fe>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	2b01      	cmp	r3, #1
 8008794:	dd5c      	ble.n	8008850 <_strtod_l+0x8b8>
 8008796:	4621      	mov	r1, r4
 8008798:	2201      	movs	r2, #1
 800879a:	9805      	ldr	r0, [sp, #20]
 800879c:	f7ff f984 	bl	8007aa8 <__lshift>
 80087a0:	4641      	mov	r1, r8
 80087a2:	4604      	mov	r4, r0
 80087a4:	f7ff f9ec 	bl	8007b80 <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dd51      	ble.n	8008850 <_strtod_l+0x8b8>
 80087ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087b0:	9a08      	ldr	r2, [sp, #32]
 80087b2:	0d1b      	lsrs	r3, r3, #20
 80087b4:	051b      	lsls	r3, r3, #20
 80087b6:	2a00      	cmp	r2, #0
 80087b8:	d06b      	beq.n	8008892 <_strtod_l+0x8fa>
 80087ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80087be:	d868      	bhi.n	8008892 <_strtod_l+0x8fa>
 80087c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80087c4:	f67f ae9d 	bls.w	8008502 <_strtod_l+0x56a>
 80087c8:	4b0a      	ldr	r3, [pc, #40]	@ (80087f4 <_strtod_l+0x85c>)
 80087ca:	4650      	mov	r0, sl
 80087cc:	4659      	mov	r1, fp
 80087ce:	2200      	movs	r2, #0
 80087d0:	f7f7 ff32 	bl	8000638 <__aeabi_dmul>
 80087d4:	4b08      	ldr	r3, [pc, #32]	@ (80087f8 <_strtod_l+0x860>)
 80087d6:	400b      	ands	r3, r1
 80087d8:	4682      	mov	sl, r0
 80087da:	468b      	mov	fp, r1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f47f ae05 	bne.w	80083ec <_strtod_l+0x454>
 80087e2:	9a05      	ldr	r2, [sp, #20]
 80087e4:	2322      	movs	r3, #34	@ 0x22
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	e600      	b.n	80083ec <_strtod_l+0x454>
 80087ea:	bf00      	nop
 80087ec:	0800a090 	.word	0x0800a090
 80087f0:	fffffc02 	.word	0xfffffc02
 80087f4:	39500000 	.word	0x39500000
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008800:	d165      	bne.n	80088ce <_strtod_l+0x936>
 8008802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008808:	b35a      	cbz	r2, 8008862 <_strtod_l+0x8ca>
 800880a:	4a9f      	ldr	r2, [pc, #636]	@ (8008a88 <_strtod_l+0xaf0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d12b      	bne.n	8008868 <_strtod_l+0x8d0>
 8008810:	9b08      	ldr	r3, [sp, #32]
 8008812:	4651      	mov	r1, sl
 8008814:	b303      	cbz	r3, 8008858 <_strtod_l+0x8c0>
 8008816:	4b9d      	ldr	r3, [pc, #628]	@ (8008a8c <_strtod_l+0xaf4>)
 8008818:	465a      	mov	r2, fp
 800881a:	4013      	ands	r3, r2
 800881c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008820:	f04f 32ff 	mov.w	r2, #4294967295
 8008824:	d81b      	bhi.n	800885e <_strtod_l+0x8c6>
 8008826:	0d1b      	lsrs	r3, r3, #20
 8008828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	4299      	cmp	r1, r3
 8008832:	d119      	bne.n	8008868 <_strtod_l+0x8d0>
 8008834:	4b96      	ldr	r3, [pc, #600]	@ (8008a90 <_strtod_l+0xaf8>)
 8008836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008838:	429a      	cmp	r2, r3
 800883a:	d102      	bne.n	8008842 <_strtod_l+0x8aa>
 800883c:	3101      	adds	r1, #1
 800883e:	f43f adca 	beq.w	80083d6 <_strtod_l+0x43e>
 8008842:	4b92      	ldr	r3, [pc, #584]	@ (8008a8c <_strtod_l+0xaf4>)
 8008844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008846:	401a      	ands	r2, r3
 8008848:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800884c:	f04f 0a00 	mov.w	sl, #0
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1b8      	bne.n	80087c8 <_strtod_l+0x830>
 8008856:	e5c9      	b.n	80083ec <_strtod_l+0x454>
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e7e8      	b.n	8008830 <_strtod_l+0x898>
 800885e:	4613      	mov	r3, r2
 8008860:	e7e6      	b.n	8008830 <_strtod_l+0x898>
 8008862:	ea53 030a 	orrs.w	r3, r3, sl
 8008866:	d0a1      	beq.n	80087ac <_strtod_l+0x814>
 8008868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800886a:	b1db      	cbz	r3, 80088a4 <_strtod_l+0x90c>
 800886c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800886e:	4213      	tst	r3, r2
 8008870:	d0ee      	beq.n	8008850 <_strtod_l+0x8b8>
 8008872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008874:	9a08      	ldr	r2, [sp, #32]
 8008876:	4650      	mov	r0, sl
 8008878:	4659      	mov	r1, fp
 800887a:	b1bb      	cbz	r3, 80088ac <_strtod_l+0x914>
 800887c:	f7ff fb6e 	bl	8007f5c <sulp>
 8008880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008884:	ec53 2b10 	vmov	r2, r3, d0
 8008888:	f7f7 fd20 	bl	80002cc <__adddf3>
 800888c:	4682      	mov	sl, r0
 800888e:	468b      	mov	fp, r1
 8008890:	e7de      	b.n	8008850 <_strtod_l+0x8b8>
 8008892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800889a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800889e:	f04f 3aff 	mov.w	sl, #4294967295
 80088a2:	e7d5      	b.n	8008850 <_strtod_l+0x8b8>
 80088a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088a6:	ea13 0f0a 	tst.w	r3, sl
 80088aa:	e7e1      	b.n	8008870 <_strtod_l+0x8d8>
 80088ac:	f7ff fb56 	bl	8007f5c <sulp>
 80088b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088b4:	ec53 2b10 	vmov	r2, r3, d0
 80088b8:	f7f7 fd06 	bl	80002c8 <__aeabi_dsub>
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	f7f8 f920 	bl	8000b08 <__aeabi_dcmpeq>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0c1      	beq.n	8008850 <_strtod_l+0x8b8>
 80088cc:	e619      	b.n	8008502 <_strtod_l+0x56a>
 80088ce:	4641      	mov	r1, r8
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7ff facd 	bl	8007e70 <__ratio>
 80088d6:	ec57 6b10 	vmov	r6, r7, d0
 80088da:	2200      	movs	r2, #0
 80088dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f8 f924 	bl	8000b30 <__aeabi_dcmple>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d06f      	beq.n	80089cc <_strtod_l+0xa34>
 80088ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d17a      	bne.n	80089e8 <_strtod_l+0xa50>
 80088f2:	f1ba 0f00 	cmp.w	sl, #0
 80088f6:	d158      	bne.n	80089aa <_strtod_l+0xa12>
 80088f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d15a      	bne.n	80089b8 <_strtod_l+0xa20>
 8008902:	4b64      	ldr	r3, [pc, #400]	@ (8008a94 <_strtod_l+0xafc>)
 8008904:	2200      	movs	r2, #0
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f8 f907 	bl	8000b1c <__aeabi_dcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	d159      	bne.n	80089c6 <_strtod_l+0xa2e>
 8008912:	4630      	mov	r0, r6
 8008914:	4639      	mov	r1, r7
 8008916:	4b60      	ldr	r3, [pc, #384]	@ (8008a98 <_strtod_l+0xb00>)
 8008918:	2200      	movs	r2, #0
 800891a:	f7f7 fe8d 	bl	8000638 <__aeabi_dmul>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008926:	9606      	str	r6, [sp, #24]
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800892e:	4d57      	ldr	r5, [pc, #348]	@ (8008a8c <_strtod_l+0xaf4>)
 8008930:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008936:	401d      	ands	r5, r3
 8008938:	4b58      	ldr	r3, [pc, #352]	@ (8008a9c <_strtod_l+0xb04>)
 800893a:	429d      	cmp	r5, r3
 800893c:	f040 80b2 	bne.w	8008aa4 <_strtod_l+0xb0c>
 8008940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008942:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008946:	ec4b ab10 	vmov	d0, sl, fp
 800894a:	f7ff f9c9 	bl	8007ce0 <__ulp>
 800894e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008952:	ec51 0b10 	vmov	r0, r1, d0
 8008956:	f7f7 fe6f 	bl	8000638 <__aeabi_dmul>
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	f7f7 fcb5 	bl	80002cc <__adddf3>
 8008962:	460b      	mov	r3, r1
 8008964:	4949      	ldr	r1, [pc, #292]	@ (8008a8c <_strtod_l+0xaf4>)
 8008966:	4a4e      	ldr	r2, [pc, #312]	@ (8008aa0 <_strtod_l+0xb08>)
 8008968:	4019      	ands	r1, r3
 800896a:	4291      	cmp	r1, r2
 800896c:	4682      	mov	sl, r0
 800896e:	d942      	bls.n	80089f6 <_strtod_l+0xa5e>
 8008970:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008972:	4b47      	ldr	r3, [pc, #284]	@ (8008a90 <_strtod_l+0xaf8>)
 8008974:	429a      	cmp	r2, r3
 8008976:	d103      	bne.n	8008980 <_strtod_l+0x9e8>
 8008978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800897a:	3301      	adds	r3, #1
 800897c:	f43f ad2b 	beq.w	80083d6 <_strtod_l+0x43e>
 8008980:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008a90 <_strtod_l+0xaf8>
 8008984:	f04f 3aff 	mov.w	sl, #4294967295
 8008988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800898a:	9805      	ldr	r0, [sp, #20]
 800898c:	f7fe fe74 	bl	8007678 <_Bfree>
 8008990:	9805      	ldr	r0, [sp, #20]
 8008992:	4649      	mov	r1, r9
 8008994:	f7fe fe70 	bl	8007678 <_Bfree>
 8008998:	9805      	ldr	r0, [sp, #20]
 800899a:	4641      	mov	r1, r8
 800899c:	f7fe fe6c 	bl	8007678 <_Bfree>
 80089a0:	9805      	ldr	r0, [sp, #20]
 80089a2:	4621      	mov	r1, r4
 80089a4:	f7fe fe68 	bl	8007678 <_Bfree>
 80089a8:	e618      	b.n	80085dc <_strtod_l+0x644>
 80089aa:	f1ba 0f01 	cmp.w	sl, #1
 80089ae:	d103      	bne.n	80089b8 <_strtod_l+0xa20>
 80089b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f43f ada5 	beq.w	8008502 <_strtod_l+0x56a>
 80089b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008a68 <_strtod_l+0xad0>
 80089bc:	4f35      	ldr	r7, [pc, #212]	@ (8008a94 <_strtod_l+0xafc>)
 80089be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089c2:	2600      	movs	r6, #0
 80089c4:	e7b1      	b.n	800892a <_strtod_l+0x992>
 80089c6:	4f34      	ldr	r7, [pc, #208]	@ (8008a98 <_strtod_l+0xb00>)
 80089c8:	2600      	movs	r6, #0
 80089ca:	e7aa      	b.n	8008922 <_strtod_l+0x98a>
 80089cc:	4b32      	ldr	r3, [pc, #200]	@ (8008a98 <_strtod_l+0xb00>)
 80089ce:	4630      	mov	r0, r6
 80089d0:	4639      	mov	r1, r7
 80089d2:	2200      	movs	r2, #0
 80089d4:	f7f7 fe30 	bl	8000638 <__aeabi_dmul>
 80089d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d09f      	beq.n	8008922 <_strtod_l+0x98a>
 80089e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80089e6:	e7a0      	b.n	800892a <_strtod_l+0x992>
 80089e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a70 <_strtod_l+0xad8>
 80089ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089f0:	ec57 6b17 	vmov	r6, r7, d7
 80089f4:	e799      	b.n	800892a <_strtod_l+0x992>
 80089f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1c1      	bne.n	8008988 <_strtod_l+0x9f0>
 8008a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a08:	0d1b      	lsrs	r3, r3, #20
 8008a0a:	051b      	lsls	r3, r3, #20
 8008a0c:	429d      	cmp	r5, r3
 8008a0e:	d1bb      	bne.n	8008988 <_strtod_l+0x9f0>
 8008a10:	4630      	mov	r0, r6
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f8 f970 	bl	8000cf8 <__aeabi_d2lz>
 8008a18:	f7f7 fde0 	bl	80005dc <__aeabi_l2d>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f7 fc50 	bl	80002c8 <__aeabi_dsub>
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a36:	ea46 060a 	orr.w	r6, r6, sl
 8008a3a:	431e      	orrs	r6, r3
 8008a3c:	d06f      	beq.n	8008b1e <_strtod_l+0xb86>
 8008a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a78 <_strtod_l+0xae0>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f7f8 f86a 	bl	8000b1c <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f47f accf 	bne.w	80083ec <_strtod_l+0x454>
 8008a4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008a80 <_strtod_l+0xae8>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a58:	f7f8 f87e 	bl	8000b58 <__aeabi_dcmpgt>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d093      	beq.n	8008988 <_strtod_l+0x9f0>
 8008a60:	e4c4      	b.n	80083ec <_strtod_l+0x454>
 8008a62:	bf00      	nop
 8008a64:	f3af 8000 	nop.w
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	bff00000 	.word	0xbff00000
 8008a70:	00000000 	.word	0x00000000
 8008a74:	3ff00000 	.word	0x3ff00000
 8008a78:	94a03595 	.word	0x94a03595
 8008a7c:	3fdfffff 	.word	0x3fdfffff
 8008a80:	35afe535 	.word	0x35afe535
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	000fffff 	.word	0x000fffff
 8008a8c:	7ff00000 	.word	0x7ff00000
 8008a90:	7fefffff 	.word	0x7fefffff
 8008a94:	3ff00000 	.word	0x3ff00000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	7fe00000 	.word	0x7fe00000
 8008aa0:	7c9fffff 	.word	0x7c9fffff
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	b323      	cbz	r3, 8008af2 <_strtod_l+0xb5a>
 8008aa8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008aac:	d821      	bhi.n	8008af2 <_strtod_l+0xb5a>
 8008aae:	a328      	add	r3, pc, #160	@ (adr r3, 8008b50 <_strtod_l+0xbb8>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f8 f83a 	bl	8000b30 <__aeabi_dcmple>
 8008abc:	b1a0      	cbz	r0, 8008ae8 <_strtod_l+0xb50>
 8008abe:	4639      	mov	r1, r7
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7f8 f891 	bl	8000be8 <__aeabi_d2uiz>
 8008ac6:	2801      	cmp	r0, #1
 8008ac8:	bf38      	it	cc
 8008aca:	2001      	movcc	r0, #1
 8008acc:	f7f7 fd3a 	bl	8000544 <__aeabi_ui2d>
 8008ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	b9fb      	cbnz	r3, 8008b18 <_strtod_l+0xb80>
 8008ad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008adc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008ade:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ae0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008aea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008aee:	1b5b      	subs	r3, r3, r5
 8008af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008af2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008af6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008afa:	f7ff f8f1 	bl	8007ce0 <__ulp>
 8008afe:	4650      	mov	r0, sl
 8008b00:	ec53 2b10 	vmov	r2, r3, d0
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f7 fd97 	bl	8000638 <__aeabi_dmul>
 8008b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b0e:	f7f7 fbdd 	bl	80002cc <__adddf3>
 8008b12:	4682      	mov	sl, r0
 8008b14:	468b      	mov	fp, r1
 8008b16:	e770      	b.n	80089fa <_strtod_l+0xa62>
 8008b18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008b1c:	e7e0      	b.n	8008ae0 <_strtod_l+0xb48>
 8008b1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b58 <_strtod_l+0xbc0>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fffa 	bl	8000b1c <__aeabi_dcmplt>
 8008b28:	e798      	b.n	8008a5c <_strtod_l+0xac4>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	f7ff ba6d 	b.w	8008012 <_strtod_l+0x7a>
 8008b38:	2a65      	cmp	r2, #101	@ 0x65
 8008b3a:	f43f ab66 	beq.w	800820a <_strtod_l+0x272>
 8008b3e:	2a45      	cmp	r2, #69	@ 0x45
 8008b40:	f43f ab63 	beq.w	800820a <_strtod_l+0x272>
 8008b44:	2301      	movs	r3, #1
 8008b46:	f7ff bb9e 	b.w	8008286 <_strtod_l+0x2ee>
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w
 8008b50:	ffc00000 	.word	0xffc00000
 8008b54:	41dfffff 	.word	0x41dfffff
 8008b58:	94a03595 	.word	0x94a03595
 8008b5c:	3fcfffff 	.word	0x3fcfffff

08008b60 <_strtod_r>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	@ (8008b68 <_strtod_r+0x8>)
 8008b62:	f7ff ba19 	b.w	8007f98 <_strtod_l>
 8008b66:	bf00      	nop
 8008b68:	20000070 	.word	0x20000070

08008b6c <_strtol_l.constprop.0>:
 8008b6c:	2b24      	cmp	r3, #36	@ 0x24
 8008b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b72:	4686      	mov	lr, r0
 8008b74:	4690      	mov	r8, r2
 8008b76:	d801      	bhi.n	8008b7c <_strtol_l.constprop.0+0x10>
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d106      	bne.n	8008b8a <_strtol_l.constprop.0+0x1e>
 8008b7c:	f7fd fdba 	bl	80066f4 <__errno>
 8008b80:	2316      	movs	r3, #22
 8008b82:	6003      	str	r3, [r0, #0]
 8008b84:	2000      	movs	r0, #0
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	4834      	ldr	r0, [pc, #208]	@ (8008c5c <_strtol_l.constprop.0+0xf0>)
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	462a      	mov	r2, r5
 8008b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b94:	5d06      	ldrb	r6, [r0, r4]
 8008b96:	f016 0608 	ands.w	r6, r6, #8
 8008b9a:	d1f8      	bne.n	8008b8e <_strtol_l.constprop.0+0x22>
 8008b9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b9e:	d12d      	bne.n	8008bfc <_strtol_l.constprop.0+0x90>
 8008ba0:	782c      	ldrb	r4, [r5, #0]
 8008ba2:	2601      	movs	r6, #1
 8008ba4:	1c95      	adds	r5, r2, #2
 8008ba6:	f033 0210 	bics.w	r2, r3, #16
 8008baa:	d109      	bne.n	8008bc0 <_strtol_l.constprop.0+0x54>
 8008bac:	2c30      	cmp	r4, #48	@ 0x30
 8008bae:	d12a      	bne.n	8008c06 <_strtol_l.constprop.0+0x9a>
 8008bb0:	782a      	ldrb	r2, [r5, #0]
 8008bb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bb6:	2a58      	cmp	r2, #88	@ 0x58
 8008bb8:	d125      	bne.n	8008c06 <_strtol_l.constprop.0+0x9a>
 8008bba:	786c      	ldrb	r4, [r5, #1]
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	3502      	adds	r5, #2
 8008bc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bc8:	2200      	movs	r2, #0
 8008bca:	fbbc f9f3 	udiv	r9, ip, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bd8:	2f09      	cmp	r7, #9
 8008bda:	d81b      	bhi.n	8008c14 <_strtol_l.constprop.0+0xa8>
 8008bdc:	463c      	mov	r4, r7
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	dd27      	ble.n	8008c32 <_strtol_l.constprop.0+0xc6>
 8008be2:	1c57      	adds	r7, r2, #1
 8008be4:	d007      	beq.n	8008bf6 <_strtol_l.constprop.0+0x8a>
 8008be6:	4581      	cmp	r9, r0
 8008be8:	d320      	bcc.n	8008c2c <_strtol_l.constprop.0+0xc0>
 8008bea:	d101      	bne.n	8008bf0 <_strtol_l.constprop.0+0x84>
 8008bec:	45a2      	cmp	sl, r4
 8008bee:	db1d      	blt.n	8008c2c <_strtol_l.constprop.0+0xc0>
 8008bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfa:	e7eb      	b.n	8008bd4 <_strtol_l.constprop.0+0x68>
 8008bfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bfe:	bf04      	itt	eq
 8008c00:	782c      	ldrbeq	r4, [r5, #0]
 8008c02:	1c95      	addeq	r5, r2, #2
 8008c04:	e7cf      	b.n	8008ba6 <_strtol_l.constprop.0+0x3a>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1da      	bne.n	8008bc0 <_strtol_l.constprop.0+0x54>
 8008c0a:	2c30      	cmp	r4, #48	@ 0x30
 8008c0c:	bf0c      	ite	eq
 8008c0e:	2308      	moveq	r3, #8
 8008c10:	230a      	movne	r3, #10
 8008c12:	e7d5      	b.n	8008bc0 <_strtol_l.constprop.0+0x54>
 8008c14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c18:	2f19      	cmp	r7, #25
 8008c1a:	d801      	bhi.n	8008c20 <_strtol_l.constprop.0+0xb4>
 8008c1c:	3c37      	subs	r4, #55	@ 0x37
 8008c1e:	e7de      	b.n	8008bde <_strtol_l.constprop.0+0x72>
 8008c20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c24:	2f19      	cmp	r7, #25
 8008c26:	d804      	bhi.n	8008c32 <_strtol_l.constprop.0+0xc6>
 8008c28:	3c57      	subs	r4, #87	@ 0x57
 8008c2a:	e7d8      	b.n	8008bde <_strtol_l.constprop.0+0x72>
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	e7e1      	b.n	8008bf6 <_strtol_l.constprop.0+0x8a>
 8008c32:	1c53      	adds	r3, r2, #1
 8008c34:	d108      	bne.n	8008c48 <_strtol_l.constprop.0+0xdc>
 8008c36:	2322      	movs	r3, #34	@ 0x22
 8008c38:	f8ce 3000 	str.w	r3, [lr]
 8008c3c:	4660      	mov	r0, ip
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	d0a0      	beq.n	8008b86 <_strtol_l.constprop.0+0x1a>
 8008c44:	1e69      	subs	r1, r5, #1
 8008c46:	e006      	b.n	8008c56 <_strtol_l.constprop.0+0xea>
 8008c48:	b106      	cbz	r6, 8008c4c <_strtol_l.constprop.0+0xe0>
 8008c4a:	4240      	negs	r0, r0
 8008c4c:	f1b8 0f00 	cmp.w	r8, #0
 8008c50:	d099      	beq.n	8008b86 <_strtol_l.constprop.0+0x1a>
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d1f6      	bne.n	8008c44 <_strtol_l.constprop.0+0xd8>
 8008c56:	f8c8 1000 	str.w	r1, [r8]
 8008c5a:	e794      	b.n	8008b86 <_strtol_l.constprop.0+0x1a>
 8008c5c:	0800a0b9 	.word	0x0800a0b9

08008c60 <_strtol_r>:
 8008c60:	f7ff bf84 	b.w	8008b6c <_strtol_l.constprop.0>

08008c64 <__ssputs_r>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	688e      	ldr	r6, [r1, #8]
 8008c6a:	461f      	mov	r7, r3
 8008c6c:	42be      	cmp	r6, r7
 8008c6e:	680b      	ldr	r3, [r1, #0]
 8008c70:	4682      	mov	sl, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	4690      	mov	r8, r2
 8008c76:	d82d      	bhi.n	8008cd4 <__ssputs_r+0x70>
 8008c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c80:	d026      	beq.n	8008cd0 <__ssputs_r+0x6c>
 8008c82:	6965      	ldr	r5, [r4, #20]
 8008c84:	6909      	ldr	r1, [r1, #16]
 8008c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c8a:	eba3 0901 	sub.w	r9, r3, r1
 8008c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c92:	1c7b      	adds	r3, r7, #1
 8008c94:	444b      	add	r3, r9
 8008c96:	106d      	asrs	r5, r5, #1
 8008c98:	429d      	cmp	r5, r3
 8008c9a:	bf38      	it	cc
 8008c9c:	461d      	movcc	r5, r3
 8008c9e:	0553      	lsls	r3, r2, #21
 8008ca0:	d527      	bpl.n	8008cf2 <__ssputs_r+0x8e>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	f7fe fc1c 	bl	80074e0 <_malloc_r>
 8008ca8:	4606      	mov	r6, r0
 8008caa:	b360      	cbz	r0, 8008d06 <__ssputs_r+0xa2>
 8008cac:	6921      	ldr	r1, [r4, #16]
 8008cae:	464a      	mov	r2, r9
 8008cb0:	f000 fa18 	bl	80090e4 <memcpy>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	6126      	str	r6, [r4, #16]
 8008cc2:	6165      	str	r5, [r4, #20]
 8008cc4:	444e      	add	r6, r9
 8008cc6:	eba5 0509 	sub.w	r5, r5, r9
 8008cca:	6026      	str	r6, [r4, #0]
 8008ccc:	60a5      	str	r5, [r4, #8]
 8008cce:	463e      	mov	r6, r7
 8008cd0:	42be      	cmp	r6, r7
 8008cd2:	d900      	bls.n	8008cd6 <__ssputs_r+0x72>
 8008cd4:	463e      	mov	r6, r7
 8008cd6:	6820      	ldr	r0, [r4, #0]
 8008cd8:	4632      	mov	r2, r6
 8008cda:	4641      	mov	r1, r8
 8008cdc:	f000 f9c6 	bl	800906c <memmove>
 8008ce0:	68a3      	ldr	r3, [r4, #8]
 8008ce2:	1b9b      	subs	r3, r3, r6
 8008ce4:	60a3      	str	r3, [r4, #8]
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	4433      	add	r3, r6
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	2000      	movs	r0, #0
 8008cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf2:	462a      	mov	r2, r5
 8008cf4:	f000 fd89 	bl	800980a <_realloc_r>
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d1e0      	bne.n	8008cc0 <__ssputs_r+0x5c>
 8008cfe:	6921      	ldr	r1, [r4, #16]
 8008d00:	4650      	mov	r0, sl
 8008d02:	f7fe fb79 	bl	80073f8 <_free_r>
 8008d06:	230c      	movs	r3, #12
 8008d08:	f8ca 3000 	str.w	r3, [sl]
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	e7e9      	b.n	8008cee <__ssputs_r+0x8a>
	...

08008d1c <_svfiprintf_r>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4698      	mov	r8, r3
 8008d22:	898b      	ldrh	r3, [r1, #12]
 8008d24:	061b      	lsls	r3, r3, #24
 8008d26:	b09d      	sub	sp, #116	@ 0x74
 8008d28:	4607      	mov	r7, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	d510      	bpl.n	8008d52 <_svfiprintf_r+0x36>
 8008d30:	690b      	ldr	r3, [r1, #16]
 8008d32:	b973      	cbnz	r3, 8008d52 <_svfiprintf_r+0x36>
 8008d34:	2140      	movs	r1, #64	@ 0x40
 8008d36:	f7fe fbd3 	bl	80074e0 <_malloc_r>
 8008d3a:	6028      	str	r0, [r5, #0]
 8008d3c:	6128      	str	r0, [r5, #16]
 8008d3e:	b930      	cbnz	r0, 8008d4e <_svfiprintf_r+0x32>
 8008d40:	230c      	movs	r3, #12
 8008d42:	603b      	str	r3, [r7, #0]
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	b01d      	add	sp, #116	@ 0x74
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	2340      	movs	r3, #64	@ 0x40
 8008d50:	616b      	str	r3, [r5, #20]
 8008d52:	2300      	movs	r3, #0
 8008d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d56:	2320      	movs	r3, #32
 8008d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d60:	2330      	movs	r3, #48	@ 0x30
 8008d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f00 <_svfiprintf_r+0x1e4>
 8008d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d6a:	f04f 0901 	mov.w	r9, #1
 8008d6e:	4623      	mov	r3, r4
 8008d70:	469a      	mov	sl, r3
 8008d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d76:	b10a      	cbz	r2, 8008d7c <_svfiprintf_r+0x60>
 8008d78:	2a25      	cmp	r2, #37	@ 0x25
 8008d7a:	d1f9      	bne.n	8008d70 <_svfiprintf_r+0x54>
 8008d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d80:	d00b      	beq.n	8008d9a <_svfiprintf_r+0x7e>
 8008d82:	465b      	mov	r3, fp
 8008d84:	4622      	mov	r2, r4
 8008d86:	4629      	mov	r1, r5
 8008d88:	4638      	mov	r0, r7
 8008d8a:	f7ff ff6b 	bl	8008c64 <__ssputs_r>
 8008d8e:	3001      	adds	r0, #1
 8008d90:	f000 80a7 	beq.w	8008ee2 <_svfiprintf_r+0x1c6>
 8008d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d96:	445a      	add	r2, fp
 8008d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 809f 	beq.w	8008ee2 <_svfiprintf_r+0x1c6>
 8008da4:	2300      	movs	r3, #0
 8008da6:	f04f 32ff 	mov.w	r2, #4294967295
 8008daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dae:	f10a 0a01 	add.w	sl, sl, #1
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	9307      	str	r3, [sp, #28]
 8008db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dbc:	4654      	mov	r4, sl
 8008dbe:	2205      	movs	r2, #5
 8008dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc4:	484e      	ldr	r0, [pc, #312]	@ (8008f00 <_svfiprintf_r+0x1e4>)
 8008dc6:	f7f7 fa23 	bl	8000210 <memchr>
 8008dca:	9a04      	ldr	r2, [sp, #16]
 8008dcc:	b9d8      	cbnz	r0, 8008e06 <_svfiprintf_r+0xea>
 8008dce:	06d0      	lsls	r0, r2, #27
 8008dd0:	bf44      	itt	mi
 8008dd2:	2320      	movmi	r3, #32
 8008dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd8:	0711      	lsls	r1, r2, #28
 8008dda:	bf44      	itt	mi
 8008ddc:	232b      	movmi	r3, #43	@ 0x2b
 8008dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de2:	f89a 3000 	ldrb.w	r3, [sl]
 8008de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de8:	d015      	beq.n	8008e16 <_svfiprintf_r+0xfa>
 8008dea:	9a07      	ldr	r2, [sp, #28]
 8008dec:	4654      	mov	r4, sl
 8008dee:	2000      	movs	r0, #0
 8008df0:	f04f 0c0a 	mov.w	ip, #10
 8008df4:	4621      	mov	r1, r4
 8008df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dfa:	3b30      	subs	r3, #48	@ 0x30
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d94b      	bls.n	8008e98 <_svfiprintf_r+0x17c>
 8008e00:	b1b0      	cbz	r0, 8008e30 <_svfiprintf_r+0x114>
 8008e02:	9207      	str	r2, [sp, #28]
 8008e04:	e014      	b.n	8008e30 <_svfiprintf_r+0x114>
 8008e06:	eba0 0308 	sub.w	r3, r0, r8
 8008e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	46a2      	mov	sl, r4
 8008e14:	e7d2      	b.n	8008dbc <_svfiprintf_r+0xa0>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	1d19      	adds	r1, r3, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	9103      	str	r1, [sp, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bfbb      	ittet	lt
 8008e22:	425b      	neglt	r3, r3
 8008e24:	f042 0202 	orrlt.w	r2, r2, #2
 8008e28:	9307      	strge	r3, [sp, #28]
 8008e2a:	9307      	strlt	r3, [sp, #28]
 8008e2c:	bfb8      	it	lt
 8008e2e:	9204      	strlt	r2, [sp, #16]
 8008e30:	7823      	ldrb	r3, [r4, #0]
 8008e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e34:	d10a      	bne.n	8008e4c <_svfiprintf_r+0x130>
 8008e36:	7863      	ldrb	r3, [r4, #1]
 8008e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e3a:	d132      	bne.n	8008ea2 <_svfiprintf_r+0x186>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	1d1a      	adds	r2, r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	9203      	str	r2, [sp, #12]
 8008e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e48:	3402      	adds	r4, #2
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f10 <_svfiprintf_r+0x1f4>
 8008e50:	7821      	ldrb	r1, [r4, #0]
 8008e52:	2203      	movs	r2, #3
 8008e54:	4650      	mov	r0, sl
 8008e56:	f7f7 f9db 	bl	8000210 <memchr>
 8008e5a:	b138      	cbz	r0, 8008e6c <_svfiprintf_r+0x150>
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	eba0 000a 	sub.w	r0, r0, sl
 8008e62:	2240      	movs	r2, #64	@ 0x40
 8008e64:	4082      	lsls	r2, r0
 8008e66:	4313      	orrs	r3, r2
 8008e68:	3401      	adds	r4, #1
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e70:	4824      	ldr	r0, [pc, #144]	@ (8008f04 <_svfiprintf_r+0x1e8>)
 8008e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e76:	2206      	movs	r2, #6
 8008e78:	f7f7 f9ca 	bl	8000210 <memchr>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d036      	beq.n	8008eee <_svfiprintf_r+0x1d2>
 8008e80:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <_svfiprintf_r+0x1ec>)
 8008e82:	bb1b      	cbnz	r3, 8008ecc <_svfiprintf_r+0x1b0>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	3307      	adds	r3, #7
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e92:	4433      	add	r3, r6
 8008e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e96:	e76a      	b.n	8008d6e <_svfiprintf_r+0x52>
 8008e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e7a8      	b.n	8008df4 <_svfiprintf_r+0xd8>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	3401      	adds	r4, #1
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 0c0a 	mov.w	ip, #10
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb4:	3a30      	subs	r2, #48	@ 0x30
 8008eb6:	2a09      	cmp	r2, #9
 8008eb8:	d903      	bls.n	8008ec2 <_svfiprintf_r+0x1a6>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0c6      	beq.n	8008e4c <_svfiprintf_r+0x130>
 8008ebe:	9105      	str	r1, [sp, #20]
 8008ec0:	e7c4      	b.n	8008e4c <_svfiprintf_r+0x130>
 8008ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e7f0      	b.n	8008eae <_svfiprintf_r+0x192>
 8008ecc:	ab03      	add	r3, sp, #12
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	462a      	mov	r2, r5
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f0c <_svfiprintf_r+0x1f0>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7fc fcc8 	bl	800586c <_printf_float>
 8008edc:	1c42      	adds	r2, r0, #1
 8008ede:	4606      	mov	r6, r0
 8008ee0:	d1d6      	bne.n	8008e90 <_svfiprintf_r+0x174>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	065b      	lsls	r3, r3, #25
 8008ee6:	f53f af2d 	bmi.w	8008d44 <_svfiprintf_r+0x28>
 8008eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eec:	e72c      	b.n	8008d48 <_svfiprintf_r+0x2c>
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <_svfiprintf_r+0x1f0>)
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7fc ff4f 	bl	8005d9c <_printf_i>
 8008efe:	e7ed      	b.n	8008edc <_svfiprintf_r+0x1c0>
 8008f00:	0800a1b9 	.word	0x0800a1b9
 8008f04:	0800a1c3 	.word	0x0800a1c3
 8008f08:	0800586d 	.word	0x0800586d
 8008f0c:	08008c65 	.word	0x08008c65
 8008f10:	0800a1bf 	.word	0x0800a1bf

08008f14 <__sflush_r>:
 8008f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	0716      	lsls	r6, r2, #28
 8008f1e:	4605      	mov	r5, r0
 8008f20:	460c      	mov	r4, r1
 8008f22:	d454      	bmi.n	8008fce <__sflush_r+0xba>
 8008f24:	684b      	ldr	r3, [r1, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dc02      	bgt.n	8008f30 <__sflush_r+0x1c>
 8008f2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dd48      	ble.n	8008fc2 <__sflush_r+0xae>
 8008f30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	d045      	beq.n	8008fc2 <__sflush_r+0xae>
 8008f36:	2300      	movs	r3, #0
 8008f38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f3c:	682f      	ldr	r7, [r5, #0]
 8008f3e:	6a21      	ldr	r1, [r4, #32]
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	d030      	beq.n	8008fa6 <__sflush_r+0x92>
 8008f44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	0759      	lsls	r1, r3, #29
 8008f4a:	d505      	bpl.n	8008f58 <__sflush_r+0x44>
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f52:	b10b      	cbz	r3, 8008f58 <__sflush_r+0x44>
 8008f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f5c:	6a21      	ldr	r1, [r4, #32]
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b0      	blx	r6
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	d106      	bne.n	8008f76 <__sflush_r+0x62>
 8008f68:	6829      	ldr	r1, [r5, #0]
 8008f6a:	291d      	cmp	r1, #29
 8008f6c:	d82b      	bhi.n	8008fc6 <__sflush_r+0xb2>
 8008f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009018 <__sflush_r+0x104>)
 8008f70:	410a      	asrs	r2, r1
 8008f72:	07d6      	lsls	r6, r2, #31
 8008f74:	d427      	bmi.n	8008fc6 <__sflush_r+0xb2>
 8008f76:	2200      	movs	r2, #0
 8008f78:	6062      	str	r2, [r4, #4]
 8008f7a:	04d9      	lsls	r1, r3, #19
 8008f7c:	6922      	ldr	r2, [r4, #16]
 8008f7e:	6022      	str	r2, [r4, #0]
 8008f80:	d504      	bpl.n	8008f8c <__sflush_r+0x78>
 8008f82:	1c42      	adds	r2, r0, #1
 8008f84:	d101      	bne.n	8008f8a <__sflush_r+0x76>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b903      	cbnz	r3, 8008f8c <__sflush_r+0x78>
 8008f8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f8e:	602f      	str	r7, [r5, #0]
 8008f90:	b1b9      	cbz	r1, 8008fc2 <__sflush_r+0xae>
 8008f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f96:	4299      	cmp	r1, r3
 8008f98:	d002      	beq.n	8008fa0 <__sflush_r+0x8c>
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7fe fa2c 	bl	80073f8 <_free_r>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fa4:	e00d      	b.n	8008fc2 <__sflush_r+0xae>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b0      	blx	r6
 8008fac:	4602      	mov	r2, r0
 8008fae:	1c50      	adds	r0, r2, #1
 8008fb0:	d1c9      	bne.n	8008f46 <__sflush_r+0x32>
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0c6      	beq.n	8008f46 <__sflush_r+0x32>
 8008fb8:	2b1d      	cmp	r3, #29
 8008fba:	d001      	beq.n	8008fc0 <__sflush_r+0xac>
 8008fbc:	2b16      	cmp	r3, #22
 8008fbe:	d11e      	bne.n	8008ffe <__sflush_r+0xea>
 8008fc0:	602f      	str	r7, [r5, #0]
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e022      	b.n	800900c <__sflush_r+0xf8>
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fca:	b21b      	sxth	r3, r3
 8008fcc:	e01b      	b.n	8009006 <__sflush_r+0xf2>
 8008fce:	690f      	ldr	r7, [r1, #16]
 8008fd0:	2f00      	cmp	r7, #0
 8008fd2:	d0f6      	beq.n	8008fc2 <__sflush_r+0xae>
 8008fd4:	0793      	lsls	r3, r2, #30
 8008fd6:	680e      	ldr	r6, [r1, #0]
 8008fd8:	bf08      	it	eq
 8008fda:	694b      	ldreq	r3, [r1, #20]
 8008fdc:	600f      	str	r7, [r1, #0]
 8008fde:	bf18      	it	ne
 8008fe0:	2300      	movne	r3, #0
 8008fe2:	eba6 0807 	sub.w	r8, r6, r7
 8008fe6:	608b      	str	r3, [r1, #8]
 8008fe8:	f1b8 0f00 	cmp.w	r8, #0
 8008fec:	dde9      	ble.n	8008fc2 <__sflush_r+0xae>
 8008fee:	6a21      	ldr	r1, [r4, #32]
 8008ff0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ff2:	4643      	mov	r3, r8
 8008ff4:	463a      	mov	r2, r7
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b0      	blx	r6
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	dc08      	bgt.n	8009010 <__sflush_r+0xfc>
 8008ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	4407      	add	r7, r0
 8009012:	eba8 0800 	sub.w	r8, r8, r0
 8009016:	e7e7      	b.n	8008fe8 <__sflush_r+0xd4>
 8009018:	dfbffffe 	.word	0xdfbffffe

0800901c <_fflush_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	690b      	ldr	r3, [r1, #16]
 8009020:	4605      	mov	r5, r0
 8009022:	460c      	mov	r4, r1
 8009024:	b913      	cbnz	r3, 800902c <_fflush_r+0x10>
 8009026:	2500      	movs	r5, #0
 8009028:	4628      	mov	r0, r5
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	b118      	cbz	r0, 8009036 <_fflush_r+0x1a>
 800902e:	6a03      	ldr	r3, [r0, #32]
 8009030:	b90b      	cbnz	r3, 8009036 <_fflush_r+0x1a>
 8009032:	f7fd fa73 	bl	800651c <__sinit>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0f3      	beq.n	8009026 <_fflush_r+0xa>
 800903e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009040:	07d0      	lsls	r0, r2, #31
 8009042:	d404      	bmi.n	800904e <_fflush_r+0x32>
 8009044:	0599      	lsls	r1, r3, #22
 8009046:	d402      	bmi.n	800904e <_fflush_r+0x32>
 8009048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904a:	f7fd fb7e 	bl	800674a <__retarget_lock_acquire_recursive>
 800904e:	4628      	mov	r0, r5
 8009050:	4621      	mov	r1, r4
 8009052:	f7ff ff5f 	bl	8008f14 <__sflush_r>
 8009056:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009058:	07da      	lsls	r2, r3, #31
 800905a:	4605      	mov	r5, r0
 800905c:	d4e4      	bmi.n	8009028 <_fflush_r+0xc>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	059b      	lsls	r3, r3, #22
 8009062:	d4e1      	bmi.n	8009028 <_fflush_r+0xc>
 8009064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009066:	f7fd fb71 	bl	800674c <__retarget_lock_release_recursive>
 800906a:	e7dd      	b.n	8009028 <_fflush_r+0xc>

0800906c <memmove>:
 800906c:	4288      	cmp	r0, r1
 800906e:	b510      	push	{r4, lr}
 8009070:	eb01 0402 	add.w	r4, r1, r2
 8009074:	d902      	bls.n	800907c <memmove+0x10>
 8009076:	4284      	cmp	r4, r0
 8009078:	4623      	mov	r3, r4
 800907a:	d807      	bhi.n	800908c <memmove+0x20>
 800907c:	1e43      	subs	r3, r0, #1
 800907e:	42a1      	cmp	r1, r4
 8009080:	d008      	beq.n	8009094 <memmove+0x28>
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800908a:	e7f8      	b.n	800907e <memmove+0x12>
 800908c:	4402      	add	r2, r0
 800908e:	4601      	mov	r1, r0
 8009090:	428a      	cmp	r2, r1
 8009092:	d100      	bne.n	8009096 <memmove+0x2a>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800909e:	e7f7      	b.n	8009090 <memmove+0x24>

080090a0 <strncmp>:
 80090a0:	b510      	push	{r4, lr}
 80090a2:	b16a      	cbz	r2, 80090c0 <strncmp+0x20>
 80090a4:	3901      	subs	r1, #1
 80090a6:	1884      	adds	r4, r0, r2
 80090a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d103      	bne.n	80090bc <strncmp+0x1c>
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d001      	beq.n	80090bc <strncmp+0x1c>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	d1f5      	bne.n	80090a8 <strncmp+0x8>
 80090bc:	1ad0      	subs	r0, r2, r3
 80090be:	bd10      	pop	{r4, pc}
 80090c0:	4610      	mov	r0, r2
 80090c2:	e7fc      	b.n	80090be <strncmp+0x1e>

080090c4 <_sbrk_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d06      	ldr	r5, [pc, #24]	@ (80090e0 <_sbrk_r+0x1c>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f9 f9f0 	bl	80024b4 <_sbrk>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_sbrk_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_sbrk_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	200004c4 	.word	0x200004c4

080090e4 <memcpy>:
 80090e4:	440a      	add	r2, r1
 80090e6:	4291      	cmp	r1, r2
 80090e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ec:	d100      	bne.n	80090f0 <memcpy+0xc>
 80090ee:	4770      	bx	lr
 80090f0:	b510      	push	{r4, lr}
 80090f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090fa:	4291      	cmp	r1, r2
 80090fc:	d1f9      	bne.n	80090f2 <memcpy+0xe>
 80090fe:	bd10      	pop	{r4, pc}

08009100 <nan>:
 8009100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009108 <nan+0x8>
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	00000000 	.word	0x00000000
 800910c:	7ff80000 	.word	0x7ff80000

08009110 <__assert_func>:
 8009110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009112:	4614      	mov	r4, r2
 8009114:	461a      	mov	r2, r3
 8009116:	4b09      	ldr	r3, [pc, #36]	@ (800913c <__assert_func+0x2c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4605      	mov	r5, r0
 800911c:	68d8      	ldr	r0, [r3, #12]
 800911e:	b954      	cbnz	r4, 8009136 <__assert_func+0x26>
 8009120:	4b07      	ldr	r3, [pc, #28]	@ (8009140 <__assert_func+0x30>)
 8009122:	461c      	mov	r4, r3
 8009124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009128:	9100      	str	r1, [sp, #0]
 800912a:	462b      	mov	r3, r5
 800912c:	4905      	ldr	r1, [pc, #20]	@ (8009144 <__assert_func+0x34>)
 800912e:	f000 fba7 	bl	8009880 <fiprintf>
 8009132:	f000 fbb7 	bl	80098a4 <abort>
 8009136:	4b04      	ldr	r3, [pc, #16]	@ (8009148 <__assert_func+0x38>)
 8009138:	e7f4      	b.n	8009124 <__assert_func+0x14>
 800913a:	bf00      	nop
 800913c:	20000020 	.word	0x20000020
 8009140:	0800a20d 	.word	0x0800a20d
 8009144:	0800a1df 	.word	0x0800a1df
 8009148:	0800a1d2 	.word	0x0800a1d2

0800914c <_calloc_r>:
 800914c:	b570      	push	{r4, r5, r6, lr}
 800914e:	fba1 5402 	umull	r5, r4, r1, r2
 8009152:	b93c      	cbnz	r4, 8009164 <_calloc_r+0x18>
 8009154:	4629      	mov	r1, r5
 8009156:	f7fe f9c3 	bl	80074e0 <_malloc_r>
 800915a:	4606      	mov	r6, r0
 800915c:	b928      	cbnz	r0, 800916a <_calloc_r+0x1e>
 800915e:	2600      	movs	r6, #0
 8009160:	4630      	mov	r0, r6
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	220c      	movs	r2, #12
 8009166:	6002      	str	r2, [r0, #0]
 8009168:	e7f9      	b.n	800915e <_calloc_r+0x12>
 800916a:	462a      	mov	r2, r5
 800916c:	4621      	mov	r1, r4
 800916e:	f7fd fa6e 	bl	800664e <memset>
 8009172:	e7f5      	b.n	8009160 <_calloc_r+0x14>

08009174 <rshift>:
 8009174:	6903      	ldr	r3, [r0, #16]
 8009176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800917a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800917e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009182:	f100 0414 	add.w	r4, r0, #20
 8009186:	dd45      	ble.n	8009214 <rshift+0xa0>
 8009188:	f011 011f 	ands.w	r1, r1, #31
 800918c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009194:	d10c      	bne.n	80091b0 <rshift+0x3c>
 8009196:	f100 0710 	add.w	r7, r0, #16
 800919a:	4629      	mov	r1, r5
 800919c:	42b1      	cmp	r1, r6
 800919e:	d334      	bcc.n	800920a <rshift+0x96>
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	1eea      	subs	r2, r5, #3
 80091a6:	4296      	cmp	r6, r2
 80091a8:	bf38      	it	cc
 80091aa:	2300      	movcc	r3, #0
 80091ac:	4423      	add	r3, r4
 80091ae:	e015      	b.n	80091dc <rshift+0x68>
 80091b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091b4:	f1c1 0820 	rsb	r8, r1, #32
 80091b8:	40cf      	lsrs	r7, r1
 80091ba:	f105 0e04 	add.w	lr, r5, #4
 80091be:	46a1      	mov	r9, r4
 80091c0:	4576      	cmp	r6, lr
 80091c2:	46f4      	mov	ip, lr
 80091c4:	d815      	bhi.n	80091f2 <rshift+0x7e>
 80091c6:	1a9a      	subs	r2, r3, r2
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	3a04      	subs	r2, #4
 80091cc:	3501      	adds	r5, #1
 80091ce:	42ae      	cmp	r6, r5
 80091d0:	bf38      	it	cc
 80091d2:	2200      	movcc	r2, #0
 80091d4:	18a3      	adds	r3, r4, r2
 80091d6:	50a7      	str	r7, [r4, r2]
 80091d8:	b107      	cbz	r7, 80091dc <rshift+0x68>
 80091da:	3304      	adds	r3, #4
 80091dc:	1b1a      	subs	r2, r3, r4
 80091de:	42a3      	cmp	r3, r4
 80091e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091e4:	bf08      	it	eq
 80091e6:	2300      	moveq	r3, #0
 80091e8:	6102      	str	r2, [r0, #16]
 80091ea:	bf08      	it	eq
 80091ec:	6143      	streq	r3, [r0, #20]
 80091ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f2:	f8dc c000 	ldr.w	ip, [ip]
 80091f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80091fa:	ea4c 0707 	orr.w	r7, ip, r7
 80091fe:	f849 7b04 	str.w	r7, [r9], #4
 8009202:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009206:	40cf      	lsrs	r7, r1
 8009208:	e7da      	b.n	80091c0 <rshift+0x4c>
 800920a:	f851 cb04 	ldr.w	ip, [r1], #4
 800920e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009212:	e7c3      	b.n	800919c <rshift+0x28>
 8009214:	4623      	mov	r3, r4
 8009216:	e7e1      	b.n	80091dc <rshift+0x68>

08009218 <__hexdig_fun>:
 8009218:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800921c:	2b09      	cmp	r3, #9
 800921e:	d802      	bhi.n	8009226 <__hexdig_fun+0xe>
 8009220:	3820      	subs	r0, #32
 8009222:	b2c0      	uxtb	r0, r0
 8009224:	4770      	bx	lr
 8009226:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800922a:	2b05      	cmp	r3, #5
 800922c:	d801      	bhi.n	8009232 <__hexdig_fun+0x1a>
 800922e:	3847      	subs	r0, #71	@ 0x47
 8009230:	e7f7      	b.n	8009222 <__hexdig_fun+0xa>
 8009232:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009236:	2b05      	cmp	r3, #5
 8009238:	d801      	bhi.n	800923e <__hexdig_fun+0x26>
 800923a:	3827      	subs	r0, #39	@ 0x27
 800923c:	e7f1      	b.n	8009222 <__hexdig_fun+0xa>
 800923e:	2000      	movs	r0, #0
 8009240:	4770      	bx	lr
	...

08009244 <__gethex>:
 8009244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	b085      	sub	sp, #20
 800924a:	468a      	mov	sl, r1
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	680b      	ldr	r3, [r1, #0]
 8009250:	9001      	str	r0, [sp, #4]
 8009252:	4690      	mov	r8, r2
 8009254:	1c9c      	adds	r4, r3, #2
 8009256:	46a1      	mov	r9, r4
 8009258:	f814 0b01 	ldrb.w	r0, [r4], #1
 800925c:	2830      	cmp	r0, #48	@ 0x30
 800925e:	d0fa      	beq.n	8009256 <__gethex+0x12>
 8009260:	eba9 0303 	sub.w	r3, r9, r3
 8009264:	f1a3 0b02 	sub.w	fp, r3, #2
 8009268:	f7ff ffd6 	bl	8009218 <__hexdig_fun>
 800926c:	4605      	mov	r5, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d168      	bne.n	8009344 <__gethex+0x100>
 8009272:	49a0      	ldr	r1, [pc, #640]	@ (80094f4 <__gethex+0x2b0>)
 8009274:	2201      	movs	r2, #1
 8009276:	4648      	mov	r0, r9
 8009278:	f7ff ff12 	bl	80090a0 <strncmp>
 800927c:	4607      	mov	r7, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d167      	bne.n	8009352 <__gethex+0x10e>
 8009282:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009286:	4626      	mov	r6, r4
 8009288:	f7ff ffc6 	bl	8009218 <__hexdig_fun>
 800928c:	2800      	cmp	r0, #0
 800928e:	d062      	beq.n	8009356 <__gethex+0x112>
 8009290:	4623      	mov	r3, r4
 8009292:	7818      	ldrb	r0, [r3, #0]
 8009294:	2830      	cmp	r0, #48	@ 0x30
 8009296:	4699      	mov	r9, r3
 8009298:	f103 0301 	add.w	r3, r3, #1
 800929c:	d0f9      	beq.n	8009292 <__gethex+0x4e>
 800929e:	f7ff ffbb 	bl	8009218 <__hexdig_fun>
 80092a2:	fab0 f580 	clz	r5, r0
 80092a6:	096d      	lsrs	r5, r5, #5
 80092a8:	f04f 0b01 	mov.w	fp, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4616      	mov	r6, r2
 80092b0:	3201      	adds	r2, #1
 80092b2:	7830      	ldrb	r0, [r6, #0]
 80092b4:	f7ff ffb0 	bl	8009218 <__hexdig_fun>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d1f8      	bne.n	80092ae <__gethex+0x6a>
 80092bc:	498d      	ldr	r1, [pc, #564]	@ (80094f4 <__gethex+0x2b0>)
 80092be:	2201      	movs	r2, #1
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff feed 	bl	80090a0 <strncmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d13f      	bne.n	800934a <__gethex+0x106>
 80092ca:	b944      	cbnz	r4, 80092de <__gethex+0x9a>
 80092cc:	1c74      	adds	r4, r6, #1
 80092ce:	4622      	mov	r2, r4
 80092d0:	4616      	mov	r6, r2
 80092d2:	3201      	adds	r2, #1
 80092d4:	7830      	ldrb	r0, [r6, #0]
 80092d6:	f7ff ff9f 	bl	8009218 <__hexdig_fun>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d1f8      	bne.n	80092d0 <__gethex+0x8c>
 80092de:	1ba4      	subs	r4, r4, r6
 80092e0:	00a7      	lsls	r7, r4, #2
 80092e2:	7833      	ldrb	r3, [r6, #0]
 80092e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80092e8:	2b50      	cmp	r3, #80	@ 0x50
 80092ea:	d13e      	bne.n	800936a <__gethex+0x126>
 80092ec:	7873      	ldrb	r3, [r6, #1]
 80092ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80092f0:	d033      	beq.n	800935a <__gethex+0x116>
 80092f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80092f4:	d034      	beq.n	8009360 <__gethex+0x11c>
 80092f6:	1c71      	adds	r1, r6, #1
 80092f8:	2400      	movs	r4, #0
 80092fa:	7808      	ldrb	r0, [r1, #0]
 80092fc:	f7ff ff8c 	bl	8009218 <__hexdig_fun>
 8009300:	1e43      	subs	r3, r0, #1
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b18      	cmp	r3, #24
 8009306:	d830      	bhi.n	800936a <__gethex+0x126>
 8009308:	f1a0 0210 	sub.w	r2, r0, #16
 800930c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009310:	f7ff ff82 	bl	8009218 <__hexdig_fun>
 8009314:	f100 3cff 	add.w	ip, r0, #4294967295
 8009318:	fa5f fc8c 	uxtb.w	ip, ip
 800931c:	f1bc 0f18 	cmp.w	ip, #24
 8009320:	f04f 030a 	mov.w	r3, #10
 8009324:	d91e      	bls.n	8009364 <__gethex+0x120>
 8009326:	b104      	cbz	r4, 800932a <__gethex+0xe6>
 8009328:	4252      	negs	r2, r2
 800932a:	4417      	add	r7, r2
 800932c:	f8ca 1000 	str.w	r1, [sl]
 8009330:	b1ed      	cbz	r5, 800936e <__gethex+0x12a>
 8009332:	f1bb 0f00 	cmp.w	fp, #0
 8009336:	bf0c      	ite	eq
 8009338:	2506      	moveq	r5, #6
 800933a:	2500      	movne	r5, #0
 800933c:	4628      	mov	r0, r5
 800933e:	b005      	add	sp, #20
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	2500      	movs	r5, #0
 8009346:	462c      	mov	r4, r5
 8009348:	e7b0      	b.n	80092ac <__gethex+0x68>
 800934a:	2c00      	cmp	r4, #0
 800934c:	d1c7      	bne.n	80092de <__gethex+0x9a>
 800934e:	4627      	mov	r7, r4
 8009350:	e7c7      	b.n	80092e2 <__gethex+0x9e>
 8009352:	464e      	mov	r6, r9
 8009354:	462f      	mov	r7, r5
 8009356:	2501      	movs	r5, #1
 8009358:	e7c3      	b.n	80092e2 <__gethex+0x9e>
 800935a:	2400      	movs	r4, #0
 800935c:	1cb1      	adds	r1, r6, #2
 800935e:	e7cc      	b.n	80092fa <__gethex+0xb6>
 8009360:	2401      	movs	r4, #1
 8009362:	e7fb      	b.n	800935c <__gethex+0x118>
 8009364:	fb03 0002 	mla	r0, r3, r2, r0
 8009368:	e7ce      	b.n	8009308 <__gethex+0xc4>
 800936a:	4631      	mov	r1, r6
 800936c:	e7de      	b.n	800932c <__gethex+0xe8>
 800936e:	eba6 0309 	sub.w	r3, r6, r9
 8009372:	3b01      	subs	r3, #1
 8009374:	4629      	mov	r1, r5
 8009376:	2b07      	cmp	r3, #7
 8009378:	dc0a      	bgt.n	8009390 <__gethex+0x14c>
 800937a:	9801      	ldr	r0, [sp, #4]
 800937c:	f7fe f93c 	bl	80075f8 <_Balloc>
 8009380:	4604      	mov	r4, r0
 8009382:	b940      	cbnz	r0, 8009396 <__gethex+0x152>
 8009384:	4b5c      	ldr	r3, [pc, #368]	@ (80094f8 <__gethex+0x2b4>)
 8009386:	4602      	mov	r2, r0
 8009388:	21e4      	movs	r1, #228	@ 0xe4
 800938a:	485c      	ldr	r0, [pc, #368]	@ (80094fc <__gethex+0x2b8>)
 800938c:	f7ff fec0 	bl	8009110 <__assert_func>
 8009390:	3101      	adds	r1, #1
 8009392:	105b      	asrs	r3, r3, #1
 8009394:	e7ef      	b.n	8009376 <__gethex+0x132>
 8009396:	f100 0a14 	add.w	sl, r0, #20
 800939a:	2300      	movs	r3, #0
 800939c:	4655      	mov	r5, sl
 800939e:	469b      	mov	fp, r3
 80093a0:	45b1      	cmp	r9, r6
 80093a2:	d337      	bcc.n	8009414 <__gethex+0x1d0>
 80093a4:	f845 bb04 	str.w	fp, [r5], #4
 80093a8:	eba5 050a 	sub.w	r5, r5, sl
 80093ac:	10ad      	asrs	r5, r5, #2
 80093ae:	6125      	str	r5, [r4, #16]
 80093b0:	4658      	mov	r0, fp
 80093b2:	f7fe fa13 	bl	80077dc <__hi0bits>
 80093b6:	016d      	lsls	r5, r5, #5
 80093b8:	f8d8 6000 	ldr.w	r6, [r8]
 80093bc:	1a2d      	subs	r5, r5, r0
 80093be:	42b5      	cmp	r5, r6
 80093c0:	dd54      	ble.n	800946c <__gethex+0x228>
 80093c2:	1bad      	subs	r5, r5, r6
 80093c4:	4629      	mov	r1, r5
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7fe fda7 	bl	8007f1a <__any_on>
 80093cc:	4681      	mov	r9, r0
 80093ce:	b178      	cbz	r0, 80093f0 <__gethex+0x1ac>
 80093d0:	1e6b      	subs	r3, r5, #1
 80093d2:	1159      	asrs	r1, r3, #5
 80093d4:	f003 021f 	and.w	r2, r3, #31
 80093d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093dc:	f04f 0901 	mov.w	r9, #1
 80093e0:	fa09 f202 	lsl.w	r2, r9, r2
 80093e4:	420a      	tst	r2, r1
 80093e6:	d003      	beq.n	80093f0 <__gethex+0x1ac>
 80093e8:	454b      	cmp	r3, r9
 80093ea:	dc36      	bgt.n	800945a <__gethex+0x216>
 80093ec:	f04f 0902 	mov.w	r9, #2
 80093f0:	4629      	mov	r1, r5
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7ff febe 	bl	8009174 <rshift>
 80093f8:	442f      	add	r7, r5
 80093fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093fe:	42bb      	cmp	r3, r7
 8009400:	da42      	bge.n	8009488 <__gethex+0x244>
 8009402:	9801      	ldr	r0, [sp, #4]
 8009404:	4621      	mov	r1, r4
 8009406:	f7fe f937 	bl	8007678 <_Bfree>
 800940a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800940c:	2300      	movs	r3, #0
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	25a3      	movs	r5, #163	@ 0xa3
 8009412:	e793      	b.n	800933c <__gethex+0xf8>
 8009414:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009418:	2a2e      	cmp	r2, #46	@ 0x2e
 800941a:	d012      	beq.n	8009442 <__gethex+0x1fe>
 800941c:	2b20      	cmp	r3, #32
 800941e:	d104      	bne.n	800942a <__gethex+0x1e6>
 8009420:	f845 bb04 	str.w	fp, [r5], #4
 8009424:	f04f 0b00 	mov.w	fp, #0
 8009428:	465b      	mov	r3, fp
 800942a:	7830      	ldrb	r0, [r6, #0]
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	f7ff fef3 	bl	8009218 <__hexdig_fun>
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	f000 000f 	and.w	r0, r0, #15
 8009438:	4098      	lsls	r0, r3
 800943a:	ea4b 0b00 	orr.w	fp, fp, r0
 800943e:	3304      	adds	r3, #4
 8009440:	e7ae      	b.n	80093a0 <__gethex+0x15c>
 8009442:	45b1      	cmp	r9, r6
 8009444:	d8ea      	bhi.n	800941c <__gethex+0x1d8>
 8009446:	492b      	ldr	r1, [pc, #172]	@ (80094f4 <__gethex+0x2b0>)
 8009448:	9303      	str	r3, [sp, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff fe27 	bl	80090a0 <strncmp>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	2800      	cmp	r0, #0
 8009456:	d1e1      	bne.n	800941c <__gethex+0x1d8>
 8009458:	e7a2      	b.n	80093a0 <__gethex+0x15c>
 800945a:	1ea9      	subs	r1, r5, #2
 800945c:	4620      	mov	r0, r4
 800945e:	f7fe fd5c 	bl	8007f1a <__any_on>
 8009462:	2800      	cmp	r0, #0
 8009464:	d0c2      	beq.n	80093ec <__gethex+0x1a8>
 8009466:	f04f 0903 	mov.w	r9, #3
 800946a:	e7c1      	b.n	80093f0 <__gethex+0x1ac>
 800946c:	da09      	bge.n	8009482 <__gethex+0x23e>
 800946e:	1b75      	subs	r5, r6, r5
 8009470:	4621      	mov	r1, r4
 8009472:	9801      	ldr	r0, [sp, #4]
 8009474:	462a      	mov	r2, r5
 8009476:	f7fe fb17 	bl	8007aa8 <__lshift>
 800947a:	1b7f      	subs	r7, r7, r5
 800947c:	4604      	mov	r4, r0
 800947e:	f100 0a14 	add.w	sl, r0, #20
 8009482:	f04f 0900 	mov.w	r9, #0
 8009486:	e7b8      	b.n	80093fa <__gethex+0x1b6>
 8009488:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800948c:	42bd      	cmp	r5, r7
 800948e:	dd6f      	ble.n	8009570 <__gethex+0x32c>
 8009490:	1bed      	subs	r5, r5, r7
 8009492:	42ae      	cmp	r6, r5
 8009494:	dc34      	bgt.n	8009500 <__gethex+0x2bc>
 8009496:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d022      	beq.n	80094e4 <__gethex+0x2a0>
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d024      	beq.n	80094ec <__gethex+0x2a8>
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d115      	bne.n	80094d2 <__gethex+0x28e>
 80094a6:	42ae      	cmp	r6, r5
 80094a8:	d113      	bne.n	80094d2 <__gethex+0x28e>
 80094aa:	2e01      	cmp	r6, #1
 80094ac:	d10b      	bne.n	80094c6 <__gethex+0x282>
 80094ae:	9a02      	ldr	r2, [sp, #8]
 80094b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	2301      	movs	r3, #1
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	f8ca 3000 	str.w	r3, [sl]
 80094be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094c0:	2562      	movs	r5, #98	@ 0x62
 80094c2:	601c      	str	r4, [r3, #0]
 80094c4:	e73a      	b.n	800933c <__gethex+0xf8>
 80094c6:	1e71      	subs	r1, r6, #1
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7fe fd26 	bl	8007f1a <__any_on>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1ed      	bne.n	80094ae <__gethex+0x26a>
 80094d2:	9801      	ldr	r0, [sp, #4]
 80094d4:	4621      	mov	r1, r4
 80094d6:	f7fe f8cf 	bl	8007678 <_Bfree>
 80094da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094dc:	2300      	movs	r3, #0
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	2550      	movs	r5, #80	@ 0x50
 80094e2:	e72b      	b.n	800933c <__gethex+0xf8>
 80094e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1f3      	bne.n	80094d2 <__gethex+0x28e>
 80094ea:	e7e0      	b.n	80094ae <__gethex+0x26a>
 80094ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1dd      	bne.n	80094ae <__gethex+0x26a>
 80094f2:	e7ee      	b.n	80094d2 <__gethex+0x28e>
 80094f4:	0800a060 	.word	0x0800a060
 80094f8:	08009ef9 	.word	0x08009ef9
 80094fc:	0800a20e 	.word	0x0800a20e
 8009500:	1e6f      	subs	r7, r5, #1
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	d130      	bne.n	800956a <__gethex+0x326>
 8009508:	b127      	cbz	r7, 8009514 <__gethex+0x2d0>
 800950a:	4639      	mov	r1, r7
 800950c:	4620      	mov	r0, r4
 800950e:	f7fe fd04 	bl	8007f1a <__any_on>
 8009512:	4681      	mov	r9, r0
 8009514:	117a      	asrs	r2, r7, #5
 8009516:	2301      	movs	r3, #1
 8009518:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800951c:	f007 071f 	and.w	r7, r7, #31
 8009520:	40bb      	lsls	r3, r7
 8009522:	4213      	tst	r3, r2
 8009524:	4629      	mov	r1, r5
 8009526:	4620      	mov	r0, r4
 8009528:	bf18      	it	ne
 800952a:	f049 0902 	orrne.w	r9, r9, #2
 800952e:	f7ff fe21 	bl	8009174 <rshift>
 8009532:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009536:	1b76      	subs	r6, r6, r5
 8009538:	2502      	movs	r5, #2
 800953a:	f1b9 0f00 	cmp.w	r9, #0
 800953e:	d047      	beq.n	80095d0 <__gethex+0x38c>
 8009540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d015      	beq.n	8009574 <__gethex+0x330>
 8009548:	2b03      	cmp	r3, #3
 800954a:	d017      	beq.n	800957c <__gethex+0x338>
 800954c:	2b01      	cmp	r3, #1
 800954e:	d109      	bne.n	8009564 <__gethex+0x320>
 8009550:	f019 0f02 	tst.w	r9, #2
 8009554:	d006      	beq.n	8009564 <__gethex+0x320>
 8009556:	f8da 3000 	ldr.w	r3, [sl]
 800955a:	ea49 0903 	orr.w	r9, r9, r3
 800955e:	f019 0f01 	tst.w	r9, #1
 8009562:	d10e      	bne.n	8009582 <__gethex+0x33e>
 8009564:	f045 0510 	orr.w	r5, r5, #16
 8009568:	e032      	b.n	80095d0 <__gethex+0x38c>
 800956a:	f04f 0901 	mov.w	r9, #1
 800956e:	e7d1      	b.n	8009514 <__gethex+0x2d0>
 8009570:	2501      	movs	r5, #1
 8009572:	e7e2      	b.n	800953a <__gethex+0x2f6>
 8009574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009576:	f1c3 0301 	rsb	r3, r3, #1
 800957a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800957c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0f0      	beq.n	8009564 <__gethex+0x320>
 8009582:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009586:	f104 0314 	add.w	r3, r4, #20
 800958a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800958e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009592:	f04f 0c00 	mov.w	ip, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f853 2b04 	ldr.w	r2, [r3], #4
 800959c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095a0:	d01b      	beq.n	80095da <__gethex+0x396>
 80095a2:	3201      	adds	r2, #1
 80095a4:	6002      	str	r2, [r0, #0]
 80095a6:	2d02      	cmp	r5, #2
 80095a8:	f104 0314 	add.w	r3, r4, #20
 80095ac:	d13c      	bne.n	8009628 <__gethex+0x3e4>
 80095ae:	f8d8 2000 	ldr.w	r2, [r8]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	42b2      	cmp	r2, r6
 80095b6:	d109      	bne.n	80095cc <__gethex+0x388>
 80095b8:	1171      	asrs	r1, r6, #5
 80095ba:	2201      	movs	r2, #1
 80095bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095c0:	f006 061f 	and.w	r6, r6, #31
 80095c4:	fa02 f606 	lsl.w	r6, r2, r6
 80095c8:	421e      	tst	r6, r3
 80095ca:	d13a      	bne.n	8009642 <__gethex+0x3fe>
 80095cc:	f045 0520 	orr.w	r5, r5, #32
 80095d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d2:	601c      	str	r4, [r3, #0]
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	601f      	str	r7, [r3, #0]
 80095d8:	e6b0      	b.n	800933c <__gethex+0xf8>
 80095da:	4299      	cmp	r1, r3
 80095dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80095e0:	d8d9      	bhi.n	8009596 <__gethex+0x352>
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	459b      	cmp	fp, r3
 80095e6:	db17      	blt.n	8009618 <__gethex+0x3d4>
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	9801      	ldr	r0, [sp, #4]
 80095ec:	3101      	adds	r1, #1
 80095ee:	f7fe f803 	bl	80075f8 <_Balloc>
 80095f2:	4681      	mov	r9, r0
 80095f4:	b918      	cbnz	r0, 80095fe <__gethex+0x3ba>
 80095f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009660 <__gethex+0x41c>)
 80095f8:	4602      	mov	r2, r0
 80095fa:	2184      	movs	r1, #132	@ 0x84
 80095fc:	e6c5      	b.n	800938a <__gethex+0x146>
 80095fe:	6922      	ldr	r2, [r4, #16]
 8009600:	3202      	adds	r2, #2
 8009602:	f104 010c 	add.w	r1, r4, #12
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	300c      	adds	r0, #12
 800960a:	f7ff fd6b 	bl	80090e4 <memcpy>
 800960e:	4621      	mov	r1, r4
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	f7fe f831 	bl	8007678 <_Bfree>
 8009616:	464c      	mov	r4, r9
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009620:	6122      	str	r2, [r4, #16]
 8009622:	2201      	movs	r2, #1
 8009624:	615a      	str	r2, [r3, #20]
 8009626:	e7be      	b.n	80095a6 <__gethex+0x362>
 8009628:	6922      	ldr	r2, [r4, #16]
 800962a:	455a      	cmp	r2, fp
 800962c:	dd0b      	ble.n	8009646 <__gethex+0x402>
 800962e:	2101      	movs	r1, #1
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff fd9f 	bl	8009174 <rshift>
 8009636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800963a:	3701      	adds	r7, #1
 800963c:	42bb      	cmp	r3, r7
 800963e:	f6ff aee0 	blt.w	8009402 <__gethex+0x1be>
 8009642:	2501      	movs	r5, #1
 8009644:	e7c2      	b.n	80095cc <__gethex+0x388>
 8009646:	f016 061f 	ands.w	r6, r6, #31
 800964a:	d0fa      	beq.n	8009642 <__gethex+0x3fe>
 800964c:	4453      	add	r3, sl
 800964e:	f1c6 0620 	rsb	r6, r6, #32
 8009652:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009656:	f7fe f8c1 	bl	80077dc <__hi0bits>
 800965a:	42b0      	cmp	r0, r6
 800965c:	dbe7      	blt.n	800962e <__gethex+0x3ea>
 800965e:	e7f0      	b.n	8009642 <__gethex+0x3fe>
 8009660:	08009ef9 	.word	0x08009ef9

08009664 <L_shift>:
 8009664:	f1c2 0208 	rsb	r2, r2, #8
 8009668:	0092      	lsls	r2, r2, #2
 800966a:	b570      	push	{r4, r5, r6, lr}
 800966c:	f1c2 0620 	rsb	r6, r2, #32
 8009670:	6843      	ldr	r3, [r0, #4]
 8009672:	6804      	ldr	r4, [r0, #0]
 8009674:	fa03 f506 	lsl.w	r5, r3, r6
 8009678:	432c      	orrs	r4, r5
 800967a:	40d3      	lsrs	r3, r2
 800967c:	6004      	str	r4, [r0, #0]
 800967e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009682:	4288      	cmp	r0, r1
 8009684:	d3f4      	bcc.n	8009670 <L_shift+0xc>
 8009686:	bd70      	pop	{r4, r5, r6, pc}

08009688 <__match>:
 8009688:	b530      	push	{r4, r5, lr}
 800968a:	6803      	ldr	r3, [r0, #0]
 800968c:	3301      	adds	r3, #1
 800968e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009692:	b914      	cbnz	r4, 800969a <__match+0x12>
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	2001      	movs	r0, #1
 8009698:	bd30      	pop	{r4, r5, pc}
 800969a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096a2:	2d19      	cmp	r5, #25
 80096a4:	bf98      	it	ls
 80096a6:	3220      	addls	r2, #32
 80096a8:	42a2      	cmp	r2, r4
 80096aa:	d0f0      	beq.n	800968e <__match+0x6>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7f3      	b.n	8009698 <__match+0x10>

080096b0 <__hexnan>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	680b      	ldr	r3, [r1, #0]
 80096b6:	6801      	ldr	r1, [r0, #0]
 80096b8:	115e      	asrs	r6, r3, #5
 80096ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096be:	f013 031f 	ands.w	r3, r3, #31
 80096c2:	b087      	sub	sp, #28
 80096c4:	bf18      	it	ne
 80096c6:	3604      	addne	r6, #4
 80096c8:	2500      	movs	r5, #0
 80096ca:	1f37      	subs	r7, r6, #4
 80096cc:	4682      	mov	sl, r0
 80096ce:	4690      	mov	r8, r2
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80096d6:	46b9      	mov	r9, r7
 80096d8:	463c      	mov	r4, r7
 80096da:	9502      	str	r5, [sp, #8]
 80096dc:	46ab      	mov	fp, r5
 80096de:	784a      	ldrb	r2, [r1, #1]
 80096e0:	1c4b      	adds	r3, r1, #1
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	b342      	cbz	r2, 8009738 <__hexnan+0x88>
 80096e6:	4610      	mov	r0, r2
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	9204      	str	r2, [sp, #16]
 80096ec:	f7ff fd94 	bl	8009218 <__hexdig_fun>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d151      	bne.n	8009798 <__hexnan+0xe8>
 80096f4:	9a04      	ldr	r2, [sp, #16]
 80096f6:	9905      	ldr	r1, [sp, #20]
 80096f8:	2a20      	cmp	r2, #32
 80096fa:	d818      	bhi.n	800972e <__hexnan+0x7e>
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	459b      	cmp	fp, r3
 8009700:	dd13      	ble.n	800972a <__hexnan+0x7a>
 8009702:	454c      	cmp	r4, r9
 8009704:	d206      	bcs.n	8009714 <__hexnan+0x64>
 8009706:	2d07      	cmp	r5, #7
 8009708:	dc04      	bgt.n	8009714 <__hexnan+0x64>
 800970a:	462a      	mov	r2, r5
 800970c:	4649      	mov	r1, r9
 800970e:	4620      	mov	r0, r4
 8009710:	f7ff ffa8 	bl	8009664 <L_shift>
 8009714:	4544      	cmp	r4, r8
 8009716:	d952      	bls.n	80097be <__hexnan+0x10e>
 8009718:	2300      	movs	r3, #0
 800971a:	f1a4 0904 	sub.w	r9, r4, #4
 800971e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009722:	f8cd b008 	str.w	fp, [sp, #8]
 8009726:	464c      	mov	r4, r9
 8009728:	461d      	mov	r5, r3
 800972a:	9903      	ldr	r1, [sp, #12]
 800972c:	e7d7      	b.n	80096de <__hexnan+0x2e>
 800972e:	2a29      	cmp	r2, #41	@ 0x29
 8009730:	d157      	bne.n	80097e2 <__hexnan+0x132>
 8009732:	3102      	adds	r1, #2
 8009734:	f8ca 1000 	str.w	r1, [sl]
 8009738:	f1bb 0f00 	cmp.w	fp, #0
 800973c:	d051      	beq.n	80097e2 <__hexnan+0x132>
 800973e:	454c      	cmp	r4, r9
 8009740:	d206      	bcs.n	8009750 <__hexnan+0xa0>
 8009742:	2d07      	cmp	r5, #7
 8009744:	dc04      	bgt.n	8009750 <__hexnan+0xa0>
 8009746:	462a      	mov	r2, r5
 8009748:	4649      	mov	r1, r9
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff ff8a 	bl	8009664 <L_shift>
 8009750:	4544      	cmp	r4, r8
 8009752:	d936      	bls.n	80097c2 <__hexnan+0x112>
 8009754:	f1a8 0204 	sub.w	r2, r8, #4
 8009758:	4623      	mov	r3, r4
 800975a:	f853 1b04 	ldr.w	r1, [r3], #4
 800975e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009762:	429f      	cmp	r7, r3
 8009764:	d2f9      	bcs.n	800975a <__hexnan+0xaa>
 8009766:	1b3b      	subs	r3, r7, r4
 8009768:	f023 0303 	bic.w	r3, r3, #3
 800976c:	3304      	adds	r3, #4
 800976e:	3401      	adds	r4, #1
 8009770:	3e03      	subs	r6, #3
 8009772:	42b4      	cmp	r4, r6
 8009774:	bf88      	it	hi
 8009776:	2304      	movhi	r3, #4
 8009778:	4443      	add	r3, r8
 800977a:	2200      	movs	r2, #0
 800977c:	f843 2b04 	str.w	r2, [r3], #4
 8009780:	429f      	cmp	r7, r3
 8009782:	d2fb      	bcs.n	800977c <__hexnan+0xcc>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	b91b      	cbnz	r3, 8009790 <__hexnan+0xe0>
 8009788:	4547      	cmp	r7, r8
 800978a:	d128      	bne.n	80097de <__hexnan+0x12e>
 800978c:	2301      	movs	r3, #1
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	2005      	movs	r0, #5
 8009792:	b007      	add	sp, #28
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	3501      	adds	r5, #1
 800979a:	2d08      	cmp	r5, #8
 800979c:	f10b 0b01 	add.w	fp, fp, #1
 80097a0:	dd06      	ble.n	80097b0 <__hexnan+0x100>
 80097a2:	4544      	cmp	r4, r8
 80097a4:	d9c1      	bls.n	800972a <__hexnan+0x7a>
 80097a6:	2300      	movs	r3, #0
 80097a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ac:	2501      	movs	r5, #1
 80097ae:	3c04      	subs	r4, #4
 80097b0:	6822      	ldr	r2, [r4, #0]
 80097b2:	f000 000f 	and.w	r0, r0, #15
 80097b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097ba:	6020      	str	r0, [r4, #0]
 80097bc:	e7b5      	b.n	800972a <__hexnan+0x7a>
 80097be:	2508      	movs	r5, #8
 80097c0:	e7b3      	b.n	800972a <__hexnan+0x7a>
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0dd      	beq.n	8009784 <__hexnan+0xd4>
 80097c8:	f1c3 0320 	rsb	r3, r3, #32
 80097cc:	f04f 32ff 	mov.w	r2, #4294967295
 80097d0:	40da      	lsrs	r2, r3
 80097d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80097d6:	4013      	ands	r3, r2
 80097d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80097dc:	e7d2      	b.n	8009784 <__hexnan+0xd4>
 80097de:	3f04      	subs	r7, #4
 80097e0:	e7d0      	b.n	8009784 <__hexnan+0xd4>
 80097e2:	2004      	movs	r0, #4
 80097e4:	e7d5      	b.n	8009792 <__hexnan+0xe2>

080097e6 <__ascii_mbtowc>:
 80097e6:	b082      	sub	sp, #8
 80097e8:	b901      	cbnz	r1, 80097ec <__ascii_mbtowc+0x6>
 80097ea:	a901      	add	r1, sp, #4
 80097ec:	b142      	cbz	r2, 8009800 <__ascii_mbtowc+0x1a>
 80097ee:	b14b      	cbz	r3, 8009804 <__ascii_mbtowc+0x1e>
 80097f0:	7813      	ldrb	r3, [r2, #0]
 80097f2:	600b      	str	r3, [r1, #0]
 80097f4:	7812      	ldrb	r2, [r2, #0]
 80097f6:	1e10      	subs	r0, r2, #0
 80097f8:	bf18      	it	ne
 80097fa:	2001      	movne	r0, #1
 80097fc:	b002      	add	sp, #8
 80097fe:	4770      	bx	lr
 8009800:	4610      	mov	r0, r2
 8009802:	e7fb      	b.n	80097fc <__ascii_mbtowc+0x16>
 8009804:	f06f 0001 	mvn.w	r0, #1
 8009808:	e7f8      	b.n	80097fc <__ascii_mbtowc+0x16>

0800980a <_realloc_r>:
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	4680      	mov	r8, r0
 8009810:	4615      	mov	r5, r2
 8009812:	460c      	mov	r4, r1
 8009814:	b921      	cbnz	r1, 8009820 <_realloc_r+0x16>
 8009816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	4611      	mov	r1, r2
 800981c:	f7fd be60 	b.w	80074e0 <_malloc_r>
 8009820:	b92a      	cbnz	r2, 800982e <_realloc_r+0x24>
 8009822:	f7fd fde9 	bl	80073f8 <_free_r>
 8009826:	2400      	movs	r4, #0
 8009828:	4620      	mov	r0, r4
 800982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982e:	f000 f840 	bl	80098b2 <_malloc_usable_size_r>
 8009832:	4285      	cmp	r5, r0
 8009834:	4606      	mov	r6, r0
 8009836:	d802      	bhi.n	800983e <_realloc_r+0x34>
 8009838:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800983c:	d8f4      	bhi.n	8009828 <_realloc_r+0x1e>
 800983e:	4629      	mov	r1, r5
 8009840:	4640      	mov	r0, r8
 8009842:	f7fd fe4d 	bl	80074e0 <_malloc_r>
 8009846:	4607      	mov	r7, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d0ec      	beq.n	8009826 <_realloc_r+0x1c>
 800984c:	42b5      	cmp	r5, r6
 800984e:	462a      	mov	r2, r5
 8009850:	4621      	mov	r1, r4
 8009852:	bf28      	it	cs
 8009854:	4632      	movcs	r2, r6
 8009856:	f7ff fc45 	bl	80090e4 <memcpy>
 800985a:	4621      	mov	r1, r4
 800985c:	4640      	mov	r0, r8
 800985e:	f7fd fdcb 	bl	80073f8 <_free_r>
 8009862:	463c      	mov	r4, r7
 8009864:	e7e0      	b.n	8009828 <_realloc_r+0x1e>

08009866 <__ascii_wctomb>:
 8009866:	4603      	mov	r3, r0
 8009868:	4608      	mov	r0, r1
 800986a:	b141      	cbz	r1, 800987e <__ascii_wctomb+0x18>
 800986c:	2aff      	cmp	r2, #255	@ 0xff
 800986e:	d904      	bls.n	800987a <__ascii_wctomb+0x14>
 8009870:	228a      	movs	r2, #138	@ 0x8a
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	4770      	bx	lr
 800987a:	700a      	strb	r2, [r1, #0]
 800987c:	2001      	movs	r0, #1
 800987e:	4770      	bx	lr

08009880 <fiprintf>:
 8009880:	b40e      	push	{r1, r2, r3}
 8009882:	b503      	push	{r0, r1, lr}
 8009884:	4601      	mov	r1, r0
 8009886:	ab03      	add	r3, sp, #12
 8009888:	4805      	ldr	r0, [pc, #20]	@ (80098a0 <fiprintf+0x20>)
 800988a:	f853 2b04 	ldr.w	r2, [r3], #4
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	f000 f83f 	bl	8009914 <_vfiprintf_r>
 8009896:	b002      	add	sp, #8
 8009898:	f85d eb04 	ldr.w	lr, [sp], #4
 800989c:	b003      	add	sp, #12
 800989e:	4770      	bx	lr
 80098a0:	20000020 	.word	0x20000020

080098a4 <abort>:
 80098a4:	b508      	push	{r3, lr}
 80098a6:	2006      	movs	r0, #6
 80098a8:	f000 fa08 	bl	8009cbc <raise>
 80098ac:	2001      	movs	r0, #1
 80098ae:	f7f8 fd89 	bl	80023c4 <_exit>

080098b2 <_malloc_usable_size_r>:
 80098b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b6:	1f18      	subs	r0, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bfbc      	itt	lt
 80098bc:	580b      	ldrlt	r3, [r1, r0]
 80098be:	18c0      	addlt	r0, r0, r3
 80098c0:	4770      	bx	lr

080098c2 <__sfputc_r>:
 80098c2:	6893      	ldr	r3, [r2, #8]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	b410      	push	{r4}
 80098ca:	6093      	str	r3, [r2, #8]
 80098cc:	da08      	bge.n	80098e0 <__sfputc_r+0x1e>
 80098ce:	6994      	ldr	r4, [r2, #24]
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	db01      	blt.n	80098d8 <__sfputc_r+0x16>
 80098d4:	290a      	cmp	r1, #10
 80098d6:	d103      	bne.n	80098e0 <__sfputc_r+0x1e>
 80098d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098dc:	f000 b932 	b.w	8009b44 <__swbuf_r>
 80098e0:	6813      	ldr	r3, [r2, #0]
 80098e2:	1c58      	adds	r0, r3, #1
 80098e4:	6010      	str	r0, [r2, #0]
 80098e6:	7019      	strb	r1, [r3, #0]
 80098e8:	4608      	mov	r0, r1
 80098ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <__sfputs_r>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	4614      	mov	r4, r2
 80098f8:	18d5      	adds	r5, r2, r3
 80098fa:	42ac      	cmp	r4, r5
 80098fc:	d101      	bne.n	8009902 <__sfputs_r+0x12>
 80098fe:	2000      	movs	r0, #0
 8009900:	e007      	b.n	8009912 <__sfputs_r+0x22>
 8009902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009906:	463a      	mov	r2, r7
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff ffda 	bl	80098c2 <__sfputc_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d1f3      	bne.n	80098fa <__sfputs_r+0xa>
 8009912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009914 <_vfiprintf_r>:
 8009914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	460d      	mov	r5, r1
 800991a:	b09d      	sub	sp, #116	@ 0x74
 800991c:	4614      	mov	r4, r2
 800991e:	4698      	mov	r8, r3
 8009920:	4606      	mov	r6, r0
 8009922:	b118      	cbz	r0, 800992c <_vfiprintf_r+0x18>
 8009924:	6a03      	ldr	r3, [r0, #32]
 8009926:	b90b      	cbnz	r3, 800992c <_vfiprintf_r+0x18>
 8009928:	f7fc fdf8 	bl	800651c <__sinit>
 800992c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800992e:	07d9      	lsls	r1, r3, #31
 8009930:	d405      	bmi.n	800993e <_vfiprintf_r+0x2a>
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	059a      	lsls	r2, r3, #22
 8009936:	d402      	bmi.n	800993e <_vfiprintf_r+0x2a>
 8009938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800993a:	f7fc ff06 	bl	800674a <__retarget_lock_acquire_recursive>
 800993e:	89ab      	ldrh	r3, [r5, #12]
 8009940:	071b      	lsls	r3, r3, #28
 8009942:	d501      	bpl.n	8009948 <_vfiprintf_r+0x34>
 8009944:	692b      	ldr	r3, [r5, #16]
 8009946:	b99b      	cbnz	r3, 8009970 <_vfiprintf_r+0x5c>
 8009948:	4629      	mov	r1, r5
 800994a:	4630      	mov	r0, r6
 800994c:	f000 f938 	bl	8009bc0 <__swsetup_r>
 8009950:	b170      	cbz	r0, 8009970 <_vfiprintf_r+0x5c>
 8009952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009954:	07dc      	lsls	r4, r3, #31
 8009956:	d504      	bpl.n	8009962 <_vfiprintf_r+0x4e>
 8009958:	f04f 30ff 	mov.w	r0, #4294967295
 800995c:	b01d      	add	sp, #116	@ 0x74
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	0598      	lsls	r0, r3, #22
 8009966:	d4f7      	bmi.n	8009958 <_vfiprintf_r+0x44>
 8009968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800996a:	f7fc feef 	bl	800674c <__retarget_lock_release_recursive>
 800996e:	e7f3      	b.n	8009958 <_vfiprintf_r+0x44>
 8009970:	2300      	movs	r3, #0
 8009972:	9309      	str	r3, [sp, #36]	@ 0x24
 8009974:	2320      	movs	r3, #32
 8009976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800997a:	f8cd 800c 	str.w	r8, [sp, #12]
 800997e:	2330      	movs	r3, #48	@ 0x30
 8009980:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b30 <_vfiprintf_r+0x21c>
 8009984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009988:	f04f 0901 	mov.w	r9, #1
 800998c:	4623      	mov	r3, r4
 800998e:	469a      	mov	sl, r3
 8009990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009994:	b10a      	cbz	r2, 800999a <_vfiprintf_r+0x86>
 8009996:	2a25      	cmp	r2, #37	@ 0x25
 8009998:	d1f9      	bne.n	800998e <_vfiprintf_r+0x7a>
 800999a:	ebba 0b04 	subs.w	fp, sl, r4
 800999e:	d00b      	beq.n	80099b8 <_vfiprintf_r+0xa4>
 80099a0:	465b      	mov	r3, fp
 80099a2:	4622      	mov	r2, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	f7ff ffa2 	bl	80098f0 <__sfputs_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	f000 80a7 	beq.w	8009b00 <_vfiprintf_r+0x1ec>
 80099b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099b4:	445a      	add	r2, fp
 80099b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80099b8:	f89a 3000 	ldrb.w	r3, [sl]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 809f 	beq.w	8009b00 <_vfiprintf_r+0x1ec>
 80099c2:	2300      	movs	r3, #0
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099cc:	f10a 0a01 	add.w	sl, sl, #1
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80099da:	4654      	mov	r4, sl
 80099dc:	2205      	movs	r2, #5
 80099de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e2:	4853      	ldr	r0, [pc, #332]	@ (8009b30 <_vfiprintf_r+0x21c>)
 80099e4:	f7f6 fc14 	bl	8000210 <memchr>
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	b9d8      	cbnz	r0, 8009a24 <_vfiprintf_r+0x110>
 80099ec:	06d1      	lsls	r1, r2, #27
 80099ee:	bf44      	itt	mi
 80099f0:	2320      	movmi	r3, #32
 80099f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099f6:	0713      	lsls	r3, r2, #28
 80099f8:	bf44      	itt	mi
 80099fa:	232b      	movmi	r3, #43	@ 0x2b
 80099fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a00:	f89a 3000 	ldrb.w	r3, [sl]
 8009a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a06:	d015      	beq.n	8009a34 <_vfiprintf_r+0x120>
 8009a08:	9a07      	ldr	r2, [sp, #28]
 8009a0a:	4654      	mov	r4, sl
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f04f 0c0a 	mov.w	ip, #10
 8009a12:	4621      	mov	r1, r4
 8009a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a18:	3b30      	subs	r3, #48	@ 0x30
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d94b      	bls.n	8009ab6 <_vfiprintf_r+0x1a2>
 8009a1e:	b1b0      	cbz	r0, 8009a4e <_vfiprintf_r+0x13a>
 8009a20:	9207      	str	r2, [sp, #28]
 8009a22:	e014      	b.n	8009a4e <_vfiprintf_r+0x13a>
 8009a24:	eba0 0308 	sub.w	r3, r0, r8
 8009a28:	fa09 f303 	lsl.w	r3, r9, r3
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	46a2      	mov	sl, r4
 8009a32:	e7d2      	b.n	80099da <_vfiprintf_r+0xc6>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1d19      	adds	r1, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9103      	str	r1, [sp, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bfbb      	ittet	lt
 8009a40:	425b      	neglt	r3, r3
 8009a42:	f042 0202 	orrlt.w	r2, r2, #2
 8009a46:	9307      	strge	r3, [sp, #28]
 8009a48:	9307      	strlt	r3, [sp, #28]
 8009a4a:	bfb8      	it	lt
 8009a4c:	9204      	strlt	r2, [sp, #16]
 8009a4e:	7823      	ldrb	r3, [r4, #0]
 8009a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a52:	d10a      	bne.n	8009a6a <_vfiprintf_r+0x156>
 8009a54:	7863      	ldrb	r3, [r4, #1]
 8009a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a58:	d132      	bne.n	8009ac0 <_vfiprintf_r+0x1ac>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	1d1a      	adds	r2, r3, #4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	9203      	str	r2, [sp, #12]
 8009a62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a66:	3402      	adds	r4, #2
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b40 <_vfiprintf_r+0x22c>
 8009a6e:	7821      	ldrb	r1, [r4, #0]
 8009a70:	2203      	movs	r2, #3
 8009a72:	4650      	mov	r0, sl
 8009a74:	f7f6 fbcc 	bl	8000210 <memchr>
 8009a78:	b138      	cbz	r0, 8009a8a <_vfiprintf_r+0x176>
 8009a7a:	9b04      	ldr	r3, [sp, #16]
 8009a7c:	eba0 000a 	sub.w	r0, r0, sl
 8009a80:	2240      	movs	r2, #64	@ 0x40
 8009a82:	4082      	lsls	r2, r0
 8009a84:	4313      	orrs	r3, r2
 8009a86:	3401      	adds	r4, #1
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8e:	4829      	ldr	r0, [pc, #164]	@ (8009b34 <_vfiprintf_r+0x220>)
 8009a90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a94:	2206      	movs	r2, #6
 8009a96:	f7f6 fbbb 	bl	8000210 <memchr>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d03f      	beq.n	8009b1e <_vfiprintf_r+0x20a>
 8009a9e:	4b26      	ldr	r3, [pc, #152]	@ (8009b38 <_vfiprintf_r+0x224>)
 8009aa0:	bb1b      	cbnz	r3, 8009aea <_vfiprintf_r+0x1d6>
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	3307      	adds	r3, #7
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	3308      	adds	r3, #8
 8009aac:	9303      	str	r3, [sp, #12]
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	443b      	add	r3, r7
 8009ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ab4:	e76a      	b.n	800998c <_vfiprintf_r+0x78>
 8009ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aba:	460c      	mov	r4, r1
 8009abc:	2001      	movs	r0, #1
 8009abe:	e7a8      	b.n	8009a12 <_vfiprintf_r+0xfe>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	3401      	adds	r4, #1
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	f04f 0c0a 	mov.w	ip, #10
 8009acc:	4620      	mov	r0, r4
 8009ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad2:	3a30      	subs	r2, #48	@ 0x30
 8009ad4:	2a09      	cmp	r2, #9
 8009ad6:	d903      	bls.n	8009ae0 <_vfiprintf_r+0x1cc>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0c6      	beq.n	8009a6a <_vfiprintf_r+0x156>
 8009adc:	9105      	str	r1, [sp, #20]
 8009ade:	e7c4      	b.n	8009a6a <_vfiprintf_r+0x156>
 8009ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e7f0      	b.n	8009acc <_vfiprintf_r+0x1b8>
 8009aea:	ab03      	add	r3, sp, #12
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	462a      	mov	r2, r5
 8009af0:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <_vfiprintf_r+0x228>)
 8009af2:	a904      	add	r1, sp, #16
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7fb feb9 	bl	800586c <_printf_float>
 8009afa:	4607      	mov	r7, r0
 8009afc:	1c78      	adds	r0, r7, #1
 8009afe:	d1d6      	bne.n	8009aae <_vfiprintf_r+0x19a>
 8009b00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_vfiprintf_r+0x1fe>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_vfiprintf_r+0x1fe>
 8009b0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b0e:	f7fc fe1d 	bl	800674c <__retarget_lock_release_recursive>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	065b      	lsls	r3, r3, #25
 8009b16:	f53f af1f 	bmi.w	8009958 <_vfiprintf_r+0x44>
 8009b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b1c:	e71e      	b.n	800995c <_vfiprintf_r+0x48>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <_vfiprintf_r+0x228>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7fc f937 	bl	8005d9c <_printf_i>
 8009b2e:	e7e4      	b.n	8009afa <_vfiprintf_r+0x1e6>
 8009b30:	0800a1b9 	.word	0x0800a1b9
 8009b34:	0800a1c3 	.word	0x0800a1c3
 8009b38:	0800586d 	.word	0x0800586d
 8009b3c:	080098f1 	.word	0x080098f1
 8009b40:	0800a1bf 	.word	0x0800a1bf

08009b44 <__swbuf_r>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	460e      	mov	r6, r1
 8009b48:	4614      	mov	r4, r2
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b118      	cbz	r0, 8009b56 <__swbuf_r+0x12>
 8009b4e:	6a03      	ldr	r3, [r0, #32]
 8009b50:	b90b      	cbnz	r3, 8009b56 <__swbuf_r+0x12>
 8009b52:	f7fc fce3 	bl	800651c <__sinit>
 8009b56:	69a3      	ldr	r3, [r4, #24]
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	071a      	lsls	r2, r3, #28
 8009b5e:	d501      	bpl.n	8009b64 <__swbuf_r+0x20>
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	b943      	cbnz	r3, 8009b76 <__swbuf_r+0x32>
 8009b64:	4621      	mov	r1, r4
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f82a 	bl	8009bc0 <__swsetup_r>
 8009b6c:	b118      	cbz	r0, 8009b76 <__swbuf_r+0x32>
 8009b6e:	f04f 37ff 	mov.w	r7, #4294967295
 8009b72:	4638      	mov	r0, r7
 8009b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	6922      	ldr	r2, [r4, #16]
 8009b7a:	1a98      	subs	r0, r3, r2
 8009b7c:	6963      	ldr	r3, [r4, #20]
 8009b7e:	b2f6      	uxtb	r6, r6
 8009b80:	4283      	cmp	r3, r0
 8009b82:	4637      	mov	r7, r6
 8009b84:	dc05      	bgt.n	8009b92 <__swbuf_r+0x4e>
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7ff fa47 	bl	800901c <_fflush_r>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1ed      	bne.n	8009b6e <__swbuf_r+0x2a>
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	60a3      	str	r3, [r4, #8]
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	6022      	str	r2, [r4, #0]
 8009b9e:	701e      	strb	r6, [r3, #0]
 8009ba0:	6962      	ldr	r2, [r4, #20]
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d004      	beq.n	8009bb2 <__swbuf_r+0x6e>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	07db      	lsls	r3, r3, #31
 8009bac:	d5e1      	bpl.n	8009b72 <__swbuf_r+0x2e>
 8009bae:	2e0a      	cmp	r6, #10
 8009bb0:	d1df      	bne.n	8009b72 <__swbuf_r+0x2e>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7ff fa31 	bl	800901c <_fflush_r>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d0d9      	beq.n	8009b72 <__swbuf_r+0x2e>
 8009bbe:	e7d6      	b.n	8009b6e <__swbuf_r+0x2a>

08009bc0 <__swsetup_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4b29      	ldr	r3, [pc, #164]	@ (8009c68 <__swsetup_r+0xa8>)
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	6818      	ldr	r0, [r3, #0]
 8009bc8:	460c      	mov	r4, r1
 8009bca:	b118      	cbz	r0, 8009bd4 <__swsetup_r+0x14>
 8009bcc:	6a03      	ldr	r3, [r0, #32]
 8009bce:	b90b      	cbnz	r3, 8009bd4 <__swsetup_r+0x14>
 8009bd0:	f7fc fca4 	bl	800651c <__sinit>
 8009bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd8:	0719      	lsls	r1, r3, #28
 8009bda:	d422      	bmi.n	8009c22 <__swsetup_r+0x62>
 8009bdc:	06da      	lsls	r2, r3, #27
 8009bde:	d407      	bmi.n	8009bf0 <__swsetup_r+0x30>
 8009be0:	2209      	movs	r2, #9
 8009be2:	602a      	str	r2, [r5, #0]
 8009be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295
 8009bee:	e033      	b.n	8009c58 <__swsetup_r+0x98>
 8009bf0:	0758      	lsls	r0, r3, #29
 8009bf2:	d512      	bpl.n	8009c1a <__swsetup_r+0x5a>
 8009bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bf6:	b141      	cbz	r1, 8009c0a <__swsetup_r+0x4a>
 8009bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bfc:	4299      	cmp	r1, r3
 8009bfe:	d002      	beq.n	8009c06 <__swsetup_r+0x46>
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7fd fbf9 	bl	80073f8 <_free_r>
 8009c06:	2300      	movs	r3, #0
 8009c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	2300      	movs	r3, #0
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f043 0308 	orr.w	r3, r3, #8
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	b94b      	cbnz	r3, 8009c3a <__swsetup_r+0x7a>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c30:	d003      	beq.n	8009c3a <__swsetup_r+0x7a>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f000 f883 	bl	8009d40 <__smakebuf_r>
 8009c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3e:	f013 0201 	ands.w	r2, r3, #1
 8009c42:	d00a      	beq.n	8009c5a <__swsetup_r+0x9a>
 8009c44:	2200      	movs	r2, #0
 8009c46:	60a2      	str	r2, [r4, #8]
 8009c48:	6962      	ldr	r2, [r4, #20]
 8009c4a:	4252      	negs	r2, r2
 8009c4c:	61a2      	str	r2, [r4, #24]
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	b942      	cbnz	r2, 8009c64 <__swsetup_r+0xa4>
 8009c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c56:	d1c5      	bne.n	8009be4 <__swsetup_r+0x24>
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	0799      	lsls	r1, r3, #30
 8009c5c:	bf58      	it	pl
 8009c5e:	6962      	ldrpl	r2, [r4, #20]
 8009c60:	60a2      	str	r2, [r4, #8]
 8009c62:	e7f4      	b.n	8009c4e <__swsetup_r+0x8e>
 8009c64:	2000      	movs	r0, #0
 8009c66:	e7f7      	b.n	8009c58 <__swsetup_r+0x98>
 8009c68:	20000020 	.word	0x20000020

08009c6c <_raise_r>:
 8009c6c:	291f      	cmp	r1, #31
 8009c6e:	b538      	push	{r3, r4, r5, lr}
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	d904      	bls.n	8009c80 <_raise_r+0x14>
 8009c76:	2316      	movs	r3, #22
 8009c78:	6003      	str	r3, [r0, #0]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c82:	b112      	cbz	r2, 8009c8a <_raise_r+0x1e>
 8009c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c88:	b94b      	cbnz	r3, 8009c9e <_raise_r+0x32>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f830 	bl	8009cf0 <_getpid_r>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4601      	mov	r1, r0
 8009c94:	4628      	mov	r0, r5
 8009c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9a:	f000 b817 	b.w	8009ccc <_kill_r>
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d00a      	beq.n	8009cb8 <_raise_r+0x4c>
 8009ca2:	1c59      	adds	r1, r3, #1
 8009ca4:	d103      	bne.n	8009cae <_raise_r+0x42>
 8009ca6:	2316      	movs	r3, #22
 8009ca8:	6003      	str	r3, [r0, #0]
 8009caa:	2001      	movs	r0, #1
 8009cac:	e7e7      	b.n	8009c7e <_raise_r+0x12>
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4798      	blx	r3
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7e0      	b.n	8009c7e <_raise_r+0x12>

08009cbc <raise>:
 8009cbc:	4b02      	ldr	r3, [pc, #8]	@ (8009cc8 <raise+0xc>)
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	f7ff bfd3 	b.w	8009c6c <_raise_r>
 8009cc6:	bf00      	nop
 8009cc8:	20000020 	.word	0x20000020

08009ccc <_kill_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	@ (8009cec <_kill_r+0x20>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	f7f8 fb63 	bl	80023a4 <_kill>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	d102      	bne.n	8009ce8 <_kill_r+0x1c>
 8009ce2:	682b      	ldr	r3, [r5, #0]
 8009ce4:	b103      	cbz	r3, 8009ce8 <_kill_r+0x1c>
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	bf00      	nop
 8009cec:	200004c4 	.word	0x200004c4

08009cf0 <_getpid_r>:
 8009cf0:	f7f8 bb50 	b.w	8002394 <_getpid>

08009cf4 <__swhatbuf_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	b096      	sub	sp, #88	@ 0x58
 8009d00:	4615      	mov	r5, r2
 8009d02:	461e      	mov	r6, r3
 8009d04:	da0d      	bge.n	8009d22 <__swhatbuf_r+0x2e>
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	bf14      	ite	ne
 8009d12:	2340      	movne	r3, #64	@ 0x40
 8009d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d18:	2000      	movs	r0, #0
 8009d1a:	6031      	str	r1, [r6, #0]
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	b016      	add	sp, #88	@ 0x58
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	466a      	mov	r2, sp
 8009d24:	f000 f848 	bl	8009db8 <_fstat_r>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	dbec      	blt.n	8009d06 <__swhatbuf_r+0x12>
 8009d2c:	9901      	ldr	r1, [sp, #4]
 8009d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d36:	4259      	negs	r1, r3
 8009d38:	4159      	adcs	r1, r3
 8009d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3e:	e7eb      	b.n	8009d18 <__swhatbuf_r+0x24>

08009d40 <__smakebuf_r>:
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d44:	079d      	lsls	r5, r3, #30
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	d507      	bpl.n	8009d5c <__smakebuf_r+0x1c>
 8009d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	2301      	movs	r3, #1
 8009d56:	6163      	str	r3, [r4, #20]
 8009d58:	b003      	add	sp, #12
 8009d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5c:	ab01      	add	r3, sp, #4
 8009d5e:	466a      	mov	r2, sp
 8009d60:	f7ff ffc8 	bl	8009cf4 <__swhatbuf_r>
 8009d64:	9f00      	ldr	r7, [sp, #0]
 8009d66:	4605      	mov	r5, r0
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7fd fbb8 	bl	80074e0 <_malloc_r>
 8009d70:	b948      	cbnz	r0, 8009d86 <__smakebuf_r+0x46>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	059a      	lsls	r2, r3, #22
 8009d78:	d4ee      	bmi.n	8009d58 <__smakebuf_r+0x18>
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	f043 0302 	orr.w	r3, r3, #2
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	e7e2      	b.n	8009d4c <__smakebuf_r+0xc>
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	6020      	str	r0, [r4, #0]
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x70>
 8009d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f81d 	bl	8009ddc <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x70>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	431d      	orrs	r5, r3
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cf      	b.n	8009d58 <__smakebuf_r+0x18>

08009db8 <_fstat_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	@ (8009dd8 <_fstat_r+0x20>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	f7f8 fb4d 	bl	8002464 <_fstat>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d102      	bne.n	8009dd4 <_fstat_r+0x1c>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <_fstat_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200004c4 	.word	0x200004c4

08009ddc <_isatty_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d06      	ldr	r5, [pc, #24]	@ (8009df8 <_isatty_r+0x1c>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f8 fb4c 	bl	8002484 <_isatty>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_isatty_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_isatty_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	200004c4 	.word	0x200004c4

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
