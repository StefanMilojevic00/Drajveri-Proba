
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a114  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a2e8  0800a2e8  0000b2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a738  0800a738  0000c2bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a738  0800a738  0000b738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a740  0800a740  0000c2bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a740  0800a740  0000b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a744  0800a744  0000b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002bc  20000000  0800a748  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200002bc  0800aa04  0000c2bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800aa04  0000c5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c2bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001462e  00000000  00000000  0000c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ac  00000000  00000000  0002091a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000240c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  00025258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aff2  00000000  00000000  00025fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae39  00000000  00000000  00050fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc548  00000000  00000000  0006bdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  0016836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0016dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002bc 	.word	0x200002bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2cc 	.word	0x0800a2cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002c0 	.word	0x200002c0
 800020c:	0800a2cc 	.word	0x0800a2cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <AirQualityIncicatorInit>:
#include "AirQualityIndicator.h"

static ledRow_t loadConfiguration;

void AirQualityIncicatorInit()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800102a:	2340      	movs	r3, #64	@ 0x40
 800102c:	9308      	str	r3, [sp, #32]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <AirQualityIncicatorInit+0x3c>)
 8001030:	9307      	str	r3, [sp, #28]
 8001032:	2301      	movs	r3, #1
 8001034:	9306      	str	r3, [sp, #24]
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <AirQualityIncicatorInit+0x40>)
 8001038:	9305      	str	r3, [sp, #20]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	9304      	str	r3, [sp, #16]
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001040:	9303      	str	r3, [sp, #12]
 8001042:	2310      	movs	r3, #16
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <AirQualityIncicatorInit+0x48>)
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001050:	2240      	movs	r2, #64	@ 0x40
 8001052:	4907      	ldr	r1, [pc, #28]	@ (8001070 <AirQualityIncicatorInit+0x4c>)
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <AirQualityIncicatorInit+0x50>)
 8001056:	f000 f955 	bl	8001304 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40022000 	.word	0x40022000
 8001068:	40021800 	.word	0x40021800
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	200002d8 	.word	0x200002d8

08001078 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 8001082:	ed97 0a01 	vldr	s0, [r7, #4]
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <SetIndicatorLEDs+0x1c>)
 8001088:	f000 f96e 	bl	8001368 <LedRowWrite>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200002d8 	.word	0x200002d8

08001098 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 800109c:	2204      	movs	r2, #4
 800109e:	4903      	ldr	r1, [pc, #12]	@ (80010ac <AlarmInit+0x14>)
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <AlarmInit+0x18>)
 80010a2:	f000 f8a5 	bl	80011f0 <Buzzer_init>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	20000308 	.word	0x20000308

080010b4 <AlarmON>:

void AlarmON()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <AlarmON+0x10>)
 80010bc:	f000 f8ab 	bl	8001216 <BuzzerWritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000308 	.word	0x20000308

080010c8 <AlarmOFF>:

void AlarmOFF()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <AlarmOFF+0x10>)
 80010d0:	f000 f8a1 	bl	8001216 <BuzzerWritePin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000308 	.word	0x20000308

080010dc <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	739a      	strb	r2, [r3, #14]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d051      	beq.n	80011de <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	899b      	ldrh	r3, [r3, #12]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f002 fca3 	bl	8003a90 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7b9b      	ldrb	r3, [r3, #14]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d843      	bhi.n	80011de <ReadButton+0xb6>
 8001156:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <ReadButton+0x34>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	0800116d 	.word	0x0800116d
 8001160:	08001185 	.word	0x08001185
 8001164:	08001193 	.word	0x08001193
 8001168:	080011bb 	.word	0x080011bb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	429a      	cmp	r2, r3
 8001174:	d130      	bne.n	80011d8 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001182:	e029      	b.n	80011d8 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	70da      	strb	r2, [r3, #3]

                break;
 8001190:	e025      	b.n	80011de <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	429a      	cmp	r2, r3
 800119a:	d10a      	bne.n	80011b2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	739a      	strb	r2, [r3, #14]
                break;
 80011b8:	e011      	b.n	80011de <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	795b      	ldrb	r3, [r3, #5]
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d005      	beq.n	80011dc <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	739a      	strb	r2, [r3, #14]
                }
                break;
 80011d6:	e001      	b.n	80011dc <ReadButton+0xb4>
                break;
 80011d8:	bf00      	nop
 80011da:	e000      	b.n	80011de <ReadButton+0xb6>
                break;
 80011dc:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	78db      	ldrb	r3, [r3, #3]
 80011e2:	73bb      	strb	r3, [r7, #14]
    return retval;
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4613      	mov	r3, r2
 80011fc:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	809a      	strh	r2, [r3, #4]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	4619      	mov	r1, r3
 800122e:	f002 fc47 	bl	8003ac0 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001240:	f000 f944 	bl	80014cc <MQ9_GetRawValue>
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f956 	bl	80014fc <MQ9_ConverRaw2Real>
 8001250:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	ee07 3a90 	vmov	s15, r3
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	809a      	strh	r2, [r3, #4]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f002 fc0a 	bl	8003ac0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ac:	e007      	b.n	80012be <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	889b      	ldrh	r3, [r3, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f002 fc01 	bl	8003ac0 <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 80012cc:	2208      	movs	r2, #8
 80012ce:	4903      	ldr	r1, [pc, #12]	@ (80012dc <LED_init+0x14>)
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <LED_init+0x18>)
 80012d2:	f7ff ffc7 	bl	8001264 <CreateNewSingleLED>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	20000310 	.word	0x20000310

080012e4 <LED_Drive>:

void LED_Drive(bool state)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <LED_Drive+0x1c>)
 80012f4:	f7ff ffc9 	bl	800128a <UpdateSingleLED>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000310 	.word	0x20000310

08001304 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8b3a      	ldrh	r2, [r7, #24]
 800132a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8c3a      	ldrh	r2, [r7, #32]
 8001336:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001342:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001348:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800134e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800135a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 8001374:	edd7 7a00 	vldr	s15, [r7]
 8001378:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014b4 <LedRowWrite+0x14c>
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd08      	ble.n	8001398 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f002 fb95 	bl	8003ac0 <HAL_GPIO_WritePin>
 8001396:	e007      	b.n	80013a8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	f002 fb8c 	bl	8003ac0 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013a8:	edd7 7a00 	vldr	s15, [r7]
 80013ac:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014b8 <LedRowWrite+0x150>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd08      	ble.n	80013cc <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6898      	ldr	r0, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	899b      	ldrh	r3, [r3, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	f002 fb7b 	bl	8003ac0 <HAL_GPIO_WritePin>
 80013ca:	e007      	b.n	80013dc <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	899b      	ldrh	r3, [r3, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	f002 fb72 	bl	8003ac0 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 80013dc:	edd7 7a00 	vldr	s15, [r7]
 80013e0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014bc <LedRowWrite+0x154>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dd08      	ble.n	8001400 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6918      	ldr	r0, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8a9b      	ldrh	r3, [r3, #20]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	f002 fb61 	bl	8003ac0 <HAL_GPIO_WritePin>
 80013fe:	e007      	b.n	8001410 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6918      	ldr	r0, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8a9b      	ldrh	r3, [r3, #20]
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	f002 fb58 	bl	8003ac0 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001410:	edd7 7a00 	vldr	s15, [r7]
 8001414:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80014c0 <LedRowWrite+0x158>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	dd08      	ble.n	8001434 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6998      	ldr	r0, [r3, #24]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	8b9b      	ldrh	r3, [r3, #28]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f002 fb47 	bl	8003ac0 <HAL_GPIO_WritePin>
 8001432:	e007      	b.n	8001444 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6998      	ldr	r0, [r3, #24]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8b9b      	ldrh	r3, [r3, #28]
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	f002 fb3e 	bl	8003ac0 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001444:	edd7 7a00 	vldr	s15, [r7]
 8001448:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80014c4 <LedRowWrite+0x15c>
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd08      	ble.n	8001468 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a18      	ldr	r0, [r3, #32]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f002 fb2d 	bl	8003ac0 <HAL_GPIO_WritePin>
 8001466:	e007      	b.n	8001478 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a18      	ldr	r0, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fb24 	bl	8003ac0 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 8001478:	edd7 7a00 	vldr	s15, [r7]
 800147c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80014c8 <LedRowWrite+0x160>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	dd08      	ble.n	800149c <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001492:	2201      	movs	r2, #1
 8001494:	4619      	mov	r1, r3
 8001496:	f002 fb13 	bl	8003ac0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 800149a:	e007      	b.n	80014ac <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f002 fb0a 	bl	8003ac0 <HAL_GPIO_WritePin>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	43c80000 	.word	0x43c80000
 80014b8:	44160000 	.word	0x44160000
 80014bc:	44960000 	.word	0x44960000
 80014c0:	44e10000 	.word	0x44e10000
 80014c4:	45160000 	.word	0x45160000
 80014c8:	453b8000 	.word	0x453b8000

080014cc <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014d4:	f001 fb7e 	bl	8002bd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014de:	f001 fc47 	bl	8002d70 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014e4:	f001 fccf 	bl	8002e86 <HAL_ADC_GetValue>
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
	return raw;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000032c 	.word	0x2000032c

080014fc <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MQ9_ConverRaw2Real+0x48>)
 8001508:	edd3 6a00 	vldr	s13, [r3]
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MQ9_ConverRaw2Real+0x4c>)
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ed97 7a03 	vldr	s14, [r7, #12]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000004 	.word	0x20000004
 8001548:	20000000 	.word	0x20000000

0800154c <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 8001550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001554:	4902      	ldr	r1, [pc, #8]	@ (8001560 <SignalSystemInit+0x14>)
 8001556:	4803      	ldr	r0, [pc, #12]	@ (8001564 <SignalSystemInit+0x18>)
 8001558:	f7ff fdc0 	bl	80010dc <CreateNewButton>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40022000 	.word	0x40022000
 8001564:	20000318 	.word	0x20000318

08001568 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <ReadSignal+0x20>)
 8001574:	f7ff fdd8 	bl	8001128 <ReadButton>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	return Status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000318 	.word	0x20000318

0800158c <AppInit>:
CountingTasterFSM countState = C_IDLE;
LED_StatusFSM ledState = LED_OFF;


void AppInit()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	AlarmInit();
 8001590:	f7ff fd82 	bl	8001098 <AlarmInit>
	SignalSystemInit();
 8001594:	f7ff ffda 	bl	800154c <SignalSystemInit>
	AirQualityIncicatorInit();
 8001598:	f7ff fd44 	bl	8001024 <AirQualityIncicatorInit>
	LED_init();
 800159c:	f7ff fe94 	bl	80012c8 <LED_init>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <AppStart>:

void AppStart()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	while(1)
	{
			switch(progState)
 80015aa:	4b37      	ldr	r3, [pc, #220]	@ (8001688 <AppStart+0xe4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d010      	beq.n	80015d4 <AppStart+0x30>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	dcf9      	bgt.n	80015aa <AppStart+0x6>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d061      	beq.n	800167e <AppStart+0xda>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1f5      	bne.n	80015aa <AppStart+0x6>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 80015be:	4833      	ldr	r0, [pc, #204]	@ (800168c <AppStart+0xe8>)
 80015c0:	f000 f9d8 	bl	8001974 <UART_TransmitString>
					SetIndicatorLEDs(0); //resets the indicator
 80015c4:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001690 <AppStart+0xec>
 80015c8:	f7ff fd56 	bl	8001078 <SetIndicatorLEDs>
					progState = P_IDLE;
 80015cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <AppStart+0xe4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
					break;
 80015d2:	e057      	b.n	8001684 <AppStart+0xe0>

					break;

				case P_WORK:

					float PPM = ReadGasSensor();
 80015d4:	f7ff fe31 	bl	800123a <ReadGasSensor>
 80015d8:	ed87 0a01 	vstr	s0, [r7, #4]

					if(PPM < 400)
 80015dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001694 <AppStart+0xf0>
 80015e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d503      	bpl.n	80015f6 <AppStart+0x52>
					{
						led_cnt.correct_led = false;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <AppStart+0xf4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	735a      	strb	r2, [r3, #13]
 80015f4:	e002      	b.n	80015fc <AppStart+0x58>
					}
					else
					{
						led_cnt.correct_led  = true;
 80015f6:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <AppStart+0xf4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	735a      	strb	r2, [r3, #13]
					}

					if(led_cnt.led_overflow_flag == true)
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <AppStart+0xf4>)
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d019      	beq.n	800163a <AppStart+0x96>
					{
						switch(ledState)
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <AppStart+0xf8>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d00e      	beq.n	800162c <AppStart+0x88>
 800160e:	2b02      	cmp	r3, #2
 8001610:	dc10      	bgt.n	8001634 <AppStart+0x90>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <AppStart+0x78>
 8001616:	2b01      	cmp	r3, #1
 8001618:	d004      	beq.n	8001624 <AppStart+0x80>
 800161a:	e00b      	b.n	8001634 <AppStart+0x90>
						{
							case LED_OFF:

								LED_Drive(false);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fe61 	bl	80012e4 <LED_Drive>

								break;
 8001622:	e007      	b.n	8001634 <AppStart+0x90>

							case LED_ON_CORECT:

								LED_Drive(true);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fe5d 	bl	80012e4 <LED_Drive>

								break;
 800162a:	e003      	b.n	8001634 <AppStart+0x90>

							case LED_ON_INCORECT:

								LED_Drive(true);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fe59 	bl	80012e4 <LED_Drive>

								break;
 8001632:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <AppStart+0xf4>)
 8001636:	2200      	movs	r2, #0
 8001638:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <AppStart+0xfc>)
 800163c:	7b9b      	ldrb	r3, [r3, #14]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01e      	beq.n	8001682 <AppStart+0xde>
					{
						UART_TransmitString(PPM_MSG);
 8001644:	4817      	ldr	r0, [pc, #92]	@ (80016a4 <AppStart+0x100>)
 8001646:	f000 f995 	bl	8001974 <UART_TransmitString>
						UART_TransmitFloat(PPM);
 800164a:	ed97 0a01 	vldr	s0, [r7, #4]
 800164e:	f000 f9bf 	bl	80019d0 <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 8001652:	ed97 0a01 	vldr	s0, [r7, #4]
 8001656:	f7ff fd0f 	bl	8001078 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016a8 <AppStart+0x104>
 8001662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	dd04      	ble.n	8001676 <AppStart+0xd2>
						{
							UART_TransmitString(AlertMSG);
 800166c:	480f      	ldr	r0, [pc, #60]	@ (80016ac <AppStart+0x108>)
 800166e:	f000 f981 	bl	8001974 <UART_TransmitString>
							AlarmON();
 8001672:	f7ff fd1f 	bl	80010b4 <AlarmON>
						}
						prog_cnt.update_param_flag = false;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <AppStart+0xfc>)
 8001678:	2200      	movs	r2, #0
 800167a:	739a      	strb	r2, [r3, #14]
					}
					break;
 800167c:	e001      	b.n	8001682 <AppStart+0xde>
					break;
 800167e:	bf00      	nop
 8001680:	e793      	b.n	80015aa <AppStart+0x6>
					break;
 8001682:	bf00      	nop
			switch(progState)
 8001684:	e791      	b.n	80015aa <AppStart+0x6>
 8001686:	bf00      	nop
 8001688:	200000e6 	.word	0x200000e6
 800168c:	20000008 	.word	0x20000008
 8001690:	00000000 	.word	0x00000000
 8001694:	43c80000 	.word	0x43c80000
 8001698:	200000c4 	.word	0x200000c4
 800169c:	2000032a 	.word	0x2000032a
 80016a0:	200000d4 	.word	0x200000d4
 80016a4:	20000028 	.word	0x20000028
 80016a8:	45098000 	.word	0x45098000
 80016ac:	20000030 	.word	0x20000030

080016b0 <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a9b      	ldr	r2, [pc, #620]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	f040 814d 	bne.w	800195c <HAL_TIM_PeriodElapsedCallback+0x2ac>
	{
		SysTickFlag = true;
 80016c2:	4b9a      	ldr	r3, [pc, #616]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]

		//Controling room clearing mechanism////////////////////////////////
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 80016c8:	4b99      	ldr	r3, [pc, #612]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016ca:	7bdb      	ldrb	r3, [r3, #15]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b98      	ldr	r3, [pc, #608]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016d0:	7c1b      	ldrb	r3, [r3, #16]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d30f      	bcc.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0x46>
 80016d6:	4b96      	ldr	r3, [pc, #600]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016d8:	7c5b      	ldrb	r3, [r3, #17]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00a      	beq.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			AlarmOFF();
 80016e0:	f7ff fcf2 	bl	80010c8 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80016e4:	4893      	ldr	r0, [pc, #588]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e6:	f000 f945 	bl	8001974 <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80016ea:	4b91      	ldr	r3, [pc, #580]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80016f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	745a      	strb	r2, [r3, #17]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80016f6:	4b90      	ldr	r3, [pc, #576]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d042      	beq.n	8001784 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80016fe:	2b02      	cmp	r3, #2
 8001700:	dc5d      	bgt.n	80017be <HAL_TIM_PeriodElapsedCallback+0x10e>
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001706:	2b01      	cmp	r3, #1
 8001708:	d024      	beq.n	8001754 <HAL_TIM_PeriodElapsedCallback+0xa4>
 800170a:	e058      	b.n	80017be <HAL_TIM_PeriodElapsedCallback+0x10e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 800170c:	4b8b      	ldr	r3, [pc, #556]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	b29b      	uxth	r3, r3
 8001712:	3301      	adds	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b89      	ldr	r3, [pc, #548]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001718:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 800171a:	4b88      	ldr	r3, [pc, #544]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800171c:	889b      	ldrh	r3, [r3, #4]
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b86      	ldr	r3, [pc, #536]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001722:	895b      	ldrh	r3, [r3, #10]
 8001724:	429a      	cmp	r2, r3
 8001726:	d345      	bcc.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0x104>
				{

					led_cnt.led_overflow_flag = true;
 8001728:	4b84      	ldr	r3, [pc, #528]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800172a:	2201      	movs	r2, #1
 800172c:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001730:	7b5b      	ldrb	r3, [r3, #13]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x90>
					{
						ledState =  LED_ON_CORECT;
 8001738:	4b7f      	ldr	r3, [pc, #508]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e002      	b.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x96>
					}
					else
					{
						ledState = LED_ON_INCORECT;
 8001740:	4b7d      	ldr	r3, [pc, #500]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 8001746:	4b7d      	ldr	r3, [pc, #500]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001748:	2200      	movs	r2, #0
 800174a:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 800174c:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800174e:	2201      	movs	r2, #1
 8001750:	731a      	strb	r2, [r3, #12]
				}

				break;
 8001752:	e02f      	b.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0x104>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001754:	4b79      	ldr	r3, [pc, #484]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b77      	ldr	r3, [pc, #476]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001760:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 8001762:	4b76      	ldr	r3, [pc, #472]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b74      	ldr	r3, [pc, #464]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800176a:	88db      	ldrh	r3, [r3, #6]
 800176c:	429a      	cmp	r2, r3
 800176e:	d323      	bcc.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x108>
				{
					led_cnt.cnt_led_correct_on = 0;
 8001770:	4b72      	ldr	r3, [pc, #456]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 8001776:	4b71      	ldr	r3, [pc, #452]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001778:	2201      	movs	r2, #1
 800177a:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 800177c:	4b6e      	ldr	r3, [pc, #440]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001782:	e019      	b.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x108>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001784:	4b6d      	ldr	r3, [pc, #436]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001786:	885b      	ldrh	r3, [r3, #2]
 8001788:	b29b      	uxth	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b6b      	ldr	r3, [pc, #428]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001790:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 8001792:	4b6a      	ldr	r3, [pc, #424]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001794:	885b      	ldrh	r3, [r3, #2]
 8001796:	b29a      	uxth	r2, r3
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800179a:	891b      	ldrh	r3, [r3, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d30d      	bcc.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x10c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 80017a0:	4b66      	ldr	r3, [pc, #408]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80017b2:	e003      	b.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x10c>
				break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 80017bc:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 80017be:	4b5c      	ldr	r3, [pc, #368]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x142>
		{
			prog_cnt.cnt_ref_rate++;
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017ca:	899b      	ldrh	r3, [r3, #12]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b57      	ldr	r3, [pc, #348]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017d4:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80017d6:	4b56      	ldr	r3, [pc, #344]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017d8:	899b      	ldrh	r3, [r3, #12]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017de:	891b      	ldrh	r3, [r3, #8]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d305      	bcc.n	80017f2 <HAL_TIM_PeriodElapsedCallback+0x142>
			{
				prog_cnt.update_param_flag = true;
 80017e6:	4b52      	ldr	r3, [pc, #328]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80017f2:	484e      	ldr	r0, [pc, #312]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80017f4:	f7ff feb8 	bl	8001568 <ReadSignal>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017fe:	719a      	strb	r2, [r3, #6]
		switch(countState)
 8001800:	4b4f      	ldr	r3, [pc, #316]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d043      	beq.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001808:	2b02      	cmp	r3, #2
 800180a:	f300 80a4 	bgt.w	8001956 <HAL_TIM_PeriodElapsedCallback+0x2a6>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001812:	2b01      	cmp	r3, #1
 8001814:	d017      	beq.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x196>
 8001816:	e09e      	b.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x2a6>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 8001818:	4b45      	ldr	r3, [pc, #276]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800181a:	799b      	ldrb	r3, [r3, #6]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d07f      	beq.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x272>
 8001822:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001824:	79db      	ldrb	r3, [r3, #7]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d07a      	beq.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x272>
				{
					prog_cnt.cnt_button = 0;
 800182c:	4b40      	ldr	r3, [pc, #256]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800182e:	2200      	movs	r2, #0
 8001830:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001832:	4b3f      	ldr	r3, [pc, #252]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001834:	2201      	movs	r2, #1
 8001836:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 8001838:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800183a:	2200      	movs	r2, #0
 800183c:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 800183e:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001844:	e06d      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x272>

			case C_START:

				prog_cnt.cnt_button++;
 8001846:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001848:	885b      	ldrh	r3, [r3, #2]
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001852:	805a      	strh	r2, [r3, #2]
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001854:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d303      	bcc.n	800186a <HAL_TIM_PeriodElapsedCallback+0x1ba>
				{
					countState = C_END;
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001868:	e074      	b.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
					if(((prog_cnt.read_button_flag) == true))
 800186a:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800186c:	799b      	ldrb	r3, [r3, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d06f      	beq.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
						prog_cnt.cnt_button = 0;
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001876:	2200      	movs	r2, #0
 8001878:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001886:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001888:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
				break;
 800188e:	e061      	b.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x2a4>

			case C_END:

				prog_cnt.cnt_button = 0;
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001892:	2200      	movs	r2, #0
 8001894:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b05      	cmp	r3, #5
 800189e:	d836      	bhi.n	800190e <HAL_TIM_PeriodElapsedCallback+0x25e>
 80018a0:	a201      	add	r2, pc, #4	@ (adr r2, 80018a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	0800190f 	.word	0x0800190f
 80018ac:	080018c1 	.word	0x080018c1
 80018b0:	080018d5 	.word	0x080018d5
 80018b4:	080018eb 	.word	0x080018eb
 80018b8:	0800190f 	.word	0x0800190f
 80018bc:	08001901 	.word	0x08001901

						break;

					case 1:

						progState = P_WORK;
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S1WorkStateMSG);
 80018c6:	4820      	ldr	r0, [pc, #128]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018c8:	f000 f854 	bl	8001974 <UART_TransmitString>
						prog_cnt.ref_rate = 100;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018ce:	2264      	movs	r2, #100	@ 0x64
 80018d0:	811a      	strh	r2, [r3, #8]

						break;
 80018d2:	e01c      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0x25e>

					case 2:

						progState = P_WORK;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S3WorkStateMSG);
 80018da:	481c      	ldr	r0, [pc, #112]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80018dc:	f000 f84a 	bl	8001974 <UART_TransmitString>
						prog_cnt.ref_rate = 300;
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018e6:	811a      	strh	r2, [r3, #8]

						break;
 80018e8:	e011      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0x25e>

					case 3:

						progState = P_WORK;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S5WorkStateMSG);
 80018f0:	4817      	ldr	r0, [pc, #92]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018f2:	f000 f83f 	bl	8001974 <UART_TransmitString>
						prog_cnt.ref_rate = 500;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018fc:	811a      	strh	r2, [r3, #8]

						break;
 80018fe:	e006      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0x25e>
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001908:	2200      	movs	r2, #0
 800190a:	811a      	strh	r2, [r3, #8]

						break;
 800190c:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001910:	2200      	movs	r2, #0
 8001912:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001916:	2201      	movs	r2, #1
 8001918:	71da      	strb	r2, [r3, #7]

				countState = C_IDLE;
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
				break;
 8001920:	e019      	b.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x2a6>
				break;
 8001922:	bf00      	nop
 8001924:	e017      	b.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x2a6>
 8001926:	bf00      	nop
 8001928:	20000398 	.word	0x20000398
 800192c:	20000328 	.word	0x20000328
 8001930:	200000d4 	.word	0x200000d4
 8001934:	20000054 	.word	0x20000054
 8001938:	2000032a 	.word	0x2000032a
 800193c:	200000c4 	.word	0x200000c4
 8001940:	20000329 	.word	0x20000329
 8001944:	200000e6 	.word	0x200000e6
 8001948:	2000007c 	.word	0x2000007c
 800194c:	20000094 	.word	0x20000094
 8001950:	200000ac 	.word	0x200000ac
				break;
 8001954:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001958:	2200      	movs	r2, #0
 800195a:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000d4 	.word	0x200000d4
 8001970:	20000328 	.word	0x20000328

08001974 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7fe fc97 	bl	80002b0 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <UART_TransmitString+0x54>)
 800198e:	f003 fcaf 	bl	80052f0 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <UART_TransmitString+0x58>)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4611      	mov	r1, r2
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	0c12      	lsrs	r2, r2, #16
 80019a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc81 	bl	80002b0 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f107 010c 	add.w	r1, r7, #12
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <UART_TransmitString+0x54>)
 80019bc:	f003 fc98 	bl	80052f0 <HAL_UART_Transmit>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003e4 	.word	0x200003e4
 80019cc:	0800a2e8 	.word	0x0800a2e8

080019d0 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b090      	sub	sp, #64	@ 0x40
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fdd4 	bl	8000588 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	f107 000c 	add.w	r0, r7, #12
 80019e8:	490a      	ldr	r1, [pc, #40]	@ (8001a14 <UART_TransmitFloat+0x44>)
 80019ea:	f005 f835 	bl	8006a58 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc5c 	bl	80002b0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 010c 	add.w	r1, r7, #12
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <UART_TransmitFloat+0x48>)
 8001a06:	f003 fc73 	bl	80052f0 <HAL_UART_Transmit>
}
 8001a0a:	bf00      	nop
 8001a0c:	3740      	adds	r7, #64	@ 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	0800a2ec 	.word	0x0800a2ec
 8001a18:	200003e4 	.word	0x200003e4

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a20:	f001 f837 	bl	8002a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a24:	f000 f816 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a28:	f000 f94c 	bl	8001cc4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a2c:	f000 f882 	bl	8001b34 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a30:	f000 f8d2 	bl	8001bd8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a34:	f000 f916 	bl	8001c64 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001a38:	f000 f8f0 	bl	8001c1c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <main+0x34>)
 8001a3e:	f003 f98b 	bl	8004d58 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 8001a42:	f7ff fda3 	bl	800158c <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 8001a46:	f7ff fdad 	bl	80015a4 <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a4a:	bf00      	nop
 8001a4c:	e7fd      	b.n	8001a4a <main+0x2e>
 8001a4e:	bf00      	nop
 8001a50:	20000398 	.word	0x20000398

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2230      	movs	r2, #48	@ 0x30
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 f85b 	bl	8006b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a78:	f002 f83c 	bl	8003af4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <SystemClock_Config+0xd8>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <SystemClock_Config+0xd8>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <SystemClock_Config+0xd8>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <SystemClock_Config+0xdc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <SystemClock_Config+0xdc>)
 8001a9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <SystemClock_Config+0xdc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ac0:	2319      	movs	r3, #25
 8001ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001ac4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ace:	2309      	movs	r3, #9
 8001ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 f86c 	bl	8003bb4 <HAL_RCC_OscConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ae2:	f000 fd4b 	bl	800257c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ae6:	f002 f815 	bl	8003b14 <HAL_PWREx_EnableOverDrive>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001af0:	f000 fd44 	bl	800257c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af4:	230f      	movs	r3, #15
 8001af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af8:	2302      	movs	r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2106      	movs	r1, #6
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 faf2 	bl	80040fc <HAL_RCC_ClockConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b1e:	f000 fd2d 	bl	800257c <Error_Handler>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3750      	adds	r7, #80	@ 0x50
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b48:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <MX_ADC3_Init+0x9c>)
 8001b4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b52:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <MX_ADC3_Init+0xa0>)
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b94:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001b96:	f000 ffd9 	bl	8002b4c <HAL_ADC_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001ba0:	f000 fcec 	bl	800257c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <MX_ADC3_Init+0x98>)
 8001bb6:	f001 f973 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bc0:	f000 fcdc 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000032c 	.word	0x2000032c
 8001bd0:	40012200 	.word	0x40012200
 8001bd4:	0f000001 	.word	0x0f000001

08001bd8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001bde:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <MX_CRC_Init+0x40>)
 8001be0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <MX_CRC_Init+0x3c>)
 8001c02:	f001 fcaf 	bl	8003564 <HAL_CRC_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001c0c:	f000 fcb6 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000374 	.word	0x20000374
 8001c18:	40023000 	.word	0x40023000

08001c1c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <MX_TIM11_Init+0x44>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c28:	f640 026f 	movw	r2, #2159	@ 0x86f
 8001c2c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c3a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	@ (8001c5c <MX_TIM11_Init+0x40>)
 8001c4a:	f003 f82d 	bl	8004ca8 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001c54:	f000 fc92 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000398 	.word	0x20000398
 8001c60:	40014800 	.word	0x40014800

08001c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c68:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c6a:	4a15      	ldr	r2, [pc, #84]	@ (8001cc0 <MX_USART1_UART_Init+0x5c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_USART1_UART_Init+0x58>)
 8001ca8:	f003 fad4 	bl	8005254 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cb2:	f000 fc63 	bl	800257c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200003e4 	.word	0x200003e4
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	@ 0x40
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cda:	4baf      	ldr	r3, [pc, #700]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4aae      	ldr	r2, [pc, #696]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4bac      	ldr	r3, [pc, #688]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf2:	4ba9      	ldr	r3, [pc, #676]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4aa8      	ldr	r2, [pc, #672]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4ba3      	ldr	r3, [pc, #652]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4aa2      	ldr	r2, [pc, #648]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4ba0      	ldr	r3, [pc, #640]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	4b9d      	ldr	r3, [pc, #628]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a9c      	ldr	r2, [pc, #624]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b97      	ldr	r3, [pc, #604]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a96      	ldr	r2, [pc, #600]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b94      	ldr	r3, [pc, #592]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b91      	ldr	r3, [pc, #580]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a90      	ldr	r2, [pc, #576]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a8a      	ldr	r2, [pc, #552]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b88      	ldr	r3, [pc, #544]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d82:	4b85      	ldr	r3, [pc, #532]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a84      	ldr	r2, [pc, #528]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b82      	ldr	r3, [pc, #520]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001da0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b7c      	ldr	r3, [pc, #496]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001db2:	4b79      	ldr	r3, [pc, #484]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a78      	ldr	r2, [pc, #480]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001db8:	f043 0320 	orr.w	r3, r3, #32
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dca:	4b73      	ldr	r3, [pc, #460]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a72      	ldr	r2, [pc, #456]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b70      	ldr	r3, [pc, #448]	@ (8001f98 <MX_GPIO_Init+0x2d4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2110      	movs	r1, #16
 8001de6:	486d      	ldr	r0, [pc, #436]	@ (8001f9c <MX_GPIO_Init+0x2d8>)
 8001de8:	f001 fe6a 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2120      	movs	r1, #32
 8001df0:	486b      	ldr	r0, [pc, #428]	@ (8001fa0 <MX_GPIO_Init+0x2dc>)
 8001df2:	f001 fe65 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	210d      	movs	r1, #13
 8001dfa:	486a      	ldr	r0, [pc, #424]	@ (8001fa4 <MX_GPIO_Init+0x2e0>)
 8001dfc:	f001 fe60 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2108      	movs	r1, #8
 8001e04:	4868      	ldr	r0, [pc, #416]	@ (8001fa8 <MX_GPIO_Init+0x2e4>)
 8001e06:	f001 fe5b 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e10:	4864      	ldr	r0, [pc, #400]	@ (8001fa4 <MX_GPIO_Init+0x2e0>)
 8001e12:	f001 fe55 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001e1c:	4863      	ldr	r0, [pc, #396]	@ (8001fac <MX_GPIO_Init+0x2e8>)
 8001e1e:	f001 fe4f 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	@ 0x40
 8001e26:	4862      	ldr	r0, [pc, #392]	@ (8001fb0 <MX_GPIO_Init+0x2ec>)
 8001e28:	f001 fe4a 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	21c8      	movs	r1, #200	@ 0xc8
 8001e30:	4860      	ldr	r0, [pc, #384]	@ (8001fb4 <MX_GPIO_Init+0x2f0>)
 8001e32:	f001 fe45 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e36:	2310      	movs	r3, #16
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e46:	230e      	movs	r3, #14
 8001e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4859      	ldr	r0, [pc, #356]	@ (8001fb8 <MX_GPIO_Init+0x2f4>)
 8001e52:	f001 fc71 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e56:	2308      	movs	r3, #8
 8001e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4853      	ldr	r0, [pc, #332]	@ (8001fb8 <MX_GPIO_Init+0x2f4>)
 8001e6a:	f001 fc65 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e7e:	2309      	movs	r3, #9
 8001e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e86:	4619      	mov	r1, r3
 8001e88:	484b      	ldr	r0, [pc, #300]	@ (8001fb8 <MX_GPIO_Init+0x2f4>)
 8001e8a:	f001 fc55 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e8e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea0:	230b      	movs	r3, #11
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4842      	ldr	r0, [pc, #264]	@ (8001fb4 <MX_GPIO_Init+0x2f0>)
 8001eac:	f001 fc44 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001eb0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	483a      	ldr	r0, [pc, #232]	@ (8001fb8 <MX_GPIO_Init+0x2f4>)
 8001ece:	f001 fc33 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ed2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eec:	4619      	mov	r1, r3
 8001eee:	482b      	ldr	r0, [pc, #172]	@ (8001f9c <MX_GPIO_Init+0x2d8>)
 8001ef0:	f001 fc22 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001efc:	2302      	movs	r3, #2
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <MX_GPIO_Init+0x2d8>)
 8001f0c:	f001 fc14 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f20:	2308      	movs	r3, #8
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481d      	ldr	r0, [pc, #116]	@ (8001fa0 <MX_GPIO_Init+0x2dc>)
 8001f2c:	f001 fc04 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001f30:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f42:	230c      	movs	r3, #12
 8001f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4818      	ldr	r0, [pc, #96]	@ (8001fb0 <MX_GPIO_Init+0x2ec>)
 8001f4e:	f001 fbf3 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f64:	2301      	movs	r3, #1
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4813      	ldr	r0, [pc, #76]	@ (8001fbc <MX_GPIO_Init+0x2f8>)
 8001f70:	f001 fbe2 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001f74:	2360      	movs	r3, #96	@ 0x60
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f84:	230d      	movs	r3, #13
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480a      	ldr	r0, [pc, #40]	@ (8001fb8 <MX_GPIO_Init+0x2f4>)
 8001f90:	f001 fbd2 	bl	8003738 <HAL_GPIO_Init>
 8001f94:	e014      	b.n	8001fc0 <MX_GPIO_Init+0x2fc>
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40022800 	.word	0x40022800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001fc0:	2340      	movs	r3, #64	@ 0x40
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	48bc      	ldr	r0, [pc, #752]	@ (80022cc <MX_GPIO_Init+0x608>)
 8001fdc:	f001 fbac 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001fe0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	48b4      	ldr	r0, [pc, #720]	@ (80022d0 <MX_GPIO_Init+0x60c>)
 8001ffe:	f001 fb9b 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002002:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002014:	230e      	movs	r3, #14
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201c:	4619      	mov	r1, r3
 800201e:	48ad      	ldr	r0, [pc, #692]	@ (80022d4 <MX_GPIO_Init+0x610>)
 8002020:	f001 fb8a 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002036:	4619      	mov	r1, r3
 8002038:	48a6      	ldr	r0, [pc, #664]	@ (80022d4 <MX_GPIO_Init+0x610>)
 800203a:	f001 fb7d 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800203e:	2340      	movs	r3, #64	@ 0x40
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002042:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	48a1      	ldr	r0, [pc, #644]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002054:	f001 fb70 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002058:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800206a:	230c      	movs	r3, #12
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4898      	ldr	r0, [pc, #608]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002076:	f001 fb5f 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800207a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800208c:	230a      	movs	r3, #10
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002094:	4619      	mov	r1, r3
 8002096:	4891      	ldr	r0, [pc, #580]	@ (80022dc <MX_GPIO_Init+0x618>)
 8002098:	f001 fb4e 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800209c:	23f0      	movs	r3, #240	@ 0xf0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020ac:	230a      	movs	r3, #10
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	488a      	ldr	r0, [pc, #552]	@ (80022e0 <MX_GPIO_Init+0x61c>)
 80020b8:	f001 fb3e 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020bc:	23f7      	movs	r3, #247	@ 0xf7
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020cc:	230e      	movs	r3, #14
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d4:	4619      	mov	r1, r3
 80020d6:	4883      	ldr	r0, [pc, #524]	@ (80022e4 <MX_GPIO_Init+0x620>)
 80020d8:	f001 fb2e 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020ee:	2309      	movs	r3, #9
 80020f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f6:	4619      	mov	r1, r3
 80020f8:	4875      	ldr	r0, [pc, #468]	@ (80022d0 <MX_GPIO_Init+0x60c>)
 80020fa:	f001 fb1d 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002110:	230a      	movs	r3, #10
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002118:	4619      	mov	r1, r3
 800211a:	486d      	ldr	r0, [pc, #436]	@ (80022d0 <MX_GPIO_Init+0x60c>)
 800211c:	f001 fb0c 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002120:	2320      	movs	r3, #32
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002134:	4619      	mov	r1, r3
 8002136:	4868      	ldr	r0, [pc, #416]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002138:	f001 fafe 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800213c:	2308      	movs	r3, #8
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800214c:	230d      	movs	r3, #13
 800214e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002154:	4619      	mov	r1, r3
 8002156:	4860      	ldr	r0, [pc, #384]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002158:	f001 faee 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 800215c:	230d      	movs	r3, #13
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002164:	2302      	movs	r3, #2
 8002166:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800216c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002170:	4619      	mov	r1, r3
 8002172:	485b      	ldr	r0, [pc, #364]	@ (80022e0 <MX_GPIO_Init+0x61c>)
 8002174:	f001 fae0 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217e:	2300      	movs	r3, #0
 8002180:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800218a:	4619      	mov	r1, r3
 800218c:	4856      	ldr	r0, [pc, #344]	@ (80022e8 <MX_GPIO_Init+0x624>)
 800218e:	f001 fad3 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002192:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a4:	230c      	movs	r3, #12
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ac:	4619      	mov	r1, r3
 80021ae:	484f      	ldr	r0, [pc, #316]	@ (80022ec <MX_GPIO_Init+0x628>)
 80021b0:	f001 fac2 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80021b4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c6:	230e      	movs	r3, #14
 80021c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ce:	4619      	mov	r1, r3
 80021d0:	4843      	ldr	r0, [pc, #268]	@ (80022e0 <MX_GPIO_Init+0x61c>)
 80021d2:	f001 fab1 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80021d6:	2308      	movs	r3, #8
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ea:	4619      	mov	r1, r3
 80021ec:	483d      	ldr	r0, [pc, #244]	@ (80022e4 <MX_GPIO_Init+0x620>)
 80021ee:	f001 faa3 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002204:	230d      	movs	r3, #13
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	4830      	ldr	r0, [pc, #192]	@ (80022d0 <MX_GPIO_Init+0x60c>)
 8002210:	f001 fa92 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002214:	2310      	movs	r3, #16
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002224:	4619      	mov	r1, r3
 8002226:	482c      	ldr	r0, [pc, #176]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002228:	f001 fa86 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800223c:	230c      	movs	r3, #12
 800223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002244:	4619      	mov	r1, r3
 8002246:	4824      	ldr	r0, [pc, #144]	@ (80022d8 <MX_GPIO_Init+0x614>)
 8002248:	f001 fa76 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800224c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800225a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800225e:	4619      	mov	r1, r3
 8002260:	4823      	ldr	r0, [pc, #140]	@ (80022f0 <MX_GPIO_Init+0x62c>)
 8002262:	f001 fa69 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002266:	2302      	movs	r3, #2
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002276:	2305      	movs	r3, #5
 8002278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800227e:	4619      	mov	r1, r3
 8002280:	4817      	ldr	r0, [pc, #92]	@ (80022e0 <MX_GPIO_Init+0x61c>)
 8002282:	f001 fa59 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800229c:	4619      	mov	r1, r3
 800229e:	4810      	ldr	r0, [pc, #64]	@ (80022e0 <MX_GPIO_Init+0x61c>)
 80022a0:	f001 fa4a 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80022a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <MX_GPIO_Init+0x62c>)
 80022be:	f001 fa3b 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80022c2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e013      	b.n	80022f4 <MX_GPIO_Init+0x630>
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40022400 	.word	0x40022400
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40022800 	.word	0x40022800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40021c00 	.word	0x40021c00
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022fe:	230d      	movs	r3, #13
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002306:	4619      	mov	r1, r3
 8002308:	4895      	ldr	r0, [pc, #596]	@ (8002560 <MX_GPIO_Init+0x89c>)
 800230a:	f001 fa15 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 800230e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002318:	2302      	movs	r3, #2
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4890      	ldr	r0, [pc, #576]	@ (8002564 <MX_GPIO_Init+0x8a0>)
 8002324:	f001 fa08 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800233a:	2301      	movs	r3, #1
 800233c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002342:	4619      	mov	r1, r3
 8002344:	4888      	ldr	r0, [pc, #544]	@ (8002568 <MX_GPIO_Init+0x8a4>)
 8002346:	f001 f9f7 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800234a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002350:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002354:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	4880      	ldr	r0, [pc, #512]	@ (8002564 <MX_GPIO_Init+0x8a0>)
 8002362:	f001 f9e9 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002376:	2308      	movs	r3, #8
 8002378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800237e:	4619      	mov	r1, r3
 8002380:	487a      	ldr	r0, [pc, #488]	@ (800256c <MX_GPIO_Init+0x8a8>)
 8002382:	f001 f9d9 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002386:	2340      	movs	r3, #64	@ 0x40
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800238e:	2302      	movs	r3, #2
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	4873      	ldr	r0, [pc, #460]	@ (800256c <MX_GPIO_Init+0x8a8>)
 800239e:	f001 f9cb 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80023a2:	2328      	movs	r3, #40	@ 0x28
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023b2:	230c      	movs	r3, #12
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ba:	4619      	mov	r1, r3
 80023bc:	4868      	ldr	r0, [pc, #416]	@ (8002560 <MX_GPIO_Init+0x89c>)
 80023be:	f001 f9bb 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 80023c2:	23c0      	movs	r3, #192	@ 0xc0
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c6:	2301      	movs	r3, #1
 80023c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ca:	2302      	movs	r3, #2
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d6:	4619      	mov	r1, r3
 80023d8:	4865      	ldr	r0, [pc, #404]	@ (8002570 <MX_GPIO_Init+0x8ac>)
 80023da:	f001 f9ad 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80023de:	2308      	movs	r3, #8
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ee:	230c      	movs	r3, #12
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f6:	4619      	mov	r1, r3
 80023f8:	485c      	ldr	r0, [pc, #368]	@ (800256c <MX_GPIO_Init+0x8a8>)
 80023fa:	f001 f99d 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023fe:	2332      	movs	r3, #50	@ 0x32
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800240e:	230b      	movs	r3, #11
 8002410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002416:	4619      	mov	r1, r3
 8002418:	4854      	ldr	r0, [pc, #336]	@ (800256c <MX_GPIO_Init+0x8a8>)
 800241a:	f001 f98d 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800241e:	2304      	movs	r3, #4
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800242e:	2309      	movs	r3, #9
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002436:	4619      	mov	r1, r3
 8002438:	484e      	ldr	r0, [pc, #312]	@ (8002574 <MX_GPIO_Init+0x8b0>)
 800243a:	f001 f97d 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800243e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002450:	2309      	movs	r3, #9
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002458:	4619      	mov	r1, r3
 800245a:	4847      	ldr	r0, [pc, #284]	@ (8002578 <MX_GPIO_Init+0x8b4>)
 800245c:	f001 f96c 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002460:	2308      	movs	r3, #8
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002474:	4619      	mov	r1, r3
 8002476:	483e      	ldr	r0, [pc, #248]	@ (8002570 <MX_GPIO_Init+0x8ac>)
 8002478:	f001 f95e 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800247c:	2304      	movs	r3, #4
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	4838      	ldr	r0, [pc, #224]	@ (8002570 <MX_GPIO_Init+0x8ac>)
 8002490:	f001 f952 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002494:	2386      	movs	r3, #134	@ 0x86
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a4:	230b      	movs	r3, #11
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	482e      	ldr	r0, [pc, #184]	@ (8002568 <MX_GPIO_Init+0x8a4>)
 80024b0:	f001 f942 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80024b4:	2350      	movs	r3, #80	@ 0x50
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024c4:	230d      	movs	r3, #13
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4826      	ldr	r0, [pc, #152]	@ (8002568 <MX_GPIO_Init+0x8a4>)
 80024d0:	f001 f932 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024d4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024da:	2312      	movs	r3, #18
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024de:	2301      	movs	r3, #1
 80024e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024e6:	2304      	movs	r3, #4
 80024e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ee:	4619      	mov	r1, r3
 80024f0:	481b      	ldr	r0, [pc, #108]	@ (8002560 <MX_GPIO_Init+0x89c>)
 80024f2:	f001 f921 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80024f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002508:	230a      	movs	r3, #10
 800250a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002510:	4619      	mov	r1, r3
 8002512:	4818      	ldr	r0, [pc, #96]	@ (8002574 <MX_GPIO_Init+0x8b0>)
 8002514:	f001 f910 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8002518:	2340      	movs	r3, #64	@ 0x40
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	2301      	movs	r3, #1
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002520:	2302      	movs	r3, #2
 8002522:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	480c      	ldr	r0, [pc, #48]	@ (8002560 <MX_GPIO_Init+0x89c>)
 8002530:	f001 f902 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002534:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002546:	2305      	movs	r3, #5
 8002548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4808      	ldr	r0, [pc, #32]	@ (8002574 <MX_GPIO_Init+0x8b0>)
 8002552:	f001 f8f1 	bl	8003738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002556:	bf00      	nop
 8002558:	3740      	adds	r7, #64	@ 0x40
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40022000 	.word	0x40022000
 8002568:	40020000 	.word	0x40020000
 800256c:	40020800 	.word	0x40020800
 8002570:	40021800 	.word	0x40021800
 8002574:	40020400 	.word	0x40020400
 8002578:	40020c00 	.word	0x40020c00

0800257c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002580:	b672      	cpsid	i
}
 8002582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <Error_Handler+0x8>

08002588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_MspInit+0x4c>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	@ 0x40
 800259a:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	210f      	movs	r1, #15
 80025c2:	f06f 0001 	mvn.w	r0, #1
 80025c6:	f000 ff96 	bl	80034f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a21      	ldr	r2, [pc, #132]	@ (800267c <HAL_ADC_MspInit+0xa4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d13c      	bne.n	8002674 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025fa:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a20      	ldr	r2, [pc, #128]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002618:	f043 0320 	orr.w	r3, r3, #32
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_ADC_MspInit+0xa8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002642:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002646:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002648:	2303      	movs	r3, #3
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	480b      	ldr	r0, [pc, #44]	@ (8002684 <HAL_ADC_MspInit+0xac>)
 8002658:	f001 f86e 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002660:	2303      	movs	r3, #3
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4806      	ldr	r0, [pc, #24]	@ (8002688 <HAL_ADC_MspInit+0xb0>)
 8002670:	f001 f862 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012200 	.word	0x40012200
 8002680:	40023800 	.word	0x40023800
 8002684:	40021400 	.word	0x40021400
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_CRC_MspInit+0x38>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10b      	bne.n	80026b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_CRC_MspInit+0x3c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <HAL_CRC_MspInit+0x3c>)
 80026a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_CRC_MspInit+0x3c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023000 	.word	0x40023000
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_TIM_Base_MspInit+0x44>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026de:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	201a      	movs	r0, #26
 80026fc:	f000 fefb 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002700:	201a      	movs	r0, #26
 8002702:	f000 ff14 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40014800 	.word	0x40014800
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0ac      	sub	sp, #176	@ 0xb0
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	2284      	movs	r2, #132	@ 0x84
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f004 f9f0 	bl	8006b1e <memset>
  if(huart->Instance==USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a32      	ldr	r2, [pc, #200]	@ (800280c <HAL_UART_MspInit+0xf4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d15c      	bne.n	8002802 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002748:	2340      	movs	r3, #64	@ 0x40
 800274a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800274c:	2300      	movs	r3, #0
 800274e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4618      	mov	r0, r3
 8002756:	f001 feb7 	bl	80044c8 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002760:	f7ff ff0c 	bl	800257c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 800276a:	f043 0310 	orr.w	r3, r3, #16
 800276e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	6313      	str	r3, [r2, #48]	@ 0x30
 8002788:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_UART_MspInit+0xf8>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c4:	2307      	movs	r3, #7
 80027c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ce:	4619      	mov	r1, r3
 80027d0:	4810      	ldr	r0, [pc, #64]	@ (8002814 <HAL_UART_MspInit+0xfc>)
 80027d2:	f000 ffb1 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f0:	2307      	movs	r3, #7
 80027f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027fa:	4619      	mov	r1, r3
 80027fc:	4806      	ldr	r0, [pc, #24]	@ (8002818 <HAL_UART_MspInit+0x100>)
 80027fe:	f000 ff9b 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	37b0      	adds	r7, #176	@ 0xb0
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40011000 	.word	0x40011000
 8002810:	40023800 	.word	0x40023800
 8002814:	40020400 	.word	0x40020400
 8002818:	40020000 	.word	0x40020000

0800281c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <NMI_Handler+0x4>

08002824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <MemManage_Handler+0x4>

08002834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <BusFault_Handler+0x4>

0800283c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <UsageFault_Handler+0x4>

08002844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002872:	f000 f94b 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002882:	f002 fae1 	bl	8004e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000398 	.word	0x20000398

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_kill>:

int _kill(int pid, int sig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028aa:	f004 f98b 	bl	8006bc4 <__errno>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2216      	movs	r2, #22
 80028b2:	601a      	str	r2, [r3, #0]
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_exit>:

void _exit (int status)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ffe7 	bl	80028a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d2:	bf00      	nop
 80028d4:	e7fd      	b.n	80028d2 <_exit+0x12>

080028d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e00a      	b.n	80028fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e8:	f3af 8000 	nop.w
 80028ec:	4601      	mov	r1, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	60ba      	str	r2, [r7, #8]
 80028f4:	b2ca      	uxtb	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf0      	blt.n	80028e8 <_read+0x12>
  }

  return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e009      	b.n	8002936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	60ba      	str	r2, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	dbf1      	blt.n	8002922 <_write+0x12>
  }
  return len;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_close>:

int _close(int file)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002970:	605a      	str	r2, [r3, #4]
  return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_isatty>:

int _isatty(int file)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f004 f8f0 	bl	8006bc4 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20050000 	.word	0x20050000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	2000046c 	.word	0x2000046c
 8002a18:	200005c0 	.word	0x200005c0

08002a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <SystemInit+0x20>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <SystemInit+0x20>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a44:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a46:	490e      	ldr	r1, [pc, #56]	@ (8002a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a48:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8002a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6a:	f7ff ffd7 	bl	8002a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f004 f8af 	bl	8006bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe ffd3 	bl	8001a1c <main>
  bx  lr    
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8002a84:	0800a748 	.word	0x0800a748
  ldr r2, =_sbss
 8002a88:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8002a8c:	200005c0 	.word	0x200005c0

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>

08002a92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a96:	2003      	movs	r0, #3
 8002a98:	f000 fd22 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 f805 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa2:	f7ff fd71 	bl	8002588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <HAL_InitTick+0x54>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_InitTick+0x58>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd3d 	bl	800354a <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f000 fd05 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <HAL_InitTick+0x5c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200000e8 	.word	0x200000e8
 8002b04:	200000f0 	.word	0x200000f0
 8002b08:	200000ec 	.word	0x200000ec

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	200000f0 	.word	0x200000f0
 8002b30:	20000470 	.word	0x20000470

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000470 	.word	0x20000470

08002b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e031      	b.n	8002bc6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fd34 	bl	80025d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_ADC_Init+0x84>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fad6 	bl	800314c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bb6:	e001      	b.n	8002bbc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	ffffeefd 	.word	0xffffeefd

08002bd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_Start+0x1a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0ad      	b.n	8002d4a <HAL_ADC_Start+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d018      	beq.n	8002c36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c14:	4b50      	ldr	r3, [pc, #320]	@ (8002d58 <HAL_ADC_Start+0x184>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a50      	ldr	r2, [pc, #320]	@ (8002d5c <HAL_ADC_Start+0x188>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0c9a      	lsrs	r2, r3, #18
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d175      	bne.n	8002d30 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c48:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <HAL_ADC_Start+0x18c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7e:	d106      	bne.n	8002c8e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	f023 0206 	bic.w	r2, r3, #6
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <HAL_ADC_Start+0x190>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d143      	bne.n	8002d48 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e03a      	b.n	8002d48 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a24      	ldr	r2, [pc, #144]	@ (8002d68 <HAL_ADC_Start+0x194>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10e      	bne.n	8002cfa <HAL_ADC_Start+0x126>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cf8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <HAL_ADC_Start+0x190>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d120      	bne.n	8002d48 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <HAL_ADC_Start+0x198>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d11b      	bne.n	8002d48 <HAL_ADC_Start+0x174>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	e00b      	b.n	8002d48 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200000e8 	.word	0x200000e8
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	fffff8fe 	.word	0xfffff8fe
 8002d64:	40012300 	.word	0x40012300
 8002d68:	40012000 	.word	0x40012000
 8002d6c:	40012200 	.word	0x40012200

08002d70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8c:	d113      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9c:	d10b      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e063      	b.n	8002e7e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002db6:	f7ff febd 	bl	8002b34 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dbc:	e021      	b.n	8002e02 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d01d      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_ADC_PollForConversion+0x6c>
 8002dcc:	f7ff feb2 	bl	8002b34 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d212      	bcs.n	8002e02 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d00b      	beq.n	8002e02 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e03d      	b.n	8002e7e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d1d6      	bne.n	8002dbe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0212 	mvn.w	r2, #18
 8002e18:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d123      	bne.n	8002e7c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11f      	bne.n	8002e7c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d111      	bne.n	8002e7c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e136      	b.n	800312a <HAL_ADC_ConfigChannel+0x28a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d93a      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0xa2>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed4:	d035      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b1e      	subs	r3, #30
 8002eec:	2207      	movs	r2, #7
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	400a      	ands	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a8d      	ldr	r2, [pc, #564]	@ (8003138 <HAL_ADC_ConfigChannel+0x298>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	061a      	lsls	r2, r3, #24
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1a:	e035      	b.n	8002f88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4403      	add	r3, r0
 8002f34:	3b1e      	subs	r3, #30
 8002f36:	409a      	lsls	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f40:	e022      	b.n	8002f88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6919      	ldr	r1, [r3, #16]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4403      	add	r3, r0
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d824      	bhi.n	8002fda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b05      	subs	r3, #5
 8002fa2:	221f      	movs	r2, #31
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	400a      	ands	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b05      	subs	r3, #5
 8002fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fd8:	e04c      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d824      	bhi.n	800302c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b23      	subs	r3, #35	@ 0x23
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b23      	subs	r3, #35	@ 0x23
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30
 800302a:	e023      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b41      	subs	r3, #65	@ 0x41
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b41      	subs	r3, #65	@ 0x41
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a30      	ldr	r2, [pc, #192]	@ (800313c <HAL_ADC_ConfigChannel+0x29c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x1f4>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003088:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 800308e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003092:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a28      	ldr	r2, [pc, #160]	@ (800313c <HAL_ADC_ConfigChannel+0x29c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10f      	bne.n	80030be <HAL_ADC_ConfigChannel+0x21e>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d10b      	bne.n	80030be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030a6:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a25      	ldr	r2, [pc, #148]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030b2:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1e      	ldr	r2, [pc, #120]	@ (800313c <HAL_ADC_ConfigChannel+0x29c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d12b      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_ADC_ConfigChannel+0x298>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <HAL_ADC_ConfigChannel+0x23a>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d122      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030da:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80030e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030e6:	4b16      	ldr	r3, [pc, #88]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <HAL_ADC_ConfigChannel+0x298>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a11      	ldr	r2, [pc, #68]	@ (8003148 <HAL_ADC_ConfigChannel+0x2a8>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9a      	lsrs	r2, r3, #18
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003112:	e002      	b.n	800311a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3b01      	subs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	10000012 	.word	0x10000012
 800313c:	40012000 	.word	0x40012000
 8003140:	40012300 	.word	0x40012300
 8003144:	200000e8 	.word	0x200000e8
 8003148:	431bde83 	.word	0x431bde83

0800314c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003154:	4b78      	ldr	r3, [pc, #480]	@ (8003338 <ADC_Init+0x1ec>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a77      	ldr	r2, [pc, #476]	@ (8003338 <ADC_Init+0x1ec>)
 800315a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800315e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003160:	4b75      	ldr	r3, [pc, #468]	@ (8003338 <ADC_Init+0x1ec>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4973      	ldr	r1, [pc, #460]	@ (8003338 <ADC_Init+0x1ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800317c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	4a58      	ldr	r2, [pc, #352]	@ (800333c <ADC_Init+0x1f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e00f      	b.n	8003246 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003244:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0202 	bic.w	r2, r2, #2
 8003254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	005a      	lsls	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003292:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	3b01      	subs	r3, #1
 80032a0:	035a      	lsls	r2, r3, #13
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	e007      	b.n	80032bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	051a      	lsls	r2, r3, #20
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032fe:	025a      	lsls	r2, r3, #9
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	029a      	lsls	r2, r3, #10
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40012300 	.word	0x40012300
 800333c:	0f000001 	.word	0x0f000001

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	05fa0000 	.word	0x05fa0000

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	@ (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	@ (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	@ (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	@ 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	@ 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	@ (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f7ff ff8e 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff29 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff3e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff8e 	bl	8003434 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff31 	bl	80033a4 <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e054      	b.n	8003620 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7f5b      	ldrb	r3, [r3, #29]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff f880 	bl	800268c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	791b      	ldrb	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <HAL_CRC_Init+0xc4>)
 80035a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0218 	bic.w	r2, r2, #24
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e00c      	b.n	80035ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	461a      	mov	r2, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f834 	bl	800362c <HAL_CRCEx_Polynomial_Set>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e028      	b.n	8003620 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	795b      	ldrb	r3, [r3, #5]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f04f 32ff 	mov.w	r2, #4294967295
 80035de:	611a      	str	r2, [r3, #16]
 80035e0:	e004      	b.n	80035ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6912      	ldr	r2, [r2, #16]
 80035ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	04c11db7 	.word	0x04c11db7

0800362c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800363c:	231f      	movs	r3, #31
 800363e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003640:	bf00      	nop
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	613a      	str	r2, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <HAL_CRCEx_Polynomial_Set+0x34>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b18      	cmp	r3, #24
 8003664:	d846      	bhi.n	80036f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036fb 	.word	0x080036fb
 8003670:	080036f5 	.word	0x080036f5
 8003674:	080036f5 	.word	0x080036f5
 8003678:	080036f5 	.word	0x080036f5
 800367c:	080036f5 	.word	0x080036f5
 8003680:	080036f5 	.word	0x080036f5
 8003684:	080036f5 	.word	0x080036f5
 8003688:	080036f5 	.word	0x080036f5
 800368c:	080036e9 	.word	0x080036e9
 8003690:	080036f5 	.word	0x080036f5
 8003694:	080036f5 	.word	0x080036f5
 8003698:	080036f5 	.word	0x080036f5
 800369c:	080036f5 	.word	0x080036f5
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	080036f5 	.word	0x080036f5
 80036a8:	080036f5 	.word	0x080036f5
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036f5 	.word	0x080036f5
 80036b4:	080036f5 	.word	0x080036f5
 80036b8:	080036f5 	.word	0x080036f5
 80036bc:	080036f5 	.word	0x080036f5
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080036f5 	.word	0x080036f5
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	080036d1 	.word	0x080036d1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d913      	bls.n	80036fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036da:	e010      	b.n	80036fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b07      	cmp	r3, #7
 80036e0:	d90f      	bls.n	8003702 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036e6:	e00c      	b.n	8003702 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d90b      	bls.n	8003706 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036f2:	e008      	b.n	8003706 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
      break;
 80036f8:	e006      	b.n	8003708 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036fa:	bf00      	nop
 80036fc:	e004      	b.n	8003708 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003706:	bf00      	nop
  }
  if (status == HAL_OK)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 0118 	bic.w	r1, r3, #24
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800372a:	7dfb      	ldrb	r3, [r7, #23]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	@ 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e175      	b.n	8003a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003758:	2201      	movs	r2, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	429a      	cmp	r2, r3
 8003772:	f040 8164 	bne.w	8003a3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d005      	beq.n	800378e <HAL_GPIO_Init+0x56>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d130      	bne.n	80037f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2203      	movs	r2, #3
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c4:	2201      	movs	r2, #1
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 0201 	and.w	r2, r3, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d017      	beq.n	800382c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d123      	bne.n	8003880 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	08da      	lsrs	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3208      	adds	r2, #8
 800387a:	69b9      	ldr	r1, [r7, #24]
 800387c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0203 	and.w	r2, r3, #3
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80be 	beq.w	8003a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c2:	4b66      	ldr	r3, [pc, #408]	@ (8003a5c <HAL_GPIO_Init+0x324>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	4a65      	ldr	r2, [pc, #404]	@ (8003a5c <HAL_GPIO_Init+0x324>)
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ce:	4b63      	ldr	r3, [pc, #396]	@ (8003a5c <HAL_GPIO_Init+0x324>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038da:	4a61      	ldr	r2, [pc, #388]	@ (8003a60 <HAL_GPIO_Init+0x328>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a58      	ldr	r2, [pc, #352]	@ (8003a64 <HAL_GPIO_Init+0x32c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d037      	beq.n	8003976 <HAL_GPIO_Init+0x23e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a57      	ldr	r2, [pc, #348]	@ (8003a68 <HAL_GPIO_Init+0x330>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_GPIO_Init+0x23a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a56      	ldr	r2, [pc, #344]	@ (8003a6c <HAL_GPIO_Init+0x334>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <HAL_GPIO_Init+0x236>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a55      	ldr	r2, [pc, #340]	@ (8003a70 <HAL_GPIO_Init+0x338>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x232>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a54      	ldr	r2, [pc, #336]	@ (8003a74 <HAL_GPIO_Init+0x33c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x22e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a53      	ldr	r2, [pc, #332]	@ (8003a78 <HAL_GPIO_Init+0x340>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x22a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_GPIO_Init+0x344>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x226>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a51      	ldr	r2, [pc, #324]	@ (8003a80 <HAL_GPIO_Init+0x348>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x222>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a50      	ldr	r2, [pc, #320]	@ (8003a84 <HAL_GPIO_Init+0x34c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x21e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4f      	ldr	r2, [pc, #316]	@ (8003a88 <HAL_GPIO_Init+0x350>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x21a>
 800394e:	2309      	movs	r3, #9
 8003950:	e012      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003952:	230a      	movs	r3, #10
 8003954:	e010      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003956:	2308      	movs	r3, #8
 8003958:	e00e      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800395a:	2307      	movs	r3, #7
 800395c:	e00c      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800395e:	2306      	movs	r3, #6
 8003960:	e00a      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003962:	2305      	movs	r3, #5
 8003964:	e008      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003966:	2304      	movs	r3, #4
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800396a:	2303      	movs	r3, #3
 800396c:	e004      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800396e:	2302      	movs	r3, #2
 8003970:	e002      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003976:	2300      	movs	r3, #0
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	f002 0203 	and.w	r2, r2, #3
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	4093      	lsls	r3, r2
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003988:	4935      	ldr	r1, [pc, #212]	@ (8003a60 <HAL_GPIO_Init+0x328>)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003996:	4b3d      	ldr	r3, [pc, #244]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ba:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039c0:	4b32      	ldr	r3, [pc, #200]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e4:	4a29      	ldr	r2, [pc, #164]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ea:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a38:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <HAL_GPIO_Init+0x354>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3301      	adds	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	f67f ae86 	bls.w	8003758 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3724      	adds	r7, #36	@ 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40013800 	.word	0x40013800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40020400 	.word	0x40020400
 8003a6c:	40020800 	.word	0x40020800
 8003a70:	40020c00 	.word	0x40020c00
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40021400 	.word	0x40021400
 8003a7c:	40021800 	.word	0x40021800
 8003a80:	40021c00 	.word	0x40021c00
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40022400 	.word	0x40022400
 8003a8c:	40013c00 	.word	0x40013c00

08003a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e001      	b.n	8003ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
 8003acc:	4613      	mov	r3, r2
 8003ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad0:	787b      	ldrb	r3, [r7, #1]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003adc:	e003      	b.n	8003ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	041a      	lsls	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40007000 	.word	0x40007000

08003b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	4b23      	ldr	r3, [pc, #140]	@ (8003bac <HAL_PWREx_EnableOverDrive+0x98>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	4a22      	ldr	r2, [pc, #136]	@ (8003bac <HAL_PWREx_EnableOverDrive+0x98>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_PWREx_EnableOverDrive+0x98>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b42:	f7fe fff7 	bl	8002b34 <HAL_GetTick>
 8003b46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b48:	e009      	b.n	8003b5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b4a:	f7fe fff3 	bl	8002b34 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b58:	d901      	bls.n	8003b5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e022      	b.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b5e:	4b14      	ldr	r3, [pc, #80]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6a:	d1ee      	bne.n	8003b4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0f      	ldr	r2, [pc, #60]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b78:	f7fe ffdc 	bl	8002b34 <HAL_GetTick>
 8003b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b7e:	e009      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b80:	f7fe ffd8 	bl	8002b34 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b8e:	d901      	bls.n	8003b94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e007      	b.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e291      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8087 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd8:	4b96      	ldr	r3, [pc, #600]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d00c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be4:	4b93      	ldr	r3, [pc, #588]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d112      	bne.n	8003c16 <HAL_RCC_OscConfig+0x62>
 8003bf0:	4b90      	ldr	r3, [pc, #576]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bfc:	d10b      	bne.n	8003c16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d06c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x130>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d168      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e26b      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7a>
 8003c20:	4b84      	ldr	r3, [pc, #528]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a83      	ldr	r2, [pc, #524]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e02e      	b.n	8003c8c <HAL_RCC_OscConfig+0xd8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x9c>
 8003c36:	4b7f      	ldr	r3, [pc, #508]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b7c      	ldr	r3, [pc, #496]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a7b      	ldr	r2, [pc, #492]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xd8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0xc0>
 8003c5a:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b73      	ldr	r3, [pc, #460]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a72      	ldr	r2, [pc, #456]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xd8>
 8003c74:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b6c      	ldr	r3, [pc, #432]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6b      	ldr	r2, [pc, #428]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe ff4e 	bl	8002b34 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fe ff4a 	bl	8002b34 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	@ 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e21f      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b61      	ldr	r3, [pc, #388]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xe8>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe ff3a 	bl	8002b34 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fe ff36 	bl	8002b34 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e20b      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b57      	ldr	r3, [pc, #348]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x110>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d069      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf2:	4b50      	ldr	r3, [pc, #320]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x190>
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1df      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	493d      	ldr	r1, [pc, #244]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e040      	b.n	8003dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d023      	beq.n	8003d94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b39      	ldr	r3, [pc, #228]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a38      	ldr	r2, [pc, #224]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe feec 	bl	8002b34 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d60:	f7fe fee8 	bl	8002b34 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e1bd      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4929      	ldr	r1, [pc, #164]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
 8003d92:	e018      	b.n	8003dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fec8 	bl	8002b34 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fe fec4 	bl	8002b34 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e199      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d038      	beq.n	8003e44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d019      	beq.n	8003e0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b16      	ldr	r3, [pc, #88]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dde:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe fea5 	bl	8002b34 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dee:	f7fe fea1 	bl	8002b34 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e176      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e00:	4b0c      	ldr	r3, [pc, #48]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x23a>
 8003e0c:	e01a      	b.n	8003e44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0e:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <HAL_RCC_OscConfig+0x280>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fe8b 	bl	8002b34 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe fe87 	bl	8002b34 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d903      	bls.n	8003e38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e15c      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
 8003e34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	4b91      	ldr	r3, [pc, #580]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ee      	bne.n	8003e22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a4 	beq.w	8003f9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b8b      	ldr	r3, [pc, #556]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	4a87      	ldr	r2, [pc, #540]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6a:	4b85      	ldr	r3, [pc, #532]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7a:	4b82      	ldr	r3, [pc, #520]	@ (8004084 <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d118      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e86:	4b7f      	ldr	r3, [pc, #508]	@ (8004084 <HAL_RCC_OscConfig+0x4d0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004084 <HAL_RCC_OscConfig+0x4d0>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e92:	f7fe fe4f 	bl	8002b34 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9a:	f7fe fe4b 	bl	8002b34 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b64      	cmp	r3, #100	@ 0x64
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e120      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eac:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d106      	bne.n	8003ece <HAL_RCC_OscConfig+0x31a>
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ecc:	e02d      	b.n	8003f2a <HAL_RCC_OscConfig+0x376>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x33c>
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	4a69      	ldr	r2, [pc, #420]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee2:	4b67      	ldr	r3, [pc, #412]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	4a66      	ldr	r2, [pc, #408]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eee:	e01c      	b.n	8003f2a <HAL_RCC_OscConfig+0x376>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_OscConfig+0x35e>
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	4a60      	ldr	r2, [pc, #384]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003efe:	f043 0304 	orr.w	r3, r3, #4
 8003f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f04:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f10:	e00b      	b.n	8003f2a <HAL_RCC_OscConfig+0x376>
 8003f12:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1e:	4b58      	ldr	r3, [pc, #352]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f22:	4a57      	ldr	r2, [pc, #348]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d015      	beq.n	8003f5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe fdff 	bl	8002b34 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fe fdfb 	bl	8002b34 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0ce      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ee      	beq.n	8003f3a <HAL_RCC_OscConfig+0x386>
 8003f5c:	e014      	b.n	8003f88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fde9 	bl	8002b34 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7fe fde5 	bl	8002b34 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e0b8      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ee      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	4a3b      	ldr	r2, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a4 	beq.w	80040ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa4:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d06b      	beq.n	8004088 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d149      	bne.n	800404c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	4b31      	ldr	r3, [pc, #196]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a30      	ldr	r2, [pc, #192]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fdb6 	bl	8002b34 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fdb2 	bl	8002b34 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e087      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	3b01      	subs	r3, #1
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	4313      	orrs	r3, r2
 8004010:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004016:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fd86 	bl	8002b34 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fe fd82 	bl	8002b34 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e057      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x478>
 800404a:	e04f      	b.n	80040ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0b      	ldr	r2, [pc, #44]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe fd6c 	bl	8002b34 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fd68 	bl	8002b34 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e03d      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x4ac>
 800407e:	e035      	b.n	80040ec <HAL_RCC_OscConfig+0x538>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <HAL_RCC_OscConfig+0x544>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d028      	beq.n	80040e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d121      	bne.n	80040e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d111      	bne.n	80040e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	3b01      	subs	r3, #1
 80040d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0d0      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b67      	ldr	r3, [pc, #412]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 020f 	bic.w	r2, r3, #15
 800412a:	4965      	ldr	r1, [pc, #404]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a58      	ldr	r2, [pc, #352]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a52      	ldr	r2, [pc, #328]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800417e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d040      	beq.n	8004220 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b41      	ldr	r3, [pc, #260]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e073      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4936      	ldr	r1, [pc, #216]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fe fca0 	bl	8002b34 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe fc9c 	bl	8002b34 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e053      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d210      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	4922      	ldr	r1, [pc, #136]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427a:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f821 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	@ (80042c8 <HAL_RCC_ClockConfig+0x1cc>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <HAL_RCC_ClockConfig+0x1d0>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1d4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fbfc 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800a2f4 	.word	0x0800a2f4
 80042cc:	200000e8 	.word	0x200000e8
 80042d0:	200000ec 	.word	0x200000ec

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b090      	sub	sp, #64	@ 0x40
 80042da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	2300      	movs	r3, #0
 80042e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e4:	2300      	movs	r3, #0
 80042e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ec:	4b59      	ldr	r3, [pc, #356]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00d      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x40>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f200 80a1 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x16c>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x3a>
 8004306:	e09b      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x184>)
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800430c:	e09b      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430e:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 8004310:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004312:	e098      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b4f      	ldr	r3, [pc, #316]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800431e:	4b4d      	ldr	r3, [pc, #308]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	2200      	movs	r2, #0
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	627a      	str	r2, [r7, #36]	@ 0x24
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800433c:	2100      	movs	r1, #0
 800433e:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 8004340:	fb03 f201 	mul.w	r2, r3, r1
 8004344:	2300      	movs	r3, #0
 8004346:	fb00 f303 	mul.w	r3, r0, r3
 800434a:	4413      	add	r3, r2
 800434c:	4a43      	ldr	r2, [pc, #268]	@ (800445c <HAL_RCC_GetSysClockFreq+0x188>)
 800434e:	fba0 1202 	umull	r1, r2, r0, r2
 8004352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004354:	460a      	mov	r2, r1
 8004356:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435a:	4413      	add	r3, r2
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	2200      	movs	r2, #0
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800436e:	f7fc fcab 	bl	8000cc8 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4613      	mov	r3, r2
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800437a:	e053      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437c:	4b35      	ldr	r3, [pc, #212]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	2200      	movs	r2, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	617a      	str	r2, [r7, #20]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800438e:	f04f 0b00 	mov.w	fp, #0
 8004392:	4652      	mov	r2, sl
 8004394:	465b      	mov	r3, fp
 8004396:	f04f 0000 	mov.w	r0, #0
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	0159      	lsls	r1, r3, #5
 80043a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a4:	0150      	lsls	r0, r2, #5
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	ebb2 080a 	subs.w	r8, r2, sl
 80043ae:	eb63 090b 	sbc.w	r9, r3, fp
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043c6:	ebb2 0408 	subs.w	r4, r2, r8
 80043ca:	eb63 0509 	sbc.w	r5, r3, r9
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	00eb      	lsls	r3, r5, #3
 80043d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043dc:	00e2      	lsls	r2, r4, #3
 80043de:	4614      	mov	r4, r2
 80043e0:	461d      	mov	r5, r3
 80043e2:	eb14 030a 	adds.w	r3, r4, sl
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	eb45 030b 	adc.w	r3, r5, fp
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fa:	4629      	mov	r1, r5
 80043fc:	028b      	lsls	r3, r1, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004404:	4621      	mov	r1, r4
 8004406:	028a      	lsls	r2, r1, #10
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440e:	2200      	movs	r2, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	60fa      	str	r2, [r7, #12]
 8004414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004418:	f7fc fc56 	bl	8000cc8 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x184>)
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004448:	4618      	mov	r0, r3
 800444a:	3740      	adds	r7, #64	@ 0x40
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	017d7840 	.word	0x017d7840

08004460 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	200000e8 	.word	0x200000e8

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	@ (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	0800a304 	.word	0x0800a304

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffdc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0b5b      	lsrs	r3, r3, #13
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	@ (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	0800a304 	.word	0x0800a304

080044c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d012      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044f0:	4b69      	ldr	r3, [pc, #420]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a68      	ldr	r2, [pc, #416]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044fa:	6093      	str	r3, [r2, #8]
 80044fc:	4b66      	ldr	r3, [pc, #408]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004504:	4964      	ldr	r1, [pc, #400]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004522:	4b5d      	ldr	r3, [pc, #372]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004528:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	4959      	ldr	r1, [pc, #356]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d017      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800455e:	4b4e      	ldr	r3, [pc, #312]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004564:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	494a      	ldr	r1, [pc, #296]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800457e:	2301      	movs	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 808b 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	4a39      	ldr	r2, [pc, #228]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b8:	4b37      	ldr	r3, [pc, #220]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045c4:	4b35      	ldr	r3, [pc, #212]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a34      	ldr	r2, [pc, #208]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fe fab0 	bl	8002b34 <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fe faac 	bl	8002b34 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e357      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045ea:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045f6:	4b28      	ldr	r3, [pc, #160]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d035      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d02e      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004614:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800461c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461e:	4b1e      	ldr	r3, [pc, #120]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462a:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004636:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800463c:	4b16      	ldr	r3, [pc, #88]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d114      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe fa74 	bl	8002b34 <HAL_GetTick>
 800464c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	e00a      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fe fa70 	bl	8002b34 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e319      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	4b0c      	ldr	r3, [pc, #48]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ee      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800467e:	d111      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004680:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800468e:	400b      	ands	r3, r1
 8004690:	4901      	ldr	r1, [pc, #4]	@ (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
 8004696:	e00b      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004698:	40023800 	.word	0x40023800
 800469c:	40007000 	.word	0x40007000
 80046a0:	0ffffcff 	.word	0x0ffffcff
 80046a4:	4baa      	ldr	r3, [pc, #680]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4aa9      	ldr	r2, [pc, #676]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	4ba7      	ldr	r3, [pc, #668]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	49a4      	ldr	r1, [pc, #656]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d010      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ce:	4ba0      	ldr	r3, [pc, #640]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d4:	4a9e      	ldr	r2, [pc, #632]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046de:	4b9c      	ldr	r3, [pc, #624]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	4999      	ldr	r1, [pc, #612]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fc:	4b94      	ldr	r3, [pc, #592]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470a:	4991      	ldr	r1, [pc, #580]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800471e:	4b8c      	ldr	r3, [pc, #560]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472c:	4988      	ldr	r1, [pc, #544]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004740:	4b83      	ldr	r3, [pc, #524]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474e:	4980      	ldr	r1, [pc, #512]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004762:	4b7b      	ldr	r3, [pc, #492]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4977      	ldr	r1, [pc, #476]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004784:	4b72      	ldr	r3, [pc, #456]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	496f      	ldr	r1, [pc, #444]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ac:	f023 020c 	bic.w	r2, r3, #12
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b4:	4966      	ldr	r1, [pc, #408]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047c8:	4b61      	ldr	r3, [pc, #388]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d6:	495e      	ldr	r1, [pc, #376]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ea:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f8:	4955      	ldr	r1, [pc, #340]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800480c:	4b50      	ldr	r3, [pc, #320]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004812:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	494d      	ldr	r1, [pc, #308]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800482e:	4b48      	ldr	r3, [pc, #288]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	4944      	ldr	r1, [pc, #272]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004850:	4b3f      	ldr	r3, [pc, #252]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	493c      	ldr	r1, [pc, #240]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004872:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004880:	4933      	ldr	r1, [pc, #204]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004894:	4b2e      	ldr	r3, [pc, #184]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a2:	492b      	ldr	r1, [pc, #172]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d011      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048b6:	4b26      	ldr	r3, [pc, #152]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c4:	4922      	ldr	r1, [pc, #136]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f6:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004904:	4912      	ldr	r1, [pc, #72]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004918:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004928:	4909      	ldr	r1, [pc, #36]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d006      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80d9 	beq.w	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004944:	4b02      	ldr	r3, [pc, #8]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a01      	ldr	r2, [pc, #4]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800494e:	e001      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004950:	40023800 	.word	0x40023800
 8004954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004956:	f7fe f8ed 	bl	8002b34 <HAL_GetTick>
 800495a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800495e:	f7fe f8e9 	bl	8002b34 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b64      	cmp	r3, #100	@ 0x64
 800496a:	d901      	bls.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e194      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004970:	4b6c      	ldr	r3, [pc, #432]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498c:	2b00      	cmp	r3, #0
 800498e:	d11d      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004990:	4b64      	ldr	r3, [pc, #400]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800499e:	4b61      	ldr	r3, [pc, #388]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	0e1b      	lsrs	r3, r3, #24
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	019a      	lsls	r2, r3, #6
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	071b      	lsls	r3, r3, #28
 80049c4:	4957      	ldr	r1, [pc, #348]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02e      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f6:	d129      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a06:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	0f1b      	lsrs	r3, r3, #28
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	019a      	lsls	r2, r3, #6
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	071b      	lsls	r3, r3, #28
 8004a2c:	493d      	ldr	r1, [pc, #244]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a34:	4b3b      	ldr	r3, [pc, #236]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3a:	f023 021f 	bic.w	r2, r3, #31
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4937      	ldr	r1, [pc, #220]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a58:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5e:	0e1b      	lsrs	r3, r3, #24
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6c:	0f1b      	lsrs	r3, r3, #28
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4925      	ldr	r1, [pc, #148]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d011      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	019a      	lsls	r2, r3, #6
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	071b      	lsls	r3, r3, #28
 8004abc:	4919      	ldr	r1, [pc, #100]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad0:	f7fe f830 	bl	8002b34 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ad8:	f7fe f82c 	bl	8002b34 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b64      	cmp	r3, #100	@ 0x64
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0d7      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 80cd 	bne.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a08      	ldr	r2, [pc, #32]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0a:	f7fe f813 	bl	8002b34 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b12:	f7fe f80f 	bl	8002b34 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b64      	cmp	r3, #100	@ 0x64
 8004b1e:	d903      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0ba      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b28:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b34:	d0ed      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02e      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d12a      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	4944      	ldr	r1, [pc, #272]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	493d      	ldr	r1, [pc, #244]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc8:	d11d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bca:	4b36      	ldr	r3, [pc, #216]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	0e1b      	lsrs	r3, r3, #24
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	0f1b      	lsrs	r3, r3, #28
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	019a      	lsls	r2, r3, #6
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	4929      	ldr	r1, [pc, #164]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c20:	4b20      	ldr	r3, [pc, #128]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4917      	ldr	r1, [pc, #92]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	4911      	ldr	r1, [pc, #68]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd ff60 	bl	8002b34 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c78:	f7fd ff5c 	bl	8002b34 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e007      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c96:	d1ef      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800

08004ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e049      	b.n	8004d4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fcfc 	bl	80026cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 f9f6 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e054      	b.n	8004e1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d022      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xe0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e3c <HAL_TIM_Base_Start_IT+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_TIM_Base_Start_IT+0xe8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d115      	bne.n	8004e04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	4b19      	ldr	r3, [pc, #100]	@ (8004e44 <HAL_TIM_Base_Start_IT+0xec>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d015      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0xbe>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df0:	d011      	beq.n	8004e16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	e008      	b.n	8004e16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e000      	b.n	8004e18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40010400 	.word	0x40010400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40001800 	.word	0x40001800
 8004e44:	00010007 	.word	0x00010007

08004e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0202 	mvn.w	r2, #2
 8004e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f905 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8f7 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f908 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0204 	mvn.w	r2, #4
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8db 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8cd 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8de 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0208 	mvn.w	r2, #8
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2204      	movs	r2, #4
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8b1 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8a3 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8b4 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0210 	mvn.w	r2, #16
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2208      	movs	r2, #8
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f887 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f879 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f88a 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0201 	mvn.w	r2, #1
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fb72 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe4:	2b80      	cmp	r3, #128	@ 0x80
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f91a 	bl	800522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f90d 	bl	8005240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005030:	2b40      	cmp	r3, #64	@ 0x40
 8005032:	d10e      	bne.n	8005052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503e:	2b40      	cmp	r3, #64	@ 0x40
 8005040:	d107      	bne.n	8005052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f838 	bl	80050c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b20      	cmp	r3, #32
 800505e:	d10e      	bne.n	800507e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b20      	cmp	r3, #32
 800506c:	d107      	bne.n	800507e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0220 	mvn.w	r2, #32
 8005076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8cd 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a40      	ldr	r2, [pc, #256]	@ (80051ec <TIM_Base_SetConfig+0x114>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3d      	ldr	r2, [pc, #244]	@ (80051f0 <TIM_Base_SetConfig+0x118>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a3c      	ldr	r2, [pc, #240]	@ (80051f4 <TIM_Base_SetConfig+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3b      	ldr	r2, [pc, #236]	@ (80051f8 <TIM_Base_SetConfig+0x120>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3a      	ldr	r2, [pc, #232]	@ (80051fc <TIM_Base_SetConfig+0x124>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2f      	ldr	r2, [pc, #188]	@ (80051ec <TIM_Base_SetConfig+0x114>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005138:	d027      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2c      	ldr	r2, [pc, #176]	@ (80051f0 <TIM_Base_SetConfig+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d023      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <TIM_Base_SetConfig+0x11c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <TIM_Base_SetConfig+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a29      	ldr	r2, [pc, #164]	@ (80051fc <TIM_Base_SetConfig+0x124>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d017      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a28      	ldr	r2, [pc, #160]	@ (8005200 <TIM_Base_SetConfig+0x128>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a27      	ldr	r2, [pc, #156]	@ (8005204 <TIM_Base_SetConfig+0x12c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <TIM_Base_SetConfig+0x130>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a25      	ldr	r2, [pc, #148]	@ (800520c <TIM_Base_SetConfig+0x134>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a24      	ldr	r2, [pc, #144]	@ (8005210 <TIM_Base_SetConfig+0x138>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a23      	ldr	r2, [pc, #140]	@ (8005214 <TIM_Base_SetConfig+0x13c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <TIM_Base_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a0c      	ldr	r2, [pc, #48]	@ (80051fc <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d103      	bne.n	80051d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	615a      	str	r2, [r3, #20]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40000c00 	.word	0x40000c00
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800
 800520c:	40001800 	.word	0x40001800
 8005210:	40001c00 	.word	0x40001c00
 8005214:	40002000 	.word	0x40002000

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e040      	b.n	80052e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fd fa4e 	bl	8002718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	@ 0x24
 8005280:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8b0 	bl	80053f8 <UART_SetConfig>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e022      	b.n	80052e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb08 	bl	80058c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb8f 	bl	8005a04 <UART_CheckIdleState>
 80052e6:	4603      	mov	r3, r0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	@ 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005304:	2b20      	cmp	r3, #32
 8005306:	d171      	bne.n	80053ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_UART_Transmit+0x24>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e06a      	b.n	80053ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2221      	movs	r2, #33	@ 0x21
 8005324:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005326:	f7fd fc05 	bl	8002b34 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005344:	d108      	bne.n	8005358 <HAL_UART_Transmit+0x68>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e003      	b.n	8005360 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005360:	e02c      	b.n	80053bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2200      	movs	r2, #0
 800536a:	2180      	movs	r1, #128	@ 0x80
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fb80 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e038      	b.n	80053ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	3302      	adds	r3, #2
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e007      	b.n	80053aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	781a      	ldrb	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	3301      	adds	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1cc      	bne.n	8005362 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	2140      	movs	r1, #64	@ 0x40
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fb4d 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e005      	b.n	80053ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4ba6      	ldr	r3, [pc, #664]	@ (80056bc <UART_SetConfig+0x2c4>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	430b      	orrs	r3, r1
 800542e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a94      	ldr	r2, [pc, #592]	@ (80056c0 <UART_SetConfig+0x2c8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d120      	bne.n	80054b6 <UART_SetConfig+0xbe>
 8005474:	4b93      	ldr	r3, [pc, #588]	@ (80056c4 <UART_SetConfig+0x2cc>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d816      	bhi.n	80054b0 <UART_SetConfig+0xb8>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <UART_SetConfig+0x90>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a5 	.word	0x080054a5
 8005490:	0800549f 	.word	0x0800549f
 8005494:	080054ab 	.word	0x080054ab
 8005498:	2301      	movs	r3, #1
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e150      	b.n	8005740 <UART_SetConfig+0x348>
 800549e:	2302      	movs	r3, #2
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e14d      	b.n	8005740 <UART_SetConfig+0x348>
 80054a4:	2304      	movs	r3, #4
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e14a      	b.n	8005740 <UART_SetConfig+0x348>
 80054aa:	2308      	movs	r3, #8
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e147      	b.n	8005740 <UART_SetConfig+0x348>
 80054b0:	2310      	movs	r3, #16
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e144      	b.n	8005740 <UART_SetConfig+0x348>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a83      	ldr	r2, [pc, #524]	@ (80056c8 <UART_SetConfig+0x2d0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d132      	bne.n	8005526 <UART_SetConfig+0x12e>
 80054c0:	4b80      	ldr	r3, [pc, #512]	@ (80056c4 <UART_SetConfig+0x2cc>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d828      	bhi.n	8005520 <UART_SetConfig+0x128>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0xdc>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005521 	.word	0x08005521
 80054f4:	0800550f 	.word	0x0800550f
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005521 	.word	0x08005521
 8005504:	0800551b 	.word	0x0800551b
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e118      	b.n	8005740 <UART_SetConfig+0x348>
 800550e:	2302      	movs	r3, #2
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e115      	b.n	8005740 <UART_SetConfig+0x348>
 8005514:	2304      	movs	r3, #4
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e112      	b.n	8005740 <UART_SetConfig+0x348>
 800551a:	2308      	movs	r3, #8
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e10f      	b.n	8005740 <UART_SetConfig+0x348>
 8005520:	2310      	movs	r3, #16
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e10c      	b.n	8005740 <UART_SetConfig+0x348>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a68      	ldr	r2, [pc, #416]	@ (80056cc <UART_SetConfig+0x2d4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d120      	bne.n	8005572 <UART_SetConfig+0x17a>
 8005530:	4b64      	ldr	r3, [pc, #400]	@ (80056c4 <UART_SetConfig+0x2cc>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800553a:	2b30      	cmp	r3, #48	@ 0x30
 800553c:	d013      	beq.n	8005566 <UART_SetConfig+0x16e>
 800553e:	2b30      	cmp	r3, #48	@ 0x30
 8005540:	d814      	bhi.n	800556c <UART_SetConfig+0x174>
 8005542:	2b20      	cmp	r3, #32
 8005544:	d009      	beq.n	800555a <UART_SetConfig+0x162>
 8005546:	2b20      	cmp	r3, #32
 8005548:	d810      	bhi.n	800556c <UART_SetConfig+0x174>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <UART_SetConfig+0x15c>
 800554e:	2b10      	cmp	r3, #16
 8005550:	d006      	beq.n	8005560 <UART_SetConfig+0x168>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x174>
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e0f2      	b.n	8005740 <UART_SetConfig+0x348>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e0ef      	b.n	8005740 <UART_SetConfig+0x348>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e0ec      	b.n	8005740 <UART_SetConfig+0x348>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e0e9      	b.n	8005740 <UART_SetConfig+0x348>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e0e6      	b.n	8005740 <UART_SetConfig+0x348>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a56      	ldr	r2, [pc, #344]	@ (80056d0 <UART_SetConfig+0x2d8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d120      	bne.n	80055be <UART_SetConfig+0x1c6>
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005586:	2bc0      	cmp	r3, #192	@ 0xc0
 8005588:	d013      	beq.n	80055b2 <UART_SetConfig+0x1ba>
 800558a:	2bc0      	cmp	r3, #192	@ 0xc0
 800558c:	d814      	bhi.n	80055b8 <UART_SetConfig+0x1c0>
 800558e:	2b80      	cmp	r3, #128	@ 0x80
 8005590:	d009      	beq.n	80055a6 <UART_SetConfig+0x1ae>
 8005592:	2b80      	cmp	r3, #128	@ 0x80
 8005594:	d810      	bhi.n	80055b8 <UART_SetConfig+0x1c0>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0x1a8>
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x1b4>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x1c0>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e0cc      	b.n	8005740 <UART_SetConfig+0x348>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e0c9      	b.n	8005740 <UART_SetConfig+0x348>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e0c6      	b.n	8005740 <UART_SetConfig+0x348>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e0c3      	b.n	8005740 <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e0c0      	b.n	8005740 <UART_SetConfig+0x348>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a44      	ldr	r2, [pc, #272]	@ (80056d4 <UART_SetConfig+0x2dc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d125      	bne.n	8005614 <UART_SetConfig+0x21c>
 80055c8:	4b3e      	ldr	r3, [pc, #248]	@ (80056c4 <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055d6:	d017      	beq.n	8005608 <UART_SetConfig+0x210>
 80055d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055dc:	d817      	bhi.n	800560e <UART_SetConfig+0x216>
 80055de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e2:	d00b      	beq.n	80055fc <UART_SetConfig+0x204>
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e8:	d811      	bhi.n	800560e <UART_SetConfig+0x216>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <UART_SetConfig+0x1fe>
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f2:	d006      	beq.n	8005602 <UART_SetConfig+0x20a>
 80055f4:	e00b      	b.n	800560e <UART_SetConfig+0x216>
 80055f6:	2300      	movs	r3, #0
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e0a1      	b.n	8005740 <UART_SetConfig+0x348>
 80055fc:	2302      	movs	r3, #2
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e09e      	b.n	8005740 <UART_SetConfig+0x348>
 8005602:	2304      	movs	r3, #4
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e09b      	b.n	8005740 <UART_SetConfig+0x348>
 8005608:	2308      	movs	r3, #8
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e098      	b.n	8005740 <UART_SetConfig+0x348>
 800560e:	2310      	movs	r3, #16
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e095      	b.n	8005740 <UART_SetConfig+0x348>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <UART_SetConfig+0x2e0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d125      	bne.n	800566a <UART_SetConfig+0x272>
 800561e:	4b29      	ldr	r3, [pc, #164]	@ (80056c4 <UART_SetConfig+0x2cc>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005624:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800562c:	d017      	beq.n	800565e <UART_SetConfig+0x266>
 800562e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005632:	d817      	bhi.n	8005664 <UART_SetConfig+0x26c>
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005638:	d00b      	beq.n	8005652 <UART_SetConfig+0x25a>
 800563a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563e:	d811      	bhi.n	8005664 <UART_SetConfig+0x26c>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <UART_SetConfig+0x254>
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005648:	d006      	beq.n	8005658 <UART_SetConfig+0x260>
 800564a:	e00b      	b.n	8005664 <UART_SetConfig+0x26c>
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e076      	b.n	8005740 <UART_SetConfig+0x348>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e073      	b.n	8005740 <UART_SetConfig+0x348>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e070      	b.n	8005740 <UART_SetConfig+0x348>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e06d      	b.n	8005740 <UART_SetConfig+0x348>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e06a      	b.n	8005740 <UART_SetConfig+0x348>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1b      	ldr	r2, [pc, #108]	@ (80056dc <UART_SetConfig+0x2e4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d138      	bne.n	80056e6 <UART_SetConfig+0x2ee>
 8005674:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <UART_SetConfig+0x2cc>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800567e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005682:	d017      	beq.n	80056b4 <UART_SetConfig+0x2bc>
 8005684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005688:	d82a      	bhi.n	80056e0 <UART_SetConfig+0x2e8>
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568e:	d00b      	beq.n	80056a8 <UART_SetConfig+0x2b0>
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005694:	d824      	bhi.n	80056e0 <UART_SetConfig+0x2e8>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <UART_SetConfig+0x2aa>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569e:	d006      	beq.n	80056ae <UART_SetConfig+0x2b6>
 80056a0:	e01e      	b.n	80056e0 <UART_SetConfig+0x2e8>
 80056a2:	2300      	movs	r3, #0
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e04b      	b.n	8005740 <UART_SetConfig+0x348>
 80056a8:	2302      	movs	r3, #2
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e048      	b.n	8005740 <UART_SetConfig+0x348>
 80056ae:	2304      	movs	r3, #4
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e045      	b.n	8005740 <UART_SetConfig+0x348>
 80056b4:	2308      	movs	r3, #8
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e042      	b.n	8005740 <UART_SetConfig+0x348>
 80056ba:	bf00      	nop
 80056bc:	efff69f3 	.word	0xefff69f3
 80056c0:	40011000 	.word	0x40011000
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40004400 	.word	0x40004400
 80056cc:	40004800 	.word	0x40004800
 80056d0:	40004c00 	.word	0x40004c00
 80056d4:	40005000 	.word	0x40005000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	40007800 	.word	0x40007800
 80056e0:	2310      	movs	r3, #16
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e02c      	b.n	8005740 <UART_SetConfig+0x348>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a72      	ldr	r2, [pc, #456]	@ (80058b4 <UART_SetConfig+0x4bc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d125      	bne.n	800573c <UART_SetConfig+0x344>
 80056f0:	4b71      	ldr	r3, [pc, #452]	@ (80058b8 <UART_SetConfig+0x4c0>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056fe:	d017      	beq.n	8005730 <UART_SetConfig+0x338>
 8005700:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005704:	d817      	bhi.n	8005736 <UART_SetConfig+0x33e>
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570a:	d00b      	beq.n	8005724 <UART_SetConfig+0x32c>
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005710:	d811      	bhi.n	8005736 <UART_SetConfig+0x33e>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <UART_SetConfig+0x326>
 8005716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800571a:	d006      	beq.n	800572a <UART_SetConfig+0x332>
 800571c:	e00b      	b.n	8005736 <UART_SetConfig+0x33e>
 800571e:	2300      	movs	r3, #0
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e00d      	b.n	8005740 <UART_SetConfig+0x348>
 8005724:	2302      	movs	r3, #2
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e00a      	b.n	8005740 <UART_SetConfig+0x348>
 800572a:	2304      	movs	r3, #4
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e007      	b.n	8005740 <UART_SetConfig+0x348>
 8005730:	2308      	movs	r3, #8
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e004      	b.n	8005740 <UART_SetConfig+0x348>
 8005736:	2310      	movs	r3, #16
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e001      	b.n	8005740 <UART_SetConfig+0x348>
 800573c:	2310      	movs	r3, #16
 800573e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005748:	d15b      	bne.n	8005802 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800574a:	7ffb      	ldrb	r3, [r7, #31]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d828      	bhi.n	80057a2 <UART_SetConfig+0x3aa>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <UART_SetConfig+0x360>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	0800577d 	.word	0x0800577d
 800575c:	08005785 	.word	0x08005785
 8005760:	0800578d 	.word	0x0800578d
 8005764:	080057a3 	.word	0x080057a3
 8005768:	08005793 	.word	0x08005793
 800576c:	080057a3 	.word	0x080057a3
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057a3 	.word	0x080057a3
 8005778:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fe7c 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005780:	61b8      	str	r0, [r7, #24]
        break;
 8005782:	e013      	b.n	80057ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fe fe8c 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8005788:	61b8      	str	r0, [r7, #24]
        break;
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <UART_SetConfig+0x4c4>)
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e00c      	b.n	80057ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe fd9f 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8005796:	61b8      	str	r0, [r7, #24]
        break;
 8005798:	e008      	b.n	80057ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800579e:	61bb      	str	r3, [r7, #24]
        break;
 80057a0:	e004      	b.n	80057ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	77bb      	strb	r3, [r7, #30]
        break;
 80057aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d074      	beq.n	800589c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	005a      	lsls	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d916      	bls.n	80057fc <UART_SetConfig+0x404>
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d4:	d212      	bcs.n	80057fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f023 030f 	bic.w	r3, r3, #15
 80057de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	89fb      	ldrh	r3, [r7, #14]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	89fa      	ldrh	r2, [r7, #14]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	e04f      	b.n	800589c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77bb      	strb	r3, [r7, #30]
 8005800:	e04c      	b.n	800589c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005802:	7ffb      	ldrb	r3, [r7, #31]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d828      	bhi.n	800585a <UART_SetConfig+0x462>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x418>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005845 	.word	0x08005845
 800581c:	0800585b 	.word	0x0800585b
 8005820:	0800584b 	.word	0x0800584b
 8005824:	0800585b 	.word	0x0800585b
 8005828:	0800585b 	.word	0x0800585b
 800582c:	0800585b 	.word	0x0800585b
 8005830:	08005853 	.word	0x08005853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005834:	f7fe fe20 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005838:	61b8      	str	r0, [r7, #24]
        break;
 800583a:	e013      	b.n	8005864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583c:	f7fe fe30 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8005840:	61b8      	str	r0, [r7, #24]
        break;
 8005842:	e00f      	b.n	8005864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005844:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <UART_SetConfig+0x4c4>)
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e00c      	b.n	8005864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584a:	f7fe fd43 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800584e:	61b8      	str	r0, [r7, #24]
        break;
 8005850:	e008      	b.n	8005864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005856:	61bb      	str	r3, [r7, #24]
        break;
 8005858:	e004      	b.n	8005864 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77bb      	strb	r3, [r7, #30]
        break;
 8005862:	bf00      	nop
    }

    if (pclk != 0U)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085a      	lsrs	r2, r3, #1
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	441a      	add	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	d909      	bls.n	8005898 <UART_SetConfig+0x4a0>
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800588a:	d205      	bcs.n	8005898 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	b29a      	uxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	e001      	b.n	800589c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40007c00 	.word	0x40007c00
 80058b8:	40023800 	.word	0x40023800
 80058bc:	00f42400 	.word	0x00f42400

080058c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059be:	d10a      	bne.n	80059d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a14:	f7fd f88e 	bl	8002b34 <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d10e      	bne.n	8005a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f81b 	bl	8005a72 <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e011      	b.n	8005a6a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b09c      	sub	sp, #112	@ 0x70
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	e0a7      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	f000 80a3 	beq.w	8005bd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8e:	f7fd f851 	bl	8002b34 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d13f      	bne.n	8005b24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ac8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e6      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	f023 0301 	bic.w	r3, r3, #1
 8005aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005af6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e5      	bne.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e068      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d050      	beq.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b40:	d148      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b9e:	623a      	str	r2, [r7, #32]
 8005ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	69f9      	ldr	r1, [r7, #28]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e010      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	f43f af48 	beq.w	8005a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3770      	adds	r7, #112	@ 0x70
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <__cvt>:
 8005bfe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c02:	ec57 6b10 	vmov	r6, r7, d0
 8005c06:	2f00      	cmp	r7, #0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	bfbb      	ittet	lt
 8005c10:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c14:	461f      	movlt	r7, r3
 8005c16:	2300      	movge	r3, #0
 8005c18:	232d      	movlt	r3, #45	@ 0x2d
 8005c1a:	700b      	strb	r3, [r1, #0]
 8005c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c1e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c22:	4691      	mov	r9, r2
 8005c24:	f023 0820 	bic.w	r8, r3, #32
 8005c28:	bfbc      	itt	lt
 8005c2a:	4632      	movlt	r2, r6
 8005c2c:	4616      	movlt	r6, r2
 8005c2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c32:	d005      	beq.n	8005c40 <__cvt+0x42>
 8005c34:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c38:	d100      	bne.n	8005c3c <__cvt+0x3e>
 8005c3a:	3401      	adds	r4, #1
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	e000      	b.n	8005c42 <__cvt+0x44>
 8005c40:	2103      	movs	r1, #3
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	ab02      	add	r3, sp, #8
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	ec47 6b10 	vmov	d0, r6, r7
 8005c4e:	4653      	mov	r3, sl
 8005c50:	4622      	mov	r2, r4
 8005c52:	f001 f875 	bl	8006d40 <_dtoa_r>
 8005c56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	d119      	bne.n	8005c92 <__cvt+0x94>
 8005c5e:	f019 0f01 	tst.w	r9, #1
 8005c62:	d00e      	beq.n	8005c82 <__cvt+0x84>
 8005c64:	eb00 0904 	add.w	r9, r0, r4
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8005c74:	b108      	cbz	r0, 8005c7a <__cvt+0x7c>
 8005c76:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c7a:	2230      	movs	r2, #48	@ 0x30
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	454b      	cmp	r3, r9
 8005c80:	d31e      	bcc.n	8005cc0 <__cvt+0xc2>
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c86:	1b5b      	subs	r3, r3, r5
 8005c88:	4628      	mov	r0, r5
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	b004      	add	sp, #16
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c96:	eb00 0904 	add.w	r9, r0, r4
 8005c9a:	d1e5      	bne.n	8005c68 <__cvt+0x6a>
 8005c9c:	7803      	ldrb	r3, [r0, #0]
 8005c9e:	2b30      	cmp	r3, #48	@ 0x30
 8005ca0:	d10a      	bne.n	8005cb8 <__cvt+0xba>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4639      	mov	r1, r7
 8005caa:	f7fa ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8005cae:	b918      	cbnz	r0, 8005cb8 <__cvt+0xba>
 8005cb0:	f1c4 0401 	rsb	r4, r4, #1
 8005cb4:	f8ca 4000 	str.w	r4, [sl]
 8005cb8:	f8da 3000 	ldr.w	r3, [sl]
 8005cbc:	4499      	add	r9, r3
 8005cbe:	e7d3      	b.n	8005c68 <__cvt+0x6a>
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	9103      	str	r1, [sp, #12]
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e7d9      	b.n	8005c7c <__cvt+0x7e>

08005cc8 <__exponent>:
 8005cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	bfba      	itte	lt
 8005cce:	4249      	neglt	r1, r1
 8005cd0:	232d      	movlt	r3, #45	@ 0x2d
 8005cd2:	232b      	movge	r3, #43	@ 0x2b
 8005cd4:	2909      	cmp	r1, #9
 8005cd6:	7002      	strb	r2, [r0, #0]
 8005cd8:	7043      	strb	r3, [r0, #1]
 8005cda:	dd29      	ble.n	8005d30 <__exponent+0x68>
 8005cdc:	f10d 0307 	add.w	r3, sp, #7
 8005ce0:	461d      	mov	r5, r3
 8005ce2:	270a      	movs	r7, #10
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cea:	fb07 1416 	mls	r4, r7, r6, r1
 8005cee:	3430      	adds	r4, #48	@ 0x30
 8005cf0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	2c63      	cmp	r4, #99	@ 0x63
 8005cf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	dcf1      	bgt.n	8005ce4 <__exponent+0x1c>
 8005d00:	3130      	adds	r1, #48	@ 0x30
 8005d02:	1e94      	subs	r4, r2, #2
 8005d04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d08:	1c41      	adds	r1, r0, #1
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	d30a      	bcc.n	8005d26 <__exponent+0x5e>
 8005d10:	f10d 0309 	add.w	r3, sp, #9
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	42ac      	cmp	r4, r5
 8005d18:	bf88      	it	hi
 8005d1a:	2300      	movhi	r3, #0
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	4403      	add	r3, r0
 8005d20:	1a18      	subs	r0, r3, r0
 8005d22:	b003      	add	sp, #12
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d2e:	e7ed      	b.n	8005d0c <__exponent+0x44>
 8005d30:	2330      	movs	r3, #48	@ 0x30
 8005d32:	3130      	adds	r1, #48	@ 0x30
 8005d34:	7083      	strb	r3, [r0, #2]
 8005d36:	70c1      	strb	r1, [r0, #3]
 8005d38:	1d03      	adds	r3, r0, #4
 8005d3a:	e7f1      	b.n	8005d20 <__exponent+0x58>

08005d3c <_printf_float>:
 8005d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	b08d      	sub	sp, #52	@ 0x34
 8005d42:	460c      	mov	r4, r1
 8005d44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d48:	4616      	mov	r6, r2
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	f000 feef 	bl	8006b30 <_localeconv_r>
 8005d52:	6803      	ldr	r3, [r0, #0]
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fa faaa 	bl	80002b0 <strlen>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d60:	f8d8 3000 	ldr.w	r3, [r8]
 8005d64:	9005      	str	r0, [sp, #20]
 8005d66:	3307      	adds	r3, #7
 8005d68:	f023 0307 	bic.w	r3, r3, #7
 8005d6c:	f103 0208 	add.w	r2, r3, #8
 8005d70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d74:	f8d4 b000 	ldr.w	fp, [r4]
 8005d78:	f8c8 2000 	str.w	r2, [r8]
 8005d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d92:	4b9c      	ldr	r3, [pc, #624]	@ (8006004 <_printf_float+0x2c8>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	f7fa fee8 	bl	8000b6c <__aeabi_dcmpun>
 8005d9c:	bb70      	cbnz	r0, 8005dfc <_printf_float+0xc0>
 8005d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da2:	4b98      	ldr	r3, [pc, #608]	@ (8006004 <_printf_float+0x2c8>)
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	f7fa fec2 	bl	8000b30 <__aeabi_dcmple>
 8005dac:	bb30      	cbnz	r0, 8005dfc <_printf_float+0xc0>
 8005dae:	2200      	movs	r2, #0
 8005db0:	2300      	movs	r3, #0
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa feb1 	bl	8000b1c <__aeabi_dcmplt>
 8005dba:	b110      	cbz	r0, 8005dc2 <_printf_float+0x86>
 8005dbc:	232d      	movs	r3, #45	@ 0x2d
 8005dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc2:	4a91      	ldr	r2, [pc, #580]	@ (8006008 <_printf_float+0x2cc>)
 8005dc4:	4b91      	ldr	r3, [pc, #580]	@ (800600c <_printf_float+0x2d0>)
 8005dc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dca:	bf94      	ite	ls
 8005dcc:	4690      	movls	r8, r2
 8005dce:	4698      	movhi	r8, r3
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	f02b 0304 	bic.w	r3, fp, #4
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	f04f 0900 	mov.w	r9, #0
 8005dde:	9700      	str	r7, [sp, #0]
 8005de0:	4633      	mov	r3, r6
 8005de2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005de4:	4621      	mov	r1, r4
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f9d2 	bl	8006190 <_printf_common>
 8005dec:	3001      	adds	r0, #1
 8005dee:	f040 808d 	bne.w	8005f0c <_printf_float+0x1d0>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	b00d      	add	sp, #52	@ 0x34
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa feb2 	bl	8000b6c <__aeabi_dcmpun>
 8005e08:	b140      	cbz	r0, 8005e1c <_printf_float+0xe0>
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bfbc      	itt	lt
 8005e10:	232d      	movlt	r3, #45	@ 0x2d
 8005e12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e16:	4a7e      	ldr	r2, [pc, #504]	@ (8006010 <_printf_float+0x2d4>)
 8005e18:	4b7e      	ldr	r3, [pc, #504]	@ (8006014 <_printf_float+0x2d8>)
 8005e1a:	e7d4      	b.n	8005dc6 <_printf_float+0x8a>
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e22:	9206      	str	r2, [sp, #24]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	d13b      	bne.n	8005ea0 <_printf_float+0x164>
 8005e28:	2306      	movs	r3, #6
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e30:	2300      	movs	r3, #0
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e3c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	6861      	ldr	r1, [r4, #4]
 8005e42:	ec49 8b10 	vmov	d0, r8, r9
 8005e46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7ff fed7 	bl	8005bfe <__cvt>
 8005e50:	9b06      	ldr	r3, [sp, #24]
 8005e52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e54:	2b47      	cmp	r3, #71	@ 0x47
 8005e56:	4680      	mov	r8, r0
 8005e58:	d129      	bne.n	8005eae <_printf_float+0x172>
 8005e5a:	1cc8      	adds	r0, r1, #3
 8005e5c:	db02      	blt.n	8005e64 <_printf_float+0x128>
 8005e5e:	6863      	ldr	r3, [r4, #4]
 8005e60:	4299      	cmp	r1, r3
 8005e62:	dd41      	ble.n	8005ee8 <_printf_float+0x1ac>
 8005e64:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e68:	fa5f fa8a 	uxtb.w	sl, sl
 8005e6c:	3901      	subs	r1, #1
 8005e6e:	4652      	mov	r2, sl
 8005e70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e74:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e76:	f7ff ff27 	bl	8005cc8 <__exponent>
 8005e7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e7c:	1813      	adds	r3, r2, r0
 8005e7e:	2a01      	cmp	r2, #1
 8005e80:	4681      	mov	r9, r0
 8005e82:	6123      	str	r3, [r4, #16]
 8005e84:	dc02      	bgt.n	8005e8c <_printf_float+0x150>
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	07d2      	lsls	r2, r2, #31
 8005e8a:	d501      	bpl.n	8005e90 <_printf_float+0x154>
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0a2      	beq.n	8005dde <_printf_float+0xa2>
 8005e98:	232d      	movs	r3, #45	@ 0x2d
 8005e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e9e:	e79e      	b.n	8005dde <_printf_float+0xa2>
 8005ea0:	9a06      	ldr	r2, [sp, #24]
 8005ea2:	2a47      	cmp	r2, #71	@ 0x47
 8005ea4:	d1c2      	bne.n	8005e2c <_printf_float+0xf0>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1c0      	bne.n	8005e2c <_printf_float+0xf0>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e7bd      	b.n	8005e2a <_printf_float+0xee>
 8005eae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eb2:	d9db      	bls.n	8005e6c <_printf_float+0x130>
 8005eb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005eb8:	d118      	bne.n	8005eec <_printf_float+0x1b0>
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	6863      	ldr	r3, [r4, #4]
 8005ebe:	dd0b      	ble.n	8005ed8 <_printf_float+0x19c>
 8005ec0:	6121      	str	r1, [r4, #16]
 8005ec2:	b913      	cbnz	r3, 8005eca <_printf_float+0x18e>
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	07d0      	lsls	r0, r2, #31
 8005ec8:	d502      	bpl.n	8005ed0 <_printf_float+0x194>
 8005eca:	3301      	adds	r3, #1
 8005ecc:	440b      	add	r3, r1
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ed2:	f04f 0900 	mov.w	r9, #0
 8005ed6:	e7db      	b.n	8005e90 <_printf_float+0x154>
 8005ed8:	b913      	cbnz	r3, 8005ee0 <_printf_float+0x1a4>
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	07d2      	lsls	r2, r2, #31
 8005ede:	d501      	bpl.n	8005ee4 <_printf_float+0x1a8>
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	e7f4      	b.n	8005ece <_printf_float+0x192>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e7f2      	b.n	8005ece <_printf_float+0x192>
 8005ee8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	db05      	blt.n	8005efe <_printf_float+0x1c2>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	6121      	str	r1, [r4, #16]
 8005ef6:	07d8      	lsls	r0, r3, #31
 8005ef8:	d5ea      	bpl.n	8005ed0 <_printf_float+0x194>
 8005efa:	1c4b      	adds	r3, r1, #1
 8005efc:	e7e7      	b.n	8005ece <_printf_float+0x192>
 8005efe:	2900      	cmp	r1, #0
 8005f00:	bfd4      	ite	le
 8005f02:	f1c1 0202 	rsble	r2, r1, #2
 8005f06:	2201      	movgt	r2, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	e7e0      	b.n	8005ece <_printf_float+0x192>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	055a      	lsls	r2, r3, #21
 8005f10:	d407      	bmi.n	8005f22 <_printf_float+0x1e6>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	4642      	mov	r2, r8
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d12b      	bne.n	8005f78 <_printf_float+0x23c>
 8005f20:	e767      	b.n	8005df2 <_printf_float+0xb6>
 8005f22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f26:	f240 80dd 	bls.w	80060e4 <_printf_float+0x3a8>
 8005f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2300      	movs	r3, #0
 8005f32:	f7fa fde9 	bl	8000b08 <__aeabi_dcmpeq>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d033      	beq.n	8005fa2 <_printf_float+0x266>
 8005f3a:	4a37      	ldr	r2, [pc, #220]	@ (8006018 <_printf_float+0x2dc>)
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f af54 	beq.w	8005df2 <_printf_float+0xb6>
 8005f4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f4e:	4543      	cmp	r3, r8
 8005f50:	db02      	blt.n	8005f58 <_printf_float+0x21c>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	07d8      	lsls	r0, r3, #31
 8005f56:	d50f      	bpl.n	8005f78 <_printf_float+0x23c>
 8005f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f af45 	beq.w	8005df2 <_printf_float+0xb6>
 8005f68:	f04f 0900 	mov.w	r9, #0
 8005f6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f70:	f104 0a1a 	add.w	sl, r4, #26
 8005f74:	45c8      	cmp	r8, r9
 8005f76:	dc09      	bgt.n	8005f8c <_printf_float+0x250>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	079b      	lsls	r3, r3, #30
 8005f7c:	f100 8103 	bmi.w	8006186 <_printf_float+0x44a>
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f84:	4298      	cmp	r0, r3
 8005f86:	bfb8      	it	lt
 8005f88:	4618      	movlt	r0, r3
 8005f8a:	e734      	b.n	8005df6 <_printf_float+0xba>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	4652      	mov	r2, sl
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f af2b 	beq.w	8005df2 <_printf_float+0xb6>
 8005f9c:	f109 0901 	add.w	r9, r9, #1
 8005fa0:	e7e8      	b.n	8005f74 <_printf_float+0x238>
 8005fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dc39      	bgt.n	800601c <_printf_float+0x2e0>
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8006018 <_printf_float+0x2dc>)
 8005faa:	2301      	movs	r3, #1
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f af1d 	beq.w	8005df2 <_printf_float+0xb6>
 8005fb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fbc:	ea59 0303 	orrs.w	r3, r9, r3
 8005fc0:	d102      	bne.n	8005fc8 <_printf_float+0x28c>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	07d9      	lsls	r1, r3, #31
 8005fc6:	d5d7      	bpl.n	8005f78 <_printf_float+0x23c>
 8005fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f43f af0d 	beq.w	8005df2 <_printf_float+0xb6>
 8005fd8:	f04f 0a00 	mov.w	sl, #0
 8005fdc:	f104 0b1a 	add.w	fp, r4, #26
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	425b      	negs	r3, r3
 8005fe4:	4553      	cmp	r3, sl
 8005fe6:	dc01      	bgt.n	8005fec <_printf_float+0x2b0>
 8005fe8:	464b      	mov	r3, r9
 8005fea:	e793      	b.n	8005f14 <_printf_float+0x1d8>
 8005fec:	2301      	movs	r3, #1
 8005fee:	465a      	mov	r2, fp
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f aefb 	beq.w	8005df2 <_printf_float+0xb6>
 8005ffc:	f10a 0a01 	add.w	sl, sl, #1
 8006000:	e7ee      	b.n	8005fe0 <_printf_float+0x2a4>
 8006002:	bf00      	nop
 8006004:	7fefffff 	.word	0x7fefffff
 8006008:	0800a30c 	.word	0x0800a30c
 800600c:	0800a310 	.word	0x0800a310
 8006010:	0800a314 	.word	0x0800a314
 8006014:	0800a318 	.word	0x0800a318
 8006018:	0800a31c 	.word	0x0800a31c
 800601c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800601e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006022:	4553      	cmp	r3, sl
 8006024:	bfa8      	it	ge
 8006026:	4653      	movge	r3, sl
 8006028:	2b00      	cmp	r3, #0
 800602a:	4699      	mov	r9, r3
 800602c:	dc36      	bgt.n	800609c <_printf_float+0x360>
 800602e:	f04f 0b00 	mov.w	fp, #0
 8006032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006036:	f104 021a 	add.w	r2, r4, #26
 800603a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800603c:	9306      	str	r3, [sp, #24]
 800603e:	eba3 0309 	sub.w	r3, r3, r9
 8006042:	455b      	cmp	r3, fp
 8006044:	dc31      	bgt.n	80060aa <_printf_float+0x36e>
 8006046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006048:	459a      	cmp	sl, r3
 800604a:	dc3a      	bgt.n	80060c2 <_printf_float+0x386>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	07da      	lsls	r2, r3, #31
 8006050:	d437      	bmi.n	80060c2 <_printf_float+0x386>
 8006052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006054:	ebaa 0903 	sub.w	r9, sl, r3
 8006058:	9b06      	ldr	r3, [sp, #24]
 800605a:	ebaa 0303 	sub.w	r3, sl, r3
 800605e:	4599      	cmp	r9, r3
 8006060:	bfa8      	it	ge
 8006062:	4699      	movge	r9, r3
 8006064:	f1b9 0f00 	cmp.w	r9, #0
 8006068:	dc33      	bgt.n	80060d2 <_printf_float+0x396>
 800606a:	f04f 0800 	mov.w	r8, #0
 800606e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006072:	f104 0b1a 	add.w	fp, r4, #26
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	ebaa 0303 	sub.w	r3, sl, r3
 800607c:	eba3 0309 	sub.w	r3, r3, r9
 8006080:	4543      	cmp	r3, r8
 8006082:	f77f af79 	ble.w	8005f78 <_printf_float+0x23c>
 8006086:	2301      	movs	r3, #1
 8006088:	465a      	mov	r2, fp
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	f43f aeae 	beq.w	8005df2 <_printf_float+0xb6>
 8006096:	f108 0801 	add.w	r8, r8, #1
 800609a:	e7ec      	b.n	8006076 <_printf_float+0x33a>
 800609c:	4642      	mov	r2, r8
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	d1c2      	bne.n	800602e <_printf_float+0x2f2>
 80060a8:	e6a3      	b.n	8005df2 <_printf_float+0xb6>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	9206      	str	r2, [sp, #24]
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	f43f ae9c 	beq.w	8005df2 <_printf_float+0xb6>
 80060ba:	9a06      	ldr	r2, [sp, #24]
 80060bc:	f10b 0b01 	add.w	fp, fp, #1
 80060c0:	e7bb      	b.n	800603a <_printf_float+0x2fe>
 80060c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c6:	4631      	mov	r1, r6
 80060c8:	4628      	mov	r0, r5
 80060ca:	47b8      	blx	r7
 80060cc:	3001      	adds	r0, #1
 80060ce:	d1c0      	bne.n	8006052 <_printf_float+0x316>
 80060d0:	e68f      	b.n	8005df2 <_printf_float+0xb6>
 80060d2:	9a06      	ldr	r2, [sp, #24]
 80060d4:	464b      	mov	r3, r9
 80060d6:	4442      	add	r2, r8
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	d1c3      	bne.n	800606a <_printf_float+0x32e>
 80060e2:	e686      	b.n	8005df2 <_printf_float+0xb6>
 80060e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060e8:	f1ba 0f01 	cmp.w	sl, #1
 80060ec:	dc01      	bgt.n	80060f2 <_printf_float+0x3b6>
 80060ee:	07db      	lsls	r3, r3, #31
 80060f0:	d536      	bpl.n	8006160 <_printf_float+0x424>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4642      	mov	r2, r8
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f ae78 	beq.w	8005df2 <_printf_float+0xb6>
 8006102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	f43f ae70 	beq.w	8005df2 <_printf_float+0xb6>
 8006112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800611e:	f7fa fcf3 	bl	8000b08 <__aeabi_dcmpeq>
 8006122:	b9c0      	cbnz	r0, 8006156 <_printf_float+0x41a>
 8006124:	4653      	mov	r3, sl
 8006126:	f108 0201 	add.w	r2, r8, #1
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	d10c      	bne.n	800614e <_printf_float+0x412>
 8006134:	e65d      	b.n	8005df2 <_printf_float+0xb6>
 8006136:	2301      	movs	r3, #1
 8006138:	465a      	mov	r2, fp
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f ae56 	beq.w	8005df2 <_printf_float+0xb6>
 8006146:	f108 0801 	add.w	r8, r8, #1
 800614a:	45d0      	cmp	r8, sl
 800614c:	dbf3      	blt.n	8006136 <_printf_float+0x3fa>
 800614e:	464b      	mov	r3, r9
 8006150:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006154:	e6df      	b.n	8005f16 <_printf_float+0x1da>
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	f104 0b1a 	add.w	fp, r4, #26
 800615e:	e7f4      	b.n	800614a <_printf_float+0x40e>
 8006160:	2301      	movs	r3, #1
 8006162:	4642      	mov	r2, r8
 8006164:	e7e1      	b.n	800612a <_printf_float+0x3ee>
 8006166:	2301      	movs	r3, #1
 8006168:	464a      	mov	r2, r9
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f ae3e 	beq.w	8005df2 <_printf_float+0xb6>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	4543      	cmp	r3, r8
 8006182:	dcf0      	bgt.n	8006166 <_printf_float+0x42a>
 8006184:	e6fc      	b.n	8005f80 <_printf_float+0x244>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	f104 0919 	add.w	r9, r4, #25
 800618e:	e7f4      	b.n	800617a <_printf_float+0x43e>

08006190 <_printf_common>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	4616      	mov	r6, r2
 8006196:	4698      	mov	r8, r3
 8006198:	688a      	ldr	r2, [r1, #8]
 800619a:	690b      	ldr	r3, [r1, #16]
 800619c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bfb8      	it	lt
 80061a4:	4613      	movlt	r3, r2
 80061a6:	6033      	str	r3, [r6, #0]
 80061a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061ac:	4607      	mov	r7, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	b10a      	cbz	r2, 80061b6 <_printf_common+0x26>
 80061b2:	3301      	adds	r3, #1
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0699      	lsls	r1, r3, #26
 80061ba:	bf42      	ittt	mi
 80061bc:	6833      	ldrmi	r3, [r6, #0]
 80061be:	3302      	addmi	r3, #2
 80061c0:	6033      	strmi	r3, [r6, #0]
 80061c2:	6825      	ldr	r5, [r4, #0]
 80061c4:	f015 0506 	ands.w	r5, r5, #6
 80061c8:	d106      	bne.n	80061d8 <_printf_common+0x48>
 80061ca:	f104 0a19 	add.w	sl, r4, #25
 80061ce:	68e3      	ldr	r3, [r4, #12]
 80061d0:	6832      	ldr	r2, [r6, #0]
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	dc26      	bgt.n	8006226 <_printf_common+0x96>
 80061d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	3b00      	subs	r3, #0
 80061e0:	bf18      	it	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	0692      	lsls	r2, r2, #26
 80061e6:	d42b      	bmi.n	8006240 <_printf_common+0xb0>
 80061e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061ec:	4641      	mov	r1, r8
 80061ee:	4638      	mov	r0, r7
 80061f0:	47c8      	blx	r9
 80061f2:	3001      	adds	r0, #1
 80061f4:	d01e      	beq.n	8006234 <_printf_common+0xa4>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	6922      	ldr	r2, [r4, #16]
 80061fa:	f003 0306 	and.w	r3, r3, #6
 80061fe:	2b04      	cmp	r3, #4
 8006200:	bf02      	ittt	eq
 8006202:	68e5      	ldreq	r5, [r4, #12]
 8006204:	6833      	ldreq	r3, [r6, #0]
 8006206:	1aed      	subeq	r5, r5, r3
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	bf0c      	ite	eq
 800620c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006210:	2500      	movne	r5, #0
 8006212:	4293      	cmp	r3, r2
 8006214:	bfc4      	itt	gt
 8006216:	1a9b      	subgt	r3, r3, r2
 8006218:	18ed      	addgt	r5, r5, r3
 800621a:	2600      	movs	r6, #0
 800621c:	341a      	adds	r4, #26
 800621e:	42b5      	cmp	r5, r6
 8006220:	d11a      	bne.n	8006258 <_printf_common+0xc8>
 8006222:	2000      	movs	r0, #0
 8006224:	e008      	b.n	8006238 <_printf_common+0xa8>
 8006226:	2301      	movs	r3, #1
 8006228:	4652      	mov	r2, sl
 800622a:	4641      	mov	r1, r8
 800622c:	4638      	mov	r0, r7
 800622e:	47c8      	blx	r9
 8006230:	3001      	adds	r0, #1
 8006232:	d103      	bne.n	800623c <_printf_common+0xac>
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	3501      	adds	r5, #1
 800623e:	e7c6      	b.n	80061ce <_printf_common+0x3e>
 8006240:	18e1      	adds	r1, r4, r3
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	2030      	movs	r0, #48	@ 0x30
 8006246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800624a:	4422      	add	r2, r4
 800624c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006254:	3302      	adds	r3, #2
 8006256:	e7c7      	b.n	80061e8 <_printf_common+0x58>
 8006258:	2301      	movs	r3, #1
 800625a:	4622      	mov	r2, r4
 800625c:	4641      	mov	r1, r8
 800625e:	4638      	mov	r0, r7
 8006260:	47c8      	blx	r9
 8006262:	3001      	adds	r0, #1
 8006264:	d0e6      	beq.n	8006234 <_printf_common+0xa4>
 8006266:	3601      	adds	r6, #1
 8006268:	e7d9      	b.n	800621e <_printf_common+0x8e>
	...

0800626c <_printf_i>:
 800626c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	7e0f      	ldrb	r7, [r1, #24]
 8006272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006274:	2f78      	cmp	r7, #120	@ 0x78
 8006276:	4691      	mov	r9, r2
 8006278:	4680      	mov	r8, r0
 800627a:	460c      	mov	r4, r1
 800627c:	469a      	mov	sl, r3
 800627e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006282:	d807      	bhi.n	8006294 <_printf_i+0x28>
 8006284:	2f62      	cmp	r7, #98	@ 0x62
 8006286:	d80a      	bhi.n	800629e <_printf_i+0x32>
 8006288:	2f00      	cmp	r7, #0
 800628a:	f000 80d2 	beq.w	8006432 <_printf_i+0x1c6>
 800628e:	2f58      	cmp	r7, #88	@ 0x58
 8006290:	f000 80b9 	beq.w	8006406 <_printf_i+0x19a>
 8006294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800629c:	e03a      	b.n	8006314 <_printf_i+0xa8>
 800629e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062a2:	2b15      	cmp	r3, #21
 80062a4:	d8f6      	bhi.n	8006294 <_printf_i+0x28>
 80062a6:	a101      	add	r1, pc, #4	@ (adr r1, 80062ac <_printf_i+0x40>)
 80062a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006319 	.word	0x08006319
 80062b4:	08006295 	.word	0x08006295
 80062b8:	08006295 	.word	0x08006295
 80062bc:	08006295 	.word	0x08006295
 80062c0:	08006295 	.word	0x08006295
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006295 	.word	0x08006295
 80062cc:	08006295 	.word	0x08006295
 80062d0:	08006295 	.word	0x08006295
 80062d4:	08006295 	.word	0x08006295
 80062d8:	08006419 	.word	0x08006419
 80062dc:	08006343 	.word	0x08006343
 80062e0:	080063d3 	.word	0x080063d3
 80062e4:	08006295 	.word	0x08006295
 80062e8:	08006295 	.word	0x08006295
 80062ec:	0800643b 	.word	0x0800643b
 80062f0:	08006295 	.word	0x08006295
 80062f4:	08006343 	.word	0x08006343
 80062f8:	08006295 	.word	0x08006295
 80062fc:	08006295 	.word	0x08006295
 8006300:	080063db 	.word	0x080063db
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6032      	str	r2, [r6, #0]
 800630c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006314:	2301      	movs	r3, #1
 8006316:	e09d      	b.n	8006454 <_printf_i+0x1e8>
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	1d19      	adds	r1, r3, #4
 800631e:	6031      	str	r1, [r6, #0]
 8006320:	0606      	lsls	r6, r0, #24
 8006322:	d501      	bpl.n	8006328 <_printf_i+0xbc>
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	e003      	b.n	8006330 <_printf_i+0xc4>
 8006328:	0645      	lsls	r5, r0, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0xb8>
 800632c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006330:	2d00      	cmp	r5, #0
 8006332:	da03      	bge.n	800633c <_printf_i+0xd0>
 8006334:	232d      	movs	r3, #45	@ 0x2d
 8006336:	426d      	negs	r5, r5
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800633c:	4859      	ldr	r0, [pc, #356]	@ (80064a4 <_printf_i+0x238>)
 800633e:	230a      	movs	r3, #10
 8006340:	e011      	b.n	8006366 <_printf_i+0xfa>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	0608      	lsls	r0, r1, #24
 8006348:	f853 5b04 	ldr.w	r5, [r3], #4
 800634c:	d402      	bmi.n	8006354 <_printf_i+0xe8>
 800634e:	0649      	lsls	r1, r1, #25
 8006350:	bf48      	it	mi
 8006352:	b2ad      	uxthmi	r5, r5
 8006354:	2f6f      	cmp	r7, #111	@ 0x6f
 8006356:	4853      	ldr	r0, [pc, #332]	@ (80064a4 <_printf_i+0x238>)
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	bf14      	ite	ne
 800635c:	230a      	movne	r3, #10
 800635e:	2308      	moveq	r3, #8
 8006360:	2100      	movs	r1, #0
 8006362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006366:	6866      	ldr	r6, [r4, #4]
 8006368:	60a6      	str	r6, [r4, #8]
 800636a:	2e00      	cmp	r6, #0
 800636c:	bfa2      	ittt	ge
 800636e:	6821      	ldrge	r1, [r4, #0]
 8006370:	f021 0104 	bicge.w	r1, r1, #4
 8006374:	6021      	strge	r1, [r4, #0]
 8006376:	b90d      	cbnz	r5, 800637c <_printf_i+0x110>
 8006378:	2e00      	cmp	r6, #0
 800637a:	d04b      	beq.n	8006414 <_printf_i+0x1a8>
 800637c:	4616      	mov	r6, r2
 800637e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006382:	fb03 5711 	mls	r7, r3, r1, r5
 8006386:	5dc7      	ldrb	r7, [r0, r7]
 8006388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800638c:	462f      	mov	r7, r5
 800638e:	42bb      	cmp	r3, r7
 8006390:	460d      	mov	r5, r1
 8006392:	d9f4      	bls.n	800637e <_printf_i+0x112>
 8006394:	2b08      	cmp	r3, #8
 8006396:	d10b      	bne.n	80063b0 <_printf_i+0x144>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	07df      	lsls	r7, r3, #31
 800639c:	d508      	bpl.n	80063b0 <_printf_i+0x144>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	6861      	ldr	r1, [r4, #4]
 80063a2:	4299      	cmp	r1, r3
 80063a4:	bfde      	ittt	le
 80063a6:	2330      	movle	r3, #48	@ 0x30
 80063a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063b0:	1b92      	subs	r2, r2, r6
 80063b2:	6122      	str	r2, [r4, #16]
 80063b4:	f8cd a000 	str.w	sl, [sp]
 80063b8:	464b      	mov	r3, r9
 80063ba:	aa03      	add	r2, sp, #12
 80063bc:	4621      	mov	r1, r4
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff fee6 	bl	8006190 <_printf_common>
 80063c4:	3001      	adds	r0, #1
 80063c6:	d14a      	bne.n	800645e <_printf_i+0x1f2>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	b004      	add	sp, #16
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f043 0320 	orr.w	r3, r3, #32
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	4833      	ldr	r0, [pc, #204]	@ (80064a8 <_printf_i+0x23c>)
 80063dc:	2778      	movs	r7, #120	@ 0x78
 80063de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	6831      	ldr	r1, [r6, #0]
 80063e6:	061f      	lsls	r7, r3, #24
 80063e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80063ec:	d402      	bmi.n	80063f4 <_printf_i+0x188>
 80063ee:	065f      	lsls	r7, r3, #25
 80063f0:	bf48      	it	mi
 80063f2:	b2ad      	uxthmi	r5, r5
 80063f4:	6031      	str	r1, [r6, #0]
 80063f6:	07d9      	lsls	r1, r3, #31
 80063f8:	bf44      	itt	mi
 80063fa:	f043 0320 	orrmi.w	r3, r3, #32
 80063fe:	6023      	strmi	r3, [r4, #0]
 8006400:	b11d      	cbz	r5, 800640a <_printf_i+0x19e>
 8006402:	2310      	movs	r3, #16
 8006404:	e7ac      	b.n	8006360 <_printf_i+0xf4>
 8006406:	4827      	ldr	r0, [pc, #156]	@ (80064a4 <_printf_i+0x238>)
 8006408:	e7e9      	b.n	80063de <_printf_i+0x172>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f023 0320 	bic.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	e7f6      	b.n	8006402 <_printf_i+0x196>
 8006414:	4616      	mov	r6, r2
 8006416:	e7bd      	b.n	8006394 <_printf_i+0x128>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	6961      	ldr	r1, [r4, #20]
 800641e:	1d18      	adds	r0, r3, #4
 8006420:	6030      	str	r0, [r6, #0]
 8006422:	062e      	lsls	r6, r5, #24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	d501      	bpl.n	800642c <_printf_i+0x1c0>
 8006428:	6019      	str	r1, [r3, #0]
 800642a:	e002      	b.n	8006432 <_printf_i+0x1c6>
 800642c:	0668      	lsls	r0, r5, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0x1bc>
 8006430:	8019      	strh	r1, [r3, #0]
 8006432:	2300      	movs	r3, #0
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	4616      	mov	r6, r2
 8006438:	e7bc      	b.n	80063b4 <_printf_i+0x148>
 800643a:	6833      	ldr	r3, [r6, #0]
 800643c:	1d1a      	adds	r2, r3, #4
 800643e:	6032      	str	r2, [r6, #0]
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	2100      	movs	r1, #0
 8006446:	4630      	mov	r0, r6
 8006448:	f7f9 fee2 	bl	8000210 <memchr>
 800644c:	b108      	cbz	r0, 8006452 <_printf_i+0x1e6>
 800644e:	1b80      	subs	r0, r0, r6
 8006450:	6060      	str	r0, [r4, #4]
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	2300      	movs	r3, #0
 8006458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800645c:	e7aa      	b.n	80063b4 <_printf_i+0x148>
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d0ad      	beq.n	80063c8 <_printf_i+0x15c>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	079b      	lsls	r3, r3, #30
 8006470:	d413      	bmi.n	800649a <_printf_i+0x22e>
 8006472:	68e0      	ldr	r0, [r4, #12]
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	4298      	cmp	r0, r3
 8006478:	bfb8      	it	lt
 800647a:	4618      	movlt	r0, r3
 800647c:	e7a6      	b.n	80063cc <_printf_i+0x160>
 800647e:	2301      	movs	r3, #1
 8006480:	4632      	mov	r2, r6
 8006482:	4649      	mov	r1, r9
 8006484:	4640      	mov	r0, r8
 8006486:	47d0      	blx	sl
 8006488:	3001      	adds	r0, #1
 800648a:	d09d      	beq.n	80063c8 <_printf_i+0x15c>
 800648c:	3501      	adds	r5, #1
 800648e:	68e3      	ldr	r3, [r4, #12]
 8006490:	9903      	ldr	r1, [sp, #12]
 8006492:	1a5b      	subs	r3, r3, r1
 8006494:	42ab      	cmp	r3, r5
 8006496:	dcf2      	bgt.n	800647e <_printf_i+0x212>
 8006498:	e7eb      	b.n	8006472 <_printf_i+0x206>
 800649a:	2500      	movs	r5, #0
 800649c:	f104 0619 	add.w	r6, r4, #25
 80064a0:	e7f5      	b.n	800648e <_printf_i+0x222>
 80064a2:	bf00      	nop
 80064a4:	0800a31e 	.word	0x0800a31e
 80064a8:	0800a32f 	.word	0x0800a32f

080064ac <_scanf_float>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	b087      	sub	sp, #28
 80064b2:	4617      	mov	r7, r2
 80064b4:	9303      	str	r3, [sp, #12]
 80064b6:	688b      	ldr	r3, [r1, #8]
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80064be:	bf81      	itttt	hi
 80064c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80064c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80064c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80064cc:	608b      	strhi	r3, [r1, #8]
 80064ce:	680b      	ldr	r3, [r1, #0]
 80064d0:	460a      	mov	r2, r1
 80064d2:	f04f 0500 	mov.w	r5, #0
 80064d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80064da:	f842 3b1c 	str.w	r3, [r2], #28
 80064de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064e2:	4680      	mov	r8, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	bf98      	it	ls
 80064e8:	f04f 0b00 	movls.w	fp, #0
 80064ec:	9201      	str	r2, [sp, #4]
 80064ee:	4616      	mov	r6, r2
 80064f0:	46aa      	mov	sl, r5
 80064f2:	46a9      	mov	r9, r5
 80064f4:	9502      	str	r5, [sp, #8]
 80064f6:	68a2      	ldr	r2, [r4, #8]
 80064f8:	b152      	cbz	r2, 8006510 <_scanf_float+0x64>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8006500:	d864      	bhi.n	80065cc <_scanf_float+0x120>
 8006502:	2b40      	cmp	r3, #64	@ 0x40
 8006504:	d83c      	bhi.n	8006580 <_scanf_float+0xd4>
 8006506:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800650a:	b2c8      	uxtb	r0, r1
 800650c:	280e      	cmp	r0, #14
 800650e:	d93a      	bls.n	8006586 <_scanf_float+0xda>
 8006510:	f1b9 0f00 	cmp.w	r9, #0
 8006514:	d003      	beq.n	800651e <_scanf_float+0x72>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006522:	f1ba 0f01 	cmp.w	sl, #1
 8006526:	f200 8117 	bhi.w	8006758 <_scanf_float+0x2ac>
 800652a:	9b01      	ldr	r3, [sp, #4]
 800652c:	429e      	cmp	r6, r3
 800652e:	f200 8108 	bhi.w	8006742 <_scanf_float+0x296>
 8006532:	2001      	movs	r0, #1
 8006534:	b007      	add	sp, #28
 8006536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800653e:	2a0d      	cmp	r2, #13
 8006540:	d8e6      	bhi.n	8006510 <_scanf_float+0x64>
 8006542:	a101      	add	r1, pc, #4	@ (adr r1, 8006548 <_scanf_float+0x9c>)
 8006544:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006548:	0800668f 	.word	0x0800668f
 800654c:	08006511 	.word	0x08006511
 8006550:	08006511 	.word	0x08006511
 8006554:	08006511 	.word	0x08006511
 8006558:	080066ef 	.word	0x080066ef
 800655c:	080066c7 	.word	0x080066c7
 8006560:	08006511 	.word	0x08006511
 8006564:	08006511 	.word	0x08006511
 8006568:	0800669d 	.word	0x0800669d
 800656c:	08006511 	.word	0x08006511
 8006570:	08006511 	.word	0x08006511
 8006574:	08006511 	.word	0x08006511
 8006578:	08006511 	.word	0x08006511
 800657c:	08006655 	.word	0x08006655
 8006580:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006584:	e7db      	b.n	800653e <_scanf_float+0x92>
 8006586:	290e      	cmp	r1, #14
 8006588:	d8c2      	bhi.n	8006510 <_scanf_float+0x64>
 800658a:	a001      	add	r0, pc, #4	@ (adr r0, 8006590 <_scanf_float+0xe4>)
 800658c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006590:	08006645 	.word	0x08006645
 8006594:	08006511 	.word	0x08006511
 8006598:	08006645 	.word	0x08006645
 800659c:	080066db 	.word	0x080066db
 80065a0:	08006511 	.word	0x08006511
 80065a4:	080065ed 	.word	0x080065ed
 80065a8:	0800662b 	.word	0x0800662b
 80065ac:	0800662b 	.word	0x0800662b
 80065b0:	0800662b 	.word	0x0800662b
 80065b4:	0800662b 	.word	0x0800662b
 80065b8:	0800662b 	.word	0x0800662b
 80065bc:	0800662b 	.word	0x0800662b
 80065c0:	0800662b 	.word	0x0800662b
 80065c4:	0800662b 	.word	0x0800662b
 80065c8:	0800662b 	.word	0x0800662b
 80065cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80065ce:	d809      	bhi.n	80065e4 <_scanf_float+0x138>
 80065d0:	2b60      	cmp	r3, #96	@ 0x60
 80065d2:	d8b2      	bhi.n	800653a <_scanf_float+0x8e>
 80065d4:	2b54      	cmp	r3, #84	@ 0x54
 80065d6:	d07b      	beq.n	80066d0 <_scanf_float+0x224>
 80065d8:	2b59      	cmp	r3, #89	@ 0x59
 80065da:	d199      	bne.n	8006510 <_scanf_float+0x64>
 80065dc:	2d07      	cmp	r5, #7
 80065de:	d197      	bne.n	8006510 <_scanf_float+0x64>
 80065e0:	2508      	movs	r5, #8
 80065e2:	e02c      	b.n	800663e <_scanf_float+0x192>
 80065e4:	2b74      	cmp	r3, #116	@ 0x74
 80065e6:	d073      	beq.n	80066d0 <_scanf_float+0x224>
 80065e8:	2b79      	cmp	r3, #121	@ 0x79
 80065ea:	e7f6      	b.n	80065da <_scanf_float+0x12e>
 80065ec:	6821      	ldr	r1, [r4, #0]
 80065ee:	05c8      	lsls	r0, r1, #23
 80065f0:	d51b      	bpl.n	800662a <_scanf_float+0x17e>
 80065f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80065f6:	6021      	str	r1, [r4, #0]
 80065f8:	f109 0901 	add.w	r9, r9, #1
 80065fc:	f1bb 0f00 	cmp.w	fp, #0
 8006600:	d003      	beq.n	800660a <_scanf_float+0x15e>
 8006602:	3201      	adds	r2, #1
 8006604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006608:	60a2      	str	r2, [r4, #8]
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	3b01      	subs	r3, #1
 800660e:	60a3      	str	r3, [r4, #8]
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	3301      	adds	r3, #1
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3b01      	subs	r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	607b      	str	r3, [r7, #4]
 800661e:	f340 8087 	ble.w	8006730 <_scanf_float+0x284>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	e765      	b.n	80064f6 <_scanf_float+0x4a>
 800662a:	eb1a 0105 	adds.w	r1, sl, r5
 800662e:	f47f af6f 	bne.w	8006510 <_scanf_float+0x64>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	460d      	mov	r5, r1
 800663c:	468a      	mov	sl, r1
 800663e:	f806 3b01 	strb.w	r3, [r6], #1
 8006642:	e7e2      	b.n	800660a <_scanf_float+0x15e>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	0610      	lsls	r0, r2, #24
 8006648:	f57f af62 	bpl.w	8006510 <_scanf_float+0x64>
 800664c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006650:	6022      	str	r2, [r4, #0]
 8006652:	e7f4      	b.n	800663e <_scanf_float+0x192>
 8006654:	f1ba 0f00 	cmp.w	sl, #0
 8006658:	d10e      	bne.n	8006678 <_scanf_float+0x1cc>
 800665a:	f1b9 0f00 	cmp.w	r9, #0
 800665e:	d10e      	bne.n	800667e <_scanf_float+0x1d2>
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006666:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800666a:	d108      	bne.n	800667e <_scanf_float+0x1d2>
 800666c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	f04f 0a01 	mov.w	sl, #1
 8006676:	e7e2      	b.n	800663e <_scanf_float+0x192>
 8006678:	f1ba 0f02 	cmp.w	sl, #2
 800667c:	d055      	beq.n	800672a <_scanf_float+0x27e>
 800667e:	2d01      	cmp	r5, #1
 8006680:	d002      	beq.n	8006688 <_scanf_float+0x1dc>
 8006682:	2d04      	cmp	r5, #4
 8006684:	f47f af44 	bne.w	8006510 <_scanf_float+0x64>
 8006688:	3501      	adds	r5, #1
 800668a:	b2ed      	uxtb	r5, r5
 800668c:	e7d7      	b.n	800663e <_scanf_float+0x192>
 800668e:	f1ba 0f01 	cmp.w	sl, #1
 8006692:	f47f af3d 	bne.w	8006510 <_scanf_float+0x64>
 8006696:	f04f 0a02 	mov.w	sl, #2
 800669a:	e7d0      	b.n	800663e <_scanf_float+0x192>
 800669c:	b97d      	cbnz	r5, 80066be <_scanf_float+0x212>
 800669e:	f1b9 0f00 	cmp.w	r9, #0
 80066a2:	f47f af38 	bne.w	8006516 <_scanf_float+0x6a>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80066ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80066b0:	f040 8108 	bne.w	80068c4 <_scanf_float+0x418>
 80066b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	2501      	movs	r5, #1
 80066bc:	e7bf      	b.n	800663e <_scanf_float+0x192>
 80066be:	2d03      	cmp	r5, #3
 80066c0:	d0e2      	beq.n	8006688 <_scanf_float+0x1dc>
 80066c2:	2d05      	cmp	r5, #5
 80066c4:	e7de      	b.n	8006684 <_scanf_float+0x1d8>
 80066c6:	2d02      	cmp	r5, #2
 80066c8:	f47f af22 	bne.w	8006510 <_scanf_float+0x64>
 80066cc:	2503      	movs	r5, #3
 80066ce:	e7b6      	b.n	800663e <_scanf_float+0x192>
 80066d0:	2d06      	cmp	r5, #6
 80066d2:	f47f af1d 	bne.w	8006510 <_scanf_float+0x64>
 80066d6:	2507      	movs	r5, #7
 80066d8:	e7b1      	b.n	800663e <_scanf_float+0x192>
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	0591      	lsls	r1, r2, #22
 80066de:	f57f af17 	bpl.w	8006510 <_scanf_float+0x64>
 80066e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80066ec:	e7a7      	b.n	800663e <_scanf_float+0x192>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80066f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80066f8:	d006      	beq.n	8006708 <_scanf_float+0x25c>
 80066fa:	0550      	lsls	r0, r2, #21
 80066fc:	f57f af08 	bpl.w	8006510 <_scanf_float+0x64>
 8006700:	f1b9 0f00 	cmp.w	r9, #0
 8006704:	f000 80de 	beq.w	80068c4 <_scanf_float+0x418>
 8006708:	0591      	lsls	r1, r2, #22
 800670a:	bf58      	it	pl
 800670c:	9902      	ldrpl	r1, [sp, #8]
 800670e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006712:	bf58      	it	pl
 8006714:	eba9 0101 	subpl.w	r1, r9, r1
 8006718:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800671c:	bf58      	it	pl
 800671e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	f04f 0900 	mov.w	r9, #0
 8006728:	e789      	b.n	800663e <_scanf_float+0x192>
 800672a:	f04f 0a03 	mov.w	sl, #3
 800672e:	e786      	b.n	800663e <_scanf_float+0x192>
 8006730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006734:	4639      	mov	r1, r7
 8006736:	4640      	mov	r0, r8
 8006738:	4798      	blx	r3
 800673a:	2800      	cmp	r0, #0
 800673c:	f43f aedb 	beq.w	80064f6 <_scanf_float+0x4a>
 8006740:	e6e6      	b.n	8006510 <_scanf_float+0x64>
 8006742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006746:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800674a:	463a      	mov	r2, r7
 800674c:	4640      	mov	r0, r8
 800674e:	4798      	blx	r3
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	3b01      	subs	r3, #1
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	e6e8      	b.n	800652a <_scanf_float+0x7e>
 8006758:	1e6b      	subs	r3, r5, #1
 800675a:	2b06      	cmp	r3, #6
 800675c:	d824      	bhi.n	80067a8 <_scanf_float+0x2fc>
 800675e:	2d02      	cmp	r5, #2
 8006760:	d836      	bhi.n	80067d0 <_scanf_float+0x324>
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	429e      	cmp	r6, r3
 8006766:	f67f aee4 	bls.w	8006532 <_scanf_float+0x86>
 800676a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800676e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006772:	463a      	mov	r2, r7
 8006774:	4640      	mov	r0, r8
 8006776:	4798      	blx	r3
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	3b01      	subs	r3, #1
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	e7f0      	b.n	8006762 <_scanf_float+0x2b6>
 8006780:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006784:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006788:	463a      	mov	r2, r7
 800678a:	4640      	mov	r0, r8
 800678c:	4798      	blx	r3
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	3b01      	subs	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006798:	fa5f fa8a 	uxtb.w	sl, sl
 800679c:	f1ba 0f02 	cmp.w	sl, #2
 80067a0:	d1ee      	bne.n	8006780 <_scanf_float+0x2d4>
 80067a2:	3d03      	subs	r5, #3
 80067a4:	b2ed      	uxtb	r5, r5
 80067a6:	1b76      	subs	r6, r6, r5
 80067a8:	6823      	ldr	r3, [r4, #0]
 80067aa:	05da      	lsls	r2, r3, #23
 80067ac:	d530      	bpl.n	8006810 <_scanf_float+0x364>
 80067ae:	055b      	lsls	r3, r3, #21
 80067b0:	d511      	bpl.n	80067d6 <_scanf_float+0x32a>
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	429e      	cmp	r6, r3
 80067b6:	f67f aebc 	bls.w	8006532 <_scanf_float+0x86>
 80067ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067c2:	463a      	mov	r2, r7
 80067c4:	4640      	mov	r0, r8
 80067c6:	4798      	blx	r3
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	e7f0      	b.n	80067b2 <_scanf_float+0x306>
 80067d0:	46aa      	mov	sl, r5
 80067d2:	46b3      	mov	fp, r6
 80067d4:	e7de      	b.n	8006794 <_scanf_float+0x2e8>
 80067d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	2965      	cmp	r1, #101	@ 0x65
 80067de:	f103 33ff 	add.w	r3, r3, #4294967295
 80067e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	d00c      	beq.n	8006804 <_scanf_float+0x358>
 80067ea:	2945      	cmp	r1, #69	@ 0x45
 80067ec:	d00a      	beq.n	8006804 <_scanf_float+0x358>
 80067ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067f2:	463a      	mov	r2, r7
 80067f4:	4640      	mov	r0, r8
 80067f6:	4798      	blx	r3
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067fe:	3b01      	subs	r3, #1
 8006800:	1eb5      	subs	r5, r6, #2
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006808:	463a      	mov	r2, r7
 800680a:	4640      	mov	r0, r8
 800680c:	4798      	blx	r3
 800680e:	462e      	mov	r6, r5
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	f012 0210 	ands.w	r2, r2, #16
 8006816:	d001      	beq.n	800681c <_scanf_float+0x370>
 8006818:	2000      	movs	r0, #0
 800681a:	e68b      	b.n	8006534 <_scanf_float+0x88>
 800681c:	7032      	strb	r2, [r6, #0]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006828:	d11c      	bne.n	8006864 <_scanf_float+0x3b8>
 800682a:	9b02      	ldr	r3, [sp, #8]
 800682c:	454b      	cmp	r3, r9
 800682e:	eba3 0209 	sub.w	r2, r3, r9
 8006832:	d123      	bne.n	800687c <_scanf_float+0x3d0>
 8006834:	9901      	ldr	r1, [sp, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	4640      	mov	r0, r8
 800683a:	f002 fbf9 	bl	8009030 <_strtod_r>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	6821      	ldr	r1, [r4, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f011 0f02 	tst.w	r1, #2
 8006848:	ec57 6b10 	vmov	r6, r7, d0
 800684c:	f103 0204 	add.w	r2, r3, #4
 8006850:	d01f      	beq.n	8006892 <_scanf_float+0x3e6>
 8006852:	9903      	ldr	r1, [sp, #12]
 8006854:	600a      	str	r2, [r1, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	e9c3 6700 	strd	r6, r7, [r3]
 800685c:	68e3      	ldr	r3, [r4, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60e3      	str	r3, [r4, #12]
 8006862:	e7d9      	b.n	8006818 <_scanf_float+0x36c>
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0e4      	beq.n	8006834 <_scanf_float+0x388>
 800686a:	9905      	ldr	r1, [sp, #20]
 800686c:	230a      	movs	r3, #10
 800686e:	3101      	adds	r1, #1
 8006870:	4640      	mov	r0, r8
 8006872:	f002 fc5d 	bl	8009130 <_strtol_r>
 8006876:	9b04      	ldr	r3, [sp, #16]
 8006878:	9e05      	ldr	r6, [sp, #20]
 800687a:	1ac2      	subs	r2, r0, r3
 800687c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006880:	429e      	cmp	r6, r3
 8006882:	bf28      	it	cs
 8006884:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006888:	4910      	ldr	r1, [pc, #64]	@ (80068cc <_scanf_float+0x420>)
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f8e4 	bl	8006a58 <siprintf>
 8006890:	e7d0      	b.n	8006834 <_scanf_float+0x388>
 8006892:	f011 0f04 	tst.w	r1, #4
 8006896:	9903      	ldr	r1, [sp, #12]
 8006898:	600a      	str	r2, [r1, #0]
 800689a:	d1dc      	bne.n	8006856 <_scanf_float+0x3aa>
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	4632      	mov	r2, r6
 80068a0:	463b      	mov	r3, r7
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7fa f961 	bl	8000b6c <__aeabi_dcmpun>
 80068aa:	b128      	cbz	r0, 80068b8 <_scanf_float+0x40c>
 80068ac:	4808      	ldr	r0, [pc, #32]	@ (80068d0 <_scanf_float+0x424>)
 80068ae:	f000 f9b7 	bl	8006c20 <nanf>
 80068b2:	ed85 0a00 	vstr	s0, [r5]
 80068b6:	e7d1      	b.n	800685c <_scanf_float+0x3b0>
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7fa f9b4 	bl	8000c28 <__aeabi_d2f>
 80068c0:	6028      	str	r0, [r5, #0]
 80068c2:	e7cb      	b.n	800685c <_scanf_float+0x3b0>
 80068c4:	f04f 0900 	mov.w	r9, #0
 80068c8:	e629      	b.n	800651e <_scanf_float+0x72>
 80068ca:	bf00      	nop
 80068cc:	0800a340 	.word	0x0800a340
 80068d0:	0800a6d5 	.word	0x0800a6d5

080068d4 <std>:
 80068d4:	2300      	movs	r3, #0
 80068d6:	b510      	push	{r4, lr}
 80068d8:	4604      	mov	r4, r0
 80068da:	e9c0 3300 	strd	r3, r3, [r0]
 80068de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068e2:	6083      	str	r3, [r0, #8]
 80068e4:	8181      	strh	r1, [r0, #12]
 80068e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068e8:	81c2      	strh	r2, [r0, #14]
 80068ea:	6183      	str	r3, [r0, #24]
 80068ec:	4619      	mov	r1, r3
 80068ee:	2208      	movs	r2, #8
 80068f0:	305c      	adds	r0, #92	@ 0x5c
 80068f2:	f000 f914 	bl	8006b1e <memset>
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <std+0x58>)
 80068f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <std+0x5c>)
 80068fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <std+0x60>)
 8006900:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <std+0x64>)
 8006904:	6323      	str	r3, [r4, #48]	@ 0x30
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <std+0x68>)
 8006908:	6224      	str	r4, [r4, #32]
 800690a:	429c      	cmp	r4, r3
 800690c:	d006      	beq.n	800691c <std+0x48>
 800690e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006912:	4294      	cmp	r4, r2
 8006914:	d002      	beq.n	800691c <std+0x48>
 8006916:	33d0      	adds	r3, #208	@ 0xd0
 8006918:	429c      	cmp	r4, r3
 800691a:	d105      	bne.n	8006928 <std+0x54>
 800691c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	f000 b978 	b.w	8006c18 <__retarget_lock_init_recursive>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	bf00      	nop
 800692c:	08006a99 	.word	0x08006a99
 8006930:	08006abb 	.word	0x08006abb
 8006934:	08006af3 	.word	0x08006af3
 8006938:	08006b17 	.word	0x08006b17
 800693c:	20000474 	.word	0x20000474

08006940 <stdio_exit_handler>:
 8006940:	4a02      	ldr	r2, [pc, #8]	@ (800694c <stdio_exit_handler+0xc>)
 8006942:	4903      	ldr	r1, [pc, #12]	@ (8006950 <stdio_exit_handler+0x10>)
 8006944:	4803      	ldr	r0, [pc, #12]	@ (8006954 <stdio_exit_handler+0x14>)
 8006946:	f000 b869 	b.w	8006a1c <_fwalk_sglue>
 800694a:	bf00      	nop
 800694c:	200000f4 	.word	0x200000f4
 8006950:	080094ed 	.word	0x080094ed
 8006954:	20000104 	.word	0x20000104

08006958 <cleanup_stdio>:
 8006958:	6841      	ldr	r1, [r0, #4]
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <cleanup_stdio+0x34>)
 800695c:	4299      	cmp	r1, r3
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	d001      	beq.n	8006968 <cleanup_stdio+0x10>
 8006964:	f002 fdc2 	bl	80094ec <_fflush_r>
 8006968:	68a1      	ldr	r1, [r4, #8]
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <cleanup_stdio+0x38>)
 800696c:	4299      	cmp	r1, r3
 800696e:	d002      	beq.n	8006976 <cleanup_stdio+0x1e>
 8006970:	4620      	mov	r0, r4
 8006972:	f002 fdbb 	bl	80094ec <_fflush_r>
 8006976:	68e1      	ldr	r1, [r4, #12]
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <cleanup_stdio+0x3c>)
 800697a:	4299      	cmp	r1, r3
 800697c:	d004      	beq.n	8006988 <cleanup_stdio+0x30>
 800697e:	4620      	mov	r0, r4
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f002 bdb2 	b.w	80094ec <_fflush_r>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	20000474 	.word	0x20000474
 8006990:	200004dc 	.word	0x200004dc
 8006994:	20000544 	.word	0x20000544

08006998 <global_stdio_init.part.0>:
 8006998:	b510      	push	{r4, lr}
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <global_stdio_init.part.0+0x30>)
 800699c:	4c0b      	ldr	r4, [pc, #44]	@ (80069cc <global_stdio_init.part.0+0x34>)
 800699e:	4a0c      	ldr	r2, [pc, #48]	@ (80069d0 <global_stdio_init.part.0+0x38>)
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	4620      	mov	r0, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	2104      	movs	r1, #4
 80069a8:	f7ff ff94 	bl	80068d4 <std>
 80069ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069b0:	2201      	movs	r2, #1
 80069b2:	2109      	movs	r1, #9
 80069b4:	f7ff ff8e 	bl	80068d4 <std>
 80069b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069bc:	2202      	movs	r2, #2
 80069be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c2:	2112      	movs	r1, #18
 80069c4:	f7ff bf86 	b.w	80068d4 <std>
 80069c8:	200005ac 	.word	0x200005ac
 80069cc:	20000474 	.word	0x20000474
 80069d0:	08006941 	.word	0x08006941

080069d4 <__sfp_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__sfp_lock_acquire+0x8>)
 80069d6:	f000 b920 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	200005b5 	.word	0x200005b5

080069e0 <__sfp_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__sfp_lock_release+0x8>)
 80069e2:	f000 b91b 	b.w	8006c1c <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	200005b5 	.word	0x200005b5

080069ec <__sinit>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	f7ff fff0 	bl	80069d4 <__sfp_lock_acquire>
 80069f4:	6a23      	ldr	r3, [r4, #32]
 80069f6:	b11b      	cbz	r3, 8006a00 <__sinit+0x14>
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	f7ff bff0 	b.w	80069e0 <__sfp_lock_release>
 8006a00:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <__sinit+0x28>)
 8006a02:	6223      	str	r3, [r4, #32]
 8006a04:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <__sinit+0x2c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f5      	bne.n	80069f8 <__sinit+0xc>
 8006a0c:	f7ff ffc4 	bl	8006998 <global_stdio_init.part.0>
 8006a10:	e7f2      	b.n	80069f8 <__sinit+0xc>
 8006a12:	bf00      	nop
 8006a14:	08006959 	.word	0x08006959
 8006a18:	200005ac 	.word	0x200005ac

08006a1c <_fwalk_sglue>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4607      	mov	r7, r0
 8006a22:	4688      	mov	r8, r1
 8006a24:	4614      	mov	r4, r2
 8006a26:	2600      	movs	r6, #0
 8006a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a30:	d505      	bpl.n	8006a3e <_fwalk_sglue+0x22>
 8006a32:	6824      	ldr	r4, [r4, #0]
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	d1f7      	bne.n	8006a28 <_fwalk_sglue+0xc>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d907      	bls.n	8006a54 <_fwalk_sglue+0x38>
 8006a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	d003      	beq.n	8006a54 <_fwalk_sglue+0x38>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c0      	blx	r8
 8006a52:	4306      	orrs	r6, r0
 8006a54:	3568      	adds	r5, #104	@ 0x68
 8006a56:	e7e9      	b.n	8006a2c <_fwalk_sglue+0x10>

08006a58 <siprintf>:
 8006a58:	b40e      	push	{r1, r2, r3}
 8006a5a:	b500      	push	{lr}
 8006a5c:	b09c      	sub	sp, #112	@ 0x70
 8006a5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a68:	4809      	ldr	r0, [pc, #36]	@ (8006a90 <siprintf+0x38>)
 8006a6a:	9107      	str	r1, [sp, #28]
 8006a6c:	9104      	str	r1, [sp, #16]
 8006a6e:	4909      	ldr	r1, [pc, #36]	@ (8006a94 <siprintf+0x3c>)
 8006a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a74:	9105      	str	r1, [sp, #20]
 8006a76:	6800      	ldr	r0, [r0, #0]
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	a902      	add	r1, sp, #8
 8006a7c:	f002 fbb6 	bl	80091ec <_svfiprintf_r>
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	b01c      	add	sp, #112	@ 0x70
 8006a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a8c:	b003      	add	sp, #12
 8006a8e:	4770      	bx	lr
 8006a90:	20000100 	.word	0x20000100
 8006a94:	ffff0208 	.word	0xffff0208

08006a98 <__sread>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa0:	f000 f86c 	bl	8006b7c <_read_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	bfab      	itete	ge
 8006aa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8006aac:	181b      	addge	r3, r3, r0
 8006aae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ab2:	bfac      	ite	ge
 8006ab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ab6:	81a3      	strhlt	r3, [r4, #12]
 8006ab8:	bd10      	pop	{r4, pc}

08006aba <__swrite>:
 8006aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abe:	461f      	mov	r7, r3
 8006ac0:	898b      	ldrh	r3, [r1, #12]
 8006ac2:	05db      	lsls	r3, r3, #23
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4616      	mov	r6, r2
 8006aca:	d505      	bpl.n	8006ad8 <__swrite+0x1e>
 8006acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f000 f840 	bl	8006b58 <_lseek_r>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	4628      	mov	r0, r5
 8006aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	f000 b857 	b.w	8006ba0 <_write_r>

08006af2 <__sseek>:
 8006af2:	b510      	push	{r4, lr}
 8006af4:	460c      	mov	r4, r1
 8006af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afa:	f000 f82d 	bl	8006b58 <_lseek_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	bf15      	itete	ne
 8006b04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b0e:	81a3      	strheq	r3, [r4, #12]
 8006b10:	bf18      	it	ne
 8006b12:	81a3      	strhne	r3, [r4, #12]
 8006b14:	bd10      	pop	{r4, pc}

08006b16 <__sclose>:
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 b80d 	b.w	8006b38 <_close_r>

08006b1e <memset>:
 8006b1e:	4402      	add	r2, r0
 8006b20:	4603      	mov	r3, r0
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d100      	bne.n	8006b28 <memset+0xa>
 8006b26:	4770      	bx	lr
 8006b28:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2c:	e7f9      	b.n	8006b22 <memset+0x4>
	...

08006b30 <_localeconv_r>:
 8006b30:	4800      	ldr	r0, [pc, #0]	@ (8006b34 <_localeconv_r+0x4>)
 8006b32:	4770      	bx	lr
 8006b34:	20000240 	.word	0x20000240

08006b38 <_close_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d06      	ldr	r5, [pc, #24]	@ (8006b54 <_close_r+0x1c>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fb ff00 	bl	8002948 <_close>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_close_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_close_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	200005b0 	.word	0x200005b0

08006b58 <_lseek_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	@ (8006b78 <_lseek_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fb ff15 	bl	8002996 <_lseek>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_lseek_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_lseek_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200005b0 	.word	0x200005b0

08006b7c <_read_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d07      	ldr	r5, [pc, #28]	@ (8006b9c <_read_r+0x20>)
 8006b80:	4604      	mov	r4, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fb fea3 	bl	80028d6 <_read>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_read_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_read_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	200005b0 	.word	0x200005b0

08006ba0 <_write_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	@ (8006bc0 <_write_r+0x20>)
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fb feae 	bl	8002910 <_write>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_write_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_write_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	200005b0 	.word	0x200005b0

08006bc4 <__errno>:
 8006bc4:	4b01      	ldr	r3, [pc, #4]	@ (8006bcc <__errno+0x8>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000100 	.word	0x20000100

08006bd0 <__libc_init_array>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8006c08 <__libc_init_array+0x38>)
 8006bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8006c0c <__libc_init_array+0x3c>)
 8006bd6:	1b64      	subs	r4, r4, r5
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	2600      	movs	r6, #0
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	d109      	bne.n	8006bf4 <__libc_init_array+0x24>
 8006be0:	4d0b      	ldr	r5, [pc, #44]	@ (8006c10 <__libc_init_array+0x40>)
 8006be2:	4c0c      	ldr	r4, [pc, #48]	@ (8006c14 <__libc_init_array+0x44>)
 8006be4:	f003 fb72 	bl	800a2cc <_init>
 8006be8:	1b64      	subs	r4, r4, r5
 8006bea:	10a4      	asrs	r4, r4, #2
 8006bec:	2600      	movs	r6, #0
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	d105      	bne.n	8006bfe <__libc_init_array+0x2e>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf8:	4798      	blx	r3
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7ee      	b.n	8006bdc <__libc_init_array+0xc>
 8006bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c02:	4798      	blx	r3
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7f2      	b.n	8006bee <__libc_init_array+0x1e>
 8006c08:	0800a740 	.word	0x0800a740
 8006c0c:	0800a740 	.word	0x0800a740
 8006c10:	0800a740 	.word	0x0800a740
 8006c14:	0800a744 	.word	0x0800a744

08006c18 <__retarget_lock_init_recursive>:
 8006c18:	4770      	bx	lr

08006c1a <__retarget_lock_acquire_recursive>:
 8006c1a:	4770      	bx	lr

08006c1c <__retarget_lock_release_recursive>:
 8006c1c:	4770      	bx	lr
	...

08006c20 <nanf>:
 8006c20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c28 <nanf+0x8>
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	7fc00000 	.word	0x7fc00000

08006c2c <quorem>:
 8006c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	6903      	ldr	r3, [r0, #16]
 8006c32:	690c      	ldr	r4, [r1, #16]
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	4607      	mov	r7, r0
 8006c38:	db7e      	blt.n	8006d38 <quorem+0x10c>
 8006c3a:	3c01      	subs	r4, #1
 8006c3c:	f101 0814 	add.w	r8, r1, #20
 8006c40:	00a3      	lsls	r3, r4, #2
 8006c42:	f100 0514 	add.w	r5, r0, #20
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c56:	3301      	adds	r3, #1
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c62:	d32e      	bcc.n	8006cc2 <quorem+0x96>
 8006c64:	f04f 0a00 	mov.w	sl, #0
 8006c68:	46c4      	mov	ip, r8
 8006c6a:	46ae      	mov	lr, r5
 8006c6c:	46d3      	mov	fp, sl
 8006c6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c72:	b298      	uxth	r0, r3
 8006c74:	fb06 a000 	mla	r0, r6, r0, sl
 8006c78:	0c02      	lsrs	r2, r0, #16
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	fb06 2303 	mla	r3, r6, r3, r2
 8006c80:	f8de 2000 	ldr.w	r2, [lr]
 8006c84:	b280      	uxth	r0, r0
 8006c86:	b292      	uxth	r2, r2
 8006c88:	1a12      	subs	r2, r2, r0
 8006c8a:	445a      	add	r2, fp
 8006c8c:	f8de 0000 	ldr.w	r0, [lr]
 8006c90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ca4:	45e1      	cmp	r9, ip
 8006ca6:	f84e 2b04 	str.w	r2, [lr], #4
 8006caa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cae:	d2de      	bcs.n	8006c6e <quorem+0x42>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	58eb      	ldr	r3, [r5, r3]
 8006cb4:	b92b      	cbnz	r3, 8006cc2 <quorem+0x96>
 8006cb6:	9b01      	ldr	r3, [sp, #4]
 8006cb8:	3b04      	subs	r3, #4
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	d32f      	bcc.n	8006d20 <quorem+0xf4>
 8006cc0:	613c      	str	r4, [r7, #16]
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	f001 f9c4 	bl	8008050 <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	db25      	blt.n	8006d18 <quorem+0xec>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cd4:	f8d1 c000 	ldr.w	ip, [r1]
 8006cd8:	fa1f fe82 	uxth.w	lr, r2
 8006cdc:	fa1f f38c 	uxth.w	r3, ip
 8006ce0:	eba3 030e 	sub.w	r3, r3, lr
 8006ce4:	4403      	add	r3, r0
 8006ce6:	0c12      	lsrs	r2, r2, #16
 8006ce8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cf6:	45c1      	cmp	r9, r8
 8006cf8:	f841 3b04 	str.w	r3, [r1], #4
 8006cfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d00:	d2e6      	bcs.n	8006cd0 <quorem+0xa4>
 8006d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d0a:	b922      	cbnz	r2, 8006d16 <quorem+0xea>
 8006d0c:	3b04      	subs	r3, #4
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	d30b      	bcc.n	8006d2c <quorem+0x100>
 8006d14:	613c      	str	r4, [r7, #16]
 8006d16:	3601      	adds	r6, #1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	b003      	add	sp, #12
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	3b04      	subs	r3, #4
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	d1cb      	bne.n	8006cc0 <quorem+0x94>
 8006d28:	3c01      	subs	r4, #1
 8006d2a:	e7c6      	b.n	8006cba <quorem+0x8e>
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	3b04      	subs	r3, #4
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	d1ef      	bne.n	8006d14 <quorem+0xe8>
 8006d34:	3c01      	subs	r4, #1
 8006d36:	e7ea      	b.n	8006d0e <quorem+0xe2>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e7ee      	b.n	8006d1a <quorem+0xee>
 8006d3c:	0000      	movs	r0, r0
	...

08006d40 <_dtoa_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	69c7      	ldr	r7, [r0, #28]
 8006d46:	b099      	sub	sp, #100	@ 0x64
 8006d48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d4c:	ec55 4b10 	vmov	r4, r5, d0
 8006d50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d54:	4683      	mov	fp, r0
 8006d56:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d5a:	b97f      	cbnz	r7, 8006d7c <_dtoa_r+0x3c>
 8006d5c:	2010      	movs	r0, #16
 8006d5e:	f000 fdfd 	bl	800795c <malloc>
 8006d62:	4602      	mov	r2, r0
 8006d64:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d68:	b920      	cbnz	r0, 8006d74 <_dtoa_r+0x34>
 8006d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007008 <_dtoa_r+0x2c8>)
 8006d6c:	21ef      	movs	r1, #239	@ 0xef
 8006d6e:	48a7      	ldr	r0, [pc, #668]	@ (800700c <_dtoa_r+0x2cc>)
 8006d70:	f002 fc36 	bl	80095e0 <__assert_func>
 8006d74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d78:	6007      	str	r7, [r0, #0]
 8006d7a:	60c7      	str	r7, [r0, #12]
 8006d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d80:	6819      	ldr	r1, [r3, #0]
 8006d82:	b159      	cbz	r1, 8006d9c <_dtoa_r+0x5c>
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	604a      	str	r2, [r1, #4]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4093      	lsls	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f000 feda 	bl	8007b48 <_Bfree>
 8006d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	1e2b      	subs	r3, r5, #0
 8006d9e:	bfb9      	ittee	lt
 8006da0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006da4:	9303      	strlt	r3, [sp, #12]
 8006da6:	2300      	movge	r3, #0
 8006da8:	6033      	strge	r3, [r6, #0]
 8006daa:	9f03      	ldr	r7, [sp, #12]
 8006dac:	4b98      	ldr	r3, [pc, #608]	@ (8007010 <_dtoa_r+0x2d0>)
 8006dae:	bfbc      	itt	lt
 8006db0:	2201      	movlt	r2, #1
 8006db2:	6032      	strlt	r2, [r6, #0]
 8006db4:	43bb      	bics	r3, r7
 8006db6:	d112      	bne.n	8006dde <_dtoa_r+0x9e>
 8006db8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006dba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006dc4:	4323      	orrs	r3, r4
 8006dc6:	f000 854d 	beq.w	8007864 <_dtoa_r+0xb24>
 8006dca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007024 <_dtoa_r+0x2e4>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 854f 	beq.w	8007874 <_dtoa_r+0xb34>
 8006dd6:	f10a 0303 	add.w	r3, sl, #3
 8006dda:	f000 bd49 	b.w	8007870 <_dtoa_r+0xb30>
 8006dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	ec51 0b17 	vmov	r0, r1, d7
 8006de8:	2300      	movs	r3, #0
 8006dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006dee:	f7f9 fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 8006df2:	4680      	mov	r8, r0
 8006df4:	b158      	cbz	r0, 8006e0e <_dtoa_r+0xce>
 8006df6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006df8:	2301      	movs	r3, #1
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dfe:	b113      	cbz	r3, 8006e06 <_dtoa_r+0xc6>
 8006e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e02:	4b84      	ldr	r3, [pc, #528]	@ (8007014 <_dtoa_r+0x2d4>)
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007028 <_dtoa_r+0x2e8>
 8006e0a:	f000 bd33 	b.w	8007874 <_dtoa_r+0xb34>
 8006e0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e12:	aa16      	add	r2, sp, #88	@ 0x58
 8006e14:	a917      	add	r1, sp, #92	@ 0x5c
 8006e16:	4658      	mov	r0, fp
 8006e18:	f001 fa3a 	bl	8008290 <__d2b>
 8006e1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e20:	4681      	mov	r9, r0
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	d077      	beq.n	8006f16 <_dtoa_r+0x1d6>
 8006e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e40:	4619      	mov	r1, r3
 8006e42:	2200      	movs	r2, #0
 8006e44:	4b74      	ldr	r3, [pc, #464]	@ (8007018 <_dtoa_r+0x2d8>)
 8006e46:	f7f9 fa3f 	bl	80002c8 <__aeabi_dsub>
 8006e4a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ff0 <_dtoa_r+0x2b0>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fbf2 	bl	8000638 <__aeabi_dmul>
 8006e54:	a368      	add	r3, pc, #416	@ (adr r3, 8006ff8 <_dtoa_r+0x2b8>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 fa37 	bl	80002cc <__adddf3>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4630      	mov	r0, r6
 8006e62:	460d      	mov	r5, r1
 8006e64:	f7f9 fb7e 	bl	8000564 <__aeabi_i2d>
 8006e68:	a365      	add	r3, pc, #404	@ (adr r3, 8007000 <_dtoa_r+0x2c0>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f7f9 fbe3 	bl	8000638 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fa27 	bl	80002cc <__adddf3>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	460d      	mov	r5, r1
 8006e82:	f7f9 fe89 	bl	8000b98 <__aeabi_d2iz>
 8006e86:	2200      	movs	r2, #0
 8006e88:	4607      	mov	r7, r0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fe44 	bl	8000b1c <__aeabi_dcmplt>
 8006e94:	b140      	cbz	r0, 8006ea8 <_dtoa_r+0x168>
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7f9 fb64 	bl	8000564 <__aeabi_i2d>
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	f7f9 fe32 	bl	8000b08 <__aeabi_dcmpeq>
 8006ea4:	b900      	cbnz	r0, 8006ea8 <_dtoa_r+0x168>
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	2f16      	cmp	r7, #22
 8006eaa:	d851      	bhi.n	8006f50 <_dtoa_r+0x210>
 8006eac:	4b5b      	ldr	r3, [pc, #364]	@ (800701c <_dtoa_r+0x2dc>)
 8006eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eba:	f7f9 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d048      	beq.n	8006f54 <_dtoa_r+0x214>
 8006ec2:	3f01      	subs	r7, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006eca:	1b9b      	subs	r3, r3, r6
 8006ecc:	1e5a      	subs	r2, r3, #1
 8006ece:	bf44      	itt	mi
 8006ed0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ed4:	2300      	movmi	r3, #0
 8006ed6:	9208      	str	r2, [sp, #32]
 8006ed8:	bf54      	ite	pl
 8006eda:	f04f 0800 	movpl.w	r8, #0
 8006ede:	9308      	strmi	r3, [sp, #32]
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	db39      	blt.n	8006f58 <_dtoa_r+0x218>
 8006ee4:	9b08      	ldr	r3, [sp, #32]
 8006ee6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ee8:	443b      	add	r3, r7
 8006eea:	9308      	str	r3, [sp, #32]
 8006eec:	2300      	movs	r3, #0
 8006eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	d864      	bhi.n	8006fc0 <_dtoa_r+0x280>
 8006ef6:	2b05      	cmp	r3, #5
 8006ef8:	bfc4      	itt	gt
 8006efa:	3b04      	subgt	r3, #4
 8006efc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	f1a3 0302 	sub.w	r3, r3, #2
 8006f04:	bfcc      	ite	gt
 8006f06:	2400      	movgt	r4, #0
 8006f08:	2401      	movle	r4, #1
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d863      	bhi.n	8006fd6 <_dtoa_r+0x296>
 8006f0e:	e8df f003 	tbb	[pc, r3]
 8006f12:	372a      	.short	0x372a
 8006f14:	5535      	.short	0x5535
 8006f16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f1a:	441e      	add	r6, r3
 8006f1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	bfc1      	itttt	gt
 8006f24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f28:	409f      	lslgt	r7, r3
 8006f2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f32:	bfd6      	itet	le
 8006f34:	f1c3 0320 	rsble	r3, r3, #32
 8006f38:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f3c:	fa04 f003 	lslle.w	r0, r4, r3
 8006f40:	f7f9 fb00 	bl	8000544 <__aeabi_ui2d>
 8006f44:	2201      	movs	r2, #1
 8006f46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f4a:	3e01      	subs	r6, #1
 8006f4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f4e:	e777      	b.n	8006e40 <_dtoa_r+0x100>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7b8      	b.n	8006ec6 <_dtoa_r+0x186>
 8006f54:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f56:	e7b7      	b.n	8006ec8 <_dtoa_r+0x188>
 8006f58:	427b      	negs	r3, r7
 8006f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	eba8 0807 	sub.w	r8, r8, r7
 8006f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f64:	e7c4      	b.n	8006ef0 <_dtoa_r+0x1b0>
 8006f66:	2300      	movs	r3, #0
 8006f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc35      	bgt.n	8006fdc <_dtoa_r+0x29c>
 8006f70:	2301      	movs	r3, #1
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	9307      	str	r3, [sp, #28]
 8006f76:	461a      	mov	r2, r3
 8006f78:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f7a:	e00b      	b.n	8006f94 <_dtoa_r+0x254>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e7f3      	b.n	8006f68 <_dtoa_r+0x228>
 8006f80:	2300      	movs	r3, #0
 8006f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	9307      	str	r3, [sp, #28]
 8006f90:	bfb8      	it	lt
 8006f92:	2301      	movlt	r3, #1
 8006f94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	f102 0514 	add.w	r5, r2, #20
 8006fa0:	429d      	cmp	r5, r3
 8006fa2:	d91f      	bls.n	8006fe4 <_dtoa_r+0x2a4>
 8006fa4:	6041      	str	r1, [r0, #4]
 8006fa6:	4658      	mov	r0, fp
 8006fa8:	f000 fd8e 	bl	8007ac8 <_Balloc>
 8006fac:	4682      	mov	sl, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d13c      	bne.n	800702c <_dtoa_r+0x2ec>
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <_dtoa_r+0x2e0>)
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fba:	e6d8      	b.n	8006d6e <_dtoa_r+0x2e>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e7e0      	b.n	8006f82 <_dtoa_r+0x242>
 8006fc0:	2401      	movs	r4, #1
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2312      	movs	r3, #18
 8006fd4:	e7d0      	b.n	8006f78 <_dtoa_r+0x238>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fda:	e7f5      	b.n	8006fc8 <_dtoa_r+0x288>
 8006fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	e7d7      	b.n	8006f94 <_dtoa_r+0x254>
 8006fe4:	3101      	adds	r1, #1
 8006fe6:	0052      	lsls	r2, r2, #1
 8006fe8:	e7d8      	b.n	8006f9c <_dtoa_r+0x25c>
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w
 8006ff0:	636f4361 	.word	0x636f4361
 8006ff4:	3fd287a7 	.word	0x3fd287a7
 8006ff8:	8b60c8b3 	.word	0x8b60c8b3
 8006ffc:	3fc68a28 	.word	0x3fc68a28
 8007000:	509f79fb 	.word	0x509f79fb
 8007004:	3fd34413 	.word	0x3fd34413
 8007008:	0800a352 	.word	0x0800a352
 800700c:	0800a369 	.word	0x0800a369
 8007010:	7ff00000 	.word	0x7ff00000
 8007014:	0800a31d 	.word	0x0800a31d
 8007018:	3ff80000 	.word	0x3ff80000
 800701c:	0800a460 	.word	0x0800a460
 8007020:	0800a3c1 	.word	0x0800a3c1
 8007024:	0800a34e 	.word	0x0800a34e
 8007028:	0800a31c 	.word	0x0800a31c
 800702c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007030:	6018      	str	r0, [r3, #0]
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	2b0e      	cmp	r3, #14
 8007036:	f200 80a4 	bhi.w	8007182 <_dtoa_r+0x442>
 800703a:	2c00      	cmp	r4, #0
 800703c:	f000 80a1 	beq.w	8007182 <_dtoa_r+0x442>
 8007040:	2f00      	cmp	r7, #0
 8007042:	dd33      	ble.n	80070ac <_dtoa_r+0x36c>
 8007044:	4bad      	ldr	r3, [pc, #692]	@ (80072fc <_dtoa_r+0x5bc>)
 8007046:	f007 020f 	and.w	r2, r7, #15
 800704a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800704e:	ed93 7b00 	vldr	d7, [r3]
 8007052:	05f8      	lsls	r0, r7, #23
 8007054:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800705c:	d516      	bpl.n	800708c <_dtoa_r+0x34c>
 800705e:	4ba8      	ldr	r3, [pc, #672]	@ (8007300 <_dtoa_r+0x5c0>)
 8007060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007068:	f7f9 fc10 	bl	800088c <__aeabi_ddiv>
 800706c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007070:	f004 040f 	and.w	r4, r4, #15
 8007074:	2603      	movs	r6, #3
 8007076:	4da2      	ldr	r5, [pc, #648]	@ (8007300 <_dtoa_r+0x5c0>)
 8007078:	b954      	cbnz	r4, 8007090 <_dtoa_r+0x350>
 800707a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007082:	f7f9 fc03 	bl	800088c <__aeabi_ddiv>
 8007086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800708a:	e028      	b.n	80070de <_dtoa_r+0x39e>
 800708c:	2602      	movs	r6, #2
 800708e:	e7f2      	b.n	8007076 <_dtoa_r+0x336>
 8007090:	07e1      	lsls	r1, r4, #31
 8007092:	d508      	bpl.n	80070a6 <_dtoa_r+0x366>
 8007094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800709c:	f7f9 facc 	bl	8000638 <__aeabi_dmul>
 80070a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070a4:	3601      	adds	r6, #1
 80070a6:	1064      	asrs	r4, r4, #1
 80070a8:	3508      	adds	r5, #8
 80070aa:	e7e5      	b.n	8007078 <_dtoa_r+0x338>
 80070ac:	f000 80d2 	beq.w	8007254 <_dtoa_r+0x514>
 80070b0:	427c      	negs	r4, r7
 80070b2:	4b92      	ldr	r3, [pc, #584]	@ (80072fc <_dtoa_r+0x5bc>)
 80070b4:	4d92      	ldr	r5, [pc, #584]	@ (8007300 <_dtoa_r+0x5c0>)
 80070b6:	f004 020f 	and.w	r2, r4, #15
 80070ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070c6:	f7f9 fab7 	bl	8000638 <__aeabi_dmul>
 80070ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ce:	1124      	asrs	r4, r4, #4
 80070d0:	2300      	movs	r3, #0
 80070d2:	2602      	movs	r6, #2
 80070d4:	2c00      	cmp	r4, #0
 80070d6:	f040 80b2 	bne.w	800723e <_dtoa_r+0x4fe>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1d3      	bne.n	8007086 <_dtoa_r+0x346>
 80070de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80b7 	beq.w	8007258 <_dtoa_r+0x518>
 80070ea:	4b86      	ldr	r3, [pc, #536]	@ (8007304 <_dtoa_r+0x5c4>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f000 80ae 	beq.w	8007258 <_dtoa_r+0x518>
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80aa 	beq.w	8007258 <_dtoa_r+0x518>
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	dd37      	ble.n	800717a <_dtoa_r+0x43a>
 800710a:	1e7b      	subs	r3, r7, #1
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	4620      	mov	r0, r4
 8007110:	4b7d      	ldr	r3, [pc, #500]	@ (8007308 <_dtoa_r+0x5c8>)
 8007112:	2200      	movs	r2, #0
 8007114:	4629      	mov	r1, r5
 8007116:	f7f9 fa8f 	bl	8000638 <__aeabi_dmul>
 800711a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800711e:	9c00      	ldr	r4, [sp, #0]
 8007120:	3601      	adds	r6, #1
 8007122:	4630      	mov	r0, r6
 8007124:	f7f9 fa1e 	bl	8000564 <__aeabi_i2d>
 8007128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800712c:	f7f9 fa84 	bl	8000638 <__aeabi_dmul>
 8007130:	4b76      	ldr	r3, [pc, #472]	@ (800730c <_dtoa_r+0x5cc>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 f8ca 	bl	80002cc <__adddf3>
 8007138:	4605      	mov	r5, r0
 800713a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800713e:	2c00      	cmp	r4, #0
 8007140:	f040 808d 	bne.w	800725e <_dtoa_r+0x51e>
 8007144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007148:	4b71      	ldr	r3, [pc, #452]	@ (8007310 <_dtoa_r+0x5d0>)
 800714a:	2200      	movs	r2, #0
 800714c:	f7f9 f8bc 	bl	80002c8 <__aeabi_dsub>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007158:	462a      	mov	r2, r5
 800715a:	4633      	mov	r3, r6
 800715c:	f7f9 fcfc 	bl	8000b58 <__aeabi_dcmpgt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 828b 	bne.w	800767c <_dtoa_r+0x93c>
 8007166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716a:	462a      	mov	r2, r5
 800716c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007170:	f7f9 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8007174:	2800      	cmp	r0, #0
 8007176:	f040 8128 	bne.w	80073ca <_dtoa_r+0x68a>
 800717a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800717e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007184:	2b00      	cmp	r3, #0
 8007186:	f2c0 815a 	blt.w	800743e <_dtoa_r+0x6fe>
 800718a:	2f0e      	cmp	r7, #14
 800718c:	f300 8157 	bgt.w	800743e <_dtoa_r+0x6fe>
 8007190:	4b5a      	ldr	r3, [pc, #360]	@ (80072fc <_dtoa_r+0x5bc>)
 8007192:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007196:	ed93 7b00 	vldr	d7, [r3]
 800719a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	ed8d 7b00 	vstr	d7, [sp]
 80071a2:	da03      	bge.n	80071ac <_dtoa_r+0x46c>
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f340 8101 	ble.w	80073ae <_dtoa_r+0x66e>
 80071ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071b0:	4656      	mov	r6, sl
 80071b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 fb67 	bl	800088c <__aeabi_ddiv>
 80071be:	f7f9 fceb 	bl	8000b98 <__aeabi_d2iz>
 80071c2:	4680      	mov	r8, r0
 80071c4:	f7f9 f9ce 	bl	8000564 <__aeabi_i2d>
 80071c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071cc:	f7f9 fa34 	bl	8000638 <__aeabi_dmul>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071dc:	f7f9 f874 	bl	80002c8 <__aeabi_dsub>
 80071e0:	f806 4b01 	strb.w	r4, [r6], #1
 80071e4:	9d07      	ldr	r5, [sp, #28]
 80071e6:	eba6 040a 	sub.w	r4, r6, sl
 80071ea:	42a5      	cmp	r5, r4
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	f040 8117 	bne.w	8007422 <_dtoa_r+0x6e2>
 80071f4:	f7f9 f86a 	bl	80002cc <__adddf3>
 80071f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071fc:	4604      	mov	r4, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	f7f9 fcaa 	bl	8000b58 <__aeabi_dcmpgt>
 8007204:	2800      	cmp	r0, #0
 8007206:	f040 80f9 	bne.w	80073fc <_dtoa_r+0x6bc>
 800720a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8007216:	b118      	cbz	r0, 8007220 <_dtoa_r+0x4e0>
 8007218:	f018 0f01 	tst.w	r8, #1
 800721c:	f040 80ee 	bne.w	80073fc <_dtoa_r+0x6bc>
 8007220:	4649      	mov	r1, r9
 8007222:	4658      	mov	r0, fp
 8007224:	f000 fc90 	bl	8007b48 <_Bfree>
 8007228:	2300      	movs	r3, #0
 800722a:	7033      	strb	r3, [r6, #0]
 800722c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800722e:	3701      	adds	r7, #1
 8007230:	601f      	str	r7, [r3, #0]
 8007232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 831d 	beq.w	8007874 <_dtoa_r+0xb34>
 800723a:	601e      	str	r6, [r3, #0]
 800723c:	e31a      	b.n	8007874 <_dtoa_r+0xb34>
 800723e:	07e2      	lsls	r2, r4, #31
 8007240:	d505      	bpl.n	800724e <_dtoa_r+0x50e>
 8007242:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007246:	f7f9 f9f7 	bl	8000638 <__aeabi_dmul>
 800724a:	3601      	adds	r6, #1
 800724c:	2301      	movs	r3, #1
 800724e:	1064      	asrs	r4, r4, #1
 8007250:	3508      	adds	r5, #8
 8007252:	e73f      	b.n	80070d4 <_dtoa_r+0x394>
 8007254:	2602      	movs	r6, #2
 8007256:	e742      	b.n	80070de <_dtoa_r+0x39e>
 8007258:	9c07      	ldr	r4, [sp, #28]
 800725a:	9704      	str	r7, [sp, #16]
 800725c:	e761      	b.n	8007122 <_dtoa_r+0x3e2>
 800725e:	4b27      	ldr	r3, [pc, #156]	@ (80072fc <_dtoa_r+0x5bc>)
 8007260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800726a:	4454      	add	r4, sl
 800726c:	2900      	cmp	r1, #0
 800726e:	d053      	beq.n	8007318 <_dtoa_r+0x5d8>
 8007270:	4928      	ldr	r1, [pc, #160]	@ (8007314 <_dtoa_r+0x5d4>)
 8007272:	2000      	movs	r0, #0
 8007274:	f7f9 fb0a 	bl	800088c <__aeabi_ddiv>
 8007278:	4633      	mov	r3, r6
 800727a:	462a      	mov	r2, r5
 800727c:	f7f9 f824 	bl	80002c8 <__aeabi_dsub>
 8007280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007284:	4656      	mov	r6, sl
 8007286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728a:	f7f9 fc85 	bl	8000b98 <__aeabi_d2iz>
 800728e:	4605      	mov	r5, r0
 8007290:	f7f9 f968 	bl	8000564 <__aeabi_i2d>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729c:	f7f9 f814 	bl	80002c8 <__aeabi_dsub>
 80072a0:	3530      	adds	r5, #48	@ 0x30
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072aa:	f806 5b01 	strb.w	r5, [r6], #1
 80072ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072b2:	f7f9 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d171      	bne.n	800739e <_dtoa_r+0x65e>
 80072ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072be:	4911      	ldr	r1, [pc, #68]	@ (8007304 <_dtoa_r+0x5c4>)
 80072c0:	2000      	movs	r0, #0
 80072c2:	f7f9 f801 	bl	80002c8 <__aeabi_dsub>
 80072c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072ca:	f7f9 fc27 	bl	8000b1c <__aeabi_dcmplt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 8095 	bne.w	80073fe <_dtoa_r+0x6be>
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	f43f af50 	beq.w	800717a <_dtoa_r+0x43a>
 80072da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072de:	4b0a      	ldr	r3, [pc, #40]	@ (8007308 <_dtoa_r+0x5c8>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	f7f9 f9a9 	bl	8000638 <__aeabi_dmul>
 80072e6:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <_dtoa_r+0x5c8>)
 80072e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ec:	2200      	movs	r2, #0
 80072ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f2:	f7f9 f9a1 	bl	8000638 <__aeabi_dmul>
 80072f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fa:	e7c4      	b.n	8007286 <_dtoa_r+0x546>
 80072fc:	0800a460 	.word	0x0800a460
 8007300:	0800a438 	.word	0x0800a438
 8007304:	3ff00000 	.word	0x3ff00000
 8007308:	40240000 	.word	0x40240000
 800730c:	401c0000 	.word	0x401c0000
 8007310:	40140000 	.word	0x40140000
 8007314:	3fe00000 	.word	0x3fe00000
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	f7f9 f98c 	bl	8000638 <__aeabi_dmul>
 8007320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007324:	9415      	str	r4, [sp, #84]	@ 0x54
 8007326:	4656      	mov	r6, sl
 8007328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732c:	f7f9 fc34 	bl	8000b98 <__aeabi_d2iz>
 8007330:	4605      	mov	r5, r0
 8007332:	f7f9 f917 	bl	8000564 <__aeabi_i2d>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733e:	f7f8 ffc3 	bl	80002c8 <__aeabi_dsub>
 8007342:	3530      	adds	r5, #48	@ 0x30
 8007344:	f806 5b01 	strb.w	r5, [r6], #1
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	42a6      	cmp	r6, r4
 800734e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	d124      	bne.n	80073a2 <_dtoa_r+0x662>
 8007358:	4bac      	ldr	r3, [pc, #688]	@ (800760c <_dtoa_r+0x8cc>)
 800735a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800735e:	f7f8 ffb5 	bl	80002cc <__adddf3>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736a:	f7f9 fbf5 	bl	8000b58 <__aeabi_dcmpgt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d145      	bne.n	80073fe <_dtoa_r+0x6be>
 8007372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007376:	49a5      	ldr	r1, [pc, #660]	@ (800760c <_dtoa_r+0x8cc>)
 8007378:	2000      	movs	r0, #0
 800737a:	f7f8 ffa5 	bl	80002c8 <__aeabi_dsub>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007386:	f7f9 fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800738a:	2800      	cmp	r0, #0
 800738c:	f43f aef5 	beq.w	800717a <_dtoa_r+0x43a>
 8007390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007392:	1e73      	subs	r3, r6, #1
 8007394:	9315      	str	r3, [sp, #84]	@ 0x54
 8007396:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800739a:	2b30      	cmp	r3, #48	@ 0x30
 800739c:	d0f8      	beq.n	8007390 <_dtoa_r+0x650>
 800739e:	9f04      	ldr	r7, [sp, #16]
 80073a0:	e73e      	b.n	8007220 <_dtoa_r+0x4e0>
 80073a2:	4b9b      	ldr	r3, [pc, #620]	@ (8007610 <_dtoa_r+0x8d0>)
 80073a4:	f7f9 f948 	bl	8000638 <__aeabi_dmul>
 80073a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ac:	e7bc      	b.n	8007328 <_dtoa_r+0x5e8>
 80073ae:	d10c      	bne.n	80073ca <_dtoa_r+0x68a>
 80073b0:	4b98      	ldr	r3, [pc, #608]	@ (8007614 <_dtoa_r+0x8d4>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073b8:	f7f9 f93e 	bl	8000638 <__aeabi_dmul>
 80073bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c0:	f7f9 fbc0 	bl	8000b44 <__aeabi_dcmpge>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f000 8157 	beq.w	8007678 <_dtoa_r+0x938>
 80073ca:	2400      	movs	r4, #0
 80073cc:	4625      	mov	r5, r4
 80073ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073d0:	43db      	mvns	r3, r3
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	4656      	mov	r6, sl
 80073d6:	2700      	movs	r7, #0
 80073d8:	4621      	mov	r1, r4
 80073da:	4658      	mov	r0, fp
 80073dc:	f000 fbb4 	bl	8007b48 <_Bfree>
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	d0dc      	beq.n	800739e <_dtoa_r+0x65e>
 80073e4:	b12f      	cbz	r7, 80073f2 <_dtoa_r+0x6b2>
 80073e6:	42af      	cmp	r7, r5
 80073e8:	d003      	beq.n	80073f2 <_dtoa_r+0x6b2>
 80073ea:	4639      	mov	r1, r7
 80073ec:	4658      	mov	r0, fp
 80073ee:	f000 fbab 	bl	8007b48 <_Bfree>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4658      	mov	r0, fp
 80073f6:	f000 fba7 	bl	8007b48 <_Bfree>
 80073fa:	e7d0      	b.n	800739e <_dtoa_r+0x65e>
 80073fc:	9704      	str	r7, [sp, #16]
 80073fe:	4633      	mov	r3, r6
 8007400:	461e      	mov	r6, r3
 8007402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007406:	2a39      	cmp	r2, #57	@ 0x39
 8007408:	d107      	bne.n	800741a <_dtoa_r+0x6da>
 800740a:	459a      	cmp	sl, r3
 800740c:	d1f8      	bne.n	8007400 <_dtoa_r+0x6c0>
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	3201      	adds	r2, #1
 8007412:	9204      	str	r2, [sp, #16]
 8007414:	2230      	movs	r2, #48	@ 0x30
 8007416:	f88a 2000 	strb.w	r2, [sl]
 800741a:	781a      	ldrb	r2, [r3, #0]
 800741c:	3201      	adds	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e7bd      	b.n	800739e <_dtoa_r+0x65e>
 8007422:	4b7b      	ldr	r3, [pc, #492]	@ (8007610 <_dtoa_r+0x8d0>)
 8007424:	2200      	movs	r2, #0
 8007426:	f7f9 f907 	bl	8000638 <__aeabi_dmul>
 800742a:	2200      	movs	r2, #0
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	f7f9 fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8007436:	2800      	cmp	r0, #0
 8007438:	f43f aebb 	beq.w	80071b2 <_dtoa_r+0x472>
 800743c:	e6f0      	b.n	8007220 <_dtoa_r+0x4e0>
 800743e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007440:	2a00      	cmp	r2, #0
 8007442:	f000 80db 	beq.w	80075fc <_dtoa_r+0x8bc>
 8007446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007448:	2a01      	cmp	r2, #1
 800744a:	f300 80bf 	bgt.w	80075cc <_dtoa_r+0x88c>
 800744e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007450:	2a00      	cmp	r2, #0
 8007452:	f000 80b7 	beq.w	80075c4 <_dtoa_r+0x884>
 8007456:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800745a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800745c:	4646      	mov	r6, r8
 800745e:	9a08      	ldr	r2, [sp, #32]
 8007460:	2101      	movs	r1, #1
 8007462:	441a      	add	r2, r3
 8007464:	4658      	mov	r0, fp
 8007466:	4498      	add	r8, r3
 8007468:	9208      	str	r2, [sp, #32]
 800746a:	f000 fc6b 	bl	8007d44 <__i2b>
 800746e:	4605      	mov	r5, r0
 8007470:	b15e      	cbz	r6, 800748a <_dtoa_r+0x74a>
 8007472:	9b08      	ldr	r3, [sp, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd08      	ble.n	800748a <_dtoa_r+0x74a>
 8007478:	42b3      	cmp	r3, r6
 800747a:	9a08      	ldr	r2, [sp, #32]
 800747c:	bfa8      	it	ge
 800747e:	4633      	movge	r3, r6
 8007480:	eba8 0803 	sub.w	r8, r8, r3
 8007484:	1af6      	subs	r6, r6, r3
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800748c:	b1f3      	cbz	r3, 80074cc <_dtoa_r+0x78c>
 800748e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80b7 	beq.w	8007604 <_dtoa_r+0x8c4>
 8007496:	b18c      	cbz	r4, 80074bc <_dtoa_r+0x77c>
 8007498:	4629      	mov	r1, r5
 800749a:	4622      	mov	r2, r4
 800749c:	4658      	mov	r0, fp
 800749e:	f000 fd11 	bl	8007ec4 <__pow5mult>
 80074a2:	464a      	mov	r2, r9
 80074a4:	4601      	mov	r1, r0
 80074a6:	4605      	mov	r5, r0
 80074a8:	4658      	mov	r0, fp
 80074aa:	f000 fc61 	bl	8007d70 <__multiply>
 80074ae:	4649      	mov	r1, r9
 80074b0:	9004      	str	r0, [sp, #16]
 80074b2:	4658      	mov	r0, fp
 80074b4:	f000 fb48 	bl	8007b48 <_Bfree>
 80074b8:	9b04      	ldr	r3, [sp, #16]
 80074ba:	4699      	mov	r9, r3
 80074bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074be:	1b1a      	subs	r2, r3, r4
 80074c0:	d004      	beq.n	80074cc <_dtoa_r+0x78c>
 80074c2:	4649      	mov	r1, r9
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fcfd 	bl	8007ec4 <__pow5mult>
 80074ca:	4681      	mov	r9, r0
 80074cc:	2101      	movs	r1, #1
 80074ce:	4658      	mov	r0, fp
 80074d0:	f000 fc38 	bl	8007d44 <__i2b>
 80074d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d6:	4604      	mov	r4, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 81cf 	beq.w	800787c <_dtoa_r+0xb3c>
 80074de:	461a      	mov	r2, r3
 80074e0:	4601      	mov	r1, r0
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 fcee 	bl	8007ec4 <__pow5mult>
 80074e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	4604      	mov	r4, r0
 80074ee:	f300 8095 	bgt.w	800761c <_dtoa_r+0x8dc>
 80074f2:	9b02      	ldr	r3, [sp, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8087 	bne.w	8007608 <_dtoa_r+0x8c8>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8089 	bne.w	8007618 <_dtoa_r+0x8d8>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800750c:	0d1b      	lsrs	r3, r3, #20
 800750e:	051b      	lsls	r3, r3, #20
 8007510:	b12b      	cbz	r3, 800751e <_dtoa_r+0x7de>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	3301      	adds	r3, #1
 8007516:	9308      	str	r3, [sp, #32]
 8007518:	f108 0801 	add.w	r8, r8, #1
 800751c:	2301      	movs	r3, #1
 800751e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 81b0 	beq.w	8007888 <_dtoa_r+0xb48>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800752e:	6918      	ldr	r0, [r3, #16]
 8007530:	f000 fbbc 	bl	8007cac <__hi0bits>
 8007534:	f1c0 0020 	rsb	r0, r0, #32
 8007538:	9b08      	ldr	r3, [sp, #32]
 800753a:	4418      	add	r0, r3
 800753c:	f010 001f 	ands.w	r0, r0, #31
 8007540:	d077      	beq.n	8007632 <_dtoa_r+0x8f2>
 8007542:	f1c0 0320 	rsb	r3, r0, #32
 8007546:	2b04      	cmp	r3, #4
 8007548:	dd6b      	ble.n	8007622 <_dtoa_r+0x8e2>
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	f1c0 001c 	rsb	r0, r0, #28
 8007550:	4403      	add	r3, r0
 8007552:	4480      	add	r8, r0
 8007554:	4406      	add	r6, r0
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	f1b8 0f00 	cmp.w	r8, #0
 800755c:	dd05      	ble.n	800756a <_dtoa_r+0x82a>
 800755e:	4649      	mov	r1, r9
 8007560:	4642      	mov	r2, r8
 8007562:	4658      	mov	r0, fp
 8007564:	f000 fd08 	bl	8007f78 <__lshift>
 8007568:	4681      	mov	r9, r0
 800756a:	9b08      	ldr	r3, [sp, #32]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dd05      	ble.n	800757c <_dtoa_r+0x83c>
 8007570:	4621      	mov	r1, r4
 8007572:	461a      	mov	r2, r3
 8007574:	4658      	mov	r0, fp
 8007576:	f000 fcff 	bl	8007f78 <__lshift>
 800757a:	4604      	mov	r4, r0
 800757c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800757e:	2b00      	cmp	r3, #0
 8007580:	d059      	beq.n	8007636 <_dtoa_r+0x8f6>
 8007582:	4621      	mov	r1, r4
 8007584:	4648      	mov	r0, r9
 8007586:	f000 fd63 	bl	8008050 <__mcmp>
 800758a:	2800      	cmp	r0, #0
 800758c:	da53      	bge.n	8007636 <_dtoa_r+0x8f6>
 800758e:	1e7b      	subs	r3, r7, #1
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	4649      	mov	r1, r9
 8007594:	2300      	movs	r3, #0
 8007596:	220a      	movs	r2, #10
 8007598:	4658      	mov	r0, fp
 800759a:	f000 faf7 	bl	8007b8c <__multadd>
 800759e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a0:	4681      	mov	r9, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8172 	beq.w	800788c <_dtoa_r+0xb4c>
 80075a8:	2300      	movs	r3, #0
 80075aa:	4629      	mov	r1, r5
 80075ac:	220a      	movs	r2, #10
 80075ae:	4658      	mov	r0, fp
 80075b0:	f000 faec 	bl	8007b8c <__multadd>
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	4605      	mov	r5, r0
 80075ba:	dc67      	bgt.n	800768c <_dtoa_r+0x94c>
 80075bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075be:	2b02      	cmp	r3, #2
 80075c0:	dc41      	bgt.n	8007646 <_dtoa_r+0x906>
 80075c2:	e063      	b.n	800768c <_dtoa_r+0x94c>
 80075c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075ca:	e746      	b.n	800745a <_dtoa_r+0x71a>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	1e5c      	subs	r4, r3, #1
 80075d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	bfbf      	itttt	lt
 80075d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80075d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80075da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80075dc:	1ae3      	sublt	r3, r4, r3
 80075de:	bfb4      	ite	lt
 80075e0:	18d2      	addlt	r2, r2, r3
 80075e2:	1b1c      	subge	r4, r3, r4
 80075e4:	9b07      	ldr	r3, [sp, #28]
 80075e6:	bfbc      	itt	lt
 80075e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075ea:	2400      	movlt	r4, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bfb5      	itete	lt
 80075f0:	eba8 0603 	sublt.w	r6, r8, r3
 80075f4:	9b07      	ldrge	r3, [sp, #28]
 80075f6:	2300      	movlt	r3, #0
 80075f8:	4646      	movge	r6, r8
 80075fa:	e730      	b.n	800745e <_dtoa_r+0x71e>
 80075fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007600:	4646      	mov	r6, r8
 8007602:	e735      	b.n	8007470 <_dtoa_r+0x730>
 8007604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007606:	e75c      	b.n	80074c2 <_dtoa_r+0x782>
 8007608:	2300      	movs	r3, #0
 800760a:	e788      	b.n	800751e <_dtoa_r+0x7de>
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	40240000 	.word	0x40240000
 8007614:	40140000 	.word	0x40140000
 8007618:	9b02      	ldr	r3, [sp, #8]
 800761a:	e780      	b.n	800751e <_dtoa_r+0x7de>
 800761c:	2300      	movs	r3, #0
 800761e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007620:	e782      	b.n	8007528 <_dtoa_r+0x7e8>
 8007622:	d099      	beq.n	8007558 <_dtoa_r+0x818>
 8007624:	9a08      	ldr	r2, [sp, #32]
 8007626:	331c      	adds	r3, #28
 8007628:	441a      	add	r2, r3
 800762a:	4498      	add	r8, r3
 800762c:	441e      	add	r6, r3
 800762e:	9208      	str	r2, [sp, #32]
 8007630:	e792      	b.n	8007558 <_dtoa_r+0x818>
 8007632:	4603      	mov	r3, r0
 8007634:	e7f6      	b.n	8007624 <_dtoa_r+0x8e4>
 8007636:	9b07      	ldr	r3, [sp, #28]
 8007638:	9704      	str	r7, [sp, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dc20      	bgt.n	8007680 <_dtoa_r+0x940>
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007642:	2b02      	cmp	r3, #2
 8007644:	dd1e      	ble.n	8007684 <_dtoa_r+0x944>
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f47f aec0 	bne.w	80073ce <_dtoa_r+0x68e>
 800764e:	4621      	mov	r1, r4
 8007650:	2205      	movs	r2, #5
 8007652:	4658      	mov	r0, fp
 8007654:	f000 fa9a 	bl	8007b8c <__multadd>
 8007658:	4601      	mov	r1, r0
 800765a:	4604      	mov	r4, r0
 800765c:	4648      	mov	r0, r9
 800765e:	f000 fcf7 	bl	8008050 <__mcmp>
 8007662:	2800      	cmp	r0, #0
 8007664:	f77f aeb3 	ble.w	80073ce <_dtoa_r+0x68e>
 8007668:	4656      	mov	r6, sl
 800766a:	2331      	movs	r3, #49	@ 0x31
 800766c:	f806 3b01 	strb.w	r3, [r6], #1
 8007670:	9b04      	ldr	r3, [sp, #16]
 8007672:	3301      	adds	r3, #1
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	e6ae      	b.n	80073d6 <_dtoa_r+0x696>
 8007678:	9c07      	ldr	r4, [sp, #28]
 800767a:	9704      	str	r7, [sp, #16]
 800767c:	4625      	mov	r5, r4
 800767e:	e7f3      	b.n	8007668 <_dtoa_r+0x928>
 8007680:	9b07      	ldr	r3, [sp, #28]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8104 	beq.w	8007894 <_dtoa_r+0xb54>
 800768c:	2e00      	cmp	r6, #0
 800768e:	dd05      	ble.n	800769c <_dtoa_r+0x95c>
 8007690:	4629      	mov	r1, r5
 8007692:	4632      	mov	r2, r6
 8007694:	4658      	mov	r0, fp
 8007696:	f000 fc6f 	bl	8007f78 <__lshift>
 800769a:	4605      	mov	r5, r0
 800769c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d05a      	beq.n	8007758 <_dtoa_r+0xa18>
 80076a2:	6869      	ldr	r1, [r5, #4]
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fa0f 	bl	8007ac8 <_Balloc>
 80076aa:	4606      	mov	r6, r0
 80076ac:	b928      	cbnz	r0, 80076ba <_dtoa_r+0x97a>
 80076ae:	4b84      	ldr	r3, [pc, #528]	@ (80078c0 <_dtoa_r+0xb80>)
 80076b0:	4602      	mov	r2, r0
 80076b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80076b6:	f7ff bb5a 	b.w	8006d6e <_dtoa_r+0x2e>
 80076ba:	692a      	ldr	r2, [r5, #16]
 80076bc:	3202      	adds	r2, #2
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	f105 010c 	add.w	r1, r5, #12
 80076c4:	300c      	adds	r0, #12
 80076c6:	f001 ff75 	bl	80095b4 <memcpy>
 80076ca:	2201      	movs	r2, #1
 80076cc:	4631      	mov	r1, r6
 80076ce:	4658      	mov	r0, fp
 80076d0:	f000 fc52 	bl	8007f78 <__lshift>
 80076d4:	f10a 0301 	add.w	r3, sl, #1
 80076d8:	9307      	str	r3, [sp, #28]
 80076da:	9b00      	ldr	r3, [sp, #0]
 80076dc:	4453      	add	r3, sl
 80076de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	462f      	mov	r7, r5
 80076e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ea:	4605      	mov	r5, r0
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	4621      	mov	r1, r4
 80076f0:	3b01      	subs	r3, #1
 80076f2:	4648      	mov	r0, r9
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f7ff fa99 	bl	8006c2c <quorem>
 80076fa:	4639      	mov	r1, r7
 80076fc:	9002      	str	r0, [sp, #8]
 80076fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007702:	4648      	mov	r0, r9
 8007704:	f000 fca4 	bl	8008050 <__mcmp>
 8007708:	462a      	mov	r2, r5
 800770a:	9008      	str	r0, [sp, #32]
 800770c:	4621      	mov	r1, r4
 800770e:	4658      	mov	r0, fp
 8007710:	f000 fcba 	bl	8008088 <__mdiff>
 8007714:	68c2      	ldr	r2, [r0, #12]
 8007716:	4606      	mov	r6, r0
 8007718:	bb02      	cbnz	r2, 800775c <_dtoa_r+0xa1c>
 800771a:	4601      	mov	r1, r0
 800771c:	4648      	mov	r0, r9
 800771e:	f000 fc97 	bl	8008050 <__mcmp>
 8007722:	4602      	mov	r2, r0
 8007724:	4631      	mov	r1, r6
 8007726:	4658      	mov	r0, fp
 8007728:	920e      	str	r2, [sp, #56]	@ 0x38
 800772a:	f000 fa0d 	bl	8007b48 <_Bfree>
 800772e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007732:	9e07      	ldr	r6, [sp, #28]
 8007734:	ea43 0102 	orr.w	r1, r3, r2
 8007738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773a:	4319      	orrs	r1, r3
 800773c:	d110      	bne.n	8007760 <_dtoa_r+0xa20>
 800773e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007742:	d029      	beq.n	8007798 <_dtoa_r+0xa58>
 8007744:	9b08      	ldr	r3, [sp, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	dd02      	ble.n	8007750 <_dtoa_r+0xa10>
 800774a:	9b02      	ldr	r3, [sp, #8]
 800774c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007750:	9b00      	ldr	r3, [sp, #0]
 8007752:	f883 8000 	strb.w	r8, [r3]
 8007756:	e63f      	b.n	80073d8 <_dtoa_r+0x698>
 8007758:	4628      	mov	r0, r5
 800775a:	e7bb      	b.n	80076d4 <_dtoa_r+0x994>
 800775c:	2201      	movs	r2, #1
 800775e:	e7e1      	b.n	8007724 <_dtoa_r+0x9e4>
 8007760:	9b08      	ldr	r3, [sp, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	db04      	blt.n	8007770 <_dtoa_r+0xa30>
 8007766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007768:	430b      	orrs	r3, r1
 800776a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800776c:	430b      	orrs	r3, r1
 800776e:	d120      	bne.n	80077b2 <_dtoa_r+0xa72>
 8007770:	2a00      	cmp	r2, #0
 8007772:	dded      	ble.n	8007750 <_dtoa_r+0xa10>
 8007774:	4649      	mov	r1, r9
 8007776:	2201      	movs	r2, #1
 8007778:	4658      	mov	r0, fp
 800777a:	f000 fbfd 	bl	8007f78 <__lshift>
 800777e:	4621      	mov	r1, r4
 8007780:	4681      	mov	r9, r0
 8007782:	f000 fc65 	bl	8008050 <__mcmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	dc03      	bgt.n	8007792 <_dtoa_r+0xa52>
 800778a:	d1e1      	bne.n	8007750 <_dtoa_r+0xa10>
 800778c:	f018 0f01 	tst.w	r8, #1
 8007790:	d0de      	beq.n	8007750 <_dtoa_r+0xa10>
 8007792:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007796:	d1d8      	bne.n	800774a <_dtoa_r+0xa0a>
 8007798:	9a00      	ldr	r2, [sp, #0]
 800779a:	2339      	movs	r3, #57	@ 0x39
 800779c:	7013      	strb	r3, [r2, #0]
 800779e:	4633      	mov	r3, r6
 80077a0:	461e      	mov	r6, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077a8:	2a39      	cmp	r2, #57	@ 0x39
 80077aa:	d052      	beq.n	8007852 <_dtoa_r+0xb12>
 80077ac:	3201      	adds	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e612      	b.n	80073d8 <_dtoa_r+0x698>
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	dd07      	ble.n	80077c6 <_dtoa_r+0xa86>
 80077b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077ba:	d0ed      	beq.n	8007798 <_dtoa_r+0xa58>
 80077bc:	9a00      	ldr	r2, [sp, #0]
 80077be:	f108 0301 	add.w	r3, r8, #1
 80077c2:	7013      	strb	r3, [r2, #0]
 80077c4:	e608      	b.n	80073d8 <_dtoa_r+0x698>
 80077c6:	9b07      	ldr	r3, [sp, #28]
 80077c8:	9a07      	ldr	r2, [sp, #28]
 80077ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80077ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d028      	beq.n	8007826 <_dtoa_r+0xae6>
 80077d4:	4649      	mov	r1, r9
 80077d6:	2300      	movs	r3, #0
 80077d8:	220a      	movs	r2, #10
 80077da:	4658      	mov	r0, fp
 80077dc:	f000 f9d6 	bl	8007b8c <__multadd>
 80077e0:	42af      	cmp	r7, r5
 80077e2:	4681      	mov	r9, r0
 80077e4:	f04f 0300 	mov.w	r3, #0
 80077e8:	f04f 020a 	mov.w	r2, #10
 80077ec:	4639      	mov	r1, r7
 80077ee:	4658      	mov	r0, fp
 80077f0:	d107      	bne.n	8007802 <_dtoa_r+0xac2>
 80077f2:	f000 f9cb 	bl	8007b8c <__multadd>
 80077f6:	4607      	mov	r7, r0
 80077f8:	4605      	mov	r5, r0
 80077fa:	9b07      	ldr	r3, [sp, #28]
 80077fc:	3301      	adds	r3, #1
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	e774      	b.n	80076ec <_dtoa_r+0x9ac>
 8007802:	f000 f9c3 	bl	8007b8c <__multadd>
 8007806:	4629      	mov	r1, r5
 8007808:	4607      	mov	r7, r0
 800780a:	2300      	movs	r3, #0
 800780c:	220a      	movs	r2, #10
 800780e:	4658      	mov	r0, fp
 8007810:	f000 f9bc 	bl	8007b8c <__multadd>
 8007814:	4605      	mov	r5, r0
 8007816:	e7f0      	b.n	80077fa <_dtoa_r+0xaba>
 8007818:	9b00      	ldr	r3, [sp, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfcc      	ite	gt
 800781e:	461e      	movgt	r6, r3
 8007820:	2601      	movle	r6, #1
 8007822:	4456      	add	r6, sl
 8007824:	2700      	movs	r7, #0
 8007826:	4649      	mov	r1, r9
 8007828:	2201      	movs	r2, #1
 800782a:	4658      	mov	r0, fp
 800782c:	f000 fba4 	bl	8007f78 <__lshift>
 8007830:	4621      	mov	r1, r4
 8007832:	4681      	mov	r9, r0
 8007834:	f000 fc0c 	bl	8008050 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	dcb0      	bgt.n	800779e <_dtoa_r+0xa5e>
 800783c:	d102      	bne.n	8007844 <_dtoa_r+0xb04>
 800783e:	f018 0f01 	tst.w	r8, #1
 8007842:	d1ac      	bne.n	800779e <_dtoa_r+0xa5e>
 8007844:	4633      	mov	r3, r6
 8007846:	461e      	mov	r6, r3
 8007848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800784c:	2a30      	cmp	r2, #48	@ 0x30
 800784e:	d0fa      	beq.n	8007846 <_dtoa_r+0xb06>
 8007850:	e5c2      	b.n	80073d8 <_dtoa_r+0x698>
 8007852:	459a      	cmp	sl, r3
 8007854:	d1a4      	bne.n	80077a0 <_dtoa_r+0xa60>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	2331      	movs	r3, #49	@ 0x31
 800785e:	f88a 3000 	strb.w	r3, [sl]
 8007862:	e5b9      	b.n	80073d8 <_dtoa_r+0x698>
 8007864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007866:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80078c4 <_dtoa_r+0xb84>
 800786a:	b11b      	cbz	r3, 8007874 <_dtoa_r+0xb34>
 800786c:	f10a 0308 	add.w	r3, sl, #8
 8007870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4650      	mov	r0, sl
 8007876:	b019      	add	sp, #100	@ 0x64
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787e:	2b01      	cmp	r3, #1
 8007880:	f77f ae37 	ble.w	80074f2 <_dtoa_r+0x7b2>
 8007884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007886:	930a      	str	r3, [sp, #40]	@ 0x28
 8007888:	2001      	movs	r0, #1
 800788a:	e655      	b.n	8007538 <_dtoa_r+0x7f8>
 800788c:	9b00      	ldr	r3, [sp, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f77f aed6 	ble.w	8007640 <_dtoa_r+0x900>
 8007894:	4656      	mov	r6, sl
 8007896:	4621      	mov	r1, r4
 8007898:	4648      	mov	r0, r9
 800789a:	f7ff f9c7 	bl	8006c2c <quorem>
 800789e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078a2:	f806 8b01 	strb.w	r8, [r6], #1
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	eba6 020a 	sub.w	r2, r6, sl
 80078ac:	4293      	cmp	r3, r2
 80078ae:	ddb3      	ble.n	8007818 <_dtoa_r+0xad8>
 80078b0:	4649      	mov	r1, r9
 80078b2:	2300      	movs	r3, #0
 80078b4:	220a      	movs	r2, #10
 80078b6:	4658      	mov	r0, fp
 80078b8:	f000 f968 	bl	8007b8c <__multadd>
 80078bc:	4681      	mov	r9, r0
 80078be:	e7ea      	b.n	8007896 <_dtoa_r+0xb56>
 80078c0:	0800a3c1 	.word	0x0800a3c1
 80078c4:	0800a345 	.word	0x0800a345

080078c8 <_free_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4605      	mov	r5, r0
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d041      	beq.n	8007954 <_free_r+0x8c>
 80078d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d4:	1f0c      	subs	r4, r1, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bfb8      	it	lt
 80078da:	18e4      	addlt	r4, r4, r3
 80078dc:	f000 f8e8 	bl	8007ab0 <__malloc_lock>
 80078e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007958 <_free_r+0x90>)
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	b933      	cbnz	r3, 80078f4 <_free_r+0x2c>
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	6014      	str	r4, [r2, #0]
 80078ea:	4628      	mov	r0, r5
 80078ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f0:	f000 b8e4 	b.w	8007abc <__malloc_unlock>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d908      	bls.n	800790a <_free_r+0x42>
 80078f8:	6820      	ldr	r0, [r4, #0]
 80078fa:	1821      	adds	r1, r4, r0
 80078fc:	428b      	cmp	r3, r1
 80078fe:	bf01      	itttt	eq
 8007900:	6819      	ldreq	r1, [r3, #0]
 8007902:	685b      	ldreq	r3, [r3, #4]
 8007904:	1809      	addeq	r1, r1, r0
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	e7ed      	b.n	80078e6 <_free_r+0x1e>
 800790a:	461a      	mov	r2, r3
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b10b      	cbz	r3, 8007914 <_free_r+0x4c>
 8007910:	42a3      	cmp	r3, r4
 8007912:	d9fa      	bls.n	800790a <_free_r+0x42>
 8007914:	6811      	ldr	r1, [r2, #0]
 8007916:	1850      	adds	r0, r2, r1
 8007918:	42a0      	cmp	r0, r4
 800791a:	d10b      	bne.n	8007934 <_free_r+0x6c>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	4401      	add	r1, r0
 8007920:	1850      	adds	r0, r2, r1
 8007922:	4283      	cmp	r3, r0
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	d1e0      	bne.n	80078ea <_free_r+0x22>
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	6053      	str	r3, [r2, #4]
 800792e:	4408      	add	r0, r1
 8007930:	6010      	str	r0, [r2, #0]
 8007932:	e7da      	b.n	80078ea <_free_r+0x22>
 8007934:	d902      	bls.n	800793c <_free_r+0x74>
 8007936:	230c      	movs	r3, #12
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	e7d6      	b.n	80078ea <_free_r+0x22>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	1821      	adds	r1, r4, r0
 8007940:	428b      	cmp	r3, r1
 8007942:	bf04      	itt	eq
 8007944:	6819      	ldreq	r1, [r3, #0]
 8007946:	685b      	ldreq	r3, [r3, #4]
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	bf04      	itt	eq
 800794c:	1809      	addeq	r1, r1, r0
 800794e:	6021      	streq	r1, [r4, #0]
 8007950:	6054      	str	r4, [r2, #4]
 8007952:	e7ca      	b.n	80078ea <_free_r+0x22>
 8007954:	bd38      	pop	{r3, r4, r5, pc}
 8007956:	bf00      	nop
 8007958:	200005bc 	.word	0x200005bc

0800795c <malloc>:
 800795c:	4b02      	ldr	r3, [pc, #8]	@ (8007968 <malloc+0xc>)
 800795e:	4601      	mov	r1, r0
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f000 b825 	b.w	80079b0 <_malloc_r>
 8007966:	bf00      	nop
 8007968:	20000100 	.word	0x20000100

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0f      	ldr	r6, [pc, #60]	@ (80079ac <sbrk_aligned+0x40>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f001 fe0c 	bl	8009594 <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f001 fe07 	bl	8009594 <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d103      	bne.n	8007992 <sbrk_aligned+0x26>
 800798a:	f04f 34ff 	mov.w	r4, #4294967295
 800798e:	4620      	mov	r0, r4
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	1cc4      	adds	r4, r0, #3
 8007994:	f024 0403 	bic.w	r4, r4, #3
 8007998:	42a0      	cmp	r0, r4
 800799a:	d0f8      	beq.n	800798e <sbrk_aligned+0x22>
 800799c:	1a21      	subs	r1, r4, r0
 800799e:	4628      	mov	r0, r5
 80079a0:	f001 fdf8 	bl	8009594 <_sbrk_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1f2      	bne.n	800798e <sbrk_aligned+0x22>
 80079a8:	e7ef      	b.n	800798a <sbrk_aligned+0x1e>
 80079aa:	bf00      	nop
 80079ac:	200005b8 	.word	0x200005b8

080079b0 <_malloc_r>:
 80079b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	1ccd      	adds	r5, r1, #3
 80079b6:	f025 0503 	bic.w	r5, r5, #3
 80079ba:	3508      	adds	r5, #8
 80079bc:	2d0c      	cmp	r5, #12
 80079be:	bf38      	it	cc
 80079c0:	250c      	movcc	r5, #12
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	4606      	mov	r6, r0
 80079c6:	db01      	blt.n	80079cc <_malloc_r+0x1c>
 80079c8:	42a9      	cmp	r1, r5
 80079ca:	d904      	bls.n	80079d6 <_malloc_r+0x26>
 80079cc:	230c      	movs	r3, #12
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	2000      	movs	r0, #0
 80079d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007aac <_malloc_r+0xfc>
 80079da:	f000 f869 	bl	8007ab0 <__malloc_lock>
 80079de:	f8d8 3000 	ldr.w	r3, [r8]
 80079e2:	461c      	mov	r4, r3
 80079e4:	bb44      	cbnz	r4, 8007a38 <_malloc_r+0x88>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff ffbf 	bl	800796c <sbrk_aligned>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	4604      	mov	r4, r0
 80079f2:	d158      	bne.n	8007aa6 <_malloc_r+0xf6>
 80079f4:	f8d8 4000 	ldr.w	r4, [r8]
 80079f8:	4627      	mov	r7, r4
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	d143      	bne.n	8007a86 <_malloc_r+0xd6>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	d04b      	beq.n	8007a9a <_malloc_r+0xea>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4639      	mov	r1, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	eb04 0903 	add.w	r9, r4, r3
 8007a0c:	f001 fdc2 	bl	8009594 <_sbrk_r>
 8007a10:	4581      	cmp	r9, r0
 8007a12:	d142      	bne.n	8007a9a <_malloc_r+0xea>
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	1a6d      	subs	r5, r5, r1
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ffa6 	bl	800796c <sbrk_aligned>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d03a      	beq.n	8007a9a <_malloc_r+0xea>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	442b      	add	r3, r5
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	bb62      	cbnz	r2, 8007a8c <_malloc_r+0xdc>
 8007a32:	f8c8 7000 	str.w	r7, [r8]
 8007a36:	e00f      	b.n	8007a58 <_malloc_r+0xa8>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	1b52      	subs	r2, r2, r5
 8007a3c:	d420      	bmi.n	8007a80 <_malloc_r+0xd0>
 8007a3e:	2a0b      	cmp	r2, #11
 8007a40:	d917      	bls.n	8007a72 <_malloc_r+0xc2>
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	6025      	str	r5, [r4, #0]
 8007a48:	bf18      	it	ne
 8007a4a:	6059      	strne	r1, [r3, #4]
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	bf08      	it	eq
 8007a50:	f8c8 1000 	streq.w	r1, [r8]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f82f 	bl	8007abc <__malloc_unlock>
 8007a5e:	f104 000b 	add.w	r0, r4, #11
 8007a62:	1d23      	adds	r3, r4, #4
 8007a64:	f020 0007 	bic.w	r0, r0, #7
 8007a68:	1ac2      	subs	r2, r0, r3
 8007a6a:	bf1c      	itt	ne
 8007a6c:	1a1b      	subne	r3, r3, r0
 8007a6e:	50a3      	strne	r3, [r4, r2]
 8007a70:	e7af      	b.n	80079d2 <_malloc_r+0x22>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	bf0c      	ite	eq
 8007a78:	f8c8 2000 	streq.w	r2, [r8]
 8007a7c:	605a      	strne	r2, [r3, #4]
 8007a7e:	e7eb      	b.n	8007a58 <_malloc_r+0xa8>
 8007a80:	4623      	mov	r3, r4
 8007a82:	6864      	ldr	r4, [r4, #4]
 8007a84:	e7ae      	b.n	80079e4 <_malloc_r+0x34>
 8007a86:	463c      	mov	r4, r7
 8007a88:	687f      	ldr	r7, [r7, #4]
 8007a8a:	e7b6      	b.n	80079fa <_malloc_r+0x4a>
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d1fb      	bne.n	8007a8c <_malloc_r+0xdc>
 8007a94:	2300      	movs	r3, #0
 8007a96:	6053      	str	r3, [r2, #4]
 8007a98:	e7de      	b.n	8007a58 <_malloc_r+0xa8>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	6033      	str	r3, [r6, #0]
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f80c 	bl	8007abc <__malloc_unlock>
 8007aa4:	e794      	b.n	80079d0 <_malloc_r+0x20>
 8007aa6:	6005      	str	r5, [r0, #0]
 8007aa8:	e7d6      	b.n	8007a58 <_malloc_r+0xa8>
 8007aaa:	bf00      	nop
 8007aac:	200005bc 	.word	0x200005bc

08007ab0 <__malloc_lock>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	@ (8007ab8 <__malloc_lock+0x8>)
 8007ab2:	f7ff b8b2 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	200005b4 	.word	0x200005b4

08007abc <__malloc_unlock>:
 8007abc:	4801      	ldr	r0, [pc, #4]	@ (8007ac4 <__malloc_unlock+0x8>)
 8007abe:	f7ff b8ad 	b.w	8006c1c <__retarget_lock_release_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	200005b4 	.word	0x200005b4

08007ac8 <_Balloc>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	69c6      	ldr	r6, [r0, #28]
 8007acc:	4604      	mov	r4, r0
 8007ace:	460d      	mov	r5, r1
 8007ad0:	b976      	cbnz	r6, 8007af0 <_Balloc+0x28>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f7ff ff42 	bl	800795c <malloc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	61e0      	str	r0, [r4, #28]
 8007adc:	b920      	cbnz	r0, 8007ae8 <_Balloc+0x20>
 8007ade:	4b18      	ldr	r3, [pc, #96]	@ (8007b40 <_Balloc+0x78>)
 8007ae0:	4818      	ldr	r0, [pc, #96]	@ (8007b44 <_Balloc+0x7c>)
 8007ae2:	216b      	movs	r1, #107	@ 0x6b
 8007ae4:	f001 fd7c 	bl	80095e0 <__assert_func>
 8007ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aec:	6006      	str	r6, [r0, #0]
 8007aee:	60c6      	str	r6, [r0, #12]
 8007af0:	69e6      	ldr	r6, [r4, #28]
 8007af2:	68f3      	ldr	r3, [r6, #12]
 8007af4:	b183      	cbz	r3, 8007b18 <_Balloc+0x50>
 8007af6:	69e3      	ldr	r3, [r4, #28]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007afe:	b9b8      	cbnz	r0, 8007b30 <_Balloc+0x68>
 8007b00:	2101      	movs	r1, #1
 8007b02:	fa01 f605 	lsl.w	r6, r1, r5
 8007b06:	1d72      	adds	r2, r6, #5
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f001 fd86 	bl	800961c <_calloc_r>
 8007b10:	b160      	cbz	r0, 8007b2c <_Balloc+0x64>
 8007b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b16:	e00e      	b.n	8007b36 <_Balloc+0x6e>
 8007b18:	2221      	movs	r2, #33	@ 0x21
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f001 fd7d 	bl	800961c <_calloc_r>
 8007b22:	69e3      	ldr	r3, [r4, #28]
 8007b24:	60f0      	str	r0, [r6, #12]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e4      	bne.n	8007af6 <_Balloc+0x2e>
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	6802      	ldr	r2, [r0, #0]
 8007b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b36:	2300      	movs	r3, #0
 8007b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b3c:	e7f7      	b.n	8007b2e <_Balloc+0x66>
 8007b3e:	bf00      	nop
 8007b40:	0800a352 	.word	0x0800a352
 8007b44:	0800a3d2 	.word	0x0800a3d2

08007b48 <_Bfree>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	69c6      	ldr	r6, [r0, #28]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	b976      	cbnz	r6, 8007b70 <_Bfree+0x28>
 8007b52:	2010      	movs	r0, #16
 8007b54:	f7ff ff02 	bl	800795c <malloc>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	61e8      	str	r0, [r5, #28]
 8007b5c:	b920      	cbnz	r0, 8007b68 <_Bfree+0x20>
 8007b5e:	4b09      	ldr	r3, [pc, #36]	@ (8007b84 <_Bfree+0x3c>)
 8007b60:	4809      	ldr	r0, [pc, #36]	@ (8007b88 <_Bfree+0x40>)
 8007b62:	218f      	movs	r1, #143	@ 0x8f
 8007b64:	f001 fd3c 	bl	80095e0 <__assert_func>
 8007b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b6c:	6006      	str	r6, [r0, #0]
 8007b6e:	60c6      	str	r6, [r0, #12]
 8007b70:	b13c      	cbz	r4, 8007b82 <_Bfree+0x3a>
 8007b72:	69eb      	ldr	r3, [r5, #28]
 8007b74:	6862      	ldr	r2, [r4, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b7c:	6021      	str	r1, [r4, #0]
 8007b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	0800a352 	.word	0x0800a352
 8007b88:	0800a3d2 	.word	0x0800a3d2

08007b8c <__multadd>:
 8007b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b90:	690d      	ldr	r5, [r1, #16]
 8007b92:	4607      	mov	r7, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	461e      	mov	r6, r3
 8007b98:	f101 0c14 	add.w	ip, r1, #20
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8007ba2:	b299      	uxth	r1, r3
 8007ba4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ba8:	0c1e      	lsrs	r6, r3, #16
 8007baa:	0c0b      	lsrs	r3, r1, #16
 8007bac:	fb02 3306 	mla	r3, r2, r6, r3
 8007bb0:	b289      	uxth	r1, r1
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bb8:	4285      	cmp	r5, r0
 8007bba:	f84c 1b04 	str.w	r1, [ip], #4
 8007bbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bc2:	dcec      	bgt.n	8007b9e <__multadd+0x12>
 8007bc4:	b30e      	cbz	r6, 8007c0a <__multadd+0x7e>
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dc19      	bgt.n	8007c00 <__multadd+0x74>
 8007bcc:	6861      	ldr	r1, [r4, #4]
 8007bce:	4638      	mov	r0, r7
 8007bd0:	3101      	adds	r1, #1
 8007bd2:	f7ff ff79 	bl	8007ac8 <_Balloc>
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <__multadd+0x5a>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <__multadd+0x84>)
 8007bde:	480d      	ldr	r0, [pc, #52]	@ (8007c14 <__multadd+0x88>)
 8007be0:	21ba      	movs	r1, #186	@ 0xba
 8007be2:	f001 fcfd 	bl	80095e0 <__assert_func>
 8007be6:	6922      	ldr	r2, [r4, #16]
 8007be8:	3202      	adds	r2, #2
 8007bea:	f104 010c 	add.w	r1, r4, #12
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	300c      	adds	r0, #12
 8007bf2:	f001 fcdf 	bl	80095b4 <memcpy>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff ffa5 	bl	8007b48 <_Bfree>
 8007bfe:	4644      	mov	r4, r8
 8007c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c04:	3501      	adds	r5, #1
 8007c06:	615e      	str	r6, [r3, #20]
 8007c08:	6125      	str	r5, [r4, #16]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c10:	0800a3c1 	.word	0x0800a3c1
 8007c14:	0800a3d2 	.word	0x0800a3d2

08007c18 <__s2b>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	4615      	mov	r5, r2
 8007c20:	461f      	mov	r7, r3
 8007c22:	2209      	movs	r2, #9
 8007c24:	3308      	adds	r3, #8
 8007c26:	4606      	mov	r6, r0
 8007c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	2201      	movs	r2, #1
 8007c30:	429a      	cmp	r2, r3
 8007c32:	db09      	blt.n	8007c48 <__s2b+0x30>
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7ff ff47 	bl	8007ac8 <_Balloc>
 8007c3a:	b940      	cbnz	r0, 8007c4e <__s2b+0x36>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <__s2b+0x8c>)
 8007c40:	4819      	ldr	r0, [pc, #100]	@ (8007ca8 <__s2b+0x90>)
 8007c42:	21d3      	movs	r1, #211	@ 0xd3
 8007c44:	f001 fccc 	bl	80095e0 <__assert_func>
 8007c48:	0052      	lsls	r2, r2, #1
 8007c4a:	3101      	adds	r1, #1
 8007c4c:	e7f0      	b.n	8007c30 <__s2b+0x18>
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	6143      	str	r3, [r0, #20]
 8007c52:	2d09      	cmp	r5, #9
 8007c54:	f04f 0301 	mov.w	r3, #1
 8007c58:	6103      	str	r3, [r0, #16]
 8007c5a:	dd16      	ble.n	8007c8a <__s2b+0x72>
 8007c5c:	f104 0909 	add.w	r9, r4, #9
 8007c60:	46c8      	mov	r8, r9
 8007c62:	442c      	add	r4, r5
 8007c64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c68:	4601      	mov	r1, r0
 8007c6a:	3b30      	subs	r3, #48	@ 0x30
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ff8c 	bl	8007b8c <__multadd>
 8007c74:	45a0      	cmp	r8, r4
 8007c76:	d1f5      	bne.n	8007c64 <__s2b+0x4c>
 8007c78:	f1a5 0408 	sub.w	r4, r5, #8
 8007c7c:	444c      	add	r4, r9
 8007c7e:	1b2d      	subs	r5, r5, r4
 8007c80:	1963      	adds	r3, r4, r5
 8007c82:	42bb      	cmp	r3, r7
 8007c84:	db04      	blt.n	8007c90 <__s2b+0x78>
 8007c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8a:	340a      	adds	r4, #10
 8007c8c:	2509      	movs	r5, #9
 8007c8e:	e7f6      	b.n	8007c7e <__s2b+0x66>
 8007c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c94:	4601      	mov	r1, r0
 8007c96:	3b30      	subs	r3, #48	@ 0x30
 8007c98:	220a      	movs	r2, #10
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7ff ff76 	bl	8007b8c <__multadd>
 8007ca0:	e7ee      	b.n	8007c80 <__s2b+0x68>
 8007ca2:	bf00      	nop
 8007ca4:	0800a3c1 	.word	0x0800a3c1
 8007ca8:	0800a3d2 	.word	0x0800a3d2

08007cac <__hi0bits>:
 8007cac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	bf36      	itet	cc
 8007cb4:	0403      	lslcc	r3, r0, #16
 8007cb6:	2000      	movcs	r0, #0
 8007cb8:	2010      	movcc	r0, #16
 8007cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cbe:	bf3c      	itt	cc
 8007cc0:	021b      	lslcc	r3, r3, #8
 8007cc2:	3008      	addcc	r0, #8
 8007cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cc8:	bf3c      	itt	cc
 8007cca:	011b      	lslcc	r3, r3, #4
 8007ccc:	3004      	addcc	r0, #4
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd2:	bf3c      	itt	cc
 8007cd4:	009b      	lslcc	r3, r3, #2
 8007cd6:	3002      	addcc	r0, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	db05      	blt.n	8007ce8 <__hi0bits+0x3c>
 8007cdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ce0:	f100 0001 	add.w	r0, r0, #1
 8007ce4:	bf08      	it	eq
 8007ce6:	2020      	moveq	r0, #32
 8007ce8:	4770      	bx	lr

08007cea <__lo0bits>:
 8007cea:	6803      	ldr	r3, [r0, #0]
 8007cec:	4602      	mov	r2, r0
 8007cee:	f013 0007 	ands.w	r0, r3, #7
 8007cf2:	d00b      	beq.n	8007d0c <__lo0bits+0x22>
 8007cf4:	07d9      	lsls	r1, r3, #31
 8007cf6:	d421      	bmi.n	8007d3c <__lo0bits+0x52>
 8007cf8:	0798      	lsls	r0, r3, #30
 8007cfa:	bf49      	itett	mi
 8007cfc:	085b      	lsrmi	r3, r3, #1
 8007cfe:	089b      	lsrpl	r3, r3, #2
 8007d00:	2001      	movmi	r0, #1
 8007d02:	6013      	strmi	r3, [r2, #0]
 8007d04:	bf5c      	itt	pl
 8007d06:	6013      	strpl	r3, [r2, #0]
 8007d08:	2002      	movpl	r0, #2
 8007d0a:	4770      	bx	lr
 8007d0c:	b299      	uxth	r1, r3
 8007d0e:	b909      	cbnz	r1, 8007d14 <__lo0bits+0x2a>
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	2010      	movs	r0, #16
 8007d14:	b2d9      	uxtb	r1, r3
 8007d16:	b909      	cbnz	r1, 8007d1c <__lo0bits+0x32>
 8007d18:	3008      	adds	r0, #8
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	0719      	lsls	r1, r3, #28
 8007d1e:	bf04      	itt	eq
 8007d20:	091b      	lsreq	r3, r3, #4
 8007d22:	3004      	addeq	r0, #4
 8007d24:	0799      	lsls	r1, r3, #30
 8007d26:	bf04      	itt	eq
 8007d28:	089b      	lsreq	r3, r3, #2
 8007d2a:	3002      	addeq	r0, #2
 8007d2c:	07d9      	lsls	r1, r3, #31
 8007d2e:	d403      	bmi.n	8007d38 <__lo0bits+0x4e>
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	f100 0001 	add.w	r0, r0, #1
 8007d36:	d003      	beq.n	8007d40 <__lo0bits+0x56>
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	4770      	bx	lr
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	4770      	bx	lr
 8007d40:	2020      	movs	r0, #32
 8007d42:	4770      	bx	lr

08007d44 <__i2b>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	460c      	mov	r4, r1
 8007d48:	2101      	movs	r1, #1
 8007d4a:	f7ff febd 	bl	8007ac8 <_Balloc>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	b928      	cbnz	r0, 8007d5e <__i2b+0x1a>
 8007d52:	4b05      	ldr	r3, [pc, #20]	@ (8007d68 <__i2b+0x24>)
 8007d54:	4805      	ldr	r0, [pc, #20]	@ (8007d6c <__i2b+0x28>)
 8007d56:	f240 1145 	movw	r1, #325	@ 0x145
 8007d5a:	f001 fc41 	bl	80095e0 <__assert_func>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	6144      	str	r4, [r0, #20]
 8007d62:	6103      	str	r3, [r0, #16]
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	bf00      	nop
 8007d68:	0800a3c1 	.word	0x0800a3c1
 8007d6c:	0800a3d2 	.word	0x0800a3d2

08007d70 <__multiply>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4614      	mov	r4, r2
 8007d76:	690a      	ldr	r2, [r1, #16]
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bfa8      	it	ge
 8007d7e:	4623      	movge	r3, r4
 8007d80:	460f      	mov	r7, r1
 8007d82:	bfa4      	itt	ge
 8007d84:	460c      	movge	r4, r1
 8007d86:	461f      	movge	r7, r3
 8007d88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d90:	68a3      	ldr	r3, [r4, #8]
 8007d92:	6861      	ldr	r1, [r4, #4]
 8007d94:	eb0a 0609 	add.w	r6, sl, r9
 8007d98:	42b3      	cmp	r3, r6
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	bfb8      	it	lt
 8007d9e:	3101      	addlt	r1, #1
 8007da0:	f7ff fe92 	bl	8007ac8 <_Balloc>
 8007da4:	b930      	cbnz	r0, 8007db4 <__multiply+0x44>
 8007da6:	4602      	mov	r2, r0
 8007da8:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <__multiply+0x14c>)
 8007daa:	4845      	ldr	r0, [pc, #276]	@ (8007ec0 <__multiply+0x150>)
 8007dac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007db0:	f001 fc16 	bl	80095e0 <__assert_func>
 8007db4:	f100 0514 	add.w	r5, r0, #20
 8007db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4543      	cmp	r3, r8
 8007dc2:	d321      	bcc.n	8007e08 <__multiply+0x98>
 8007dc4:	f107 0114 	add.w	r1, r7, #20
 8007dc8:	f104 0214 	add.w	r2, r4, #20
 8007dcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007dd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007dd4:	9302      	str	r3, [sp, #8]
 8007dd6:	1b13      	subs	r3, r2, r4
 8007dd8:	3b15      	subs	r3, #21
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	3304      	adds	r3, #4
 8007de0:	f104 0715 	add.w	r7, r4, #21
 8007de4:	42ba      	cmp	r2, r7
 8007de6:	bf38      	it	cc
 8007de8:	2304      	movcc	r3, #4
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	9103      	str	r1, [sp, #12]
 8007df0:	428b      	cmp	r3, r1
 8007df2:	d80c      	bhi.n	8007e0e <__multiply+0x9e>
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	dd03      	ble.n	8007e00 <__multiply+0x90>
 8007df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d05b      	beq.n	8007eb8 <__multiply+0x148>
 8007e00:	6106      	str	r6, [r0, #16]
 8007e02:	b005      	add	sp, #20
 8007e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e08:	f843 2b04 	str.w	r2, [r3], #4
 8007e0c:	e7d8      	b.n	8007dc0 <__multiply+0x50>
 8007e0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e12:	f1ba 0f00 	cmp.w	sl, #0
 8007e16:	d024      	beq.n	8007e62 <__multiply+0xf2>
 8007e18:	f104 0e14 	add.w	lr, r4, #20
 8007e1c:	46a9      	mov	r9, r5
 8007e1e:	f04f 0c00 	mov.w	ip, #0
 8007e22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e26:	f8d9 3000 	ldr.w	r3, [r9]
 8007e2a:	fa1f fb87 	uxth.w	fp, r7
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e38:	f8d9 7000 	ldr.w	r7, [r9]
 8007e3c:	4463      	add	r3, ip
 8007e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e42:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e50:	4572      	cmp	r2, lr
 8007e52:	f849 3b04 	str.w	r3, [r9], #4
 8007e56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e5a:	d8e2      	bhi.n	8007e22 <__multiply+0xb2>
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	f845 c003 	str.w	ip, [r5, r3]
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e68:	3104      	adds	r1, #4
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	d021      	beq.n	8007eb4 <__multiply+0x144>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	f104 0c14 	add.w	ip, r4, #20
 8007e76:	46ae      	mov	lr, r5
 8007e78:	f04f 0a00 	mov.w	sl, #0
 8007e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e84:	fb09 770b 	mla	r7, r9, fp, r7
 8007e88:	4457      	add	r7, sl
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e90:	f84e 3b04 	str.w	r3, [lr], #4
 8007e94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e9c:	f8be 3000 	ldrh.w	r3, [lr]
 8007ea0:	fb09 330a 	mla	r3, r9, sl, r3
 8007ea4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ea8:	4562      	cmp	r2, ip
 8007eaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eae:	d8e5      	bhi.n	8007e7c <__multiply+0x10c>
 8007eb0:	9f01      	ldr	r7, [sp, #4]
 8007eb2:	51eb      	str	r3, [r5, r7]
 8007eb4:	3504      	adds	r5, #4
 8007eb6:	e799      	b.n	8007dec <__multiply+0x7c>
 8007eb8:	3e01      	subs	r6, #1
 8007eba:	e79b      	b.n	8007df4 <__multiply+0x84>
 8007ebc:	0800a3c1 	.word	0x0800a3c1
 8007ec0:	0800a3d2 	.word	0x0800a3d2

08007ec4 <__pow5mult>:
 8007ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	4615      	mov	r5, r2
 8007eca:	f012 0203 	ands.w	r2, r2, #3
 8007ece:	4607      	mov	r7, r0
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	d007      	beq.n	8007ee4 <__pow5mult+0x20>
 8007ed4:	4c25      	ldr	r4, [pc, #148]	@ (8007f6c <__pow5mult+0xa8>)
 8007ed6:	3a01      	subs	r2, #1
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ede:	f7ff fe55 	bl	8007b8c <__multadd>
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	10ad      	asrs	r5, r5, #2
 8007ee6:	d03d      	beq.n	8007f64 <__pow5mult+0xa0>
 8007ee8:	69fc      	ldr	r4, [r7, #28]
 8007eea:	b97c      	cbnz	r4, 8007f0c <__pow5mult+0x48>
 8007eec:	2010      	movs	r0, #16
 8007eee:	f7ff fd35 	bl	800795c <malloc>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	61f8      	str	r0, [r7, #28]
 8007ef6:	b928      	cbnz	r0, 8007f04 <__pow5mult+0x40>
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f70 <__pow5mult+0xac>)
 8007efa:	481e      	ldr	r0, [pc, #120]	@ (8007f74 <__pow5mult+0xb0>)
 8007efc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f00:	f001 fb6e 	bl	80095e0 <__assert_func>
 8007f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f08:	6004      	str	r4, [r0, #0]
 8007f0a:	60c4      	str	r4, [r0, #12]
 8007f0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f14:	b94c      	cbnz	r4, 8007f2a <__pow5mult+0x66>
 8007f16:	f240 2171 	movw	r1, #625	@ 0x271
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f7ff ff12 	bl	8007d44 <__i2b>
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f26:	4604      	mov	r4, r0
 8007f28:	6003      	str	r3, [r0, #0]
 8007f2a:	f04f 0900 	mov.w	r9, #0
 8007f2e:	07eb      	lsls	r3, r5, #31
 8007f30:	d50a      	bpl.n	8007f48 <__pow5mult+0x84>
 8007f32:	4631      	mov	r1, r6
 8007f34:	4622      	mov	r2, r4
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ff1a 	bl	8007d70 <__multiply>
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4680      	mov	r8, r0
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff fe01 	bl	8007b48 <_Bfree>
 8007f46:	4646      	mov	r6, r8
 8007f48:	106d      	asrs	r5, r5, #1
 8007f4a:	d00b      	beq.n	8007f64 <__pow5mult+0xa0>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	b938      	cbnz	r0, 8007f60 <__pow5mult+0x9c>
 8007f50:	4622      	mov	r2, r4
 8007f52:	4621      	mov	r1, r4
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff ff0b 	bl	8007d70 <__multiply>
 8007f5a:	6020      	str	r0, [r4, #0]
 8007f5c:	f8c0 9000 	str.w	r9, [r0]
 8007f60:	4604      	mov	r4, r0
 8007f62:	e7e4      	b.n	8007f2e <__pow5mult+0x6a>
 8007f64:	4630      	mov	r0, r6
 8007f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	bf00      	nop
 8007f6c:	0800a42c 	.word	0x0800a42c
 8007f70:	0800a352 	.word	0x0800a352
 8007f74:	0800a3d2 	.word	0x0800a3d2

08007f78 <__lshift>:
 8007f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	6849      	ldr	r1, [r1, #4]
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f86:	68a3      	ldr	r3, [r4, #8]
 8007f88:	4607      	mov	r7, r0
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f90:	f108 0601 	add.w	r6, r8, #1
 8007f94:	42b3      	cmp	r3, r6
 8007f96:	db0b      	blt.n	8007fb0 <__lshift+0x38>
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff fd95 	bl	8007ac8 <_Balloc>
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	b948      	cbnz	r0, 8007fb6 <__lshift+0x3e>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	4b28      	ldr	r3, [pc, #160]	@ (8008048 <__lshift+0xd0>)
 8007fa6:	4829      	ldr	r0, [pc, #164]	@ (800804c <__lshift+0xd4>)
 8007fa8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fac:	f001 fb18 	bl	80095e0 <__assert_func>
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	e7ee      	b.n	8007f94 <__lshift+0x1c>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f100 0114 	add.w	r1, r0, #20
 8007fbc:	f100 0210 	add.w	r2, r0, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	4553      	cmp	r3, sl
 8007fc4:	db33      	blt.n	800802e <__lshift+0xb6>
 8007fc6:	6920      	ldr	r0, [r4, #16]
 8007fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fcc:	f104 0314 	add.w	r3, r4, #20
 8007fd0:	f019 091f 	ands.w	r9, r9, #31
 8007fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fdc:	d02b      	beq.n	8008036 <__lshift+0xbe>
 8007fde:	f1c9 0e20 	rsb	lr, r9, #32
 8007fe2:	468a      	mov	sl, r1
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8007fec:	4310      	orrs	r0, r2
 8007fee:	f84a 0b04 	str.w	r0, [sl], #4
 8007ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff6:	459c      	cmp	ip, r3
 8007ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ffc:	d8f3      	bhi.n	8007fe6 <__lshift+0x6e>
 8007ffe:	ebac 0304 	sub.w	r3, ip, r4
 8008002:	3b15      	subs	r3, #21
 8008004:	f023 0303 	bic.w	r3, r3, #3
 8008008:	3304      	adds	r3, #4
 800800a:	f104 0015 	add.w	r0, r4, #21
 800800e:	4584      	cmp	ip, r0
 8008010:	bf38      	it	cc
 8008012:	2304      	movcc	r3, #4
 8008014:	50ca      	str	r2, [r1, r3]
 8008016:	b10a      	cbz	r2, 800801c <__lshift+0xa4>
 8008018:	f108 0602 	add.w	r6, r8, #2
 800801c:	3e01      	subs	r6, #1
 800801e:	4638      	mov	r0, r7
 8008020:	612e      	str	r6, [r5, #16]
 8008022:	4621      	mov	r1, r4
 8008024:	f7ff fd90 	bl	8007b48 <_Bfree>
 8008028:	4628      	mov	r0, r5
 800802a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008032:	3301      	adds	r3, #1
 8008034:	e7c5      	b.n	8007fc2 <__lshift+0x4a>
 8008036:	3904      	subs	r1, #4
 8008038:	f853 2b04 	ldr.w	r2, [r3], #4
 800803c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008040:	459c      	cmp	ip, r3
 8008042:	d8f9      	bhi.n	8008038 <__lshift+0xc0>
 8008044:	e7ea      	b.n	800801c <__lshift+0xa4>
 8008046:	bf00      	nop
 8008048:	0800a3c1 	.word	0x0800a3c1
 800804c:	0800a3d2 	.word	0x0800a3d2

08008050 <__mcmp>:
 8008050:	690a      	ldr	r2, [r1, #16]
 8008052:	4603      	mov	r3, r0
 8008054:	6900      	ldr	r0, [r0, #16]
 8008056:	1a80      	subs	r0, r0, r2
 8008058:	b530      	push	{r4, r5, lr}
 800805a:	d10e      	bne.n	800807a <__mcmp+0x2a>
 800805c:	3314      	adds	r3, #20
 800805e:	3114      	adds	r1, #20
 8008060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800806c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008070:	4295      	cmp	r5, r2
 8008072:	d003      	beq.n	800807c <__mcmp+0x2c>
 8008074:	d205      	bcs.n	8008082 <__mcmp+0x32>
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	bd30      	pop	{r4, r5, pc}
 800807c:	42a3      	cmp	r3, r4
 800807e:	d3f3      	bcc.n	8008068 <__mcmp+0x18>
 8008080:	e7fb      	b.n	800807a <__mcmp+0x2a>
 8008082:	2001      	movs	r0, #1
 8008084:	e7f9      	b.n	800807a <__mcmp+0x2a>
	...

08008088 <__mdiff>:
 8008088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4689      	mov	r9, r1
 800808e:	4606      	mov	r6, r0
 8008090:	4611      	mov	r1, r2
 8008092:	4648      	mov	r0, r9
 8008094:	4614      	mov	r4, r2
 8008096:	f7ff ffdb 	bl	8008050 <__mcmp>
 800809a:	1e05      	subs	r5, r0, #0
 800809c:	d112      	bne.n	80080c4 <__mdiff+0x3c>
 800809e:	4629      	mov	r1, r5
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff fd11 	bl	8007ac8 <_Balloc>
 80080a6:	4602      	mov	r2, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <__mdiff+0x2e>
 80080aa:	4b3f      	ldr	r3, [pc, #252]	@ (80081a8 <__mdiff+0x120>)
 80080ac:	f240 2137 	movw	r1, #567	@ 0x237
 80080b0:	483e      	ldr	r0, [pc, #248]	@ (80081ac <__mdiff+0x124>)
 80080b2:	f001 fa95 	bl	80095e0 <__assert_func>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080bc:	4610      	mov	r0, r2
 80080be:	b003      	add	sp, #12
 80080c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	bfbc      	itt	lt
 80080c6:	464b      	movlt	r3, r9
 80080c8:	46a1      	movlt	r9, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080d0:	bfba      	itte	lt
 80080d2:	461c      	movlt	r4, r3
 80080d4:	2501      	movlt	r5, #1
 80080d6:	2500      	movge	r5, #0
 80080d8:	f7ff fcf6 	bl	8007ac8 <_Balloc>
 80080dc:	4602      	mov	r2, r0
 80080de:	b918      	cbnz	r0, 80080e8 <__mdiff+0x60>
 80080e0:	4b31      	ldr	r3, [pc, #196]	@ (80081a8 <__mdiff+0x120>)
 80080e2:	f240 2145 	movw	r1, #581	@ 0x245
 80080e6:	e7e3      	b.n	80080b0 <__mdiff+0x28>
 80080e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080ec:	6926      	ldr	r6, [r4, #16]
 80080ee:	60c5      	str	r5, [r0, #12]
 80080f0:	f109 0310 	add.w	r3, r9, #16
 80080f4:	f109 0514 	add.w	r5, r9, #20
 80080f8:	f104 0e14 	add.w	lr, r4, #20
 80080fc:	f100 0b14 	add.w	fp, r0, #20
 8008100:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008104:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	46d9      	mov	r9, fp
 800810c:	f04f 0c00 	mov.w	ip, #0
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008116:	f853 af04 	ldr.w	sl, [r3, #4]!
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	fa1f f38a 	uxth.w	r3, sl
 8008120:	4619      	mov	r1, r3
 8008122:	b283      	uxth	r3, r0
 8008124:	1acb      	subs	r3, r1, r3
 8008126:	0c00      	lsrs	r0, r0, #16
 8008128:	4463      	add	r3, ip
 800812a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800812e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008138:	4576      	cmp	r6, lr
 800813a:	f849 3b04 	str.w	r3, [r9], #4
 800813e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008142:	d8e5      	bhi.n	8008110 <__mdiff+0x88>
 8008144:	1b33      	subs	r3, r6, r4
 8008146:	3b15      	subs	r3, #21
 8008148:	f023 0303 	bic.w	r3, r3, #3
 800814c:	3415      	adds	r4, #21
 800814e:	3304      	adds	r3, #4
 8008150:	42a6      	cmp	r6, r4
 8008152:	bf38      	it	cc
 8008154:	2304      	movcc	r3, #4
 8008156:	441d      	add	r5, r3
 8008158:	445b      	add	r3, fp
 800815a:	461e      	mov	r6, r3
 800815c:	462c      	mov	r4, r5
 800815e:	4544      	cmp	r4, r8
 8008160:	d30e      	bcc.n	8008180 <__mdiff+0xf8>
 8008162:	f108 0103 	add.w	r1, r8, #3
 8008166:	1b49      	subs	r1, r1, r5
 8008168:	f021 0103 	bic.w	r1, r1, #3
 800816c:	3d03      	subs	r5, #3
 800816e:	45a8      	cmp	r8, r5
 8008170:	bf38      	it	cc
 8008172:	2100      	movcc	r1, #0
 8008174:	440b      	add	r3, r1
 8008176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800817a:	b191      	cbz	r1, 80081a2 <__mdiff+0x11a>
 800817c:	6117      	str	r7, [r2, #16]
 800817e:	e79d      	b.n	80080bc <__mdiff+0x34>
 8008180:	f854 1b04 	ldr.w	r1, [r4], #4
 8008184:	46e6      	mov	lr, ip
 8008186:	0c08      	lsrs	r0, r1, #16
 8008188:	fa1c fc81 	uxtah	ip, ip, r1
 800818c:	4471      	add	r1, lr
 800818e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008192:	b289      	uxth	r1, r1
 8008194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008198:	f846 1b04 	str.w	r1, [r6], #4
 800819c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081a0:	e7dd      	b.n	800815e <__mdiff+0xd6>
 80081a2:	3f01      	subs	r7, #1
 80081a4:	e7e7      	b.n	8008176 <__mdiff+0xee>
 80081a6:	bf00      	nop
 80081a8:	0800a3c1 	.word	0x0800a3c1
 80081ac:	0800a3d2 	.word	0x0800a3d2

080081b0 <__ulp>:
 80081b0:	b082      	sub	sp, #8
 80081b2:	ed8d 0b00 	vstr	d0, [sp]
 80081b6:	9a01      	ldr	r2, [sp, #4]
 80081b8:	4b0f      	ldr	r3, [pc, #60]	@ (80081f8 <__ulp+0x48>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc08      	bgt.n	80081d6 <__ulp+0x26>
 80081c4:	425b      	negs	r3, r3
 80081c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80081ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80081ce:	da04      	bge.n	80081da <__ulp+0x2a>
 80081d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80081d4:	4113      	asrs	r3, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	e008      	b.n	80081ec <__ulp+0x3c>
 80081da:	f1a2 0314 	sub.w	r3, r2, #20
 80081de:	2b1e      	cmp	r3, #30
 80081e0:	bfda      	itte	le
 80081e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80081e6:	40da      	lsrle	r2, r3
 80081e8:	2201      	movgt	r2, #1
 80081ea:	2300      	movs	r3, #0
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	ec41 0b10 	vmov	d0, r0, r1
 80081f4:	b002      	add	sp, #8
 80081f6:	4770      	bx	lr
 80081f8:	7ff00000 	.word	0x7ff00000

080081fc <__b2d>:
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	6906      	ldr	r6, [r0, #16]
 8008202:	f100 0814 	add.w	r8, r0, #20
 8008206:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800820a:	1f37      	subs	r7, r6, #4
 800820c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008210:	4610      	mov	r0, r2
 8008212:	f7ff fd4b 	bl	8007cac <__hi0bits>
 8008216:	f1c0 0320 	rsb	r3, r0, #32
 800821a:	280a      	cmp	r0, #10
 800821c:	600b      	str	r3, [r1, #0]
 800821e:	491b      	ldr	r1, [pc, #108]	@ (800828c <__b2d+0x90>)
 8008220:	dc15      	bgt.n	800824e <__b2d+0x52>
 8008222:	f1c0 0c0b 	rsb	ip, r0, #11
 8008226:	fa22 f30c 	lsr.w	r3, r2, ip
 800822a:	45b8      	cmp	r8, r7
 800822c:	ea43 0501 	orr.w	r5, r3, r1
 8008230:	bf34      	ite	cc
 8008232:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008236:	2300      	movcs	r3, #0
 8008238:	3015      	adds	r0, #21
 800823a:	fa02 f000 	lsl.w	r0, r2, r0
 800823e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008242:	4303      	orrs	r3, r0
 8008244:	461c      	mov	r4, r3
 8008246:	ec45 4b10 	vmov	d0, r4, r5
 800824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824e:	45b8      	cmp	r8, r7
 8008250:	bf3a      	itte	cc
 8008252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008256:	f1a6 0708 	subcc.w	r7, r6, #8
 800825a:	2300      	movcs	r3, #0
 800825c:	380b      	subs	r0, #11
 800825e:	d012      	beq.n	8008286 <__b2d+0x8a>
 8008260:	f1c0 0120 	rsb	r1, r0, #32
 8008264:	fa23 f401 	lsr.w	r4, r3, r1
 8008268:	4082      	lsls	r2, r0
 800826a:	4322      	orrs	r2, r4
 800826c:	4547      	cmp	r7, r8
 800826e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008272:	bf8c      	ite	hi
 8008274:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008278:	2200      	movls	r2, #0
 800827a:	4083      	lsls	r3, r0
 800827c:	40ca      	lsrs	r2, r1
 800827e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008282:	4313      	orrs	r3, r2
 8008284:	e7de      	b.n	8008244 <__b2d+0x48>
 8008286:	ea42 0501 	orr.w	r5, r2, r1
 800828a:	e7db      	b.n	8008244 <__b2d+0x48>
 800828c:	3ff00000 	.word	0x3ff00000

08008290 <__d2b>:
 8008290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008294:	460f      	mov	r7, r1
 8008296:	2101      	movs	r1, #1
 8008298:	ec59 8b10 	vmov	r8, r9, d0
 800829c:	4616      	mov	r6, r2
 800829e:	f7ff fc13 	bl	8007ac8 <_Balloc>
 80082a2:	4604      	mov	r4, r0
 80082a4:	b930      	cbnz	r0, 80082b4 <__d2b+0x24>
 80082a6:	4602      	mov	r2, r0
 80082a8:	4b23      	ldr	r3, [pc, #140]	@ (8008338 <__d2b+0xa8>)
 80082aa:	4824      	ldr	r0, [pc, #144]	@ (800833c <__d2b+0xac>)
 80082ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80082b0:	f001 f996 	bl	80095e0 <__assert_func>
 80082b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082bc:	b10d      	cbz	r5, 80082c2 <__d2b+0x32>
 80082be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	f1b8 0300 	subs.w	r3, r8, #0
 80082c8:	d023      	beq.n	8008312 <__d2b+0x82>
 80082ca:	4668      	mov	r0, sp
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f7ff fd0c 	bl	8007cea <__lo0bits>
 80082d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082d6:	b1d0      	cbz	r0, 800830e <__d2b+0x7e>
 80082d8:	f1c0 0320 	rsb	r3, r0, #32
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	430b      	orrs	r3, r1
 80082e2:	40c2      	lsrs	r2, r0
 80082e4:	6163      	str	r3, [r4, #20]
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	61a3      	str	r3, [r4, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bf0c      	ite	eq
 80082f0:	2201      	moveq	r2, #1
 80082f2:	2202      	movne	r2, #2
 80082f4:	6122      	str	r2, [r4, #16]
 80082f6:	b1a5      	cbz	r5, 8008322 <__d2b+0x92>
 80082f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082fc:	4405      	add	r5, r0
 80082fe:	603d      	str	r5, [r7, #0]
 8008300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008304:	6030      	str	r0, [r6, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	b003      	add	sp, #12
 800830a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830e:	6161      	str	r1, [r4, #20]
 8008310:	e7ea      	b.n	80082e8 <__d2b+0x58>
 8008312:	a801      	add	r0, sp, #4
 8008314:	f7ff fce9 	bl	8007cea <__lo0bits>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	6163      	str	r3, [r4, #20]
 800831c:	3020      	adds	r0, #32
 800831e:	2201      	movs	r2, #1
 8008320:	e7e8      	b.n	80082f4 <__d2b+0x64>
 8008322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800832a:	6038      	str	r0, [r7, #0]
 800832c:	6918      	ldr	r0, [r3, #16]
 800832e:	f7ff fcbd 	bl	8007cac <__hi0bits>
 8008332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008336:	e7e5      	b.n	8008304 <__d2b+0x74>
 8008338:	0800a3c1 	.word	0x0800a3c1
 800833c:	0800a3d2 	.word	0x0800a3d2

08008340 <__ratio>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	b085      	sub	sp, #20
 8008346:	e9cd 1000 	strd	r1, r0, [sp]
 800834a:	a902      	add	r1, sp, #8
 800834c:	f7ff ff56 	bl	80081fc <__b2d>
 8008350:	9800      	ldr	r0, [sp, #0]
 8008352:	a903      	add	r1, sp, #12
 8008354:	ec55 4b10 	vmov	r4, r5, d0
 8008358:	f7ff ff50 	bl	80081fc <__b2d>
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	6919      	ldr	r1, [r3, #16]
 8008360:	9b00      	ldr	r3, [sp, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	1ac9      	subs	r1, r1, r3
 8008366:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	ec5b ab10 	vmov	sl, fp, d0
 8008370:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfce      	itee	gt
 8008378:	462a      	movgt	r2, r5
 800837a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800837e:	465a      	movle	r2, fp
 8008380:	462f      	mov	r7, r5
 8008382:	46d9      	mov	r9, fp
 8008384:	bfcc      	ite	gt
 8008386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800838a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800838e:	464b      	mov	r3, r9
 8008390:	4652      	mov	r2, sl
 8008392:	4620      	mov	r0, r4
 8008394:	4639      	mov	r1, r7
 8008396:	f7f8 fa79 	bl	800088c <__aeabi_ddiv>
 800839a:	ec41 0b10 	vmov	d0, r0, r1
 800839e:	b005      	add	sp, #20
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083a4 <__copybits>:
 80083a4:	3901      	subs	r1, #1
 80083a6:	b570      	push	{r4, r5, r6, lr}
 80083a8:	1149      	asrs	r1, r1, #5
 80083aa:	6914      	ldr	r4, [r2, #16]
 80083ac:	3101      	adds	r1, #1
 80083ae:	f102 0314 	add.w	r3, r2, #20
 80083b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80083b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083ba:	1f05      	subs	r5, r0, #4
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d30c      	bcc.n	80083da <__copybits+0x36>
 80083c0:	1aa3      	subs	r3, r4, r2
 80083c2:	3b11      	subs	r3, #17
 80083c4:	f023 0303 	bic.w	r3, r3, #3
 80083c8:	3211      	adds	r2, #17
 80083ca:	42a2      	cmp	r2, r4
 80083cc:	bf88      	it	hi
 80083ce:	2300      	movhi	r3, #0
 80083d0:	4418      	add	r0, r3
 80083d2:	2300      	movs	r3, #0
 80083d4:	4288      	cmp	r0, r1
 80083d6:	d305      	bcc.n	80083e4 <__copybits+0x40>
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	f853 6b04 	ldr.w	r6, [r3], #4
 80083de:	f845 6f04 	str.w	r6, [r5, #4]!
 80083e2:	e7eb      	b.n	80083bc <__copybits+0x18>
 80083e4:	f840 3b04 	str.w	r3, [r0], #4
 80083e8:	e7f4      	b.n	80083d4 <__copybits+0x30>

080083ea <__any_on>:
 80083ea:	f100 0214 	add.w	r2, r0, #20
 80083ee:	6900      	ldr	r0, [r0, #16]
 80083f0:	114b      	asrs	r3, r1, #5
 80083f2:	4298      	cmp	r0, r3
 80083f4:	b510      	push	{r4, lr}
 80083f6:	db11      	blt.n	800841c <__any_on+0x32>
 80083f8:	dd0a      	ble.n	8008410 <__any_on+0x26>
 80083fa:	f011 011f 	ands.w	r1, r1, #31
 80083fe:	d007      	beq.n	8008410 <__any_on+0x26>
 8008400:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008404:	fa24 f001 	lsr.w	r0, r4, r1
 8008408:	fa00 f101 	lsl.w	r1, r0, r1
 800840c:	428c      	cmp	r4, r1
 800840e:	d10b      	bne.n	8008428 <__any_on+0x3e>
 8008410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008414:	4293      	cmp	r3, r2
 8008416:	d803      	bhi.n	8008420 <__any_on+0x36>
 8008418:	2000      	movs	r0, #0
 800841a:	bd10      	pop	{r4, pc}
 800841c:	4603      	mov	r3, r0
 800841e:	e7f7      	b.n	8008410 <__any_on+0x26>
 8008420:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008424:	2900      	cmp	r1, #0
 8008426:	d0f5      	beq.n	8008414 <__any_on+0x2a>
 8008428:	2001      	movs	r0, #1
 800842a:	e7f6      	b.n	800841a <__any_on+0x30>

0800842c <sulp>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4604      	mov	r4, r0
 8008430:	460d      	mov	r5, r1
 8008432:	ec45 4b10 	vmov	d0, r4, r5
 8008436:	4616      	mov	r6, r2
 8008438:	f7ff feba 	bl	80081b0 <__ulp>
 800843c:	ec51 0b10 	vmov	r0, r1, d0
 8008440:	b17e      	cbz	r6, 8008462 <sulp+0x36>
 8008442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008446:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd09      	ble.n	8008462 <sulp+0x36>
 800844e:	051b      	lsls	r3, r3, #20
 8008450:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008454:	2400      	movs	r4, #0
 8008456:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800845a:	4622      	mov	r2, r4
 800845c:	462b      	mov	r3, r5
 800845e:	f7f8 f8eb 	bl	8000638 <__aeabi_dmul>
 8008462:	ec41 0b10 	vmov	d0, r0, r1
 8008466:	bd70      	pop	{r4, r5, r6, pc}

08008468 <_strtod_l>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	b09f      	sub	sp, #124	@ 0x7c
 800846e:	460c      	mov	r4, r1
 8008470:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008472:	2200      	movs	r2, #0
 8008474:	921a      	str	r2, [sp, #104]	@ 0x68
 8008476:	9005      	str	r0, [sp, #20]
 8008478:	f04f 0a00 	mov.w	sl, #0
 800847c:	f04f 0b00 	mov.w	fp, #0
 8008480:	460a      	mov	r2, r1
 8008482:	9219      	str	r2, [sp, #100]	@ 0x64
 8008484:	7811      	ldrb	r1, [r2, #0]
 8008486:	292b      	cmp	r1, #43	@ 0x2b
 8008488:	d04a      	beq.n	8008520 <_strtod_l+0xb8>
 800848a:	d838      	bhi.n	80084fe <_strtod_l+0x96>
 800848c:	290d      	cmp	r1, #13
 800848e:	d832      	bhi.n	80084f6 <_strtod_l+0x8e>
 8008490:	2908      	cmp	r1, #8
 8008492:	d832      	bhi.n	80084fa <_strtod_l+0x92>
 8008494:	2900      	cmp	r1, #0
 8008496:	d03b      	beq.n	8008510 <_strtod_l+0xa8>
 8008498:	2200      	movs	r2, #0
 800849a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800849c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800849e:	782a      	ldrb	r2, [r5, #0]
 80084a0:	2a30      	cmp	r2, #48	@ 0x30
 80084a2:	f040 80b3 	bne.w	800860c <_strtod_l+0x1a4>
 80084a6:	786a      	ldrb	r2, [r5, #1]
 80084a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084ac:	2a58      	cmp	r2, #88	@ 0x58
 80084ae:	d16e      	bne.n	800858e <_strtod_l+0x126>
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4a8e      	ldr	r2, [pc, #568]	@ (80086f4 <_strtod_l+0x28c>)
 80084bc:	9805      	ldr	r0, [sp, #20]
 80084be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80084c0:	a919      	add	r1, sp, #100	@ 0x64
 80084c2:	f001 f927 	bl	8009714 <__gethex>
 80084c6:	f010 060f 	ands.w	r6, r0, #15
 80084ca:	4604      	mov	r4, r0
 80084cc:	d005      	beq.n	80084da <_strtod_l+0x72>
 80084ce:	2e06      	cmp	r6, #6
 80084d0:	d128      	bne.n	8008524 <_strtod_l+0xbc>
 80084d2:	3501      	adds	r5, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80084d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 858e 	bne.w	8008ffe <_strtod_l+0xb96>
 80084e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e4:	b1cb      	cbz	r3, 800851a <_strtod_l+0xb2>
 80084e6:	4652      	mov	r2, sl
 80084e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80084ec:	ec43 2b10 	vmov	d0, r2, r3
 80084f0:	b01f      	add	sp, #124	@ 0x7c
 80084f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f6:	2920      	cmp	r1, #32
 80084f8:	d1ce      	bne.n	8008498 <_strtod_l+0x30>
 80084fa:	3201      	adds	r2, #1
 80084fc:	e7c1      	b.n	8008482 <_strtod_l+0x1a>
 80084fe:	292d      	cmp	r1, #45	@ 0x2d
 8008500:	d1ca      	bne.n	8008498 <_strtod_l+0x30>
 8008502:	2101      	movs	r1, #1
 8008504:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008506:	1c51      	adds	r1, r2, #1
 8008508:	9119      	str	r1, [sp, #100]	@ 0x64
 800850a:	7852      	ldrb	r2, [r2, #1]
 800850c:	2a00      	cmp	r2, #0
 800850e:	d1c5      	bne.n	800849c <_strtod_l+0x34>
 8008510:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008512:	9419      	str	r4, [sp, #100]	@ 0x64
 8008514:	2b00      	cmp	r3, #0
 8008516:	f040 8570 	bne.w	8008ffa <_strtod_l+0xb92>
 800851a:	4652      	mov	r2, sl
 800851c:	465b      	mov	r3, fp
 800851e:	e7e5      	b.n	80084ec <_strtod_l+0x84>
 8008520:	2100      	movs	r1, #0
 8008522:	e7ef      	b.n	8008504 <_strtod_l+0x9c>
 8008524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008526:	b13a      	cbz	r2, 8008538 <_strtod_l+0xd0>
 8008528:	2135      	movs	r1, #53	@ 0x35
 800852a:	a81c      	add	r0, sp, #112	@ 0x70
 800852c:	f7ff ff3a 	bl	80083a4 <__copybits>
 8008530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008532:	9805      	ldr	r0, [sp, #20]
 8008534:	f7ff fb08 	bl	8007b48 <_Bfree>
 8008538:	3e01      	subs	r6, #1
 800853a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800853c:	2e04      	cmp	r6, #4
 800853e:	d806      	bhi.n	800854e <_strtod_l+0xe6>
 8008540:	e8df f006 	tbb	[pc, r6]
 8008544:	201d0314 	.word	0x201d0314
 8008548:	14          	.byte	0x14
 8008549:	00          	.byte	0x00
 800854a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800854e:	05e1      	lsls	r1, r4, #23
 8008550:	bf48      	it	mi
 8008552:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800855a:	0d1b      	lsrs	r3, r3, #20
 800855c:	051b      	lsls	r3, r3, #20
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1bb      	bne.n	80084da <_strtod_l+0x72>
 8008562:	f7fe fb2f 	bl	8006bc4 <__errno>
 8008566:	2322      	movs	r3, #34	@ 0x22
 8008568:	6003      	str	r3, [r0, #0]
 800856a:	e7b6      	b.n	80084da <_strtod_l+0x72>
 800856c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008578:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800857c:	e7e7      	b.n	800854e <_strtod_l+0xe6>
 800857e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80086fc <_strtod_l+0x294>
 8008582:	e7e4      	b.n	800854e <_strtod_l+0xe6>
 8008584:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008588:	f04f 3aff 	mov.w	sl, #4294967295
 800858c:	e7df      	b.n	800854e <_strtod_l+0xe6>
 800858e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	9219      	str	r2, [sp, #100]	@ 0x64
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b30      	cmp	r3, #48	@ 0x30
 8008598:	d0f9      	beq.n	800858e <_strtod_l+0x126>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d09d      	beq.n	80084da <_strtod_l+0x72>
 800859e:	2301      	movs	r3, #1
 80085a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80085a6:	2300      	movs	r3, #0
 80085a8:	9308      	str	r3, [sp, #32]
 80085aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ac:	461f      	mov	r7, r3
 80085ae:	220a      	movs	r2, #10
 80085b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80085b2:	7805      	ldrb	r5, [r0, #0]
 80085b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80085b8:	b2d9      	uxtb	r1, r3
 80085ba:	2909      	cmp	r1, #9
 80085bc:	d928      	bls.n	8008610 <_strtod_l+0x1a8>
 80085be:	494e      	ldr	r1, [pc, #312]	@ (80086f8 <_strtod_l+0x290>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	f000 ffd5 	bl	8009570 <strncmp>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d032      	beq.n	8008630 <_strtod_l+0x1c8>
 80085ca:	2000      	movs	r0, #0
 80085cc:	462a      	mov	r2, r5
 80085ce:	4681      	mov	r9, r0
 80085d0:	463d      	mov	r5, r7
 80085d2:	4603      	mov	r3, r0
 80085d4:	2a65      	cmp	r2, #101	@ 0x65
 80085d6:	d001      	beq.n	80085dc <_strtod_l+0x174>
 80085d8:	2a45      	cmp	r2, #69	@ 0x45
 80085da:	d114      	bne.n	8008606 <_strtod_l+0x19e>
 80085dc:	b91d      	cbnz	r5, 80085e6 <_strtod_l+0x17e>
 80085de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e0:	4302      	orrs	r2, r0
 80085e2:	d095      	beq.n	8008510 <_strtod_l+0xa8>
 80085e4:	2500      	movs	r5, #0
 80085e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80085e8:	1c62      	adds	r2, r4, #1
 80085ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ec:	7862      	ldrb	r2, [r4, #1]
 80085ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80085f0:	d077      	beq.n	80086e2 <_strtod_l+0x27a>
 80085f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80085f4:	d07b      	beq.n	80086ee <_strtod_l+0x286>
 80085f6:	f04f 0c00 	mov.w	ip, #0
 80085fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80085fe:	2909      	cmp	r1, #9
 8008600:	f240 8082 	bls.w	8008708 <_strtod_l+0x2a0>
 8008604:	9419      	str	r4, [sp, #100]	@ 0x64
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	e0a2      	b.n	8008752 <_strtod_l+0x2ea>
 800860c:	2300      	movs	r3, #0
 800860e:	e7c7      	b.n	80085a0 <_strtod_l+0x138>
 8008610:	2f08      	cmp	r7, #8
 8008612:	bfd5      	itete	le
 8008614:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008616:	9908      	ldrgt	r1, [sp, #32]
 8008618:	fb02 3301 	mlale	r3, r2, r1, r3
 800861c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008620:	f100 0001 	add.w	r0, r0, #1
 8008624:	bfd4      	ite	le
 8008626:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008628:	9308      	strgt	r3, [sp, #32]
 800862a:	3701      	adds	r7, #1
 800862c:	9019      	str	r0, [sp, #100]	@ 0x64
 800862e:	e7bf      	b.n	80085b0 <_strtod_l+0x148>
 8008630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	9219      	str	r2, [sp, #100]	@ 0x64
 8008636:	785a      	ldrb	r2, [r3, #1]
 8008638:	b37f      	cbz	r7, 800869a <_strtod_l+0x232>
 800863a:	4681      	mov	r9, r0
 800863c:	463d      	mov	r5, r7
 800863e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008642:	2b09      	cmp	r3, #9
 8008644:	d912      	bls.n	800866c <_strtod_l+0x204>
 8008646:	2301      	movs	r3, #1
 8008648:	e7c4      	b.n	80085d4 <_strtod_l+0x16c>
 800864a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008650:	785a      	ldrb	r2, [r3, #1]
 8008652:	3001      	adds	r0, #1
 8008654:	2a30      	cmp	r2, #48	@ 0x30
 8008656:	d0f8      	beq.n	800864a <_strtod_l+0x1e2>
 8008658:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800865c:	2b08      	cmp	r3, #8
 800865e:	f200 84d3 	bhi.w	8009008 <_strtod_l+0xba0>
 8008662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008664:	930c      	str	r3, [sp, #48]	@ 0x30
 8008666:	4681      	mov	r9, r0
 8008668:	2000      	movs	r0, #0
 800866a:	4605      	mov	r5, r0
 800866c:	3a30      	subs	r2, #48	@ 0x30
 800866e:	f100 0301 	add.w	r3, r0, #1
 8008672:	d02a      	beq.n	80086ca <_strtod_l+0x262>
 8008674:	4499      	add	r9, r3
 8008676:	eb00 0c05 	add.w	ip, r0, r5
 800867a:	462b      	mov	r3, r5
 800867c:	210a      	movs	r1, #10
 800867e:	4563      	cmp	r3, ip
 8008680:	d10d      	bne.n	800869e <_strtod_l+0x236>
 8008682:	1c69      	adds	r1, r5, #1
 8008684:	4401      	add	r1, r0
 8008686:	4428      	add	r0, r5
 8008688:	2808      	cmp	r0, #8
 800868a:	dc16      	bgt.n	80086ba <_strtod_l+0x252>
 800868c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800868e:	230a      	movs	r3, #10
 8008690:	fb03 2300 	mla	r3, r3, r0, r2
 8008694:	930a      	str	r3, [sp, #40]	@ 0x28
 8008696:	2300      	movs	r3, #0
 8008698:	e018      	b.n	80086cc <_strtod_l+0x264>
 800869a:	4638      	mov	r0, r7
 800869c:	e7da      	b.n	8008654 <_strtod_l+0x1ec>
 800869e:	2b08      	cmp	r3, #8
 80086a0:	f103 0301 	add.w	r3, r3, #1
 80086a4:	dc03      	bgt.n	80086ae <_strtod_l+0x246>
 80086a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80086a8:	434e      	muls	r6, r1
 80086aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80086ac:	e7e7      	b.n	800867e <_strtod_l+0x216>
 80086ae:	2b10      	cmp	r3, #16
 80086b0:	bfde      	ittt	le
 80086b2:	9e08      	ldrle	r6, [sp, #32]
 80086b4:	434e      	mulle	r6, r1
 80086b6:	9608      	strle	r6, [sp, #32]
 80086b8:	e7e1      	b.n	800867e <_strtod_l+0x216>
 80086ba:	280f      	cmp	r0, #15
 80086bc:	dceb      	bgt.n	8008696 <_strtod_l+0x22e>
 80086be:	9808      	ldr	r0, [sp, #32]
 80086c0:	230a      	movs	r3, #10
 80086c2:	fb03 2300 	mla	r3, r3, r0, r2
 80086c6:	9308      	str	r3, [sp, #32]
 80086c8:	e7e5      	b.n	8008696 <_strtod_l+0x22e>
 80086ca:	4629      	mov	r1, r5
 80086cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086ce:	1c50      	adds	r0, r2, #1
 80086d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80086d2:	7852      	ldrb	r2, [r2, #1]
 80086d4:	4618      	mov	r0, r3
 80086d6:	460d      	mov	r5, r1
 80086d8:	e7b1      	b.n	800863e <_strtod_l+0x1d6>
 80086da:	f04f 0900 	mov.w	r9, #0
 80086de:	2301      	movs	r3, #1
 80086e0:	e77d      	b.n	80085de <_strtod_l+0x176>
 80086e2:	f04f 0c00 	mov.w	ip, #0
 80086e6:	1ca2      	adds	r2, r4, #2
 80086e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80086ea:	78a2      	ldrb	r2, [r4, #2]
 80086ec:	e785      	b.n	80085fa <_strtod_l+0x192>
 80086ee:	f04f 0c01 	mov.w	ip, #1
 80086f2:	e7f8      	b.n	80086e6 <_strtod_l+0x27e>
 80086f4:	0800a540 	.word	0x0800a540
 80086f8:	0800a528 	.word	0x0800a528
 80086fc:	7ff00000 	.word	0x7ff00000
 8008700:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008702:	1c51      	adds	r1, r2, #1
 8008704:	9119      	str	r1, [sp, #100]	@ 0x64
 8008706:	7852      	ldrb	r2, [r2, #1]
 8008708:	2a30      	cmp	r2, #48	@ 0x30
 800870a:	d0f9      	beq.n	8008700 <_strtod_l+0x298>
 800870c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008710:	2908      	cmp	r1, #8
 8008712:	f63f af78 	bhi.w	8008606 <_strtod_l+0x19e>
 8008716:	3a30      	subs	r2, #48	@ 0x30
 8008718:	920e      	str	r2, [sp, #56]	@ 0x38
 800871a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800871c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800871e:	f04f 080a 	mov.w	r8, #10
 8008722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008724:	1c56      	adds	r6, r2, #1
 8008726:	9619      	str	r6, [sp, #100]	@ 0x64
 8008728:	7852      	ldrb	r2, [r2, #1]
 800872a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800872e:	f1be 0f09 	cmp.w	lr, #9
 8008732:	d939      	bls.n	80087a8 <_strtod_l+0x340>
 8008734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008736:	1a76      	subs	r6, r6, r1
 8008738:	2e08      	cmp	r6, #8
 800873a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800873e:	dc03      	bgt.n	8008748 <_strtod_l+0x2e0>
 8008740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008742:	4588      	cmp	r8, r1
 8008744:	bfa8      	it	ge
 8008746:	4688      	movge	r8, r1
 8008748:	f1bc 0f00 	cmp.w	ip, #0
 800874c:	d001      	beq.n	8008752 <_strtod_l+0x2ea>
 800874e:	f1c8 0800 	rsb	r8, r8, #0
 8008752:	2d00      	cmp	r5, #0
 8008754:	d14e      	bne.n	80087f4 <_strtod_l+0x38c>
 8008756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008758:	4308      	orrs	r0, r1
 800875a:	f47f aebe 	bne.w	80084da <_strtod_l+0x72>
 800875e:	2b00      	cmp	r3, #0
 8008760:	f47f aed6 	bne.w	8008510 <_strtod_l+0xa8>
 8008764:	2a69      	cmp	r2, #105	@ 0x69
 8008766:	d028      	beq.n	80087ba <_strtod_l+0x352>
 8008768:	dc25      	bgt.n	80087b6 <_strtod_l+0x34e>
 800876a:	2a49      	cmp	r2, #73	@ 0x49
 800876c:	d025      	beq.n	80087ba <_strtod_l+0x352>
 800876e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008770:	f47f aece 	bne.w	8008510 <_strtod_l+0xa8>
 8008774:	499b      	ldr	r1, [pc, #620]	@ (80089e4 <_strtod_l+0x57c>)
 8008776:	a819      	add	r0, sp, #100	@ 0x64
 8008778:	f001 f9ee 	bl	8009b58 <__match>
 800877c:	2800      	cmp	r0, #0
 800877e:	f43f aec7 	beq.w	8008510 <_strtod_l+0xa8>
 8008782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b28      	cmp	r3, #40	@ 0x28
 8008788:	d12e      	bne.n	80087e8 <_strtod_l+0x380>
 800878a:	4997      	ldr	r1, [pc, #604]	@ (80089e8 <_strtod_l+0x580>)
 800878c:	aa1c      	add	r2, sp, #112	@ 0x70
 800878e:	a819      	add	r0, sp, #100	@ 0x64
 8008790:	f001 f9f6 	bl	8009b80 <__hexnan>
 8008794:	2805      	cmp	r0, #5
 8008796:	d127      	bne.n	80087e8 <_strtod_l+0x380>
 8008798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800879a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800879e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80087a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80087a6:	e698      	b.n	80084da <_strtod_l+0x72>
 80087a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80087aa:	fb08 2101 	mla	r1, r8, r1, r2
 80087ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80087b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80087b4:	e7b5      	b.n	8008722 <_strtod_l+0x2ba>
 80087b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80087b8:	e7da      	b.n	8008770 <_strtod_l+0x308>
 80087ba:	498c      	ldr	r1, [pc, #560]	@ (80089ec <_strtod_l+0x584>)
 80087bc:	a819      	add	r0, sp, #100	@ 0x64
 80087be:	f001 f9cb 	bl	8009b58 <__match>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f43f aea4 	beq.w	8008510 <_strtod_l+0xa8>
 80087c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ca:	4989      	ldr	r1, [pc, #548]	@ (80089f0 <_strtod_l+0x588>)
 80087cc:	3b01      	subs	r3, #1
 80087ce:	a819      	add	r0, sp, #100	@ 0x64
 80087d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80087d2:	f001 f9c1 	bl	8009b58 <__match>
 80087d6:	b910      	cbnz	r0, 80087de <_strtod_l+0x376>
 80087d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087da:	3301      	adds	r3, #1
 80087dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80087de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008a00 <_strtod_l+0x598>
 80087e2:	f04f 0a00 	mov.w	sl, #0
 80087e6:	e678      	b.n	80084da <_strtod_l+0x72>
 80087e8:	4882      	ldr	r0, [pc, #520]	@ (80089f4 <_strtod_l+0x58c>)
 80087ea:	f000 fef1 	bl	80095d0 <nan>
 80087ee:	ec5b ab10 	vmov	sl, fp, d0
 80087f2:	e672      	b.n	80084da <_strtod_l+0x72>
 80087f4:	eba8 0309 	sub.w	r3, r8, r9
 80087f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fc:	2f00      	cmp	r7, #0
 80087fe:	bf08      	it	eq
 8008800:	462f      	moveq	r7, r5
 8008802:	2d10      	cmp	r5, #16
 8008804:	462c      	mov	r4, r5
 8008806:	bfa8      	it	ge
 8008808:	2410      	movge	r4, #16
 800880a:	f7f7 fe9b 	bl	8000544 <__aeabi_ui2d>
 800880e:	2d09      	cmp	r5, #9
 8008810:	4682      	mov	sl, r0
 8008812:	468b      	mov	fp, r1
 8008814:	dc13      	bgt.n	800883e <_strtod_l+0x3d6>
 8008816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	f43f ae5e 	beq.w	80084da <_strtod_l+0x72>
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	dd78      	ble.n	8008914 <_strtod_l+0x4ac>
 8008822:	2b16      	cmp	r3, #22
 8008824:	dc5f      	bgt.n	80088e6 <_strtod_l+0x47e>
 8008826:	4974      	ldr	r1, [pc, #464]	@ (80089f8 <_strtod_l+0x590>)
 8008828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800882c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008830:	4652      	mov	r2, sl
 8008832:	465b      	mov	r3, fp
 8008834:	f7f7 ff00 	bl	8000638 <__aeabi_dmul>
 8008838:	4682      	mov	sl, r0
 800883a:	468b      	mov	fp, r1
 800883c:	e64d      	b.n	80084da <_strtod_l+0x72>
 800883e:	4b6e      	ldr	r3, [pc, #440]	@ (80089f8 <_strtod_l+0x590>)
 8008840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008844:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008848:	f7f7 fef6 	bl	8000638 <__aeabi_dmul>
 800884c:	4682      	mov	sl, r0
 800884e:	9808      	ldr	r0, [sp, #32]
 8008850:	468b      	mov	fp, r1
 8008852:	f7f7 fe77 	bl	8000544 <__aeabi_ui2d>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 fd35 	bl	80002cc <__adddf3>
 8008862:	2d0f      	cmp	r5, #15
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	ddd5      	ble.n	8008816 <_strtod_l+0x3ae>
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	1b2c      	subs	r4, r5, r4
 800886e:	441c      	add	r4, r3
 8008870:	2c00      	cmp	r4, #0
 8008872:	f340 8096 	ble.w	80089a2 <_strtod_l+0x53a>
 8008876:	f014 030f 	ands.w	r3, r4, #15
 800887a:	d00a      	beq.n	8008892 <_strtod_l+0x42a>
 800887c:	495e      	ldr	r1, [pc, #376]	@ (80089f8 <_strtod_l+0x590>)
 800887e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008882:	4652      	mov	r2, sl
 8008884:	465b      	mov	r3, fp
 8008886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800888a:	f7f7 fed5 	bl	8000638 <__aeabi_dmul>
 800888e:	4682      	mov	sl, r0
 8008890:	468b      	mov	fp, r1
 8008892:	f034 040f 	bics.w	r4, r4, #15
 8008896:	d073      	beq.n	8008980 <_strtod_l+0x518>
 8008898:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800889c:	dd48      	ble.n	8008930 <_strtod_l+0x4c8>
 800889e:	2400      	movs	r4, #0
 80088a0:	46a0      	mov	r8, r4
 80088a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80088a4:	46a1      	mov	r9, r4
 80088a6:	9a05      	ldr	r2, [sp, #20]
 80088a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008a00 <_strtod_l+0x598>
 80088ac:	2322      	movs	r3, #34	@ 0x22
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f04f 0a00 	mov.w	sl, #0
 80088b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f43f ae0f 	beq.w	80084da <_strtod_l+0x72>
 80088bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	f7ff f942 	bl	8007b48 <_Bfree>
 80088c4:	9805      	ldr	r0, [sp, #20]
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7ff f93e 	bl	8007b48 <_Bfree>
 80088cc:	9805      	ldr	r0, [sp, #20]
 80088ce:	4641      	mov	r1, r8
 80088d0:	f7ff f93a 	bl	8007b48 <_Bfree>
 80088d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088d6:	9805      	ldr	r0, [sp, #20]
 80088d8:	f7ff f936 	bl	8007b48 <_Bfree>
 80088dc:	9805      	ldr	r0, [sp, #20]
 80088de:	4621      	mov	r1, r4
 80088e0:	f7ff f932 	bl	8007b48 <_Bfree>
 80088e4:	e5f9      	b.n	80084da <_strtod_l+0x72>
 80088e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80088ec:	4293      	cmp	r3, r2
 80088ee:	dbbc      	blt.n	800886a <_strtod_l+0x402>
 80088f0:	4c41      	ldr	r4, [pc, #260]	@ (80089f8 <_strtod_l+0x590>)
 80088f2:	f1c5 050f 	rsb	r5, r5, #15
 80088f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088fa:	4652      	mov	r2, sl
 80088fc:	465b      	mov	r3, fp
 80088fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008902:	f7f7 fe99 	bl	8000638 <__aeabi_dmul>
 8008906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008908:	1b5d      	subs	r5, r3, r5
 800890a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800890e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008912:	e78f      	b.n	8008834 <_strtod_l+0x3cc>
 8008914:	3316      	adds	r3, #22
 8008916:	dba8      	blt.n	800886a <_strtod_l+0x402>
 8008918:	4b37      	ldr	r3, [pc, #220]	@ (80089f8 <_strtod_l+0x590>)
 800891a:	eba9 0808 	sub.w	r8, r9, r8
 800891e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008922:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008926:	4650      	mov	r0, sl
 8008928:	4659      	mov	r1, fp
 800892a:	f7f7 ffaf 	bl	800088c <__aeabi_ddiv>
 800892e:	e783      	b.n	8008838 <_strtod_l+0x3d0>
 8008930:	4b32      	ldr	r3, [pc, #200]	@ (80089fc <_strtod_l+0x594>)
 8008932:	9308      	str	r3, [sp, #32]
 8008934:	2300      	movs	r3, #0
 8008936:	1124      	asrs	r4, r4, #4
 8008938:	4650      	mov	r0, sl
 800893a:	4659      	mov	r1, fp
 800893c:	461e      	mov	r6, r3
 800893e:	2c01      	cmp	r4, #1
 8008940:	dc21      	bgt.n	8008986 <_strtod_l+0x51e>
 8008942:	b10b      	cbz	r3, 8008948 <_strtod_l+0x4e0>
 8008944:	4682      	mov	sl, r0
 8008946:	468b      	mov	fp, r1
 8008948:	492c      	ldr	r1, [pc, #176]	@ (80089fc <_strtod_l+0x594>)
 800894a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800894e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008952:	4652      	mov	r2, sl
 8008954:	465b      	mov	r3, fp
 8008956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895a:	f7f7 fe6d 	bl	8000638 <__aeabi_dmul>
 800895e:	4b28      	ldr	r3, [pc, #160]	@ (8008a00 <_strtod_l+0x598>)
 8008960:	460a      	mov	r2, r1
 8008962:	400b      	ands	r3, r1
 8008964:	4927      	ldr	r1, [pc, #156]	@ (8008a04 <_strtod_l+0x59c>)
 8008966:	428b      	cmp	r3, r1
 8008968:	4682      	mov	sl, r0
 800896a:	d898      	bhi.n	800889e <_strtod_l+0x436>
 800896c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008970:	428b      	cmp	r3, r1
 8008972:	bf86      	itte	hi
 8008974:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008a08 <_strtod_l+0x5a0>
 8008978:	f04f 3aff 	movhi.w	sl, #4294967295
 800897c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008980:	2300      	movs	r3, #0
 8008982:	9308      	str	r3, [sp, #32]
 8008984:	e07a      	b.n	8008a7c <_strtod_l+0x614>
 8008986:	07e2      	lsls	r2, r4, #31
 8008988:	d505      	bpl.n	8008996 <_strtod_l+0x52e>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fe52 	bl	8000638 <__aeabi_dmul>
 8008994:	2301      	movs	r3, #1
 8008996:	9a08      	ldr	r2, [sp, #32]
 8008998:	3208      	adds	r2, #8
 800899a:	3601      	adds	r6, #1
 800899c:	1064      	asrs	r4, r4, #1
 800899e:	9208      	str	r2, [sp, #32]
 80089a0:	e7cd      	b.n	800893e <_strtod_l+0x4d6>
 80089a2:	d0ed      	beq.n	8008980 <_strtod_l+0x518>
 80089a4:	4264      	negs	r4, r4
 80089a6:	f014 020f 	ands.w	r2, r4, #15
 80089aa:	d00a      	beq.n	80089c2 <_strtod_l+0x55a>
 80089ac:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <_strtod_l+0x590>)
 80089ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089b2:	4650      	mov	r0, sl
 80089b4:	4659      	mov	r1, fp
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 ff67 	bl	800088c <__aeabi_ddiv>
 80089be:	4682      	mov	sl, r0
 80089c0:	468b      	mov	fp, r1
 80089c2:	1124      	asrs	r4, r4, #4
 80089c4:	d0dc      	beq.n	8008980 <_strtod_l+0x518>
 80089c6:	2c1f      	cmp	r4, #31
 80089c8:	dd20      	ble.n	8008a0c <_strtod_l+0x5a4>
 80089ca:	2400      	movs	r4, #0
 80089cc:	46a0      	mov	r8, r4
 80089ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80089d0:	46a1      	mov	r9, r4
 80089d2:	9a05      	ldr	r2, [sp, #20]
 80089d4:	2322      	movs	r3, #34	@ 0x22
 80089d6:	f04f 0a00 	mov.w	sl, #0
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	e768      	b.n	80088b4 <_strtod_l+0x44c>
 80089e2:	bf00      	nop
 80089e4:	0800a319 	.word	0x0800a319
 80089e8:	0800a52c 	.word	0x0800a52c
 80089ec:	0800a311 	.word	0x0800a311
 80089f0:	0800a348 	.word	0x0800a348
 80089f4:	0800a6d5 	.word	0x0800a6d5
 80089f8:	0800a460 	.word	0x0800a460
 80089fc:	0800a438 	.word	0x0800a438
 8008a00:	7ff00000 	.word	0x7ff00000
 8008a04:	7ca00000 	.word	0x7ca00000
 8008a08:	7fefffff 	.word	0x7fefffff
 8008a0c:	f014 0310 	ands.w	r3, r4, #16
 8008a10:	bf18      	it	ne
 8008a12:	236a      	movne	r3, #106	@ 0x6a
 8008a14:	4ea9      	ldr	r6, [pc, #676]	@ (8008cbc <_strtod_l+0x854>)
 8008a16:	9308      	str	r3, [sp, #32]
 8008a18:	4650      	mov	r0, sl
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	07e2      	lsls	r2, r4, #31
 8008a20:	d504      	bpl.n	8008a2c <_strtod_l+0x5c4>
 8008a22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a26:	f7f7 fe07 	bl	8000638 <__aeabi_dmul>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	1064      	asrs	r4, r4, #1
 8008a2e:	f106 0608 	add.w	r6, r6, #8
 8008a32:	d1f4      	bne.n	8008a1e <_strtod_l+0x5b6>
 8008a34:	b10b      	cbz	r3, 8008a3a <_strtod_l+0x5d2>
 8008a36:	4682      	mov	sl, r0
 8008a38:	468b      	mov	fp, r1
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	b1b3      	cbz	r3, 8008a6c <_strtod_l+0x604>
 8008a3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	4659      	mov	r1, fp
 8008a4a:	dd0f      	ble.n	8008a6c <_strtod_l+0x604>
 8008a4c:	2b1f      	cmp	r3, #31
 8008a4e:	dd55      	ble.n	8008afc <_strtod_l+0x694>
 8008a50:	2b34      	cmp	r3, #52	@ 0x34
 8008a52:	bfde      	ittt	le
 8008a54:	f04f 33ff 	movle.w	r3, #4294967295
 8008a58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008a5c:	4093      	lslle	r3, r2
 8008a5e:	f04f 0a00 	mov.w	sl, #0
 8008a62:	bfcc      	ite	gt
 8008a64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a68:	ea03 0b01 	andle.w	fp, r3, r1
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	f7f8 f848 	bl	8000b08 <__aeabi_dcmpeq>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d1a6      	bne.n	80089ca <_strtod_l+0x562>
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a82:	9805      	ldr	r0, [sp, #20]
 8008a84:	462b      	mov	r3, r5
 8008a86:	463a      	mov	r2, r7
 8008a88:	f7ff f8c6 	bl	8007c18 <__s2b>
 8008a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f af05 	beq.w	800889e <_strtod_l+0x436>
 8008a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	eba9 0308 	sub.w	r3, r9, r8
 8008a9c:	bfa8      	it	ge
 8008a9e:	2300      	movge	r3, #0
 8008aa0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008aa2:	2400      	movs	r4, #0
 8008aa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008aa8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008aaa:	46a0      	mov	r8, r4
 8008aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aae:	9805      	ldr	r0, [sp, #20]
 8008ab0:	6859      	ldr	r1, [r3, #4]
 8008ab2:	f7ff f809 	bl	8007ac8 <_Balloc>
 8008ab6:	4681      	mov	r9, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f43f aef4 	beq.w	80088a6 <_strtod_l+0x43e>
 8008abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	3202      	adds	r2, #2
 8008ac4:	f103 010c 	add.w	r1, r3, #12
 8008ac8:	0092      	lsls	r2, r2, #2
 8008aca:	300c      	adds	r0, #12
 8008acc:	f000 fd72 	bl	80095b4 <memcpy>
 8008ad0:	ec4b ab10 	vmov	d0, sl, fp
 8008ad4:	9805      	ldr	r0, [sp, #20]
 8008ad6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ad8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008ada:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ade:	f7ff fbd7 	bl	8008290 <__d2b>
 8008ae2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f43f aede 	beq.w	80088a6 <_strtod_l+0x43e>
 8008aea:	9805      	ldr	r0, [sp, #20]
 8008aec:	2101      	movs	r1, #1
 8008aee:	f7ff f929 	bl	8007d44 <__i2b>
 8008af2:	4680      	mov	r8, r0
 8008af4:	b948      	cbnz	r0, 8008b0a <_strtod_l+0x6a2>
 8008af6:	f04f 0800 	mov.w	r8, #0
 8008afa:	e6d4      	b.n	80088a6 <_strtod_l+0x43e>
 8008afc:	f04f 32ff 	mov.w	r2, #4294967295
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	ea03 0a0a 	and.w	sl, r3, sl
 8008b08:	e7b0      	b.n	8008a6c <_strtod_l+0x604>
 8008b0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008b0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	bfab      	itete	ge
 8008b12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008b14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008b16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008b18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008b1a:	bfac      	ite	ge
 8008b1c:	18ef      	addge	r7, r5, r3
 8008b1e:	1b5e      	sublt	r6, r3, r5
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	1aed      	subs	r5, r5, r3
 8008b24:	4415      	add	r5, r2
 8008b26:	4b66      	ldr	r3, [pc, #408]	@ (8008cc0 <_strtod_l+0x858>)
 8008b28:	3d01      	subs	r5, #1
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008b30:	da50      	bge.n	8008bd4 <_strtod_l+0x76c>
 8008b32:	1b5b      	subs	r3, r3, r5
 8008b34:	2b1f      	cmp	r3, #31
 8008b36:	eba2 0203 	sub.w	r2, r2, r3
 8008b3a:	f04f 0101 	mov.w	r1, #1
 8008b3e:	dc3d      	bgt.n	8008bbc <_strtod_l+0x754>
 8008b40:	fa01 f303 	lsl.w	r3, r1, r3
 8008b44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b46:	2300      	movs	r3, #0
 8008b48:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b4a:	18bd      	adds	r5, r7, r2
 8008b4c:	9b08      	ldr	r3, [sp, #32]
 8008b4e:	42af      	cmp	r7, r5
 8008b50:	4416      	add	r6, r2
 8008b52:	441e      	add	r6, r3
 8008b54:	463b      	mov	r3, r7
 8008b56:	bfa8      	it	ge
 8008b58:	462b      	movge	r3, r5
 8008b5a:	42b3      	cmp	r3, r6
 8008b5c:	bfa8      	it	ge
 8008b5e:	4633      	movge	r3, r6
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfc2      	ittt	gt
 8008b64:	1aed      	subgt	r5, r5, r3
 8008b66:	1af6      	subgt	r6, r6, r3
 8008b68:	1aff      	subgt	r7, r7, r3
 8008b6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd16      	ble.n	8008b9e <_strtod_l+0x736>
 8008b70:	4641      	mov	r1, r8
 8008b72:	9805      	ldr	r0, [sp, #20]
 8008b74:	461a      	mov	r2, r3
 8008b76:	f7ff f9a5 	bl	8007ec4 <__pow5mult>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d0ba      	beq.n	8008af6 <_strtod_l+0x68e>
 8008b80:	4601      	mov	r1, r0
 8008b82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	f7ff f8f3 	bl	8007d70 <__multiply>
 8008b8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f43f ae8a 	beq.w	80088a6 <_strtod_l+0x43e>
 8008b92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b94:	9805      	ldr	r0, [sp, #20]
 8008b96:	f7fe ffd7 	bl	8007b48 <_Bfree>
 8008b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	dc1d      	bgt.n	8008bde <_strtod_l+0x776>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd23      	ble.n	8008bf0 <_strtod_l+0x788>
 8008ba8:	4649      	mov	r1, r9
 8008baa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008bac:	9805      	ldr	r0, [sp, #20]
 8008bae:	f7ff f989 	bl	8007ec4 <__pow5mult>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	b9e0      	cbnz	r0, 8008bf0 <_strtod_l+0x788>
 8008bb6:	f04f 0900 	mov.w	r9, #0
 8008bba:	e674      	b.n	80088a6 <_strtod_l+0x43e>
 8008bbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008bc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008bc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008bc8:	35e2      	adds	r5, #226	@ 0xe2
 8008bca:	fa01 f305 	lsl.w	r3, r1, r5
 8008bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008bd2:	e7ba      	b.n	8008b4a <_strtod_l+0x6e2>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bdc:	e7b5      	b.n	8008b4a <_strtod_l+0x6e2>
 8008bde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008be0:	9805      	ldr	r0, [sp, #20]
 8008be2:	462a      	mov	r2, r5
 8008be4:	f7ff f9c8 	bl	8007f78 <__lshift>
 8008be8:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d1d9      	bne.n	8008ba2 <_strtod_l+0x73a>
 8008bee:	e65a      	b.n	80088a6 <_strtod_l+0x43e>
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	dd07      	ble.n	8008c04 <_strtod_l+0x79c>
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	9805      	ldr	r0, [sp, #20]
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	f7ff f9bd 	bl	8007f78 <__lshift>
 8008bfe:	4681      	mov	r9, r0
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d0d8      	beq.n	8008bb6 <_strtod_l+0x74e>
 8008c04:	2f00      	cmp	r7, #0
 8008c06:	dd08      	ble.n	8008c1a <_strtod_l+0x7b2>
 8008c08:	4641      	mov	r1, r8
 8008c0a:	9805      	ldr	r0, [sp, #20]
 8008c0c:	463a      	mov	r2, r7
 8008c0e:	f7ff f9b3 	bl	8007f78 <__lshift>
 8008c12:	4680      	mov	r8, r0
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f43f ae46 	beq.w	80088a6 <_strtod_l+0x43e>
 8008c1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c1c:	9805      	ldr	r0, [sp, #20]
 8008c1e:	464a      	mov	r2, r9
 8008c20:	f7ff fa32 	bl	8008088 <__mdiff>
 8008c24:	4604      	mov	r4, r0
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f43f ae3d 	beq.w	80088a6 <_strtod_l+0x43e>
 8008c2c:	68c3      	ldr	r3, [r0, #12]
 8008c2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c30:	2300      	movs	r3, #0
 8008c32:	60c3      	str	r3, [r0, #12]
 8008c34:	4641      	mov	r1, r8
 8008c36:	f7ff fa0b 	bl	8008050 <__mcmp>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	da46      	bge.n	8008ccc <_strtod_l+0x864>
 8008c3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c40:	ea53 030a 	orrs.w	r3, r3, sl
 8008c44:	d16c      	bne.n	8008d20 <_strtod_l+0x8b8>
 8008c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d168      	bne.n	8008d20 <_strtod_l+0x8b8>
 8008c4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c52:	0d1b      	lsrs	r3, r3, #20
 8008c54:	051b      	lsls	r3, r3, #20
 8008c56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c5a:	d961      	bls.n	8008d20 <_strtod_l+0x8b8>
 8008c5c:	6963      	ldr	r3, [r4, #20]
 8008c5e:	b913      	cbnz	r3, 8008c66 <_strtod_l+0x7fe>
 8008c60:	6923      	ldr	r3, [r4, #16]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	dd5c      	ble.n	8008d20 <_strtod_l+0x8b8>
 8008c66:	4621      	mov	r1, r4
 8008c68:	2201      	movs	r2, #1
 8008c6a:	9805      	ldr	r0, [sp, #20]
 8008c6c:	f7ff f984 	bl	8007f78 <__lshift>
 8008c70:	4641      	mov	r1, r8
 8008c72:	4604      	mov	r4, r0
 8008c74:	f7ff f9ec 	bl	8008050 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dd51      	ble.n	8008d20 <_strtod_l+0x8b8>
 8008c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c80:	9a08      	ldr	r2, [sp, #32]
 8008c82:	0d1b      	lsrs	r3, r3, #20
 8008c84:	051b      	lsls	r3, r3, #20
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d06b      	beq.n	8008d62 <_strtod_l+0x8fa>
 8008c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c8e:	d868      	bhi.n	8008d62 <_strtod_l+0x8fa>
 8008c90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c94:	f67f ae9d 	bls.w	80089d2 <_strtod_l+0x56a>
 8008c98:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc4 <_strtod_l+0x85c>)
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f7f7 fcca 	bl	8000638 <__aeabi_dmul>
 8008ca4:	4b08      	ldr	r3, [pc, #32]	@ (8008cc8 <_strtod_l+0x860>)
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	4682      	mov	sl, r0
 8008caa:	468b      	mov	fp, r1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f ae05 	bne.w	80088bc <_strtod_l+0x454>
 8008cb2:	9a05      	ldr	r2, [sp, #20]
 8008cb4:	2322      	movs	r3, #34	@ 0x22
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	e600      	b.n	80088bc <_strtod_l+0x454>
 8008cba:	bf00      	nop
 8008cbc:	0800a558 	.word	0x0800a558
 8008cc0:	fffffc02 	.word	0xfffffc02
 8008cc4:	39500000 	.word	0x39500000
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008cd0:	d165      	bne.n	8008d9e <_strtod_l+0x936>
 8008cd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008cd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd8:	b35a      	cbz	r2, 8008d32 <_strtod_l+0x8ca>
 8008cda:	4a9f      	ldr	r2, [pc, #636]	@ (8008f58 <_strtod_l+0xaf0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d12b      	bne.n	8008d38 <_strtod_l+0x8d0>
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	4651      	mov	r1, sl
 8008ce4:	b303      	cbz	r3, 8008d28 <_strtod_l+0x8c0>
 8008ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8008f5c <_strtod_l+0xaf4>)
 8008ce8:	465a      	mov	r2, fp
 8008cea:	4013      	ands	r3, r2
 8008cec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf4:	d81b      	bhi.n	8008d2e <_strtod_l+0x8c6>
 8008cf6:	0d1b      	lsrs	r3, r3, #20
 8008cf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d119      	bne.n	8008d38 <_strtod_l+0x8d0>
 8008d04:	4b96      	ldr	r3, [pc, #600]	@ (8008f60 <_strtod_l+0xaf8>)
 8008d06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d102      	bne.n	8008d12 <_strtod_l+0x8aa>
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	f43f adca 	beq.w	80088a6 <_strtod_l+0x43e>
 8008d12:	4b92      	ldr	r3, [pc, #584]	@ (8008f5c <_strtod_l+0xaf4>)
 8008d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d16:	401a      	ands	r2, r3
 8008d18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008d1c:	f04f 0a00 	mov.w	sl, #0
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1b8      	bne.n	8008c98 <_strtod_l+0x830>
 8008d26:	e5c9      	b.n	80088bc <_strtod_l+0x454>
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2c:	e7e8      	b.n	8008d00 <_strtod_l+0x898>
 8008d2e:	4613      	mov	r3, r2
 8008d30:	e7e6      	b.n	8008d00 <_strtod_l+0x898>
 8008d32:	ea53 030a 	orrs.w	r3, r3, sl
 8008d36:	d0a1      	beq.n	8008c7c <_strtod_l+0x814>
 8008d38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d3a:	b1db      	cbz	r3, 8008d74 <_strtod_l+0x90c>
 8008d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d3e:	4213      	tst	r3, r2
 8008d40:	d0ee      	beq.n	8008d20 <_strtod_l+0x8b8>
 8008d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d44:	9a08      	ldr	r2, [sp, #32]
 8008d46:	4650      	mov	r0, sl
 8008d48:	4659      	mov	r1, fp
 8008d4a:	b1bb      	cbz	r3, 8008d7c <_strtod_l+0x914>
 8008d4c:	f7ff fb6e 	bl	800842c <sulp>
 8008d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d54:	ec53 2b10 	vmov	r2, r3, d0
 8008d58:	f7f7 fab8 	bl	80002cc <__adddf3>
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	468b      	mov	fp, r1
 8008d60:	e7de      	b.n	8008d20 <_strtod_l+0x8b8>
 8008d62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008d66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008d72:	e7d5      	b.n	8008d20 <_strtod_l+0x8b8>
 8008d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d76:	ea13 0f0a 	tst.w	r3, sl
 8008d7a:	e7e1      	b.n	8008d40 <_strtod_l+0x8d8>
 8008d7c:	f7ff fb56 	bl	800842c <sulp>
 8008d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d84:	ec53 2b10 	vmov	r2, r3, d0
 8008d88:	f7f7 fa9e 	bl	80002c8 <__aeabi_dsub>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4682      	mov	sl, r0
 8008d92:	468b      	mov	fp, r1
 8008d94:	f7f7 feb8 	bl	8000b08 <__aeabi_dcmpeq>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0c1      	beq.n	8008d20 <_strtod_l+0x8b8>
 8008d9c:	e619      	b.n	80089d2 <_strtod_l+0x56a>
 8008d9e:	4641      	mov	r1, r8
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7ff facd 	bl	8008340 <__ratio>
 8008da6:	ec57 6b10 	vmov	r6, r7, d0
 8008daa:	2200      	movs	r2, #0
 8008dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008db0:	4630      	mov	r0, r6
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 febc 	bl	8000b30 <__aeabi_dcmple>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d06f      	beq.n	8008e9c <_strtod_l+0xa34>
 8008dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d17a      	bne.n	8008eb8 <_strtod_l+0xa50>
 8008dc2:	f1ba 0f00 	cmp.w	sl, #0
 8008dc6:	d158      	bne.n	8008e7a <_strtod_l+0xa12>
 8008dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d15a      	bne.n	8008e88 <_strtod_l+0xa20>
 8008dd2:	4b64      	ldr	r3, [pc, #400]	@ (8008f64 <_strtod_l+0xafc>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fe9f 	bl	8000b1c <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d159      	bne.n	8008e96 <_strtod_l+0xa2e>
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	4b60      	ldr	r3, [pc, #384]	@ (8008f68 <_strtod_l+0xb00>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	f7f7 fc25 	bl	8000638 <__aeabi_dmul>
 8008dee:	4606      	mov	r6, r0
 8008df0:	460f      	mov	r7, r1
 8008df2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008df6:	9606      	str	r6, [sp, #24]
 8008df8:	9307      	str	r3, [sp, #28]
 8008dfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dfe:	4d57      	ldr	r5, [pc, #348]	@ (8008f5c <_strtod_l+0xaf4>)
 8008e00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e06:	401d      	ands	r5, r3
 8008e08:	4b58      	ldr	r3, [pc, #352]	@ (8008f6c <_strtod_l+0xb04>)
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	f040 80b2 	bne.w	8008f74 <_strtod_l+0xb0c>
 8008e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008e16:	ec4b ab10 	vmov	d0, sl, fp
 8008e1a:	f7ff f9c9 	bl	80081b0 <__ulp>
 8008e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e22:	ec51 0b10 	vmov	r0, r1, d0
 8008e26:	f7f7 fc07 	bl	8000638 <__aeabi_dmul>
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	f7f7 fa4d 	bl	80002cc <__adddf3>
 8008e32:	460b      	mov	r3, r1
 8008e34:	4949      	ldr	r1, [pc, #292]	@ (8008f5c <_strtod_l+0xaf4>)
 8008e36:	4a4e      	ldr	r2, [pc, #312]	@ (8008f70 <_strtod_l+0xb08>)
 8008e38:	4019      	ands	r1, r3
 8008e3a:	4291      	cmp	r1, r2
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	d942      	bls.n	8008ec6 <_strtod_l+0xa5e>
 8008e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e42:	4b47      	ldr	r3, [pc, #284]	@ (8008f60 <_strtod_l+0xaf8>)
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d103      	bne.n	8008e50 <_strtod_l+0x9e8>
 8008e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f43f ad2b 	beq.w	80088a6 <_strtod_l+0x43e>
 8008e50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008f60 <_strtod_l+0xaf8>
 8008e54:	f04f 3aff 	mov.w	sl, #4294967295
 8008e58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e5a:	9805      	ldr	r0, [sp, #20]
 8008e5c:	f7fe fe74 	bl	8007b48 <_Bfree>
 8008e60:	9805      	ldr	r0, [sp, #20]
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7fe fe70 	bl	8007b48 <_Bfree>
 8008e68:	9805      	ldr	r0, [sp, #20]
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	f7fe fe6c 	bl	8007b48 <_Bfree>
 8008e70:	9805      	ldr	r0, [sp, #20]
 8008e72:	4621      	mov	r1, r4
 8008e74:	f7fe fe68 	bl	8007b48 <_Bfree>
 8008e78:	e618      	b.n	8008aac <_strtod_l+0x644>
 8008e7a:	f1ba 0f01 	cmp.w	sl, #1
 8008e7e:	d103      	bne.n	8008e88 <_strtod_l+0xa20>
 8008e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f43f ada5 	beq.w	80089d2 <_strtod_l+0x56a>
 8008e88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008f38 <_strtod_l+0xad0>
 8008e8c:	4f35      	ldr	r7, [pc, #212]	@ (8008f64 <_strtod_l+0xafc>)
 8008e8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e92:	2600      	movs	r6, #0
 8008e94:	e7b1      	b.n	8008dfa <_strtod_l+0x992>
 8008e96:	4f34      	ldr	r7, [pc, #208]	@ (8008f68 <_strtod_l+0xb00>)
 8008e98:	2600      	movs	r6, #0
 8008e9a:	e7aa      	b.n	8008df2 <_strtod_l+0x98a>
 8008e9c:	4b32      	ldr	r3, [pc, #200]	@ (8008f68 <_strtod_l+0xb00>)
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d09f      	beq.n	8008df2 <_strtod_l+0x98a>
 8008eb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008eb6:	e7a0      	b.n	8008dfa <_strtod_l+0x992>
 8008eb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008f40 <_strtod_l+0xad8>
 8008ebc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ec0:	ec57 6b17 	vmov	r6, r7, d7
 8008ec4:	e799      	b.n	8008dfa <_strtod_l+0x992>
 8008ec6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1c1      	bne.n	8008e58 <_strtod_l+0x9f0>
 8008ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ed8:	0d1b      	lsrs	r3, r3, #20
 8008eda:	051b      	lsls	r3, r3, #20
 8008edc:	429d      	cmp	r5, r3
 8008ede:	d1bb      	bne.n	8008e58 <_strtod_l+0x9f0>
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 ff08 	bl	8000cf8 <__aeabi_d2lz>
 8008ee8:	f7f7 fb78 	bl	80005dc <__aeabi_l2d>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 f9e8 	bl	80002c8 <__aeabi_dsub>
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4602      	mov	r2, r0
 8008efc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008f00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f06:	ea46 060a 	orr.w	r6, r6, sl
 8008f0a:	431e      	orrs	r6, r3
 8008f0c:	d06f      	beq.n	8008fee <_strtod_l+0xb86>
 8008f0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f48 <_strtod_l+0xae0>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 fe02 	bl	8000b1c <__aeabi_dcmplt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f47f accf 	bne.w	80088bc <_strtod_l+0x454>
 8008f1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008f50 <_strtod_l+0xae8>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f28:	f7f7 fe16 	bl	8000b58 <__aeabi_dcmpgt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d093      	beq.n	8008e58 <_strtod_l+0x9f0>
 8008f30:	e4c4      	b.n	80088bc <_strtod_l+0x454>
 8008f32:	bf00      	nop
 8008f34:	f3af 8000 	nop.w
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	bff00000 	.word	0xbff00000
 8008f40:	00000000 	.word	0x00000000
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	94a03595 	.word	0x94a03595
 8008f4c:	3fdfffff 	.word	0x3fdfffff
 8008f50:	35afe535 	.word	0x35afe535
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	000fffff 	.word	0x000fffff
 8008f5c:	7ff00000 	.word	0x7ff00000
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	3ff00000 	.word	0x3ff00000
 8008f68:	3fe00000 	.word	0x3fe00000
 8008f6c:	7fe00000 	.word	0x7fe00000
 8008f70:	7c9fffff 	.word	0x7c9fffff
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	b323      	cbz	r3, 8008fc2 <_strtod_l+0xb5a>
 8008f78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f7c:	d821      	bhi.n	8008fc2 <_strtod_l+0xb5a>
 8008f7e:	a328      	add	r3, pc, #160	@ (adr r3, 8009020 <_strtod_l+0xbb8>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fdd2 	bl	8000b30 <__aeabi_dcmple>
 8008f8c:	b1a0      	cbz	r0, 8008fb8 <_strtod_l+0xb50>
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7f7 fe29 	bl	8000be8 <__aeabi_d2uiz>
 8008f96:	2801      	cmp	r0, #1
 8008f98:	bf38      	it	cc
 8008f9a:	2001      	movcc	r0, #1
 8008f9c:	f7f7 fad2 	bl	8000544 <__aeabi_ui2d>
 8008fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	b9fb      	cbnz	r3, 8008fe8 <_strtod_l+0xb80>
 8008fa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fac:	9014      	str	r0, [sp, #80]	@ 0x50
 8008fae:	9315      	str	r3, [sp, #84]	@ 0x54
 8008fb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008fb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008fb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008fbe:	1b5b      	subs	r3, r3, r5
 8008fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008fc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008fca:	f7ff f8f1 	bl	80081b0 <__ulp>
 8008fce:	4650      	mov	r0, sl
 8008fd0:	ec53 2b10 	vmov	r2, r3, d0
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	f7f7 fb2f 	bl	8000638 <__aeabi_dmul>
 8008fda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008fde:	f7f7 f975 	bl	80002cc <__adddf3>
 8008fe2:	4682      	mov	sl, r0
 8008fe4:	468b      	mov	fp, r1
 8008fe6:	e770      	b.n	8008eca <_strtod_l+0xa62>
 8008fe8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008fec:	e7e0      	b.n	8008fb0 <_strtod_l+0xb48>
 8008fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8009028 <_strtod_l+0xbc0>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f7f7 fd92 	bl	8000b1c <__aeabi_dcmplt>
 8008ff8:	e798      	b.n	8008f2c <_strtod_l+0xac4>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ffe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	f7ff ba6d 	b.w	80084e2 <_strtod_l+0x7a>
 8009008:	2a65      	cmp	r2, #101	@ 0x65
 800900a:	f43f ab66 	beq.w	80086da <_strtod_l+0x272>
 800900e:	2a45      	cmp	r2, #69	@ 0x45
 8009010:	f43f ab63 	beq.w	80086da <_strtod_l+0x272>
 8009014:	2301      	movs	r3, #1
 8009016:	f7ff bb9e 	b.w	8008756 <_strtod_l+0x2ee>
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w
 8009020:	ffc00000 	.word	0xffc00000
 8009024:	41dfffff 	.word	0x41dfffff
 8009028:	94a03595 	.word	0x94a03595
 800902c:	3fcfffff 	.word	0x3fcfffff

08009030 <_strtod_r>:
 8009030:	4b01      	ldr	r3, [pc, #4]	@ (8009038 <_strtod_r+0x8>)
 8009032:	f7ff ba19 	b.w	8008468 <_strtod_l>
 8009036:	bf00      	nop
 8009038:	20000150 	.word	0x20000150

0800903c <_strtol_l.constprop.0>:
 800903c:	2b24      	cmp	r3, #36	@ 0x24
 800903e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009042:	4686      	mov	lr, r0
 8009044:	4690      	mov	r8, r2
 8009046:	d801      	bhi.n	800904c <_strtol_l.constprop.0+0x10>
 8009048:	2b01      	cmp	r3, #1
 800904a:	d106      	bne.n	800905a <_strtol_l.constprop.0+0x1e>
 800904c:	f7fd fdba 	bl	8006bc4 <__errno>
 8009050:	2316      	movs	r3, #22
 8009052:	6003      	str	r3, [r0, #0]
 8009054:	2000      	movs	r0, #0
 8009056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905a:	4834      	ldr	r0, [pc, #208]	@ (800912c <_strtol_l.constprop.0+0xf0>)
 800905c:	460d      	mov	r5, r1
 800905e:	462a      	mov	r2, r5
 8009060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009064:	5d06      	ldrb	r6, [r0, r4]
 8009066:	f016 0608 	ands.w	r6, r6, #8
 800906a:	d1f8      	bne.n	800905e <_strtol_l.constprop.0+0x22>
 800906c:	2c2d      	cmp	r4, #45	@ 0x2d
 800906e:	d12d      	bne.n	80090cc <_strtol_l.constprop.0+0x90>
 8009070:	782c      	ldrb	r4, [r5, #0]
 8009072:	2601      	movs	r6, #1
 8009074:	1c95      	adds	r5, r2, #2
 8009076:	f033 0210 	bics.w	r2, r3, #16
 800907a:	d109      	bne.n	8009090 <_strtol_l.constprop.0+0x54>
 800907c:	2c30      	cmp	r4, #48	@ 0x30
 800907e:	d12a      	bne.n	80090d6 <_strtol_l.constprop.0+0x9a>
 8009080:	782a      	ldrb	r2, [r5, #0]
 8009082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009086:	2a58      	cmp	r2, #88	@ 0x58
 8009088:	d125      	bne.n	80090d6 <_strtol_l.constprop.0+0x9a>
 800908a:	786c      	ldrb	r4, [r5, #1]
 800908c:	2310      	movs	r3, #16
 800908e:	3502      	adds	r5, #2
 8009090:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009094:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009098:	2200      	movs	r2, #0
 800909a:	fbbc f9f3 	udiv	r9, ip, r3
 800909e:	4610      	mov	r0, r2
 80090a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80090a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80090a8:	2f09      	cmp	r7, #9
 80090aa:	d81b      	bhi.n	80090e4 <_strtol_l.constprop.0+0xa8>
 80090ac:	463c      	mov	r4, r7
 80090ae:	42a3      	cmp	r3, r4
 80090b0:	dd27      	ble.n	8009102 <_strtol_l.constprop.0+0xc6>
 80090b2:	1c57      	adds	r7, r2, #1
 80090b4:	d007      	beq.n	80090c6 <_strtol_l.constprop.0+0x8a>
 80090b6:	4581      	cmp	r9, r0
 80090b8:	d320      	bcc.n	80090fc <_strtol_l.constprop.0+0xc0>
 80090ba:	d101      	bne.n	80090c0 <_strtol_l.constprop.0+0x84>
 80090bc:	45a2      	cmp	sl, r4
 80090be:	db1d      	blt.n	80090fc <_strtol_l.constprop.0+0xc0>
 80090c0:	fb00 4003 	mla	r0, r0, r3, r4
 80090c4:	2201      	movs	r2, #1
 80090c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090ca:	e7eb      	b.n	80090a4 <_strtol_l.constprop.0+0x68>
 80090cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80090ce:	bf04      	itt	eq
 80090d0:	782c      	ldrbeq	r4, [r5, #0]
 80090d2:	1c95      	addeq	r5, r2, #2
 80090d4:	e7cf      	b.n	8009076 <_strtol_l.constprop.0+0x3a>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1da      	bne.n	8009090 <_strtol_l.constprop.0+0x54>
 80090da:	2c30      	cmp	r4, #48	@ 0x30
 80090dc:	bf0c      	ite	eq
 80090de:	2308      	moveq	r3, #8
 80090e0:	230a      	movne	r3, #10
 80090e2:	e7d5      	b.n	8009090 <_strtol_l.constprop.0+0x54>
 80090e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090e8:	2f19      	cmp	r7, #25
 80090ea:	d801      	bhi.n	80090f0 <_strtol_l.constprop.0+0xb4>
 80090ec:	3c37      	subs	r4, #55	@ 0x37
 80090ee:	e7de      	b.n	80090ae <_strtol_l.constprop.0+0x72>
 80090f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090f4:	2f19      	cmp	r7, #25
 80090f6:	d804      	bhi.n	8009102 <_strtol_l.constprop.0+0xc6>
 80090f8:	3c57      	subs	r4, #87	@ 0x57
 80090fa:	e7d8      	b.n	80090ae <_strtol_l.constprop.0+0x72>
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	e7e1      	b.n	80090c6 <_strtol_l.constprop.0+0x8a>
 8009102:	1c53      	adds	r3, r2, #1
 8009104:	d108      	bne.n	8009118 <_strtol_l.constprop.0+0xdc>
 8009106:	2322      	movs	r3, #34	@ 0x22
 8009108:	f8ce 3000 	str.w	r3, [lr]
 800910c:	4660      	mov	r0, ip
 800910e:	f1b8 0f00 	cmp.w	r8, #0
 8009112:	d0a0      	beq.n	8009056 <_strtol_l.constprop.0+0x1a>
 8009114:	1e69      	subs	r1, r5, #1
 8009116:	e006      	b.n	8009126 <_strtol_l.constprop.0+0xea>
 8009118:	b106      	cbz	r6, 800911c <_strtol_l.constprop.0+0xe0>
 800911a:	4240      	negs	r0, r0
 800911c:	f1b8 0f00 	cmp.w	r8, #0
 8009120:	d099      	beq.n	8009056 <_strtol_l.constprop.0+0x1a>
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1f6      	bne.n	8009114 <_strtol_l.constprop.0+0xd8>
 8009126:	f8c8 1000 	str.w	r1, [r8]
 800912a:	e794      	b.n	8009056 <_strtol_l.constprop.0+0x1a>
 800912c:	0800a581 	.word	0x0800a581

08009130 <_strtol_r>:
 8009130:	f7ff bf84 	b.w	800903c <_strtol_l.constprop.0>

08009134 <__ssputs_r>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	688e      	ldr	r6, [r1, #8]
 800913a:	461f      	mov	r7, r3
 800913c:	42be      	cmp	r6, r7
 800913e:	680b      	ldr	r3, [r1, #0]
 8009140:	4682      	mov	sl, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4690      	mov	r8, r2
 8009146:	d82d      	bhi.n	80091a4 <__ssputs_r+0x70>
 8009148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800914c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009150:	d026      	beq.n	80091a0 <__ssputs_r+0x6c>
 8009152:	6965      	ldr	r5, [r4, #20]
 8009154:	6909      	ldr	r1, [r1, #16]
 8009156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800915a:	eba3 0901 	sub.w	r9, r3, r1
 800915e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009162:	1c7b      	adds	r3, r7, #1
 8009164:	444b      	add	r3, r9
 8009166:	106d      	asrs	r5, r5, #1
 8009168:	429d      	cmp	r5, r3
 800916a:	bf38      	it	cc
 800916c:	461d      	movcc	r5, r3
 800916e:	0553      	lsls	r3, r2, #21
 8009170:	d527      	bpl.n	80091c2 <__ssputs_r+0x8e>
 8009172:	4629      	mov	r1, r5
 8009174:	f7fe fc1c 	bl	80079b0 <_malloc_r>
 8009178:	4606      	mov	r6, r0
 800917a:	b360      	cbz	r0, 80091d6 <__ssputs_r+0xa2>
 800917c:	6921      	ldr	r1, [r4, #16]
 800917e:	464a      	mov	r2, r9
 8009180:	f000 fa18 	bl	80095b4 <memcpy>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800918a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	6126      	str	r6, [r4, #16]
 8009192:	6165      	str	r5, [r4, #20]
 8009194:	444e      	add	r6, r9
 8009196:	eba5 0509 	sub.w	r5, r5, r9
 800919a:	6026      	str	r6, [r4, #0]
 800919c:	60a5      	str	r5, [r4, #8]
 800919e:	463e      	mov	r6, r7
 80091a0:	42be      	cmp	r6, r7
 80091a2:	d900      	bls.n	80091a6 <__ssputs_r+0x72>
 80091a4:	463e      	mov	r6, r7
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	4632      	mov	r2, r6
 80091aa:	4641      	mov	r1, r8
 80091ac:	f000 f9c6 	bl	800953c <memmove>
 80091b0:	68a3      	ldr	r3, [r4, #8]
 80091b2:	1b9b      	subs	r3, r3, r6
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	4433      	add	r3, r6
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	2000      	movs	r0, #0
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	462a      	mov	r2, r5
 80091c4:	f000 fd89 	bl	8009cda <_realloc_r>
 80091c8:	4606      	mov	r6, r0
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d1e0      	bne.n	8009190 <__ssputs_r+0x5c>
 80091ce:	6921      	ldr	r1, [r4, #16]
 80091d0:	4650      	mov	r0, sl
 80091d2:	f7fe fb79 	bl	80078c8 <_free_r>
 80091d6:	230c      	movs	r3, #12
 80091d8:	f8ca 3000 	str.w	r3, [sl]
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e7e9      	b.n	80091be <__ssputs_r+0x8a>
	...

080091ec <_svfiprintf_r>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4698      	mov	r8, r3
 80091f2:	898b      	ldrh	r3, [r1, #12]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	b09d      	sub	sp, #116	@ 0x74
 80091f8:	4607      	mov	r7, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	d510      	bpl.n	8009222 <_svfiprintf_r+0x36>
 8009200:	690b      	ldr	r3, [r1, #16]
 8009202:	b973      	cbnz	r3, 8009222 <_svfiprintf_r+0x36>
 8009204:	2140      	movs	r1, #64	@ 0x40
 8009206:	f7fe fbd3 	bl	80079b0 <_malloc_r>
 800920a:	6028      	str	r0, [r5, #0]
 800920c:	6128      	str	r0, [r5, #16]
 800920e:	b930      	cbnz	r0, 800921e <_svfiprintf_r+0x32>
 8009210:	230c      	movs	r3, #12
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	b01d      	add	sp, #116	@ 0x74
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	2340      	movs	r3, #64	@ 0x40
 8009220:	616b      	str	r3, [r5, #20]
 8009222:	2300      	movs	r3, #0
 8009224:	9309      	str	r3, [sp, #36]	@ 0x24
 8009226:	2320      	movs	r3, #32
 8009228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800922c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009230:	2330      	movs	r3, #48	@ 0x30
 8009232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093d0 <_svfiprintf_r+0x1e4>
 8009236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800923a:	f04f 0901 	mov.w	r9, #1
 800923e:	4623      	mov	r3, r4
 8009240:	469a      	mov	sl, r3
 8009242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009246:	b10a      	cbz	r2, 800924c <_svfiprintf_r+0x60>
 8009248:	2a25      	cmp	r2, #37	@ 0x25
 800924a:	d1f9      	bne.n	8009240 <_svfiprintf_r+0x54>
 800924c:	ebba 0b04 	subs.w	fp, sl, r4
 8009250:	d00b      	beq.n	800926a <_svfiprintf_r+0x7e>
 8009252:	465b      	mov	r3, fp
 8009254:	4622      	mov	r2, r4
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ff6b 	bl	8009134 <__ssputs_r>
 800925e:	3001      	adds	r0, #1
 8009260:	f000 80a7 	beq.w	80093b2 <_svfiprintf_r+0x1c6>
 8009264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009266:	445a      	add	r2, fp
 8009268:	9209      	str	r2, [sp, #36]	@ 0x24
 800926a:	f89a 3000 	ldrb.w	r3, [sl]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 809f 	beq.w	80093b2 <_svfiprintf_r+0x1c6>
 8009274:	2300      	movs	r3, #0
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927e:	f10a 0a01 	add.w	sl, sl, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	9307      	str	r3, [sp, #28]
 8009286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800928a:	931a      	str	r3, [sp, #104]	@ 0x68
 800928c:	4654      	mov	r4, sl
 800928e:	2205      	movs	r2, #5
 8009290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009294:	484e      	ldr	r0, [pc, #312]	@ (80093d0 <_svfiprintf_r+0x1e4>)
 8009296:	f7f6 ffbb 	bl	8000210 <memchr>
 800929a:	9a04      	ldr	r2, [sp, #16]
 800929c:	b9d8      	cbnz	r0, 80092d6 <_svfiprintf_r+0xea>
 800929e:	06d0      	lsls	r0, r2, #27
 80092a0:	bf44      	itt	mi
 80092a2:	2320      	movmi	r3, #32
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a8:	0711      	lsls	r1, r2, #28
 80092aa:	bf44      	itt	mi
 80092ac:	232b      	movmi	r3, #43	@ 0x2b
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092b8:	d015      	beq.n	80092e6 <_svfiprintf_r+0xfa>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	4654      	mov	r4, sl
 80092be:	2000      	movs	r0, #0
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4621      	mov	r1, r4
 80092c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ca:	3b30      	subs	r3, #48	@ 0x30
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d94b      	bls.n	8009368 <_svfiprintf_r+0x17c>
 80092d0:	b1b0      	cbz	r0, 8009300 <_svfiprintf_r+0x114>
 80092d2:	9207      	str	r2, [sp, #28]
 80092d4:	e014      	b.n	8009300 <_svfiprintf_r+0x114>
 80092d6:	eba0 0308 	sub.w	r3, r0, r8
 80092da:	fa09 f303 	lsl.w	r3, r9, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	46a2      	mov	sl, r4
 80092e4:	e7d2      	b.n	800928c <_svfiprintf_r+0xa0>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9103      	str	r1, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfbb      	ittet	lt
 80092f2:	425b      	neglt	r3, r3
 80092f4:	f042 0202 	orrlt.w	r2, r2, #2
 80092f8:	9307      	strge	r3, [sp, #28]
 80092fa:	9307      	strlt	r3, [sp, #28]
 80092fc:	bfb8      	it	lt
 80092fe:	9204      	strlt	r2, [sp, #16]
 8009300:	7823      	ldrb	r3, [r4, #0]
 8009302:	2b2e      	cmp	r3, #46	@ 0x2e
 8009304:	d10a      	bne.n	800931c <_svfiprintf_r+0x130>
 8009306:	7863      	ldrb	r3, [r4, #1]
 8009308:	2b2a      	cmp	r3, #42	@ 0x2a
 800930a:	d132      	bne.n	8009372 <_svfiprintf_r+0x186>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9203      	str	r2, [sp, #12]
 8009314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009318:	3402      	adds	r4, #2
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093e0 <_svfiprintf_r+0x1f4>
 8009320:	7821      	ldrb	r1, [r4, #0]
 8009322:	2203      	movs	r2, #3
 8009324:	4650      	mov	r0, sl
 8009326:	f7f6 ff73 	bl	8000210 <memchr>
 800932a:	b138      	cbz	r0, 800933c <_svfiprintf_r+0x150>
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	eba0 000a 	sub.w	r0, r0, sl
 8009332:	2240      	movs	r2, #64	@ 0x40
 8009334:	4082      	lsls	r2, r0
 8009336:	4313      	orrs	r3, r2
 8009338:	3401      	adds	r4, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009340:	4824      	ldr	r0, [pc, #144]	@ (80093d4 <_svfiprintf_r+0x1e8>)
 8009342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009346:	2206      	movs	r2, #6
 8009348:	f7f6 ff62 	bl	8000210 <memchr>
 800934c:	2800      	cmp	r0, #0
 800934e:	d036      	beq.n	80093be <_svfiprintf_r+0x1d2>
 8009350:	4b21      	ldr	r3, [pc, #132]	@ (80093d8 <_svfiprintf_r+0x1ec>)
 8009352:	bb1b      	cbnz	r3, 800939c <_svfiprintf_r+0x1b0>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	3307      	adds	r3, #7
 8009358:	f023 0307 	bic.w	r3, r3, #7
 800935c:	3308      	adds	r3, #8
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009362:	4433      	add	r3, r6
 8009364:	9309      	str	r3, [sp, #36]	@ 0x24
 8009366:	e76a      	b.n	800923e <_svfiprintf_r+0x52>
 8009368:	fb0c 3202 	mla	r2, ip, r2, r3
 800936c:	460c      	mov	r4, r1
 800936e:	2001      	movs	r0, #1
 8009370:	e7a8      	b.n	80092c4 <_svfiprintf_r+0xd8>
 8009372:	2300      	movs	r3, #0
 8009374:	3401      	adds	r4, #1
 8009376:	9305      	str	r3, [sp, #20]
 8009378:	4619      	mov	r1, r3
 800937a:	f04f 0c0a 	mov.w	ip, #10
 800937e:	4620      	mov	r0, r4
 8009380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009384:	3a30      	subs	r2, #48	@ 0x30
 8009386:	2a09      	cmp	r2, #9
 8009388:	d903      	bls.n	8009392 <_svfiprintf_r+0x1a6>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0c6      	beq.n	800931c <_svfiprintf_r+0x130>
 800938e:	9105      	str	r1, [sp, #20]
 8009390:	e7c4      	b.n	800931c <_svfiprintf_r+0x130>
 8009392:	fb0c 2101 	mla	r1, ip, r1, r2
 8009396:	4604      	mov	r4, r0
 8009398:	2301      	movs	r3, #1
 800939a:	e7f0      	b.n	800937e <_svfiprintf_r+0x192>
 800939c:	ab03      	add	r3, sp, #12
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	462a      	mov	r2, r5
 80093a2:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <_svfiprintf_r+0x1f0>)
 80093a4:	a904      	add	r1, sp, #16
 80093a6:	4638      	mov	r0, r7
 80093a8:	f7fc fcc8 	bl	8005d3c <_printf_float>
 80093ac:	1c42      	adds	r2, r0, #1
 80093ae:	4606      	mov	r6, r0
 80093b0:	d1d6      	bne.n	8009360 <_svfiprintf_r+0x174>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	065b      	lsls	r3, r3, #25
 80093b6:	f53f af2d 	bmi.w	8009214 <_svfiprintf_r+0x28>
 80093ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093bc:	e72c      	b.n	8009218 <_svfiprintf_r+0x2c>
 80093be:	ab03      	add	r3, sp, #12
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	462a      	mov	r2, r5
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <_svfiprintf_r+0x1f0>)
 80093c6:	a904      	add	r1, sp, #16
 80093c8:	4638      	mov	r0, r7
 80093ca:	f7fc ff4f 	bl	800626c <_printf_i>
 80093ce:	e7ed      	b.n	80093ac <_svfiprintf_r+0x1c0>
 80093d0:	0800a681 	.word	0x0800a681
 80093d4:	0800a68b 	.word	0x0800a68b
 80093d8:	08005d3d 	.word	0x08005d3d
 80093dc:	08009135 	.word	0x08009135
 80093e0:	0800a687 	.word	0x0800a687

080093e4 <__sflush_r>:
 80093e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	0716      	lsls	r6, r2, #28
 80093ee:	4605      	mov	r5, r0
 80093f0:	460c      	mov	r4, r1
 80093f2:	d454      	bmi.n	800949e <__sflush_r+0xba>
 80093f4:	684b      	ldr	r3, [r1, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dc02      	bgt.n	8009400 <__sflush_r+0x1c>
 80093fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dd48      	ble.n	8009492 <__sflush_r+0xae>
 8009400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009402:	2e00      	cmp	r6, #0
 8009404:	d045      	beq.n	8009492 <__sflush_r+0xae>
 8009406:	2300      	movs	r3, #0
 8009408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800940c:	682f      	ldr	r7, [r5, #0]
 800940e:	6a21      	ldr	r1, [r4, #32]
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	d030      	beq.n	8009476 <__sflush_r+0x92>
 8009414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	0759      	lsls	r1, r3, #29
 800941a:	d505      	bpl.n	8009428 <__sflush_r+0x44>
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009422:	b10b      	cbz	r3, 8009428 <__sflush_r+0x44>
 8009424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	2300      	movs	r3, #0
 800942a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800942c:	6a21      	ldr	r1, [r4, #32]
 800942e:	4628      	mov	r0, r5
 8009430:	47b0      	blx	r6
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	d106      	bne.n	8009446 <__sflush_r+0x62>
 8009438:	6829      	ldr	r1, [r5, #0]
 800943a:	291d      	cmp	r1, #29
 800943c:	d82b      	bhi.n	8009496 <__sflush_r+0xb2>
 800943e:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <__sflush_r+0x104>)
 8009440:	410a      	asrs	r2, r1
 8009442:	07d6      	lsls	r6, r2, #31
 8009444:	d427      	bmi.n	8009496 <__sflush_r+0xb2>
 8009446:	2200      	movs	r2, #0
 8009448:	6062      	str	r2, [r4, #4]
 800944a:	04d9      	lsls	r1, r3, #19
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	6022      	str	r2, [r4, #0]
 8009450:	d504      	bpl.n	800945c <__sflush_r+0x78>
 8009452:	1c42      	adds	r2, r0, #1
 8009454:	d101      	bne.n	800945a <__sflush_r+0x76>
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	b903      	cbnz	r3, 800945c <__sflush_r+0x78>
 800945a:	6560      	str	r0, [r4, #84]	@ 0x54
 800945c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800945e:	602f      	str	r7, [r5, #0]
 8009460:	b1b9      	cbz	r1, 8009492 <__sflush_r+0xae>
 8009462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009466:	4299      	cmp	r1, r3
 8009468:	d002      	beq.n	8009470 <__sflush_r+0x8c>
 800946a:	4628      	mov	r0, r5
 800946c:	f7fe fa2c 	bl	80078c8 <_free_r>
 8009470:	2300      	movs	r3, #0
 8009472:	6363      	str	r3, [r4, #52]	@ 0x34
 8009474:	e00d      	b.n	8009492 <__sflush_r+0xae>
 8009476:	2301      	movs	r3, #1
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	4602      	mov	r2, r0
 800947e:	1c50      	adds	r0, r2, #1
 8009480:	d1c9      	bne.n	8009416 <__sflush_r+0x32>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c6      	beq.n	8009416 <__sflush_r+0x32>
 8009488:	2b1d      	cmp	r3, #29
 800948a:	d001      	beq.n	8009490 <__sflush_r+0xac>
 800948c:	2b16      	cmp	r3, #22
 800948e:	d11e      	bne.n	80094ce <__sflush_r+0xea>
 8009490:	602f      	str	r7, [r5, #0]
 8009492:	2000      	movs	r0, #0
 8009494:	e022      	b.n	80094dc <__sflush_r+0xf8>
 8009496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800949a:	b21b      	sxth	r3, r3
 800949c:	e01b      	b.n	80094d6 <__sflush_r+0xf2>
 800949e:	690f      	ldr	r7, [r1, #16]
 80094a0:	2f00      	cmp	r7, #0
 80094a2:	d0f6      	beq.n	8009492 <__sflush_r+0xae>
 80094a4:	0793      	lsls	r3, r2, #30
 80094a6:	680e      	ldr	r6, [r1, #0]
 80094a8:	bf08      	it	eq
 80094aa:	694b      	ldreq	r3, [r1, #20]
 80094ac:	600f      	str	r7, [r1, #0]
 80094ae:	bf18      	it	ne
 80094b0:	2300      	movne	r3, #0
 80094b2:	eba6 0807 	sub.w	r8, r6, r7
 80094b6:	608b      	str	r3, [r1, #8]
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	dde9      	ble.n	8009492 <__sflush_r+0xae>
 80094be:	6a21      	ldr	r1, [r4, #32]
 80094c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094c2:	4643      	mov	r3, r8
 80094c4:	463a      	mov	r2, r7
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b0      	blx	r6
 80094ca:	2800      	cmp	r0, #0
 80094cc:	dc08      	bgt.n	80094e0 <__sflush_r+0xfc>
 80094ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e0:	4407      	add	r7, r0
 80094e2:	eba8 0800 	sub.w	r8, r8, r0
 80094e6:	e7e7      	b.n	80094b8 <__sflush_r+0xd4>
 80094e8:	dfbffffe 	.word	0xdfbffffe

080094ec <_fflush_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	690b      	ldr	r3, [r1, #16]
 80094f0:	4605      	mov	r5, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b913      	cbnz	r3, 80094fc <_fflush_r+0x10>
 80094f6:	2500      	movs	r5, #0
 80094f8:	4628      	mov	r0, r5
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	b118      	cbz	r0, 8009506 <_fflush_r+0x1a>
 80094fe:	6a03      	ldr	r3, [r0, #32]
 8009500:	b90b      	cbnz	r3, 8009506 <_fflush_r+0x1a>
 8009502:	f7fd fa73 	bl	80069ec <__sinit>
 8009506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0f3      	beq.n	80094f6 <_fflush_r+0xa>
 800950e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009510:	07d0      	lsls	r0, r2, #31
 8009512:	d404      	bmi.n	800951e <_fflush_r+0x32>
 8009514:	0599      	lsls	r1, r3, #22
 8009516:	d402      	bmi.n	800951e <_fflush_r+0x32>
 8009518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951a:	f7fd fb7e 	bl	8006c1a <__retarget_lock_acquire_recursive>
 800951e:	4628      	mov	r0, r5
 8009520:	4621      	mov	r1, r4
 8009522:	f7ff ff5f 	bl	80093e4 <__sflush_r>
 8009526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009528:	07da      	lsls	r2, r3, #31
 800952a:	4605      	mov	r5, r0
 800952c:	d4e4      	bmi.n	80094f8 <_fflush_r+0xc>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	059b      	lsls	r3, r3, #22
 8009532:	d4e1      	bmi.n	80094f8 <_fflush_r+0xc>
 8009534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009536:	f7fd fb71 	bl	8006c1c <__retarget_lock_release_recursive>
 800953a:	e7dd      	b.n	80094f8 <_fflush_r+0xc>

0800953c <memmove>:
 800953c:	4288      	cmp	r0, r1
 800953e:	b510      	push	{r4, lr}
 8009540:	eb01 0402 	add.w	r4, r1, r2
 8009544:	d902      	bls.n	800954c <memmove+0x10>
 8009546:	4284      	cmp	r4, r0
 8009548:	4623      	mov	r3, r4
 800954a:	d807      	bhi.n	800955c <memmove+0x20>
 800954c:	1e43      	subs	r3, r0, #1
 800954e:	42a1      	cmp	r1, r4
 8009550:	d008      	beq.n	8009564 <memmove+0x28>
 8009552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800955a:	e7f8      	b.n	800954e <memmove+0x12>
 800955c:	4402      	add	r2, r0
 800955e:	4601      	mov	r1, r0
 8009560:	428a      	cmp	r2, r1
 8009562:	d100      	bne.n	8009566 <memmove+0x2a>
 8009564:	bd10      	pop	{r4, pc}
 8009566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800956a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800956e:	e7f7      	b.n	8009560 <memmove+0x24>

08009570 <strncmp>:
 8009570:	b510      	push	{r4, lr}
 8009572:	b16a      	cbz	r2, 8009590 <strncmp+0x20>
 8009574:	3901      	subs	r1, #1
 8009576:	1884      	adds	r4, r0, r2
 8009578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009580:	429a      	cmp	r2, r3
 8009582:	d103      	bne.n	800958c <strncmp+0x1c>
 8009584:	42a0      	cmp	r0, r4
 8009586:	d001      	beq.n	800958c <strncmp+0x1c>
 8009588:	2a00      	cmp	r2, #0
 800958a:	d1f5      	bne.n	8009578 <strncmp+0x8>
 800958c:	1ad0      	subs	r0, r2, r3
 800958e:	bd10      	pop	{r4, pc}
 8009590:	4610      	mov	r0, r2
 8009592:	e7fc      	b.n	800958e <strncmp+0x1e>

08009594 <_sbrk_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d06      	ldr	r5, [pc, #24]	@ (80095b0 <_sbrk_r+0x1c>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f7f9 fa06 	bl	80029b0 <_sbrk>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_sbrk_r+0x1a>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_sbrk_r+0x1a>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200005b0 	.word	0x200005b0

080095b4 <memcpy>:
 80095b4:	440a      	add	r2, r1
 80095b6:	4291      	cmp	r1, r2
 80095b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095bc:	d100      	bne.n	80095c0 <memcpy+0xc>
 80095be:	4770      	bx	lr
 80095c0:	b510      	push	{r4, lr}
 80095c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ca:	4291      	cmp	r1, r2
 80095cc:	d1f9      	bne.n	80095c2 <memcpy+0xe>
 80095ce:	bd10      	pop	{r4, pc}

080095d0 <nan>:
 80095d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80095d8 <nan+0x8>
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	00000000 	.word	0x00000000
 80095dc:	7ff80000 	.word	0x7ff80000

080095e0 <__assert_func>:
 80095e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095e2:	4614      	mov	r4, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	4b09      	ldr	r3, [pc, #36]	@ (800960c <__assert_func+0x2c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4605      	mov	r5, r0
 80095ec:	68d8      	ldr	r0, [r3, #12]
 80095ee:	b954      	cbnz	r4, 8009606 <__assert_func+0x26>
 80095f0:	4b07      	ldr	r3, [pc, #28]	@ (8009610 <__assert_func+0x30>)
 80095f2:	461c      	mov	r4, r3
 80095f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095f8:	9100      	str	r1, [sp, #0]
 80095fa:	462b      	mov	r3, r5
 80095fc:	4905      	ldr	r1, [pc, #20]	@ (8009614 <__assert_func+0x34>)
 80095fe:	f000 fba7 	bl	8009d50 <fiprintf>
 8009602:	f000 fbb7 	bl	8009d74 <abort>
 8009606:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <__assert_func+0x38>)
 8009608:	e7f4      	b.n	80095f4 <__assert_func+0x14>
 800960a:	bf00      	nop
 800960c:	20000100 	.word	0x20000100
 8009610:	0800a6d5 	.word	0x0800a6d5
 8009614:	0800a6a7 	.word	0x0800a6a7
 8009618:	0800a69a 	.word	0x0800a69a

0800961c <_calloc_r>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	fba1 5402 	umull	r5, r4, r1, r2
 8009622:	b93c      	cbnz	r4, 8009634 <_calloc_r+0x18>
 8009624:	4629      	mov	r1, r5
 8009626:	f7fe f9c3 	bl	80079b0 <_malloc_r>
 800962a:	4606      	mov	r6, r0
 800962c:	b928      	cbnz	r0, 800963a <_calloc_r+0x1e>
 800962e:	2600      	movs	r6, #0
 8009630:	4630      	mov	r0, r6
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	220c      	movs	r2, #12
 8009636:	6002      	str	r2, [r0, #0]
 8009638:	e7f9      	b.n	800962e <_calloc_r+0x12>
 800963a:	462a      	mov	r2, r5
 800963c:	4621      	mov	r1, r4
 800963e:	f7fd fa6e 	bl	8006b1e <memset>
 8009642:	e7f5      	b.n	8009630 <_calloc_r+0x14>

08009644 <rshift>:
 8009644:	6903      	ldr	r3, [r0, #16]
 8009646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800964a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800964e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009652:	f100 0414 	add.w	r4, r0, #20
 8009656:	dd45      	ble.n	80096e4 <rshift+0xa0>
 8009658:	f011 011f 	ands.w	r1, r1, #31
 800965c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009664:	d10c      	bne.n	8009680 <rshift+0x3c>
 8009666:	f100 0710 	add.w	r7, r0, #16
 800966a:	4629      	mov	r1, r5
 800966c:	42b1      	cmp	r1, r6
 800966e:	d334      	bcc.n	80096da <rshift+0x96>
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	1eea      	subs	r2, r5, #3
 8009676:	4296      	cmp	r6, r2
 8009678:	bf38      	it	cc
 800967a:	2300      	movcc	r3, #0
 800967c:	4423      	add	r3, r4
 800967e:	e015      	b.n	80096ac <rshift+0x68>
 8009680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009684:	f1c1 0820 	rsb	r8, r1, #32
 8009688:	40cf      	lsrs	r7, r1
 800968a:	f105 0e04 	add.w	lr, r5, #4
 800968e:	46a1      	mov	r9, r4
 8009690:	4576      	cmp	r6, lr
 8009692:	46f4      	mov	ip, lr
 8009694:	d815      	bhi.n	80096c2 <rshift+0x7e>
 8009696:	1a9a      	subs	r2, r3, r2
 8009698:	0092      	lsls	r2, r2, #2
 800969a:	3a04      	subs	r2, #4
 800969c:	3501      	adds	r5, #1
 800969e:	42ae      	cmp	r6, r5
 80096a0:	bf38      	it	cc
 80096a2:	2200      	movcc	r2, #0
 80096a4:	18a3      	adds	r3, r4, r2
 80096a6:	50a7      	str	r7, [r4, r2]
 80096a8:	b107      	cbz	r7, 80096ac <rshift+0x68>
 80096aa:	3304      	adds	r3, #4
 80096ac:	1b1a      	subs	r2, r3, r4
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096b4:	bf08      	it	eq
 80096b6:	2300      	moveq	r3, #0
 80096b8:	6102      	str	r2, [r0, #16]
 80096ba:	bf08      	it	eq
 80096bc:	6143      	streq	r3, [r0, #20]
 80096be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c2:	f8dc c000 	ldr.w	ip, [ip]
 80096c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80096ca:	ea4c 0707 	orr.w	r7, ip, r7
 80096ce:	f849 7b04 	str.w	r7, [r9], #4
 80096d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096d6:	40cf      	lsrs	r7, r1
 80096d8:	e7da      	b.n	8009690 <rshift+0x4c>
 80096da:	f851 cb04 	ldr.w	ip, [r1], #4
 80096de:	f847 cf04 	str.w	ip, [r7, #4]!
 80096e2:	e7c3      	b.n	800966c <rshift+0x28>
 80096e4:	4623      	mov	r3, r4
 80096e6:	e7e1      	b.n	80096ac <rshift+0x68>

080096e8 <__hexdig_fun>:
 80096e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80096ec:	2b09      	cmp	r3, #9
 80096ee:	d802      	bhi.n	80096f6 <__hexdig_fun+0xe>
 80096f0:	3820      	subs	r0, #32
 80096f2:	b2c0      	uxtb	r0, r0
 80096f4:	4770      	bx	lr
 80096f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d801      	bhi.n	8009702 <__hexdig_fun+0x1a>
 80096fe:	3847      	subs	r0, #71	@ 0x47
 8009700:	e7f7      	b.n	80096f2 <__hexdig_fun+0xa>
 8009702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009706:	2b05      	cmp	r3, #5
 8009708:	d801      	bhi.n	800970e <__hexdig_fun+0x26>
 800970a:	3827      	subs	r0, #39	@ 0x27
 800970c:	e7f1      	b.n	80096f2 <__hexdig_fun+0xa>
 800970e:	2000      	movs	r0, #0
 8009710:	4770      	bx	lr
	...

08009714 <__gethex>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	b085      	sub	sp, #20
 800971a:	468a      	mov	sl, r1
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	680b      	ldr	r3, [r1, #0]
 8009720:	9001      	str	r0, [sp, #4]
 8009722:	4690      	mov	r8, r2
 8009724:	1c9c      	adds	r4, r3, #2
 8009726:	46a1      	mov	r9, r4
 8009728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800972c:	2830      	cmp	r0, #48	@ 0x30
 800972e:	d0fa      	beq.n	8009726 <__gethex+0x12>
 8009730:	eba9 0303 	sub.w	r3, r9, r3
 8009734:	f1a3 0b02 	sub.w	fp, r3, #2
 8009738:	f7ff ffd6 	bl	80096e8 <__hexdig_fun>
 800973c:	4605      	mov	r5, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	d168      	bne.n	8009814 <__gethex+0x100>
 8009742:	49a0      	ldr	r1, [pc, #640]	@ (80099c4 <__gethex+0x2b0>)
 8009744:	2201      	movs	r2, #1
 8009746:	4648      	mov	r0, r9
 8009748:	f7ff ff12 	bl	8009570 <strncmp>
 800974c:	4607      	mov	r7, r0
 800974e:	2800      	cmp	r0, #0
 8009750:	d167      	bne.n	8009822 <__gethex+0x10e>
 8009752:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009756:	4626      	mov	r6, r4
 8009758:	f7ff ffc6 	bl	80096e8 <__hexdig_fun>
 800975c:	2800      	cmp	r0, #0
 800975e:	d062      	beq.n	8009826 <__gethex+0x112>
 8009760:	4623      	mov	r3, r4
 8009762:	7818      	ldrb	r0, [r3, #0]
 8009764:	2830      	cmp	r0, #48	@ 0x30
 8009766:	4699      	mov	r9, r3
 8009768:	f103 0301 	add.w	r3, r3, #1
 800976c:	d0f9      	beq.n	8009762 <__gethex+0x4e>
 800976e:	f7ff ffbb 	bl	80096e8 <__hexdig_fun>
 8009772:	fab0 f580 	clz	r5, r0
 8009776:	096d      	lsrs	r5, r5, #5
 8009778:	f04f 0b01 	mov.w	fp, #1
 800977c:	464a      	mov	r2, r9
 800977e:	4616      	mov	r6, r2
 8009780:	3201      	adds	r2, #1
 8009782:	7830      	ldrb	r0, [r6, #0]
 8009784:	f7ff ffb0 	bl	80096e8 <__hexdig_fun>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1f8      	bne.n	800977e <__gethex+0x6a>
 800978c:	498d      	ldr	r1, [pc, #564]	@ (80099c4 <__gethex+0x2b0>)
 800978e:	2201      	movs	r2, #1
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff feed 	bl	8009570 <strncmp>
 8009796:	2800      	cmp	r0, #0
 8009798:	d13f      	bne.n	800981a <__gethex+0x106>
 800979a:	b944      	cbnz	r4, 80097ae <__gethex+0x9a>
 800979c:	1c74      	adds	r4, r6, #1
 800979e:	4622      	mov	r2, r4
 80097a0:	4616      	mov	r6, r2
 80097a2:	3201      	adds	r2, #1
 80097a4:	7830      	ldrb	r0, [r6, #0]
 80097a6:	f7ff ff9f 	bl	80096e8 <__hexdig_fun>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1f8      	bne.n	80097a0 <__gethex+0x8c>
 80097ae:	1ba4      	subs	r4, r4, r6
 80097b0:	00a7      	lsls	r7, r4, #2
 80097b2:	7833      	ldrb	r3, [r6, #0]
 80097b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097b8:	2b50      	cmp	r3, #80	@ 0x50
 80097ba:	d13e      	bne.n	800983a <__gethex+0x126>
 80097bc:	7873      	ldrb	r3, [r6, #1]
 80097be:	2b2b      	cmp	r3, #43	@ 0x2b
 80097c0:	d033      	beq.n	800982a <__gethex+0x116>
 80097c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80097c4:	d034      	beq.n	8009830 <__gethex+0x11c>
 80097c6:	1c71      	adds	r1, r6, #1
 80097c8:	2400      	movs	r4, #0
 80097ca:	7808      	ldrb	r0, [r1, #0]
 80097cc:	f7ff ff8c 	bl	80096e8 <__hexdig_fun>
 80097d0:	1e43      	subs	r3, r0, #1
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b18      	cmp	r3, #24
 80097d6:	d830      	bhi.n	800983a <__gethex+0x126>
 80097d8:	f1a0 0210 	sub.w	r2, r0, #16
 80097dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097e0:	f7ff ff82 	bl	80096e8 <__hexdig_fun>
 80097e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80097e8:	fa5f fc8c 	uxtb.w	ip, ip
 80097ec:	f1bc 0f18 	cmp.w	ip, #24
 80097f0:	f04f 030a 	mov.w	r3, #10
 80097f4:	d91e      	bls.n	8009834 <__gethex+0x120>
 80097f6:	b104      	cbz	r4, 80097fa <__gethex+0xe6>
 80097f8:	4252      	negs	r2, r2
 80097fa:	4417      	add	r7, r2
 80097fc:	f8ca 1000 	str.w	r1, [sl]
 8009800:	b1ed      	cbz	r5, 800983e <__gethex+0x12a>
 8009802:	f1bb 0f00 	cmp.w	fp, #0
 8009806:	bf0c      	ite	eq
 8009808:	2506      	moveq	r5, #6
 800980a:	2500      	movne	r5, #0
 800980c:	4628      	mov	r0, r5
 800980e:	b005      	add	sp, #20
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	2500      	movs	r5, #0
 8009816:	462c      	mov	r4, r5
 8009818:	e7b0      	b.n	800977c <__gethex+0x68>
 800981a:	2c00      	cmp	r4, #0
 800981c:	d1c7      	bne.n	80097ae <__gethex+0x9a>
 800981e:	4627      	mov	r7, r4
 8009820:	e7c7      	b.n	80097b2 <__gethex+0x9e>
 8009822:	464e      	mov	r6, r9
 8009824:	462f      	mov	r7, r5
 8009826:	2501      	movs	r5, #1
 8009828:	e7c3      	b.n	80097b2 <__gethex+0x9e>
 800982a:	2400      	movs	r4, #0
 800982c:	1cb1      	adds	r1, r6, #2
 800982e:	e7cc      	b.n	80097ca <__gethex+0xb6>
 8009830:	2401      	movs	r4, #1
 8009832:	e7fb      	b.n	800982c <__gethex+0x118>
 8009834:	fb03 0002 	mla	r0, r3, r2, r0
 8009838:	e7ce      	b.n	80097d8 <__gethex+0xc4>
 800983a:	4631      	mov	r1, r6
 800983c:	e7de      	b.n	80097fc <__gethex+0xe8>
 800983e:	eba6 0309 	sub.w	r3, r6, r9
 8009842:	3b01      	subs	r3, #1
 8009844:	4629      	mov	r1, r5
 8009846:	2b07      	cmp	r3, #7
 8009848:	dc0a      	bgt.n	8009860 <__gethex+0x14c>
 800984a:	9801      	ldr	r0, [sp, #4]
 800984c:	f7fe f93c 	bl	8007ac8 <_Balloc>
 8009850:	4604      	mov	r4, r0
 8009852:	b940      	cbnz	r0, 8009866 <__gethex+0x152>
 8009854:	4b5c      	ldr	r3, [pc, #368]	@ (80099c8 <__gethex+0x2b4>)
 8009856:	4602      	mov	r2, r0
 8009858:	21e4      	movs	r1, #228	@ 0xe4
 800985a:	485c      	ldr	r0, [pc, #368]	@ (80099cc <__gethex+0x2b8>)
 800985c:	f7ff fec0 	bl	80095e0 <__assert_func>
 8009860:	3101      	adds	r1, #1
 8009862:	105b      	asrs	r3, r3, #1
 8009864:	e7ef      	b.n	8009846 <__gethex+0x132>
 8009866:	f100 0a14 	add.w	sl, r0, #20
 800986a:	2300      	movs	r3, #0
 800986c:	4655      	mov	r5, sl
 800986e:	469b      	mov	fp, r3
 8009870:	45b1      	cmp	r9, r6
 8009872:	d337      	bcc.n	80098e4 <__gethex+0x1d0>
 8009874:	f845 bb04 	str.w	fp, [r5], #4
 8009878:	eba5 050a 	sub.w	r5, r5, sl
 800987c:	10ad      	asrs	r5, r5, #2
 800987e:	6125      	str	r5, [r4, #16]
 8009880:	4658      	mov	r0, fp
 8009882:	f7fe fa13 	bl	8007cac <__hi0bits>
 8009886:	016d      	lsls	r5, r5, #5
 8009888:	f8d8 6000 	ldr.w	r6, [r8]
 800988c:	1a2d      	subs	r5, r5, r0
 800988e:	42b5      	cmp	r5, r6
 8009890:	dd54      	ble.n	800993c <__gethex+0x228>
 8009892:	1bad      	subs	r5, r5, r6
 8009894:	4629      	mov	r1, r5
 8009896:	4620      	mov	r0, r4
 8009898:	f7fe fda7 	bl	80083ea <__any_on>
 800989c:	4681      	mov	r9, r0
 800989e:	b178      	cbz	r0, 80098c0 <__gethex+0x1ac>
 80098a0:	1e6b      	subs	r3, r5, #1
 80098a2:	1159      	asrs	r1, r3, #5
 80098a4:	f003 021f 	and.w	r2, r3, #31
 80098a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098ac:	f04f 0901 	mov.w	r9, #1
 80098b0:	fa09 f202 	lsl.w	r2, r9, r2
 80098b4:	420a      	tst	r2, r1
 80098b6:	d003      	beq.n	80098c0 <__gethex+0x1ac>
 80098b8:	454b      	cmp	r3, r9
 80098ba:	dc36      	bgt.n	800992a <__gethex+0x216>
 80098bc:	f04f 0902 	mov.w	r9, #2
 80098c0:	4629      	mov	r1, r5
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff febe 	bl	8009644 <rshift>
 80098c8:	442f      	add	r7, r5
 80098ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098ce:	42bb      	cmp	r3, r7
 80098d0:	da42      	bge.n	8009958 <__gethex+0x244>
 80098d2:	9801      	ldr	r0, [sp, #4]
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7fe f937 	bl	8007b48 <_Bfree>
 80098da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098dc:	2300      	movs	r3, #0
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	25a3      	movs	r5, #163	@ 0xa3
 80098e2:	e793      	b.n	800980c <__gethex+0xf8>
 80098e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80098e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80098ea:	d012      	beq.n	8009912 <__gethex+0x1fe>
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	d104      	bne.n	80098fa <__gethex+0x1e6>
 80098f0:	f845 bb04 	str.w	fp, [r5], #4
 80098f4:	f04f 0b00 	mov.w	fp, #0
 80098f8:	465b      	mov	r3, fp
 80098fa:	7830      	ldrb	r0, [r6, #0]
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	f7ff fef3 	bl	80096e8 <__hexdig_fun>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	f000 000f 	and.w	r0, r0, #15
 8009908:	4098      	lsls	r0, r3
 800990a:	ea4b 0b00 	orr.w	fp, fp, r0
 800990e:	3304      	adds	r3, #4
 8009910:	e7ae      	b.n	8009870 <__gethex+0x15c>
 8009912:	45b1      	cmp	r9, r6
 8009914:	d8ea      	bhi.n	80098ec <__gethex+0x1d8>
 8009916:	492b      	ldr	r1, [pc, #172]	@ (80099c4 <__gethex+0x2b0>)
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fe27 	bl	8009570 <strncmp>
 8009922:	9b03      	ldr	r3, [sp, #12]
 8009924:	2800      	cmp	r0, #0
 8009926:	d1e1      	bne.n	80098ec <__gethex+0x1d8>
 8009928:	e7a2      	b.n	8009870 <__gethex+0x15c>
 800992a:	1ea9      	subs	r1, r5, #2
 800992c:	4620      	mov	r0, r4
 800992e:	f7fe fd5c 	bl	80083ea <__any_on>
 8009932:	2800      	cmp	r0, #0
 8009934:	d0c2      	beq.n	80098bc <__gethex+0x1a8>
 8009936:	f04f 0903 	mov.w	r9, #3
 800993a:	e7c1      	b.n	80098c0 <__gethex+0x1ac>
 800993c:	da09      	bge.n	8009952 <__gethex+0x23e>
 800993e:	1b75      	subs	r5, r6, r5
 8009940:	4621      	mov	r1, r4
 8009942:	9801      	ldr	r0, [sp, #4]
 8009944:	462a      	mov	r2, r5
 8009946:	f7fe fb17 	bl	8007f78 <__lshift>
 800994a:	1b7f      	subs	r7, r7, r5
 800994c:	4604      	mov	r4, r0
 800994e:	f100 0a14 	add.w	sl, r0, #20
 8009952:	f04f 0900 	mov.w	r9, #0
 8009956:	e7b8      	b.n	80098ca <__gethex+0x1b6>
 8009958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800995c:	42bd      	cmp	r5, r7
 800995e:	dd6f      	ble.n	8009a40 <__gethex+0x32c>
 8009960:	1bed      	subs	r5, r5, r7
 8009962:	42ae      	cmp	r6, r5
 8009964:	dc34      	bgt.n	80099d0 <__gethex+0x2bc>
 8009966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800996a:	2b02      	cmp	r3, #2
 800996c:	d022      	beq.n	80099b4 <__gethex+0x2a0>
 800996e:	2b03      	cmp	r3, #3
 8009970:	d024      	beq.n	80099bc <__gethex+0x2a8>
 8009972:	2b01      	cmp	r3, #1
 8009974:	d115      	bne.n	80099a2 <__gethex+0x28e>
 8009976:	42ae      	cmp	r6, r5
 8009978:	d113      	bne.n	80099a2 <__gethex+0x28e>
 800997a:	2e01      	cmp	r6, #1
 800997c:	d10b      	bne.n	8009996 <__gethex+0x282>
 800997e:	9a02      	ldr	r2, [sp, #8]
 8009980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	2301      	movs	r3, #1
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	f8ca 3000 	str.w	r3, [sl]
 800998e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009990:	2562      	movs	r5, #98	@ 0x62
 8009992:	601c      	str	r4, [r3, #0]
 8009994:	e73a      	b.n	800980c <__gethex+0xf8>
 8009996:	1e71      	subs	r1, r6, #1
 8009998:	4620      	mov	r0, r4
 800999a:	f7fe fd26 	bl	80083ea <__any_on>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d1ed      	bne.n	800997e <__gethex+0x26a>
 80099a2:	9801      	ldr	r0, [sp, #4]
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7fe f8cf 	bl	8007b48 <_Bfree>
 80099aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ac:	2300      	movs	r3, #0
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	2550      	movs	r5, #80	@ 0x50
 80099b2:	e72b      	b.n	800980c <__gethex+0xf8>
 80099b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1f3      	bne.n	80099a2 <__gethex+0x28e>
 80099ba:	e7e0      	b.n	800997e <__gethex+0x26a>
 80099bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1dd      	bne.n	800997e <__gethex+0x26a>
 80099c2:	e7ee      	b.n	80099a2 <__gethex+0x28e>
 80099c4:	0800a528 	.word	0x0800a528
 80099c8:	0800a3c1 	.word	0x0800a3c1
 80099cc:	0800a6d6 	.word	0x0800a6d6
 80099d0:	1e6f      	subs	r7, r5, #1
 80099d2:	f1b9 0f00 	cmp.w	r9, #0
 80099d6:	d130      	bne.n	8009a3a <__gethex+0x326>
 80099d8:	b127      	cbz	r7, 80099e4 <__gethex+0x2d0>
 80099da:	4639      	mov	r1, r7
 80099dc:	4620      	mov	r0, r4
 80099de:	f7fe fd04 	bl	80083ea <__any_on>
 80099e2:	4681      	mov	r9, r0
 80099e4:	117a      	asrs	r2, r7, #5
 80099e6:	2301      	movs	r3, #1
 80099e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099ec:	f007 071f 	and.w	r7, r7, #31
 80099f0:	40bb      	lsls	r3, r7
 80099f2:	4213      	tst	r3, r2
 80099f4:	4629      	mov	r1, r5
 80099f6:	4620      	mov	r0, r4
 80099f8:	bf18      	it	ne
 80099fa:	f049 0902 	orrne.w	r9, r9, #2
 80099fe:	f7ff fe21 	bl	8009644 <rshift>
 8009a02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009a06:	1b76      	subs	r6, r6, r5
 8009a08:	2502      	movs	r5, #2
 8009a0a:	f1b9 0f00 	cmp.w	r9, #0
 8009a0e:	d047      	beq.n	8009aa0 <__gethex+0x38c>
 8009a10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d015      	beq.n	8009a44 <__gethex+0x330>
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d017      	beq.n	8009a4c <__gethex+0x338>
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d109      	bne.n	8009a34 <__gethex+0x320>
 8009a20:	f019 0f02 	tst.w	r9, #2
 8009a24:	d006      	beq.n	8009a34 <__gethex+0x320>
 8009a26:	f8da 3000 	ldr.w	r3, [sl]
 8009a2a:	ea49 0903 	orr.w	r9, r9, r3
 8009a2e:	f019 0f01 	tst.w	r9, #1
 8009a32:	d10e      	bne.n	8009a52 <__gethex+0x33e>
 8009a34:	f045 0510 	orr.w	r5, r5, #16
 8009a38:	e032      	b.n	8009aa0 <__gethex+0x38c>
 8009a3a:	f04f 0901 	mov.w	r9, #1
 8009a3e:	e7d1      	b.n	80099e4 <__gethex+0x2d0>
 8009a40:	2501      	movs	r5, #1
 8009a42:	e7e2      	b.n	8009a0a <__gethex+0x2f6>
 8009a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a46:	f1c3 0301 	rsb	r3, r3, #1
 8009a4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <__gethex+0x320>
 8009a52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a56:	f104 0314 	add.w	r3, r4, #20
 8009a5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a62:	f04f 0c00 	mov.w	ip, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a70:	d01b      	beq.n	8009aaa <__gethex+0x396>
 8009a72:	3201      	adds	r2, #1
 8009a74:	6002      	str	r2, [r0, #0]
 8009a76:	2d02      	cmp	r5, #2
 8009a78:	f104 0314 	add.w	r3, r4, #20
 8009a7c:	d13c      	bne.n	8009af8 <__gethex+0x3e4>
 8009a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8009a82:	3a01      	subs	r2, #1
 8009a84:	42b2      	cmp	r2, r6
 8009a86:	d109      	bne.n	8009a9c <__gethex+0x388>
 8009a88:	1171      	asrs	r1, r6, #5
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a90:	f006 061f 	and.w	r6, r6, #31
 8009a94:	fa02 f606 	lsl.w	r6, r2, r6
 8009a98:	421e      	tst	r6, r3
 8009a9a:	d13a      	bne.n	8009b12 <__gethex+0x3fe>
 8009a9c:	f045 0520 	orr.w	r5, r5, #32
 8009aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aa2:	601c      	str	r4, [r3, #0]
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	601f      	str	r7, [r3, #0]
 8009aa8:	e6b0      	b.n	800980c <__gethex+0xf8>
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ab0:	d8d9      	bhi.n	8009a66 <__gethex+0x352>
 8009ab2:	68a3      	ldr	r3, [r4, #8]
 8009ab4:	459b      	cmp	fp, r3
 8009ab6:	db17      	blt.n	8009ae8 <__gethex+0x3d4>
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	9801      	ldr	r0, [sp, #4]
 8009abc:	3101      	adds	r1, #1
 8009abe:	f7fe f803 	bl	8007ac8 <_Balloc>
 8009ac2:	4681      	mov	r9, r0
 8009ac4:	b918      	cbnz	r0, 8009ace <__gethex+0x3ba>
 8009ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b30 <__gethex+0x41c>)
 8009ac8:	4602      	mov	r2, r0
 8009aca:	2184      	movs	r1, #132	@ 0x84
 8009acc:	e6c5      	b.n	800985a <__gethex+0x146>
 8009ace:	6922      	ldr	r2, [r4, #16]
 8009ad0:	3202      	adds	r2, #2
 8009ad2:	f104 010c 	add.w	r1, r4, #12
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	300c      	adds	r0, #12
 8009ada:	f7ff fd6b 	bl	80095b4 <memcpy>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	9801      	ldr	r0, [sp, #4]
 8009ae2:	f7fe f831 	bl	8007b48 <_Bfree>
 8009ae6:	464c      	mov	r4, r9
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009af0:	6122      	str	r2, [r4, #16]
 8009af2:	2201      	movs	r2, #1
 8009af4:	615a      	str	r2, [r3, #20]
 8009af6:	e7be      	b.n	8009a76 <__gethex+0x362>
 8009af8:	6922      	ldr	r2, [r4, #16]
 8009afa:	455a      	cmp	r2, fp
 8009afc:	dd0b      	ble.n	8009b16 <__gethex+0x402>
 8009afe:	2101      	movs	r1, #1
 8009b00:	4620      	mov	r0, r4
 8009b02:	f7ff fd9f 	bl	8009644 <rshift>
 8009b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b0a:	3701      	adds	r7, #1
 8009b0c:	42bb      	cmp	r3, r7
 8009b0e:	f6ff aee0 	blt.w	80098d2 <__gethex+0x1be>
 8009b12:	2501      	movs	r5, #1
 8009b14:	e7c2      	b.n	8009a9c <__gethex+0x388>
 8009b16:	f016 061f 	ands.w	r6, r6, #31
 8009b1a:	d0fa      	beq.n	8009b12 <__gethex+0x3fe>
 8009b1c:	4453      	add	r3, sl
 8009b1e:	f1c6 0620 	rsb	r6, r6, #32
 8009b22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b26:	f7fe f8c1 	bl	8007cac <__hi0bits>
 8009b2a:	42b0      	cmp	r0, r6
 8009b2c:	dbe7      	blt.n	8009afe <__gethex+0x3ea>
 8009b2e:	e7f0      	b.n	8009b12 <__gethex+0x3fe>
 8009b30:	0800a3c1 	.word	0x0800a3c1

08009b34 <L_shift>:
 8009b34:	f1c2 0208 	rsb	r2, r2, #8
 8009b38:	0092      	lsls	r2, r2, #2
 8009b3a:	b570      	push	{r4, r5, r6, lr}
 8009b3c:	f1c2 0620 	rsb	r6, r2, #32
 8009b40:	6843      	ldr	r3, [r0, #4]
 8009b42:	6804      	ldr	r4, [r0, #0]
 8009b44:	fa03 f506 	lsl.w	r5, r3, r6
 8009b48:	432c      	orrs	r4, r5
 8009b4a:	40d3      	lsrs	r3, r2
 8009b4c:	6004      	str	r4, [r0, #0]
 8009b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b52:	4288      	cmp	r0, r1
 8009b54:	d3f4      	bcc.n	8009b40 <L_shift+0xc>
 8009b56:	bd70      	pop	{r4, r5, r6, pc}

08009b58 <__match>:
 8009b58:	b530      	push	{r4, r5, lr}
 8009b5a:	6803      	ldr	r3, [r0, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b62:	b914      	cbnz	r4, 8009b6a <__match+0x12>
 8009b64:	6003      	str	r3, [r0, #0]
 8009b66:	2001      	movs	r0, #1
 8009b68:	bd30      	pop	{r4, r5, pc}
 8009b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b72:	2d19      	cmp	r5, #25
 8009b74:	bf98      	it	ls
 8009b76:	3220      	addls	r2, #32
 8009b78:	42a2      	cmp	r2, r4
 8009b7a:	d0f0      	beq.n	8009b5e <__match+0x6>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e7f3      	b.n	8009b68 <__match+0x10>

08009b80 <__hexnan>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	680b      	ldr	r3, [r1, #0]
 8009b86:	6801      	ldr	r1, [r0, #0]
 8009b88:	115e      	asrs	r6, r3, #5
 8009b8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b8e:	f013 031f 	ands.w	r3, r3, #31
 8009b92:	b087      	sub	sp, #28
 8009b94:	bf18      	it	ne
 8009b96:	3604      	addne	r6, #4
 8009b98:	2500      	movs	r5, #0
 8009b9a:	1f37      	subs	r7, r6, #4
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	4690      	mov	r8, r2
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ba6:	46b9      	mov	r9, r7
 8009ba8:	463c      	mov	r4, r7
 8009baa:	9502      	str	r5, [sp, #8]
 8009bac:	46ab      	mov	fp, r5
 8009bae:	784a      	ldrb	r2, [r1, #1]
 8009bb0:	1c4b      	adds	r3, r1, #1
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	b342      	cbz	r2, 8009c08 <__hexnan+0x88>
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	9105      	str	r1, [sp, #20]
 8009bba:	9204      	str	r2, [sp, #16]
 8009bbc:	f7ff fd94 	bl	80096e8 <__hexdig_fun>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d151      	bne.n	8009c68 <__hexnan+0xe8>
 8009bc4:	9a04      	ldr	r2, [sp, #16]
 8009bc6:	9905      	ldr	r1, [sp, #20]
 8009bc8:	2a20      	cmp	r2, #32
 8009bca:	d818      	bhi.n	8009bfe <__hexnan+0x7e>
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	459b      	cmp	fp, r3
 8009bd0:	dd13      	ble.n	8009bfa <__hexnan+0x7a>
 8009bd2:	454c      	cmp	r4, r9
 8009bd4:	d206      	bcs.n	8009be4 <__hexnan+0x64>
 8009bd6:	2d07      	cmp	r5, #7
 8009bd8:	dc04      	bgt.n	8009be4 <__hexnan+0x64>
 8009bda:	462a      	mov	r2, r5
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4620      	mov	r0, r4
 8009be0:	f7ff ffa8 	bl	8009b34 <L_shift>
 8009be4:	4544      	cmp	r4, r8
 8009be6:	d952      	bls.n	8009c8e <__hexnan+0x10e>
 8009be8:	2300      	movs	r3, #0
 8009bea:	f1a4 0904 	sub.w	r9, r4, #4
 8009bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bf2:	f8cd b008 	str.w	fp, [sp, #8]
 8009bf6:	464c      	mov	r4, r9
 8009bf8:	461d      	mov	r5, r3
 8009bfa:	9903      	ldr	r1, [sp, #12]
 8009bfc:	e7d7      	b.n	8009bae <__hexnan+0x2e>
 8009bfe:	2a29      	cmp	r2, #41	@ 0x29
 8009c00:	d157      	bne.n	8009cb2 <__hexnan+0x132>
 8009c02:	3102      	adds	r1, #2
 8009c04:	f8ca 1000 	str.w	r1, [sl]
 8009c08:	f1bb 0f00 	cmp.w	fp, #0
 8009c0c:	d051      	beq.n	8009cb2 <__hexnan+0x132>
 8009c0e:	454c      	cmp	r4, r9
 8009c10:	d206      	bcs.n	8009c20 <__hexnan+0xa0>
 8009c12:	2d07      	cmp	r5, #7
 8009c14:	dc04      	bgt.n	8009c20 <__hexnan+0xa0>
 8009c16:	462a      	mov	r2, r5
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff ff8a 	bl	8009b34 <L_shift>
 8009c20:	4544      	cmp	r4, r8
 8009c22:	d936      	bls.n	8009c92 <__hexnan+0x112>
 8009c24:	f1a8 0204 	sub.w	r2, r8, #4
 8009c28:	4623      	mov	r3, r4
 8009c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c32:	429f      	cmp	r7, r3
 8009c34:	d2f9      	bcs.n	8009c2a <__hexnan+0xaa>
 8009c36:	1b3b      	subs	r3, r7, r4
 8009c38:	f023 0303 	bic.w	r3, r3, #3
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	3401      	adds	r4, #1
 8009c40:	3e03      	subs	r6, #3
 8009c42:	42b4      	cmp	r4, r6
 8009c44:	bf88      	it	hi
 8009c46:	2304      	movhi	r3, #4
 8009c48:	4443      	add	r3, r8
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f843 2b04 	str.w	r2, [r3], #4
 8009c50:	429f      	cmp	r7, r3
 8009c52:	d2fb      	bcs.n	8009c4c <__hexnan+0xcc>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	b91b      	cbnz	r3, 8009c60 <__hexnan+0xe0>
 8009c58:	4547      	cmp	r7, r8
 8009c5a:	d128      	bne.n	8009cae <__hexnan+0x12e>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	2005      	movs	r0, #5
 8009c62:	b007      	add	sp, #28
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	3501      	adds	r5, #1
 8009c6a:	2d08      	cmp	r5, #8
 8009c6c:	f10b 0b01 	add.w	fp, fp, #1
 8009c70:	dd06      	ble.n	8009c80 <__hexnan+0x100>
 8009c72:	4544      	cmp	r4, r8
 8009c74:	d9c1      	bls.n	8009bfa <__hexnan+0x7a>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c7c:	2501      	movs	r5, #1
 8009c7e:	3c04      	subs	r4, #4
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	f000 000f 	and.w	r0, r0, #15
 8009c86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	e7b5      	b.n	8009bfa <__hexnan+0x7a>
 8009c8e:	2508      	movs	r5, #8
 8009c90:	e7b3      	b.n	8009bfa <__hexnan+0x7a>
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0dd      	beq.n	8009c54 <__hexnan+0xd4>
 8009c98:	f1c3 0320 	rsb	r3, r3, #32
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca0:	40da      	lsrs	r2, r3
 8009ca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	f846 3c04 	str.w	r3, [r6, #-4]
 8009cac:	e7d2      	b.n	8009c54 <__hexnan+0xd4>
 8009cae:	3f04      	subs	r7, #4
 8009cb0:	e7d0      	b.n	8009c54 <__hexnan+0xd4>
 8009cb2:	2004      	movs	r0, #4
 8009cb4:	e7d5      	b.n	8009c62 <__hexnan+0xe2>

08009cb6 <__ascii_mbtowc>:
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	b901      	cbnz	r1, 8009cbc <__ascii_mbtowc+0x6>
 8009cba:	a901      	add	r1, sp, #4
 8009cbc:	b142      	cbz	r2, 8009cd0 <__ascii_mbtowc+0x1a>
 8009cbe:	b14b      	cbz	r3, 8009cd4 <__ascii_mbtowc+0x1e>
 8009cc0:	7813      	ldrb	r3, [r2, #0]
 8009cc2:	600b      	str	r3, [r1, #0]
 8009cc4:	7812      	ldrb	r2, [r2, #0]
 8009cc6:	1e10      	subs	r0, r2, #0
 8009cc8:	bf18      	it	ne
 8009cca:	2001      	movne	r0, #1
 8009ccc:	b002      	add	sp, #8
 8009cce:	4770      	bx	lr
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	e7fb      	b.n	8009ccc <__ascii_mbtowc+0x16>
 8009cd4:	f06f 0001 	mvn.w	r0, #1
 8009cd8:	e7f8      	b.n	8009ccc <__ascii_mbtowc+0x16>

08009cda <_realloc_r>:
 8009cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	4680      	mov	r8, r0
 8009ce0:	4615      	mov	r5, r2
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	b921      	cbnz	r1, 8009cf0 <_realloc_r+0x16>
 8009ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	4611      	mov	r1, r2
 8009cec:	f7fd be60 	b.w	80079b0 <_malloc_r>
 8009cf0:	b92a      	cbnz	r2, 8009cfe <_realloc_r+0x24>
 8009cf2:	f7fd fde9 	bl	80078c8 <_free_r>
 8009cf6:	2400      	movs	r4, #0
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cfe:	f000 f840 	bl	8009d82 <_malloc_usable_size_r>
 8009d02:	4285      	cmp	r5, r0
 8009d04:	4606      	mov	r6, r0
 8009d06:	d802      	bhi.n	8009d0e <_realloc_r+0x34>
 8009d08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d0c:	d8f4      	bhi.n	8009cf8 <_realloc_r+0x1e>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4640      	mov	r0, r8
 8009d12:	f7fd fe4d 	bl	80079b0 <_malloc_r>
 8009d16:	4607      	mov	r7, r0
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0ec      	beq.n	8009cf6 <_realloc_r+0x1c>
 8009d1c:	42b5      	cmp	r5, r6
 8009d1e:	462a      	mov	r2, r5
 8009d20:	4621      	mov	r1, r4
 8009d22:	bf28      	it	cs
 8009d24:	4632      	movcs	r2, r6
 8009d26:	f7ff fc45 	bl	80095b4 <memcpy>
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	f7fd fdcb 	bl	80078c8 <_free_r>
 8009d32:	463c      	mov	r4, r7
 8009d34:	e7e0      	b.n	8009cf8 <_realloc_r+0x1e>

08009d36 <__ascii_wctomb>:
 8009d36:	4603      	mov	r3, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	b141      	cbz	r1, 8009d4e <__ascii_wctomb+0x18>
 8009d3c:	2aff      	cmp	r2, #255	@ 0xff
 8009d3e:	d904      	bls.n	8009d4a <__ascii_wctomb+0x14>
 8009d40:	228a      	movs	r2, #138	@ 0x8a
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	4770      	bx	lr
 8009d4a:	700a      	strb	r2, [r1, #0]
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	4770      	bx	lr

08009d50 <fiprintf>:
 8009d50:	b40e      	push	{r1, r2, r3}
 8009d52:	b503      	push	{r0, r1, lr}
 8009d54:	4601      	mov	r1, r0
 8009d56:	ab03      	add	r3, sp, #12
 8009d58:	4805      	ldr	r0, [pc, #20]	@ (8009d70 <fiprintf+0x20>)
 8009d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d5e:	6800      	ldr	r0, [r0, #0]
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	f000 f83f 	bl	8009de4 <_vfiprintf_r>
 8009d66:	b002      	add	sp, #8
 8009d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d6c:	b003      	add	sp, #12
 8009d6e:	4770      	bx	lr
 8009d70:	20000100 	.word	0x20000100

08009d74 <abort>:
 8009d74:	b508      	push	{r3, lr}
 8009d76:	2006      	movs	r0, #6
 8009d78:	f000 fa08 	bl	800a18c <raise>
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	f7f8 fd9f 	bl	80028c0 <_exit>

08009d82 <_malloc_usable_size_r>:
 8009d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d86:	1f18      	subs	r0, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bfbc      	itt	lt
 8009d8c:	580b      	ldrlt	r3, [r1, r0]
 8009d8e:	18c0      	addlt	r0, r0, r3
 8009d90:	4770      	bx	lr

08009d92 <__sfputc_r>:
 8009d92:	6893      	ldr	r3, [r2, #8]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	b410      	push	{r4}
 8009d9a:	6093      	str	r3, [r2, #8]
 8009d9c:	da08      	bge.n	8009db0 <__sfputc_r+0x1e>
 8009d9e:	6994      	ldr	r4, [r2, #24]
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	db01      	blt.n	8009da8 <__sfputc_r+0x16>
 8009da4:	290a      	cmp	r1, #10
 8009da6:	d103      	bne.n	8009db0 <__sfputc_r+0x1e>
 8009da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dac:	f000 b932 	b.w	800a014 <__swbuf_r>
 8009db0:	6813      	ldr	r3, [r2, #0]
 8009db2:	1c58      	adds	r0, r3, #1
 8009db4:	6010      	str	r0, [r2, #0]
 8009db6:	7019      	strb	r1, [r3, #0]
 8009db8:	4608      	mov	r0, r1
 8009dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <__sfputs_r>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460f      	mov	r7, r1
 8009dc6:	4614      	mov	r4, r2
 8009dc8:	18d5      	adds	r5, r2, r3
 8009dca:	42ac      	cmp	r4, r5
 8009dcc:	d101      	bne.n	8009dd2 <__sfputs_r+0x12>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e007      	b.n	8009de2 <__sfputs_r+0x22>
 8009dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff ffda 	bl	8009d92 <__sfputc_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d1f3      	bne.n	8009dca <__sfputs_r+0xa>
 8009de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009de4 <_vfiprintf_r>:
 8009de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	460d      	mov	r5, r1
 8009dea:	b09d      	sub	sp, #116	@ 0x74
 8009dec:	4614      	mov	r4, r2
 8009dee:	4698      	mov	r8, r3
 8009df0:	4606      	mov	r6, r0
 8009df2:	b118      	cbz	r0, 8009dfc <_vfiprintf_r+0x18>
 8009df4:	6a03      	ldr	r3, [r0, #32]
 8009df6:	b90b      	cbnz	r3, 8009dfc <_vfiprintf_r+0x18>
 8009df8:	f7fc fdf8 	bl	80069ec <__sinit>
 8009dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfe:	07d9      	lsls	r1, r3, #31
 8009e00:	d405      	bmi.n	8009e0e <_vfiprintf_r+0x2a>
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	059a      	lsls	r2, r3, #22
 8009e06:	d402      	bmi.n	8009e0e <_vfiprintf_r+0x2a>
 8009e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e0a:	f7fc ff06 	bl	8006c1a <__retarget_lock_acquire_recursive>
 8009e0e:	89ab      	ldrh	r3, [r5, #12]
 8009e10:	071b      	lsls	r3, r3, #28
 8009e12:	d501      	bpl.n	8009e18 <_vfiprintf_r+0x34>
 8009e14:	692b      	ldr	r3, [r5, #16]
 8009e16:	b99b      	cbnz	r3, 8009e40 <_vfiprintf_r+0x5c>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 f938 	bl	800a090 <__swsetup_r>
 8009e20:	b170      	cbz	r0, 8009e40 <_vfiprintf_r+0x5c>
 8009e22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e24:	07dc      	lsls	r4, r3, #31
 8009e26:	d504      	bpl.n	8009e32 <_vfiprintf_r+0x4e>
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2c:	b01d      	add	sp, #116	@ 0x74
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	0598      	lsls	r0, r3, #22
 8009e36:	d4f7      	bmi.n	8009e28 <_vfiprintf_r+0x44>
 8009e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e3a:	f7fc feef 	bl	8006c1c <__retarget_lock_release_recursive>
 8009e3e:	e7f3      	b.n	8009e28 <_vfiprintf_r+0x44>
 8009e40:	2300      	movs	r3, #0
 8009e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e44:	2320      	movs	r3, #32
 8009e46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e4e:	2330      	movs	r3, #48	@ 0x30
 8009e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a000 <_vfiprintf_r+0x21c>
 8009e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e58:	f04f 0901 	mov.w	r9, #1
 8009e5c:	4623      	mov	r3, r4
 8009e5e:	469a      	mov	sl, r3
 8009e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e64:	b10a      	cbz	r2, 8009e6a <_vfiprintf_r+0x86>
 8009e66:	2a25      	cmp	r2, #37	@ 0x25
 8009e68:	d1f9      	bne.n	8009e5e <_vfiprintf_r+0x7a>
 8009e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e6e:	d00b      	beq.n	8009e88 <_vfiprintf_r+0xa4>
 8009e70:	465b      	mov	r3, fp
 8009e72:	4622      	mov	r2, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	4630      	mov	r0, r6
 8009e78:	f7ff ffa2 	bl	8009dc0 <__sfputs_r>
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f000 80a7 	beq.w	8009fd0 <_vfiprintf_r+0x1ec>
 8009e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e84:	445a      	add	r2, fp
 8009e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e88:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 809f 	beq.w	8009fd0 <_vfiprintf_r+0x1ec>
 8009e92:	2300      	movs	r3, #0
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295
 8009e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e9c:	f10a 0a01 	add.w	sl, sl, #1
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	9307      	str	r3, [sp, #28]
 8009ea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ea8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009eaa:	4654      	mov	r4, sl
 8009eac:	2205      	movs	r2, #5
 8009eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb2:	4853      	ldr	r0, [pc, #332]	@ (800a000 <_vfiprintf_r+0x21c>)
 8009eb4:	f7f6 f9ac 	bl	8000210 <memchr>
 8009eb8:	9a04      	ldr	r2, [sp, #16]
 8009eba:	b9d8      	cbnz	r0, 8009ef4 <_vfiprintf_r+0x110>
 8009ebc:	06d1      	lsls	r1, r2, #27
 8009ebe:	bf44      	itt	mi
 8009ec0:	2320      	movmi	r3, #32
 8009ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec6:	0713      	lsls	r3, r2, #28
 8009ec8:	bf44      	itt	mi
 8009eca:	232b      	movmi	r3, #43	@ 0x2b
 8009ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed6:	d015      	beq.n	8009f04 <_vfiprintf_r+0x120>
 8009ed8:	9a07      	ldr	r2, [sp, #28]
 8009eda:	4654      	mov	r4, sl
 8009edc:	2000      	movs	r0, #0
 8009ede:	f04f 0c0a 	mov.w	ip, #10
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee8:	3b30      	subs	r3, #48	@ 0x30
 8009eea:	2b09      	cmp	r3, #9
 8009eec:	d94b      	bls.n	8009f86 <_vfiprintf_r+0x1a2>
 8009eee:	b1b0      	cbz	r0, 8009f1e <_vfiprintf_r+0x13a>
 8009ef0:	9207      	str	r2, [sp, #28]
 8009ef2:	e014      	b.n	8009f1e <_vfiprintf_r+0x13a>
 8009ef4:	eba0 0308 	sub.w	r3, r0, r8
 8009ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8009efc:	4313      	orrs	r3, r2
 8009efe:	9304      	str	r3, [sp, #16]
 8009f00:	46a2      	mov	sl, r4
 8009f02:	e7d2      	b.n	8009eaa <_vfiprintf_r+0xc6>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	1d19      	adds	r1, r3, #4
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	9103      	str	r1, [sp, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	bfbb      	ittet	lt
 8009f10:	425b      	neglt	r3, r3
 8009f12:	f042 0202 	orrlt.w	r2, r2, #2
 8009f16:	9307      	strge	r3, [sp, #28]
 8009f18:	9307      	strlt	r3, [sp, #28]
 8009f1a:	bfb8      	it	lt
 8009f1c:	9204      	strlt	r2, [sp, #16]
 8009f1e:	7823      	ldrb	r3, [r4, #0]
 8009f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f22:	d10a      	bne.n	8009f3a <_vfiprintf_r+0x156>
 8009f24:	7863      	ldrb	r3, [r4, #1]
 8009f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f28:	d132      	bne.n	8009f90 <_vfiprintf_r+0x1ac>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	1d1a      	adds	r2, r3, #4
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	9203      	str	r2, [sp, #12]
 8009f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f36:	3402      	adds	r4, #2
 8009f38:	9305      	str	r3, [sp, #20]
 8009f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a010 <_vfiprintf_r+0x22c>
 8009f3e:	7821      	ldrb	r1, [r4, #0]
 8009f40:	2203      	movs	r2, #3
 8009f42:	4650      	mov	r0, sl
 8009f44:	f7f6 f964 	bl	8000210 <memchr>
 8009f48:	b138      	cbz	r0, 8009f5a <_vfiprintf_r+0x176>
 8009f4a:	9b04      	ldr	r3, [sp, #16]
 8009f4c:	eba0 000a 	sub.w	r0, r0, sl
 8009f50:	2240      	movs	r2, #64	@ 0x40
 8009f52:	4082      	lsls	r2, r0
 8009f54:	4313      	orrs	r3, r2
 8009f56:	3401      	adds	r4, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5e:	4829      	ldr	r0, [pc, #164]	@ (800a004 <_vfiprintf_r+0x220>)
 8009f60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f64:	2206      	movs	r2, #6
 8009f66:	f7f6 f953 	bl	8000210 <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d03f      	beq.n	8009fee <_vfiprintf_r+0x20a>
 8009f6e:	4b26      	ldr	r3, [pc, #152]	@ (800a008 <_vfiprintf_r+0x224>)
 8009f70:	bb1b      	cbnz	r3, 8009fba <_vfiprintf_r+0x1d6>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	3307      	adds	r3, #7
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f80:	443b      	add	r3, r7
 8009f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f84:	e76a      	b.n	8009e5c <_vfiprintf_r+0x78>
 8009f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	e7a8      	b.n	8009ee2 <_vfiprintf_r+0xfe>
 8009f90:	2300      	movs	r3, #0
 8009f92:	3401      	adds	r4, #1
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	4619      	mov	r1, r3
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa2:	3a30      	subs	r2, #48	@ 0x30
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d903      	bls.n	8009fb0 <_vfiprintf_r+0x1cc>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0c6      	beq.n	8009f3a <_vfiprintf_r+0x156>
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	e7c4      	b.n	8009f3a <_vfiprintf_r+0x156>
 8009fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7f0      	b.n	8009f9c <_vfiprintf_r+0x1b8>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b12      	ldr	r3, [pc, #72]	@ (800a00c <_vfiprintf_r+0x228>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7fb feb9 	bl	8005d3c <_printf_float>
 8009fca:	4607      	mov	r7, r0
 8009fcc:	1c78      	adds	r0, r7, #1
 8009fce:	d1d6      	bne.n	8009f7e <_vfiprintf_r+0x19a>
 8009fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	d405      	bmi.n	8009fe2 <_vfiprintf_r+0x1fe>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_vfiprintf_r+0x1fe>
 8009fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fde:	f7fc fe1d 	bl	8006c1c <__retarget_lock_release_recursive>
 8009fe2:	89ab      	ldrh	r3, [r5, #12]
 8009fe4:	065b      	lsls	r3, r3, #25
 8009fe6:	f53f af1f 	bmi.w	8009e28 <_vfiprintf_r+0x44>
 8009fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fec:	e71e      	b.n	8009e2c <_vfiprintf_r+0x48>
 8009fee:	ab03      	add	r3, sp, #12
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	462a      	mov	r2, r5
 8009ff4:	4b05      	ldr	r3, [pc, #20]	@ (800a00c <_vfiprintf_r+0x228>)
 8009ff6:	a904      	add	r1, sp, #16
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7fc f937 	bl	800626c <_printf_i>
 8009ffe:	e7e4      	b.n	8009fca <_vfiprintf_r+0x1e6>
 800a000:	0800a681 	.word	0x0800a681
 800a004:	0800a68b 	.word	0x0800a68b
 800a008:	08005d3d 	.word	0x08005d3d
 800a00c:	08009dc1 	.word	0x08009dc1
 800a010:	0800a687 	.word	0x0800a687

0800a014 <__swbuf_r>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	460e      	mov	r6, r1
 800a018:	4614      	mov	r4, r2
 800a01a:	4605      	mov	r5, r0
 800a01c:	b118      	cbz	r0, 800a026 <__swbuf_r+0x12>
 800a01e:	6a03      	ldr	r3, [r0, #32]
 800a020:	b90b      	cbnz	r3, 800a026 <__swbuf_r+0x12>
 800a022:	f7fc fce3 	bl	80069ec <__sinit>
 800a026:	69a3      	ldr	r3, [r4, #24]
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	071a      	lsls	r2, r3, #28
 800a02e:	d501      	bpl.n	800a034 <__swbuf_r+0x20>
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	b943      	cbnz	r3, 800a046 <__swbuf_r+0x32>
 800a034:	4621      	mov	r1, r4
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f82a 	bl	800a090 <__swsetup_r>
 800a03c:	b118      	cbz	r0, 800a046 <__swbuf_r+0x32>
 800a03e:	f04f 37ff 	mov.w	r7, #4294967295
 800a042:	4638      	mov	r0, r7
 800a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	1a98      	subs	r0, r3, r2
 800a04c:	6963      	ldr	r3, [r4, #20]
 800a04e:	b2f6      	uxtb	r6, r6
 800a050:	4283      	cmp	r3, r0
 800a052:	4637      	mov	r7, r6
 800a054:	dc05      	bgt.n	800a062 <__swbuf_r+0x4e>
 800a056:	4621      	mov	r1, r4
 800a058:	4628      	mov	r0, r5
 800a05a:	f7ff fa47 	bl	80094ec <_fflush_r>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d1ed      	bne.n	800a03e <__swbuf_r+0x2a>
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	3b01      	subs	r3, #1
 800a066:	60a3      	str	r3, [r4, #8]
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	6022      	str	r2, [r4, #0]
 800a06e:	701e      	strb	r6, [r3, #0]
 800a070:	6962      	ldr	r2, [r4, #20]
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	429a      	cmp	r2, r3
 800a076:	d004      	beq.n	800a082 <__swbuf_r+0x6e>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	07db      	lsls	r3, r3, #31
 800a07c:	d5e1      	bpl.n	800a042 <__swbuf_r+0x2e>
 800a07e:	2e0a      	cmp	r6, #10
 800a080:	d1df      	bne.n	800a042 <__swbuf_r+0x2e>
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f7ff fa31 	bl	80094ec <_fflush_r>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d0d9      	beq.n	800a042 <__swbuf_r+0x2e>
 800a08e:	e7d6      	b.n	800a03e <__swbuf_r+0x2a>

0800a090 <__swsetup_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4b29      	ldr	r3, [pc, #164]	@ (800a138 <__swsetup_r+0xa8>)
 800a094:	4605      	mov	r5, r0
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	460c      	mov	r4, r1
 800a09a:	b118      	cbz	r0, 800a0a4 <__swsetup_r+0x14>
 800a09c:	6a03      	ldr	r3, [r0, #32]
 800a09e:	b90b      	cbnz	r3, 800a0a4 <__swsetup_r+0x14>
 800a0a0:	f7fc fca4 	bl	80069ec <__sinit>
 800a0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	d422      	bmi.n	800a0f2 <__swsetup_r+0x62>
 800a0ac:	06da      	lsls	r2, r3, #27
 800a0ae:	d407      	bmi.n	800a0c0 <__swsetup_r+0x30>
 800a0b0:	2209      	movs	r2, #9
 800a0b2:	602a      	str	r2, [r5, #0]
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	e033      	b.n	800a128 <__swsetup_r+0x98>
 800a0c0:	0758      	lsls	r0, r3, #29
 800a0c2:	d512      	bpl.n	800a0ea <__swsetup_r+0x5a>
 800a0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0c6:	b141      	cbz	r1, 800a0da <__swsetup_r+0x4a>
 800a0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	d002      	beq.n	800a0d6 <__swsetup_r+0x46>
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f7fd fbf9 	bl	80078c8 <_free_r>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	b94b      	cbnz	r3, 800a10a <__swsetup_r+0x7a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a100:	d003      	beq.n	800a10a <__swsetup_r+0x7a>
 800a102:	4621      	mov	r1, r4
 800a104:	4628      	mov	r0, r5
 800a106:	f000 f883 	bl	800a210 <__smakebuf_r>
 800a10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10e:	f013 0201 	ands.w	r2, r3, #1
 800a112:	d00a      	beq.n	800a12a <__swsetup_r+0x9a>
 800a114:	2200      	movs	r2, #0
 800a116:	60a2      	str	r2, [r4, #8]
 800a118:	6962      	ldr	r2, [r4, #20]
 800a11a:	4252      	negs	r2, r2
 800a11c:	61a2      	str	r2, [r4, #24]
 800a11e:	6922      	ldr	r2, [r4, #16]
 800a120:	b942      	cbnz	r2, 800a134 <__swsetup_r+0xa4>
 800a122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a126:	d1c5      	bne.n	800a0b4 <__swsetup_r+0x24>
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	0799      	lsls	r1, r3, #30
 800a12c:	bf58      	it	pl
 800a12e:	6962      	ldrpl	r2, [r4, #20]
 800a130:	60a2      	str	r2, [r4, #8]
 800a132:	e7f4      	b.n	800a11e <__swsetup_r+0x8e>
 800a134:	2000      	movs	r0, #0
 800a136:	e7f7      	b.n	800a128 <__swsetup_r+0x98>
 800a138:	20000100 	.word	0x20000100

0800a13c <_raise_r>:
 800a13c:	291f      	cmp	r1, #31
 800a13e:	b538      	push	{r3, r4, r5, lr}
 800a140:	4605      	mov	r5, r0
 800a142:	460c      	mov	r4, r1
 800a144:	d904      	bls.n	800a150 <_raise_r+0x14>
 800a146:	2316      	movs	r3, #22
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a152:	b112      	cbz	r2, 800a15a <_raise_r+0x1e>
 800a154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a158:	b94b      	cbnz	r3, 800a16e <_raise_r+0x32>
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 f830 	bl	800a1c0 <_getpid_r>
 800a160:	4622      	mov	r2, r4
 800a162:	4601      	mov	r1, r0
 800a164:	4628      	mov	r0, r5
 800a166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a16a:	f000 b817 	b.w	800a19c <_kill_r>
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d00a      	beq.n	800a188 <_raise_r+0x4c>
 800a172:	1c59      	adds	r1, r3, #1
 800a174:	d103      	bne.n	800a17e <_raise_r+0x42>
 800a176:	2316      	movs	r3, #22
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	2001      	movs	r0, #1
 800a17c:	e7e7      	b.n	800a14e <_raise_r+0x12>
 800a17e:	2100      	movs	r1, #0
 800a180:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a184:	4620      	mov	r0, r4
 800a186:	4798      	blx	r3
 800a188:	2000      	movs	r0, #0
 800a18a:	e7e0      	b.n	800a14e <_raise_r+0x12>

0800a18c <raise>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	@ (800a198 <raise+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f7ff bfd3 	b.w	800a13c <_raise_r>
 800a196:	bf00      	nop
 800a198:	20000100 	.word	0x20000100

0800a19c <_kill_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d07      	ldr	r5, [pc, #28]	@ (800a1bc <_kill_r+0x20>)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f7f8 fb79 	bl	80028a0 <_kill>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d102      	bne.n	800a1b8 <_kill_r+0x1c>
 800a1b2:	682b      	ldr	r3, [r5, #0]
 800a1b4:	b103      	cbz	r3, 800a1b8 <_kill_r+0x1c>
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	bf00      	nop
 800a1bc:	200005b0 	.word	0x200005b0

0800a1c0 <_getpid_r>:
 800a1c0:	f7f8 bb66 	b.w	8002890 <_getpid>

0800a1c4 <__swhatbuf_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	b096      	sub	sp, #88	@ 0x58
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	da0d      	bge.n	800a1f2 <__swhatbuf_r+0x2e>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1dc:	f04f 0100 	mov.w	r1, #0
 800a1e0:	bf14      	ite	ne
 800a1e2:	2340      	movne	r3, #64	@ 0x40
 800a1e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	6031      	str	r1, [r6, #0]
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	b016      	add	sp, #88	@ 0x58
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	466a      	mov	r2, sp
 800a1f4:	f000 f848 	bl	800a288 <_fstat_r>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dbec      	blt.n	800a1d6 <__swhatbuf_r+0x12>
 800a1fc:	9901      	ldr	r1, [sp, #4]
 800a1fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a206:	4259      	negs	r1, r3
 800a208:	4159      	adcs	r1, r3
 800a20a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a20e:	e7eb      	b.n	800a1e8 <__swhatbuf_r+0x24>

0800a210 <__smakebuf_r>:
 800a210:	898b      	ldrh	r3, [r1, #12]
 800a212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a214:	079d      	lsls	r5, r3, #30
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	d507      	bpl.n	800a22c <__smakebuf_r+0x1c>
 800a21c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	2301      	movs	r3, #1
 800a226:	6163      	str	r3, [r4, #20]
 800a228:	b003      	add	sp, #12
 800a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22c:	ab01      	add	r3, sp, #4
 800a22e:	466a      	mov	r2, sp
 800a230:	f7ff ffc8 	bl	800a1c4 <__swhatbuf_r>
 800a234:	9f00      	ldr	r7, [sp, #0]
 800a236:	4605      	mov	r5, r0
 800a238:	4639      	mov	r1, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7fd fbb8 	bl	80079b0 <_malloc_r>
 800a240:	b948      	cbnz	r0, 800a256 <__smakebuf_r+0x46>
 800a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a246:	059a      	lsls	r2, r3, #22
 800a248:	d4ee      	bmi.n	800a228 <__smakebuf_r+0x18>
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	f043 0302 	orr.w	r3, r3, #2
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	e7e2      	b.n	800a21c <__smakebuf_r+0xc>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	6020      	str	r0, [r4, #0]
 800a25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x70>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 f81d 	bl	800a2ac <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x70>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	431d      	orrs	r5, r3
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cf      	b.n	800a228 <__smakebuf_r+0x18>

0800a288 <_fstat_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d07      	ldr	r5, [pc, #28]	@ (800a2a8 <_fstat_r+0x20>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	f7f8 fb63 	bl	8002960 <_fstat>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d102      	bne.n	800a2a4 <_fstat_r+0x1c>
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	b103      	cbz	r3, 800a2a4 <_fstat_r+0x1c>
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200005b0 	.word	0x200005b0

0800a2ac <_isatty_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d06      	ldr	r5, [pc, #24]	@ (800a2c8 <_isatty_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	f7f8 fb62 	bl	8002980 <_isatty>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_isatty_r+0x1a>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_isatty_r+0x1a>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	200005b0 	.word	0x200005b0

0800a2cc <_init>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr

0800a2d8 <_fini>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr
