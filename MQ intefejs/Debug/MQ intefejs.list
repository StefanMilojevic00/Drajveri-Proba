
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800a6c0  0800a6c0  0000b6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf8  0800abf8  0000c328  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf8  0800abf8  0000bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac00  0800ac00  0000c328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac00  0800ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  0800ac08  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000328  0800af30  0000c328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800af30  0000c638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014923  00000000  00000000  0000c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381d  00000000  00000000  00020c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00024498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d76  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aff2  00000000  00000000  000263be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af8a  00000000  00000000  000513b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6d1  00000000  00000000  0006c33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168a0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  00168a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0016e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6a4 	.word	0x0800a6a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0800a6a4 	.word	0x0800a6a4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:
#include "AirQualityIndicator.h"

static ledRow_t loadConfiguration;

void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000344 	.word	0x20000344

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000344 	.word	0x20000344

080010b8 <SetIndicatorLEDsNum>:
void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000344 	.word	0x20000344

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	20000374 	.word	0x20000374

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000374 	.word	0x20000374

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000374 	.word	0x20000374

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f002 fe6f 	bl	8003e68 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f002 fe13 	bl	8003e98 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 fdd6 	bl	8003e98 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f002 fdcd 	bl	8003e98 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	2000037c 	.word	0x2000037c

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000037c 	.word	0x2000037c

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 fd61 	bl	8003e98 <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 fd58 	bl	8003e98 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fd47 	bl	8003e98 <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 fd3e 	bl	8003e98 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f002 fd2d 	bl	8003e98 <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f002 fd24 	bl	8003e98 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f002 fd13 	bl	8003e98 <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 fd0a 	bl	8003e98 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 fcf9 	bl	8003e98 <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fcf0 	bl	8003e98 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 fcdf 	bl	8003e98 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 fcd6 	bl	8003e98 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44160000 	.word	0x44160000
 80014fc:	44960000 	.word	0x44960000
 8001500:	44e10000 	.word	0x44e10000
 8001504:	45160000 	.word	0x45160000
 8001508:	453b8000 	.word	0x453b8000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 fcb2 	bl	8003e98 <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 fca9 	bl	8003e98 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 fc9e 	bl	8003e98 <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fc95 	bl	8003e98 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fc8a 	bl	8003e98 <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 fc81 	bl	8003e98 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 fc76 	bl	8003e98 <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 fc6d 	bl	8003e98 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 fc62 	bl	8003e98 <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 fc59 	bl	8003e98 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fc4e 	bl	8003e98 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 fc45 	bl	8003e98 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 fcc4 	bl	8002fac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f001 fd8d 	bl	8003148 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f001 fe15 	bl	800325e <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200003a4 	.word	0x200003a4

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	20000384 	.word	0x20000384

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000384 	.word	0x20000384

080016d8 <AppInit>:
CountingTasterFSM countState = C_IDLE;
LED_StatusFSM ledState = LED_OFF;
UART_commandsFSM uartCmdState;

void AppInit()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	AlarmInit();
 80016dc:	f7ff fcfc 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 80016e0:	f7ff ffda 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 80016e4:	f7ff fcae 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 80016e8:	f7ff fe0e 	bl	8001308 <LED_init>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <AppStart>:
bool result = false;
const uint8_t len_of_array = 4;
bool first_time = false;

void AppStart()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	while(1)
	{
		if(first_time == false)
 80016f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001830 <AppStart+0x140>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01d      	beq.n	800173e <AppStart+0x4e>
		{
			result = StringCompareFromUART(cmd_test, &cmdStrings, len_of_array, &cmd_find);
 8001702:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <AppStart+0x144>)
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	2204      	movs	r2, #4
 8001708:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <AppStart+0x148>)
 800170a:	494c      	ldr	r1, [pc, #304]	@ (800183c <AppStart+0x14c>)
 800170c:	f000 fa26 	bl	8001b5c <StringCompareFromUART>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <AppStart+0x150>)
 8001716:	701a      	strb	r2, [r3, #0]
			UART_TransmitString("Proslo\n");
 8001718:	484a      	ldr	r0, [pc, #296]	@ (8001844 <AppStart+0x154>)
 800171a:	f000 fb17 	bl	8001d4c <UART_TransmitString>
			if(result == true)
 800171e:	4b48      	ldr	r3, [pc, #288]	@ (8001840 <AppStart+0x150>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <AppStart+0x48>
			{
				uartCmdState = cmd_find;
 8001726:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <AppStart+0x148>)
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <AppStart+0x158>)
 800172c:	701a      	strb	r2, [r3, #0]
				UART_TransmitString("ACK\n");
 800172e:	4847      	ldr	r0, [pc, #284]	@ (800184c <AppStart+0x15c>)
 8001730:	f000 fb0c 	bl	8001d4c <UART_TransmitString>
				SendACK();
 8001734:	f000 fa6a 	bl	8001c0c <SendACK>

			}
			first_time = true;
 8001738:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <AppStart+0x140>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]


			       //       (char* cmp_cmd, char* cmdStrings[], bool* ret_val)


			switch(progState)
 800173e:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <AppStart+0x160>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d010      	beq.n	8001768 <AppStart+0x78>
 8001746:	2b02      	cmp	r3, #2
 8001748:	dcd4      	bgt.n	80016f4 <AppStart+0x4>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <AppStart+0x138>
 800174e:	2b01      	cmp	r3, #1
 8001750:	d1d0      	bne.n	80016f4 <AppStart+0x4>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 8001752:	4840      	ldr	r0, [pc, #256]	@ (8001854 <AppStart+0x164>)
 8001754:	f000 fafa 	bl	8001d4c <UART_TransmitString>
					SetIndicatorLEDs(0); //resets the indicator
 8001758:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8001858 <AppStart+0x168>
 800175c:	f7ff fc9c 	bl	8001098 <SetIndicatorLEDs>
					progState = P_IDLE;
 8001760:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <AppStart+0x160>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
					break;
 8001766:	e062      	b.n	800182e <AppStart+0x13e>

					break;

				case P_WORK:

					PPM = ReadGasSensor();
 8001768:	f7ff fd87 	bl	800127a <ReadGasSensor>
 800176c:	eef0 7a40 	vmov.f32	s15, s0
 8001770:	4b3a      	ldr	r3, [pc, #232]	@ (800185c <AppStart+0x16c>)
 8001772:	edc3 7a00 	vstr	s15, [r3]

					if(PPM < 400)
 8001776:	4b39      	ldr	r3, [pc, #228]	@ (800185c <AppStart+0x16c>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001860 <AppStart+0x170>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d503      	bpl.n	8001792 <AppStart+0xa2>
					{
						led_cnt.correct_led = false;
 800178a:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <AppStart+0x174>)
 800178c:	2200      	movs	r2, #0
 800178e:	735a      	strb	r2, [r3, #13]
 8001790:	e002      	b.n	8001798 <AppStart+0xa8>
					}
					else
					{
						led_cnt.correct_led  = true;
 8001792:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <AppStart+0x174>)
 8001794:	2201      	movs	r2, #1
 8001796:	735a      	strb	r2, [r3, #13]
					}

					if(led_cnt.led_overflow_flag == true)
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <AppStart+0x174>)
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <AppStart+0xe6>
					{
						switch(ledState)
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <AppStart+0x178>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d00e      	beq.n	80017c8 <AppStart+0xd8>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	dc10      	bgt.n	80017d0 <AppStart+0xe0>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <AppStart+0xc8>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d004      	beq.n	80017c0 <AppStart+0xd0>
 80017b6:	e00b      	b.n	80017d0 <AppStart+0xe0>
						{
							case LED_OFF:

								LED_Drive(false);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fdb3 	bl	8001324 <LED_Drive>

								break;
 80017be:	e007      	b.n	80017d0 <AppStart+0xe0>

							case LED_ON_CORECT:

								LED_Drive(true);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fdaf 	bl	8001324 <LED_Drive>

								break;
 80017c6:	e003      	b.n	80017d0 <AppStart+0xe0>

							case LED_ON_INCORECT:

								LED_Drive(true);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fdab 	bl	8001324 <LED_Drive>

								break;
 80017ce:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <AppStart+0x174>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <AppStart+0x17c>)
 80017d8:	7b9b      	ldrb	r3, [r3, #14]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d025      	beq.n	800182c <AppStart+0x13c>
					{
						UART_TransmitString(PPM_MSG);
 80017e0:	4823      	ldr	r0, [pc, #140]	@ (8001870 <AppStart+0x180>)
 80017e2:	f000 fab3 	bl	8001d4c <UART_TransmitString>
						UART_TransmitFloat(PPM);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <AppStart+0x16c>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	f000 fada 	bl	8001da8 <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <AppStart+0x16c>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	f7ff fc4b 	bl	8001098 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <AppStart+0x16c>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001874 <AppStart+0x184>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd04      	ble.n	8001820 <AppStart+0x130>
						{
							UART_TransmitString(AlertMSG);
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <AppStart+0x188>)
 8001818:	f000 fa98 	bl	8001d4c <UART_TransmitString>
							AlarmON();
 800181c:	f7ff fc6a 	bl	80010f4 <AlarmON>
						}
						prog_cnt.update_param_flag = false;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <AppStart+0x17c>)
 8001822:	2200      	movs	r2, #0
 8001824:	739a      	strb	r2, [r3, #14]
					}
					break;
 8001826:	e001      	b.n	800182c <AppStart+0x13c>
					break;
 8001828:	bf00      	nop
 800182a:	e763      	b.n	80016f4 <AppStart+0x4>
					break;
 800182c:	bf00      	nop
		if(first_time == false)
 800182e:	e761      	b.n	80016f4 <AppStart+0x4>
 8001830:	200003a1 	.word	0x200003a1
 8001834:	20000150 	.word	0x20000150
 8001838:	2000039f 	.word	0x2000039f
 800183c:	20000100 	.word	0x20000100
 8001840:	200003a0 	.word	0x200003a0
 8001844:	0800a78c 	.word	0x0800a78c
 8001848:	2000039e 	.word	0x2000039e
 800184c:	0800a794 	.word	0x0800a794
 8001850:	2000014c 	.word	0x2000014c
 8001854:	20000008 	.word	0x20000008
 8001858:	00000000 	.word	0x00000000
 800185c:	20000398 	.word	0x20000398
 8001860:	43c80000 	.word	0x43c80000
 8001864:	200000dc 	.word	0x200000dc
 8001868:	2000039d 	.word	0x2000039d
 800186c:	200000ec 	.word	0x200000ec
 8001870:	20000028 	.word	0x20000028
 8001874:	45098000 	.word	0x45098000
 8001878:	20000030 	.word	0x20000030

0800187c <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a97      	ldr	r2, [pc, #604]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001888:	4293      	cmp	r3, r2
 800188a:	f040 8158 	bne.w	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2c2>
	{
		SysTickFlag = true;
 800188e:	4b96      	ldr	r3, [pc, #600]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]

		//Controling room clearing mechanism////////////////////////////////
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 8001894:	4b95      	ldr	r3, [pc, #596]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001896:	7bdb      	ldrb	r3, [r3, #15]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b94      	ldr	r3, [pc, #592]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 800189c:	7c1b      	ldrb	r3, [r3, #16]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d30f      	bcc.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x46>
 80018a2:	4b92      	ldr	r3, [pc, #584]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018a4:	7c5b      	ldrb	r3, [r3, #17]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			AlarmOFF();
 80018ac:	f7ff fc2c 	bl	8001108 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80018b0:	488f      	ldr	r0, [pc, #572]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018b2:	f000 fa4b 	bl	8001d4c <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80018b6:	4b8d      	ldr	r3, [pc, #564]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80018bc:	4b8b      	ldr	r3, [pc, #556]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018be:	2200      	movs	r2, #0
 80018c0:	745a      	strb	r2, [r3, #17]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80018c2:	4b8c      	ldr	r3, [pc, #560]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d042      	beq.n	8001950 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	dc5d      	bgt.n	800198a <HAL_TIM_PeriodElapsedCallback+0x10e>
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d024      	beq.n	8001920 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80018d6:	e058      	b.n	800198a <HAL_TIM_PeriodElapsedCallback+0x10e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 80018d8:	4b87      	ldr	r3, [pc, #540]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b85      	ldr	r3, [pc, #532]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018e4:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 80018e6:	4b84      	ldr	r3, [pc, #528]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b82      	ldr	r3, [pc, #520]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018ee:	895b      	ldrh	r3, [r3, #10]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d345      	bcc.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x104>
				{

					led_cnt.led_overflow_flag = true;
 80018f4:	4b80      	ldr	r3, [pc, #512]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 80018fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018fc:	7b5b      	ldrb	r3, [r3, #13]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_TIM_PeriodElapsedCallback+0x90>
					{
						ledState =  LED_ON_CORECT;
 8001904:	4b7b      	ldr	r3, [pc, #492]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e002      	b.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x96>
					}
					else
					{
						ledState = LED_ON_INCORECT;
 800190c:	4b79      	ldr	r3, [pc, #484]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 8001912:	4b79      	ldr	r3, [pc, #484]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001914:	2200      	movs	r2, #0
 8001916:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 8001918:	4b77      	ldr	r3, [pc, #476]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800191a:	2201      	movs	r2, #1
 800191c:	731a      	strb	r2, [r3, #12]
				}

				break;
 800191e:	e02f      	b.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x104>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001920:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800192c:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 800192e:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b70      	ldr	r3, [pc, #448]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001936:	88db      	ldrh	r3, [r3, #6]
 8001938:	429a      	cmp	r2, r3
 800193a:	d323      	bcc.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x108>
				{
					led_cnt.cnt_led_correct_on = 0;
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 8001942:	4b6d      	ldr	r3, [pc, #436]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001944:	2201      	movs	r2, #1
 8001946:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001948:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800194e:	e019      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x108>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001950:	4b69      	ldr	r3, [pc, #420]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001952:	885b      	ldrh	r3, [r3, #2]
 8001954:	b29b      	uxth	r3, r3
 8001956:	3301      	adds	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b67      	ldr	r3, [pc, #412]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800195c:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 800195e:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001960:	885b      	ldrh	r3, [r3, #2]
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b64      	ldr	r3, [pc, #400]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001966:	891b      	ldrh	r3, [r3, #8]
 8001968:	429a      	cmp	r2, r3
 800196a:	d30d      	bcc.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x10c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 800196c:	4b62      	ldr	r3, [pc, #392]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800196e:	2200      	movs	r2, #0
 8001970:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 8001972:	4b61      	ldr	r3, [pc, #388]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001974:	2201      	movs	r2, #1
 8001976:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001978:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800197e:	e003      	b.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x10c>
				break;
 8001980:	bf00      	nop
 8001982:	e002      	b.n	800198a <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 8001984:	bf00      	nop
 8001986:	e000      	b.n	800198a <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 8001988:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 800198a:	4b58      	ldr	r3, [pc, #352]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 800198c:	891b      	ldrh	r3, [r3, #8]
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d014      	beq.n	80019be <HAL_TIM_PeriodElapsedCallback+0x142>
		{
			prog_cnt.cnt_ref_rate++;
 8001994:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001996:	899b      	ldrh	r3, [r3, #12]
 8001998:	b29b      	uxth	r3, r3
 800199a:	3301      	adds	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b53      	ldr	r3, [pc, #332]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019a0:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80019a2:	4b52      	ldr	r3, [pc, #328]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019a4:	899b      	ldrh	r3, [r3, #12]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b50      	ldr	r3, [pc, #320]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019aa:	891b      	ldrh	r3, [r3, #8]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d305      	bcc.n	80019be <HAL_TIM_PeriodElapsedCallback+0x142>
			{
				prog_cnt.update_param_flag = true;
 80019b2:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80019b8:	4b4c      	ldr	r3, [pc, #304]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80019be:	484a      	ldr	r0, [pc, #296]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019c0:	f7ff fe78 	bl	80016b4 <ReadSignal>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019ca:	719a      	strb	r2, [r3, #6]
		switch(countState)
 80019cc:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x280>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d050      	beq.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x1fa>
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f300 80af 	bgt.w	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2bc>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x168>
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d019      	beq.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x19a>
 80019e2:	e0a9      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2bc>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 80019e4:	4b41      	ldr	r3, [pc, #260]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019e6:	799b      	ldrb	r3, [r3, #6]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80a1 	beq.w	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 80019f0:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019f2:	79db      	ldrb	r3, [r3, #7]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 809b 	beq.w	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b6>
				{
					prog_cnt.cnt_button = 0;
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001a02:	4b3a      	ldr	r3, [pc, #232]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001a14:	e08d      	b.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x2b6>

			case C_START:

				prog_cnt.cnt_button++;
 8001a16:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a18:	885b      	ldrh	r3, [r3, #2]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a22:	805a      	strh	r2, [r3, #2]
				UART_TransmitFloat((float)prog_cnt.cnt_button);
 8001a24:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	f000 f9b7 	bl	8001da8 <UART_TransmitFloat>
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a3c:	885b      	ldrh	r3, [r3, #2]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d303      	bcc.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				{
					countState = C_END;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001a4e:	e072      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2ba>
					if(((prog_cnt.read_button_flag) == true))
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06d      	beq.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2ba>
						prog_cnt.cnt_button = 0;
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a6c:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001a6e:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
				break;
 8001a74:	e05f      	b.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x2ba>

			case C_END:

				prog_cnt.cnt_button = 0;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d84b      	bhi.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x2a2>
 8001a86:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001aa5 	.word	0x08001aa5
 8001a94:	08001ab9 	.word	0x08001ab9
 8001a98:	08001acf 	.word	0x08001acf
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b11 	.word	0x08001b11

						break;

					case 1:

						progState = P_WORK;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S1WorkStateMSG);
 8001aaa:	4816      	ldr	r0, [pc, #88]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001aac:	f000 f94e 	bl	8001d4c <UART_TransmitString>
						prog_cnt.ref_rate = 100;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab2:	2264      	movs	r2, #100	@ 0x64
 8001ab4:	811a      	strh	r2, [r3, #8]

						break;
 8001ab6:	e032      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x2a2>

					case 2:

						progState = P_WORK;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S3WorkStateMSG);
 8001abe:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ac0:	f000 f944 	bl	8001d4c <UART_TransmitString>
						prog_cnt.ref_rate = 300;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aca:	811a      	strh	r2, [r3, #8]

						break;
 8001acc:	e027      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x2a2>

					case 3:

						progState = P_WORK;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S5WorkStateMSG);
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ad6:	f000 f939 	bl	8001d4c <UART_TransmitString>
						prog_cnt.ref_rate = 500;
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001adc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ae0:	811a      	strh	r2, [r3, #8]

						break;
 8001ae2:	e01c      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x2a2>
 8001ae4:	20000410 	.word	0x20000410
 8001ae8:	20000394 	.word	0x20000394
 8001aec:	200000ec 	.word	0x200000ec
 8001af0:	20000054 	.word	0x20000054
 8001af4:	2000039d 	.word	0x2000039d
 8001af8:	200000dc 	.word	0x200000dc
 8001afc:	2000039c 	.word	0x2000039c
 8001b00:	2000014c 	.word	0x2000014c
 8001b04:	2000007c 	.word	0x2000007c
 8001b08:	20000094 	.word	0x20000094
 8001b0c:	200000ac 	.word	0x200000ac
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	811a      	strh	r2, [r3, #8]

						break;
 8001b1c:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	71da      	strb	r2, [r3, #7]

				countState = C_IDLE;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
				break;
 8001b30:	e002      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2bc>
				break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x2bc>
				break;
 8001b36:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000014c 	.word	0x2000014c
 8001b50:	200000ec 	.word	0x200000ec
 8001b54:	2000039c 	.word	0x2000039c
 8001b58:	20000394 	.word	0x20000394

08001b5c <StringCompareFromUART>:




bool StringCompareFromUART(char* cmp_cmd, char** cmdStrings, const uint8_t array_element, uint8_t* ret_val)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71fb      	strb	r3, [r7, #7]
  bool find = false;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]
  bool stop_flag = false;
 8001b70:	2300      	movs	r3, #0
 8001b72:	75bb      	strb	r3, [r7, #22]
  uint8_t iterator = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	757b      	strb	r3, [r7, #21]
  do
	{
	  if (((strcmp(cmp_cmd, cmdStrings[iterator])) == 0) && (find == false))
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7fe fb43 	bl	8000210 <strcmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d126      	bne.n	8001bde <StringCompareFromUART+0x82>
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <StringCompareFromUART+0x82>
		{
		  if(iterator == 0)
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <StringCompareFromUART+0x54>
		  {
			  find = true;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
			  stop_flag = true;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75bb      	strb	r3, [r7, #22]
			  *ret_val = iterator;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	7d7a      	ldrb	r2, [r7, #21]
 8001bae:	701a      	strb	r2, [r3, #0]

			 // return find;
		  }
		  *ret_val = iterator;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7d7a      	ldrb	r2, [r7, #21]
 8001bb4:	701a      	strb	r2, [r3, #0]

		//  printf("Uslo\n");
		  UART_TransmitString("Uslo\n");
 8001bb6:	4813      	ldr	r0, [pc, #76]	@ (8001c04 <StringCompareFromUART+0xa8>)
 8001bb8:	f000 f8c8 	bl	8001d4c <UART_TransmitString>
		//  printf(cmp_cmd);
		  UART_TransmitFloat((float)iterator);
 8001bbc:	7d7b      	ldrb	r3, [r7, #21]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bca:	f000 f8ed 	bl	8001da8 <UART_TransmitFloat>
	//	  printf("\n");
		  UART_TransmitString("\n");
 8001bce:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <StringCompareFromUART+0xac>)
 8001bd0:	f000 f8bc 	bl	8001d4c <UART_TransmitString>
		  find = true;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	75fb      	strb	r3, [r7, #23]
		  stop_flag = true;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75bb      	strb	r3, [r7, #22]
 8001bdc:	e002      	b.n	8001be4 <StringCompareFromUART+0x88>
		}
        else
        {
            iterator++;
 8001bde:	7d7b      	ldrb	r3, [r7, #21]
 8001be0:	3301      	adds	r3, #1
 8001be2:	757b      	strb	r3, [r7, #21]
      //      printf("Nije: %d\n", iterator);


        }

	}while ((stop_flag == false) || (iterator < array_element));
 8001be4:	7dbb      	ldrb	r3, [r7, #22]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1c3      	bne.n	8001b78 <StringCompareFromUART+0x1c>
 8001bf0:	7d7a      	ldrb	r2, [r7, #21]
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3bf      	bcc.n	8001b78 <StringCompareFromUART+0x1c>

    return find;
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	0800a79c 	.word	0x0800a79c
 8001c08:	0800a7a4 	.word	0x0800a7a4

08001c0c <SendACK>:


void SendACK()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	switch(uartCmdState)
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <SendACK+0x128>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b14      	cmp	r3, #20
 8001c16:	f200 808b 	bhi.w	8001d30 <SendACK+0x124>
 8001c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <SendACK+0x14>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c75 	.word	0x08001c75
 8001c24:	08001c7d 	.word	0x08001c7d
 8001c28:	08001c8b 	.word	0x08001c8b
 8001c2c:	08001c9b 	.word	0x08001c9b
 8001c30:	08001cab 	.word	0x08001cab
 8001c34:	08001cbb 	.word	0x08001cbb
 8001c38:	08001ccb 	.word	0x08001ccb
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cdb 	.word	0x08001cdb
 8001c44:	08001ce1 	.word	0x08001ce1
 8001c48:	08001ce7 	.word	0x08001ce7
 8001c4c:	08001cef 	.word	0x08001cef
 8001c50:	08001cf7 	.word	0x08001cf7
 8001c54:	08001cff 	.word	0x08001cff
 8001c58:	08001d07 	.word	0x08001d07
 8001c5c:	08001d0f 	.word	0x08001d0f
 8001c60:	08001d17 	.word	0x08001d17
 8001c64:	08001d1f 	.word	0x08001d1f
 8001c68:	08001d27 	.word	0x08001d27
 8001c6c:	08001d2f 	.word	0x08001d2f
 8001c70:	08001d2f 	.word	0x08001d2f
	{
		case cmd_0:

			progState = P_IDLE_START;
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <SendACK+0x12c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]

			break;
 8001c7a:	e059      	b.n	8001d30 <SendACK+0x124>

		case cmd_1:

			progState = P_WORK;
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <SendACK+0x12c>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 100;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <SendACK+0x130>)
 8001c84:	2264      	movs	r2, #100	@ 0x64
 8001c86:	811a      	strh	r2, [r3, #8]

			break;
 8001c88:	e052      	b.n	8001d30 <SendACK+0x124>

		case cmd_2:

			progState = P_WORK;
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d38 <SendACK+0x12c>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 300;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <SendACK+0x130>)
 8001c92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c96:	811a      	strh	r2, [r3, #8]


			break;
 8001c98:	e04a      	b.n	8001d30 <SendACK+0x124>

		case cmd_3:

			progState = P_WORK;
 8001c9a:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <SendACK+0x12c>)
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 500;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <SendACK+0x130>)
 8001ca2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ca6:	811a      	strh	r2, [r3, #8]

			break;
 8001ca8:	e042      	b.n	8001d30 <SendACK+0x124>

		case cmd_4:

			PPM = ReadGasSensor();
 8001caa:	f7ff fae6 	bl	800127a <ReadGasSensor>
 8001cae:	eef0 7a40 	vmov.f32	s15, s0
 8001cb2:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <SendACK+0x134>)
 8001cb4:	edc3 7a00 	vstr	s15, [r3]

			break;
 8001cb8:	e03a      	b.n	8001d30 <SendACK+0x124>

		case cmd_5:

			UART_TransmitFloat(PPM);
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <SendACK+0x134>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	f000 f870 	bl	8001da8 <UART_TransmitFloat>

			break;
 8001cc8:	e032      	b.n	8001d30 <SendACK+0x124>


		case cmd_6:

			UART_TransmitString(FAN_ON);
 8001cca:	481e      	ldr	r0, [pc, #120]	@ (8001d44 <SendACK+0x138>)
 8001ccc:	f000 f83e 	bl	8001d4c <UART_TransmitString>

			break;
 8001cd0:	e02e      	b.n	8001d30 <SendACK+0x124>

		case cmd_7:

			UART_TransmitString(FAN_OFF);
 8001cd2:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <SendACK+0x13c>)
 8001cd4:	f000 f83a 	bl	8001d4c <UART_TransmitString>

			break;
 8001cd8:	e02a      	b.n	8001d30 <SendACK+0x124>


		case cmd_8:

			AlarmON();
 8001cda:	f7ff fa0b 	bl	80010f4 <AlarmON>

			break;
 8001cde:	e027      	b.n	8001d30 <SendACK+0x124>

		case cmd_9:

			AlarmOFF();
 8001ce0:	f7ff fa12 	bl	8001108 <AlarmOFF>

			break;
 8001ce4:	e024      	b.n	8001d30 <SendACK+0x124>

		case cmd_10:

			LED_Drive(true);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fb1c 	bl	8001324 <LED_Drive>

			break;
 8001cec:	e020      	b.n	8001d30 <SendACK+0x124>

		case cmd_11:

			LED_Drive(false);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fb18 	bl	8001324 <LED_Drive>

			break;
 8001cf4:	e01c      	b.n	8001d30 <SendACK+0x124>


		case cmd_12:

			SetIndicatorLEDsNum(0);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff f9de 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001cfc:	e018      	b.n	8001d30 <SendACK+0x124>

		case cmd_13:

			SetIndicatorLEDsNum(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7ff f9da 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d04:	e014      	b.n	8001d30 <SendACK+0x124>

		case cmd_14:

			SetIndicatorLEDsNum(2);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f7ff f9d6 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d0c:	e010      	b.n	8001d30 <SendACK+0x124>

		case cmd_15:

			SetIndicatorLEDsNum(3);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f7ff f9d2 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d14:	e00c      	b.n	8001d30 <SendACK+0x124>


		case cmd_16:

			SetIndicatorLEDsNum(4);
 8001d16:	2004      	movs	r0, #4
 8001d18:	f7ff f9ce 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d1c:	e008      	b.n	8001d30 <SendACK+0x124>

		case cmd_17:

			SetIndicatorLEDsNum(5);
 8001d1e:	2005      	movs	r0, #5
 8001d20:	f7ff f9ca 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d24:	e004      	b.n	8001d30 <SendACK+0x124>


		case cmd_18:

			SetIndicatorLEDsNum(6);
 8001d26:	2006      	movs	r0, #6
 8001d28:	f7ff f9c6 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001d2c:	e000      	b.n	8001d30 <SendACK+0x124>

		case cmd_19:
			// reserved

			break;
 8001d2e:	bf00      	nop

			// reserved

			break;
	}
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000039e 	.word	0x2000039e
 8001d38:	2000014c 	.word	0x2000014c
 8001d3c:	200000ec 	.word	0x200000ec
 8001d40:	20000398 	.word	0x20000398
 8001d44:	200000c4 	.word	0x200000c4
 8001d48:	200000d0 	.word	0x200000d0

08001d4c <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fabb 	bl	80002d0 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	480e      	ldr	r0, [pc, #56]	@ (8001da0 <UART_TransmitString+0x54>)
 8001d66:	f003 fcaf 	bl	80056c8 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001da4 <UART_TransmitString+0x58>)
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4611      	mov	r1, r2
 8001d74:	8019      	strh	r1, [r3, #0]
 8001d76:	3302      	adds	r3, #2
 8001d78:	0c12      	lsrs	r2, r2, #16
 8001d7a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe faa5 	bl	80002d0 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f107 010c 	add.w	r1, r7, #12
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <UART_TransmitString+0x54>)
 8001d94:	f003 fc98 	bl	80056c8 <HAL_UART_Transmit>
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000045c 	.word	0x2000045c
 8001da4:	0800a7a8 	.word	0x0800a7a8

08001da8 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b090      	sub	sp, #64	@ 0x40
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbf8 	bl	80005a8 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f107 000c 	add.w	r0, r7, #12
 8001dc0:	490a      	ldr	r1, [pc, #40]	@ (8001dec <UART_TransmitFloat+0x44>)
 8001dc2:	f005 f835 	bl	8006e30 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa80 	bl	80002d0 <strlen>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f107 010c 	add.w	r1, r7, #12
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <UART_TransmitFloat+0x48>)
 8001dde:	f003 fc73 	bl	80056c8 <HAL_UART_Transmit>
}
 8001de2:	bf00      	nop
 8001de4:	3740      	adds	r7, #64	@ 0x40
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0800a7ac 	.word	0x0800a7ac
 8001df0:	2000045c 	.word	0x2000045c

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f001 f837 	bl	8002e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f816 	bl	8001e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f000 f94c 	bl	800209c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001e04:	f000 f882 	bl	8001f0c <MX_ADC3_Init>
  MX_CRC_Init();
 8001e08:	f000 f8d2 	bl	8001fb0 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001e0c:	f000 f916 	bl	800203c <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001e10:	f000 f8f0 	bl	8001ff4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <main+0x34>)
 8001e16:	f003 f98b 	bl	8005130 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 8001e1a:	f7ff fc5d 	bl	80016d8 <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 8001e1e:	f7ff fc67 	bl	80016f0 <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e22:	bf00      	nop
 8001e24:	e7fd      	b.n	8001e22 <main+0x2e>
 8001e26:	bf00      	nop
 8001e28:	20000410 	.word	0x20000410

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b094      	sub	sp, #80	@ 0x50
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0320 	add.w	r3, r7, #32
 8001e36:	2230      	movs	r2, #48	@ 0x30
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f005 f85b 	bl	8006ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e50:	f002 f83c 	bl	8003ecc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	4a2a      	ldr	r2, [pc, #168]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <SystemClock_Config+0xd8>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <SystemClock_Config+0xdc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <SystemClock_Config+0xdc>)
 8001e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <SystemClock_Config+0xdc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e98:	2319      	movs	r3, #25
 8001e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e9c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 f86c 	bl	8003f8c <HAL_RCC_OscConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001eba:	f000 fd4b 	bl	8002954 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ebe:	f002 f815 	bl	8003eec <HAL_PWREx_EnableOverDrive>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ec8:	f000 fd44 	bl	8002954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ed8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2106      	movs	r1, #6
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 faf2 	bl	80044d4 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ef6:	f000 fd2d 	bl	8002954 <Error_Handler>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3750      	adds	r7, #80	@ 0x50
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000

08001f0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f20:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <MX_ADC3_Init+0x9c>)
 8001f22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f4e:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <MX_ADC3_Init+0xa0>)
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f6e:	f000 ffd9 	bl	8002f24 <HAL_ADC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f78:	f000 fcec 	bl	8002954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_ADC3_Init+0x98>)
 8001f8e:	f001 f973 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f98:	f000 fcdc 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200003a4 	.word	0x200003a4
 8001fa8:	40012200 	.word	0x40012200
 8001fac:	0f000001 	.word	0x0f000001

08001fb0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff0 <MX_CRC_Init+0x40>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_CRC_Init+0x3c>)
 8001fda:	f001 fcaf 	bl	800393c <HAL_CRC_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001fe4:	f000 fcb6 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200003ec 	.word	0x200003ec
 8001ff0:	40023000 	.word	0x40023000

08001ff4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_TIM11_Init+0x40>)
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8002038 <MX_TIM11_Init+0x44>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <MX_TIM11_Init+0x40>)
 8002000:	f640 026f 	movw	r2, #2159	@ 0x86f
 8002004:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_TIM11_Init+0x40>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_TIM11_Init+0x40>)
 800200e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002012:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002014:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <MX_TIM11_Init+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_TIM11_Init+0x40>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <MX_TIM11_Init+0x40>)
 8002022:	f003 f82d 	bl	8005080 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800202c:	f000 fc92 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000410 	.word	0x20000410
 8002038:	40014800 	.word	0x40014800

0800203c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002042:	4a15      	ldr	r2, [pc, #84]	@ (8002098 <MX_USART1_UART_Init+0x5c>)
 8002044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_USART1_UART_Init+0x58>)
 8002080:	f003 fad4 	bl	800562c <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800208a:	f000 fc63 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000045c 	.word	0x2000045c
 8002098:	40011000 	.word	0x40011000

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b090      	sub	sp, #64	@ 0x40
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	4baf      	ldr	r3, [pc, #700]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4aae      	ldr	r2, [pc, #696]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4bac      	ldr	r3, [pc, #688]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ca:	4ba9      	ldr	r3, [pc, #676]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4aa8      	ldr	r2, [pc, #672]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4ba3      	ldr	r3, [pc, #652]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4aa2      	ldr	r2, [pc, #648]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b9d      	ldr	r3, [pc, #628]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a9c      	ldr	r2, [pc, #624]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b9a      	ldr	r3, [pc, #616]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b97      	ldr	r3, [pc, #604]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a96      	ldr	r2, [pc, #600]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b94      	ldr	r3, [pc, #592]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b91      	ldr	r3, [pc, #580]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a90      	ldr	r2, [pc, #576]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b8e      	ldr	r3, [pc, #568]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002142:	4b8b      	ldr	r3, [pc, #556]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a8a      	ldr	r2, [pc, #552]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800215a:	4b85      	ldr	r3, [pc, #532]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a84      	ldr	r2, [pc, #528]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b82      	ldr	r3, [pc, #520]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002172:	4b7f      	ldr	r3, [pc, #508]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a7e      	ldr	r2, [pc, #504]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b7c      	ldr	r3, [pc, #496]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800218a:	4b79      	ldr	r3, [pc, #484]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a78      	ldr	r2, [pc, #480]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002190:	f043 0320 	orr.w	r3, r3, #32
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b76      	ldr	r3, [pc, #472]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a2:	4b73      	ldr	r3, [pc, #460]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a72      	ldr	r2, [pc, #456]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b70      	ldr	r3, [pc, #448]	@ (8002370 <MX_GPIO_Init+0x2d4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2110      	movs	r1, #16
 80021be:	486d      	ldr	r0, [pc, #436]	@ (8002374 <MX_GPIO_Init+0x2d8>)
 80021c0:	f001 fe6a 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	2120      	movs	r1, #32
 80021c8:	486b      	ldr	r0, [pc, #428]	@ (8002378 <MX_GPIO_Init+0x2dc>)
 80021ca:	f001 fe65 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210d      	movs	r1, #13
 80021d2:	486a      	ldr	r0, [pc, #424]	@ (800237c <MX_GPIO_Init+0x2e0>)
 80021d4:	f001 fe60 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	2108      	movs	r1, #8
 80021dc:	4868      	ldr	r0, [pc, #416]	@ (8002380 <MX_GPIO_Init+0x2e4>)
 80021de:	f001 fe5b 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021e8:	4864      	ldr	r0, [pc, #400]	@ (800237c <MX_GPIO_Init+0x2e0>)
 80021ea:	f001 fe55 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 80021f4:	4863      	ldr	r0, [pc, #396]	@ (8002384 <MX_GPIO_Init+0x2e8>)
 80021f6:	f001 fe4f 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2140      	movs	r1, #64	@ 0x40
 80021fe:	4862      	ldr	r0, [pc, #392]	@ (8002388 <MX_GPIO_Init+0x2ec>)
 8002200:	f001 fe4a 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	21c8      	movs	r1, #200	@ 0xc8
 8002208:	4860      	ldr	r0, [pc, #384]	@ (800238c <MX_GPIO_Init+0x2f0>)
 800220a:	f001 fe45 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800220e:	2310      	movs	r3, #16
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221e:	230e      	movs	r3, #14
 8002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002226:	4619      	mov	r1, r3
 8002228:	4859      	ldr	r0, [pc, #356]	@ (8002390 <MX_GPIO_Init+0x2f4>)
 800222a:	f001 fc71 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800222e:	2308      	movs	r3, #8
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800223e:	4619      	mov	r1, r3
 8002240:	4853      	ldr	r0, [pc, #332]	@ (8002390 <MX_GPIO_Init+0x2f4>)
 8002242:	f001 fc65 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002246:	2304      	movs	r3, #4
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002256:	2309      	movs	r3, #9
 8002258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800225e:	4619      	mov	r1, r3
 8002260:	484b      	ldr	r0, [pc, #300]	@ (8002390 <MX_GPIO_Init+0x2f4>)
 8002262:	f001 fc55 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002266:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002278:	230b      	movs	r3, #11
 800227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002280:	4619      	mov	r1, r3
 8002282:	4842      	ldr	r0, [pc, #264]	@ (800238c <MX_GPIO_Init+0x2f0>)
 8002284:	f001 fc44 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002288:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800229a:	230c      	movs	r3, #12
 800229c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a2:	4619      	mov	r1, r3
 80022a4:	483a      	ldr	r0, [pc, #232]	@ (8002390 <MX_GPIO_Init+0x2f4>)
 80022a6:	f001 fc33 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80022aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b0:	2312      	movs	r3, #18
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022bc:	2304      	movs	r3, #4
 80022be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c4:	4619      	mov	r1, r3
 80022c6:	482b      	ldr	r0, [pc, #172]	@ (8002374 <MX_GPIO_Init+0x2d8>)
 80022c8:	f001 fc22 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 80022cc:	2310      	movs	r3, #16
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022d4:	2302      	movs	r3, #2
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4824      	ldr	r0, [pc, #144]	@ (8002374 <MX_GPIO_Init+0x2d8>)
 80022e4:	f001 fc14 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80022f8:	2308      	movs	r3, #8
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	481d      	ldr	r0, [pc, #116]	@ (8002378 <MX_GPIO_Init+0x2dc>)
 8002304:	f001 fc04 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002308:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800231a:	230c      	movs	r3, #12
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002322:	4619      	mov	r1, r3
 8002324:	4818      	ldr	r0, [pc, #96]	@ (8002388 <MX_GPIO_Init+0x2ec>)
 8002326:	f001 fbf3 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800232a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800233c:	2301      	movs	r3, #1
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002344:	4619      	mov	r1, r3
 8002346:	4813      	ldr	r0, [pc, #76]	@ (8002394 <MX_GPIO_Init+0x2f8>)
 8002348:	f001 fbe2 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800234c:	2360      	movs	r3, #96	@ 0x60
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800235c:	230d      	movs	r3, #13
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002364:	4619      	mov	r1, r3
 8002366:	480a      	ldr	r0, [pc, #40]	@ (8002390 <MX_GPIO_Init+0x2f4>)
 8002368:	f001 fbd2 	bl	8003b10 <HAL_GPIO_Init>
 800236c:	e014      	b.n	8002398 <MX_GPIO_Init+0x2fc>
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400
 8002378:	40020c00 	.word	0x40020c00
 800237c:	40022000 	.word	0x40022000
 8002380:	40022800 	.word	0x40022800
 8002384:	40021c00 	.word	0x40021c00
 8002388:	40020800 	.word	0x40020800
 800238c:	40021800 	.word	0x40021800
 8002390:	40021000 	.word	0x40021000
 8002394:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002398:	2340      	movs	r3, #64	@ 0x40
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80023a8:	230a      	movs	r3, #10
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80023ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	48bc      	ldr	r0, [pc, #752]	@ (80026a4 <MX_GPIO_Init+0x608>)
 80023b4:	f001 fbac 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80023b8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ca:	230c      	movs	r3, #12
 80023cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023d2:	4619      	mov	r1, r3
 80023d4:	48b4      	ldr	r0, [pc, #720]	@ (80026a8 <MX_GPIO_Init+0x60c>)
 80023d6:	f001 fb9b 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80023da:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023ec:	230e      	movs	r3, #14
 80023ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80023f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f4:	4619      	mov	r1, r3
 80023f6:	48ad      	ldr	r0, [pc, #692]	@ (80026ac <MX_GPIO_Init+0x610>)
 80023f8:	f001 fb8a 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240e:	4619      	mov	r1, r3
 8002410:	48a6      	ldr	r0, [pc, #664]	@ (80026ac <MX_GPIO_Init+0x610>)
 8002412:	f001 fb7d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002416:	2340      	movs	r3, #64	@ 0x40
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800241a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800241e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	48a1      	ldr	r0, [pc, #644]	@ (80026b0 <MX_GPIO_Init+0x614>)
 800242c:	f001 fb70 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002430:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002442:	230c      	movs	r3, #12
 8002444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4898      	ldr	r0, [pc, #608]	@ (80026b0 <MX_GPIO_Init+0x614>)
 800244e:	f001 fb5f 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002452:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002464:	230a      	movs	r3, #10
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4891      	ldr	r0, [pc, #580]	@ (80026b4 <MX_GPIO_Init+0x618>)
 8002470:	f001 fb4e 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002474:	23f0      	movs	r3, #240	@ 0xf0
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002484:	230a      	movs	r3, #10
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800248c:	4619      	mov	r1, r3
 800248e:	488a      	ldr	r0, [pc, #552]	@ (80026b8 <MX_GPIO_Init+0x61c>)
 8002490:	f001 fb3e 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002494:	23f7      	movs	r3, #247	@ 0xf7
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024a4:	230e      	movs	r3, #14
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4883      	ldr	r0, [pc, #524]	@ (80026bc <MX_GPIO_Init+0x620>)
 80024b0:	f001 fb2e 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80024b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024c6:	2309      	movs	r3, #9
 80024c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4875      	ldr	r0, [pc, #468]	@ (80026a8 <MX_GPIO_Init+0x60c>)
 80024d2:	f001 fb1d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80024d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80024e8:	230a      	movs	r3, #10
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	486d      	ldr	r0, [pc, #436]	@ (80026a8 <MX_GPIO_Init+0x60c>)
 80024f4:	f001 fb0c 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024f8:	2320      	movs	r3, #32
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	4868      	ldr	r0, [pc, #416]	@ (80026b0 <MX_GPIO_Init+0x614>)
 8002510:	f001 fafe 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002514:	2308      	movs	r3, #8
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002524:	230d      	movs	r3, #13
 8002526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	4860      	ldr	r0, [pc, #384]	@ (80026b0 <MX_GPIO_Init+0x614>)
 8002530:	f001 faee 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002534:	230d      	movs	r3, #13
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800253c:	2302      	movs	r3, #2
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002548:	4619      	mov	r1, r3
 800254a:	485b      	ldr	r0, [pc, #364]	@ (80026b8 <MX_GPIO_Init+0x61c>)
 800254c:	f001 fae0 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	4856      	ldr	r0, [pc, #344]	@ (80026c0 <MX_GPIO_Init+0x624>)
 8002566:	f001 fad3 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800256a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800257c:	230c      	movs	r3, #12
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	484f      	ldr	r0, [pc, #316]	@ (80026c4 <MX_GPIO_Init+0x628>)
 8002588:	f001 fac2 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800258c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800259e:	230e      	movs	r3, #14
 80025a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025a6:	4619      	mov	r1, r3
 80025a8:	4843      	ldr	r0, [pc, #268]	@ (80026b8 <MX_GPIO_Init+0x61c>)
 80025aa:	f001 fab1 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80025ae:	2308      	movs	r3, #8
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	483d      	ldr	r0, [pc, #244]	@ (80026bc <MX_GPIO_Init+0x620>)
 80025c6:	f001 faa3 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80025ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80025dc:	230d      	movs	r3, #13
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e4:	4619      	mov	r1, r3
 80025e6:	4830      	ldr	r0, [pc, #192]	@ (80026a8 <MX_GPIO_Init+0x60c>)
 80025e8:	f001 fa92 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80025ec:	2310      	movs	r3, #16
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f0:	2300      	movs	r3, #0
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025fc:	4619      	mov	r1, r3
 80025fe:	482c      	ldr	r0, [pc, #176]	@ (80026b0 <MX_GPIO_Init+0x614>)
 8002600:	f001 fa86 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002604:	2304      	movs	r3, #4
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002614:	230c      	movs	r3, #12
 8002616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800261c:	4619      	mov	r1, r3
 800261e:	4824      	ldr	r0, [pc, #144]	@ (80026b0 <MX_GPIO_Init+0x614>)
 8002620:	f001 fa76 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002624:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002632:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4823      	ldr	r0, [pc, #140]	@ (80026c8 <MX_GPIO_Init+0x62c>)
 800263a:	f001 fa69 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800263e:	2302      	movs	r3, #2
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800264e:	2305      	movs	r3, #5
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002656:	4619      	mov	r1, r3
 8002658:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <MX_GPIO_Init+0x61c>)
 800265a:	f001 fa59 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800265e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002674:	4619      	mov	r1, r3
 8002676:	4810      	ldr	r0, [pc, #64]	@ (80026b8 <MX_GPIO_Init+0x61c>)
 8002678:	f001 fa4a 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800267c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800268e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002692:	4619      	mov	r1, r3
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <MX_GPIO_Init+0x62c>)
 8002696:	f001 fa3b 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800269a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	e013      	b.n	80026cc <MX_GPIO_Init+0x630>
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40021800 	.word	0x40021800
 80026ac:	40022400 	.word	0x40022400
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40022800 	.word	0x40022800
 80026c0:	40020800 	.word	0x40020800
 80026c4:	40021400 	.word	0x40021400
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026d6:	230d      	movs	r3, #13
 80026d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026de:	4619      	mov	r1, r3
 80026e0:	4895      	ldr	r0, [pc, #596]	@ (8002938 <MX_GPIO_Init+0x89c>)
 80026e2:	f001 fa15 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80026e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026f0:	2302      	movs	r3, #2
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f8:	4619      	mov	r1, r3
 80026fa:	4890      	ldr	r0, [pc, #576]	@ (800293c <MX_GPIO_Init+0x8a0>)
 80026fc:	f001 fa08 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002712:	2301      	movs	r3, #1
 8002714:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800271a:	4619      	mov	r1, r3
 800271c:	4888      	ldr	r0, [pc, #544]	@ (8002940 <MX_GPIO_Init+0x8a4>)
 800271e:	f001 f9f7 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002728:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800272c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002736:	4619      	mov	r1, r3
 8002738:	4880      	ldr	r0, [pc, #512]	@ (800293c <MX_GPIO_Init+0x8a0>)
 800273a:	f001 f9e9 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800274e:	2308      	movs	r3, #8
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002756:	4619      	mov	r1, r3
 8002758:	487a      	ldr	r0, [pc, #488]	@ (8002944 <MX_GPIO_Init+0x8a8>)
 800275a:	f001 f9d9 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 800275e:	2340      	movs	r3, #64	@ 0x40
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002762:	2301      	movs	r3, #1
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002766:	2302      	movs	r3, #2
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002772:	4619      	mov	r1, r3
 8002774:	4873      	ldr	r0, [pc, #460]	@ (8002944 <MX_GPIO_Init+0x8a8>)
 8002776:	f001 f9cb 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800277a:	2328      	movs	r3, #40	@ 0x28
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800278a:	230c      	movs	r3, #12
 800278c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800278e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002792:	4619      	mov	r1, r3
 8002794:	4868      	ldr	r0, [pc, #416]	@ (8002938 <MX_GPIO_Init+0x89c>)
 8002796:	f001 f9bb 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 800279a:	23c0      	movs	r3, #192	@ 0xc0
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027a2:	2302      	movs	r3, #2
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ae:	4619      	mov	r1, r3
 80027b0:	4865      	ldr	r0, [pc, #404]	@ (8002948 <MX_GPIO_Init+0x8ac>)
 80027b2:	f001 f9ad 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80027b6:	2308      	movs	r3, #8
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c6:	230c      	movs	r3, #12
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	485c      	ldr	r0, [pc, #368]	@ (8002944 <MX_GPIO_Init+0x8a8>)
 80027d2:	f001 f99d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027d6:	2332      	movs	r3, #50	@ 0x32
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027e6:	230b      	movs	r3, #11
 80027e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ee:	4619      	mov	r1, r3
 80027f0:	4854      	ldr	r0, [pc, #336]	@ (8002944 <MX_GPIO_Init+0x8a8>)
 80027f2:	f001 f98d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f6:	2304      	movs	r3, #4
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002806:	2309      	movs	r3, #9
 8002808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800280e:	4619      	mov	r1, r3
 8002810:	484e      	ldr	r0, [pc, #312]	@ (800294c <MX_GPIO_Init+0x8b0>)
 8002812:	f001 f97d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002816:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002828:	2309      	movs	r3, #9
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	4847      	ldr	r0, [pc, #284]	@ (8002950 <MX_GPIO_Init+0x8b4>)
 8002834:	f001 f96c 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002838:	2308      	movs	r3, #8
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	483e      	ldr	r0, [pc, #248]	@ (8002948 <MX_GPIO_Init+0x8ac>)
 8002850:	f001 f95e 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002854:	2304      	movs	r3, #4
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	4838      	ldr	r0, [pc, #224]	@ (8002948 <MX_GPIO_Init+0x8ac>)
 8002868:	f001 f952 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800286c:	2386      	movs	r3, #134	@ 0x86
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800287c:	230b      	movs	r3, #11
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002884:	4619      	mov	r1, r3
 8002886:	482e      	ldr	r0, [pc, #184]	@ (8002940 <MX_GPIO_Init+0x8a4>)
 8002888:	f001 f942 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800288c:	2350      	movs	r3, #80	@ 0x50
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800289c:	230d      	movs	r3, #13
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a4:	4619      	mov	r1, r3
 80028a6:	4826      	ldr	r0, [pc, #152]	@ (8002940 <MX_GPIO_Init+0x8a4>)
 80028a8:	f001 f932 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80028ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b2:	2312      	movs	r3, #18
 80028b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028be:	2304      	movs	r3, #4
 80028c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c6:	4619      	mov	r1, r3
 80028c8:	481b      	ldr	r0, [pc, #108]	@ (8002938 <MX_GPIO_Init+0x89c>)
 80028ca:	f001 f921 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80028ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028e0:	230a      	movs	r3, #10
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028e8:	4619      	mov	r1, r3
 80028ea:	4818      	ldr	r0, [pc, #96]	@ (800294c <MX_GPIO_Init+0x8b0>)
 80028ec:	f001 f910 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 80028f0:	2340      	movs	r3, #64	@ 0x40
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028f8:	2302      	movs	r3, #2
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002904:	4619      	mov	r1, r3
 8002906:	480c      	ldr	r0, [pc, #48]	@ (8002938 <MX_GPIO_Init+0x89c>)
 8002908:	f001 f902 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800290c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800291e:	2305      	movs	r3, #5
 8002920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002926:	4619      	mov	r1, r3
 8002928:	4808      	ldr	r0, [pc, #32]	@ (800294c <MX_GPIO_Init+0x8b0>)
 800292a:	f001 f8f1 	bl	8003b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800292e:	bf00      	nop
 8002930:	3740      	adds	r7, #64	@ 0x40
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021c00 	.word	0x40021c00
 800293c:	40022000 	.word	0x40022000
 8002940:	40020000 	.word	0x40020000
 8002944:	40020800 	.word	0x40020800
 8002948:	40021800 	.word	0x40021800
 800294c:	40020400 	.word	0x40020400
 8002950:	40020c00 	.word	0x40020c00

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <Error_Handler+0x8>

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <HAL_MspInit+0x4c>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_MspInit+0x4c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_MspInit+0x4c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_MspInit+0x4c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	f06f 0001 	mvn.w	r0, #1
 800299e:	f000 ff96 	bl	80038ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a21      	ldr	r2, [pc, #132]	@ (8002a54 <HAL_ADC_MspInit+0xa4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d13c      	bne.n	8002a4c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029d2:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_ADC_MspInit+0xa8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a1a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002a1e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <HAL_ADC_MspInit+0xac>)
 8002a30:	f001 f86e 	bl	8003b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002a34:	2301      	movs	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <HAL_ADC_MspInit+0xb0>)
 8002a48:	f001 f862 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	@ 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40012200 	.word	0x40012200
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40020000 	.word	0x40020000

08002a64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <HAL_CRC_MspInit+0x38>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10b      	bne.n	8002a8e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <HAL_CRC_MspInit+0x3c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023000 	.word	0x40023000
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x44>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d113      	bne.n	8002ade <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_TIM_Base_MspInit+0x48>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <HAL_TIM_Base_MspInit+0x48>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_TIM_Base_MspInit+0x48>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201a      	movs	r0, #26
 8002ad4:	f000 fefb 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ad8:	201a      	movs	r0, #26
 8002ada:	f000 ff14 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40014800 	.word	0x40014800
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ac      	sub	sp, #176	@ 0xb0
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b08:	f107 0318 	add.w	r3, r7, #24
 8002b0c:	2284      	movs	r2, #132	@ 0x84
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f9f0 	bl	8006ef6 <memset>
  if(huart->Instance==USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a32      	ldr	r2, [pc, #200]	@ (8002be4 <HAL_UART_MspInit+0xf4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d15c      	bne.n	8002bda <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b20:	2340      	movs	r3, #64	@ 0x40
 8002b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b24:	2300      	movs	r3, #0
 8002b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 feb7 	bl	80048a0 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b38:	f7ff ff0c 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	4a29      	ldr	r2, [pc, #164]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b48:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b60:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4810      	ldr	r0, [pc, #64]	@ (8002bec <HAL_UART_MspInit+0xfc>)
 8002baa:	f000 ffb1 	bl	8003b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4806      	ldr	r0, [pc, #24]	@ (8002bf0 <HAL_UART_MspInit+0x100>)
 8002bd6:	f000 ff9b 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	37b0      	adds	r7, #176	@ 0xb0
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4a:	f000 f94b 	bl	8002ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002c5a:	f002 fae1 	bl	8005220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000410 	.word	0x20000410

08002c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_kill>:

int _kill(int pid, int sig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c82:	f004 f98b 	bl	8006f9c <__errno>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2216      	movs	r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_exit>:

void _exit (int status)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ffe7 	bl	8002c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002caa:	bf00      	nop
 8002cac:	e7fd      	b.n	8002caa <_exit+0x12>

08002cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e00a      	b.n	8002cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cc0:	f3af 8000 	nop.w
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	60ba      	str	r2, [r7, #8]
 8002ccc:	b2ca      	uxtb	r2, r1
 8002cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dbf0      	blt.n	8002cc0 <_read+0x12>
  }

  return len;
 8002cde:	687b      	ldr	r3, [r7, #4]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e009      	b.n	8002d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	60ba      	str	r2, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	dbf1      	blt.n	8002cfa <_write+0x12>
  }
  return len;
 8002d16:	687b      	ldr	r3, [r7, #4]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_close>:

int _close(int file)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d48:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_isatty>:

int _isatty(int file)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d60:	2301      	movs	r3, #1
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f004 f8f0 	bl	8006f9c <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	@ (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20050000 	.word	0x20050000
 8002de8:	00000400 	.word	0x00000400
 8002dec:	200004e4 	.word	0x200004e4
 8002df0:	20000638 	.word	0x20000638

08002df4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <SystemInit+0x20>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <SystemInit+0x20>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	@ (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	@ (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	@ (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	@ (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	@ (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e42:	f7ff ffd7 	bl	8002df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f004 f8af 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7fe ffd3 	bl	8001df4 <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8002e5c:	0800ac08 	.word	0x0800ac08
  ldr r2, =_sbss
 8002e60:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002e64:	20000638 	.word	0x20000638

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>

08002e6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6e:	2003      	movs	r0, #3
 8002e70:	f000 fd22 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f000 f805 	bl	8002e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e7a:	f7ff fd71 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_InitTick+0x54>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <HAL_InitTick+0x58>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd3d 	bl	8003922 <HAL_SYSTICK_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00e      	b.n	8002ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d80a      	bhi.n	8002ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f000 fd05 	bl	80038ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ec4:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <HAL_InitTick+0x5c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000154 	.word	0x20000154
 8002edc:	2000015c 	.word	0x2000015c
 8002ee0:	20000158 	.word	0x20000158

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	2000015c 	.word	0x2000015c
 8002f08:	200004e8 	.word	0x200004e8

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	200004e8 	.word	0x200004e8

08002f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e031      	b.n	8002f9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fd34 	bl	80029b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_ADC_Init+0x84>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fad6 	bl	8003524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f8e:	e001      	b.n	8002f94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	ffffeefd 	.word	0xffffeefd

08002fac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Start+0x1a>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0ad      	b.n	8003122 <HAL_ADC_Start+0x176>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d018      	beq.n	800300e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002fec:	4b50      	ldr	r3, [pc, #320]	@ (8003130 <HAL_ADC_Start+0x184>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a50      	ldr	r2, [pc, #320]	@ (8003134 <HAL_ADC_Start+0x188>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9a      	lsrs	r2, r3, #18
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003000:	e002      	b.n	8003008 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3b01      	subs	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f9      	bne.n	8003002 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d175      	bne.n	8003108 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003020:	4b45      	ldr	r3, [pc, #276]	@ (8003138 <HAL_ADC_Start+0x18c>)
 8003022:	4013      	ands	r3, r2
 8003024:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003042:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003056:	d106      	bne.n	8003066 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	f023 0206 	bic.w	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	@ 0x44
 8003064:	e002      	b.n	800306c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800307c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_ADC_Start+0x190>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d143      	bne.n	8003120 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e03a      	b.n	8003120 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a24      	ldr	r2, [pc, #144]	@ (8003140 <HAL_ADC_Start+0x194>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10e      	bne.n	80030d2 <HAL_ADC_Start+0x126>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030d0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HAL_ADC_Start+0x190>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d120      	bne.n	8003120 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_ADC_Start+0x198>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d11b      	bne.n	8003120 <HAL_ADC_Start+0x174>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	e00b      	b.n	8003120 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000154 	.word	0x20000154
 8003134:	431bde83 	.word	0x431bde83
 8003138:	fffff8fe 	.word	0xfffff8fe
 800313c:	40012300 	.word	0x40012300
 8003140:	40012000 	.word	0x40012000
 8003144:	40012200 	.word	0x40012200

08003148 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003164:	d113      	bne.n	800318e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d10b      	bne.n	800318e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e063      	b.n	8003256 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800318e:	f7ff febd 	bl	8002f0c <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003194:	e021      	b.n	80031da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d01d      	beq.n	80031da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_ADC_PollForConversion+0x6c>
 80031a4:	f7ff feb2 	bl	8002f0c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d212      	bcs.n	80031da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d00b      	beq.n	80031da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e03d      	b.n	8003256 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d1d6      	bne.n	8003196 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0212 	mvn.w	r2, #18
 80031f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d123      	bne.n	8003254 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11f      	bne.n	8003254 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e136      	b.n	8003502 <HAL_ADC_ConfigChannel+0x28a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d93a      	bls.n	800331a <HAL_ADC_ConfigChannel+0xa2>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032ac:	d035      	beq.n	800331a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68d9      	ldr	r1, [r3, #12]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	3b1e      	subs	r3, #30
 80032c4:	2207      	movs	r2, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a8d      	ldr	r2, [pc, #564]	@ (8003510 <HAL_ADC_ConfigChannel+0x298>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	061a      	lsls	r2, r3, #24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032f2:	e035      	b.n	8003360 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68d9      	ldr	r1, [r3, #12]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	4603      	mov	r3, r0
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4403      	add	r3, r0
 800330c:	3b1e      	subs	r3, #30
 800330e:	409a      	lsls	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003318:	e022      	b.n	8003360 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43da      	mvns	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	400a      	ands	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	4603      	mov	r3, r0
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4403      	add	r3, r0
 8003356:	409a      	lsls	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b06      	cmp	r3, #6
 8003366:	d824      	bhi.n	80033b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b05      	subs	r3, #5
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43da      	mvns	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	400a      	ands	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b05      	subs	r3, #5
 80033a4:	fa00 f203 	lsl.w	r2, r0, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80033b0:	e04c      	b.n	800344c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d824      	bhi.n	8003404 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b23      	subs	r3, #35	@ 0x23
 80033cc:	221f      	movs	r2, #31
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	400a      	ands	r2, r1
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b23      	subs	r3, #35	@ 0x23
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
 8003402:	e023      	b.n	800344c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b41      	subs	r3, #65	@ 0x41
 8003416:	221f      	movs	r2, #31
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43da      	mvns	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	400a      	ands	r2, r1
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	3b41      	subs	r3, #65	@ 0x41
 8003440:	fa00 f203 	lsl.w	r2, r0, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a30      	ldr	r2, [pc, #192]	@ (8003514 <HAL_ADC_ConfigChannel+0x29c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10a      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1f4>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800345e:	d105      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003460:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a2c      	ldr	r2, [pc, #176]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 8003466:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800346a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a28      	ldr	r2, [pc, #160]	@ (8003514 <HAL_ADC_ConfigChannel+0x29c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10f      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x21e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b12      	cmp	r3, #18
 800347c:	d10b      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a25      	ldr	r2, [pc, #148]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 8003484:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003488:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800348a:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a22      	ldr	r2, [pc, #136]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 8003490:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003494:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_ADC_ConfigChannel+0x29c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d12b      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x280>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <HAL_ADC_ConfigChannel+0x298>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x23a>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b11      	cmp	r3, #17
 80034b0:	d122      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 80034b8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80034bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80034be:	4b16      	ldr	r3, [pc, #88]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4a15      	ldr	r2, [pc, #84]	@ (8003518 <HAL_ADC_ConfigChannel+0x2a0>)
 80034c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <HAL_ADC_ConfigChannel+0x298>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <HAL_ADC_ConfigChannel+0x2a4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a11      	ldr	r2, [pc, #68]	@ (8003520 <HAL_ADC_ConfigChannel+0x2a8>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9a      	lsrs	r2, r3, #18
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f9      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	10000012 	.word	0x10000012
 8003514:	40012000 	.word	0x40012000
 8003518:	40012300 	.word	0x40012300
 800351c:	20000154 	.word	0x20000154
 8003520:	431bde83 	.word	0x431bde83

08003524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800352c:	4b78      	ldr	r3, [pc, #480]	@ (8003710 <ADC_Init+0x1ec>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a77      	ldr	r2, [pc, #476]	@ (8003710 <ADC_Init+0x1ec>)
 8003532:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003536:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003538:	4b75      	ldr	r3, [pc, #468]	@ (8003710 <ADC_Init+0x1ec>)
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4973      	ldr	r1, [pc, #460]	@ (8003710 <ADC_Init+0x1ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800359a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	4a58      	ldr	r2, [pc, #352]	@ (8003714 <ADC_Init+0x1f0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d022      	beq.n	80035fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e00f      	b.n	800361e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800360c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800361c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0202 	bic.w	r2, r2, #2
 800362c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	005a      	lsls	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800365a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800366a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	3b01      	subs	r3, #1
 8003678:	035a      	lsls	r2, r3, #13
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	e007      	b.n	8003694 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	051a      	lsls	r2, r3, #20
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036d6:	025a      	lsls	r2, r3, #9
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	029a      	lsls	r2, r3, #10
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40012300 	.word	0x40012300
 8003714:	0f000001 	.word	0x0f000001

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <__NVIC_SetPriorityGrouping+0x40>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003746:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <__NVIC_SetPriorityGrouping+0x40>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00
 800375c:	05fa0000 	.word	0x05fa0000

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	@ (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	@ (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	@ (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff3e 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff31 	bl	800377c <__NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <SysTick_Config>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e054      	b.n	80039f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7f5b      	ldrb	r3, [r3, #29]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff f880 	bl	8002a64 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	791b      	ldrb	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10c      	bne.n	800398c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a22      	ldr	r2, [pc, #136]	@ (8003a00 <HAL_CRC_Init+0xc4>)
 8003978:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0218 	bic.w	r2, r2, #24
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	e00c      	b.n	80039a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6899      	ldr	r1, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	461a      	mov	r2, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f834 	bl	8003a04 <HAL_CRCEx_Polynomial_Set>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e028      	b.n	80039f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	795b      	ldrb	r3, [r3, #5]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	611a      	str	r2, [r3, #16]
 80039b8:	e004      	b.n	80039c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6912      	ldr	r2, [r2, #16]
 80039c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	04c11db7 	.word	0x04c11db7

08003a04 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a14:	231f      	movs	r3, #31
 8003a16:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a18:	bf00      	nop
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	613a      	str	r2, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b18      	cmp	r3, #24
 8003a3c:	d846      	bhi.n	8003acc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003ad3 	.word	0x08003ad3
 8003a48:	08003acd 	.word	0x08003acd
 8003a4c:	08003acd 	.word	0x08003acd
 8003a50:	08003acd 	.word	0x08003acd
 8003a54:	08003acd 	.word	0x08003acd
 8003a58:	08003acd 	.word	0x08003acd
 8003a5c:	08003acd 	.word	0x08003acd
 8003a60:	08003acd 	.word	0x08003acd
 8003a64:	08003ac1 	.word	0x08003ac1
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003acd 	.word	0x08003acd
 8003a70:	08003acd 	.word	0x08003acd
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003acd 	.word	0x08003acd
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003acd 	.word	0x08003acd
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003acd 	.word	0x08003acd
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003acd 	.word	0x08003acd
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003aa9 	.word	0x08003aa9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d913      	bls.n	8003ad6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ab2:	e010      	b.n	8003ad6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b07      	cmp	r3, #7
 8003ab8:	d90f      	bls.n	8003ada <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003abe:	e00c      	b.n	8003ada <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	d90b      	bls.n	8003ade <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003aca:	e008      	b.n	8003ade <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	e006      	b.n	8003ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e004      	b.n	8003ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ade:	bf00      	nop
  }
  if (status == HAL_OK)
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 0118 	bic.w	r1, r3, #24
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	e175      	b.n	8003e1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b30:	2201      	movs	r2, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	f040 8164 	bne.w	8003e16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d005      	beq.n	8003b66 <HAL_GPIO_Init+0x56>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d130      	bne.n	8003bc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 0201 	and.w	r2, r3, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d017      	beq.n	8003c04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d123      	bne.n	8003c58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	08da      	lsrs	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3208      	adds	r2, #8
 8003c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	220f      	movs	r2, #15
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	08da      	lsrs	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3208      	adds	r2, #8
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80be 	beq.w	8003e16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9a:	4b66      	ldr	r3, [pc, #408]	@ (8003e34 <HAL_GPIO_Init+0x324>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4a65      	ldr	r2, [pc, #404]	@ (8003e34 <HAL_GPIO_Init+0x324>)
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <HAL_GPIO_Init+0x324>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cb2:	4a61      	ldr	r2, [pc, #388]	@ (8003e38 <HAL_GPIO_Init+0x328>)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	@ (8003e3c <HAL_GPIO_Init+0x32c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d037      	beq.n	8003d4e <HAL_GPIO_Init+0x23e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a57      	ldr	r2, [pc, #348]	@ (8003e40 <HAL_GPIO_Init+0x330>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d031      	beq.n	8003d4a <HAL_GPIO_Init+0x23a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a56      	ldr	r2, [pc, #344]	@ (8003e44 <HAL_GPIO_Init+0x334>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02b      	beq.n	8003d46 <HAL_GPIO_Init+0x236>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a55      	ldr	r2, [pc, #340]	@ (8003e48 <HAL_GPIO_Init+0x338>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d025      	beq.n	8003d42 <HAL_GPIO_Init+0x232>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a54      	ldr	r2, [pc, #336]	@ (8003e4c <HAL_GPIO_Init+0x33c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x22e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a53      	ldr	r2, [pc, #332]	@ (8003e50 <HAL_GPIO_Init+0x340>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x22a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a52      	ldr	r2, [pc, #328]	@ (8003e54 <HAL_GPIO_Init+0x344>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x226>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_GPIO_Init+0x348>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x222>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a50      	ldr	r2, [pc, #320]	@ (8003e5c <HAL_GPIO_Init+0x34c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x21e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4f      	ldr	r2, [pc, #316]	@ (8003e60 <HAL_GPIO_Init+0x350>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x21a>
 8003d26:	2309      	movs	r3, #9
 8003d28:	e012      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d2a:	230a      	movs	r3, #10
 8003d2c:	e010      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	e00e      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e00c      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d36:	2306      	movs	r3, #6
 8003d38:	e00a      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d3a:	2305      	movs	r3, #5
 8003d3c:	e008      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d3e:	2304      	movs	r3, #4
 8003d40:	e006      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d42:	2303      	movs	r3, #3
 8003d44:	e004      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e002      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_GPIO_Init+0x240>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f002 0203 	and.w	r2, r2, #3
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d60:	4935      	ldr	r1, [pc, #212]	@ (8003e38 <HAL_GPIO_Init+0x328>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d92:	4a34      	ldr	r2, [pc, #208]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d98:	4b32      	ldr	r3, [pc, #200]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dbc:	4a29      	ldr	r2, [pc, #164]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dc2:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <HAL_GPIO_Init+0x354>)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	f67f ae86 	bls.w	8003b30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3724      	adds	r7, #36	@ 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020c00 	.word	0x40020c00
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40021400 	.word	0x40021400
 8003e54:	40021800 	.word	0x40021800
 8003e58:	40021c00 	.word	0x40021c00
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40022400 	.word	0x40022400
 8003e64:	40013c00 	.word	0x40013c00

08003e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e001      	b.n	8003e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40007000 	.word	0x40007000

08003eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b23      	ldr	r3, [pc, #140]	@ (8003f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a22      	ldr	r2, [pc, #136]	@ (8003f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f02:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f1a:	f7fe fff7 	bl	8002f0c <HAL_GetTick>
 8003f1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f20:	e009      	b.n	8003f36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f22:	f7fe fff3 	bl	8002f0c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f30:	d901      	bls.n	8003f36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e022      	b.n	8003f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f42:	d1ee      	bne.n	8003f22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f44:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0f      	ldr	r2, [pc, #60]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f50:	f7fe ffdc 	bl	8002f0c <HAL_GetTick>
 8003f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f56:	e009      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f58:	f7fe ffd8 	bl	8002f0c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f66:	d901      	bls.n	8003f6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e007      	b.n	8003f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f78:	d1ee      	bne.n	8003f58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40007000 	.word	0x40007000

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e291      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb0:	4b96      	ldr	r3, [pc, #600]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbc:	4b93      	ldr	r3, [pc, #588]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d112      	bne.n	8003fee <HAL_RCC_OscConfig+0x62>
 8003fc8:	4b90      	ldr	r3, [pc, #576]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <HAL_RCC_OscConfig+0x130>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d168      	bne.n	80040bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e26b      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x7a>
 8003ff8:	4b84      	ldr	r3, [pc, #528]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a83      	ldr	r2, [pc, #524]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e02e      	b.n	8004064 <HAL_RCC_OscConfig+0xd8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x9c>
 800400e:	4b7f      	ldr	r3, [pc, #508]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7e      	ldr	r2, [pc, #504]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b7c      	ldr	r3, [pc, #496]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7b      	ldr	r2, [pc, #492]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xd8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0xc0>
 8004032:	4b76      	ldr	r3, [pc, #472]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a75      	ldr	r2, [pc, #468]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b73      	ldr	r3, [pc, #460]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a72      	ldr	r2, [pc, #456]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xd8>
 800404c:	4b6f      	ldr	r3, [pc, #444]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6e      	ldr	r2, [pc, #440]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b6c      	ldr	r3, [pc, #432]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6b      	ldr	r2, [pc, #428]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe ff4e 	bl	8002f0c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe ff4a 	bl	8002f0c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	@ 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e21f      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b61      	ldr	r3, [pc, #388]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xe8>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe ff3a 	bl	8002f0c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe ff36 	bl	8002f0c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	@ 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e20b      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	4b57      	ldr	r3, [pc, #348]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x110>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d069      	beq.n	800419e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ca:	4b50      	ldr	r3, [pc, #320]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b4d      	ldr	r3, [pc, #308]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x190>
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x17a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1df      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b41      	ldr	r3, [pc, #260]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	493d      	ldr	r1, [pc, #244]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e040      	b.n	800419e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d023      	beq.n	800416c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b39      	ldr	r3, [pc, #228]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a38      	ldr	r2, [pc, #224]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe feec 	bl	8002f0c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe fee8 	bl	8002f0c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1bd      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	4b30      	ldr	r3, [pc, #192]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4929      	ldr	r1, [pc, #164]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
 800416a:	e018      	b.n	800419e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416c:	4b27      	ldr	r3, [pc, #156]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a26      	ldr	r2, [pc, #152]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fec8 	bl	8002f0c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fe fec4 	bl	8002f0c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e199      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d038      	beq.n	800421c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d019      	beq.n	80041e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	4a15      	ldr	r2, [pc, #84]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fe fea5 	bl	8002f0c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe fea1 	bl	8002f0c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e176      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x23a>
 80041e4:	e01a      	b.n	800421c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ea:	4a08      	ldr	r2, [pc, #32]	@ (800420c <HAL_RCC_OscConfig+0x280>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fe fe8b 	bl	8002f0c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fe fe87 	bl	8002f0c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d903      	bls.n	8004210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e15c      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
 800420c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	4b91      	ldr	r3, [pc, #580]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ee      	bne.n	80041fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a4 	beq.w	8004372 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b8b      	ldr	r3, [pc, #556]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	4b88      	ldr	r3, [pc, #544]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4a87      	ldr	r2, [pc, #540]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	@ 0x40
 8004242:	4b85      	ldr	r3, [pc, #532]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004252:	4b82      	ldr	r3, [pc, #520]	@ (800445c <HAL_RCC_OscConfig+0x4d0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800425e:	4b7f      	ldr	r3, [pc, #508]	@ (800445c <HAL_RCC_OscConfig+0x4d0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7e      	ldr	r2, [pc, #504]	@ (800445c <HAL_RCC_OscConfig+0x4d0>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fe fe4f 	bl	8002f0c <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fe fe4b 	bl	8002f0c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	@ 0x64
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e120      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004284:	4b75      	ldr	r3, [pc, #468]	@ (800445c <HAL_RCC_OscConfig+0x4d0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31a>
 8004298:	4b6f      	ldr	r3, [pc, #444]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a6e      	ldr	r2, [pc, #440]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e02d      	b.n	8004302 <HAL_RCC_OscConfig+0x376>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x33c>
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a69      	ldr	r2, [pc, #420]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b67      	ldr	r3, [pc, #412]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a66      	ldr	r2, [pc, #408]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e01c      	b.n	8004302 <HAL_RCC_OscConfig+0x376>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d10c      	bne.n	80042ea <HAL_RCC_OscConfig+0x35e>
 80042d0:	4b61      	ldr	r3, [pc, #388]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a60      	ldr	r2, [pc, #384]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
 80042dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e0:	4a5d      	ldr	r2, [pc, #372]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e8:	e00b      	b.n	8004302 <HAL_RCC_OscConfig+0x376>
 80042ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a5a      	ldr	r2, [pc, #360]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	4b58      	ldr	r3, [pc, #352]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a57      	ldr	r2, [pc, #348]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fe fdff 	bl	8002f0c <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	e00a      	b.n	8004328 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fe fdfb 	bl	8002f0c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0ce      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ee      	beq.n	8004312 <HAL_RCC_OscConfig+0x386>
 8004334:	e014      	b.n	8004360 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fe fde9 	bl	8002f0c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fe fde5 	bl	8002f0c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0b8      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004354:	4b40      	ldr	r3, [pc, #256]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ee      	bne.n	800433e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004366:	4b3c      	ldr	r3, [pc, #240]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	4a3b      	ldr	r2, [pc, #236]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800436c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a4 	beq.w	80044c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800437c:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d06b      	beq.n	8004460 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d149      	bne.n	8004424 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004390:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a30      	ldr	r2, [pc, #192]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe fdb6 	bl	8002f0c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe fdb2 	bl	8002f0c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e087      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b28      	ldr	r3, [pc, #160]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	4313      	orrs	r3, r2
 80043e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f0:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fe fd86 	bl	8002f0c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fe fd82 	bl	8002f0c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e057      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x478>
 8004422:	e04f      	b.n	80044c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0b      	ldr	r2, [pc, #44]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe fd6c 	bl	8002f0c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe fd68 	bl	8002f0c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e03d      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x4ac>
 8004456:	e035      	b.n	80044c4 <HAL_RCC_OscConfig+0x538>
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x544>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d028      	beq.n	80044c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d121      	bne.n	80044c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d11a      	bne.n	80044c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004496:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0d0      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d910      	bls.n	800451c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b67      	ldr	r3, [pc, #412]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	4965      	ldr	r1, [pc, #404]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b63      	ldr	r3, [pc, #396]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b8      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004534:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a58      	ldr	r2, [pc, #352]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800453e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800454c:	4b53      	ldr	r3, [pc, #332]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a52      	ldr	r2, [pc, #328]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b50      	ldr	r3, [pc, #320]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	494d      	ldr	r1, [pc, #308]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d040      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d115      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e073      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	4b3d      	ldr	r3, [pc, #244]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06b      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b6:	4b39      	ldr	r3, [pc, #228]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0203 	bic.w	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4936      	ldr	r1, [pc, #216]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fe fca0 	bl	8002f0c <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f7fe fc9c 	bl	8002f0c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e053      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 020c 	and.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1eb      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f8:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d210      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b24      	ldr	r3, [pc, #144]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 020f 	bic.w	r2, r3, #15
 800460e:	4922      	ldr	r1, [pc, #136]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e032      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4916      	ldr	r1, [pc, #88]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004652:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	490e      	ldr	r1, [pc, #56]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004666:	f000 f821 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800466a:	4602      	mov	r2, r0
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	490a      	ldr	r1, [pc, #40]	@ (80046a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004678:	5ccb      	ldrb	r3, [r1, r3]
 800467a:	fa22 f303 	lsr.w	r3, r2, r3
 800467e:	4a09      	ldr	r2, [pc, #36]	@ (80046a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fe fbfc 	bl	8002e84 <HAL_InitTick>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023c00 	.word	0x40023c00
 800469c:	40023800 	.word	0x40023800
 80046a0:	0800a7b4 	.word	0x0800a7b4
 80046a4:	20000154 	.word	0x20000154
 80046a8:	20000158 	.word	0x20000158

080046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b090      	sub	sp, #64	@ 0x40
 80046b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046bc:	2300      	movs	r3, #0
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c4:	4b59      	ldr	r3, [pc, #356]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d00d      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x40>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	f200 80a1 	bhi.w	8004818 <HAL_RCC_GetSysClockFreq+0x16c>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x34>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046de:	e09b      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046e4:	e09b      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e6:	4b53      	ldr	r3, [pc, #332]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ea:	e098      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046f6:	4b4d      	ldr	r3, [pc, #308]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	4b4a      	ldr	r3, [pc, #296]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	2200      	movs	r2, #0
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	627a      	str	r2, [r7, #36]	@ 0x24
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004714:	2100      	movs	r1, #0
 8004716:	4b47      	ldr	r3, [pc, #284]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004718:	fb03 f201 	mul.w	r2, r3, r1
 800471c:	2300      	movs	r3, #0
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	4413      	add	r3, r2
 8004724:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004726:	fba0 1202 	umull	r1, r2, r0, r2
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	460a      	mov	r2, r1
 800472e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	4413      	add	r3, r2
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	2200      	movs	r2, #0
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	61fa      	str	r2, [r7, #28]
 800473e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004746:	f7fc facf 	bl	8000ce8 <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4613      	mov	r3, r2
 8004750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004752:	e053      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	2200      	movs	r2, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	617a      	str	r2, [r7, #20]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004766:	f04f 0b00 	mov.w	fp, #0
 800476a:	4652      	mov	r2, sl
 800476c:	465b      	mov	r3, fp
 800476e:	f04f 0000 	mov.w	r0, #0
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	0159      	lsls	r1, r3, #5
 8004778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477c:	0150      	lsls	r0, r2, #5
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	ebb2 080a 	subs.w	r8, r2, sl
 8004786:	eb63 090b 	sbc.w	r9, r3, fp
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800479a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800479e:	ebb2 0408 	subs.w	r4, r2, r8
 80047a2:	eb63 0509 	sbc.w	r5, r3, r9
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	00eb      	lsls	r3, r5, #3
 80047b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b4:	00e2      	lsls	r2, r4, #3
 80047b6:	4614      	mov	r4, r2
 80047b8:	461d      	mov	r5, r3
 80047ba:	eb14 030a 	adds.w	r3, r4, sl
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	eb45 030b 	adc.w	r3, r5, fp
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d2:	4629      	mov	r1, r5
 80047d4:	028b      	lsls	r3, r1, #10
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047dc:	4621      	mov	r1, r4
 80047de:	028a      	lsls	r2, r1, #10
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	2200      	movs	r2, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	60fa      	str	r2, [r7, #12]
 80047ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f0:	f7fc fa7a 	bl	8000ce8 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4613      	mov	r3, r2
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800480c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004816:	e002      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004820:	4618      	mov	r0, r3
 8004822:	3740      	adds	r7, #64	@ 0x40
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	00f42400 	.word	0x00f42400
 8004834:	017d7840 	.word	0x017d7840

08004838 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_RCC_GetHCLKFreq+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000154 	.word	0x20000154

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004854:	f7ff fff0 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0a9b      	lsrs	r3, r3, #10
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4903      	ldr	r1, [pc, #12]	@ (8004874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	0800a7c4 	.word	0x0800a7c4

08004878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800487c:	f7ff ffdc 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	0b5b      	lsrs	r3, r3, #13
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4903      	ldr	r1, [pc, #12]	@ (800489c <HAL_RCC_GetPCLK2Freq+0x24>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40023800 	.word	0x40023800
 800489c:	0800a7c4 	.word	0x0800a7c4

080048a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d012      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048c8:	4b69      	ldr	r3, [pc, #420]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a68      	ldr	r2, [pc, #416]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048d2:	6093      	str	r3, [r2, #8]
 80048d4:	4b66      	ldr	r3, [pc, #408]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048dc:	4964      	ldr	r1, [pc, #400]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048ea:	2301      	movs	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d017      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004900:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	4959      	ldr	r1, [pc, #356]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d017      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004936:	4b4e      	ldr	r3, [pc, #312]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800493c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	494a      	ldr	r1, [pc, #296]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004954:	d101      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004962:	2301      	movs	r3, #1
 8004964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004972:	2301      	movs	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 808b 	beq.w	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b3a      	ldr	r3, [pc, #232]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004990:	4b37      	ldr	r3, [pc, #220]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800499c:	4b35      	ldr	r3, [pc, #212]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a34      	ldr	r2, [pc, #208]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7fe fab0 	bl	8002f0c <HAL_GetTick>
 80049ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fe faac 	bl	8002f0c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	@ 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e357      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ce:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d035      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d02e      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a02:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a14:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d114      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fe fa74 	bl	8002f0c <HAL_GetTick>
 8004a24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fe fa70 	bl	8002f0c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e319      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a56:	d111      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a66:	400b      	ands	r3, r1
 8004a68:	4901      	ldr	r1, [pc, #4]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40007000 	.word	0x40007000
 8004a78:	0ffffcff 	.word	0x0ffffcff
 8004a7c:	4baa      	ldr	r3, [pc, #680]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4aa9      	ldr	r2, [pc, #676]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a82:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a86:	6093      	str	r3, [r2, #8]
 8004a88:	4ba7      	ldr	r3, [pc, #668]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	49a4      	ldr	r1, [pc, #656]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aac:	4a9e      	ldr	r2, [pc, #632]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	4999      	ldr	r1, [pc, #612]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad4:	4b94      	ldr	r3, [pc, #592]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ada:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae2:	4991      	ldr	r1, [pc, #580]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af6:	4b8c      	ldr	r3, [pc, #560]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b04:	4988      	ldr	r1, [pc, #544]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b18:	4b83      	ldr	r3, [pc, #524]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b26:	4980      	ldr	r1, [pc, #512]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	4977      	ldr	r1, [pc, #476]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b5c:	4b72      	ldr	r3, [pc, #456]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	496f      	ldr	r1, [pc, #444]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	f023 020c 	bic.w	r2, r3, #12
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8c:	4966      	ldr	r1, [pc, #408]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ba0:	4b61      	ldr	r3, [pc, #388]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bae:	495e      	ldr	r1, [pc, #376]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bc2:	4b59      	ldr	r3, [pc, #356]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	4955      	ldr	r1, [pc, #340]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004be4:	4b50      	ldr	r3, [pc, #320]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf2:	494d      	ldr	r1, [pc, #308]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c06:	4b48      	ldr	r3, [pc, #288]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	4944      	ldr	r1, [pc, #272]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c28:	4b3f      	ldr	r3, [pc, #252]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c36:	493c      	ldr	r1, [pc, #240]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c4a:	4b37      	ldr	r3, [pc, #220]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c58:	4933      	ldr	r1, [pc, #204]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c7a:	492b      	ldr	r1, [pc, #172]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d011      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c8e:	4b26      	ldr	r3, [pc, #152]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c9c:	4922      	ldr	r1, [pc, #136]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cce:	4b16      	ldr	r3, [pc, #88]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cdc:	4912      	ldr	r1, [pc, #72]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d00:	4909      	ldr	r1, [pc, #36]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d006      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80d9 	beq.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d1c:	4b02      	ldr	r3, [pc, #8]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a01      	ldr	r2, [pc, #4]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d26:	e001      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2e:	f7fe f8ed 	bl	8002f0c <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d36:	f7fe f8e9 	bl	8002f0c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b64      	cmp	r3, #100	@ 0x64
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e194      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d48:	4b6c      	ldr	r3, [pc, #432]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d021      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11d      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d68:	4b64      	ldr	r3, [pc, #400]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d76:	4b61      	ldr	r3, [pc, #388]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7c:	0e1b      	lsrs	r3, r3, #24
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	019a      	lsls	r2, r3, #6
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	071b      	lsls	r3, r3, #28
 8004d9c:	4957      	ldr	r1, [pc, #348]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d004      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02e      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dce:	d129      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd6:	0c1b      	lsrs	r3, r3, #16
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004de4:	0f1b      	lsrs	r3, r3, #28
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	019a      	lsls	r2, r3, #6
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	071b      	lsls	r3, r3, #28
 8004e04:	493d      	ldr	r1, [pc, #244]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e12:	f023 021f 	bic.w	r2, r3, #31
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4937      	ldr	r1, [pc, #220]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01d      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e30:	4b32      	ldr	r3, [pc, #200]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e44:	0f1b      	lsrs	r3, r3, #28
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	019a      	lsls	r2, r3, #6
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	071b      	lsls	r3, r3, #28
 8004e64:	4925      	ldr	r1, [pc, #148]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	019a      	lsls	r2, r3, #6
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	071b      	lsls	r3, r3, #28
 8004e94:	4919      	ldr	r1, [pc, #100]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e9c:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fe f830 	bl	8002f0c <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eb0:	f7fe f82c 	bl	8002f0c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	@ 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e0d7      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 80cd 	bne.w	8005070 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fe f813 	bl	8002f0c <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eea:	f7fe f80f 	bl	8002f0c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b64      	cmp	r3, #100	@ 0x64
 8004ef6:	d903      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e0ba      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004efc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f00:	4b5e      	ldr	r3, [pc, #376]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f0c:	d0ed      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d02e      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d12a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f36:	4b51      	ldr	r3, [pc, #324]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f44:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	0f1b      	lsrs	r3, r3, #28
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	019a      	lsls	r2, r3, #6
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	061b      	lsls	r3, r3, #24
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	071b      	lsls	r3, r3, #28
 8004f6a:	4944      	ldr	r1, [pc, #272]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f72:	4b42      	ldr	r3, [pc, #264]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	493d      	ldr	r1, [pc, #244]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d022      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa0:	d11d      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fa2:	4b36      	ldr	r3, [pc, #216]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fb0:	4b32      	ldr	r3, [pc, #200]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	0f1b      	lsrs	r3, r3, #28
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	019a      	lsls	r2, r3, #6
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	4929      	ldr	r1, [pc, #164]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fea:	4b24      	ldr	r3, [pc, #144]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	0e1b      	lsrs	r3, r3, #24
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ff8:	4b20      	ldr	r3, [pc, #128]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	019a      	lsls	r2, r3, #6
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	431a      	orrs	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	071b      	lsls	r3, r3, #28
 800501e:	4917      	ldr	r1, [pc, #92]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005026:	4b15      	ldr	r3, [pc, #84]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800502c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	4911      	ldr	r1, [pc, #68]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800503c:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0e      	ldr	r2, [pc, #56]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fd ff60 	bl	8002f0c <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005050:	f7fd ff5c 	bl	8002f0c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	@ 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e007      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800506a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800506e:	d1ef      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e049      	b.n	8005126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd fcfc 	bl	8002aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 f9f6 	bl	80054b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e054      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <HAL_TIM_Base_Start_IT+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a22      	ldr	r2, [pc, #136]	@ (8005204 <HAL_TIM_Base_Start_IT+0xd4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	@ (8005208 <HAL_TIM_Base_Start_IT+0xd8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <HAL_TIM_Base_Start_IT+0xdc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_TIM_Base_Start_IT+0xe0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <HAL_TIM_Base_Start_IT+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_TIM_Base_Start_IT+0xe8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d115      	bne.n	80051dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_TIM_Base_Start_IT+0xec>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d015      	beq.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c8:	d011      	beq.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e008      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e000      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800
 800521c:	00010007 	.word	0x00010007

08005220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0202 	mvn.w	r2, #2
 800524c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f905 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8f7 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f908 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b04      	cmp	r3, #4
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0204 	mvn.w	r2, #4
 80052a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8db 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8cd 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8de 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0208 	mvn.w	r2, #8
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2204      	movs	r2, #4
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8b1 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8a3 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8b4 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0210 	mvn.w	r2, #16
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2208      	movs	r2, #8
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f887 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f879 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f88a 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0201 	mvn.w	r2, #1
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fa6c 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ae:	2b80      	cmp	r3, #128	@ 0x80
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053bc:	2b80      	cmp	r3, #128	@ 0x80
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f91a 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b80      	cmp	r3, #128	@ 0x80
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f90d 	bl	8005618 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f838 	bl	800549a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d10e      	bne.n	8005456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b20      	cmp	r3, #32
 8005444:	d107      	bne.n	8005456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0220 	mvn.w	r2, #32
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8cd 	bl	80055f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a40      	ldr	r2, [pc, #256]	@ (80055c4 <TIM_Base_SetConfig+0x114>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3d      	ldr	r2, [pc, #244]	@ (80055c8 <TIM_Base_SetConfig+0x118>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <TIM_Base_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3b      	ldr	r2, [pc, #236]	@ (80055d0 <TIM_Base_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3a      	ldr	r2, [pc, #232]	@ (80055d4 <TIM_Base_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2f      	ldr	r2, [pc, #188]	@ (80055c4 <TIM_Base_SetConfig+0x114>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d027      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <TIM_Base_SetConfig+0x118>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d023      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2b      	ldr	r2, [pc, #172]	@ (80055cc <TIM_Base_SetConfig+0x11c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2a      	ldr	r2, [pc, #168]	@ (80055d0 <TIM_Base_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <TIM_Base_SetConfig+0x124>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d017      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a28      	ldr	r2, [pc, #160]	@ (80055d8 <TIM_Base_SetConfig+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <TIM_Base_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <TIM_Base_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a25      	ldr	r2, [pc, #148]	@ (80055e4 <TIM_Base_SetConfig+0x134>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a24      	ldr	r2, [pc, #144]	@ (80055e8 <TIM_Base_SetConfig+0x138>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a23      	ldr	r2, [pc, #140]	@ (80055ec <TIM_Base_SetConfig+0x13c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a0a      	ldr	r2, [pc, #40]	@ (80055c4 <TIM_Base_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_Base_SetConfig+0xf8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <TIM_Base_SetConfig+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d103      	bne.n	80055b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	615a      	str	r2, [r3, #20]
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800
 80055e4:	40001800 	.word	0x40001800
 80055e8:	40001c00 	.word	0x40001c00
 80055ec:	40002000 	.word	0x40002000

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e040      	b.n	80056c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fd fa4e 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	@ 0x24
 8005658:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8b0 	bl	80057d0 <UART_SetConfig>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e022      	b.n	80056c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fb08 	bl	8005c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fb8f 	bl	8005ddc <UART_CheckIdleState>
 80056be:	4603      	mov	r3, r0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	@ 0x28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d171      	bne.n	80057c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_UART_Transmit+0x24>
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e06a      	b.n	80057c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2221      	movs	r2, #33	@ 0x21
 80056fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fe:	f7fd fc05 	bl	8002f0c <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571c:	d108      	bne.n	8005730 <HAL_UART_Transmit+0x68>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d104      	bne.n	8005730 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e003      	b.n	8005738 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005738:	e02c      	b.n	8005794 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2200      	movs	r2, #0
 8005742:	2180      	movs	r1, #128	@ 0x80
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fb80 	bl	8005e4a <UART_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e038      	b.n	80057c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005768:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	3302      	adds	r3, #2
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e007      	b.n	8005782 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1cc      	bne.n	800573a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2140      	movs	r1, #64	@ 0x40
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fb4d 	bl	8005e4a <UART_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e005      	b.n	80057c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4ba6      	ldr	r3, [pc, #664]	@ (8005a94 <UART_SetConfig+0x2c4>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	430b      	orrs	r3, r1
 8005806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	430a      	orrs	r2, r1
 8005840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a94      	ldr	r2, [pc, #592]	@ (8005a98 <UART_SetConfig+0x2c8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d120      	bne.n	800588e <UART_SetConfig+0xbe>
 800584c:	4b93      	ldr	r3, [pc, #588]	@ (8005a9c <UART_SetConfig+0x2cc>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b03      	cmp	r3, #3
 8005858:	d816      	bhi.n	8005888 <UART_SetConfig+0xb8>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <UART_SetConfig+0x90>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005871 	.word	0x08005871
 8005864:	0800587d 	.word	0x0800587d
 8005868:	08005877 	.word	0x08005877
 800586c:	08005883 	.word	0x08005883
 8005870:	2301      	movs	r3, #1
 8005872:	77fb      	strb	r3, [r7, #31]
 8005874:	e150      	b.n	8005b18 <UART_SetConfig+0x348>
 8005876:	2302      	movs	r3, #2
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e14d      	b.n	8005b18 <UART_SetConfig+0x348>
 800587c:	2304      	movs	r3, #4
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e14a      	b.n	8005b18 <UART_SetConfig+0x348>
 8005882:	2308      	movs	r3, #8
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e147      	b.n	8005b18 <UART_SetConfig+0x348>
 8005888:	2310      	movs	r3, #16
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e144      	b.n	8005b18 <UART_SetConfig+0x348>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a83      	ldr	r2, [pc, #524]	@ (8005aa0 <UART_SetConfig+0x2d0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d132      	bne.n	80058fe <UART_SetConfig+0x12e>
 8005898:	4b80      	ldr	r3, [pc, #512]	@ (8005a9c <UART_SetConfig+0x2cc>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	d828      	bhi.n	80058f8 <UART_SetConfig+0x128>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0xdc>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058e1 	.word	0x080058e1
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	080058f9 	.word	0x080058f9
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	080058f9 	.word	0x080058f9
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	080058e7 	.word	0x080058e7
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	080058f9 	.word	0x080058f9
 80058dc:	080058f3 	.word	0x080058f3
 80058e0:	2300      	movs	r3, #0
 80058e2:	77fb      	strb	r3, [r7, #31]
 80058e4:	e118      	b.n	8005b18 <UART_SetConfig+0x348>
 80058e6:	2302      	movs	r3, #2
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e115      	b.n	8005b18 <UART_SetConfig+0x348>
 80058ec:	2304      	movs	r3, #4
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e112      	b.n	8005b18 <UART_SetConfig+0x348>
 80058f2:	2308      	movs	r3, #8
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e10f      	b.n	8005b18 <UART_SetConfig+0x348>
 80058f8:	2310      	movs	r3, #16
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e10c      	b.n	8005b18 <UART_SetConfig+0x348>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a68      	ldr	r2, [pc, #416]	@ (8005aa4 <UART_SetConfig+0x2d4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d120      	bne.n	800594a <UART_SetConfig+0x17a>
 8005908:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <UART_SetConfig+0x2cc>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005912:	2b30      	cmp	r3, #48	@ 0x30
 8005914:	d013      	beq.n	800593e <UART_SetConfig+0x16e>
 8005916:	2b30      	cmp	r3, #48	@ 0x30
 8005918:	d814      	bhi.n	8005944 <UART_SetConfig+0x174>
 800591a:	2b20      	cmp	r3, #32
 800591c:	d009      	beq.n	8005932 <UART_SetConfig+0x162>
 800591e:	2b20      	cmp	r3, #32
 8005920:	d810      	bhi.n	8005944 <UART_SetConfig+0x174>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <UART_SetConfig+0x15c>
 8005926:	2b10      	cmp	r3, #16
 8005928:	d006      	beq.n	8005938 <UART_SetConfig+0x168>
 800592a:	e00b      	b.n	8005944 <UART_SetConfig+0x174>
 800592c:	2300      	movs	r3, #0
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e0f2      	b.n	8005b18 <UART_SetConfig+0x348>
 8005932:	2302      	movs	r3, #2
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e0ef      	b.n	8005b18 <UART_SetConfig+0x348>
 8005938:	2304      	movs	r3, #4
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e0ec      	b.n	8005b18 <UART_SetConfig+0x348>
 800593e:	2308      	movs	r3, #8
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e0e9      	b.n	8005b18 <UART_SetConfig+0x348>
 8005944:	2310      	movs	r3, #16
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e0e6      	b.n	8005b18 <UART_SetConfig+0x348>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a56      	ldr	r2, [pc, #344]	@ (8005aa8 <UART_SetConfig+0x2d8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d120      	bne.n	8005996 <UART_SetConfig+0x1c6>
 8005954:	4b51      	ldr	r3, [pc, #324]	@ (8005a9c <UART_SetConfig+0x2cc>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800595e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005960:	d013      	beq.n	800598a <UART_SetConfig+0x1ba>
 8005962:	2bc0      	cmp	r3, #192	@ 0xc0
 8005964:	d814      	bhi.n	8005990 <UART_SetConfig+0x1c0>
 8005966:	2b80      	cmp	r3, #128	@ 0x80
 8005968:	d009      	beq.n	800597e <UART_SetConfig+0x1ae>
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d810      	bhi.n	8005990 <UART_SetConfig+0x1c0>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <UART_SetConfig+0x1a8>
 8005972:	2b40      	cmp	r3, #64	@ 0x40
 8005974:	d006      	beq.n	8005984 <UART_SetConfig+0x1b4>
 8005976:	e00b      	b.n	8005990 <UART_SetConfig+0x1c0>
 8005978:	2300      	movs	r3, #0
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0cc      	b.n	8005b18 <UART_SetConfig+0x348>
 800597e:	2302      	movs	r3, #2
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e0c9      	b.n	8005b18 <UART_SetConfig+0x348>
 8005984:	2304      	movs	r3, #4
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0c6      	b.n	8005b18 <UART_SetConfig+0x348>
 800598a:	2308      	movs	r3, #8
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e0c3      	b.n	8005b18 <UART_SetConfig+0x348>
 8005990:	2310      	movs	r3, #16
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e0c0      	b.n	8005b18 <UART_SetConfig+0x348>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a44      	ldr	r2, [pc, #272]	@ (8005aac <UART_SetConfig+0x2dc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d125      	bne.n	80059ec <UART_SetConfig+0x21c>
 80059a0:	4b3e      	ldr	r3, [pc, #248]	@ (8005a9c <UART_SetConfig+0x2cc>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ae:	d017      	beq.n	80059e0 <UART_SetConfig+0x210>
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059b4:	d817      	bhi.n	80059e6 <UART_SetConfig+0x216>
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ba:	d00b      	beq.n	80059d4 <UART_SetConfig+0x204>
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c0:	d811      	bhi.n	80059e6 <UART_SetConfig+0x216>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <UART_SetConfig+0x1fe>
 80059c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ca:	d006      	beq.n	80059da <UART_SetConfig+0x20a>
 80059cc:	e00b      	b.n	80059e6 <UART_SetConfig+0x216>
 80059ce:	2300      	movs	r3, #0
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e0a1      	b.n	8005b18 <UART_SetConfig+0x348>
 80059d4:	2302      	movs	r3, #2
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e09e      	b.n	8005b18 <UART_SetConfig+0x348>
 80059da:	2304      	movs	r3, #4
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e09b      	b.n	8005b18 <UART_SetConfig+0x348>
 80059e0:	2308      	movs	r3, #8
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e098      	b.n	8005b18 <UART_SetConfig+0x348>
 80059e6:	2310      	movs	r3, #16
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e095      	b.n	8005b18 <UART_SetConfig+0x348>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab0 <UART_SetConfig+0x2e0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d125      	bne.n	8005a42 <UART_SetConfig+0x272>
 80059f6:	4b29      	ldr	r3, [pc, #164]	@ (8005a9c <UART_SetConfig+0x2cc>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a04:	d017      	beq.n	8005a36 <UART_SetConfig+0x266>
 8005a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a0a:	d817      	bhi.n	8005a3c <UART_SetConfig+0x26c>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d00b      	beq.n	8005a2a <UART_SetConfig+0x25a>
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a16:	d811      	bhi.n	8005a3c <UART_SetConfig+0x26c>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <UART_SetConfig+0x254>
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a20:	d006      	beq.n	8005a30 <UART_SetConfig+0x260>
 8005a22:	e00b      	b.n	8005a3c <UART_SetConfig+0x26c>
 8005a24:	2301      	movs	r3, #1
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e076      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	77fb      	strb	r3, [r7, #31]
 8005a2e:	e073      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a30:	2304      	movs	r3, #4
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e070      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a36:	2308      	movs	r3, #8
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e06d      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e06a      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <UART_SetConfig+0x2e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d138      	bne.n	8005abe <UART_SetConfig+0x2ee>
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <UART_SetConfig+0x2cc>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a5a:	d017      	beq.n	8005a8c <UART_SetConfig+0x2bc>
 8005a5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a60:	d82a      	bhi.n	8005ab8 <UART_SetConfig+0x2e8>
 8005a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a66:	d00b      	beq.n	8005a80 <UART_SetConfig+0x2b0>
 8005a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6c:	d824      	bhi.n	8005ab8 <UART_SetConfig+0x2e8>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <UART_SetConfig+0x2aa>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a76:	d006      	beq.n	8005a86 <UART_SetConfig+0x2b6>
 8005a78:	e01e      	b.n	8005ab8 <UART_SetConfig+0x2e8>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e04b      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a80:	2302      	movs	r3, #2
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e048      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a86:	2304      	movs	r3, #4
 8005a88:	77fb      	strb	r3, [r7, #31]
 8005a8a:	e045      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e042      	b.n	8005b18 <UART_SetConfig+0x348>
 8005a92:	bf00      	nop
 8005a94:	efff69f3 	.word	0xefff69f3
 8005a98:	40011000 	.word	0x40011000
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40004400 	.word	0x40004400
 8005aa4:	40004800 	.word	0x40004800
 8005aa8:	40004c00 	.word	0x40004c00
 8005aac:	40005000 	.word	0x40005000
 8005ab0:	40011400 	.word	0x40011400
 8005ab4:	40007800 	.word	0x40007800
 8005ab8:	2310      	movs	r3, #16
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e02c      	b.n	8005b18 <UART_SetConfig+0x348>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a72      	ldr	r2, [pc, #456]	@ (8005c8c <UART_SetConfig+0x4bc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d125      	bne.n	8005b14 <UART_SetConfig+0x344>
 8005ac8:	4b71      	ldr	r3, [pc, #452]	@ (8005c90 <UART_SetConfig+0x4c0>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ace:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ad2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ad6:	d017      	beq.n	8005b08 <UART_SetConfig+0x338>
 8005ad8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005adc:	d817      	bhi.n	8005b0e <UART_SetConfig+0x33e>
 8005ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae2:	d00b      	beq.n	8005afc <UART_SetConfig+0x32c>
 8005ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae8:	d811      	bhi.n	8005b0e <UART_SetConfig+0x33e>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <UART_SetConfig+0x326>
 8005aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af2:	d006      	beq.n	8005b02 <UART_SetConfig+0x332>
 8005af4:	e00b      	b.n	8005b0e <UART_SetConfig+0x33e>
 8005af6:	2300      	movs	r3, #0
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e00d      	b.n	8005b18 <UART_SetConfig+0x348>
 8005afc:	2302      	movs	r3, #2
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e00a      	b.n	8005b18 <UART_SetConfig+0x348>
 8005b02:	2304      	movs	r3, #4
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e007      	b.n	8005b18 <UART_SetConfig+0x348>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e004      	b.n	8005b18 <UART_SetConfig+0x348>
 8005b0e:	2310      	movs	r3, #16
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e001      	b.n	8005b18 <UART_SetConfig+0x348>
 8005b14:	2310      	movs	r3, #16
 8005b16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b20:	d15b      	bne.n	8005bda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b22:	7ffb      	ldrb	r3, [r7, #31]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d828      	bhi.n	8005b7a <UART_SetConfig+0x3aa>
 8005b28:	a201      	add	r2, pc, #4	@ (adr r2, 8005b30 <UART_SetConfig+0x360>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005b5d 	.word	0x08005b5d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005b7b 	.word	0x08005b7b
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b7b 	.word	0x08005b7b
 8005b48:	08005b7b 	.word	0x08005b7b
 8005b4c:	08005b7b 	.word	0x08005b7b
 8005b50:	08005b73 	.word	0x08005b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fe fe7c 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8005b58:	61b8      	str	r0, [r7, #24]
        break;
 8005b5a:	e013      	b.n	8005b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b5c:	f7fe fe8c 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 8005b60:	61b8      	str	r0, [r7, #24]
        break;
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b64:	4b4b      	ldr	r3, [pc, #300]	@ (8005c94 <UART_SetConfig+0x4c4>)
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e00c      	b.n	8005b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6a:	f7fe fd9f 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8005b6e:	61b8      	str	r0, [r7, #24]
        break;
 8005b70:	e008      	b.n	8005b84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e004      	b.n	8005b84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	77bb      	strb	r3, [r7, #30]
        break;
 8005b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d074      	beq.n	8005c74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	005a      	lsls	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b0f      	cmp	r3, #15
 8005ba4:	d916      	bls.n	8005bd4 <UART_SetConfig+0x404>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bac:	d212      	bcs.n	8005bd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f023 030f 	bic.w	r3, r3, #15
 8005bb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	89fb      	ldrh	r3, [r7, #14]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	89fa      	ldrh	r2, [r7, #14]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	e04f      	b.n	8005c74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	77bb      	strb	r3, [r7, #30]
 8005bd8:	e04c      	b.n	8005c74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d828      	bhi.n	8005c32 <UART_SetConfig+0x462>
 8005be0:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <UART_SetConfig+0x418>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe fe20 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8005c10:	61b8      	str	r0, [r7, #24]
        break;
 8005c12:	e013      	b.n	8005c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fe30 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 8005c18:	61b8      	str	r0, [r7, #24]
        break;
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c94 <UART_SetConfig+0x4c4>)
 8005c1e:	61bb      	str	r3, [r7, #24]
        break;
 8005c20:	e00c      	b.n	8005c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe fd43 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8005c26:	61b8      	str	r0, [r7, #24]
        break;
 8005c28:	e008      	b.n	8005c3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c2e:	61bb      	str	r3, [r7, #24]
        break;
 8005c30:	e004      	b.n	8005c3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	77bb      	strb	r3, [r7, #30]
        break;
 8005c3a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	085a      	lsrs	r2, r3, #1
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b0f      	cmp	r3, #15
 8005c5a:	d909      	bls.n	8005c70 <UART_SetConfig+0x4a0>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c62:	d205      	bcs.n	8005c70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e001      	b.n	8005c74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c80:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40007c00 	.word	0x40007c00
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400

08005c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01a      	beq.n	8005dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d96:	d10a      	bne.n	8005dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dec:	f7fd f88e 	bl	8002f0c <HAL_GetTick>
 8005df0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0308 	and.w	r3, r3, #8
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10e      	bne.n	8005e1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f81b 	bl	8005e4a <UART_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e011      	b.n	8005e42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b09c      	sub	sp, #112	@ 0x70
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5a:	e0a7      	b.n	8005fac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	f000 80a3 	beq.w	8005fac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fd f851 	bl	8002f0c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d13f      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ea0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e6      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ece:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e068      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d050      	beq.n	8005fac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f18:	d148      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	613b      	str	r3, [r7, #16]
   return(result);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005f76:	623a      	str	r2, [r7, #32]
 8005f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	69f9      	ldr	r1, [r7, #28]
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e010      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	f43f af48 	beq.w	8005e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3770      	adds	r7, #112	@ 0x70
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <__cvt>:
 8005fd6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fda:	ec57 6b10 	vmov	r6, r7, d0
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	bfbb      	ittet	lt
 8005fe8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fec:	461f      	movlt	r7, r3
 8005fee:	2300      	movge	r3, #0
 8005ff0:	232d      	movlt	r3, #45	@ 0x2d
 8005ff2:	700b      	strb	r3, [r1, #0]
 8005ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ff6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ffa:	4691      	mov	r9, r2
 8005ffc:	f023 0820 	bic.w	r8, r3, #32
 8006000:	bfbc      	itt	lt
 8006002:	4632      	movlt	r2, r6
 8006004:	4616      	movlt	r6, r2
 8006006:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800600a:	d005      	beq.n	8006018 <__cvt+0x42>
 800600c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006010:	d100      	bne.n	8006014 <__cvt+0x3e>
 8006012:	3401      	adds	r4, #1
 8006014:	2102      	movs	r1, #2
 8006016:	e000      	b.n	800601a <__cvt+0x44>
 8006018:	2103      	movs	r1, #3
 800601a:	ab03      	add	r3, sp, #12
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	ab02      	add	r3, sp, #8
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	ec47 6b10 	vmov	d0, r6, r7
 8006026:	4653      	mov	r3, sl
 8006028:	4622      	mov	r2, r4
 800602a:	f001 f875 	bl	8007118 <_dtoa_r>
 800602e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006032:	4605      	mov	r5, r0
 8006034:	d119      	bne.n	800606a <__cvt+0x94>
 8006036:	f019 0f01 	tst.w	r9, #1
 800603a:	d00e      	beq.n	800605a <__cvt+0x84>
 800603c:	eb00 0904 	add.w	r9, r0, r4
 8006040:	2200      	movs	r2, #0
 8006042:	2300      	movs	r3, #0
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa fd6e 	bl	8000b28 <__aeabi_dcmpeq>
 800604c:	b108      	cbz	r0, 8006052 <__cvt+0x7c>
 800604e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006052:	2230      	movs	r2, #48	@ 0x30
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	454b      	cmp	r3, r9
 8006058:	d31e      	bcc.n	8006098 <__cvt+0xc2>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800605e:	1b5b      	subs	r3, r3, r5
 8006060:	4628      	mov	r0, r5
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	b004      	add	sp, #16
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800606e:	eb00 0904 	add.w	r9, r0, r4
 8006072:	d1e5      	bne.n	8006040 <__cvt+0x6a>
 8006074:	7803      	ldrb	r3, [r0, #0]
 8006076:	2b30      	cmp	r3, #48	@ 0x30
 8006078:	d10a      	bne.n	8006090 <__cvt+0xba>
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fd51 	bl	8000b28 <__aeabi_dcmpeq>
 8006086:	b918      	cbnz	r0, 8006090 <__cvt+0xba>
 8006088:	f1c4 0401 	rsb	r4, r4, #1
 800608c:	f8ca 4000 	str.w	r4, [sl]
 8006090:	f8da 3000 	ldr.w	r3, [sl]
 8006094:	4499      	add	r9, r3
 8006096:	e7d3      	b.n	8006040 <__cvt+0x6a>
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	9103      	str	r1, [sp, #12]
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e7d9      	b.n	8006054 <__cvt+0x7e>

080060a0 <__exponent>:
 80060a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a2:	2900      	cmp	r1, #0
 80060a4:	bfba      	itte	lt
 80060a6:	4249      	neglt	r1, r1
 80060a8:	232d      	movlt	r3, #45	@ 0x2d
 80060aa:	232b      	movge	r3, #43	@ 0x2b
 80060ac:	2909      	cmp	r1, #9
 80060ae:	7002      	strb	r2, [r0, #0]
 80060b0:	7043      	strb	r3, [r0, #1]
 80060b2:	dd29      	ble.n	8006108 <__exponent+0x68>
 80060b4:	f10d 0307 	add.w	r3, sp, #7
 80060b8:	461d      	mov	r5, r3
 80060ba:	270a      	movs	r7, #10
 80060bc:	461a      	mov	r2, r3
 80060be:	fbb1 f6f7 	udiv	r6, r1, r7
 80060c2:	fb07 1416 	mls	r4, r7, r6, r1
 80060c6:	3430      	adds	r4, #48	@ 0x30
 80060c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060cc:	460c      	mov	r4, r1
 80060ce:	2c63      	cmp	r4, #99	@ 0x63
 80060d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80060d4:	4631      	mov	r1, r6
 80060d6:	dcf1      	bgt.n	80060bc <__exponent+0x1c>
 80060d8:	3130      	adds	r1, #48	@ 0x30
 80060da:	1e94      	subs	r4, r2, #2
 80060dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060e0:	1c41      	adds	r1, r0, #1
 80060e2:	4623      	mov	r3, r4
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	d30a      	bcc.n	80060fe <__exponent+0x5e>
 80060e8:	f10d 0309 	add.w	r3, sp, #9
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	42ac      	cmp	r4, r5
 80060f0:	bf88      	it	hi
 80060f2:	2300      	movhi	r3, #0
 80060f4:	3302      	adds	r3, #2
 80060f6:	4403      	add	r3, r0
 80060f8:	1a18      	subs	r0, r3, r0
 80060fa:	b003      	add	sp, #12
 80060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006102:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006106:	e7ed      	b.n	80060e4 <__exponent+0x44>
 8006108:	2330      	movs	r3, #48	@ 0x30
 800610a:	3130      	adds	r1, #48	@ 0x30
 800610c:	7083      	strb	r3, [r0, #2]
 800610e:	70c1      	strb	r1, [r0, #3]
 8006110:	1d03      	adds	r3, r0, #4
 8006112:	e7f1      	b.n	80060f8 <__exponent+0x58>

08006114 <_printf_float>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	b08d      	sub	sp, #52	@ 0x34
 800611a:	460c      	mov	r4, r1
 800611c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006120:	4616      	mov	r6, r2
 8006122:	461f      	mov	r7, r3
 8006124:	4605      	mov	r5, r0
 8006126:	f000 feef 	bl	8006f08 <_localeconv_r>
 800612a:	6803      	ldr	r3, [r0, #0]
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f8ce 	bl	80002d0 <strlen>
 8006134:	2300      	movs	r3, #0
 8006136:	930a      	str	r3, [sp, #40]	@ 0x28
 8006138:	f8d8 3000 	ldr.w	r3, [r8]
 800613c:	9005      	str	r0, [sp, #20]
 800613e:	3307      	adds	r3, #7
 8006140:	f023 0307 	bic.w	r3, r3, #7
 8006144:	f103 0208 	add.w	r2, r3, #8
 8006148:	f894 a018 	ldrb.w	sl, [r4, #24]
 800614c:	f8d4 b000 	ldr.w	fp, [r4]
 8006150:	f8c8 2000 	str.w	r2, [r8]
 8006154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006158:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800615c:	9307      	str	r3, [sp, #28]
 800615e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006162:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800616a:	4b9c      	ldr	r3, [pc, #624]	@ (80063dc <_printf_float+0x2c8>)
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	f7fa fd0c 	bl	8000b8c <__aeabi_dcmpun>
 8006174:	bb70      	cbnz	r0, 80061d4 <_printf_float+0xc0>
 8006176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800617a:	4b98      	ldr	r3, [pc, #608]	@ (80063dc <_printf_float+0x2c8>)
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	f7fa fce6 	bl	8000b50 <__aeabi_dcmple>
 8006184:	bb30      	cbnz	r0, 80061d4 <_printf_float+0xc0>
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	f7fa fcd5 	bl	8000b3c <__aeabi_dcmplt>
 8006192:	b110      	cbz	r0, 800619a <_printf_float+0x86>
 8006194:	232d      	movs	r3, #45	@ 0x2d
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800619a:	4a91      	ldr	r2, [pc, #580]	@ (80063e0 <_printf_float+0x2cc>)
 800619c:	4b91      	ldr	r3, [pc, #580]	@ (80063e4 <_printf_float+0x2d0>)
 800619e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061a2:	bf94      	ite	ls
 80061a4:	4690      	movls	r8, r2
 80061a6:	4698      	movhi	r8, r3
 80061a8:	2303      	movs	r3, #3
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	f02b 0304 	bic.w	r3, fp, #4
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	f04f 0900 	mov.w	r9, #0
 80061b6:	9700      	str	r7, [sp, #0]
 80061b8:	4633      	mov	r3, r6
 80061ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061bc:	4621      	mov	r1, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 f9d2 	bl	8006568 <_printf_common>
 80061c4:	3001      	adds	r0, #1
 80061c6:	f040 808d 	bne.w	80062e4 <_printf_float+0x1d0>
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	b00d      	add	sp, #52	@ 0x34
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	4642      	mov	r2, r8
 80061d6:	464b      	mov	r3, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	4649      	mov	r1, r9
 80061dc:	f7fa fcd6 	bl	8000b8c <__aeabi_dcmpun>
 80061e0:	b140      	cbz	r0, 80061f4 <_printf_float+0xe0>
 80061e2:	464b      	mov	r3, r9
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bfbc      	itt	lt
 80061e8:	232d      	movlt	r3, #45	@ 0x2d
 80061ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061ee:	4a7e      	ldr	r2, [pc, #504]	@ (80063e8 <_printf_float+0x2d4>)
 80061f0:	4b7e      	ldr	r3, [pc, #504]	@ (80063ec <_printf_float+0x2d8>)
 80061f2:	e7d4      	b.n	800619e <_printf_float+0x8a>
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061fa:	9206      	str	r2, [sp, #24]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	d13b      	bne.n	8006278 <_printf_float+0x164>
 8006200:	2306      	movs	r3, #6
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006208:	2300      	movs	r3, #0
 800620a:	6022      	str	r2, [r4, #0]
 800620c:	9303      	str	r3, [sp, #12]
 800620e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006210:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006214:	ab09      	add	r3, sp, #36	@ 0x24
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	ec49 8b10 	vmov	d0, r8, r9
 800621e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006222:	4628      	mov	r0, r5
 8006224:	f7ff fed7 	bl	8005fd6 <__cvt>
 8006228:	9b06      	ldr	r3, [sp, #24]
 800622a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800622c:	2b47      	cmp	r3, #71	@ 0x47
 800622e:	4680      	mov	r8, r0
 8006230:	d129      	bne.n	8006286 <_printf_float+0x172>
 8006232:	1cc8      	adds	r0, r1, #3
 8006234:	db02      	blt.n	800623c <_printf_float+0x128>
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	4299      	cmp	r1, r3
 800623a:	dd41      	ble.n	80062c0 <_printf_float+0x1ac>
 800623c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006240:	fa5f fa8a 	uxtb.w	sl, sl
 8006244:	3901      	subs	r1, #1
 8006246:	4652      	mov	r2, sl
 8006248:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800624c:	9109      	str	r1, [sp, #36]	@ 0x24
 800624e:	f7ff ff27 	bl	80060a0 <__exponent>
 8006252:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006254:	1813      	adds	r3, r2, r0
 8006256:	2a01      	cmp	r2, #1
 8006258:	4681      	mov	r9, r0
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	dc02      	bgt.n	8006264 <_printf_float+0x150>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	07d2      	lsls	r2, r2, #31
 8006262:	d501      	bpl.n	8006268 <_printf_float+0x154>
 8006264:	3301      	adds	r3, #1
 8006266:	6123      	str	r3, [r4, #16]
 8006268:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0a2      	beq.n	80061b6 <_printf_float+0xa2>
 8006270:	232d      	movs	r3, #45	@ 0x2d
 8006272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006276:	e79e      	b.n	80061b6 <_printf_float+0xa2>
 8006278:	9a06      	ldr	r2, [sp, #24]
 800627a:	2a47      	cmp	r2, #71	@ 0x47
 800627c:	d1c2      	bne.n	8006204 <_printf_float+0xf0>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1c0      	bne.n	8006204 <_printf_float+0xf0>
 8006282:	2301      	movs	r3, #1
 8006284:	e7bd      	b.n	8006202 <_printf_float+0xee>
 8006286:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800628a:	d9db      	bls.n	8006244 <_printf_float+0x130>
 800628c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006290:	d118      	bne.n	80062c4 <_printf_float+0x1b0>
 8006292:	2900      	cmp	r1, #0
 8006294:	6863      	ldr	r3, [r4, #4]
 8006296:	dd0b      	ble.n	80062b0 <_printf_float+0x19c>
 8006298:	6121      	str	r1, [r4, #16]
 800629a:	b913      	cbnz	r3, 80062a2 <_printf_float+0x18e>
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	07d0      	lsls	r0, r2, #31
 80062a0:	d502      	bpl.n	80062a8 <_printf_float+0x194>
 80062a2:	3301      	adds	r3, #1
 80062a4:	440b      	add	r3, r1
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062aa:	f04f 0900 	mov.w	r9, #0
 80062ae:	e7db      	b.n	8006268 <_printf_float+0x154>
 80062b0:	b913      	cbnz	r3, 80062b8 <_printf_float+0x1a4>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	07d2      	lsls	r2, r2, #31
 80062b6:	d501      	bpl.n	80062bc <_printf_float+0x1a8>
 80062b8:	3302      	adds	r3, #2
 80062ba:	e7f4      	b.n	80062a6 <_printf_float+0x192>
 80062bc:	2301      	movs	r3, #1
 80062be:	e7f2      	b.n	80062a6 <_printf_float+0x192>
 80062c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062c6:	4299      	cmp	r1, r3
 80062c8:	db05      	blt.n	80062d6 <_printf_float+0x1c2>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	6121      	str	r1, [r4, #16]
 80062ce:	07d8      	lsls	r0, r3, #31
 80062d0:	d5ea      	bpl.n	80062a8 <_printf_float+0x194>
 80062d2:	1c4b      	adds	r3, r1, #1
 80062d4:	e7e7      	b.n	80062a6 <_printf_float+0x192>
 80062d6:	2900      	cmp	r1, #0
 80062d8:	bfd4      	ite	le
 80062da:	f1c1 0202 	rsble	r2, r1, #2
 80062de:	2201      	movgt	r2, #1
 80062e0:	4413      	add	r3, r2
 80062e2:	e7e0      	b.n	80062a6 <_printf_float+0x192>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	055a      	lsls	r2, r3, #21
 80062e8:	d407      	bmi.n	80062fa <_printf_float+0x1e6>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	4642      	mov	r2, r8
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	d12b      	bne.n	8006350 <_printf_float+0x23c>
 80062f8:	e767      	b.n	80061ca <_printf_float+0xb6>
 80062fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062fe:	f240 80dd 	bls.w	80064bc <_printf_float+0x3a8>
 8006302:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	f7fa fc0d 	bl	8000b28 <__aeabi_dcmpeq>
 800630e:	2800      	cmp	r0, #0
 8006310:	d033      	beq.n	800637a <_printf_float+0x266>
 8006312:	4a37      	ldr	r2, [pc, #220]	@ (80063f0 <_printf_float+0x2dc>)
 8006314:	2301      	movs	r3, #1
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f af54 	beq.w	80061ca <_printf_float+0xb6>
 8006322:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006326:	4543      	cmp	r3, r8
 8006328:	db02      	blt.n	8006330 <_printf_float+0x21c>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	07d8      	lsls	r0, r3, #31
 800632e:	d50f      	bpl.n	8006350 <_printf_float+0x23c>
 8006330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	f43f af45 	beq.w	80061ca <_printf_float+0xb6>
 8006340:	f04f 0900 	mov.w	r9, #0
 8006344:	f108 38ff 	add.w	r8, r8, #4294967295
 8006348:	f104 0a1a 	add.w	sl, r4, #26
 800634c:	45c8      	cmp	r8, r9
 800634e:	dc09      	bgt.n	8006364 <_printf_float+0x250>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	079b      	lsls	r3, r3, #30
 8006354:	f100 8103 	bmi.w	800655e <_printf_float+0x44a>
 8006358:	68e0      	ldr	r0, [r4, #12]
 800635a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800635c:	4298      	cmp	r0, r3
 800635e:	bfb8      	it	lt
 8006360:	4618      	movlt	r0, r3
 8006362:	e734      	b.n	80061ce <_printf_float+0xba>
 8006364:	2301      	movs	r3, #1
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af2b 	beq.w	80061ca <_printf_float+0xb6>
 8006374:	f109 0901 	add.w	r9, r9, #1
 8006378:	e7e8      	b.n	800634c <_printf_float+0x238>
 800637a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	dc39      	bgt.n	80063f4 <_printf_float+0x2e0>
 8006380:	4a1b      	ldr	r2, [pc, #108]	@ (80063f0 <_printf_float+0x2dc>)
 8006382:	2301      	movs	r3, #1
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f af1d 	beq.w	80061ca <_printf_float+0xb6>
 8006390:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006394:	ea59 0303 	orrs.w	r3, r9, r3
 8006398:	d102      	bne.n	80063a0 <_printf_float+0x28c>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	07d9      	lsls	r1, r3, #31
 800639e:	d5d7      	bpl.n	8006350 <_printf_float+0x23c>
 80063a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063a4:	4631      	mov	r1, r6
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	f43f af0d 	beq.w	80061ca <_printf_float+0xb6>
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	f104 0b1a 	add.w	fp, r4, #26
 80063b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ba:	425b      	negs	r3, r3
 80063bc:	4553      	cmp	r3, sl
 80063be:	dc01      	bgt.n	80063c4 <_printf_float+0x2b0>
 80063c0:	464b      	mov	r3, r9
 80063c2:	e793      	b.n	80062ec <_printf_float+0x1d8>
 80063c4:	2301      	movs	r3, #1
 80063c6:	465a      	mov	r2, fp
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f aefb 	beq.w	80061ca <_printf_float+0xb6>
 80063d4:	f10a 0a01 	add.w	sl, sl, #1
 80063d8:	e7ee      	b.n	80063b8 <_printf_float+0x2a4>
 80063da:	bf00      	nop
 80063dc:	7fefffff 	.word	0x7fefffff
 80063e0:	0800a7cc 	.word	0x0800a7cc
 80063e4:	0800a7d0 	.word	0x0800a7d0
 80063e8:	0800a7d4 	.word	0x0800a7d4
 80063ec:	0800a7d8 	.word	0x0800a7d8
 80063f0:	0800a7dc 	.word	0x0800a7dc
 80063f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063fa:	4553      	cmp	r3, sl
 80063fc:	bfa8      	it	ge
 80063fe:	4653      	movge	r3, sl
 8006400:	2b00      	cmp	r3, #0
 8006402:	4699      	mov	r9, r3
 8006404:	dc36      	bgt.n	8006474 <_printf_float+0x360>
 8006406:	f04f 0b00 	mov.w	fp, #0
 800640a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640e:	f104 021a 	add.w	r2, r4, #26
 8006412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	eba3 0309 	sub.w	r3, r3, r9
 800641a:	455b      	cmp	r3, fp
 800641c:	dc31      	bgt.n	8006482 <_printf_float+0x36e>
 800641e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006420:	459a      	cmp	sl, r3
 8006422:	dc3a      	bgt.n	800649a <_printf_float+0x386>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	07da      	lsls	r2, r3, #31
 8006428:	d437      	bmi.n	800649a <_printf_float+0x386>
 800642a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642c:	ebaa 0903 	sub.w	r9, sl, r3
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	ebaa 0303 	sub.w	r3, sl, r3
 8006436:	4599      	cmp	r9, r3
 8006438:	bfa8      	it	ge
 800643a:	4699      	movge	r9, r3
 800643c:	f1b9 0f00 	cmp.w	r9, #0
 8006440:	dc33      	bgt.n	80064aa <_printf_float+0x396>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800644a:	f104 0b1a 	add.w	fp, r4, #26
 800644e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006450:	ebaa 0303 	sub.w	r3, sl, r3
 8006454:	eba3 0309 	sub.w	r3, r3, r9
 8006458:	4543      	cmp	r3, r8
 800645a:	f77f af79 	ble.w	8006350 <_printf_float+0x23c>
 800645e:	2301      	movs	r3, #1
 8006460:	465a      	mov	r2, fp
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f aeae 	beq.w	80061ca <_printf_float+0xb6>
 800646e:	f108 0801 	add.w	r8, r8, #1
 8006472:	e7ec      	b.n	800644e <_printf_float+0x33a>
 8006474:	4642      	mov	r2, r8
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	d1c2      	bne.n	8006406 <_printf_float+0x2f2>
 8006480:	e6a3      	b.n	80061ca <_printf_float+0xb6>
 8006482:	2301      	movs	r3, #1
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	9206      	str	r2, [sp, #24]
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f ae9c 	beq.w	80061ca <_printf_float+0xb6>
 8006492:	9a06      	ldr	r2, [sp, #24]
 8006494:	f10b 0b01 	add.w	fp, fp, #1
 8006498:	e7bb      	b.n	8006412 <_printf_float+0x2fe>
 800649a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	d1c0      	bne.n	800642a <_printf_float+0x316>
 80064a8:	e68f      	b.n	80061ca <_printf_float+0xb6>
 80064aa:	9a06      	ldr	r2, [sp, #24]
 80064ac:	464b      	mov	r3, r9
 80064ae:	4442      	add	r2, r8
 80064b0:	4631      	mov	r1, r6
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b8      	blx	r7
 80064b6:	3001      	adds	r0, #1
 80064b8:	d1c3      	bne.n	8006442 <_printf_float+0x32e>
 80064ba:	e686      	b.n	80061ca <_printf_float+0xb6>
 80064bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064c0:	f1ba 0f01 	cmp.w	sl, #1
 80064c4:	dc01      	bgt.n	80064ca <_printf_float+0x3b6>
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d536      	bpl.n	8006538 <_printf_float+0x424>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4642      	mov	r2, r8
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f ae78 	beq.w	80061ca <_printf_float+0xb6>
 80064da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f ae70 	beq.w	80061ca <_printf_float+0xb6>
 80064ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ee:	2200      	movs	r2, #0
 80064f0:	2300      	movs	r3, #0
 80064f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064f6:	f7fa fb17 	bl	8000b28 <__aeabi_dcmpeq>
 80064fa:	b9c0      	cbnz	r0, 800652e <_printf_float+0x41a>
 80064fc:	4653      	mov	r3, sl
 80064fe:	f108 0201 	add.w	r2, r8, #1
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	d10c      	bne.n	8006526 <_printf_float+0x412>
 800650c:	e65d      	b.n	80061ca <_printf_float+0xb6>
 800650e:	2301      	movs	r3, #1
 8006510:	465a      	mov	r2, fp
 8006512:	4631      	mov	r1, r6
 8006514:	4628      	mov	r0, r5
 8006516:	47b8      	blx	r7
 8006518:	3001      	adds	r0, #1
 800651a:	f43f ae56 	beq.w	80061ca <_printf_float+0xb6>
 800651e:	f108 0801 	add.w	r8, r8, #1
 8006522:	45d0      	cmp	r8, sl
 8006524:	dbf3      	blt.n	800650e <_printf_float+0x3fa>
 8006526:	464b      	mov	r3, r9
 8006528:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800652c:	e6df      	b.n	80062ee <_printf_float+0x1da>
 800652e:	f04f 0800 	mov.w	r8, #0
 8006532:	f104 0b1a 	add.w	fp, r4, #26
 8006536:	e7f4      	b.n	8006522 <_printf_float+0x40e>
 8006538:	2301      	movs	r3, #1
 800653a:	4642      	mov	r2, r8
 800653c:	e7e1      	b.n	8006502 <_printf_float+0x3ee>
 800653e:	2301      	movs	r3, #1
 8006540:	464a      	mov	r2, r9
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	f43f ae3e 	beq.w	80061ca <_printf_float+0xb6>
 800654e:	f108 0801 	add.w	r8, r8, #1
 8006552:	68e3      	ldr	r3, [r4, #12]
 8006554:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006556:	1a5b      	subs	r3, r3, r1
 8006558:	4543      	cmp	r3, r8
 800655a:	dcf0      	bgt.n	800653e <_printf_float+0x42a>
 800655c:	e6fc      	b.n	8006358 <_printf_float+0x244>
 800655e:	f04f 0800 	mov.w	r8, #0
 8006562:	f104 0919 	add.w	r9, r4, #25
 8006566:	e7f4      	b.n	8006552 <_printf_float+0x43e>

08006568 <_printf_common>:
 8006568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	4616      	mov	r6, r2
 800656e:	4698      	mov	r8, r3
 8006570:	688a      	ldr	r2, [r1, #8]
 8006572:	690b      	ldr	r3, [r1, #16]
 8006574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006578:	4293      	cmp	r3, r2
 800657a:	bfb8      	it	lt
 800657c:	4613      	movlt	r3, r2
 800657e:	6033      	str	r3, [r6, #0]
 8006580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006584:	4607      	mov	r7, r0
 8006586:	460c      	mov	r4, r1
 8006588:	b10a      	cbz	r2, 800658e <_printf_common+0x26>
 800658a:	3301      	adds	r3, #1
 800658c:	6033      	str	r3, [r6, #0]
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	0699      	lsls	r1, r3, #26
 8006592:	bf42      	ittt	mi
 8006594:	6833      	ldrmi	r3, [r6, #0]
 8006596:	3302      	addmi	r3, #2
 8006598:	6033      	strmi	r3, [r6, #0]
 800659a:	6825      	ldr	r5, [r4, #0]
 800659c:	f015 0506 	ands.w	r5, r5, #6
 80065a0:	d106      	bne.n	80065b0 <_printf_common+0x48>
 80065a2:	f104 0a19 	add.w	sl, r4, #25
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	6832      	ldr	r2, [r6, #0]
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	dc26      	bgt.n	80065fe <_printf_common+0x96>
 80065b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	3b00      	subs	r3, #0
 80065b8:	bf18      	it	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	0692      	lsls	r2, r2, #26
 80065be:	d42b      	bmi.n	8006618 <_printf_common+0xb0>
 80065c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065c4:	4641      	mov	r1, r8
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c8      	blx	r9
 80065ca:	3001      	adds	r0, #1
 80065cc:	d01e      	beq.n	800660c <_printf_common+0xa4>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	f003 0306 	and.w	r3, r3, #6
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	bf02      	ittt	eq
 80065da:	68e5      	ldreq	r5, [r4, #12]
 80065dc:	6833      	ldreq	r3, [r6, #0]
 80065de:	1aed      	subeq	r5, r5, r3
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	bf0c      	ite	eq
 80065e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e8:	2500      	movne	r5, #0
 80065ea:	4293      	cmp	r3, r2
 80065ec:	bfc4      	itt	gt
 80065ee:	1a9b      	subgt	r3, r3, r2
 80065f0:	18ed      	addgt	r5, r5, r3
 80065f2:	2600      	movs	r6, #0
 80065f4:	341a      	adds	r4, #26
 80065f6:	42b5      	cmp	r5, r6
 80065f8:	d11a      	bne.n	8006630 <_printf_common+0xc8>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e008      	b.n	8006610 <_printf_common+0xa8>
 80065fe:	2301      	movs	r3, #1
 8006600:	4652      	mov	r2, sl
 8006602:	4641      	mov	r1, r8
 8006604:	4638      	mov	r0, r7
 8006606:	47c8      	blx	r9
 8006608:	3001      	adds	r0, #1
 800660a:	d103      	bne.n	8006614 <_printf_common+0xac>
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	3501      	adds	r5, #1
 8006616:	e7c6      	b.n	80065a6 <_printf_common+0x3e>
 8006618:	18e1      	adds	r1, r4, r3
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	2030      	movs	r0, #48	@ 0x30
 800661e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006622:	4422      	add	r2, r4
 8006624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800662c:	3302      	adds	r3, #2
 800662e:	e7c7      	b.n	80065c0 <_printf_common+0x58>
 8006630:	2301      	movs	r3, #1
 8006632:	4622      	mov	r2, r4
 8006634:	4641      	mov	r1, r8
 8006636:	4638      	mov	r0, r7
 8006638:	47c8      	blx	r9
 800663a:	3001      	adds	r0, #1
 800663c:	d0e6      	beq.n	800660c <_printf_common+0xa4>
 800663e:	3601      	adds	r6, #1
 8006640:	e7d9      	b.n	80065f6 <_printf_common+0x8e>
	...

08006644 <_printf_i>:
 8006644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	7e0f      	ldrb	r7, [r1, #24]
 800664a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800664c:	2f78      	cmp	r7, #120	@ 0x78
 800664e:	4691      	mov	r9, r2
 8006650:	4680      	mov	r8, r0
 8006652:	460c      	mov	r4, r1
 8006654:	469a      	mov	sl, r3
 8006656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800665a:	d807      	bhi.n	800666c <_printf_i+0x28>
 800665c:	2f62      	cmp	r7, #98	@ 0x62
 800665e:	d80a      	bhi.n	8006676 <_printf_i+0x32>
 8006660:	2f00      	cmp	r7, #0
 8006662:	f000 80d2 	beq.w	800680a <_printf_i+0x1c6>
 8006666:	2f58      	cmp	r7, #88	@ 0x58
 8006668:	f000 80b9 	beq.w	80067de <_printf_i+0x19a>
 800666c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006674:	e03a      	b.n	80066ec <_printf_i+0xa8>
 8006676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800667a:	2b15      	cmp	r3, #21
 800667c:	d8f6      	bhi.n	800666c <_printf_i+0x28>
 800667e:	a101      	add	r1, pc, #4	@ (adr r1, 8006684 <_printf_i+0x40>)
 8006680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006684:	080066dd 	.word	0x080066dd
 8006688:	080066f1 	.word	0x080066f1
 800668c:	0800666d 	.word	0x0800666d
 8006690:	0800666d 	.word	0x0800666d
 8006694:	0800666d 	.word	0x0800666d
 8006698:	0800666d 	.word	0x0800666d
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	0800666d 	.word	0x0800666d
 80066a4:	0800666d 	.word	0x0800666d
 80066a8:	0800666d 	.word	0x0800666d
 80066ac:	0800666d 	.word	0x0800666d
 80066b0:	080067f1 	.word	0x080067f1
 80066b4:	0800671b 	.word	0x0800671b
 80066b8:	080067ab 	.word	0x080067ab
 80066bc:	0800666d 	.word	0x0800666d
 80066c0:	0800666d 	.word	0x0800666d
 80066c4:	08006813 	.word	0x08006813
 80066c8:	0800666d 	.word	0x0800666d
 80066cc:	0800671b 	.word	0x0800671b
 80066d0:	0800666d 	.word	0x0800666d
 80066d4:	0800666d 	.word	0x0800666d
 80066d8:	080067b3 	.word	0x080067b3
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6032      	str	r2, [r6, #0]
 80066e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ec:	2301      	movs	r3, #1
 80066ee:	e09d      	b.n	800682c <_printf_i+0x1e8>
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	1d19      	adds	r1, r3, #4
 80066f6:	6031      	str	r1, [r6, #0]
 80066f8:	0606      	lsls	r6, r0, #24
 80066fa:	d501      	bpl.n	8006700 <_printf_i+0xbc>
 80066fc:	681d      	ldr	r5, [r3, #0]
 80066fe:	e003      	b.n	8006708 <_printf_i+0xc4>
 8006700:	0645      	lsls	r5, r0, #25
 8006702:	d5fb      	bpl.n	80066fc <_printf_i+0xb8>
 8006704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006708:	2d00      	cmp	r5, #0
 800670a:	da03      	bge.n	8006714 <_printf_i+0xd0>
 800670c:	232d      	movs	r3, #45	@ 0x2d
 800670e:	426d      	negs	r5, r5
 8006710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006714:	4859      	ldr	r0, [pc, #356]	@ (800687c <_printf_i+0x238>)
 8006716:	230a      	movs	r3, #10
 8006718:	e011      	b.n	800673e <_printf_i+0xfa>
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	0608      	lsls	r0, r1, #24
 8006720:	f853 5b04 	ldr.w	r5, [r3], #4
 8006724:	d402      	bmi.n	800672c <_printf_i+0xe8>
 8006726:	0649      	lsls	r1, r1, #25
 8006728:	bf48      	it	mi
 800672a:	b2ad      	uxthmi	r5, r5
 800672c:	2f6f      	cmp	r7, #111	@ 0x6f
 800672e:	4853      	ldr	r0, [pc, #332]	@ (800687c <_printf_i+0x238>)
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	bf14      	ite	ne
 8006734:	230a      	movne	r3, #10
 8006736:	2308      	moveq	r3, #8
 8006738:	2100      	movs	r1, #0
 800673a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800673e:	6866      	ldr	r6, [r4, #4]
 8006740:	60a6      	str	r6, [r4, #8]
 8006742:	2e00      	cmp	r6, #0
 8006744:	bfa2      	ittt	ge
 8006746:	6821      	ldrge	r1, [r4, #0]
 8006748:	f021 0104 	bicge.w	r1, r1, #4
 800674c:	6021      	strge	r1, [r4, #0]
 800674e:	b90d      	cbnz	r5, 8006754 <_printf_i+0x110>
 8006750:	2e00      	cmp	r6, #0
 8006752:	d04b      	beq.n	80067ec <_printf_i+0x1a8>
 8006754:	4616      	mov	r6, r2
 8006756:	fbb5 f1f3 	udiv	r1, r5, r3
 800675a:	fb03 5711 	mls	r7, r3, r1, r5
 800675e:	5dc7      	ldrb	r7, [r0, r7]
 8006760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006764:	462f      	mov	r7, r5
 8006766:	42bb      	cmp	r3, r7
 8006768:	460d      	mov	r5, r1
 800676a:	d9f4      	bls.n	8006756 <_printf_i+0x112>
 800676c:	2b08      	cmp	r3, #8
 800676e:	d10b      	bne.n	8006788 <_printf_i+0x144>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	07df      	lsls	r7, r3, #31
 8006774:	d508      	bpl.n	8006788 <_printf_i+0x144>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	6861      	ldr	r1, [r4, #4]
 800677a:	4299      	cmp	r1, r3
 800677c:	bfde      	ittt	le
 800677e:	2330      	movle	r3, #48	@ 0x30
 8006780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006788:	1b92      	subs	r2, r2, r6
 800678a:	6122      	str	r2, [r4, #16]
 800678c:	f8cd a000 	str.w	sl, [sp]
 8006790:	464b      	mov	r3, r9
 8006792:	aa03      	add	r2, sp, #12
 8006794:	4621      	mov	r1, r4
 8006796:	4640      	mov	r0, r8
 8006798:	f7ff fee6 	bl	8006568 <_printf_common>
 800679c:	3001      	adds	r0, #1
 800679e:	d14a      	bne.n	8006836 <_printf_i+0x1f2>
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	b004      	add	sp, #16
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	4833      	ldr	r0, [pc, #204]	@ (8006880 <_printf_i+0x23c>)
 80067b4:	2778      	movs	r7, #120	@ 0x78
 80067b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	6831      	ldr	r1, [r6, #0]
 80067be:	061f      	lsls	r7, r3, #24
 80067c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80067c4:	d402      	bmi.n	80067cc <_printf_i+0x188>
 80067c6:	065f      	lsls	r7, r3, #25
 80067c8:	bf48      	it	mi
 80067ca:	b2ad      	uxthmi	r5, r5
 80067cc:	6031      	str	r1, [r6, #0]
 80067ce:	07d9      	lsls	r1, r3, #31
 80067d0:	bf44      	itt	mi
 80067d2:	f043 0320 	orrmi.w	r3, r3, #32
 80067d6:	6023      	strmi	r3, [r4, #0]
 80067d8:	b11d      	cbz	r5, 80067e2 <_printf_i+0x19e>
 80067da:	2310      	movs	r3, #16
 80067dc:	e7ac      	b.n	8006738 <_printf_i+0xf4>
 80067de:	4827      	ldr	r0, [pc, #156]	@ (800687c <_printf_i+0x238>)
 80067e0:	e7e9      	b.n	80067b6 <_printf_i+0x172>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f023 0320 	bic.w	r3, r3, #32
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	e7f6      	b.n	80067da <_printf_i+0x196>
 80067ec:	4616      	mov	r6, r2
 80067ee:	e7bd      	b.n	800676c <_printf_i+0x128>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	6961      	ldr	r1, [r4, #20]
 80067f6:	1d18      	adds	r0, r3, #4
 80067f8:	6030      	str	r0, [r6, #0]
 80067fa:	062e      	lsls	r6, r5, #24
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	d501      	bpl.n	8006804 <_printf_i+0x1c0>
 8006800:	6019      	str	r1, [r3, #0]
 8006802:	e002      	b.n	800680a <_printf_i+0x1c6>
 8006804:	0668      	lsls	r0, r5, #25
 8006806:	d5fb      	bpl.n	8006800 <_printf_i+0x1bc>
 8006808:	8019      	strh	r1, [r3, #0]
 800680a:	2300      	movs	r3, #0
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	4616      	mov	r6, r2
 8006810:	e7bc      	b.n	800678c <_printf_i+0x148>
 8006812:	6833      	ldr	r3, [r6, #0]
 8006814:	1d1a      	adds	r2, r3, #4
 8006816:	6032      	str	r2, [r6, #0]
 8006818:	681e      	ldr	r6, [r3, #0]
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	2100      	movs	r1, #0
 800681e:	4630      	mov	r0, r6
 8006820:	f7f9 fd06 	bl	8000230 <memchr>
 8006824:	b108      	cbz	r0, 800682a <_printf_i+0x1e6>
 8006826:	1b80      	subs	r0, r0, r6
 8006828:	6060      	str	r0, [r4, #4]
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	2300      	movs	r3, #0
 8006830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006834:	e7aa      	b.n	800678c <_printf_i+0x148>
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	4632      	mov	r2, r6
 800683a:	4649      	mov	r1, r9
 800683c:	4640      	mov	r0, r8
 800683e:	47d0      	blx	sl
 8006840:	3001      	adds	r0, #1
 8006842:	d0ad      	beq.n	80067a0 <_printf_i+0x15c>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	079b      	lsls	r3, r3, #30
 8006848:	d413      	bmi.n	8006872 <_printf_i+0x22e>
 800684a:	68e0      	ldr	r0, [r4, #12]
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	4298      	cmp	r0, r3
 8006850:	bfb8      	it	lt
 8006852:	4618      	movlt	r0, r3
 8006854:	e7a6      	b.n	80067a4 <_printf_i+0x160>
 8006856:	2301      	movs	r3, #1
 8006858:	4632      	mov	r2, r6
 800685a:	4649      	mov	r1, r9
 800685c:	4640      	mov	r0, r8
 800685e:	47d0      	blx	sl
 8006860:	3001      	adds	r0, #1
 8006862:	d09d      	beq.n	80067a0 <_printf_i+0x15c>
 8006864:	3501      	adds	r5, #1
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	9903      	ldr	r1, [sp, #12]
 800686a:	1a5b      	subs	r3, r3, r1
 800686c:	42ab      	cmp	r3, r5
 800686e:	dcf2      	bgt.n	8006856 <_printf_i+0x212>
 8006870:	e7eb      	b.n	800684a <_printf_i+0x206>
 8006872:	2500      	movs	r5, #0
 8006874:	f104 0619 	add.w	r6, r4, #25
 8006878:	e7f5      	b.n	8006866 <_printf_i+0x222>
 800687a:	bf00      	nop
 800687c:	0800a7de 	.word	0x0800a7de
 8006880:	0800a7ef 	.word	0x0800a7ef

08006884 <_scanf_float>:
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	b087      	sub	sp, #28
 800688a:	4617      	mov	r7, r2
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	688b      	ldr	r3, [r1, #8]
 8006890:	1e5a      	subs	r2, r3, #1
 8006892:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006896:	bf81      	itttt	hi
 8006898:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800689c:	eb03 0b05 	addhi.w	fp, r3, r5
 80068a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80068a4:	608b      	strhi	r3, [r1, #8]
 80068a6:	680b      	ldr	r3, [r1, #0]
 80068a8:	460a      	mov	r2, r1
 80068aa:	f04f 0500 	mov.w	r5, #0
 80068ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80068b2:	f842 3b1c 	str.w	r3, [r2], #28
 80068b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068ba:	4680      	mov	r8, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	bf98      	it	ls
 80068c0:	f04f 0b00 	movls.w	fp, #0
 80068c4:	9201      	str	r2, [sp, #4]
 80068c6:	4616      	mov	r6, r2
 80068c8:	46aa      	mov	sl, r5
 80068ca:	46a9      	mov	r9, r5
 80068cc:	9502      	str	r5, [sp, #8]
 80068ce:	68a2      	ldr	r2, [r4, #8]
 80068d0:	b152      	cbz	r2, 80068e8 <_scanf_float+0x64>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80068d8:	d864      	bhi.n	80069a4 <_scanf_float+0x120>
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d83c      	bhi.n	8006958 <_scanf_float+0xd4>
 80068de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80068e2:	b2c8      	uxtb	r0, r1
 80068e4:	280e      	cmp	r0, #14
 80068e6:	d93a      	bls.n	800695e <_scanf_float+0xda>
 80068e8:	f1b9 0f00 	cmp.w	r9, #0
 80068ec:	d003      	beq.n	80068f6 <_scanf_float+0x72>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068fa:	f1ba 0f01 	cmp.w	sl, #1
 80068fe:	f200 8117 	bhi.w	8006b30 <_scanf_float+0x2ac>
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	429e      	cmp	r6, r3
 8006906:	f200 8108 	bhi.w	8006b1a <_scanf_float+0x296>
 800690a:	2001      	movs	r0, #1
 800690c:	b007      	add	sp, #28
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006916:	2a0d      	cmp	r2, #13
 8006918:	d8e6      	bhi.n	80068e8 <_scanf_float+0x64>
 800691a:	a101      	add	r1, pc, #4	@ (adr r1, 8006920 <_scanf_float+0x9c>)
 800691c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006920:	08006a67 	.word	0x08006a67
 8006924:	080068e9 	.word	0x080068e9
 8006928:	080068e9 	.word	0x080068e9
 800692c:	080068e9 	.word	0x080068e9
 8006930:	08006ac7 	.word	0x08006ac7
 8006934:	08006a9f 	.word	0x08006a9f
 8006938:	080068e9 	.word	0x080068e9
 800693c:	080068e9 	.word	0x080068e9
 8006940:	08006a75 	.word	0x08006a75
 8006944:	080068e9 	.word	0x080068e9
 8006948:	080068e9 	.word	0x080068e9
 800694c:	080068e9 	.word	0x080068e9
 8006950:	080068e9 	.word	0x080068e9
 8006954:	08006a2d 	.word	0x08006a2d
 8006958:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800695c:	e7db      	b.n	8006916 <_scanf_float+0x92>
 800695e:	290e      	cmp	r1, #14
 8006960:	d8c2      	bhi.n	80068e8 <_scanf_float+0x64>
 8006962:	a001      	add	r0, pc, #4	@ (adr r0, 8006968 <_scanf_float+0xe4>)
 8006964:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006968:	08006a1d 	.word	0x08006a1d
 800696c:	080068e9 	.word	0x080068e9
 8006970:	08006a1d 	.word	0x08006a1d
 8006974:	08006ab3 	.word	0x08006ab3
 8006978:	080068e9 	.word	0x080068e9
 800697c:	080069c5 	.word	0x080069c5
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a03 	.word	0x08006a03
 8006988:	08006a03 	.word	0x08006a03
 800698c:	08006a03 	.word	0x08006a03
 8006990:	08006a03 	.word	0x08006a03
 8006994:	08006a03 	.word	0x08006a03
 8006998:	08006a03 	.word	0x08006a03
 800699c:	08006a03 	.word	0x08006a03
 80069a0:	08006a03 	.word	0x08006a03
 80069a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80069a6:	d809      	bhi.n	80069bc <_scanf_float+0x138>
 80069a8:	2b60      	cmp	r3, #96	@ 0x60
 80069aa:	d8b2      	bhi.n	8006912 <_scanf_float+0x8e>
 80069ac:	2b54      	cmp	r3, #84	@ 0x54
 80069ae:	d07b      	beq.n	8006aa8 <_scanf_float+0x224>
 80069b0:	2b59      	cmp	r3, #89	@ 0x59
 80069b2:	d199      	bne.n	80068e8 <_scanf_float+0x64>
 80069b4:	2d07      	cmp	r5, #7
 80069b6:	d197      	bne.n	80068e8 <_scanf_float+0x64>
 80069b8:	2508      	movs	r5, #8
 80069ba:	e02c      	b.n	8006a16 <_scanf_float+0x192>
 80069bc:	2b74      	cmp	r3, #116	@ 0x74
 80069be:	d073      	beq.n	8006aa8 <_scanf_float+0x224>
 80069c0:	2b79      	cmp	r3, #121	@ 0x79
 80069c2:	e7f6      	b.n	80069b2 <_scanf_float+0x12e>
 80069c4:	6821      	ldr	r1, [r4, #0]
 80069c6:	05c8      	lsls	r0, r1, #23
 80069c8:	d51b      	bpl.n	8006a02 <_scanf_float+0x17e>
 80069ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80069ce:	6021      	str	r1, [r4, #0]
 80069d0:	f109 0901 	add.w	r9, r9, #1
 80069d4:	f1bb 0f00 	cmp.w	fp, #0
 80069d8:	d003      	beq.n	80069e2 <_scanf_float+0x15e>
 80069da:	3201      	adds	r2, #1
 80069dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069e0:	60a2      	str	r2, [r4, #8]
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
 80069f6:	f340 8087 	ble.w	8006b08 <_scanf_float+0x284>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	e765      	b.n	80068ce <_scanf_float+0x4a>
 8006a02:	eb1a 0105 	adds.w	r1, sl, r5
 8006a06:	f47f af6f 	bne.w	80068e8 <_scanf_float+0x64>
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	460d      	mov	r5, r1
 8006a14:	468a      	mov	sl, r1
 8006a16:	f806 3b01 	strb.w	r3, [r6], #1
 8006a1a:	e7e2      	b.n	80069e2 <_scanf_float+0x15e>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	0610      	lsls	r0, r2, #24
 8006a20:	f57f af62 	bpl.w	80068e8 <_scanf_float+0x64>
 8006a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	e7f4      	b.n	8006a16 <_scanf_float+0x192>
 8006a2c:	f1ba 0f00 	cmp.w	sl, #0
 8006a30:	d10e      	bne.n	8006a50 <_scanf_float+0x1cc>
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	d10e      	bne.n	8006a56 <_scanf_float+0x1d2>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a42:	d108      	bne.n	8006a56 <_scanf_float+0x1d2>
 8006a44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	f04f 0a01 	mov.w	sl, #1
 8006a4e:	e7e2      	b.n	8006a16 <_scanf_float+0x192>
 8006a50:	f1ba 0f02 	cmp.w	sl, #2
 8006a54:	d055      	beq.n	8006b02 <_scanf_float+0x27e>
 8006a56:	2d01      	cmp	r5, #1
 8006a58:	d002      	beq.n	8006a60 <_scanf_float+0x1dc>
 8006a5a:	2d04      	cmp	r5, #4
 8006a5c:	f47f af44 	bne.w	80068e8 <_scanf_float+0x64>
 8006a60:	3501      	adds	r5, #1
 8006a62:	b2ed      	uxtb	r5, r5
 8006a64:	e7d7      	b.n	8006a16 <_scanf_float+0x192>
 8006a66:	f1ba 0f01 	cmp.w	sl, #1
 8006a6a:	f47f af3d 	bne.w	80068e8 <_scanf_float+0x64>
 8006a6e:	f04f 0a02 	mov.w	sl, #2
 8006a72:	e7d0      	b.n	8006a16 <_scanf_float+0x192>
 8006a74:	b97d      	cbnz	r5, 8006a96 <_scanf_float+0x212>
 8006a76:	f1b9 0f00 	cmp.w	r9, #0
 8006a7a:	f47f af38 	bne.w	80068ee <_scanf_float+0x6a>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a88:	f040 8108 	bne.w	8006c9c <_scanf_float+0x418>
 8006a8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a90:	6022      	str	r2, [r4, #0]
 8006a92:	2501      	movs	r5, #1
 8006a94:	e7bf      	b.n	8006a16 <_scanf_float+0x192>
 8006a96:	2d03      	cmp	r5, #3
 8006a98:	d0e2      	beq.n	8006a60 <_scanf_float+0x1dc>
 8006a9a:	2d05      	cmp	r5, #5
 8006a9c:	e7de      	b.n	8006a5c <_scanf_float+0x1d8>
 8006a9e:	2d02      	cmp	r5, #2
 8006aa0:	f47f af22 	bne.w	80068e8 <_scanf_float+0x64>
 8006aa4:	2503      	movs	r5, #3
 8006aa6:	e7b6      	b.n	8006a16 <_scanf_float+0x192>
 8006aa8:	2d06      	cmp	r5, #6
 8006aaa:	f47f af1d 	bne.w	80068e8 <_scanf_float+0x64>
 8006aae:	2507      	movs	r5, #7
 8006ab0:	e7b1      	b.n	8006a16 <_scanf_float+0x192>
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	0591      	lsls	r1, r2, #22
 8006ab6:	f57f af17 	bpl.w	80068e8 <_scanf_float+0x64>
 8006aba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ac4:	e7a7      	b.n	8006a16 <_scanf_float+0x192>
 8006ac6:	6822      	ldr	r2, [r4, #0]
 8006ac8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006acc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ad0:	d006      	beq.n	8006ae0 <_scanf_float+0x25c>
 8006ad2:	0550      	lsls	r0, r2, #21
 8006ad4:	f57f af08 	bpl.w	80068e8 <_scanf_float+0x64>
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	f000 80de 	beq.w	8006c9c <_scanf_float+0x418>
 8006ae0:	0591      	lsls	r1, r2, #22
 8006ae2:	bf58      	it	pl
 8006ae4:	9902      	ldrpl	r1, [sp, #8]
 8006ae6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006aea:	bf58      	it	pl
 8006aec:	eba9 0101 	subpl.w	r1, r9, r1
 8006af0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006af4:	bf58      	it	pl
 8006af6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006afa:	6022      	str	r2, [r4, #0]
 8006afc:	f04f 0900 	mov.w	r9, #0
 8006b00:	e789      	b.n	8006a16 <_scanf_float+0x192>
 8006b02:	f04f 0a03 	mov.w	sl, #3
 8006b06:	e786      	b.n	8006a16 <_scanf_float+0x192>
 8006b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4798      	blx	r3
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f43f aedb 	beq.w	80068ce <_scanf_float+0x4a>
 8006b18:	e6e6      	b.n	80068e8 <_scanf_float+0x64>
 8006b1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b22:	463a      	mov	r2, r7
 8006b24:	4640      	mov	r0, r8
 8006b26:	4798      	blx	r3
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	e6e8      	b.n	8006902 <_scanf_float+0x7e>
 8006b30:	1e6b      	subs	r3, r5, #1
 8006b32:	2b06      	cmp	r3, #6
 8006b34:	d824      	bhi.n	8006b80 <_scanf_float+0x2fc>
 8006b36:	2d02      	cmp	r5, #2
 8006b38:	d836      	bhi.n	8006ba8 <_scanf_float+0x324>
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	429e      	cmp	r6, r3
 8006b3e:	f67f aee4 	bls.w	800690a <_scanf_float+0x86>
 8006b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4640      	mov	r0, r8
 8006b4e:	4798      	blx	r3
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	e7f0      	b.n	8006b3a <_scanf_float+0x2b6>
 8006b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b60:	463a      	mov	r2, r7
 8006b62:	4640      	mov	r0, r8
 8006b64:	4798      	blx	r3
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b70:	fa5f fa8a 	uxtb.w	sl, sl
 8006b74:	f1ba 0f02 	cmp.w	sl, #2
 8006b78:	d1ee      	bne.n	8006b58 <_scanf_float+0x2d4>
 8006b7a:	3d03      	subs	r5, #3
 8006b7c:	b2ed      	uxtb	r5, r5
 8006b7e:	1b76      	subs	r6, r6, r5
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	05da      	lsls	r2, r3, #23
 8006b84:	d530      	bpl.n	8006be8 <_scanf_float+0x364>
 8006b86:	055b      	lsls	r3, r3, #21
 8006b88:	d511      	bpl.n	8006bae <_scanf_float+0x32a>
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	429e      	cmp	r6, r3
 8006b8e:	f67f aebc 	bls.w	800690a <_scanf_float+0x86>
 8006b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b9a:	463a      	mov	r2, r7
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4798      	blx	r3
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	e7f0      	b.n	8006b8a <_scanf_float+0x306>
 8006ba8:	46aa      	mov	sl, r5
 8006baa:	46b3      	mov	fp, r6
 8006bac:	e7de      	b.n	8006b6c <_scanf_float+0x2e8>
 8006bae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	2965      	cmp	r1, #101	@ 0x65
 8006bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bba:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	d00c      	beq.n	8006bdc <_scanf_float+0x358>
 8006bc2:	2945      	cmp	r1, #69	@ 0x45
 8006bc4:	d00a      	beq.n	8006bdc <_scanf_float+0x358>
 8006bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4798      	blx	r3
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	1eb5      	subs	r5, r6, #2
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006be0:	463a      	mov	r2, r7
 8006be2:	4640      	mov	r0, r8
 8006be4:	4798      	blx	r3
 8006be6:	462e      	mov	r6, r5
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	f012 0210 	ands.w	r2, r2, #16
 8006bee:	d001      	beq.n	8006bf4 <_scanf_float+0x370>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e68b      	b.n	800690c <_scanf_float+0x88>
 8006bf4:	7032      	strb	r2, [r6, #0]
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d11c      	bne.n	8006c3c <_scanf_float+0x3b8>
 8006c02:	9b02      	ldr	r3, [sp, #8]
 8006c04:	454b      	cmp	r3, r9
 8006c06:	eba3 0209 	sub.w	r2, r3, r9
 8006c0a:	d123      	bne.n	8006c54 <_scanf_float+0x3d0>
 8006c0c:	9901      	ldr	r1, [sp, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4640      	mov	r0, r8
 8006c12:	f002 fbf9 	bl	8009408 <_strtod_r>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	6821      	ldr	r1, [r4, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f011 0f02 	tst.w	r1, #2
 8006c20:	ec57 6b10 	vmov	r6, r7, d0
 8006c24:	f103 0204 	add.w	r2, r3, #4
 8006c28:	d01f      	beq.n	8006c6a <_scanf_float+0x3e6>
 8006c2a:	9903      	ldr	r1, [sp, #12]
 8006c2c:	600a      	str	r2, [r1, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	e9c3 6700 	strd	r6, r7, [r3]
 8006c34:	68e3      	ldr	r3, [r4, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60e3      	str	r3, [r4, #12]
 8006c3a:	e7d9      	b.n	8006bf0 <_scanf_float+0x36c>
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0e4      	beq.n	8006c0c <_scanf_float+0x388>
 8006c42:	9905      	ldr	r1, [sp, #20]
 8006c44:	230a      	movs	r3, #10
 8006c46:	3101      	adds	r1, #1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	f002 fc5d 	bl	8009508 <_strtol_r>
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	9e05      	ldr	r6, [sp, #20]
 8006c52:	1ac2      	subs	r2, r0, r3
 8006c54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	bf28      	it	cs
 8006c5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c60:	4910      	ldr	r1, [pc, #64]	@ (8006ca4 <_scanf_float+0x420>)
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 f8e4 	bl	8006e30 <siprintf>
 8006c68:	e7d0      	b.n	8006c0c <_scanf_float+0x388>
 8006c6a:	f011 0f04 	tst.w	r1, #4
 8006c6e:	9903      	ldr	r1, [sp, #12]
 8006c70:	600a      	str	r2, [r1, #0]
 8006c72:	d1dc      	bne.n	8006c2e <_scanf_float+0x3aa>
 8006c74:	681d      	ldr	r5, [r3, #0]
 8006c76:	4632      	mov	r2, r6
 8006c78:	463b      	mov	r3, r7
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 ff85 	bl	8000b8c <__aeabi_dcmpun>
 8006c82:	b128      	cbz	r0, 8006c90 <_scanf_float+0x40c>
 8006c84:	4808      	ldr	r0, [pc, #32]	@ (8006ca8 <_scanf_float+0x424>)
 8006c86:	f000 f9b7 	bl	8006ff8 <nanf>
 8006c8a:	ed85 0a00 	vstr	s0, [r5]
 8006c8e:	e7d1      	b.n	8006c34 <_scanf_float+0x3b0>
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 ffd8 	bl	8000c48 <__aeabi_d2f>
 8006c98:	6028      	str	r0, [r5, #0]
 8006c9a:	e7cb      	b.n	8006c34 <_scanf_float+0x3b0>
 8006c9c:	f04f 0900 	mov.w	r9, #0
 8006ca0:	e629      	b.n	80068f6 <_scanf_float+0x72>
 8006ca2:	bf00      	nop
 8006ca4:	0800a800 	.word	0x0800a800
 8006ca8:	0800ab95 	.word	0x0800ab95

08006cac <std>:
 8006cac:	2300      	movs	r3, #0
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cba:	6083      	str	r3, [r0, #8]
 8006cbc:	8181      	strh	r1, [r0, #12]
 8006cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cc0:	81c2      	strh	r2, [r0, #14]
 8006cc2:	6183      	str	r3, [r0, #24]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	305c      	adds	r0, #92	@ 0x5c
 8006cca:	f000 f914 	bl	8006ef6 <memset>
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <std+0x58>)
 8006cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x5c>)
 8006cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x60>)
 8006cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x64>)
 8006cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x68>)
 8006ce0:	6224      	str	r4, [r4, #32]
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d006      	beq.n	8006cf4 <std+0x48>
 8006ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cea:	4294      	cmp	r4, r2
 8006cec:	d002      	beq.n	8006cf4 <std+0x48>
 8006cee:	33d0      	adds	r3, #208	@ 0xd0
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d105      	bne.n	8006d00 <std+0x54>
 8006cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfc:	f000 b978 	b.w	8006ff0 <__retarget_lock_init_recursive>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	bf00      	nop
 8006d04:	08006e71 	.word	0x08006e71
 8006d08:	08006e93 	.word	0x08006e93
 8006d0c:	08006ecb 	.word	0x08006ecb
 8006d10:	08006eef 	.word	0x08006eef
 8006d14:	200004ec 	.word	0x200004ec

08006d18 <stdio_exit_handler>:
 8006d18:	4a02      	ldr	r2, [pc, #8]	@ (8006d24 <stdio_exit_handler+0xc>)
 8006d1a:	4903      	ldr	r1, [pc, #12]	@ (8006d28 <stdio_exit_handler+0x10>)
 8006d1c:	4803      	ldr	r0, [pc, #12]	@ (8006d2c <stdio_exit_handler+0x14>)
 8006d1e:	f000 b869 	b.w	8006df4 <_fwalk_sglue>
 8006d22:	bf00      	nop
 8006d24:	20000160 	.word	0x20000160
 8006d28:	080098c5 	.word	0x080098c5
 8006d2c:	20000170 	.word	0x20000170

08006d30 <cleanup_stdio>:
 8006d30:	6841      	ldr	r1, [r0, #4]
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <cleanup_stdio+0x34>)
 8006d34:	4299      	cmp	r1, r3
 8006d36:	b510      	push	{r4, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	d001      	beq.n	8006d40 <cleanup_stdio+0x10>
 8006d3c:	f002 fdc2 	bl	80098c4 <_fflush_r>
 8006d40:	68a1      	ldr	r1, [r4, #8]
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <cleanup_stdio+0x38>)
 8006d44:	4299      	cmp	r1, r3
 8006d46:	d002      	beq.n	8006d4e <cleanup_stdio+0x1e>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f002 fdbb 	bl	80098c4 <_fflush_r>
 8006d4e:	68e1      	ldr	r1, [r4, #12]
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <cleanup_stdio+0x3c>)
 8006d52:	4299      	cmp	r1, r3
 8006d54:	d004      	beq.n	8006d60 <cleanup_stdio+0x30>
 8006d56:	4620      	mov	r0, r4
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f002 bdb2 	b.w	80098c4 <_fflush_r>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	200004ec 	.word	0x200004ec
 8006d68:	20000554 	.word	0x20000554
 8006d6c:	200005bc 	.word	0x200005bc

08006d70 <global_stdio_init.part.0>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4b0b      	ldr	r3, [pc, #44]	@ (8006da0 <global_stdio_init.part.0+0x30>)
 8006d74:	4c0b      	ldr	r4, [pc, #44]	@ (8006da4 <global_stdio_init.part.0+0x34>)
 8006d76:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <global_stdio_init.part.0+0x38>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2104      	movs	r1, #4
 8006d80:	f7ff ff94 	bl	8006cac <std>
 8006d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d88:	2201      	movs	r2, #1
 8006d8a:	2109      	movs	r1, #9
 8006d8c:	f7ff ff8e 	bl	8006cac <std>
 8006d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d94:	2202      	movs	r2, #2
 8006d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9a:	2112      	movs	r1, #18
 8006d9c:	f7ff bf86 	b.w	8006cac <std>
 8006da0:	20000624 	.word	0x20000624
 8006da4:	200004ec 	.word	0x200004ec
 8006da8:	08006d19 	.word	0x08006d19

08006dac <__sfp_lock_acquire>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__sfp_lock_acquire+0x8>)
 8006dae:	f000 b920 	b.w	8006ff2 <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	2000062d 	.word	0x2000062d

08006db8 <__sfp_lock_release>:
 8006db8:	4801      	ldr	r0, [pc, #4]	@ (8006dc0 <__sfp_lock_release+0x8>)
 8006dba:	f000 b91b 	b.w	8006ff4 <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	2000062d 	.word	0x2000062d

08006dc4 <__sinit>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	f7ff fff0 	bl	8006dac <__sfp_lock_acquire>
 8006dcc:	6a23      	ldr	r3, [r4, #32]
 8006dce:	b11b      	cbz	r3, 8006dd8 <__sinit+0x14>
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd4:	f7ff bff0 	b.w	8006db8 <__sfp_lock_release>
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__sinit+0x28>)
 8006dda:	6223      	str	r3, [r4, #32]
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <__sinit+0x2c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f5      	bne.n	8006dd0 <__sinit+0xc>
 8006de4:	f7ff ffc4 	bl	8006d70 <global_stdio_init.part.0>
 8006de8:	e7f2      	b.n	8006dd0 <__sinit+0xc>
 8006dea:	bf00      	nop
 8006dec:	08006d31 	.word	0x08006d31
 8006df0:	20000624 	.word	0x20000624

08006df4 <_fwalk_sglue>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	4607      	mov	r7, r0
 8006dfa:	4688      	mov	r8, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e04:	f1b9 0901 	subs.w	r9, r9, #1
 8006e08:	d505      	bpl.n	8006e16 <_fwalk_sglue+0x22>
 8006e0a:	6824      	ldr	r4, [r4, #0]
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	d1f7      	bne.n	8006e00 <_fwalk_sglue+0xc>
 8006e10:	4630      	mov	r0, r6
 8006e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e16:	89ab      	ldrh	r3, [r5, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d907      	bls.n	8006e2c <_fwalk_sglue+0x38>
 8006e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e20:	3301      	adds	r3, #1
 8006e22:	d003      	beq.n	8006e2c <_fwalk_sglue+0x38>
 8006e24:	4629      	mov	r1, r5
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c0      	blx	r8
 8006e2a:	4306      	orrs	r6, r0
 8006e2c:	3568      	adds	r5, #104	@ 0x68
 8006e2e:	e7e9      	b.n	8006e04 <_fwalk_sglue+0x10>

08006e30 <siprintf>:
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b500      	push	{lr}
 8006e34:	b09c      	sub	sp, #112	@ 0x70
 8006e36:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e38:	9002      	str	r0, [sp, #8]
 8006e3a:	9006      	str	r0, [sp, #24]
 8006e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e40:	4809      	ldr	r0, [pc, #36]	@ (8006e68 <siprintf+0x38>)
 8006e42:	9107      	str	r1, [sp, #28]
 8006e44:	9104      	str	r1, [sp, #16]
 8006e46:	4909      	ldr	r1, [pc, #36]	@ (8006e6c <siprintf+0x3c>)
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	a902      	add	r1, sp, #8
 8006e54:	f002 fbb6 	bl	80095c4 <_svfiprintf_r>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	b01c      	add	sp, #112	@ 0x70
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b003      	add	sp, #12
 8006e66:	4770      	bx	lr
 8006e68:	2000016c 	.word	0x2000016c
 8006e6c:	ffff0208 	.word	0xffff0208

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f86c 	bl	8006f54 <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	05db      	lsls	r3, r3, #23
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f840 	bl	8006f30 <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b857 	b.w	8006f78 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f82d 	bl	8006f30 <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b80d 	b.w	8006f10 <_close_r>

08006ef6 <memset>:
 8006ef6:	4402      	add	r2, r0
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d100      	bne.n	8006f00 <memset+0xa>
 8006efe:	4770      	bx	lr
 8006f00:	f803 1b01 	strb.w	r1, [r3], #1
 8006f04:	e7f9      	b.n	8006efa <memset+0x4>
	...

08006f08 <_localeconv_r>:
 8006f08:	4800      	ldr	r0, [pc, #0]	@ (8006f0c <_localeconv_r+0x4>)
 8006f0a:	4770      	bx	lr
 8006f0c:	200002ac 	.word	0x200002ac

08006f10 <_close_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d06      	ldr	r5, [pc, #24]	@ (8006f2c <_close_r+0x1c>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	602b      	str	r3, [r5, #0]
 8006f1c:	f7fb ff00 	bl	8002d20 <_close>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_close_r+0x1a>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_close_r+0x1a>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	20000628 	.word	0x20000628

08006f30 <_lseek_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d07      	ldr	r5, [pc, #28]	@ (8006f50 <_lseek_r+0x20>)
 8006f34:	4604      	mov	r4, r0
 8006f36:	4608      	mov	r0, r1
 8006f38:	4611      	mov	r1, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	602a      	str	r2, [r5, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f7fb ff15 	bl	8002d6e <_lseek>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_lseek_r+0x1e>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_lseek_r+0x1e>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20000628 	.word	0x20000628

08006f54 <_read_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d07      	ldr	r5, [pc, #28]	@ (8006f74 <_read_r+0x20>)
 8006f58:	4604      	mov	r4, r0
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fb fea3 	bl	8002cae <_read>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_read_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_read_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	20000628 	.word	0x20000628

08006f78 <_write_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	@ (8006f98 <_write_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fb feae 	bl	8002ce8 <_write>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_write_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_write_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20000628 	.word	0x20000628

08006f9c <__errno>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	@ (8006fa4 <__errno+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000016c 	.word	0x2000016c

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4d0d      	ldr	r5, [pc, #52]	@ (8006fe0 <__libc_init_array+0x38>)
 8006fac:	4c0d      	ldr	r4, [pc, #52]	@ (8006fe4 <__libc_init_array+0x3c>)
 8006fae:	1b64      	subs	r4, r4, r5
 8006fb0:	10a4      	asrs	r4, r4, #2
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8006fe8 <__libc_init_array+0x40>)
 8006fba:	4c0c      	ldr	r4, [pc, #48]	@ (8006fec <__libc_init_array+0x44>)
 8006fbc:	f003 fb72 	bl	800a6a4 <_init>
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	10a4      	asrs	r4, r4, #2
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd0:	4798      	blx	r3
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fda:	4798      	blx	r3
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	0800ac00 	.word	0x0800ac00
 8006fe4:	0800ac00 	.word	0x0800ac00
 8006fe8:	0800ac00 	.word	0x0800ac00
 8006fec:	0800ac04 	.word	0x0800ac04

08006ff0 <__retarget_lock_init_recursive>:
 8006ff0:	4770      	bx	lr

08006ff2 <__retarget_lock_acquire_recursive>:
 8006ff2:	4770      	bx	lr

08006ff4 <__retarget_lock_release_recursive>:
 8006ff4:	4770      	bx	lr
	...

08006ff8 <nanf>:
 8006ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007000 <nanf+0x8>
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	7fc00000 	.word	0x7fc00000

08007004 <quorem>:
 8007004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	6903      	ldr	r3, [r0, #16]
 800700a:	690c      	ldr	r4, [r1, #16]
 800700c:	42a3      	cmp	r3, r4
 800700e:	4607      	mov	r7, r0
 8007010:	db7e      	blt.n	8007110 <quorem+0x10c>
 8007012:	3c01      	subs	r4, #1
 8007014:	f101 0814 	add.w	r8, r1, #20
 8007018:	00a3      	lsls	r3, r4, #2
 800701a:	f100 0514 	add.w	r5, r0, #20
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800702a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800702e:	3301      	adds	r3, #1
 8007030:	429a      	cmp	r2, r3
 8007032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007036:	fbb2 f6f3 	udiv	r6, r2, r3
 800703a:	d32e      	bcc.n	800709a <quorem+0x96>
 800703c:	f04f 0a00 	mov.w	sl, #0
 8007040:	46c4      	mov	ip, r8
 8007042:	46ae      	mov	lr, r5
 8007044:	46d3      	mov	fp, sl
 8007046:	f85c 3b04 	ldr.w	r3, [ip], #4
 800704a:	b298      	uxth	r0, r3
 800704c:	fb06 a000 	mla	r0, r6, r0, sl
 8007050:	0c02      	lsrs	r2, r0, #16
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	fb06 2303 	mla	r3, r6, r3, r2
 8007058:	f8de 2000 	ldr.w	r2, [lr]
 800705c:	b280      	uxth	r0, r0
 800705e:	b292      	uxth	r2, r2
 8007060:	1a12      	subs	r2, r2, r0
 8007062:	445a      	add	r2, fp
 8007064:	f8de 0000 	ldr.w	r0, [lr]
 8007068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800706c:	b29b      	uxth	r3, r3
 800706e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007072:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007076:	b292      	uxth	r2, r2
 8007078:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800707c:	45e1      	cmp	r9, ip
 800707e:	f84e 2b04 	str.w	r2, [lr], #4
 8007082:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007086:	d2de      	bcs.n	8007046 <quorem+0x42>
 8007088:	9b00      	ldr	r3, [sp, #0]
 800708a:	58eb      	ldr	r3, [r5, r3]
 800708c:	b92b      	cbnz	r3, 800709a <quorem+0x96>
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	3b04      	subs	r3, #4
 8007092:	429d      	cmp	r5, r3
 8007094:	461a      	mov	r2, r3
 8007096:	d32f      	bcc.n	80070f8 <quorem+0xf4>
 8007098:	613c      	str	r4, [r7, #16]
 800709a:	4638      	mov	r0, r7
 800709c:	f001 f9c4 	bl	8008428 <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	db25      	blt.n	80070f0 <quorem+0xec>
 80070a4:	4629      	mov	r1, r5
 80070a6:	2000      	movs	r0, #0
 80070a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80070ac:	f8d1 c000 	ldr.w	ip, [r1]
 80070b0:	fa1f fe82 	uxth.w	lr, r2
 80070b4:	fa1f f38c 	uxth.w	r3, ip
 80070b8:	eba3 030e 	sub.w	r3, r3, lr
 80070bc:	4403      	add	r3, r0
 80070be:	0c12      	lsrs	r2, r2, #16
 80070c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45c1      	cmp	r9, r8
 80070d0:	f841 3b04 	str.w	r3, [r1], #4
 80070d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070d8:	d2e6      	bcs.n	80070a8 <quorem+0xa4>
 80070da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e2:	b922      	cbnz	r2, 80070ee <quorem+0xea>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30b      	bcc.n	8007104 <quorem+0x100>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	3601      	adds	r6, #1
 80070f0:	4630      	mov	r0, r6
 80070f2:	b003      	add	sp, #12
 80070f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	3b04      	subs	r3, #4
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	d1cb      	bne.n	8007098 <quorem+0x94>
 8007100:	3c01      	subs	r4, #1
 8007102:	e7c6      	b.n	8007092 <quorem+0x8e>
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	3b04      	subs	r3, #4
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1ef      	bne.n	80070ec <quorem+0xe8>
 800710c:	3c01      	subs	r4, #1
 800710e:	e7ea      	b.n	80070e6 <quorem+0xe2>
 8007110:	2000      	movs	r0, #0
 8007112:	e7ee      	b.n	80070f2 <quorem+0xee>
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	69c7      	ldr	r7, [r0, #28]
 800711e:	b099      	sub	sp, #100	@ 0x64
 8007120:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007124:	ec55 4b10 	vmov	r4, r5, d0
 8007128:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800712a:	9109      	str	r1, [sp, #36]	@ 0x24
 800712c:	4683      	mov	fp, r0
 800712e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007130:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007132:	b97f      	cbnz	r7, 8007154 <_dtoa_r+0x3c>
 8007134:	2010      	movs	r0, #16
 8007136:	f000 fdfd 	bl	8007d34 <malloc>
 800713a:	4602      	mov	r2, r0
 800713c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007140:	b920      	cbnz	r0, 800714c <_dtoa_r+0x34>
 8007142:	4ba7      	ldr	r3, [pc, #668]	@ (80073e0 <_dtoa_r+0x2c8>)
 8007144:	21ef      	movs	r1, #239	@ 0xef
 8007146:	48a7      	ldr	r0, [pc, #668]	@ (80073e4 <_dtoa_r+0x2cc>)
 8007148:	f002 fc36 	bl	80099b8 <__assert_func>
 800714c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007150:	6007      	str	r7, [r0, #0]
 8007152:	60c7      	str	r7, [r0, #12]
 8007154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	b159      	cbz	r1, 8007174 <_dtoa_r+0x5c>
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	604a      	str	r2, [r1, #4]
 8007160:	2301      	movs	r3, #1
 8007162:	4093      	lsls	r3, r2
 8007164:	608b      	str	r3, [r1, #8]
 8007166:	4658      	mov	r0, fp
 8007168:	f000 feda 	bl	8007f20 <_Bfree>
 800716c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	1e2b      	subs	r3, r5, #0
 8007176:	bfb9      	ittee	lt
 8007178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800717c:	9303      	strlt	r3, [sp, #12]
 800717e:	2300      	movge	r3, #0
 8007180:	6033      	strge	r3, [r6, #0]
 8007182:	9f03      	ldr	r7, [sp, #12]
 8007184:	4b98      	ldr	r3, [pc, #608]	@ (80073e8 <_dtoa_r+0x2d0>)
 8007186:	bfbc      	itt	lt
 8007188:	2201      	movlt	r2, #1
 800718a:	6032      	strlt	r2, [r6, #0]
 800718c:	43bb      	bics	r3, r7
 800718e:	d112      	bne.n	80071b6 <_dtoa_r+0x9e>
 8007190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007192:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800719c:	4323      	orrs	r3, r4
 800719e:	f000 854d 	beq.w	8007c3c <_dtoa_r+0xb24>
 80071a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80073fc <_dtoa_r+0x2e4>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 854f 	beq.w	8007c4c <_dtoa_r+0xb34>
 80071ae:	f10a 0303 	add.w	r3, sl, #3
 80071b2:	f000 bd49 	b.w	8007c48 <_dtoa_r+0xb30>
 80071b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	ec51 0b17 	vmov	r0, r1, d7
 80071c0:	2300      	movs	r3, #0
 80071c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80071c6:	f7f9 fcaf 	bl	8000b28 <__aeabi_dcmpeq>
 80071ca:	4680      	mov	r8, r0
 80071cc:	b158      	cbz	r0, 80071e6 <_dtoa_r+0xce>
 80071ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071d0:	2301      	movs	r3, #1
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071d6:	b113      	cbz	r3, 80071de <_dtoa_r+0xc6>
 80071d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071da:	4b84      	ldr	r3, [pc, #528]	@ (80073ec <_dtoa_r+0x2d4>)
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007400 <_dtoa_r+0x2e8>
 80071e2:	f000 bd33 	b.w	8007c4c <_dtoa_r+0xb34>
 80071e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071ea:	aa16      	add	r2, sp, #88	@ 0x58
 80071ec:	a917      	add	r1, sp, #92	@ 0x5c
 80071ee:	4658      	mov	r0, fp
 80071f0:	f001 fa3a 	bl	8008668 <__d2b>
 80071f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071f8:	4681      	mov	r9, r0
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d077      	beq.n	80072ee <_dtoa_r+0x1d6>
 80071fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007200:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800720c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007218:	4619      	mov	r1, r3
 800721a:	2200      	movs	r2, #0
 800721c:	4b74      	ldr	r3, [pc, #464]	@ (80073f0 <_dtoa_r+0x2d8>)
 800721e:	f7f9 f863 	bl	80002e8 <__aeabi_dsub>
 8007222:	a369      	add	r3, pc, #420	@ (adr r3, 80073c8 <_dtoa_r+0x2b0>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 fa16 	bl	8000658 <__aeabi_dmul>
 800722c:	a368      	add	r3, pc, #416	@ (adr r3, 80073d0 <_dtoa_r+0x2b8>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f7f9 f85b 	bl	80002ec <__adddf3>
 8007236:	4604      	mov	r4, r0
 8007238:	4630      	mov	r0, r6
 800723a:	460d      	mov	r5, r1
 800723c:	f7f9 f9a2 	bl	8000584 <__aeabi_i2d>
 8007240:	a365      	add	r3, pc, #404	@ (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f9 fa07 	bl	8000658 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 f84b 	bl	80002ec <__adddf3>
 8007256:	4604      	mov	r4, r0
 8007258:	460d      	mov	r5, r1
 800725a:	f7f9 fcad 	bl	8000bb8 <__aeabi_d2iz>
 800725e:	2200      	movs	r2, #0
 8007260:	4607      	mov	r7, r0
 8007262:	2300      	movs	r3, #0
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 fc68 	bl	8000b3c <__aeabi_dcmplt>
 800726c:	b140      	cbz	r0, 8007280 <_dtoa_r+0x168>
 800726e:	4638      	mov	r0, r7
 8007270:	f7f9 f988 	bl	8000584 <__aeabi_i2d>
 8007274:	4622      	mov	r2, r4
 8007276:	462b      	mov	r3, r5
 8007278:	f7f9 fc56 	bl	8000b28 <__aeabi_dcmpeq>
 800727c:	b900      	cbnz	r0, 8007280 <_dtoa_r+0x168>
 800727e:	3f01      	subs	r7, #1
 8007280:	2f16      	cmp	r7, #22
 8007282:	d851      	bhi.n	8007328 <_dtoa_r+0x210>
 8007284:	4b5b      	ldr	r3, [pc, #364]	@ (80073f4 <_dtoa_r+0x2dc>)
 8007286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007292:	f7f9 fc53 	bl	8000b3c <__aeabi_dcmplt>
 8007296:	2800      	cmp	r0, #0
 8007298:	d048      	beq.n	800732c <_dtoa_r+0x214>
 800729a:	3f01      	subs	r7, #1
 800729c:	2300      	movs	r3, #0
 800729e:	9312      	str	r3, [sp, #72]	@ 0x48
 80072a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072a2:	1b9b      	subs	r3, r3, r6
 80072a4:	1e5a      	subs	r2, r3, #1
 80072a6:	bf44      	itt	mi
 80072a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80072ac:	2300      	movmi	r3, #0
 80072ae:	9208      	str	r2, [sp, #32]
 80072b0:	bf54      	ite	pl
 80072b2:	f04f 0800 	movpl.w	r8, #0
 80072b6:	9308      	strmi	r3, [sp, #32]
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	db39      	blt.n	8007330 <_dtoa_r+0x218>
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80072c0:	443b      	add	r3, r7
 80072c2:	9308      	str	r3, [sp, #32]
 80072c4:	2300      	movs	r3, #0
 80072c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d864      	bhi.n	8007398 <_dtoa_r+0x280>
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	bfc4      	itt	gt
 80072d2:	3b04      	subgt	r3, #4
 80072d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80072d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d8:	f1a3 0302 	sub.w	r3, r3, #2
 80072dc:	bfcc      	ite	gt
 80072de:	2400      	movgt	r4, #0
 80072e0:	2401      	movle	r4, #1
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d863      	bhi.n	80073ae <_dtoa_r+0x296>
 80072e6:	e8df f003 	tbb	[pc, r3]
 80072ea:	372a      	.short	0x372a
 80072ec:	5535      	.short	0x5535
 80072ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072f2:	441e      	add	r6, r3
 80072f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	bfc1      	itttt	gt
 80072fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007300:	409f      	lslgt	r7, r3
 8007302:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007306:	fa24 f303 	lsrgt.w	r3, r4, r3
 800730a:	bfd6      	itet	le
 800730c:	f1c3 0320 	rsble	r3, r3, #32
 8007310:	ea47 0003 	orrgt.w	r0, r7, r3
 8007314:	fa04 f003 	lslle.w	r0, r4, r3
 8007318:	f7f9 f924 	bl	8000564 <__aeabi_ui2d>
 800731c:	2201      	movs	r2, #1
 800731e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007322:	3e01      	subs	r6, #1
 8007324:	9214      	str	r2, [sp, #80]	@ 0x50
 8007326:	e777      	b.n	8007218 <_dtoa_r+0x100>
 8007328:	2301      	movs	r3, #1
 800732a:	e7b8      	b.n	800729e <_dtoa_r+0x186>
 800732c:	9012      	str	r0, [sp, #72]	@ 0x48
 800732e:	e7b7      	b.n	80072a0 <_dtoa_r+0x188>
 8007330:	427b      	negs	r3, r7
 8007332:	930a      	str	r3, [sp, #40]	@ 0x28
 8007334:	2300      	movs	r3, #0
 8007336:	eba8 0807 	sub.w	r8, r8, r7
 800733a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800733c:	e7c4      	b.n	80072c8 <_dtoa_r+0x1b0>
 800733e:	2300      	movs	r3, #0
 8007340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc35      	bgt.n	80073b4 <_dtoa_r+0x29c>
 8007348:	2301      	movs	r3, #1
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	9307      	str	r3, [sp, #28]
 800734e:	461a      	mov	r2, r3
 8007350:	920e      	str	r2, [sp, #56]	@ 0x38
 8007352:	e00b      	b.n	800736c <_dtoa_r+0x254>
 8007354:	2301      	movs	r3, #1
 8007356:	e7f3      	b.n	8007340 <_dtoa_r+0x228>
 8007358:	2300      	movs	r3, #0
 800735a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800735c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800735e:	18fb      	adds	r3, r7, r3
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	2b01      	cmp	r3, #1
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	bfb8      	it	lt
 800736a:	2301      	movlt	r3, #1
 800736c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007370:	2100      	movs	r1, #0
 8007372:	2204      	movs	r2, #4
 8007374:	f102 0514 	add.w	r5, r2, #20
 8007378:	429d      	cmp	r5, r3
 800737a:	d91f      	bls.n	80073bc <_dtoa_r+0x2a4>
 800737c:	6041      	str	r1, [r0, #4]
 800737e:	4658      	mov	r0, fp
 8007380:	f000 fd8e 	bl	8007ea0 <_Balloc>
 8007384:	4682      	mov	sl, r0
 8007386:	2800      	cmp	r0, #0
 8007388:	d13c      	bne.n	8007404 <_dtoa_r+0x2ec>
 800738a:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <_dtoa_r+0x2e0>)
 800738c:	4602      	mov	r2, r0
 800738e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007392:	e6d8      	b.n	8007146 <_dtoa_r+0x2e>
 8007394:	2301      	movs	r3, #1
 8007396:	e7e0      	b.n	800735a <_dtoa_r+0x242>
 8007398:	2401      	movs	r4, #1
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	@ 0x24
 800739e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	2200      	movs	r2, #0
 80073aa:	2312      	movs	r3, #18
 80073ac:	e7d0      	b.n	8007350 <_dtoa_r+0x238>
 80073ae:	2301      	movs	r3, #1
 80073b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073b2:	e7f5      	b.n	80073a0 <_dtoa_r+0x288>
 80073b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	9307      	str	r3, [sp, #28]
 80073ba:	e7d7      	b.n	800736c <_dtoa_r+0x254>
 80073bc:	3101      	adds	r1, #1
 80073be:	0052      	lsls	r2, r2, #1
 80073c0:	e7d8      	b.n	8007374 <_dtoa_r+0x25c>
 80073c2:	bf00      	nop
 80073c4:	f3af 8000 	nop.w
 80073c8:	636f4361 	.word	0x636f4361
 80073cc:	3fd287a7 	.word	0x3fd287a7
 80073d0:	8b60c8b3 	.word	0x8b60c8b3
 80073d4:	3fc68a28 	.word	0x3fc68a28
 80073d8:	509f79fb 	.word	0x509f79fb
 80073dc:	3fd34413 	.word	0x3fd34413
 80073e0:	0800a812 	.word	0x0800a812
 80073e4:	0800a829 	.word	0x0800a829
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	0800a7dd 	.word	0x0800a7dd
 80073f0:	3ff80000 	.word	0x3ff80000
 80073f4:	0800a920 	.word	0x0800a920
 80073f8:	0800a881 	.word	0x0800a881
 80073fc:	0800a80e 	.word	0x0800a80e
 8007400:	0800a7dc 	.word	0x0800a7dc
 8007404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	9b07      	ldr	r3, [sp, #28]
 800740c:	2b0e      	cmp	r3, #14
 800740e:	f200 80a4 	bhi.w	800755a <_dtoa_r+0x442>
 8007412:	2c00      	cmp	r4, #0
 8007414:	f000 80a1 	beq.w	800755a <_dtoa_r+0x442>
 8007418:	2f00      	cmp	r7, #0
 800741a:	dd33      	ble.n	8007484 <_dtoa_r+0x36c>
 800741c:	4bad      	ldr	r3, [pc, #692]	@ (80076d4 <_dtoa_r+0x5bc>)
 800741e:	f007 020f 	and.w	r2, r7, #15
 8007422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007426:	ed93 7b00 	vldr	d7, [r3]
 800742a:	05f8      	lsls	r0, r7, #23
 800742c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007434:	d516      	bpl.n	8007464 <_dtoa_r+0x34c>
 8007436:	4ba8      	ldr	r3, [pc, #672]	@ (80076d8 <_dtoa_r+0x5c0>)
 8007438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800743c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007440:	f7f9 fa34 	bl	80008ac <__aeabi_ddiv>
 8007444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007448:	f004 040f 	and.w	r4, r4, #15
 800744c:	2603      	movs	r6, #3
 800744e:	4da2      	ldr	r5, [pc, #648]	@ (80076d8 <_dtoa_r+0x5c0>)
 8007450:	b954      	cbnz	r4, 8007468 <_dtoa_r+0x350>
 8007452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745a:	f7f9 fa27 	bl	80008ac <__aeabi_ddiv>
 800745e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007462:	e028      	b.n	80074b6 <_dtoa_r+0x39e>
 8007464:	2602      	movs	r6, #2
 8007466:	e7f2      	b.n	800744e <_dtoa_r+0x336>
 8007468:	07e1      	lsls	r1, r4, #31
 800746a:	d508      	bpl.n	800747e <_dtoa_r+0x366>
 800746c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007474:	f7f9 f8f0 	bl	8000658 <__aeabi_dmul>
 8007478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800747c:	3601      	adds	r6, #1
 800747e:	1064      	asrs	r4, r4, #1
 8007480:	3508      	adds	r5, #8
 8007482:	e7e5      	b.n	8007450 <_dtoa_r+0x338>
 8007484:	f000 80d2 	beq.w	800762c <_dtoa_r+0x514>
 8007488:	427c      	negs	r4, r7
 800748a:	4b92      	ldr	r3, [pc, #584]	@ (80076d4 <_dtoa_r+0x5bc>)
 800748c:	4d92      	ldr	r5, [pc, #584]	@ (80076d8 <_dtoa_r+0x5c0>)
 800748e:	f004 020f 	and.w	r2, r4, #15
 8007492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800749e:	f7f9 f8db 	bl	8000658 <__aeabi_dmul>
 80074a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a6:	1124      	asrs	r4, r4, #4
 80074a8:	2300      	movs	r3, #0
 80074aa:	2602      	movs	r6, #2
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	f040 80b2 	bne.w	8007616 <_dtoa_r+0x4fe>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d3      	bne.n	800745e <_dtoa_r+0x346>
 80074b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80b7 	beq.w	8007630 <_dtoa_r+0x518>
 80074c2:	4b86      	ldr	r3, [pc, #536]	@ (80076dc <_dtoa_r+0x5c4>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f9 fb37 	bl	8000b3c <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f000 80ae 	beq.w	8007630 <_dtoa_r+0x518>
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80aa 	beq.w	8007630 <_dtoa_r+0x518>
 80074dc:	9b00      	ldr	r3, [sp, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd37      	ble.n	8007552 <_dtoa_r+0x43a>
 80074e2:	1e7b      	subs	r3, r7, #1
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	4620      	mov	r0, r4
 80074e8:	4b7d      	ldr	r3, [pc, #500]	@ (80076e0 <_dtoa_r+0x5c8>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7f9 f8b3 	bl	8000658 <__aeabi_dmul>
 80074f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f6:	9c00      	ldr	r4, [sp, #0]
 80074f8:	3601      	adds	r6, #1
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7f9 f842 	bl	8000584 <__aeabi_i2d>
 8007500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007504:	f7f9 f8a8 	bl	8000658 <__aeabi_dmul>
 8007508:	4b76      	ldr	r3, [pc, #472]	@ (80076e4 <_dtoa_r+0x5cc>)
 800750a:	2200      	movs	r2, #0
 800750c:	f7f8 feee 	bl	80002ec <__adddf3>
 8007510:	4605      	mov	r5, r0
 8007512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007516:	2c00      	cmp	r4, #0
 8007518:	f040 808d 	bne.w	8007636 <_dtoa_r+0x51e>
 800751c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007520:	4b71      	ldr	r3, [pc, #452]	@ (80076e8 <_dtoa_r+0x5d0>)
 8007522:	2200      	movs	r2, #0
 8007524:	f7f8 fee0 	bl	80002e8 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007530:	462a      	mov	r2, r5
 8007532:	4633      	mov	r3, r6
 8007534:	f7f9 fb20 	bl	8000b78 <__aeabi_dcmpgt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 828b 	bne.w	8007a54 <_dtoa_r+0x93c>
 800753e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007542:	462a      	mov	r2, r5
 8007544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007548:	f7f9 faf8 	bl	8000b3c <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f040 8128 	bne.w	80077a2 <_dtoa_r+0x68a>
 8007552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800755a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800755c:	2b00      	cmp	r3, #0
 800755e:	f2c0 815a 	blt.w	8007816 <_dtoa_r+0x6fe>
 8007562:	2f0e      	cmp	r7, #14
 8007564:	f300 8157 	bgt.w	8007816 <_dtoa_r+0x6fe>
 8007568:	4b5a      	ldr	r3, [pc, #360]	@ (80076d4 <_dtoa_r+0x5bc>)
 800756a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800756e:	ed93 7b00 	vldr	d7, [r3]
 8007572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	ed8d 7b00 	vstr	d7, [sp]
 800757a:	da03      	bge.n	8007584 <_dtoa_r+0x46c>
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f340 8101 	ble.w	8007786 <_dtoa_r+0x66e>
 8007584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007588:	4656      	mov	r6, sl
 800758a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 f98b 	bl	80008ac <__aeabi_ddiv>
 8007596:	f7f9 fb0f 	bl	8000bb8 <__aeabi_d2iz>
 800759a:	4680      	mov	r8, r0
 800759c:	f7f8 fff2 	bl	8000584 <__aeabi_i2d>
 80075a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a4:	f7f9 f858 	bl	8000658 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075b4:	f7f8 fe98 	bl	80002e8 <__aeabi_dsub>
 80075b8:	f806 4b01 	strb.w	r4, [r6], #1
 80075bc:	9d07      	ldr	r5, [sp, #28]
 80075be:	eba6 040a 	sub.w	r4, r6, sl
 80075c2:	42a5      	cmp	r5, r4
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	f040 8117 	bne.w	80077fa <_dtoa_r+0x6e2>
 80075cc:	f7f8 fe8e 	bl	80002ec <__adddf3>
 80075d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	f7f9 face 	bl	8000b78 <__aeabi_dcmpgt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f040 80f9 	bne.w	80077d4 <_dtoa_r+0x6bc>
 80075e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f9 fa9d 	bl	8000b28 <__aeabi_dcmpeq>
 80075ee:	b118      	cbz	r0, 80075f8 <_dtoa_r+0x4e0>
 80075f0:	f018 0f01 	tst.w	r8, #1
 80075f4:	f040 80ee 	bne.w	80077d4 <_dtoa_r+0x6bc>
 80075f8:	4649      	mov	r1, r9
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fc90 	bl	8007f20 <_Bfree>
 8007600:	2300      	movs	r3, #0
 8007602:	7033      	strb	r3, [r6, #0]
 8007604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007606:	3701      	adds	r7, #1
 8007608:	601f      	str	r7, [r3, #0]
 800760a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 831d 	beq.w	8007c4c <_dtoa_r+0xb34>
 8007612:	601e      	str	r6, [r3, #0]
 8007614:	e31a      	b.n	8007c4c <_dtoa_r+0xb34>
 8007616:	07e2      	lsls	r2, r4, #31
 8007618:	d505      	bpl.n	8007626 <_dtoa_r+0x50e>
 800761a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800761e:	f7f9 f81b 	bl	8000658 <__aeabi_dmul>
 8007622:	3601      	adds	r6, #1
 8007624:	2301      	movs	r3, #1
 8007626:	1064      	asrs	r4, r4, #1
 8007628:	3508      	adds	r5, #8
 800762a:	e73f      	b.n	80074ac <_dtoa_r+0x394>
 800762c:	2602      	movs	r6, #2
 800762e:	e742      	b.n	80074b6 <_dtoa_r+0x39e>
 8007630:	9c07      	ldr	r4, [sp, #28]
 8007632:	9704      	str	r7, [sp, #16]
 8007634:	e761      	b.n	80074fa <_dtoa_r+0x3e2>
 8007636:	4b27      	ldr	r3, [pc, #156]	@ (80076d4 <_dtoa_r+0x5bc>)
 8007638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800763a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800763e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007642:	4454      	add	r4, sl
 8007644:	2900      	cmp	r1, #0
 8007646:	d053      	beq.n	80076f0 <_dtoa_r+0x5d8>
 8007648:	4928      	ldr	r1, [pc, #160]	@ (80076ec <_dtoa_r+0x5d4>)
 800764a:	2000      	movs	r0, #0
 800764c:	f7f9 f92e 	bl	80008ac <__aeabi_ddiv>
 8007650:	4633      	mov	r3, r6
 8007652:	462a      	mov	r2, r5
 8007654:	f7f8 fe48 	bl	80002e8 <__aeabi_dsub>
 8007658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800765c:	4656      	mov	r6, sl
 800765e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007662:	f7f9 faa9 	bl	8000bb8 <__aeabi_d2iz>
 8007666:	4605      	mov	r5, r0
 8007668:	f7f8 ff8c 	bl	8000584 <__aeabi_i2d>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007674:	f7f8 fe38 	bl	80002e8 <__aeabi_dsub>
 8007678:	3530      	adds	r5, #48	@ 0x30
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007682:	f806 5b01 	strb.w	r5, [r6], #1
 8007686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800768a:	f7f9 fa57 	bl	8000b3c <__aeabi_dcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	d171      	bne.n	8007776 <_dtoa_r+0x65e>
 8007692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007696:	4911      	ldr	r1, [pc, #68]	@ (80076dc <_dtoa_r+0x5c4>)
 8007698:	2000      	movs	r0, #0
 800769a:	f7f8 fe25 	bl	80002e8 <__aeabi_dsub>
 800769e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076a2:	f7f9 fa4b 	bl	8000b3c <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f040 8095 	bne.w	80077d6 <_dtoa_r+0x6be>
 80076ac:	42a6      	cmp	r6, r4
 80076ae:	f43f af50 	beq.w	8007552 <_dtoa_r+0x43a>
 80076b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076b6:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <_dtoa_r+0x5c8>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	f7f8 ffcd 	bl	8000658 <__aeabi_dmul>
 80076be:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <_dtoa_r+0x5c8>)
 80076c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076c4:	2200      	movs	r2, #0
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	f7f8 ffc5 	bl	8000658 <__aeabi_dmul>
 80076ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d2:	e7c4      	b.n	800765e <_dtoa_r+0x546>
 80076d4:	0800a920 	.word	0x0800a920
 80076d8:	0800a8f8 	.word	0x0800a8f8
 80076dc:	3ff00000 	.word	0x3ff00000
 80076e0:	40240000 	.word	0x40240000
 80076e4:	401c0000 	.word	0x401c0000
 80076e8:	40140000 	.word	0x40140000
 80076ec:	3fe00000 	.word	0x3fe00000
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	f7f8 ffb0 	bl	8000658 <__aeabi_dmul>
 80076f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80076fe:	4656      	mov	r6, sl
 8007700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007704:	f7f9 fa58 	bl	8000bb8 <__aeabi_d2iz>
 8007708:	4605      	mov	r5, r0
 800770a:	f7f8 ff3b 	bl	8000584 <__aeabi_i2d>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007716:	f7f8 fde7 	bl	80002e8 <__aeabi_dsub>
 800771a:	3530      	adds	r5, #48	@ 0x30
 800771c:	f806 5b01 	strb.w	r5, [r6], #1
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	42a6      	cmp	r6, r4
 8007726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	d124      	bne.n	800777a <_dtoa_r+0x662>
 8007730:	4bac      	ldr	r3, [pc, #688]	@ (80079e4 <_dtoa_r+0x8cc>)
 8007732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007736:	f7f8 fdd9 	bl	80002ec <__adddf3>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007742:	f7f9 fa19 	bl	8000b78 <__aeabi_dcmpgt>
 8007746:	2800      	cmp	r0, #0
 8007748:	d145      	bne.n	80077d6 <_dtoa_r+0x6be>
 800774a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800774e:	49a5      	ldr	r1, [pc, #660]	@ (80079e4 <_dtoa_r+0x8cc>)
 8007750:	2000      	movs	r0, #0
 8007752:	f7f8 fdc9 	bl	80002e8 <__aeabi_dsub>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775e:	f7f9 f9ed 	bl	8000b3c <__aeabi_dcmplt>
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f aef5 	beq.w	8007552 <_dtoa_r+0x43a>
 8007768:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800776a:	1e73      	subs	r3, r6, #1
 800776c:	9315      	str	r3, [sp, #84]	@ 0x54
 800776e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007772:	2b30      	cmp	r3, #48	@ 0x30
 8007774:	d0f8      	beq.n	8007768 <_dtoa_r+0x650>
 8007776:	9f04      	ldr	r7, [sp, #16]
 8007778:	e73e      	b.n	80075f8 <_dtoa_r+0x4e0>
 800777a:	4b9b      	ldr	r3, [pc, #620]	@ (80079e8 <_dtoa_r+0x8d0>)
 800777c:	f7f8 ff6c 	bl	8000658 <__aeabi_dmul>
 8007780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007784:	e7bc      	b.n	8007700 <_dtoa_r+0x5e8>
 8007786:	d10c      	bne.n	80077a2 <_dtoa_r+0x68a>
 8007788:	4b98      	ldr	r3, [pc, #608]	@ (80079ec <_dtoa_r+0x8d4>)
 800778a:	2200      	movs	r2, #0
 800778c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007790:	f7f8 ff62 	bl	8000658 <__aeabi_dmul>
 8007794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007798:	f7f9 f9e4 	bl	8000b64 <__aeabi_dcmpge>
 800779c:	2800      	cmp	r0, #0
 800779e:	f000 8157 	beq.w	8007a50 <_dtoa_r+0x938>
 80077a2:	2400      	movs	r4, #0
 80077a4:	4625      	mov	r5, r4
 80077a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077a8:	43db      	mvns	r3, r3
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	4656      	mov	r6, sl
 80077ae:	2700      	movs	r7, #0
 80077b0:	4621      	mov	r1, r4
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fbb4 	bl	8007f20 <_Bfree>
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	d0dc      	beq.n	8007776 <_dtoa_r+0x65e>
 80077bc:	b12f      	cbz	r7, 80077ca <_dtoa_r+0x6b2>
 80077be:	42af      	cmp	r7, r5
 80077c0:	d003      	beq.n	80077ca <_dtoa_r+0x6b2>
 80077c2:	4639      	mov	r1, r7
 80077c4:	4658      	mov	r0, fp
 80077c6:	f000 fbab 	bl	8007f20 <_Bfree>
 80077ca:	4629      	mov	r1, r5
 80077cc:	4658      	mov	r0, fp
 80077ce:	f000 fba7 	bl	8007f20 <_Bfree>
 80077d2:	e7d0      	b.n	8007776 <_dtoa_r+0x65e>
 80077d4:	9704      	str	r7, [sp, #16]
 80077d6:	4633      	mov	r3, r6
 80077d8:	461e      	mov	r6, r3
 80077da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077de:	2a39      	cmp	r2, #57	@ 0x39
 80077e0:	d107      	bne.n	80077f2 <_dtoa_r+0x6da>
 80077e2:	459a      	cmp	sl, r3
 80077e4:	d1f8      	bne.n	80077d8 <_dtoa_r+0x6c0>
 80077e6:	9a04      	ldr	r2, [sp, #16]
 80077e8:	3201      	adds	r2, #1
 80077ea:	9204      	str	r2, [sp, #16]
 80077ec:	2230      	movs	r2, #48	@ 0x30
 80077ee:	f88a 2000 	strb.w	r2, [sl]
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	3201      	adds	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	e7bd      	b.n	8007776 <_dtoa_r+0x65e>
 80077fa:	4b7b      	ldr	r3, [pc, #492]	@ (80079e8 <_dtoa_r+0x8d0>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	f7f8 ff2b 	bl	8000658 <__aeabi_dmul>
 8007802:	2200      	movs	r2, #0
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	460d      	mov	r5, r1
 800780a:	f7f9 f98d 	bl	8000b28 <__aeabi_dcmpeq>
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f aebb 	beq.w	800758a <_dtoa_r+0x472>
 8007814:	e6f0      	b.n	80075f8 <_dtoa_r+0x4e0>
 8007816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007818:	2a00      	cmp	r2, #0
 800781a:	f000 80db 	beq.w	80079d4 <_dtoa_r+0x8bc>
 800781e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007820:	2a01      	cmp	r2, #1
 8007822:	f300 80bf 	bgt.w	80079a4 <_dtoa_r+0x88c>
 8007826:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007828:	2a00      	cmp	r2, #0
 800782a:	f000 80b7 	beq.w	800799c <_dtoa_r+0x884>
 800782e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007834:	4646      	mov	r6, r8
 8007836:	9a08      	ldr	r2, [sp, #32]
 8007838:	2101      	movs	r1, #1
 800783a:	441a      	add	r2, r3
 800783c:	4658      	mov	r0, fp
 800783e:	4498      	add	r8, r3
 8007840:	9208      	str	r2, [sp, #32]
 8007842:	f000 fc6b 	bl	800811c <__i2b>
 8007846:	4605      	mov	r5, r0
 8007848:	b15e      	cbz	r6, 8007862 <_dtoa_r+0x74a>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd08      	ble.n	8007862 <_dtoa_r+0x74a>
 8007850:	42b3      	cmp	r3, r6
 8007852:	9a08      	ldr	r2, [sp, #32]
 8007854:	bfa8      	it	ge
 8007856:	4633      	movge	r3, r6
 8007858:	eba8 0803 	sub.w	r8, r8, r3
 800785c:	1af6      	subs	r6, r6, r3
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	9308      	str	r3, [sp, #32]
 8007862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007864:	b1f3      	cbz	r3, 80078a4 <_dtoa_r+0x78c>
 8007866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 80b7 	beq.w	80079dc <_dtoa_r+0x8c4>
 800786e:	b18c      	cbz	r4, 8007894 <_dtoa_r+0x77c>
 8007870:	4629      	mov	r1, r5
 8007872:	4622      	mov	r2, r4
 8007874:	4658      	mov	r0, fp
 8007876:	f000 fd11 	bl	800829c <__pow5mult>
 800787a:	464a      	mov	r2, r9
 800787c:	4601      	mov	r1, r0
 800787e:	4605      	mov	r5, r0
 8007880:	4658      	mov	r0, fp
 8007882:	f000 fc61 	bl	8008148 <__multiply>
 8007886:	4649      	mov	r1, r9
 8007888:	9004      	str	r0, [sp, #16]
 800788a:	4658      	mov	r0, fp
 800788c:	f000 fb48 	bl	8007f20 <_Bfree>
 8007890:	9b04      	ldr	r3, [sp, #16]
 8007892:	4699      	mov	r9, r3
 8007894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007896:	1b1a      	subs	r2, r3, r4
 8007898:	d004      	beq.n	80078a4 <_dtoa_r+0x78c>
 800789a:	4649      	mov	r1, r9
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fcfd 	bl	800829c <__pow5mult>
 80078a2:	4681      	mov	r9, r0
 80078a4:	2101      	movs	r1, #1
 80078a6:	4658      	mov	r0, fp
 80078a8:	f000 fc38 	bl	800811c <__i2b>
 80078ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ae:	4604      	mov	r4, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 81cf 	beq.w	8007c54 <_dtoa_r+0xb3c>
 80078b6:	461a      	mov	r2, r3
 80078b8:	4601      	mov	r1, r0
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fcee 	bl	800829c <__pow5mult>
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	4604      	mov	r4, r0
 80078c6:	f300 8095 	bgt.w	80079f4 <_dtoa_r+0x8dc>
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8087 	bne.w	80079e0 <_dtoa_r+0x8c8>
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 8089 	bne.w	80079f0 <_dtoa_r+0x8d8>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078e4:	0d1b      	lsrs	r3, r3, #20
 80078e6:	051b      	lsls	r3, r3, #20
 80078e8:	b12b      	cbz	r3, 80078f6 <_dtoa_r+0x7de>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	3301      	adds	r3, #1
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	f108 0801 	add.w	r8, r8, #1
 80078f4:	2301      	movs	r3, #1
 80078f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 81b0 	beq.w	8007c60 <_dtoa_r+0xb48>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007906:	6918      	ldr	r0, [r3, #16]
 8007908:	f000 fbbc 	bl	8008084 <__hi0bits>
 800790c:	f1c0 0020 	rsb	r0, r0, #32
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	4418      	add	r0, r3
 8007914:	f010 001f 	ands.w	r0, r0, #31
 8007918:	d077      	beq.n	8007a0a <_dtoa_r+0x8f2>
 800791a:	f1c0 0320 	rsb	r3, r0, #32
 800791e:	2b04      	cmp	r3, #4
 8007920:	dd6b      	ble.n	80079fa <_dtoa_r+0x8e2>
 8007922:	9b08      	ldr	r3, [sp, #32]
 8007924:	f1c0 001c 	rsb	r0, r0, #28
 8007928:	4403      	add	r3, r0
 800792a:	4480      	add	r8, r0
 800792c:	4406      	add	r6, r0
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	f1b8 0f00 	cmp.w	r8, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x82a>
 8007936:	4649      	mov	r1, r9
 8007938:	4642      	mov	r2, r8
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fd08 	bl	8008350 <__lshift>
 8007940:	4681      	mov	r9, r0
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dd05      	ble.n	8007954 <_dtoa_r+0x83c>
 8007948:	4621      	mov	r1, r4
 800794a:	461a      	mov	r2, r3
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fcff 	bl	8008350 <__lshift>
 8007952:	4604      	mov	r4, r0
 8007954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007956:	2b00      	cmp	r3, #0
 8007958:	d059      	beq.n	8007a0e <_dtoa_r+0x8f6>
 800795a:	4621      	mov	r1, r4
 800795c:	4648      	mov	r0, r9
 800795e:	f000 fd63 	bl	8008428 <__mcmp>
 8007962:	2800      	cmp	r0, #0
 8007964:	da53      	bge.n	8007a0e <_dtoa_r+0x8f6>
 8007966:	1e7b      	subs	r3, r7, #1
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	4649      	mov	r1, r9
 800796c:	2300      	movs	r3, #0
 800796e:	220a      	movs	r2, #10
 8007970:	4658      	mov	r0, fp
 8007972:	f000 faf7 	bl	8007f64 <__multadd>
 8007976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007978:	4681      	mov	r9, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8172 	beq.w	8007c64 <_dtoa_r+0xb4c>
 8007980:	2300      	movs	r3, #0
 8007982:	4629      	mov	r1, r5
 8007984:	220a      	movs	r2, #10
 8007986:	4658      	mov	r0, fp
 8007988:	f000 faec 	bl	8007f64 <__multadd>
 800798c:	9b00      	ldr	r3, [sp, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	4605      	mov	r5, r0
 8007992:	dc67      	bgt.n	8007a64 <_dtoa_r+0x94c>
 8007994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007996:	2b02      	cmp	r3, #2
 8007998:	dc41      	bgt.n	8007a1e <_dtoa_r+0x906>
 800799a:	e063      	b.n	8007a64 <_dtoa_r+0x94c>
 800799c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800799e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079a2:	e746      	b.n	8007832 <_dtoa_r+0x71a>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	1e5c      	subs	r4, r3, #1
 80079a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	bfbf      	itttt	lt
 80079ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079b4:	1ae3      	sublt	r3, r4, r3
 80079b6:	bfb4      	ite	lt
 80079b8:	18d2      	addlt	r2, r2, r3
 80079ba:	1b1c      	subge	r4, r3, r4
 80079bc:	9b07      	ldr	r3, [sp, #28]
 80079be:	bfbc      	itt	lt
 80079c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80079c2:	2400      	movlt	r4, #0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfb5      	itete	lt
 80079c8:	eba8 0603 	sublt.w	r6, r8, r3
 80079cc:	9b07      	ldrge	r3, [sp, #28]
 80079ce:	2300      	movlt	r3, #0
 80079d0:	4646      	movge	r6, r8
 80079d2:	e730      	b.n	8007836 <_dtoa_r+0x71e>
 80079d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079d8:	4646      	mov	r6, r8
 80079da:	e735      	b.n	8007848 <_dtoa_r+0x730>
 80079dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079de:	e75c      	b.n	800789a <_dtoa_r+0x782>
 80079e0:	2300      	movs	r3, #0
 80079e2:	e788      	b.n	80078f6 <_dtoa_r+0x7de>
 80079e4:	3fe00000 	.word	0x3fe00000
 80079e8:	40240000 	.word	0x40240000
 80079ec:	40140000 	.word	0x40140000
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	e780      	b.n	80078f6 <_dtoa_r+0x7de>
 80079f4:	2300      	movs	r3, #0
 80079f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079f8:	e782      	b.n	8007900 <_dtoa_r+0x7e8>
 80079fa:	d099      	beq.n	8007930 <_dtoa_r+0x818>
 80079fc:	9a08      	ldr	r2, [sp, #32]
 80079fe:	331c      	adds	r3, #28
 8007a00:	441a      	add	r2, r3
 8007a02:	4498      	add	r8, r3
 8007a04:	441e      	add	r6, r3
 8007a06:	9208      	str	r2, [sp, #32]
 8007a08:	e792      	b.n	8007930 <_dtoa_r+0x818>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	e7f6      	b.n	80079fc <_dtoa_r+0x8e4>
 8007a0e:	9b07      	ldr	r3, [sp, #28]
 8007a10:	9704      	str	r7, [sp, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dc20      	bgt.n	8007a58 <_dtoa_r+0x940>
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	dd1e      	ble.n	8007a5c <_dtoa_r+0x944>
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f47f aec0 	bne.w	80077a6 <_dtoa_r+0x68e>
 8007a26:	4621      	mov	r1, r4
 8007a28:	2205      	movs	r2, #5
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 fa9a 	bl	8007f64 <__multadd>
 8007a30:	4601      	mov	r1, r0
 8007a32:	4604      	mov	r4, r0
 8007a34:	4648      	mov	r0, r9
 8007a36:	f000 fcf7 	bl	8008428 <__mcmp>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f77f aeb3 	ble.w	80077a6 <_dtoa_r+0x68e>
 8007a40:	4656      	mov	r6, sl
 8007a42:	2331      	movs	r3, #49	@ 0x31
 8007a44:	f806 3b01 	strb.w	r3, [r6], #1
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	e6ae      	b.n	80077ae <_dtoa_r+0x696>
 8007a50:	9c07      	ldr	r4, [sp, #28]
 8007a52:	9704      	str	r7, [sp, #16]
 8007a54:	4625      	mov	r5, r4
 8007a56:	e7f3      	b.n	8007a40 <_dtoa_r+0x928>
 8007a58:	9b07      	ldr	r3, [sp, #28]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8104 	beq.w	8007c6c <_dtoa_r+0xb54>
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	dd05      	ble.n	8007a74 <_dtoa_r+0x95c>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	4658      	mov	r0, fp
 8007a6e:	f000 fc6f 	bl	8008350 <__lshift>
 8007a72:	4605      	mov	r5, r0
 8007a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d05a      	beq.n	8007b30 <_dtoa_r+0xa18>
 8007a7a:	6869      	ldr	r1, [r5, #4]
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fa0f 	bl	8007ea0 <_Balloc>
 8007a82:	4606      	mov	r6, r0
 8007a84:	b928      	cbnz	r0, 8007a92 <_dtoa_r+0x97a>
 8007a86:	4b84      	ldr	r3, [pc, #528]	@ (8007c98 <_dtoa_r+0xb80>)
 8007a88:	4602      	mov	r2, r0
 8007a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a8e:	f7ff bb5a 	b.w	8007146 <_dtoa_r+0x2e>
 8007a92:	692a      	ldr	r2, [r5, #16]
 8007a94:	3202      	adds	r2, #2
 8007a96:	0092      	lsls	r2, r2, #2
 8007a98:	f105 010c 	add.w	r1, r5, #12
 8007a9c:	300c      	adds	r0, #12
 8007a9e:	f001 ff75 	bl	800998c <memcpy>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f000 fc52 	bl	8008350 <__lshift>
 8007aac:	f10a 0301 	add.w	r3, sl, #1
 8007ab0:	9307      	str	r3, [sp, #28]
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	4453      	add	r3, sl
 8007ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	462f      	mov	r7, r5
 8007ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	4648      	mov	r0, r9
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	f7ff fa99 	bl	8007004 <quorem>
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	9002      	str	r0, [sp, #8]
 8007ad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ada:	4648      	mov	r0, r9
 8007adc:	f000 fca4 	bl	8008428 <__mcmp>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	9008      	str	r0, [sp, #32]
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	f000 fcba 	bl	8008460 <__mdiff>
 8007aec:	68c2      	ldr	r2, [r0, #12]
 8007aee:	4606      	mov	r6, r0
 8007af0:	bb02      	cbnz	r2, 8007b34 <_dtoa_r+0xa1c>
 8007af2:	4601      	mov	r1, r0
 8007af4:	4648      	mov	r0, r9
 8007af6:	f000 fc97 	bl	8008428 <__mcmp>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4631      	mov	r1, r6
 8007afe:	4658      	mov	r0, fp
 8007b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b02:	f000 fa0d 	bl	8007f20 <_Bfree>
 8007b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b0a:	9e07      	ldr	r6, [sp, #28]
 8007b0c:	ea43 0102 	orr.w	r1, r3, r2
 8007b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b12:	4319      	orrs	r1, r3
 8007b14:	d110      	bne.n	8007b38 <_dtoa_r+0xa20>
 8007b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b1a:	d029      	beq.n	8007b70 <_dtoa_r+0xa58>
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dd02      	ble.n	8007b28 <_dtoa_r+0xa10>
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	f883 8000 	strb.w	r8, [r3]
 8007b2e:	e63f      	b.n	80077b0 <_dtoa_r+0x698>
 8007b30:	4628      	mov	r0, r5
 8007b32:	e7bb      	b.n	8007aac <_dtoa_r+0x994>
 8007b34:	2201      	movs	r2, #1
 8007b36:	e7e1      	b.n	8007afc <_dtoa_r+0x9e4>
 8007b38:	9b08      	ldr	r3, [sp, #32]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db04      	blt.n	8007b48 <_dtoa_r+0xa30>
 8007b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b40:	430b      	orrs	r3, r1
 8007b42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b44:	430b      	orrs	r3, r1
 8007b46:	d120      	bne.n	8007b8a <_dtoa_r+0xa72>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	dded      	ble.n	8007b28 <_dtoa_r+0xa10>
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4658      	mov	r0, fp
 8007b52:	f000 fbfd 	bl	8008350 <__lshift>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4681      	mov	r9, r0
 8007b5a:	f000 fc65 	bl	8008428 <__mcmp>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	dc03      	bgt.n	8007b6a <_dtoa_r+0xa52>
 8007b62:	d1e1      	bne.n	8007b28 <_dtoa_r+0xa10>
 8007b64:	f018 0f01 	tst.w	r8, #1
 8007b68:	d0de      	beq.n	8007b28 <_dtoa_r+0xa10>
 8007b6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b6e:	d1d8      	bne.n	8007b22 <_dtoa_r+0xa0a>
 8007b70:	9a00      	ldr	r2, [sp, #0]
 8007b72:	2339      	movs	r3, #57	@ 0x39
 8007b74:	7013      	strb	r3, [r2, #0]
 8007b76:	4633      	mov	r3, r6
 8007b78:	461e      	mov	r6, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b80:	2a39      	cmp	r2, #57	@ 0x39
 8007b82:	d052      	beq.n	8007c2a <_dtoa_r+0xb12>
 8007b84:	3201      	adds	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e612      	b.n	80077b0 <_dtoa_r+0x698>
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	dd07      	ble.n	8007b9e <_dtoa_r+0xa86>
 8007b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b92:	d0ed      	beq.n	8007b70 <_dtoa_r+0xa58>
 8007b94:	9a00      	ldr	r2, [sp, #0]
 8007b96:	f108 0301 	add.w	r3, r8, #1
 8007b9a:	7013      	strb	r3, [r2, #0]
 8007b9c:	e608      	b.n	80077b0 <_dtoa_r+0x698>
 8007b9e:	9b07      	ldr	r3, [sp, #28]
 8007ba0:	9a07      	ldr	r2, [sp, #28]
 8007ba2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d028      	beq.n	8007bfe <_dtoa_r+0xae6>
 8007bac:	4649      	mov	r1, r9
 8007bae:	2300      	movs	r3, #0
 8007bb0:	220a      	movs	r2, #10
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 f9d6 	bl	8007f64 <__multadd>
 8007bb8:	42af      	cmp	r7, r5
 8007bba:	4681      	mov	r9, r0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	f04f 020a 	mov.w	r2, #10
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	d107      	bne.n	8007bda <_dtoa_r+0xac2>
 8007bca:	f000 f9cb 	bl	8007f64 <__multadd>
 8007bce:	4607      	mov	r7, r0
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	9b07      	ldr	r3, [sp, #28]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	9307      	str	r3, [sp, #28]
 8007bd8:	e774      	b.n	8007ac4 <_dtoa_r+0x9ac>
 8007bda:	f000 f9c3 	bl	8007f64 <__multadd>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4607      	mov	r7, r0
 8007be2:	2300      	movs	r3, #0
 8007be4:	220a      	movs	r2, #10
 8007be6:	4658      	mov	r0, fp
 8007be8:	f000 f9bc 	bl	8007f64 <__multadd>
 8007bec:	4605      	mov	r5, r0
 8007bee:	e7f0      	b.n	8007bd2 <_dtoa_r+0xaba>
 8007bf0:	9b00      	ldr	r3, [sp, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bfcc      	ite	gt
 8007bf6:	461e      	movgt	r6, r3
 8007bf8:	2601      	movle	r6, #1
 8007bfa:	4456      	add	r6, sl
 8007bfc:	2700      	movs	r7, #0
 8007bfe:	4649      	mov	r1, r9
 8007c00:	2201      	movs	r2, #1
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 fba4 	bl	8008350 <__lshift>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4681      	mov	r9, r0
 8007c0c:	f000 fc0c 	bl	8008428 <__mcmp>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	dcb0      	bgt.n	8007b76 <_dtoa_r+0xa5e>
 8007c14:	d102      	bne.n	8007c1c <_dtoa_r+0xb04>
 8007c16:	f018 0f01 	tst.w	r8, #1
 8007c1a:	d1ac      	bne.n	8007b76 <_dtoa_r+0xa5e>
 8007c1c:	4633      	mov	r3, r6
 8007c1e:	461e      	mov	r6, r3
 8007c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c24:	2a30      	cmp	r2, #48	@ 0x30
 8007c26:	d0fa      	beq.n	8007c1e <_dtoa_r+0xb06>
 8007c28:	e5c2      	b.n	80077b0 <_dtoa_r+0x698>
 8007c2a:	459a      	cmp	sl, r3
 8007c2c:	d1a4      	bne.n	8007b78 <_dtoa_r+0xa60>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	3301      	adds	r3, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	2331      	movs	r3, #49	@ 0x31
 8007c36:	f88a 3000 	strb.w	r3, [sl]
 8007c3a:	e5b9      	b.n	80077b0 <_dtoa_r+0x698>
 8007c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c9c <_dtoa_r+0xb84>
 8007c42:	b11b      	cbz	r3, 8007c4c <_dtoa_r+0xb34>
 8007c44:	f10a 0308 	add.w	r3, sl, #8
 8007c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	b019      	add	sp, #100	@ 0x64
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	f77f ae37 	ble.w	80078ca <_dtoa_r+0x7b2>
 8007c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c60:	2001      	movs	r0, #1
 8007c62:	e655      	b.n	8007910 <_dtoa_r+0x7f8>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f77f aed6 	ble.w	8007a18 <_dtoa_r+0x900>
 8007c6c:	4656      	mov	r6, sl
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4648      	mov	r0, r9
 8007c72:	f7ff f9c7 	bl	8007004 <quorem>
 8007c76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c7a:	f806 8b01 	strb.w	r8, [r6], #1
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	eba6 020a 	sub.w	r2, r6, sl
 8007c84:	4293      	cmp	r3, r2
 8007c86:	ddb3      	ble.n	8007bf0 <_dtoa_r+0xad8>
 8007c88:	4649      	mov	r1, r9
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	220a      	movs	r2, #10
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f000 f968 	bl	8007f64 <__multadd>
 8007c94:	4681      	mov	r9, r0
 8007c96:	e7ea      	b.n	8007c6e <_dtoa_r+0xb56>
 8007c98:	0800a881 	.word	0x0800a881
 8007c9c:	0800a805 	.word	0x0800a805

08007ca0 <_free_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d041      	beq.n	8007d2c <_free_r+0x8c>
 8007ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cac:	1f0c      	subs	r4, r1, #4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfb8      	it	lt
 8007cb2:	18e4      	addlt	r4, r4, r3
 8007cb4:	f000 f8e8 	bl	8007e88 <__malloc_lock>
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d30 <_free_r+0x90>)
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	b933      	cbnz	r3, 8007ccc <_free_r+0x2c>
 8007cbe:	6063      	str	r3, [r4, #4]
 8007cc0:	6014      	str	r4, [r2, #0]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc8:	f000 b8e4 	b.w	8007e94 <__malloc_unlock>
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	d908      	bls.n	8007ce2 <_free_r+0x42>
 8007cd0:	6820      	ldr	r0, [r4, #0]
 8007cd2:	1821      	adds	r1, r4, r0
 8007cd4:	428b      	cmp	r3, r1
 8007cd6:	bf01      	itttt	eq
 8007cd8:	6819      	ldreq	r1, [r3, #0]
 8007cda:	685b      	ldreq	r3, [r3, #4]
 8007cdc:	1809      	addeq	r1, r1, r0
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	e7ed      	b.n	8007cbe <_free_r+0x1e>
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	b10b      	cbz	r3, 8007cec <_free_r+0x4c>
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	d9fa      	bls.n	8007ce2 <_free_r+0x42>
 8007cec:	6811      	ldr	r1, [r2, #0]
 8007cee:	1850      	adds	r0, r2, r1
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d10b      	bne.n	8007d0c <_free_r+0x6c>
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	4401      	add	r1, r0
 8007cf8:	1850      	adds	r0, r2, r1
 8007cfa:	4283      	cmp	r3, r0
 8007cfc:	6011      	str	r1, [r2, #0]
 8007cfe:	d1e0      	bne.n	8007cc2 <_free_r+0x22>
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	6053      	str	r3, [r2, #4]
 8007d06:	4408      	add	r0, r1
 8007d08:	6010      	str	r0, [r2, #0]
 8007d0a:	e7da      	b.n	8007cc2 <_free_r+0x22>
 8007d0c:	d902      	bls.n	8007d14 <_free_r+0x74>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	e7d6      	b.n	8007cc2 <_free_r+0x22>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	1821      	adds	r1, r4, r0
 8007d18:	428b      	cmp	r3, r1
 8007d1a:	bf04      	itt	eq
 8007d1c:	6819      	ldreq	r1, [r3, #0]
 8007d1e:	685b      	ldreq	r3, [r3, #4]
 8007d20:	6063      	str	r3, [r4, #4]
 8007d22:	bf04      	itt	eq
 8007d24:	1809      	addeq	r1, r1, r0
 8007d26:	6021      	streq	r1, [r4, #0]
 8007d28:	6054      	str	r4, [r2, #4]
 8007d2a:	e7ca      	b.n	8007cc2 <_free_r+0x22>
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000634 	.word	0x20000634

08007d34 <malloc>:
 8007d34:	4b02      	ldr	r3, [pc, #8]	@ (8007d40 <malloc+0xc>)
 8007d36:	4601      	mov	r1, r0
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	f000 b825 	b.w	8007d88 <_malloc_r>
 8007d3e:	bf00      	nop
 8007d40:	2000016c 	.word	0x2000016c

08007d44 <sbrk_aligned>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4e0f      	ldr	r6, [pc, #60]	@ (8007d84 <sbrk_aligned+0x40>)
 8007d48:	460c      	mov	r4, r1
 8007d4a:	6831      	ldr	r1, [r6, #0]
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b911      	cbnz	r1, 8007d56 <sbrk_aligned+0x12>
 8007d50:	f001 fe0c 	bl	800996c <_sbrk_r>
 8007d54:	6030      	str	r0, [r6, #0]
 8007d56:	4621      	mov	r1, r4
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f001 fe07 	bl	800996c <_sbrk_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d103      	bne.n	8007d6a <sbrk_aligned+0x26>
 8007d62:	f04f 34ff 	mov.w	r4, #4294967295
 8007d66:	4620      	mov	r0, r4
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	1cc4      	adds	r4, r0, #3
 8007d6c:	f024 0403 	bic.w	r4, r4, #3
 8007d70:	42a0      	cmp	r0, r4
 8007d72:	d0f8      	beq.n	8007d66 <sbrk_aligned+0x22>
 8007d74:	1a21      	subs	r1, r4, r0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f001 fdf8 	bl	800996c <_sbrk_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d1f2      	bne.n	8007d66 <sbrk_aligned+0x22>
 8007d80:	e7ef      	b.n	8007d62 <sbrk_aligned+0x1e>
 8007d82:	bf00      	nop
 8007d84:	20000630 	.word	0x20000630

08007d88 <_malloc_r>:
 8007d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	1ccd      	adds	r5, r1, #3
 8007d8e:	f025 0503 	bic.w	r5, r5, #3
 8007d92:	3508      	adds	r5, #8
 8007d94:	2d0c      	cmp	r5, #12
 8007d96:	bf38      	it	cc
 8007d98:	250c      	movcc	r5, #12
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	db01      	blt.n	8007da4 <_malloc_r+0x1c>
 8007da0:	42a9      	cmp	r1, r5
 8007da2:	d904      	bls.n	8007dae <_malloc_r+0x26>
 8007da4:	230c      	movs	r3, #12
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	2000      	movs	r0, #0
 8007daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e84 <_malloc_r+0xfc>
 8007db2:	f000 f869 	bl	8007e88 <__malloc_lock>
 8007db6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dba:	461c      	mov	r4, r3
 8007dbc:	bb44      	cbnz	r4, 8007e10 <_malloc_r+0x88>
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff ffbf 	bl	8007d44 <sbrk_aligned>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	4604      	mov	r4, r0
 8007dca:	d158      	bne.n	8007e7e <_malloc_r+0xf6>
 8007dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8007dd0:	4627      	mov	r7, r4
 8007dd2:	2f00      	cmp	r7, #0
 8007dd4:	d143      	bne.n	8007e5e <_malloc_r+0xd6>
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d04b      	beq.n	8007e72 <_malloc_r+0xea>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	4639      	mov	r1, r7
 8007dde:	4630      	mov	r0, r6
 8007de0:	eb04 0903 	add.w	r9, r4, r3
 8007de4:	f001 fdc2 	bl	800996c <_sbrk_r>
 8007de8:	4581      	cmp	r9, r0
 8007dea:	d142      	bne.n	8007e72 <_malloc_r+0xea>
 8007dec:	6821      	ldr	r1, [r4, #0]
 8007dee:	1a6d      	subs	r5, r5, r1
 8007df0:	4629      	mov	r1, r5
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ffa6 	bl	8007d44 <sbrk_aligned>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d03a      	beq.n	8007e72 <_malloc_r+0xea>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	442b      	add	r3, r5
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	f8d8 3000 	ldr.w	r3, [r8]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	bb62      	cbnz	r2, 8007e64 <_malloc_r+0xdc>
 8007e0a:	f8c8 7000 	str.w	r7, [r8]
 8007e0e:	e00f      	b.n	8007e30 <_malloc_r+0xa8>
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	1b52      	subs	r2, r2, r5
 8007e14:	d420      	bmi.n	8007e58 <_malloc_r+0xd0>
 8007e16:	2a0b      	cmp	r2, #11
 8007e18:	d917      	bls.n	8007e4a <_malloc_r+0xc2>
 8007e1a:	1961      	adds	r1, r4, r5
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	6025      	str	r5, [r4, #0]
 8007e20:	bf18      	it	ne
 8007e22:	6059      	strne	r1, [r3, #4]
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	bf08      	it	eq
 8007e28:	f8c8 1000 	streq.w	r1, [r8]
 8007e2c:	5162      	str	r2, [r4, r5]
 8007e2e:	604b      	str	r3, [r1, #4]
 8007e30:	4630      	mov	r0, r6
 8007e32:	f000 f82f 	bl	8007e94 <__malloc_unlock>
 8007e36:	f104 000b 	add.w	r0, r4, #11
 8007e3a:	1d23      	adds	r3, r4, #4
 8007e3c:	f020 0007 	bic.w	r0, r0, #7
 8007e40:	1ac2      	subs	r2, r0, r3
 8007e42:	bf1c      	itt	ne
 8007e44:	1a1b      	subne	r3, r3, r0
 8007e46:	50a3      	strne	r3, [r4, r2]
 8007e48:	e7af      	b.n	8007daa <_malloc_r+0x22>
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	bf0c      	ite	eq
 8007e50:	f8c8 2000 	streq.w	r2, [r8]
 8007e54:	605a      	strne	r2, [r3, #4]
 8007e56:	e7eb      	b.n	8007e30 <_malloc_r+0xa8>
 8007e58:	4623      	mov	r3, r4
 8007e5a:	6864      	ldr	r4, [r4, #4]
 8007e5c:	e7ae      	b.n	8007dbc <_malloc_r+0x34>
 8007e5e:	463c      	mov	r4, r7
 8007e60:	687f      	ldr	r7, [r7, #4]
 8007e62:	e7b6      	b.n	8007dd2 <_malloc_r+0x4a>
 8007e64:	461a      	mov	r2, r3
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	d1fb      	bne.n	8007e64 <_malloc_r+0xdc>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6053      	str	r3, [r2, #4]
 8007e70:	e7de      	b.n	8007e30 <_malloc_r+0xa8>
 8007e72:	230c      	movs	r3, #12
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 f80c 	bl	8007e94 <__malloc_unlock>
 8007e7c:	e794      	b.n	8007da8 <_malloc_r+0x20>
 8007e7e:	6005      	str	r5, [r0, #0]
 8007e80:	e7d6      	b.n	8007e30 <_malloc_r+0xa8>
 8007e82:	bf00      	nop
 8007e84:	20000634 	.word	0x20000634

08007e88 <__malloc_lock>:
 8007e88:	4801      	ldr	r0, [pc, #4]	@ (8007e90 <__malloc_lock+0x8>)
 8007e8a:	f7ff b8b2 	b.w	8006ff2 <__retarget_lock_acquire_recursive>
 8007e8e:	bf00      	nop
 8007e90:	2000062c 	.word	0x2000062c

08007e94 <__malloc_unlock>:
 8007e94:	4801      	ldr	r0, [pc, #4]	@ (8007e9c <__malloc_unlock+0x8>)
 8007e96:	f7ff b8ad 	b.w	8006ff4 <__retarget_lock_release_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	2000062c 	.word	0x2000062c

08007ea0 <_Balloc>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	69c6      	ldr	r6, [r0, #28]
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	460d      	mov	r5, r1
 8007ea8:	b976      	cbnz	r6, 8007ec8 <_Balloc+0x28>
 8007eaa:	2010      	movs	r0, #16
 8007eac:	f7ff ff42 	bl	8007d34 <malloc>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	61e0      	str	r0, [r4, #28]
 8007eb4:	b920      	cbnz	r0, 8007ec0 <_Balloc+0x20>
 8007eb6:	4b18      	ldr	r3, [pc, #96]	@ (8007f18 <_Balloc+0x78>)
 8007eb8:	4818      	ldr	r0, [pc, #96]	@ (8007f1c <_Balloc+0x7c>)
 8007eba:	216b      	movs	r1, #107	@ 0x6b
 8007ebc:	f001 fd7c 	bl	80099b8 <__assert_func>
 8007ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ec4:	6006      	str	r6, [r0, #0]
 8007ec6:	60c6      	str	r6, [r0, #12]
 8007ec8:	69e6      	ldr	r6, [r4, #28]
 8007eca:	68f3      	ldr	r3, [r6, #12]
 8007ecc:	b183      	cbz	r3, 8007ef0 <_Balloc+0x50>
 8007ece:	69e3      	ldr	r3, [r4, #28]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ed6:	b9b8      	cbnz	r0, 8007f08 <_Balloc+0x68>
 8007ed8:	2101      	movs	r1, #1
 8007eda:	fa01 f605 	lsl.w	r6, r1, r5
 8007ede:	1d72      	adds	r2, r6, #5
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f001 fd86 	bl	80099f4 <_calloc_r>
 8007ee8:	b160      	cbz	r0, 8007f04 <_Balloc+0x64>
 8007eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eee:	e00e      	b.n	8007f0e <_Balloc+0x6e>
 8007ef0:	2221      	movs	r2, #33	@ 0x21
 8007ef2:	2104      	movs	r1, #4
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f001 fd7d 	bl	80099f4 <_calloc_r>
 8007efa:	69e3      	ldr	r3, [r4, #28]
 8007efc:	60f0      	str	r0, [r6, #12]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e4      	bne.n	8007ece <_Balloc+0x2e>
 8007f04:	2000      	movs	r0, #0
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	6802      	ldr	r2, [r0, #0]
 8007f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f14:	e7f7      	b.n	8007f06 <_Balloc+0x66>
 8007f16:	bf00      	nop
 8007f18:	0800a812 	.word	0x0800a812
 8007f1c:	0800a892 	.word	0x0800a892

08007f20 <_Bfree>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	69c6      	ldr	r6, [r0, #28]
 8007f24:	4605      	mov	r5, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	b976      	cbnz	r6, 8007f48 <_Bfree+0x28>
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	f7ff ff02 	bl	8007d34 <malloc>
 8007f30:	4602      	mov	r2, r0
 8007f32:	61e8      	str	r0, [r5, #28]
 8007f34:	b920      	cbnz	r0, 8007f40 <_Bfree+0x20>
 8007f36:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <_Bfree+0x3c>)
 8007f38:	4809      	ldr	r0, [pc, #36]	@ (8007f60 <_Bfree+0x40>)
 8007f3a:	218f      	movs	r1, #143	@ 0x8f
 8007f3c:	f001 fd3c 	bl	80099b8 <__assert_func>
 8007f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f44:	6006      	str	r6, [r0, #0]
 8007f46:	60c6      	str	r6, [r0, #12]
 8007f48:	b13c      	cbz	r4, 8007f5a <_Bfree+0x3a>
 8007f4a:	69eb      	ldr	r3, [r5, #28]
 8007f4c:	6862      	ldr	r2, [r4, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f54:	6021      	str	r1, [r4, #0]
 8007f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	0800a812 	.word	0x0800a812
 8007f60:	0800a892 	.word	0x0800a892

08007f64 <__multadd>:
 8007f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f68:	690d      	ldr	r5, [r1, #16]
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	461e      	mov	r6, r3
 8007f70:	f101 0c14 	add.w	ip, r1, #20
 8007f74:	2000      	movs	r0, #0
 8007f76:	f8dc 3000 	ldr.w	r3, [ip]
 8007f7a:	b299      	uxth	r1, r3
 8007f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f80:	0c1e      	lsrs	r6, r3, #16
 8007f82:	0c0b      	lsrs	r3, r1, #16
 8007f84:	fb02 3306 	mla	r3, r2, r6, r3
 8007f88:	b289      	uxth	r1, r1
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f90:	4285      	cmp	r5, r0
 8007f92:	f84c 1b04 	str.w	r1, [ip], #4
 8007f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f9a:	dcec      	bgt.n	8007f76 <__multadd+0x12>
 8007f9c:	b30e      	cbz	r6, 8007fe2 <__multadd+0x7e>
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	dc19      	bgt.n	8007fd8 <__multadd+0x74>
 8007fa4:	6861      	ldr	r1, [r4, #4]
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	3101      	adds	r1, #1
 8007faa:	f7ff ff79 	bl	8007ea0 <_Balloc>
 8007fae:	4680      	mov	r8, r0
 8007fb0:	b928      	cbnz	r0, 8007fbe <__multadd+0x5a>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe8 <__multadd+0x84>)
 8007fb6:	480d      	ldr	r0, [pc, #52]	@ (8007fec <__multadd+0x88>)
 8007fb8:	21ba      	movs	r1, #186	@ 0xba
 8007fba:	f001 fcfd 	bl	80099b8 <__assert_func>
 8007fbe:	6922      	ldr	r2, [r4, #16]
 8007fc0:	3202      	adds	r2, #2
 8007fc2:	f104 010c 	add.w	r1, r4, #12
 8007fc6:	0092      	lsls	r2, r2, #2
 8007fc8:	300c      	adds	r0, #12
 8007fca:	f001 fcdf 	bl	800998c <memcpy>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	f7ff ffa5 	bl	8007f20 <_Bfree>
 8007fd6:	4644      	mov	r4, r8
 8007fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fdc:	3501      	adds	r5, #1
 8007fde:	615e      	str	r6, [r3, #20]
 8007fe0:	6125      	str	r5, [r4, #16]
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe8:	0800a881 	.word	0x0800a881
 8007fec:	0800a892 	.word	0x0800a892

08007ff0 <__s2b>:
 8007ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4615      	mov	r5, r2
 8007ff8:	461f      	mov	r7, r3
 8007ffa:	2209      	movs	r2, #9
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	4606      	mov	r6, r0
 8008000:	fb93 f3f2 	sdiv	r3, r3, r2
 8008004:	2100      	movs	r1, #0
 8008006:	2201      	movs	r2, #1
 8008008:	429a      	cmp	r2, r3
 800800a:	db09      	blt.n	8008020 <__s2b+0x30>
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff ff47 	bl	8007ea0 <_Balloc>
 8008012:	b940      	cbnz	r0, 8008026 <__s2b+0x36>
 8008014:	4602      	mov	r2, r0
 8008016:	4b19      	ldr	r3, [pc, #100]	@ (800807c <__s2b+0x8c>)
 8008018:	4819      	ldr	r0, [pc, #100]	@ (8008080 <__s2b+0x90>)
 800801a:	21d3      	movs	r1, #211	@ 0xd3
 800801c:	f001 fccc 	bl	80099b8 <__assert_func>
 8008020:	0052      	lsls	r2, r2, #1
 8008022:	3101      	adds	r1, #1
 8008024:	e7f0      	b.n	8008008 <__s2b+0x18>
 8008026:	9b08      	ldr	r3, [sp, #32]
 8008028:	6143      	str	r3, [r0, #20]
 800802a:	2d09      	cmp	r5, #9
 800802c:	f04f 0301 	mov.w	r3, #1
 8008030:	6103      	str	r3, [r0, #16]
 8008032:	dd16      	ble.n	8008062 <__s2b+0x72>
 8008034:	f104 0909 	add.w	r9, r4, #9
 8008038:	46c8      	mov	r8, r9
 800803a:	442c      	add	r4, r5
 800803c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008040:	4601      	mov	r1, r0
 8008042:	3b30      	subs	r3, #48	@ 0x30
 8008044:	220a      	movs	r2, #10
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ff8c 	bl	8007f64 <__multadd>
 800804c:	45a0      	cmp	r8, r4
 800804e:	d1f5      	bne.n	800803c <__s2b+0x4c>
 8008050:	f1a5 0408 	sub.w	r4, r5, #8
 8008054:	444c      	add	r4, r9
 8008056:	1b2d      	subs	r5, r5, r4
 8008058:	1963      	adds	r3, r4, r5
 800805a:	42bb      	cmp	r3, r7
 800805c:	db04      	blt.n	8008068 <__s2b+0x78>
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008062:	340a      	adds	r4, #10
 8008064:	2509      	movs	r5, #9
 8008066:	e7f6      	b.n	8008056 <__s2b+0x66>
 8008068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800806c:	4601      	mov	r1, r0
 800806e:	3b30      	subs	r3, #48	@ 0x30
 8008070:	220a      	movs	r2, #10
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ff76 	bl	8007f64 <__multadd>
 8008078:	e7ee      	b.n	8008058 <__s2b+0x68>
 800807a:	bf00      	nop
 800807c:	0800a881 	.word	0x0800a881
 8008080:	0800a892 	.word	0x0800a892

08008084 <__hi0bits>:
 8008084:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008088:	4603      	mov	r3, r0
 800808a:	bf36      	itet	cc
 800808c:	0403      	lslcc	r3, r0, #16
 800808e:	2000      	movcs	r0, #0
 8008090:	2010      	movcc	r0, #16
 8008092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008096:	bf3c      	itt	cc
 8008098:	021b      	lslcc	r3, r3, #8
 800809a:	3008      	addcc	r0, #8
 800809c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080a0:	bf3c      	itt	cc
 80080a2:	011b      	lslcc	r3, r3, #4
 80080a4:	3004      	addcc	r0, #4
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080aa:	bf3c      	itt	cc
 80080ac:	009b      	lslcc	r3, r3, #2
 80080ae:	3002      	addcc	r0, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	db05      	blt.n	80080c0 <__hi0bits+0x3c>
 80080b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080b8:	f100 0001 	add.w	r0, r0, #1
 80080bc:	bf08      	it	eq
 80080be:	2020      	moveq	r0, #32
 80080c0:	4770      	bx	lr

080080c2 <__lo0bits>:
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	4602      	mov	r2, r0
 80080c6:	f013 0007 	ands.w	r0, r3, #7
 80080ca:	d00b      	beq.n	80080e4 <__lo0bits+0x22>
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	d421      	bmi.n	8008114 <__lo0bits+0x52>
 80080d0:	0798      	lsls	r0, r3, #30
 80080d2:	bf49      	itett	mi
 80080d4:	085b      	lsrmi	r3, r3, #1
 80080d6:	089b      	lsrpl	r3, r3, #2
 80080d8:	2001      	movmi	r0, #1
 80080da:	6013      	strmi	r3, [r2, #0]
 80080dc:	bf5c      	itt	pl
 80080de:	6013      	strpl	r3, [r2, #0]
 80080e0:	2002      	movpl	r0, #2
 80080e2:	4770      	bx	lr
 80080e4:	b299      	uxth	r1, r3
 80080e6:	b909      	cbnz	r1, 80080ec <__lo0bits+0x2a>
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	2010      	movs	r0, #16
 80080ec:	b2d9      	uxtb	r1, r3
 80080ee:	b909      	cbnz	r1, 80080f4 <__lo0bits+0x32>
 80080f0:	3008      	adds	r0, #8
 80080f2:	0a1b      	lsrs	r3, r3, #8
 80080f4:	0719      	lsls	r1, r3, #28
 80080f6:	bf04      	itt	eq
 80080f8:	091b      	lsreq	r3, r3, #4
 80080fa:	3004      	addeq	r0, #4
 80080fc:	0799      	lsls	r1, r3, #30
 80080fe:	bf04      	itt	eq
 8008100:	089b      	lsreq	r3, r3, #2
 8008102:	3002      	addeq	r0, #2
 8008104:	07d9      	lsls	r1, r3, #31
 8008106:	d403      	bmi.n	8008110 <__lo0bits+0x4e>
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	f100 0001 	add.w	r0, r0, #1
 800810e:	d003      	beq.n	8008118 <__lo0bits+0x56>
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	4770      	bx	lr
 8008114:	2000      	movs	r0, #0
 8008116:	4770      	bx	lr
 8008118:	2020      	movs	r0, #32
 800811a:	4770      	bx	lr

0800811c <__i2b>:
 800811c:	b510      	push	{r4, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	2101      	movs	r1, #1
 8008122:	f7ff febd 	bl	8007ea0 <_Balloc>
 8008126:	4602      	mov	r2, r0
 8008128:	b928      	cbnz	r0, 8008136 <__i2b+0x1a>
 800812a:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <__i2b+0x24>)
 800812c:	4805      	ldr	r0, [pc, #20]	@ (8008144 <__i2b+0x28>)
 800812e:	f240 1145 	movw	r1, #325	@ 0x145
 8008132:	f001 fc41 	bl	80099b8 <__assert_func>
 8008136:	2301      	movs	r3, #1
 8008138:	6144      	str	r4, [r0, #20]
 800813a:	6103      	str	r3, [r0, #16]
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	0800a881 	.word	0x0800a881
 8008144:	0800a892 	.word	0x0800a892

08008148 <__multiply>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	4614      	mov	r4, r2
 800814e:	690a      	ldr	r2, [r1, #16]
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	bfa8      	it	ge
 8008156:	4623      	movge	r3, r4
 8008158:	460f      	mov	r7, r1
 800815a:	bfa4      	itt	ge
 800815c:	460c      	movge	r4, r1
 800815e:	461f      	movge	r7, r3
 8008160:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008164:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008168:	68a3      	ldr	r3, [r4, #8]
 800816a:	6861      	ldr	r1, [r4, #4]
 800816c:	eb0a 0609 	add.w	r6, sl, r9
 8008170:	42b3      	cmp	r3, r6
 8008172:	b085      	sub	sp, #20
 8008174:	bfb8      	it	lt
 8008176:	3101      	addlt	r1, #1
 8008178:	f7ff fe92 	bl	8007ea0 <_Balloc>
 800817c:	b930      	cbnz	r0, 800818c <__multiply+0x44>
 800817e:	4602      	mov	r2, r0
 8008180:	4b44      	ldr	r3, [pc, #272]	@ (8008294 <__multiply+0x14c>)
 8008182:	4845      	ldr	r0, [pc, #276]	@ (8008298 <__multiply+0x150>)
 8008184:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008188:	f001 fc16 	bl	80099b8 <__assert_func>
 800818c:	f100 0514 	add.w	r5, r0, #20
 8008190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008194:	462b      	mov	r3, r5
 8008196:	2200      	movs	r2, #0
 8008198:	4543      	cmp	r3, r8
 800819a:	d321      	bcc.n	80081e0 <__multiply+0x98>
 800819c:	f107 0114 	add.w	r1, r7, #20
 80081a0:	f104 0214 	add.w	r2, r4, #20
 80081a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081ac:	9302      	str	r3, [sp, #8]
 80081ae:	1b13      	subs	r3, r2, r4
 80081b0:	3b15      	subs	r3, #21
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	3304      	adds	r3, #4
 80081b8:	f104 0715 	add.w	r7, r4, #21
 80081bc:	42ba      	cmp	r2, r7
 80081be:	bf38      	it	cc
 80081c0:	2304      	movcc	r3, #4
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	9103      	str	r1, [sp, #12]
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d80c      	bhi.n	80081e6 <__multiply+0x9e>
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	dd03      	ble.n	80081d8 <__multiply+0x90>
 80081d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d05b      	beq.n	8008290 <__multiply+0x148>
 80081d8:	6106      	str	r6, [r0, #16]
 80081da:	b005      	add	sp, #20
 80081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	f843 2b04 	str.w	r2, [r3], #4
 80081e4:	e7d8      	b.n	8008198 <__multiply+0x50>
 80081e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	d024      	beq.n	800823a <__multiply+0xf2>
 80081f0:	f104 0e14 	add.w	lr, r4, #20
 80081f4:	46a9      	mov	r9, r5
 80081f6:	f04f 0c00 	mov.w	ip, #0
 80081fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081fe:	f8d9 3000 	ldr.w	r3, [r9]
 8008202:	fa1f fb87 	uxth.w	fp, r7
 8008206:	b29b      	uxth	r3, r3
 8008208:	fb0a 330b 	mla	r3, sl, fp, r3
 800820c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008210:	f8d9 7000 	ldr.w	r7, [r9]
 8008214:	4463      	add	r3, ip
 8008216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800821a:	fb0a c70b 	mla	r7, sl, fp, ip
 800821e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008222:	b29b      	uxth	r3, r3
 8008224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008228:	4572      	cmp	r2, lr
 800822a:	f849 3b04 	str.w	r3, [r9], #4
 800822e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008232:	d8e2      	bhi.n	80081fa <__multiply+0xb2>
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	f845 c003 	str.w	ip, [r5, r3]
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008240:	3104      	adds	r1, #4
 8008242:	f1b9 0f00 	cmp.w	r9, #0
 8008246:	d021      	beq.n	800828c <__multiply+0x144>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	f104 0c14 	add.w	ip, r4, #20
 800824e:	46ae      	mov	lr, r5
 8008250:	f04f 0a00 	mov.w	sl, #0
 8008254:	f8bc b000 	ldrh.w	fp, [ip]
 8008258:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800825c:	fb09 770b 	mla	r7, r9, fp, r7
 8008260:	4457      	add	r7, sl
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008268:	f84e 3b04 	str.w	r3, [lr], #4
 800826c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008274:	f8be 3000 	ldrh.w	r3, [lr]
 8008278:	fb09 330a 	mla	r3, r9, sl, r3
 800827c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008280:	4562      	cmp	r2, ip
 8008282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008286:	d8e5      	bhi.n	8008254 <__multiply+0x10c>
 8008288:	9f01      	ldr	r7, [sp, #4]
 800828a:	51eb      	str	r3, [r5, r7]
 800828c:	3504      	adds	r5, #4
 800828e:	e799      	b.n	80081c4 <__multiply+0x7c>
 8008290:	3e01      	subs	r6, #1
 8008292:	e79b      	b.n	80081cc <__multiply+0x84>
 8008294:	0800a881 	.word	0x0800a881
 8008298:	0800a892 	.word	0x0800a892

0800829c <__pow5mult>:
 800829c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a0:	4615      	mov	r5, r2
 80082a2:	f012 0203 	ands.w	r2, r2, #3
 80082a6:	4607      	mov	r7, r0
 80082a8:	460e      	mov	r6, r1
 80082aa:	d007      	beq.n	80082bc <__pow5mult+0x20>
 80082ac:	4c25      	ldr	r4, [pc, #148]	@ (8008344 <__pow5mult+0xa8>)
 80082ae:	3a01      	subs	r2, #1
 80082b0:	2300      	movs	r3, #0
 80082b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082b6:	f7ff fe55 	bl	8007f64 <__multadd>
 80082ba:	4606      	mov	r6, r0
 80082bc:	10ad      	asrs	r5, r5, #2
 80082be:	d03d      	beq.n	800833c <__pow5mult+0xa0>
 80082c0:	69fc      	ldr	r4, [r7, #28]
 80082c2:	b97c      	cbnz	r4, 80082e4 <__pow5mult+0x48>
 80082c4:	2010      	movs	r0, #16
 80082c6:	f7ff fd35 	bl	8007d34 <malloc>
 80082ca:	4602      	mov	r2, r0
 80082cc:	61f8      	str	r0, [r7, #28]
 80082ce:	b928      	cbnz	r0, 80082dc <__pow5mult+0x40>
 80082d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008348 <__pow5mult+0xac>)
 80082d2:	481e      	ldr	r0, [pc, #120]	@ (800834c <__pow5mult+0xb0>)
 80082d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082d8:	f001 fb6e 	bl	80099b8 <__assert_func>
 80082dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082e0:	6004      	str	r4, [r0, #0]
 80082e2:	60c4      	str	r4, [r0, #12]
 80082e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082ec:	b94c      	cbnz	r4, 8008302 <__pow5mult+0x66>
 80082ee:	f240 2171 	movw	r1, #625	@ 0x271
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff ff12 	bl	800811c <__i2b>
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80082fe:	4604      	mov	r4, r0
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	f04f 0900 	mov.w	r9, #0
 8008306:	07eb      	lsls	r3, r5, #31
 8008308:	d50a      	bpl.n	8008320 <__pow5mult+0x84>
 800830a:	4631      	mov	r1, r6
 800830c:	4622      	mov	r2, r4
 800830e:	4638      	mov	r0, r7
 8008310:	f7ff ff1a 	bl	8008148 <__multiply>
 8008314:	4631      	mov	r1, r6
 8008316:	4680      	mov	r8, r0
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fe01 	bl	8007f20 <_Bfree>
 800831e:	4646      	mov	r6, r8
 8008320:	106d      	asrs	r5, r5, #1
 8008322:	d00b      	beq.n	800833c <__pow5mult+0xa0>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	b938      	cbnz	r0, 8008338 <__pow5mult+0x9c>
 8008328:	4622      	mov	r2, r4
 800832a:	4621      	mov	r1, r4
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ff0b 	bl	8008148 <__multiply>
 8008332:	6020      	str	r0, [r4, #0]
 8008334:	f8c0 9000 	str.w	r9, [r0]
 8008338:	4604      	mov	r4, r0
 800833a:	e7e4      	b.n	8008306 <__pow5mult+0x6a>
 800833c:	4630      	mov	r0, r6
 800833e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008342:	bf00      	nop
 8008344:	0800a8ec 	.word	0x0800a8ec
 8008348:	0800a812 	.word	0x0800a812
 800834c:	0800a892 	.word	0x0800a892

08008350 <__lshift>:
 8008350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	6849      	ldr	r1, [r1, #4]
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800835e:	68a3      	ldr	r3, [r4, #8]
 8008360:	4607      	mov	r7, r0
 8008362:	4691      	mov	r9, r2
 8008364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008368:	f108 0601 	add.w	r6, r8, #1
 800836c:	42b3      	cmp	r3, r6
 800836e:	db0b      	blt.n	8008388 <__lshift+0x38>
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff fd95 	bl	8007ea0 <_Balloc>
 8008376:	4605      	mov	r5, r0
 8008378:	b948      	cbnz	r0, 800838e <__lshift+0x3e>
 800837a:	4602      	mov	r2, r0
 800837c:	4b28      	ldr	r3, [pc, #160]	@ (8008420 <__lshift+0xd0>)
 800837e:	4829      	ldr	r0, [pc, #164]	@ (8008424 <__lshift+0xd4>)
 8008380:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008384:	f001 fb18 	bl	80099b8 <__assert_func>
 8008388:	3101      	adds	r1, #1
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	e7ee      	b.n	800836c <__lshift+0x1c>
 800838e:	2300      	movs	r3, #0
 8008390:	f100 0114 	add.w	r1, r0, #20
 8008394:	f100 0210 	add.w	r2, r0, #16
 8008398:	4618      	mov	r0, r3
 800839a:	4553      	cmp	r3, sl
 800839c:	db33      	blt.n	8008406 <__lshift+0xb6>
 800839e:	6920      	ldr	r0, [r4, #16]
 80083a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083a4:	f104 0314 	add.w	r3, r4, #20
 80083a8:	f019 091f 	ands.w	r9, r9, #31
 80083ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083b4:	d02b      	beq.n	800840e <__lshift+0xbe>
 80083b6:	f1c9 0e20 	rsb	lr, r9, #32
 80083ba:	468a      	mov	sl, r1
 80083bc:	2200      	movs	r2, #0
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	fa00 f009 	lsl.w	r0, r0, r9
 80083c4:	4310      	orrs	r0, r2
 80083c6:	f84a 0b04 	str.w	r0, [sl], #4
 80083ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ce:	459c      	cmp	ip, r3
 80083d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80083d4:	d8f3      	bhi.n	80083be <__lshift+0x6e>
 80083d6:	ebac 0304 	sub.w	r3, ip, r4
 80083da:	3b15      	subs	r3, #21
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	3304      	adds	r3, #4
 80083e2:	f104 0015 	add.w	r0, r4, #21
 80083e6:	4584      	cmp	ip, r0
 80083e8:	bf38      	it	cc
 80083ea:	2304      	movcc	r3, #4
 80083ec:	50ca      	str	r2, [r1, r3]
 80083ee:	b10a      	cbz	r2, 80083f4 <__lshift+0xa4>
 80083f0:	f108 0602 	add.w	r6, r8, #2
 80083f4:	3e01      	subs	r6, #1
 80083f6:	4638      	mov	r0, r7
 80083f8:	612e      	str	r6, [r5, #16]
 80083fa:	4621      	mov	r1, r4
 80083fc:	f7ff fd90 	bl	8007f20 <_Bfree>
 8008400:	4628      	mov	r0, r5
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	f842 0f04 	str.w	r0, [r2, #4]!
 800840a:	3301      	adds	r3, #1
 800840c:	e7c5      	b.n	800839a <__lshift+0x4a>
 800840e:	3904      	subs	r1, #4
 8008410:	f853 2b04 	ldr.w	r2, [r3], #4
 8008414:	f841 2f04 	str.w	r2, [r1, #4]!
 8008418:	459c      	cmp	ip, r3
 800841a:	d8f9      	bhi.n	8008410 <__lshift+0xc0>
 800841c:	e7ea      	b.n	80083f4 <__lshift+0xa4>
 800841e:	bf00      	nop
 8008420:	0800a881 	.word	0x0800a881
 8008424:	0800a892 	.word	0x0800a892

08008428 <__mcmp>:
 8008428:	690a      	ldr	r2, [r1, #16]
 800842a:	4603      	mov	r3, r0
 800842c:	6900      	ldr	r0, [r0, #16]
 800842e:	1a80      	subs	r0, r0, r2
 8008430:	b530      	push	{r4, r5, lr}
 8008432:	d10e      	bne.n	8008452 <__mcmp+0x2a>
 8008434:	3314      	adds	r3, #20
 8008436:	3114      	adds	r1, #20
 8008438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800843c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008448:	4295      	cmp	r5, r2
 800844a:	d003      	beq.n	8008454 <__mcmp+0x2c>
 800844c:	d205      	bcs.n	800845a <__mcmp+0x32>
 800844e:	f04f 30ff 	mov.w	r0, #4294967295
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	42a3      	cmp	r3, r4
 8008456:	d3f3      	bcc.n	8008440 <__mcmp+0x18>
 8008458:	e7fb      	b.n	8008452 <__mcmp+0x2a>
 800845a:	2001      	movs	r0, #1
 800845c:	e7f9      	b.n	8008452 <__mcmp+0x2a>
	...

08008460 <__mdiff>:
 8008460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	4689      	mov	r9, r1
 8008466:	4606      	mov	r6, r0
 8008468:	4611      	mov	r1, r2
 800846a:	4648      	mov	r0, r9
 800846c:	4614      	mov	r4, r2
 800846e:	f7ff ffdb 	bl	8008428 <__mcmp>
 8008472:	1e05      	subs	r5, r0, #0
 8008474:	d112      	bne.n	800849c <__mdiff+0x3c>
 8008476:	4629      	mov	r1, r5
 8008478:	4630      	mov	r0, r6
 800847a:	f7ff fd11 	bl	8007ea0 <_Balloc>
 800847e:	4602      	mov	r2, r0
 8008480:	b928      	cbnz	r0, 800848e <__mdiff+0x2e>
 8008482:	4b3f      	ldr	r3, [pc, #252]	@ (8008580 <__mdiff+0x120>)
 8008484:	f240 2137 	movw	r1, #567	@ 0x237
 8008488:	483e      	ldr	r0, [pc, #248]	@ (8008584 <__mdiff+0x124>)
 800848a:	f001 fa95 	bl	80099b8 <__assert_func>
 800848e:	2301      	movs	r3, #1
 8008490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008494:	4610      	mov	r0, r2
 8008496:	b003      	add	sp, #12
 8008498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849c:	bfbc      	itt	lt
 800849e:	464b      	movlt	r3, r9
 80084a0:	46a1      	movlt	r9, r4
 80084a2:	4630      	mov	r0, r6
 80084a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084a8:	bfba      	itte	lt
 80084aa:	461c      	movlt	r4, r3
 80084ac:	2501      	movlt	r5, #1
 80084ae:	2500      	movge	r5, #0
 80084b0:	f7ff fcf6 	bl	8007ea0 <_Balloc>
 80084b4:	4602      	mov	r2, r0
 80084b6:	b918      	cbnz	r0, 80084c0 <__mdiff+0x60>
 80084b8:	4b31      	ldr	r3, [pc, #196]	@ (8008580 <__mdiff+0x120>)
 80084ba:	f240 2145 	movw	r1, #581	@ 0x245
 80084be:	e7e3      	b.n	8008488 <__mdiff+0x28>
 80084c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084c4:	6926      	ldr	r6, [r4, #16]
 80084c6:	60c5      	str	r5, [r0, #12]
 80084c8:	f109 0310 	add.w	r3, r9, #16
 80084cc:	f109 0514 	add.w	r5, r9, #20
 80084d0:	f104 0e14 	add.w	lr, r4, #20
 80084d4:	f100 0b14 	add.w	fp, r0, #20
 80084d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	46d9      	mov	r9, fp
 80084e4:	f04f 0c00 	mov.w	ip, #0
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	fa1f f38a 	uxth.w	r3, sl
 80084f8:	4619      	mov	r1, r3
 80084fa:	b283      	uxth	r3, r0
 80084fc:	1acb      	subs	r3, r1, r3
 80084fe:	0c00      	lsrs	r0, r0, #16
 8008500:	4463      	add	r3, ip
 8008502:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008506:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800850a:	b29b      	uxth	r3, r3
 800850c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008510:	4576      	cmp	r6, lr
 8008512:	f849 3b04 	str.w	r3, [r9], #4
 8008516:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800851a:	d8e5      	bhi.n	80084e8 <__mdiff+0x88>
 800851c:	1b33      	subs	r3, r6, r4
 800851e:	3b15      	subs	r3, #21
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	3415      	adds	r4, #21
 8008526:	3304      	adds	r3, #4
 8008528:	42a6      	cmp	r6, r4
 800852a:	bf38      	it	cc
 800852c:	2304      	movcc	r3, #4
 800852e:	441d      	add	r5, r3
 8008530:	445b      	add	r3, fp
 8008532:	461e      	mov	r6, r3
 8008534:	462c      	mov	r4, r5
 8008536:	4544      	cmp	r4, r8
 8008538:	d30e      	bcc.n	8008558 <__mdiff+0xf8>
 800853a:	f108 0103 	add.w	r1, r8, #3
 800853e:	1b49      	subs	r1, r1, r5
 8008540:	f021 0103 	bic.w	r1, r1, #3
 8008544:	3d03      	subs	r5, #3
 8008546:	45a8      	cmp	r8, r5
 8008548:	bf38      	it	cc
 800854a:	2100      	movcc	r1, #0
 800854c:	440b      	add	r3, r1
 800854e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008552:	b191      	cbz	r1, 800857a <__mdiff+0x11a>
 8008554:	6117      	str	r7, [r2, #16]
 8008556:	e79d      	b.n	8008494 <__mdiff+0x34>
 8008558:	f854 1b04 	ldr.w	r1, [r4], #4
 800855c:	46e6      	mov	lr, ip
 800855e:	0c08      	lsrs	r0, r1, #16
 8008560:	fa1c fc81 	uxtah	ip, ip, r1
 8008564:	4471      	add	r1, lr
 8008566:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800856a:	b289      	uxth	r1, r1
 800856c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008570:	f846 1b04 	str.w	r1, [r6], #4
 8008574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008578:	e7dd      	b.n	8008536 <__mdiff+0xd6>
 800857a:	3f01      	subs	r7, #1
 800857c:	e7e7      	b.n	800854e <__mdiff+0xee>
 800857e:	bf00      	nop
 8008580:	0800a881 	.word	0x0800a881
 8008584:	0800a892 	.word	0x0800a892

08008588 <__ulp>:
 8008588:	b082      	sub	sp, #8
 800858a:	ed8d 0b00 	vstr	d0, [sp]
 800858e:	9a01      	ldr	r2, [sp, #4]
 8008590:	4b0f      	ldr	r3, [pc, #60]	@ (80085d0 <__ulp+0x48>)
 8008592:	4013      	ands	r3, r2
 8008594:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008598:	2b00      	cmp	r3, #0
 800859a:	dc08      	bgt.n	80085ae <__ulp+0x26>
 800859c:	425b      	negs	r3, r3
 800859e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80085a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085a6:	da04      	bge.n	80085b2 <__ulp+0x2a>
 80085a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085ac:	4113      	asrs	r3, r2
 80085ae:	2200      	movs	r2, #0
 80085b0:	e008      	b.n	80085c4 <__ulp+0x3c>
 80085b2:	f1a2 0314 	sub.w	r3, r2, #20
 80085b6:	2b1e      	cmp	r3, #30
 80085b8:	bfda      	itte	le
 80085ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80085be:	40da      	lsrle	r2, r3
 80085c0:	2201      	movgt	r2, #1
 80085c2:	2300      	movs	r3, #0
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	ec41 0b10 	vmov	d0, r0, r1
 80085cc:	b002      	add	sp, #8
 80085ce:	4770      	bx	lr
 80085d0:	7ff00000 	.word	0x7ff00000

080085d4 <__b2d>:
 80085d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d8:	6906      	ldr	r6, [r0, #16]
 80085da:	f100 0814 	add.w	r8, r0, #20
 80085de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085e2:	1f37      	subs	r7, r6, #4
 80085e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7ff fd4b 	bl	8008084 <__hi0bits>
 80085ee:	f1c0 0320 	rsb	r3, r0, #32
 80085f2:	280a      	cmp	r0, #10
 80085f4:	600b      	str	r3, [r1, #0]
 80085f6:	491b      	ldr	r1, [pc, #108]	@ (8008664 <__b2d+0x90>)
 80085f8:	dc15      	bgt.n	8008626 <__b2d+0x52>
 80085fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80085fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008602:	45b8      	cmp	r8, r7
 8008604:	ea43 0501 	orr.w	r5, r3, r1
 8008608:	bf34      	ite	cc
 800860a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800860e:	2300      	movcs	r3, #0
 8008610:	3015      	adds	r0, #21
 8008612:	fa02 f000 	lsl.w	r0, r2, r0
 8008616:	fa23 f30c 	lsr.w	r3, r3, ip
 800861a:	4303      	orrs	r3, r0
 800861c:	461c      	mov	r4, r3
 800861e:	ec45 4b10 	vmov	d0, r4, r5
 8008622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008626:	45b8      	cmp	r8, r7
 8008628:	bf3a      	itte	cc
 800862a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800862e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008632:	2300      	movcs	r3, #0
 8008634:	380b      	subs	r0, #11
 8008636:	d012      	beq.n	800865e <__b2d+0x8a>
 8008638:	f1c0 0120 	rsb	r1, r0, #32
 800863c:	fa23 f401 	lsr.w	r4, r3, r1
 8008640:	4082      	lsls	r2, r0
 8008642:	4322      	orrs	r2, r4
 8008644:	4547      	cmp	r7, r8
 8008646:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800864a:	bf8c      	ite	hi
 800864c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008650:	2200      	movls	r2, #0
 8008652:	4083      	lsls	r3, r0
 8008654:	40ca      	lsrs	r2, r1
 8008656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800865a:	4313      	orrs	r3, r2
 800865c:	e7de      	b.n	800861c <__b2d+0x48>
 800865e:	ea42 0501 	orr.w	r5, r2, r1
 8008662:	e7db      	b.n	800861c <__b2d+0x48>
 8008664:	3ff00000 	.word	0x3ff00000

08008668 <__d2b>:
 8008668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800866c:	460f      	mov	r7, r1
 800866e:	2101      	movs	r1, #1
 8008670:	ec59 8b10 	vmov	r8, r9, d0
 8008674:	4616      	mov	r6, r2
 8008676:	f7ff fc13 	bl	8007ea0 <_Balloc>
 800867a:	4604      	mov	r4, r0
 800867c:	b930      	cbnz	r0, 800868c <__d2b+0x24>
 800867e:	4602      	mov	r2, r0
 8008680:	4b23      	ldr	r3, [pc, #140]	@ (8008710 <__d2b+0xa8>)
 8008682:	4824      	ldr	r0, [pc, #144]	@ (8008714 <__d2b+0xac>)
 8008684:	f240 310f 	movw	r1, #783	@ 0x30f
 8008688:	f001 f996 	bl	80099b8 <__assert_func>
 800868c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008694:	b10d      	cbz	r5, 800869a <__d2b+0x32>
 8008696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	f1b8 0300 	subs.w	r3, r8, #0
 80086a0:	d023      	beq.n	80086ea <__d2b+0x82>
 80086a2:	4668      	mov	r0, sp
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	f7ff fd0c 	bl	80080c2 <__lo0bits>
 80086aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086ae:	b1d0      	cbz	r0, 80086e6 <__d2b+0x7e>
 80086b0:	f1c0 0320 	rsb	r3, r0, #32
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	430b      	orrs	r3, r1
 80086ba:	40c2      	lsrs	r2, r0
 80086bc:	6163      	str	r3, [r4, #20]
 80086be:	9201      	str	r2, [sp, #4]
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	61a3      	str	r3, [r4, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf0c      	ite	eq
 80086c8:	2201      	moveq	r2, #1
 80086ca:	2202      	movne	r2, #2
 80086cc:	6122      	str	r2, [r4, #16]
 80086ce:	b1a5      	cbz	r5, 80086fa <__d2b+0x92>
 80086d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086d4:	4405      	add	r5, r0
 80086d6:	603d      	str	r5, [r7, #0]
 80086d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086dc:	6030      	str	r0, [r6, #0]
 80086de:	4620      	mov	r0, r4
 80086e0:	b003      	add	sp, #12
 80086e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e6:	6161      	str	r1, [r4, #20]
 80086e8:	e7ea      	b.n	80086c0 <__d2b+0x58>
 80086ea:	a801      	add	r0, sp, #4
 80086ec:	f7ff fce9 	bl	80080c2 <__lo0bits>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	6163      	str	r3, [r4, #20]
 80086f4:	3020      	adds	r0, #32
 80086f6:	2201      	movs	r2, #1
 80086f8:	e7e8      	b.n	80086cc <__d2b+0x64>
 80086fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008702:	6038      	str	r0, [r7, #0]
 8008704:	6918      	ldr	r0, [r3, #16]
 8008706:	f7ff fcbd 	bl	8008084 <__hi0bits>
 800870a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870e:	e7e5      	b.n	80086dc <__d2b+0x74>
 8008710:	0800a881 	.word	0x0800a881
 8008714:	0800a892 	.word	0x0800a892

08008718 <__ratio>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	b085      	sub	sp, #20
 800871e:	e9cd 1000 	strd	r1, r0, [sp]
 8008722:	a902      	add	r1, sp, #8
 8008724:	f7ff ff56 	bl	80085d4 <__b2d>
 8008728:	9800      	ldr	r0, [sp, #0]
 800872a:	a903      	add	r1, sp, #12
 800872c:	ec55 4b10 	vmov	r4, r5, d0
 8008730:	f7ff ff50 	bl	80085d4 <__b2d>
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	6919      	ldr	r1, [r3, #16]
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	1ac9      	subs	r1, r1, r3
 800873e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	ec5b ab10 	vmov	sl, fp, d0
 8008748:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfce      	itee	gt
 8008750:	462a      	movgt	r2, r5
 8008752:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008756:	465a      	movle	r2, fp
 8008758:	462f      	mov	r7, r5
 800875a:	46d9      	mov	r9, fp
 800875c:	bfcc      	ite	gt
 800875e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008762:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008766:	464b      	mov	r3, r9
 8008768:	4652      	mov	r2, sl
 800876a:	4620      	mov	r0, r4
 800876c:	4639      	mov	r1, r7
 800876e:	f7f8 f89d 	bl	80008ac <__aeabi_ddiv>
 8008772:	ec41 0b10 	vmov	d0, r0, r1
 8008776:	b005      	add	sp, #20
 8008778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800877c <__copybits>:
 800877c:	3901      	subs	r1, #1
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	1149      	asrs	r1, r1, #5
 8008782:	6914      	ldr	r4, [r2, #16]
 8008784:	3101      	adds	r1, #1
 8008786:	f102 0314 	add.w	r3, r2, #20
 800878a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800878e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008792:	1f05      	subs	r5, r0, #4
 8008794:	42a3      	cmp	r3, r4
 8008796:	d30c      	bcc.n	80087b2 <__copybits+0x36>
 8008798:	1aa3      	subs	r3, r4, r2
 800879a:	3b11      	subs	r3, #17
 800879c:	f023 0303 	bic.w	r3, r3, #3
 80087a0:	3211      	adds	r2, #17
 80087a2:	42a2      	cmp	r2, r4
 80087a4:	bf88      	it	hi
 80087a6:	2300      	movhi	r3, #0
 80087a8:	4418      	add	r0, r3
 80087aa:	2300      	movs	r3, #0
 80087ac:	4288      	cmp	r0, r1
 80087ae:	d305      	bcc.n	80087bc <__copybits+0x40>
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80087b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80087ba:	e7eb      	b.n	8008794 <__copybits+0x18>
 80087bc:	f840 3b04 	str.w	r3, [r0], #4
 80087c0:	e7f4      	b.n	80087ac <__copybits+0x30>

080087c2 <__any_on>:
 80087c2:	f100 0214 	add.w	r2, r0, #20
 80087c6:	6900      	ldr	r0, [r0, #16]
 80087c8:	114b      	asrs	r3, r1, #5
 80087ca:	4298      	cmp	r0, r3
 80087cc:	b510      	push	{r4, lr}
 80087ce:	db11      	blt.n	80087f4 <__any_on+0x32>
 80087d0:	dd0a      	ble.n	80087e8 <__any_on+0x26>
 80087d2:	f011 011f 	ands.w	r1, r1, #31
 80087d6:	d007      	beq.n	80087e8 <__any_on+0x26>
 80087d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087dc:	fa24 f001 	lsr.w	r0, r4, r1
 80087e0:	fa00 f101 	lsl.w	r1, r0, r1
 80087e4:	428c      	cmp	r4, r1
 80087e6:	d10b      	bne.n	8008800 <__any_on+0x3e>
 80087e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d803      	bhi.n	80087f8 <__any_on+0x36>
 80087f0:	2000      	movs	r0, #0
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	4603      	mov	r3, r0
 80087f6:	e7f7      	b.n	80087e8 <__any_on+0x26>
 80087f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087fc:	2900      	cmp	r1, #0
 80087fe:	d0f5      	beq.n	80087ec <__any_on+0x2a>
 8008800:	2001      	movs	r0, #1
 8008802:	e7f6      	b.n	80087f2 <__any_on+0x30>

08008804 <sulp>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	ec45 4b10 	vmov	d0, r4, r5
 800880e:	4616      	mov	r6, r2
 8008810:	f7ff feba 	bl	8008588 <__ulp>
 8008814:	ec51 0b10 	vmov	r0, r1, d0
 8008818:	b17e      	cbz	r6, 800883a <sulp+0x36>
 800881a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800881e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008822:	2b00      	cmp	r3, #0
 8008824:	dd09      	ble.n	800883a <sulp+0x36>
 8008826:	051b      	lsls	r3, r3, #20
 8008828:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800882c:	2400      	movs	r4, #0
 800882e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f7f7 ff0f 	bl	8000658 <__aeabi_dmul>
 800883a:	ec41 0b10 	vmov	d0, r0, r1
 800883e:	bd70      	pop	{r4, r5, r6, pc}

08008840 <_strtod_l>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b09f      	sub	sp, #124	@ 0x7c
 8008846:	460c      	mov	r4, r1
 8008848:	9217      	str	r2, [sp, #92]	@ 0x5c
 800884a:	2200      	movs	r2, #0
 800884c:	921a      	str	r2, [sp, #104]	@ 0x68
 800884e:	9005      	str	r0, [sp, #20]
 8008850:	f04f 0a00 	mov.w	sl, #0
 8008854:	f04f 0b00 	mov.w	fp, #0
 8008858:	460a      	mov	r2, r1
 800885a:	9219      	str	r2, [sp, #100]	@ 0x64
 800885c:	7811      	ldrb	r1, [r2, #0]
 800885e:	292b      	cmp	r1, #43	@ 0x2b
 8008860:	d04a      	beq.n	80088f8 <_strtod_l+0xb8>
 8008862:	d838      	bhi.n	80088d6 <_strtod_l+0x96>
 8008864:	290d      	cmp	r1, #13
 8008866:	d832      	bhi.n	80088ce <_strtod_l+0x8e>
 8008868:	2908      	cmp	r1, #8
 800886a:	d832      	bhi.n	80088d2 <_strtod_l+0x92>
 800886c:	2900      	cmp	r1, #0
 800886e:	d03b      	beq.n	80088e8 <_strtod_l+0xa8>
 8008870:	2200      	movs	r2, #0
 8008872:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008874:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008876:	782a      	ldrb	r2, [r5, #0]
 8008878:	2a30      	cmp	r2, #48	@ 0x30
 800887a:	f040 80b3 	bne.w	80089e4 <_strtod_l+0x1a4>
 800887e:	786a      	ldrb	r2, [r5, #1]
 8008880:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008884:	2a58      	cmp	r2, #88	@ 0x58
 8008886:	d16e      	bne.n	8008966 <_strtod_l+0x126>
 8008888:	9302      	str	r3, [sp, #8]
 800888a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	4a8e      	ldr	r2, [pc, #568]	@ (8008acc <_strtod_l+0x28c>)
 8008894:	9805      	ldr	r0, [sp, #20]
 8008896:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008898:	a919      	add	r1, sp, #100	@ 0x64
 800889a:	f001 f927 	bl	8009aec <__gethex>
 800889e:	f010 060f 	ands.w	r6, r0, #15
 80088a2:	4604      	mov	r4, r0
 80088a4:	d005      	beq.n	80088b2 <_strtod_l+0x72>
 80088a6:	2e06      	cmp	r6, #6
 80088a8:	d128      	bne.n	80088fc <_strtod_l+0xbc>
 80088aa:	3501      	adds	r5, #1
 80088ac:	2300      	movs	r3, #0
 80088ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80088b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 858e 	bne.w	80093d6 <_strtod_l+0xb96>
 80088ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088bc:	b1cb      	cbz	r3, 80088f2 <_strtod_l+0xb2>
 80088be:	4652      	mov	r2, sl
 80088c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80088c4:	ec43 2b10 	vmov	d0, r2, r3
 80088c8:	b01f      	add	sp, #124	@ 0x7c
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	2920      	cmp	r1, #32
 80088d0:	d1ce      	bne.n	8008870 <_strtod_l+0x30>
 80088d2:	3201      	adds	r2, #1
 80088d4:	e7c1      	b.n	800885a <_strtod_l+0x1a>
 80088d6:	292d      	cmp	r1, #45	@ 0x2d
 80088d8:	d1ca      	bne.n	8008870 <_strtod_l+0x30>
 80088da:	2101      	movs	r1, #1
 80088dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088de:	1c51      	adds	r1, r2, #1
 80088e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80088e2:	7852      	ldrb	r2, [r2, #1]
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d1c5      	bne.n	8008874 <_strtod_l+0x34>
 80088e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8570 	bne.w	80093d2 <_strtod_l+0xb92>
 80088f2:	4652      	mov	r2, sl
 80088f4:	465b      	mov	r3, fp
 80088f6:	e7e5      	b.n	80088c4 <_strtod_l+0x84>
 80088f8:	2100      	movs	r1, #0
 80088fa:	e7ef      	b.n	80088dc <_strtod_l+0x9c>
 80088fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088fe:	b13a      	cbz	r2, 8008910 <_strtod_l+0xd0>
 8008900:	2135      	movs	r1, #53	@ 0x35
 8008902:	a81c      	add	r0, sp, #112	@ 0x70
 8008904:	f7ff ff3a 	bl	800877c <__copybits>
 8008908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800890a:	9805      	ldr	r0, [sp, #20]
 800890c:	f7ff fb08 	bl	8007f20 <_Bfree>
 8008910:	3e01      	subs	r6, #1
 8008912:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008914:	2e04      	cmp	r6, #4
 8008916:	d806      	bhi.n	8008926 <_strtod_l+0xe6>
 8008918:	e8df f006 	tbb	[pc, r6]
 800891c:	201d0314 	.word	0x201d0314
 8008920:	14          	.byte	0x14
 8008921:	00          	.byte	0x00
 8008922:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008926:	05e1      	lsls	r1, r4, #23
 8008928:	bf48      	it	mi
 800892a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800892e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008932:	0d1b      	lsrs	r3, r3, #20
 8008934:	051b      	lsls	r3, r3, #20
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1bb      	bne.n	80088b2 <_strtod_l+0x72>
 800893a:	f7fe fb2f 	bl	8006f9c <__errno>
 800893e:	2322      	movs	r3, #34	@ 0x22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	e7b6      	b.n	80088b2 <_strtod_l+0x72>
 8008944:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008948:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800894c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008950:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008954:	e7e7      	b.n	8008926 <_strtod_l+0xe6>
 8008956:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ad4 <_strtod_l+0x294>
 800895a:	e7e4      	b.n	8008926 <_strtod_l+0xe6>
 800895c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008960:	f04f 3aff 	mov.w	sl, #4294967295
 8008964:	e7df      	b.n	8008926 <_strtod_l+0xe6>
 8008966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	9219      	str	r2, [sp, #100]	@ 0x64
 800896c:	785b      	ldrb	r3, [r3, #1]
 800896e:	2b30      	cmp	r3, #48	@ 0x30
 8008970:	d0f9      	beq.n	8008966 <_strtod_l+0x126>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d09d      	beq.n	80088b2 <_strtod_l+0x72>
 8008976:	2301      	movs	r3, #1
 8008978:	9309      	str	r3, [sp, #36]	@ 0x24
 800897a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800897c:	930c      	str	r3, [sp, #48]	@ 0x30
 800897e:	2300      	movs	r3, #0
 8008980:	9308      	str	r3, [sp, #32]
 8008982:	930a      	str	r3, [sp, #40]	@ 0x28
 8008984:	461f      	mov	r7, r3
 8008986:	220a      	movs	r2, #10
 8008988:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800898a:	7805      	ldrb	r5, [r0, #0]
 800898c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008990:	b2d9      	uxtb	r1, r3
 8008992:	2909      	cmp	r1, #9
 8008994:	d928      	bls.n	80089e8 <_strtod_l+0x1a8>
 8008996:	494e      	ldr	r1, [pc, #312]	@ (8008ad0 <_strtod_l+0x290>)
 8008998:	2201      	movs	r2, #1
 800899a:	f000 ffd5 	bl	8009948 <strncmp>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d032      	beq.n	8008a08 <_strtod_l+0x1c8>
 80089a2:	2000      	movs	r0, #0
 80089a4:	462a      	mov	r2, r5
 80089a6:	4681      	mov	r9, r0
 80089a8:	463d      	mov	r5, r7
 80089aa:	4603      	mov	r3, r0
 80089ac:	2a65      	cmp	r2, #101	@ 0x65
 80089ae:	d001      	beq.n	80089b4 <_strtod_l+0x174>
 80089b0:	2a45      	cmp	r2, #69	@ 0x45
 80089b2:	d114      	bne.n	80089de <_strtod_l+0x19e>
 80089b4:	b91d      	cbnz	r5, 80089be <_strtod_l+0x17e>
 80089b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089b8:	4302      	orrs	r2, r0
 80089ba:	d095      	beq.n	80088e8 <_strtod_l+0xa8>
 80089bc:	2500      	movs	r5, #0
 80089be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80089c0:	1c62      	adds	r2, r4, #1
 80089c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089c4:	7862      	ldrb	r2, [r4, #1]
 80089c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80089c8:	d077      	beq.n	8008aba <_strtod_l+0x27a>
 80089ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80089cc:	d07b      	beq.n	8008ac6 <_strtod_l+0x286>
 80089ce:	f04f 0c00 	mov.w	ip, #0
 80089d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80089d6:	2909      	cmp	r1, #9
 80089d8:	f240 8082 	bls.w	8008ae0 <_strtod_l+0x2a0>
 80089dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	e0a2      	b.n	8008b2a <_strtod_l+0x2ea>
 80089e4:	2300      	movs	r3, #0
 80089e6:	e7c7      	b.n	8008978 <_strtod_l+0x138>
 80089e8:	2f08      	cmp	r7, #8
 80089ea:	bfd5      	itete	le
 80089ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80089ee:	9908      	ldrgt	r1, [sp, #32]
 80089f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80089f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80089f8:	f100 0001 	add.w	r0, r0, #1
 80089fc:	bfd4      	ite	le
 80089fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008a00:	9308      	strgt	r3, [sp, #32]
 8008a02:	3701      	adds	r7, #1
 8008a04:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a06:	e7bf      	b.n	8008988 <_strtod_l+0x148>
 8008a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a0e:	785a      	ldrb	r2, [r3, #1]
 8008a10:	b37f      	cbz	r7, 8008a72 <_strtod_l+0x232>
 8008a12:	4681      	mov	r9, r0
 8008a14:	463d      	mov	r5, r7
 8008a16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d912      	bls.n	8008a44 <_strtod_l+0x204>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e7c4      	b.n	80089ac <_strtod_l+0x16c>
 8008a22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a28:	785a      	ldrb	r2, [r3, #1]
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	2a30      	cmp	r2, #48	@ 0x30
 8008a2e:	d0f8      	beq.n	8008a22 <_strtod_l+0x1e2>
 8008a30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	f200 84d3 	bhi.w	80093e0 <_strtod_l+0xba0>
 8008a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a3e:	4681      	mov	r9, r0
 8008a40:	2000      	movs	r0, #0
 8008a42:	4605      	mov	r5, r0
 8008a44:	3a30      	subs	r2, #48	@ 0x30
 8008a46:	f100 0301 	add.w	r3, r0, #1
 8008a4a:	d02a      	beq.n	8008aa2 <_strtod_l+0x262>
 8008a4c:	4499      	add	r9, r3
 8008a4e:	eb00 0c05 	add.w	ip, r0, r5
 8008a52:	462b      	mov	r3, r5
 8008a54:	210a      	movs	r1, #10
 8008a56:	4563      	cmp	r3, ip
 8008a58:	d10d      	bne.n	8008a76 <_strtod_l+0x236>
 8008a5a:	1c69      	adds	r1, r5, #1
 8008a5c:	4401      	add	r1, r0
 8008a5e:	4428      	add	r0, r5
 8008a60:	2808      	cmp	r0, #8
 8008a62:	dc16      	bgt.n	8008a92 <_strtod_l+0x252>
 8008a64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a66:	230a      	movs	r3, #10
 8008a68:	fb03 2300 	mla	r3, r3, r0, r2
 8008a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e018      	b.n	8008aa4 <_strtod_l+0x264>
 8008a72:	4638      	mov	r0, r7
 8008a74:	e7da      	b.n	8008a2c <_strtod_l+0x1ec>
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	f103 0301 	add.w	r3, r3, #1
 8008a7c:	dc03      	bgt.n	8008a86 <_strtod_l+0x246>
 8008a7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a80:	434e      	muls	r6, r1
 8008a82:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a84:	e7e7      	b.n	8008a56 <_strtod_l+0x216>
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	bfde      	ittt	le
 8008a8a:	9e08      	ldrle	r6, [sp, #32]
 8008a8c:	434e      	mulle	r6, r1
 8008a8e:	9608      	strle	r6, [sp, #32]
 8008a90:	e7e1      	b.n	8008a56 <_strtod_l+0x216>
 8008a92:	280f      	cmp	r0, #15
 8008a94:	dceb      	bgt.n	8008a6e <_strtod_l+0x22e>
 8008a96:	9808      	ldr	r0, [sp, #32]
 8008a98:	230a      	movs	r3, #10
 8008a9a:	fb03 2300 	mla	r3, r3, r0, r2
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	e7e5      	b.n	8008a6e <_strtod_l+0x22e>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aa6:	1c50      	adds	r0, r2, #1
 8008aa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008aaa:	7852      	ldrb	r2, [r2, #1]
 8008aac:	4618      	mov	r0, r3
 8008aae:	460d      	mov	r5, r1
 8008ab0:	e7b1      	b.n	8008a16 <_strtod_l+0x1d6>
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e77d      	b.n	80089b6 <_strtod_l+0x176>
 8008aba:	f04f 0c00 	mov.w	ip, #0
 8008abe:	1ca2      	adds	r2, r4, #2
 8008ac0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ac2:	78a2      	ldrb	r2, [r4, #2]
 8008ac4:	e785      	b.n	80089d2 <_strtod_l+0x192>
 8008ac6:	f04f 0c01 	mov.w	ip, #1
 8008aca:	e7f8      	b.n	8008abe <_strtod_l+0x27e>
 8008acc:	0800aa00 	.word	0x0800aa00
 8008ad0:	0800a9e8 	.word	0x0800a9e8
 8008ad4:	7ff00000 	.word	0x7ff00000
 8008ad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ada:	1c51      	adds	r1, r2, #1
 8008adc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ade:	7852      	ldrb	r2, [r2, #1]
 8008ae0:	2a30      	cmp	r2, #48	@ 0x30
 8008ae2:	d0f9      	beq.n	8008ad8 <_strtod_l+0x298>
 8008ae4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ae8:	2908      	cmp	r1, #8
 8008aea:	f63f af78 	bhi.w	80089de <_strtod_l+0x19e>
 8008aee:	3a30      	subs	r2, #48	@ 0x30
 8008af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008af2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008af4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008af6:	f04f 080a 	mov.w	r8, #10
 8008afa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008afc:	1c56      	adds	r6, r2, #1
 8008afe:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b00:	7852      	ldrb	r2, [r2, #1]
 8008b02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b06:	f1be 0f09 	cmp.w	lr, #9
 8008b0a:	d939      	bls.n	8008b80 <_strtod_l+0x340>
 8008b0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b0e:	1a76      	subs	r6, r6, r1
 8008b10:	2e08      	cmp	r6, #8
 8008b12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b16:	dc03      	bgt.n	8008b20 <_strtod_l+0x2e0>
 8008b18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b1a:	4588      	cmp	r8, r1
 8008b1c:	bfa8      	it	ge
 8008b1e:	4688      	movge	r8, r1
 8008b20:	f1bc 0f00 	cmp.w	ip, #0
 8008b24:	d001      	beq.n	8008b2a <_strtod_l+0x2ea>
 8008b26:	f1c8 0800 	rsb	r8, r8, #0
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	d14e      	bne.n	8008bcc <_strtod_l+0x38c>
 8008b2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b30:	4308      	orrs	r0, r1
 8008b32:	f47f aebe 	bne.w	80088b2 <_strtod_l+0x72>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f47f aed6 	bne.w	80088e8 <_strtod_l+0xa8>
 8008b3c:	2a69      	cmp	r2, #105	@ 0x69
 8008b3e:	d028      	beq.n	8008b92 <_strtod_l+0x352>
 8008b40:	dc25      	bgt.n	8008b8e <_strtod_l+0x34e>
 8008b42:	2a49      	cmp	r2, #73	@ 0x49
 8008b44:	d025      	beq.n	8008b92 <_strtod_l+0x352>
 8008b46:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b48:	f47f aece 	bne.w	80088e8 <_strtod_l+0xa8>
 8008b4c:	499b      	ldr	r1, [pc, #620]	@ (8008dbc <_strtod_l+0x57c>)
 8008b4e:	a819      	add	r0, sp, #100	@ 0x64
 8008b50:	f001 f9ee 	bl	8009f30 <__match>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f43f aec7 	beq.w	80088e8 <_strtod_l+0xa8>
 8008b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b28      	cmp	r3, #40	@ 0x28
 8008b60:	d12e      	bne.n	8008bc0 <_strtod_l+0x380>
 8008b62:	4997      	ldr	r1, [pc, #604]	@ (8008dc0 <_strtod_l+0x580>)
 8008b64:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b66:	a819      	add	r0, sp, #100	@ 0x64
 8008b68:	f001 f9f6 	bl	8009f58 <__hexnan>
 8008b6c:	2805      	cmp	r0, #5
 8008b6e:	d127      	bne.n	8008bc0 <_strtod_l+0x380>
 8008b70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b7e:	e698      	b.n	80088b2 <_strtod_l+0x72>
 8008b80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b82:	fb08 2101 	mla	r1, r8, r1, r2
 8008b86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b8c:	e7b5      	b.n	8008afa <_strtod_l+0x2ba>
 8008b8e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b90:	e7da      	b.n	8008b48 <_strtod_l+0x308>
 8008b92:	498c      	ldr	r1, [pc, #560]	@ (8008dc4 <_strtod_l+0x584>)
 8008b94:	a819      	add	r0, sp, #100	@ 0x64
 8008b96:	f001 f9cb 	bl	8009f30 <__match>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f43f aea4 	beq.w	80088e8 <_strtod_l+0xa8>
 8008ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba2:	4989      	ldr	r1, [pc, #548]	@ (8008dc8 <_strtod_l+0x588>)
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	a819      	add	r0, sp, #100	@ 0x64
 8008ba8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008baa:	f001 f9c1 	bl	8009f30 <__match>
 8008bae:	b910      	cbnz	r0, 8008bb6 <_strtod_l+0x376>
 8008bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008dd8 <_strtod_l+0x598>
 8008bba:	f04f 0a00 	mov.w	sl, #0
 8008bbe:	e678      	b.n	80088b2 <_strtod_l+0x72>
 8008bc0:	4882      	ldr	r0, [pc, #520]	@ (8008dcc <_strtod_l+0x58c>)
 8008bc2:	f000 fef1 	bl	80099a8 <nan>
 8008bc6:	ec5b ab10 	vmov	sl, fp, d0
 8008bca:	e672      	b.n	80088b2 <_strtod_l+0x72>
 8008bcc:	eba8 0309 	sub.w	r3, r8, r9
 8008bd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd4:	2f00      	cmp	r7, #0
 8008bd6:	bf08      	it	eq
 8008bd8:	462f      	moveq	r7, r5
 8008bda:	2d10      	cmp	r5, #16
 8008bdc:	462c      	mov	r4, r5
 8008bde:	bfa8      	it	ge
 8008be0:	2410      	movge	r4, #16
 8008be2:	f7f7 fcbf 	bl	8000564 <__aeabi_ui2d>
 8008be6:	2d09      	cmp	r5, #9
 8008be8:	4682      	mov	sl, r0
 8008bea:	468b      	mov	fp, r1
 8008bec:	dc13      	bgt.n	8008c16 <_strtod_l+0x3d6>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f43f ae5e 	beq.w	80088b2 <_strtod_l+0x72>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	dd78      	ble.n	8008cec <_strtod_l+0x4ac>
 8008bfa:	2b16      	cmp	r3, #22
 8008bfc:	dc5f      	bgt.n	8008cbe <_strtod_l+0x47e>
 8008bfe:	4974      	ldr	r1, [pc, #464]	@ (8008dd0 <_strtod_l+0x590>)
 8008c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c08:	4652      	mov	r2, sl
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	f7f7 fd24 	bl	8000658 <__aeabi_dmul>
 8008c10:	4682      	mov	sl, r0
 8008c12:	468b      	mov	fp, r1
 8008c14:	e64d      	b.n	80088b2 <_strtod_l+0x72>
 8008c16:	4b6e      	ldr	r3, [pc, #440]	@ (8008dd0 <_strtod_l+0x590>)
 8008c18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008c20:	f7f7 fd1a 	bl	8000658 <__aeabi_dmul>
 8008c24:	4682      	mov	sl, r0
 8008c26:	9808      	ldr	r0, [sp, #32]
 8008c28:	468b      	mov	fp, r1
 8008c2a:	f7f7 fc9b 	bl	8000564 <__aeabi_ui2d>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	f7f7 fb59 	bl	80002ec <__adddf3>
 8008c3a:	2d0f      	cmp	r5, #15
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	468b      	mov	fp, r1
 8008c40:	ddd5      	ble.n	8008bee <_strtod_l+0x3ae>
 8008c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c44:	1b2c      	subs	r4, r5, r4
 8008c46:	441c      	add	r4, r3
 8008c48:	2c00      	cmp	r4, #0
 8008c4a:	f340 8096 	ble.w	8008d7a <_strtod_l+0x53a>
 8008c4e:	f014 030f 	ands.w	r3, r4, #15
 8008c52:	d00a      	beq.n	8008c6a <_strtod_l+0x42a>
 8008c54:	495e      	ldr	r1, [pc, #376]	@ (8008dd0 <_strtod_l+0x590>)
 8008c56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c62:	f7f7 fcf9 	bl	8000658 <__aeabi_dmul>
 8008c66:	4682      	mov	sl, r0
 8008c68:	468b      	mov	fp, r1
 8008c6a:	f034 040f 	bics.w	r4, r4, #15
 8008c6e:	d073      	beq.n	8008d58 <_strtod_l+0x518>
 8008c70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c74:	dd48      	ble.n	8008d08 <_strtod_l+0x4c8>
 8008c76:	2400      	movs	r4, #0
 8008c78:	46a0      	mov	r8, r4
 8008c7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c7c:	46a1      	mov	r9, r4
 8008c7e:	9a05      	ldr	r2, [sp, #20]
 8008c80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008dd8 <_strtod_l+0x598>
 8008c84:	2322      	movs	r3, #34	@ 0x22
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	f04f 0a00 	mov.w	sl, #0
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f43f ae0f 	beq.w	80088b2 <_strtod_l+0x72>
 8008c94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c96:	9805      	ldr	r0, [sp, #20]
 8008c98:	f7ff f942 	bl	8007f20 <_Bfree>
 8008c9c:	9805      	ldr	r0, [sp, #20]
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7ff f93e 	bl	8007f20 <_Bfree>
 8008ca4:	9805      	ldr	r0, [sp, #20]
 8008ca6:	4641      	mov	r1, r8
 8008ca8:	f7ff f93a 	bl	8007f20 <_Bfree>
 8008cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cae:	9805      	ldr	r0, [sp, #20]
 8008cb0:	f7ff f936 	bl	8007f20 <_Bfree>
 8008cb4:	9805      	ldr	r0, [sp, #20]
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f7ff f932 	bl	8007f20 <_Bfree>
 8008cbc:	e5f9      	b.n	80088b2 <_strtod_l+0x72>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	dbbc      	blt.n	8008c42 <_strtod_l+0x402>
 8008cc8:	4c41      	ldr	r4, [pc, #260]	@ (8008dd0 <_strtod_l+0x590>)
 8008cca:	f1c5 050f 	rsb	r5, r5, #15
 8008cce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cda:	f7f7 fcbd 	bl	8000658 <__aeabi_dmul>
 8008cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce0:	1b5d      	subs	r5, r3, r5
 8008ce2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ce6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cea:	e78f      	b.n	8008c0c <_strtod_l+0x3cc>
 8008cec:	3316      	adds	r3, #22
 8008cee:	dba8      	blt.n	8008c42 <_strtod_l+0x402>
 8008cf0:	4b37      	ldr	r3, [pc, #220]	@ (8008dd0 <_strtod_l+0x590>)
 8008cf2:	eba9 0808 	sub.w	r8, r9, r8
 8008cf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008cfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008cfe:	4650      	mov	r0, sl
 8008d00:	4659      	mov	r1, fp
 8008d02:	f7f7 fdd3 	bl	80008ac <__aeabi_ddiv>
 8008d06:	e783      	b.n	8008c10 <_strtod_l+0x3d0>
 8008d08:	4b32      	ldr	r3, [pc, #200]	@ (8008dd4 <_strtod_l+0x594>)
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	1124      	asrs	r4, r4, #4
 8008d10:	4650      	mov	r0, sl
 8008d12:	4659      	mov	r1, fp
 8008d14:	461e      	mov	r6, r3
 8008d16:	2c01      	cmp	r4, #1
 8008d18:	dc21      	bgt.n	8008d5e <_strtod_l+0x51e>
 8008d1a:	b10b      	cbz	r3, 8008d20 <_strtod_l+0x4e0>
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	468b      	mov	fp, r1
 8008d20:	492c      	ldr	r1, [pc, #176]	@ (8008dd4 <_strtod_l+0x594>)
 8008d22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d32:	f7f7 fc91 	bl	8000658 <__aeabi_dmul>
 8008d36:	4b28      	ldr	r3, [pc, #160]	@ (8008dd8 <_strtod_l+0x598>)
 8008d38:	460a      	mov	r2, r1
 8008d3a:	400b      	ands	r3, r1
 8008d3c:	4927      	ldr	r1, [pc, #156]	@ (8008ddc <_strtod_l+0x59c>)
 8008d3e:	428b      	cmp	r3, r1
 8008d40:	4682      	mov	sl, r0
 8008d42:	d898      	bhi.n	8008c76 <_strtod_l+0x436>
 8008d44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	bf86      	itte	hi
 8008d4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008de0 <_strtod_l+0x5a0>
 8008d50:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9308      	str	r3, [sp, #32]
 8008d5c:	e07a      	b.n	8008e54 <_strtod_l+0x614>
 8008d5e:	07e2      	lsls	r2, r4, #31
 8008d60:	d505      	bpl.n	8008d6e <_strtod_l+0x52e>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fc76 	bl	8000658 <__aeabi_dmul>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	9a08      	ldr	r2, [sp, #32]
 8008d70:	3208      	adds	r2, #8
 8008d72:	3601      	adds	r6, #1
 8008d74:	1064      	asrs	r4, r4, #1
 8008d76:	9208      	str	r2, [sp, #32]
 8008d78:	e7cd      	b.n	8008d16 <_strtod_l+0x4d6>
 8008d7a:	d0ed      	beq.n	8008d58 <_strtod_l+0x518>
 8008d7c:	4264      	negs	r4, r4
 8008d7e:	f014 020f 	ands.w	r2, r4, #15
 8008d82:	d00a      	beq.n	8008d9a <_strtod_l+0x55a>
 8008d84:	4b12      	ldr	r3, [pc, #72]	@ (8008dd0 <_strtod_l+0x590>)
 8008d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d8a:	4650      	mov	r0, sl
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fd8b 	bl	80008ac <__aeabi_ddiv>
 8008d96:	4682      	mov	sl, r0
 8008d98:	468b      	mov	fp, r1
 8008d9a:	1124      	asrs	r4, r4, #4
 8008d9c:	d0dc      	beq.n	8008d58 <_strtod_l+0x518>
 8008d9e:	2c1f      	cmp	r4, #31
 8008da0:	dd20      	ble.n	8008de4 <_strtod_l+0x5a4>
 8008da2:	2400      	movs	r4, #0
 8008da4:	46a0      	mov	r8, r4
 8008da6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008da8:	46a1      	mov	r9, r4
 8008daa:	9a05      	ldr	r2, [sp, #20]
 8008dac:	2322      	movs	r3, #34	@ 0x22
 8008dae:	f04f 0a00 	mov.w	sl, #0
 8008db2:	f04f 0b00 	mov.w	fp, #0
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e768      	b.n	8008c8c <_strtod_l+0x44c>
 8008dba:	bf00      	nop
 8008dbc:	0800a7d9 	.word	0x0800a7d9
 8008dc0:	0800a9ec 	.word	0x0800a9ec
 8008dc4:	0800a7d1 	.word	0x0800a7d1
 8008dc8:	0800a808 	.word	0x0800a808
 8008dcc:	0800ab95 	.word	0x0800ab95
 8008dd0:	0800a920 	.word	0x0800a920
 8008dd4:	0800a8f8 	.word	0x0800a8f8
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	7ca00000 	.word	0x7ca00000
 8008de0:	7fefffff 	.word	0x7fefffff
 8008de4:	f014 0310 	ands.w	r3, r4, #16
 8008de8:	bf18      	it	ne
 8008dea:	236a      	movne	r3, #106	@ 0x6a
 8008dec:	4ea9      	ldr	r6, [pc, #676]	@ (8009094 <_strtod_l+0x854>)
 8008dee:	9308      	str	r3, [sp, #32]
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	2300      	movs	r3, #0
 8008df6:	07e2      	lsls	r2, r4, #31
 8008df8:	d504      	bpl.n	8008e04 <_strtod_l+0x5c4>
 8008dfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dfe:	f7f7 fc2b 	bl	8000658 <__aeabi_dmul>
 8008e02:	2301      	movs	r3, #1
 8008e04:	1064      	asrs	r4, r4, #1
 8008e06:	f106 0608 	add.w	r6, r6, #8
 8008e0a:	d1f4      	bne.n	8008df6 <_strtod_l+0x5b6>
 8008e0c:	b10b      	cbz	r3, 8008e12 <_strtod_l+0x5d2>
 8008e0e:	4682      	mov	sl, r0
 8008e10:	468b      	mov	fp, r1
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	b1b3      	cbz	r3, 8008e44 <_strtod_l+0x604>
 8008e16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	4659      	mov	r1, fp
 8008e22:	dd0f      	ble.n	8008e44 <_strtod_l+0x604>
 8008e24:	2b1f      	cmp	r3, #31
 8008e26:	dd55      	ble.n	8008ed4 <_strtod_l+0x694>
 8008e28:	2b34      	cmp	r3, #52	@ 0x34
 8008e2a:	bfde      	ittt	le
 8008e2c:	f04f 33ff 	movle.w	r3, #4294967295
 8008e30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008e34:	4093      	lslle	r3, r2
 8008e36:	f04f 0a00 	mov.w	sl, #0
 8008e3a:	bfcc      	ite	gt
 8008e3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e40:	ea03 0b01 	andle.w	fp, r3, r1
 8008e44:	2200      	movs	r2, #0
 8008e46:	2300      	movs	r3, #0
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	f7f7 fe6c 	bl	8000b28 <__aeabi_dcmpeq>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1a6      	bne.n	8008da2 <_strtod_l+0x562>
 8008e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e5a:	9805      	ldr	r0, [sp, #20]
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	463a      	mov	r2, r7
 8008e60:	f7ff f8c6 	bl	8007ff0 <__s2b>
 8008e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f43f af05 	beq.w	8008c76 <_strtod_l+0x436>
 8008e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	eba9 0308 	sub.w	r3, r9, r8
 8008e74:	bfa8      	it	ge
 8008e76:	2300      	movge	r3, #0
 8008e78:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e7a:	2400      	movs	r4, #0
 8008e7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e80:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e82:	46a0      	mov	r8, r4
 8008e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e86:	9805      	ldr	r0, [sp, #20]
 8008e88:	6859      	ldr	r1, [r3, #4]
 8008e8a:	f7ff f809 	bl	8007ea0 <_Balloc>
 8008e8e:	4681      	mov	r9, r0
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f43f aef4 	beq.w	8008c7e <_strtod_l+0x43e>
 8008e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	3202      	adds	r2, #2
 8008e9c:	f103 010c 	add.w	r1, r3, #12
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	300c      	adds	r0, #12
 8008ea4:	f000 fd72 	bl	800998c <memcpy>
 8008ea8:	ec4b ab10 	vmov	d0, sl, fp
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	aa1c      	add	r2, sp, #112	@ 0x70
 8008eb0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008eb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008eb6:	f7ff fbd7 	bl	8008668 <__d2b>
 8008eba:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f43f aede 	beq.w	8008c7e <_strtod_l+0x43e>
 8008ec2:	9805      	ldr	r0, [sp, #20]
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	f7ff f929 	bl	800811c <__i2b>
 8008eca:	4680      	mov	r8, r0
 8008ecc:	b948      	cbnz	r0, 8008ee2 <_strtod_l+0x6a2>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	e6d4      	b.n	8008c7e <_strtod_l+0x43e>
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8008edc:	ea03 0a0a 	and.w	sl, r3, sl
 8008ee0:	e7b0      	b.n	8008e44 <_strtod_l+0x604>
 8008ee2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008ee4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	bfab      	itete	ge
 8008eea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008eec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008eee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ef0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ef2:	bfac      	ite	ge
 8008ef4:	18ef      	addge	r7, r5, r3
 8008ef6:	1b5e      	sublt	r6, r3, r5
 8008ef8:	9b08      	ldr	r3, [sp, #32]
 8008efa:	1aed      	subs	r5, r5, r3
 8008efc:	4415      	add	r5, r2
 8008efe:	4b66      	ldr	r3, [pc, #408]	@ (8009098 <_strtod_l+0x858>)
 8008f00:	3d01      	subs	r5, #1
 8008f02:	429d      	cmp	r5, r3
 8008f04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f08:	da50      	bge.n	8008fac <_strtod_l+0x76c>
 8008f0a:	1b5b      	subs	r3, r3, r5
 8008f0c:	2b1f      	cmp	r3, #31
 8008f0e:	eba2 0203 	sub.w	r2, r2, r3
 8008f12:	f04f 0101 	mov.w	r1, #1
 8008f16:	dc3d      	bgt.n	8008f94 <_strtod_l+0x754>
 8008f18:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f22:	18bd      	adds	r5, r7, r2
 8008f24:	9b08      	ldr	r3, [sp, #32]
 8008f26:	42af      	cmp	r7, r5
 8008f28:	4416      	add	r6, r2
 8008f2a:	441e      	add	r6, r3
 8008f2c:	463b      	mov	r3, r7
 8008f2e:	bfa8      	it	ge
 8008f30:	462b      	movge	r3, r5
 8008f32:	42b3      	cmp	r3, r6
 8008f34:	bfa8      	it	ge
 8008f36:	4633      	movge	r3, r6
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bfc2      	ittt	gt
 8008f3c:	1aed      	subgt	r5, r5, r3
 8008f3e:	1af6      	subgt	r6, r6, r3
 8008f40:	1aff      	subgt	r7, r7, r3
 8008f42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd16      	ble.n	8008f76 <_strtod_l+0x736>
 8008f48:	4641      	mov	r1, r8
 8008f4a:	9805      	ldr	r0, [sp, #20]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f7ff f9a5 	bl	800829c <__pow5mult>
 8008f52:	4680      	mov	r8, r0
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d0ba      	beq.n	8008ece <_strtod_l+0x68e>
 8008f58:	4601      	mov	r1, r0
 8008f5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	f7ff f8f3 	bl	8008148 <__multiply>
 8008f62:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f43f ae8a 	beq.w	8008c7e <_strtod_l+0x43e>
 8008f6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f6c:	9805      	ldr	r0, [sp, #20]
 8008f6e:	f7fe ffd7 	bl	8007f20 <_Bfree>
 8008f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	dc1d      	bgt.n	8008fb6 <_strtod_l+0x776>
 8008f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd23      	ble.n	8008fc8 <_strtod_l+0x788>
 8008f80:	4649      	mov	r1, r9
 8008f82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f84:	9805      	ldr	r0, [sp, #20]
 8008f86:	f7ff f989 	bl	800829c <__pow5mult>
 8008f8a:	4681      	mov	r9, r0
 8008f8c:	b9e0      	cbnz	r0, 8008fc8 <_strtod_l+0x788>
 8008f8e:	f04f 0900 	mov.w	r9, #0
 8008f92:	e674      	b.n	8008c7e <_strtod_l+0x43e>
 8008f94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008fa0:	35e2      	adds	r5, #226	@ 0xe2
 8008fa2:	fa01 f305 	lsl.w	r3, r1, r5
 8008fa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008faa:	e7ba      	b.n	8008f22 <_strtod_l+0x6e2>
 8008fac:	2300      	movs	r3, #0
 8008fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fb4:	e7b5      	b.n	8008f22 <_strtod_l+0x6e2>
 8008fb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fb8:	9805      	ldr	r0, [sp, #20]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	f7ff f9c8 	bl	8008350 <__lshift>
 8008fc0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1d9      	bne.n	8008f7a <_strtod_l+0x73a>
 8008fc6:	e65a      	b.n	8008c7e <_strtod_l+0x43e>
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	dd07      	ble.n	8008fdc <_strtod_l+0x79c>
 8008fcc:	4649      	mov	r1, r9
 8008fce:	9805      	ldr	r0, [sp, #20]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	f7ff f9bd 	bl	8008350 <__lshift>
 8008fd6:	4681      	mov	r9, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0d8      	beq.n	8008f8e <_strtod_l+0x74e>
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	dd08      	ble.n	8008ff2 <_strtod_l+0x7b2>
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	9805      	ldr	r0, [sp, #20]
 8008fe4:	463a      	mov	r2, r7
 8008fe6:	f7ff f9b3 	bl	8008350 <__lshift>
 8008fea:	4680      	mov	r8, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f43f ae46 	beq.w	8008c7e <_strtod_l+0x43e>
 8008ff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	464a      	mov	r2, r9
 8008ff8:	f7ff fa32 	bl	8008460 <__mdiff>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f ae3d 	beq.w	8008c7e <_strtod_l+0x43e>
 8009004:	68c3      	ldr	r3, [r0, #12]
 8009006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009008:	2300      	movs	r3, #0
 800900a:	60c3      	str	r3, [r0, #12]
 800900c:	4641      	mov	r1, r8
 800900e:	f7ff fa0b 	bl	8008428 <__mcmp>
 8009012:	2800      	cmp	r0, #0
 8009014:	da46      	bge.n	80090a4 <_strtod_l+0x864>
 8009016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009018:	ea53 030a 	orrs.w	r3, r3, sl
 800901c:	d16c      	bne.n	80090f8 <_strtod_l+0x8b8>
 800901e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009022:	2b00      	cmp	r3, #0
 8009024:	d168      	bne.n	80090f8 <_strtod_l+0x8b8>
 8009026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800902a:	0d1b      	lsrs	r3, r3, #20
 800902c:	051b      	lsls	r3, r3, #20
 800902e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009032:	d961      	bls.n	80090f8 <_strtod_l+0x8b8>
 8009034:	6963      	ldr	r3, [r4, #20]
 8009036:	b913      	cbnz	r3, 800903e <_strtod_l+0x7fe>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	2b01      	cmp	r3, #1
 800903c:	dd5c      	ble.n	80090f8 <_strtod_l+0x8b8>
 800903e:	4621      	mov	r1, r4
 8009040:	2201      	movs	r2, #1
 8009042:	9805      	ldr	r0, [sp, #20]
 8009044:	f7ff f984 	bl	8008350 <__lshift>
 8009048:	4641      	mov	r1, r8
 800904a:	4604      	mov	r4, r0
 800904c:	f7ff f9ec 	bl	8008428 <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	dd51      	ble.n	80090f8 <_strtod_l+0x8b8>
 8009054:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009058:	9a08      	ldr	r2, [sp, #32]
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	051b      	lsls	r3, r3, #20
 800905e:	2a00      	cmp	r2, #0
 8009060:	d06b      	beq.n	800913a <_strtod_l+0x8fa>
 8009062:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009066:	d868      	bhi.n	800913a <_strtod_l+0x8fa>
 8009068:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800906c:	f67f ae9d 	bls.w	8008daa <_strtod_l+0x56a>
 8009070:	4b0a      	ldr	r3, [pc, #40]	@ (800909c <_strtod_l+0x85c>)
 8009072:	4650      	mov	r0, sl
 8009074:	4659      	mov	r1, fp
 8009076:	2200      	movs	r2, #0
 8009078:	f7f7 faee 	bl	8000658 <__aeabi_dmul>
 800907c:	4b08      	ldr	r3, [pc, #32]	@ (80090a0 <_strtod_l+0x860>)
 800907e:	400b      	ands	r3, r1
 8009080:	4682      	mov	sl, r0
 8009082:	468b      	mov	fp, r1
 8009084:	2b00      	cmp	r3, #0
 8009086:	f47f ae05 	bne.w	8008c94 <_strtod_l+0x454>
 800908a:	9a05      	ldr	r2, [sp, #20]
 800908c:	2322      	movs	r3, #34	@ 0x22
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e600      	b.n	8008c94 <_strtod_l+0x454>
 8009092:	bf00      	nop
 8009094:	0800aa18 	.word	0x0800aa18
 8009098:	fffffc02 	.word	0xfffffc02
 800909c:	39500000 	.word	0x39500000
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80090a8:	d165      	bne.n	8009176 <_strtod_l+0x936>
 80090aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80090ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090b0:	b35a      	cbz	r2, 800910a <_strtod_l+0x8ca>
 80090b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009330 <_strtod_l+0xaf0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d12b      	bne.n	8009110 <_strtod_l+0x8d0>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	4651      	mov	r1, sl
 80090bc:	b303      	cbz	r3, 8009100 <_strtod_l+0x8c0>
 80090be:	4b9d      	ldr	r3, [pc, #628]	@ (8009334 <_strtod_l+0xaf4>)
 80090c0:	465a      	mov	r2, fp
 80090c2:	4013      	ands	r3, r2
 80090c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295
 80090cc:	d81b      	bhi.n	8009106 <_strtod_l+0x8c6>
 80090ce:	0d1b      	lsrs	r3, r3, #20
 80090d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	4299      	cmp	r1, r3
 80090da:	d119      	bne.n	8009110 <_strtod_l+0x8d0>
 80090dc:	4b96      	ldr	r3, [pc, #600]	@ (8009338 <_strtod_l+0xaf8>)
 80090de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d102      	bne.n	80090ea <_strtod_l+0x8aa>
 80090e4:	3101      	adds	r1, #1
 80090e6:	f43f adca 	beq.w	8008c7e <_strtod_l+0x43e>
 80090ea:	4b92      	ldr	r3, [pc, #584]	@ (8009334 <_strtod_l+0xaf4>)
 80090ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090ee:	401a      	ands	r2, r3
 80090f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090f4:	f04f 0a00 	mov.w	sl, #0
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1b8      	bne.n	8009070 <_strtod_l+0x830>
 80090fe:	e5c9      	b.n	8008c94 <_strtod_l+0x454>
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
 8009104:	e7e8      	b.n	80090d8 <_strtod_l+0x898>
 8009106:	4613      	mov	r3, r2
 8009108:	e7e6      	b.n	80090d8 <_strtod_l+0x898>
 800910a:	ea53 030a 	orrs.w	r3, r3, sl
 800910e:	d0a1      	beq.n	8009054 <_strtod_l+0x814>
 8009110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009112:	b1db      	cbz	r3, 800914c <_strtod_l+0x90c>
 8009114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009116:	4213      	tst	r3, r2
 8009118:	d0ee      	beq.n	80090f8 <_strtod_l+0x8b8>
 800911a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800911c:	9a08      	ldr	r2, [sp, #32]
 800911e:	4650      	mov	r0, sl
 8009120:	4659      	mov	r1, fp
 8009122:	b1bb      	cbz	r3, 8009154 <_strtod_l+0x914>
 8009124:	f7ff fb6e 	bl	8008804 <sulp>
 8009128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800912c:	ec53 2b10 	vmov	r2, r3, d0
 8009130:	f7f7 f8dc 	bl	80002ec <__adddf3>
 8009134:	4682      	mov	sl, r0
 8009136:	468b      	mov	fp, r1
 8009138:	e7de      	b.n	80090f8 <_strtod_l+0x8b8>
 800913a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800913e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009142:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009146:	f04f 3aff 	mov.w	sl, #4294967295
 800914a:	e7d5      	b.n	80090f8 <_strtod_l+0x8b8>
 800914c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800914e:	ea13 0f0a 	tst.w	r3, sl
 8009152:	e7e1      	b.n	8009118 <_strtod_l+0x8d8>
 8009154:	f7ff fb56 	bl	8008804 <sulp>
 8009158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800915c:	ec53 2b10 	vmov	r2, r3, d0
 8009160:	f7f7 f8c2 	bl	80002e8 <__aeabi_dsub>
 8009164:	2200      	movs	r2, #0
 8009166:	2300      	movs	r3, #0
 8009168:	4682      	mov	sl, r0
 800916a:	468b      	mov	fp, r1
 800916c:	f7f7 fcdc 	bl	8000b28 <__aeabi_dcmpeq>
 8009170:	2800      	cmp	r0, #0
 8009172:	d0c1      	beq.n	80090f8 <_strtod_l+0x8b8>
 8009174:	e619      	b.n	8008daa <_strtod_l+0x56a>
 8009176:	4641      	mov	r1, r8
 8009178:	4620      	mov	r0, r4
 800917a:	f7ff facd 	bl	8008718 <__ratio>
 800917e:	ec57 6b10 	vmov	r6, r7, d0
 8009182:	2200      	movs	r2, #0
 8009184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 fce0 	bl	8000b50 <__aeabi_dcmple>
 8009190:	2800      	cmp	r0, #0
 8009192:	d06f      	beq.n	8009274 <_strtod_l+0xa34>
 8009194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d17a      	bne.n	8009290 <_strtod_l+0xa50>
 800919a:	f1ba 0f00 	cmp.w	sl, #0
 800919e:	d158      	bne.n	8009252 <_strtod_l+0xa12>
 80091a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d15a      	bne.n	8009260 <_strtod_l+0xa20>
 80091aa:	4b64      	ldr	r3, [pc, #400]	@ (800933c <_strtod_l+0xafc>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 fcc3 	bl	8000b3c <__aeabi_dcmplt>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d159      	bne.n	800926e <_strtod_l+0xa2e>
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	4b60      	ldr	r3, [pc, #384]	@ (8009340 <_strtod_l+0xb00>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 fa49 	bl	8000658 <__aeabi_dmul>
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80091ce:	9606      	str	r6, [sp, #24]
 80091d0:	9307      	str	r3, [sp, #28]
 80091d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091d6:	4d57      	ldr	r5, [pc, #348]	@ (8009334 <_strtod_l+0xaf4>)
 80091d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80091dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091de:	401d      	ands	r5, r3
 80091e0:	4b58      	ldr	r3, [pc, #352]	@ (8009344 <_strtod_l+0xb04>)
 80091e2:	429d      	cmp	r5, r3
 80091e4:	f040 80b2 	bne.w	800934c <_strtod_l+0xb0c>
 80091e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80091ee:	ec4b ab10 	vmov	d0, sl, fp
 80091f2:	f7ff f9c9 	bl	8008588 <__ulp>
 80091f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091fa:	ec51 0b10 	vmov	r0, r1, d0
 80091fe:	f7f7 fa2b 	bl	8000658 <__aeabi_dmul>
 8009202:	4652      	mov	r2, sl
 8009204:	465b      	mov	r3, fp
 8009206:	f7f7 f871 	bl	80002ec <__adddf3>
 800920a:	460b      	mov	r3, r1
 800920c:	4949      	ldr	r1, [pc, #292]	@ (8009334 <_strtod_l+0xaf4>)
 800920e:	4a4e      	ldr	r2, [pc, #312]	@ (8009348 <_strtod_l+0xb08>)
 8009210:	4019      	ands	r1, r3
 8009212:	4291      	cmp	r1, r2
 8009214:	4682      	mov	sl, r0
 8009216:	d942      	bls.n	800929e <_strtod_l+0xa5e>
 8009218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800921a:	4b47      	ldr	r3, [pc, #284]	@ (8009338 <_strtod_l+0xaf8>)
 800921c:	429a      	cmp	r2, r3
 800921e:	d103      	bne.n	8009228 <_strtod_l+0x9e8>
 8009220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009222:	3301      	adds	r3, #1
 8009224:	f43f ad2b 	beq.w	8008c7e <_strtod_l+0x43e>
 8009228:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009338 <_strtod_l+0xaf8>
 800922c:	f04f 3aff 	mov.w	sl, #4294967295
 8009230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009232:	9805      	ldr	r0, [sp, #20]
 8009234:	f7fe fe74 	bl	8007f20 <_Bfree>
 8009238:	9805      	ldr	r0, [sp, #20]
 800923a:	4649      	mov	r1, r9
 800923c:	f7fe fe70 	bl	8007f20 <_Bfree>
 8009240:	9805      	ldr	r0, [sp, #20]
 8009242:	4641      	mov	r1, r8
 8009244:	f7fe fe6c 	bl	8007f20 <_Bfree>
 8009248:	9805      	ldr	r0, [sp, #20]
 800924a:	4621      	mov	r1, r4
 800924c:	f7fe fe68 	bl	8007f20 <_Bfree>
 8009250:	e618      	b.n	8008e84 <_strtod_l+0x644>
 8009252:	f1ba 0f01 	cmp.w	sl, #1
 8009256:	d103      	bne.n	8009260 <_strtod_l+0xa20>
 8009258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	f43f ada5 	beq.w	8008daa <_strtod_l+0x56a>
 8009260:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009310 <_strtod_l+0xad0>
 8009264:	4f35      	ldr	r7, [pc, #212]	@ (800933c <_strtod_l+0xafc>)
 8009266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800926a:	2600      	movs	r6, #0
 800926c:	e7b1      	b.n	80091d2 <_strtod_l+0x992>
 800926e:	4f34      	ldr	r7, [pc, #208]	@ (8009340 <_strtod_l+0xb00>)
 8009270:	2600      	movs	r6, #0
 8009272:	e7aa      	b.n	80091ca <_strtod_l+0x98a>
 8009274:	4b32      	ldr	r3, [pc, #200]	@ (8009340 <_strtod_l+0xb00>)
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	2200      	movs	r2, #0
 800927c:	f7f7 f9ec 	bl	8000658 <__aeabi_dmul>
 8009280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d09f      	beq.n	80091ca <_strtod_l+0x98a>
 800928a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800928e:	e7a0      	b.n	80091d2 <_strtod_l+0x992>
 8009290:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009318 <_strtod_l+0xad8>
 8009294:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009298:	ec57 6b17 	vmov	r6, r7, d7
 800929c:	e799      	b.n	80091d2 <_strtod_l+0x992>
 800929e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1c1      	bne.n	8009230 <_strtod_l+0x9f0>
 80092ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092b0:	0d1b      	lsrs	r3, r3, #20
 80092b2:	051b      	lsls	r3, r3, #20
 80092b4:	429d      	cmp	r5, r3
 80092b6:	d1bb      	bne.n	8009230 <_strtod_l+0x9f0>
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fd2c 	bl	8000d18 <__aeabi_d2lz>
 80092c0:	f7f7 f99c 	bl	80005fc <__aeabi_l2d>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 f80c 	bl	80002e8 <__aeabi_dsub>
 80092d0:	460b      	mov	r3, r1
 80092d2:	4602      	mov	r2, r0
 80092d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80092d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80092dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092de:	ea46 060a 	orr.w	r6, r6, sl
 80092e2:	431e      	orrs	r6, r3
 80092e4:	d06f      	beq.n	80093c6 <_strtod_l+0xb86>
 80092e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009320 <_strtod_l+0xae0>)
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f7f7 fc26 	bl	8000b3c <__aeabi_dcmplt>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f47f accf 	bne.w	8008c94 <_strtod_l+0x454>
 80092f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009328 <_strtod_l+0xae8>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009300:	f7f7 fc3a 	bl	8000b78 <__aeabi_dcmpgt>
 8009304:	2800      	cmp	r0, #0
 8009306:	d093      	beq.n	8009230 <_strtod_l+0x9f0>
 8009308:	e4c4      	b.n	8008c94 <_strtod_l+0x454>
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w
 8009310:	00000000 	.word	0x00000000
 8009314:	bff00000 	.word	0xbff00000
 8009318:	00000000 	.word	0x00000000
 800931c:	3ff00000 	.word	0x3ff00000
 8009320:	94a03595 	.word	0x94a03595
 8009324:	3fdfffff 	.word	0x3fdfffff
 8009328:	35afe535 	.word	0x35afe535
 800932c:	3fe00000 	.word	0x3fe00000
 8009330:	000fffff 	.word	0x000fffff
 8009334:	7ff00000 	.word	0x7ff00000
 8009338:	7fefffff 	.word	0x7fefffff
 800933c:	3ff00000 	.word	0x3ff00000
 8009340:	3fe00000 	.word	0x3fe00000
 8009344:	7fe00000 	.word	0x7fe00000
 8009348:	7c9fffff 	.word	0x7c9fffff
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	b323      	cbz	r3, 800939a <_strtod_l+0xb5a>
 8009350:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009354:	d821      	bhi.n	800939a <_strtod_l+0xb5a>
 8009356:	a328      	add	r3, pc, #160	@ (adr r3, 80093f8 <_strtod_l+0xbb8>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	4630      	mov	r0, r6
 800935e:	4639      	mov	r1, r7
 8009360:	f7f7 fbf6 	bl	8000b50 <__aeabi_dcmple>
 8009364:	b1a0      	cbz	r0, 8009390 <_strtod_l+0xb50>
 8009366:	4639      	mov	r1, r7
 8009368:	4630      	mov	r0, r6
 800936a:	f7f7 fc4d 	bl	8000c08 <__aeabi_d2uiz>
 800936e:	2801      	cmp	r0, #1
 8009370:	bf38      	it	cc
 8009372:	2001      	movcc	r0, #1
 8009374:	f7f7 f8f6 	bl	8000564 <__aeabi_ui2d>
 8009378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800937a:	4606      	mov	r6, r0
 800937c:	460f      	mov	r7, r1
 800937e:	b9fb      	cbnz	r3, 80093c0 <_strtod_l+0xb80>
 8009380:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009384:	9014      	str	r0, [sp, #80]	@ 0x50
 8009386:	9315      	str	r3, [sp, #84]	@ 0x54
 8009388:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800938c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009390:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009392:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009396:	1b5b      	subs	r3, r3, r5
 8009398:	9311      	str	r3, [sp, #68]	@ 0x44
 800939a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800939e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80093a2:	f7ff f8f1 	bl	8008588 <__ulp>
 80093a6:	4650      	mov	r0, sl
 80093a8:	ec53 2b10 	vmov	r2, r3, d0
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7f7 f953 	bl	8000658 <__aeabi_dmul>
 80093b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80093b6:	f7f6 ff99 	bl	80002ec <__adddf3>
 80093ba:	4682      	mov	sl, r0
 80093bc:	468b      	mov	fp, r1
 80093be:	e770      	b.n	80092a2 <_strtod_l+0xa62>
 80093c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80093c4:	e7e0      	b.n	8009388 <_strtod_l+0xb48>
 80093c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009400 <_strtod_l+0xbc0>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 fbb6 	bl	8000b3c <__aeabi_dcmplt>
 80093d0:	e798      	b.n	8009304 <_strtod_l+0xac4>
 80093d2:	2300      	movs	r3, #0
 80093d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80093d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	f7ff ba6d 	b.w	80088ba <_strtod_l+0x7a>
 80093e0:	2a65      	cmp	r2, #101	@ 0x65
 80093e2:	f43f ab66 	beq.w	8008ab2 <_strtod_l+0x272>
 80093e6:	2a45      	cmp	r2, #69	@ 0x45
 80093e8:	f43f ab63 	beq.w	8008ab2 <_strtod_l+0x272>
 80093ec:	2301      	movs	r3, #1
 80093ee:	f7ff bb9e 	b.w	8008b2e <_strtod_l+0x2ee>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	ffc00000 	.word	0xffc00000
 80093fc:	41dfffff 	.word	0x41dfffff
 8009400:	94a03595 	.word	0x94a03595
 8009404:	3fcfffff 	.word	0x3fcfffff

08009408 <_strtod_r>:
 8009408:	4b01      	ldr	r3, [pc, #4]	@ (8009410 <_strtod_r+0x8>)
 800940a:	f7ff ba19 	b.w	8008840 <_strtod_l>
 800940e:	bf00      	nop
 8009410:	200001bc 	.word	0x200001bc

08009414 <_strtol_l.constprop.0>:
 8009414:	2b24      	cmp	r3, #36	@ 0x24
 8009416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941a:	4686      	mov	lr, r0
 800941c:	4690      	mov	r8, r2
 800941e:	d801      	bhi.n	8009424 <_strtol_l.constprop.0+0x10>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d106      	bne.n	8009432 <_strtol_l.constprop.0+0x1e>
 8009424:	f7fd fdba 	bl	8006f9c <__errno>
 8009428:	2316      	movs	r3, #22
 800942a:	6003      	str	r3, [r0, #0]
 800942c:	2000      	movs	r0, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	4834      	ldr	r0, [pc, #208]	@ (8009504 <_strtol_l.constprop.0+0xf0>)
 8009434:	460d      	mov	r5, r1
 8009436:	462a      	mov	r2, r5
 8009438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800943c:	5d06      	ldrb	r6, [r0, r4]
 800943e:	f016 0608 	ands.w	r6, r6, #8
 8009442:	d1f8      	bne.n	8009436 <_strtol_l.constprop.0+0x22>
 8009444:	2c2d      	cmp	r4, #45	@ 0x2d
 8009446:	d12d      	bne.n	80094a4 <_strtol_l.constprop.0+0x90>
 8009448:	782c      	ldrb	r4, [r5, #0]
 800944a:	2601      	movs	r6, #1
 800944c:	1c95      	adds	r5, r2, #2
 800944e:	f033 0210 	bics.w	r2, r3, #16
 8009452:	d109      	bne.n	8009468 <_strtol_l.constprop.0+0x54>
 8009454:	2c30      	cmp	r4, #48	@ 0x30
 8009456:	d12a      	bne.n	80094ae <_strtol_l.constprop.0+0x9a>
 8009458:	782a      	ldrb	r2, [r5, #0]
 800945a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800945e:	2a58      	cmp	r2, #88	@ 0x58
 8009460:	d125      	bne.n	80094ae <_strtol_l.constprop.0+0x9a>
 8009462:	786c      	ldrb	r4, [r5, #1]
 8009464:	2310      	movs	r3, #16
 8009466:	3502      	adds	r5, #2
 8009468:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800946c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009470:	2200      	movs	r2, #0
 8009472:	fbbc f9f3 	udiv	r9, ip, r3
 8009476:	4610      	mov	r0, r2
 8009478:	fb03 ca19 	mls	sl, r3, r9, ip
 800947c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009480:	2f09      	cmp	r7, #9
 8009482:	d81b      	bhi.n	80094bc <_strtol_l.constprop.0+0xa8>
 8009484:	463c      	mov	r4, r7
 8009486:	42a3      	cmp	r3, r4
 8009488:	dd27      	ble.n	80094da <_strtol_l.constprop.0+0xc6>
 800948a:	1c57      	adds	r7, r2, #1
 800948c:	d007      	beq.n	800949e <_strtol_l.constprop.0+0x8a>
 800948e:	4581      	cmp	r9, r0
 8009490:	d320      	bcc.n	80094d4 <_strtol_l.constprop.0+0xc0>
 8009492:	d101      	bne.n	8009498 <_strtol_l.constprop.0+0x84>
 8009494:	45a2      	cmp	sl, r4
 8009496:	db1d      	blt.n	80094d4 <_strtol_l.constprop.0+0xc0>
 8009498:	fb00 4003 	mla	r0, r0, r3, r4
 800949c:	2201      	movs	r2, #1
 800949e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094a2:	e7eb      	b.n	800947c <_strtol_l.constprop.0+0x68>
 80094a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80094a6:	bf04      	itt	eq
 80094a8:	782c      	ldrbeq	r4, [r5, #0]
 80094aa:	1c95      	addeq	r5, r2, #2
 80094ac:	e7cf      	b.n	800944e <_strtol_l.constprop.0+0x3a>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1da      	bne.n	8009468 <_strtol_l.constprop.0+0x54>
 80094b2:	2c30      	cmp	r4, #48	@ 0x30
 80094b4:	bf0c      	ite	eq
 80094b6:	2308      	moveq	r3, #8
 80094b8:	230a      	movne	r3, #10
 80094ba:	e7d5      	b.n	8009468 <_strtol_l.constprop.0+0x54>
 80094bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80094c0:	2f19      	cmp	r7, #25
 80094c2:	d801      	bhi.n	80094c8 <_strtol_l.constprop.0+0xb4>
 80094c4:	3c37      	subs	r4, #55	@ 0x37
 80094c6:	e7de      	b.n	8009486 <_strtol_l.constprop.0+0x72>
 80094c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80094cc:	2f19      	cmp	r7, #25
 80094ce:	d804      	bhi.n	80094da <_strtol_l.constprop.0+0xc6>
 80094d0:	3c57      	subs	r4, #87	@ 0x57
 80094d2:	e7d8      	b.n	8009486 <_strtol_l.constprop.0+0x72>
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	e7e1      	b.n	800949e <_strtol_l.constprop.0+0x8a>
 80094da:	1c53      	adds	r3, r2, #1
 80094dc:	d108      	bne.n	80094f0 <_strtol_l.constprop.0+0xdc>
 80094de:	2322      	movs	r3, #34	@ 0x22
 80094e0:	f8ce 3000 	str.w	r3, [lr]
 80094e4:	4660      	mov	r0, ip
 80094e6:	f1b8 0f00 	cmp.w	r8, #0
 80094ea:	d0a0      	beq.n	800942e <_strtol_l.constprop.0+0x1a>
 80094ec:	1e69      	subs	r1, r5, #1
 80094ee:	e006      	b.n	80094fe <_strtol_l.constprop.0+0xea>
 80094f0:	b106      	cbz	r6, 80094f4 <_strtol_l.constprop.0+0xe0>
 80094f2:	4240      	negs	r0, r0
 80094f4:	f1b8 0f00 	cmp.w	r8, #0
 80094f8:	d099      	beq.n	800942e <_strtol_l.constprop.0+0x1a>
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	d1f6      	bne.n	80094ec <_strtol_l.constprop.0+0xd8>
 80094fe:	f8c8 1000 	str.w	r1, [r8]
 8009502:	e794      	b.n	800942e <_strtol_l.constprop.0+0x1a>
 8009504:	0800aa41 	.word	0x0800aa41

08009508 <_strtol_r>:
 8009508:	f7ff bf84 	b.w	8009414 <_strtol_l.constprop.0>

0800950c <__ssputs_r>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	688e      	ldr	r6, [r1, #8]
 8009512:	461f      	mov	r7, r3
 8009514:	42be      	cmp	r6, r7
 8009516:	680b      	ldr	r3, [r1, #0]
 8009518:	4682      	mov	sl, r0
 800951a:	460c      	mov	r4, r1
 800951c:	4690      	mov	r8, r2
 800951e:	d82d      	bhi.n	800957c <__ssputs_r+0x70>
 8009520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009528:	d026      	beq.n	8009578 <__ssputs_r+0x6c>
 800952a:	6965      	ldr	r5, [r4, #20]
 800952c:	6909      	ldr	r1, [r1, #16]
 800952e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009532:	eba3 0901 	sub.w	r9, r3, r1
 8009536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800953a:	1c7b      	adds	r3, r7, #1
 800953c:	444b      	add	r3, r9
 800953e:	106d      	asrs	r5, r5, #1
 8009540:	429d      	cmp	r5, r3
 8009542:	bf38      	it	cc
 8009544:	461d      	movcc	r5, r3
 8009546:	0553      	lsls	r3, r2, #21
 8009548:	d527      	bpl.n	800959a <__ssputs_r+0x8e>
 800954a:	4629      	mov	r1, r5
 800954c:	f7fe fc1c 	bl	8007d88 <_malloc_r>
 8009550:	4606      	mov	r6, r0
 8009552:	b360      	cbz	r0, 80095ae <__ssputs_r+0xa2>
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	464a      	mov	r2, r9
 8009558:	f000 fa18 	bl	800998c <memcpy>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	6126      	str	r6, [r4, #16]
 800956a:	6165      	str	r5, [r4, #20]
 800956c:	444e      	add	r6, r9
 800956e:	eba5 0509 	sub.w	r5, r5, r9
 8009572:	6026      	str	r6, [r4, #0]
 8009574:	60a5      	str	r5, [r4, #8]
 8009576:	463e      	mov	r6, r7
 8009578:	42be      	cmp	r6, r7
 800957a:	d900      	bls.n	800957e <__ssputs_r+0x72>
 800957c:	463e      	mov	r6, r7
 800957e:	6820      	ldr	r0, [r4, #0]
 8009580:	4632      	mov	r2, r6
 8009582:	4641      	mov	r1, r8
 8009584:	f000 f9c6 	bl	8009914 <memmove>
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	1b9b      	subs	r3, r3, r6
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	4433      	add	r3, r6
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	2000      	movs	r0, #0
 8009596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959a:	462a      	mov	r2, r5
 800959c:	f000 fd89 	bl	800a0b2 <_realloc_r>
 80095a0:	4606      	mov	r6, r0
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d1e0      	bne.n	8009568 <__ssputs_r+0x5c>
 80095a6:	6921      	ldr	r1, [r4, #16]
 80095a8:	4650      	mov	r0, sl
 80095aa:	f7fe fb79 	bl	8007ca0 <_free_r>
 80095ae:	230c      	movs	r3, #12
 80095b0:	f8ca 3000 	str.w	r3, [sl]
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	e7e9      	b.n	8009596 <__ssputs_r+0x8a>
	...

080095c4 <_svfiprintf_r>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	4698      	mov	r8, r3
 80095ca:	898b      	ldrh	r3, [r1, #12]
 80095cc:	061b      	lsls	r3, r3, #24
 80095ce:	b09d      	sub	sp, #116	@ 0x74
 80095d0:	4607      	mov	r7, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	4614      	mov	r4, r2
 80095d6:	d510      	bpl.n	80095fa <_svfiprintf_r+0x36>
 80095d8:	690b      	ldr	r3, [r1, #16]
 80095da:	b973      	cbnz	r3, 80095fa <_svfiprintf_r+0x36>
 80095dc:	2140      	movs	r1, #64	@ 0x40
 80095de:	f7fe fbd3 	bl	8007d88 <_malloc_r>
 80095e2:	6028      	str	r0, [r5, #0]
 80095e4:	6128      	str	r0, [r5, #16]
 80095e6:	b930      	cbnz	r0, 80095f6 <_svfiprintf_r+0x32>
 80095e8:	230c      	movs	r3, #12
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	b01d      	add	sp, #116	@ 0x74
 80095f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f6:	2340      	movs	r3, #64	@ 0x40
 80095f8:	616b      	str	r3, [r5, #20]
 80095fa:	2300      	movs	r3, #0
 80095fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fe:	2320      	movs	r3, #32
 8009600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009604:	f8cd 800c 	str.w	r8, [sp, #12]
 8009608:	2330      	movs	r3, #48	@ 0x30
 800960a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097a8 <_svfiprintf_r+0x1e4>
 800960e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009612:	f04f 0901 	mov.w	r9, #1
 8009616:	4623      	mov	r3, r4
 8009618:	469a      	mov	sl, r3
 800961a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800961e:	b10a      	cbz	r2, 8009624 <_svfiprintf_r+0x60>
 8009620:	2a25      	cmp	r2, #37	@ 0x25
 8009622:	d1f9      	bne.n	8009618 <_svfiprintf_r+0x54>
 8009624:	ebba 0b04 	subs.w	fp, sl, r4
 8009628:	d00b      	beq.n	8009642 <_svfiprintf_r+0x7e>
 800962a:	465b      	mov	r3, fp
 800962c:	4622      	mov	r2, r4
 800962e:	4629      	mov	r1, r5
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff ff6b 	bl	800950c <__ssputs_r>
 8009636:	3001      	adds	r0, #1
 8009638:	f000 80a7 	beq.w	800978a <_svfiprintf_r+0x1c6>
 800963c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800963e:	445a      	add	r2, fp
 8009640:	9209      	str	r2, [sp, #36]	@ 0x24
 8009642:	f89a 3000 	ldrb.w	r3, [sl]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 809f 	beq.w	800978a <_svfiprintf_r+0x1c6>
 800964c:	2300      	movs	r3, #0
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009656:	f10a 0a01 	add.w	sl, sl, #1
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009662:	931a      	str	r3, [sp, #104]	@ 0x68
 8009664:	4654      	mov	r4, sl
 8009666:	2205      	movs	r2, #5
 8009668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966c:	484e      	ldr	r0, [pc, #312]	@ (80097a8 <_svfiprintf_r+0x1e4>)
 800966e:	f7f6 fddf 	bl	8000230 <memchr>
 8009672:	9a04      	ldr	r2, [sp, #16]
 8009674:	b9d8      	cbnz	r0, 80096ae <_svfiprintf_r+0xea>
 8009676:	06d0      	lsls	r0, r2, #27
 8009678:	bf44      	itt	mi
 800967a:	2320      	movmi	r3, #32
 800967c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009680:	0711      	lsls	r1, r2, #28
 8009682:	bf44      	itt	mi
 8009684:	232b      	movmi	r3, #43	@ 0x2b
 8009686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800968a:	f89a 3000 	ldrb.w	r3, [sl]
 800968e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009690:	d015      	beq.n	80096be <_svfiprintf_r+0xfa>
 8009692:	9a07      	ldr	r2, [sp, #28]
 8009694:	4654      	mov	r4, sl
 8009696:	2000      	movs	r0, #0
 8009698:	f04f 0c0a 	mov.w	ip, #10
 800969c:	4621      	mov	r1, r4
 800969e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a2:	3b30      	subs	r3, #48	@ 0x30
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	d94b      	bls.n	8009740 <_svfiprintf_r+0x17c>
 80096a8:	b1b0      	cbz	r0, 80096d8 <_svfiprintf_r+0x114>
 80096aa:	9207      	str	r2, [sp, #28]
 80096ac:	e014      	b.n	80096d8 <_svfiprintf_r+0x114>
 80096ae:	eba0 0308 	sub.w	r3, r0, r8
 80096b2:	fa09 f303 	lsl.w	r3, r9, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	46a2      	mov	sl, r4
 80096bc:	e7d2      	b.n	8009664 <_svfiprintf_r+0xa0>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	1d19      	adds	r1, r3, #4
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	9103      	str	r1, [sp, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bfbb      	ittet	lt
 80096ca:	425b      	neglt	r3, r3
 80096cc:	f042 0202 	orrlt.w	r2, r2, #2
 80096d0:	9307      	strge	r3, [sp, #28]
 80096d2:	9307      	strlt	r3, [sp, #28]
 80096d4:	bfb8      	it	lt
 80096d6:	9204      	strlt	r2, [sp, #16]
 80096d8:	7823      	ldrb	r3, [r4, #0]
 80096da:	2b2e      	cmp	r3, #46	@ 0x2e
 80096dc:	d10a      	bne.n	80096f4 <_svfiprintf_r+0x130>
 80096de:	7863      	ldrb	r3, [r4, #1]
 80096e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e2:	d132      	bne.n	800974a <_svfiprintf_r+0x186>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	1d1a      	adds	r2, r3, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	9203      	str	r2, [sp, #12]
 80096ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096f0:	3402      	adds	r4, #2
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097b8 <_svfiprintf_r+0x1f4>
 80096f8:	7821      	ldrb	r1, [r4, #0]
 80096fa:	2203      	movs	r2, #3
 80096fc:	4650      	mov	r0, sl
 80096fe:	f7f6 fd97 	bl	8000230 <memchr>
 8009702:	b138      	cbz	r0, 8009714 <_svfiprintf_r+0x150>
 8009704:	9b04      	ldr	r3, [sp, #16]
 8009706:	eba0 000a 	sub.w	r0, r0, sl
 800970a:	2240      	movs	r2, #64	@ 0x40
 800970c:	4082      	lsls	r2, r0
 800970e:	4313      	orrs	r3, r2
 8009710:	3401      	adds	r4, #1
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009718:	4824      	ldr	r0, [pc, #144]	@ (80097ac <_svfiprintf_r+0x1e8>)
 800971a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800971e:	2206      	movs	r2, #6
 8009720:	f7f6 fd86 	bl	8000230 <memchr>
 8009724:	2800      	cmp	r0, #0
 8009726:	d036      	beq.n	8009796 <_svfiprintf_r+0x1d2>
 8009728:	4b21      	ldr	r3, [pc, #132]	@ (80097b0 <_svfiprintf_r+0x1ec>)
 800972a:	bb1b      	cbnz	r3, 8009774 <_svfiprintf_r+0x1b0>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	3307      	adds	r3, #7
 8009730:	f023 0307 	bic.w	r3, r3, #7
 8009734:	3308      	adds	r3, #8
 8009736:	9303      	str	r3, [sp, #12]
 8009738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973a:	4433      	add	r3, r6
 800973c:	9309      	str	r3, [sp, #36]	@ 0x24
 800973e:	e76a      	b.n	8009616 <_svfiprintf_r+0x52>
 8009740:	fb0c 3202 	mla	r2, ip, r2, r3
 8009744:	460c      	mov	r4, r1
 8009746:	2001      	movs	r0, #1
 8009748:	e7a8      	b.n	800969c <_svfiprintf_r+0xd8>
 800974a:	2300      	movs	r3, #0
 800974c:	3401      	adds	r4, #1
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	4619      	mov	r1, r3
 8009752:	f04f 0c0a 	mov.w	ip, #10
 8009756:	4620      	mov	r0, r4
 8009758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800975c:	3a30      	subs	r2, #48	@ 0x30
 800975e:	2a09      	cmp	r2, #9
 8009760:	d903      	bls.n	800976a <_svfiprintf_r+0x1a6>
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c6      	beq.n	80096f4 <_svfiprintf_r+0x130>
 8009766:	9105      	str	r1, [sp, #20]
 8009768:	e7c4      	b.n	80096f4 <_svfiprintf_r+0x130>
 800976a:	fb0c 2101 	mla	r1, ip, r1, r2
 800976e:	4604      	mov	r4, r0
 8009770:	2301      	movs	r3, #1
 8009772:	e7f0      	b.n	8009756 <_svfiprintf_r+0x192>
 8009774:	ab03      	add	r3, sp, #12
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	462a      	mov	r2, r5
 800977a:	4b0e      	ldr	r3, [pc, #56]	@ (80097b4 <_svfiprintf_r+0x1f0>)
 800977c:	a904      	add	r1, sp, #16
 800977e:	4638      	mov	r0, r7
 8009780:	f7fc fcc8 	bl	8006114 <_printf_float>
 8009784:	1c42      	adds	r2, r0, #1
 8009786:	4606      	mov	r6, r0
 8009788:	d1d6      	bne.n	8009738 <_svfiprintf_r+0x174>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	065b      	lsls	r3, r3, #25
 800978e:	f53f af2d 	bmi.w	80095ec <_svfiprintf_r+0x28>
 8009792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009794:	e72c      	b.n	80095f0 <_svfiprintf_r+0x2c>
 8009796:	ab03      	add	r3, sp, #12
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	462a      	mov	r2, r5
 800979c:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <_svfiprintf_r+0x1f0>)
 800979e:	a904      	add	r1, sp, #16
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7fc ff4f 	bl	8006644 <_printf_i>
 80097a6:	e7ed      	b.n	8009784 <_svfiprintf_r+0x1c0>
 80097a8:	0800ab41 	.word	0x0800ab41
 80097ac:	0800ab4b 	.word	0x0800ab4b
 80097b0:	08006115 	.word	0x08006115
 80097b4:	0800950d 	.word	0x0800950d
 80097b8:	0800ab47 	.word	0x0800ab47

080097bc <__sflush_r>:
 80097bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	0716      	lsls	r6, r2, #28
 80097c6:	4605      	mov	r5, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	d454      	bmi.n	8009876 <__sflush_r+0xba>
 80097cc:	684b      	ldr	r3, [r1, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	dc02      	bgt.n	80097d8 <__sflush_r+0x1c>
 80097d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd48      	ble.n	800986a <__sflush_r+0xae>
 80097d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097da:	2e00      	cmp	r6, #0
 80097dc:	d045      	beq.n	800986a <__sflush_r+0xae>
 80097de:	2300      	movs	r3, #0
 80097e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097e4:	682f      	ldr	r7, [r5, #0]
 80097e6:	6a21      	ldr	r1, [r4, #32]
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	d030      	beq.n	800984e <__sflush_r+0x92>
 80097ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	0759      	lsls	r1, r3, #29
 80097f2:	d505      	bpl.n	8009800 <__sflush_r+0x44>
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	1ad2      	subs	r2, r2, r3
 80097f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097fa:	b10b      	cbz	r3, 8009800 <__sflush_r+0x44>
 80097fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	2300      	movs	r3, #0
 8009802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	4628      	mov	r0, r5
 8009808:	47b0      	blx	r6
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	d106      	bne.n	800981e <__sflush_r+0x62>
 8009810:	6829      	ldr	r1, [r5, #0]
 8009812:	291d      	cmp	r1, #29
 8009814:	d82b      	bhi.n	800986e <__sflush_r+0xb2>
 8009816:	4a2a      	ldr	r2, [pc, #168]	@ (80098c0 <__sflush_r+0x104>)
 8009818:	410a      	asrs	r2, r1
 800981a:	07d6      	lsls	r6, r2, #31
 800981c:	d427      	bmi.n	800986e <__sflush_r+0xb2>
 800981e:	2200      	movs	r2, #0
 8009820:	6062      	str	r2, [r4, #4]
 8009822:	04d9      	lsls	r1, r3, #19
 8009824:	6922      	ldr	r2, [r4, #16]
 8009826:	6022      	str	r2, [r4, #0]
 8009828:	d504      	bpl.n	8009834 <__sflush_r+0x78>
 800982a:	1c42      	adds	r2, r0, #1
 800982c:	d101      	bne.n	8009832 <__sflush_r+0x76>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	b903      	cbnz	r3, 8009834 <__sflush_r+0x78>
 8009832:	6560      	str	r0, [r4, #84]	@ 0x54
 8009834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009836:	602f      	str	r7, [r5, #0]
 8009838:	b1b9      	cbz	r1, 800986a <__sflush_r+0xae>
 800983a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800983e:	4299      	cmp	r1, r3
 8009840:	d002      	beq.n	8009848 <__sflush_r+0x8c>
 8009842:	4628      	mov	r0, r5
 8009844:	f7fe fa2c 	bl	8007ca0 <_free_r>
 8009848:	2300      	movs	r3, #0
 800984a:	6363      	str	r3, [r4, #52]	@ 0x34
 800984c:	e00d      	b.n	800986a <__sflush_r+0xae>
 800984e:	2301      	movs	r3, #1
 8009850:	4628      	mov	r0, r5
 8009852:	47b0      	blx	r6
 8009854:	4602      	mov	r2, r0
 8009856:	1c50      	adds	r0, r2, #1
 8009858:	d1c9      	bne.n	80097ee <__sflush_r+0x32>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0c6      	beq.n	80097ee <__sflush_r+0x32>
 8009860:	2b1d      	cmp	r3, #29
 8009862:	d001      	beq.n	8009868 <__sflush_r+0xac>
 8009864:	2b16      	cmp	r3, #22
 8009866:	d11e      	bne.n	80098a6 <__sflush_r+0xea>
 8009868:	602f      	str	r7, [r5, #0]
 800986a:	2000      	movs	r0, #0
 800986c:	e022      	b.n	80098b4 <__sflush_r+0xf8>
 800986e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009872:	b21b      	sxth	r3, r3
 8009874:	e01b      	b.n	80098ae <__sflush_r+0xf2>
 8009876:	690f      	ldr	r7, [r1, #16]
 8009878:	2f00      	cmp	r7, #0
 800987a:	d0f6      	beq.n	800986a <__sflush_r+0xae>
 800987c:	0793      	lsls	r3, r2, #30
 800987e:	680e      	ldr	r6, [r1, #0]
 8009880:	bf08      	it	eq
 8009882:	694b      	ldreq	r3, [r1, #20]
 8009884:	600f      	str	r7, [r1, #0]
 8009886:	bf18      	it	ne
 8009888:	2300      	movne	r3, #0
 800988a:	eba6 0807 	sub.w	r8, r6, r7
 800988e:	608b      	str	r3, [r1, #8]
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	dde9      	ble.n	800986a <__sflush_r+0xae>
 8009896:	6a21      	ldr	r1, [r4, #32]
 8009898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800989a:	4643      	mov	r3, r8
 800989c:	463a      	mov	r2, r7
 800989e:	4628      	mov	r0, r5
 80098a0:	47b0      	blx	r6
 80098a2:	2800      	cmp	r0, #0
 80098a4:	dc08      	bgt.n	80098b8 <__sflush_r+0xfc>
 80098a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	4407      	add	r7, r0
 80098ba:	eba8 0800 	sub.w	r8, r8, r0
 80098be:	e7e7      	b.n	8009890 <__sflush_r+0xd4>
 80098c0:	dfbffffe 	.word	0xdfbffffe

080098c4 <_fflush_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	690b      	ldr	r3, [r1, #16]
 80098c8:	4605      	mov	r5, r0
 80098ca:	460c      	mov	r4, r1
 80098cc:	b913      	cbnz	r3, 80098d4 <_fflush_r+0x10>
 80098ce:	2500      	movs	r5, #0
 80098d0:	4628      	mov	r0, r5
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	b118      	cbz	r0, 80098de <_fflush_r+0x1a>
 80098d6:	6a03      	ldr	r3, [r0, #32]
 80098d8:	b90b      	cbnz	r3, 80098de <_fflush_r+0x1a>
 80098da:	f7fd fa73 	bl	8006dc4 <__sinit>
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f3      	beq.n	80098ce <_fflush_r+0xa>
 80098e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098e8:	07d0      	lsls	r0, r2, #31
 80098ea:	d404      	bmi.n	80098f6 <_fflush_r+0x32>
 80098ec:	0599      	lsls	r1, r3, #22
 80098ee:	d402      	bmi.n	80098f6 <_fflush_r+0x32>
 80098f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f2:	f7fd fb7e 	bl	8006ff2 <__retarget_lock_acquire_recursive>
 80098f6:	4628      	mov	r0, r5
 80098f8:	4621      	mov	r1, r4
 80098fa:	f7ff ff5f 	bl	80097bc <__sflush_r>
 80098fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009900:	07da      	lsls	r2, r3, #31
 8009902:	4605      	mov	r5, r0
 8009904:	d4e4      	bmi.n	80098d0 <_fflush_r+0xc>
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	059b      	lsls	r3, r3, #22
 800990a:	d4e1      	bmi.n	80098d0 <_fflush_r+0xc>
 800990c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800990e:	f7fd fb71 	bl	8006ff4 <__retarget_lock_release_recursive>
 8009912:	e7dd      	b.n	80098d0 <_fflush_r+0xc>

08009914 <memmove>:
 8009914:	4288      	cmp	r0, r1
 8009916:	b510      	push	{r4, lr}
 8009918:	eb01 0402 	add.w	r4, r1, r2
 800991c:	d902      	bls.n	8009924 <memmove+0x10>
 800991e:	4284      	cmp	r4, r0
 8009920:	4623      	mov	r3, r4
 8009922:	d807      	bhi.n	8009934 <memmove+0x20>
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	42a1      	cmp	r1, r4
 8009928:	d008      	beq.n	800993c <memmove+0x28>
 800992a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009932:	e7f8      	b.n	8009926 <memmove+0x12>
 8009934:	4402      	add	r2, r0
 8009936:	4601      	mov	r1, r0
 8009938:	428a      	cmp	r2, r1
 800993a:	d100      	bne.n	800993e <memmove+0x2a>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009946:	e7f7      	b.n	8009938 <memmove+0x24>

08009948 <strncmp>:
 8009948:	b510      	push	{r4, lr}
 800994a:	b16a      	cbz	r2, 8009968 <strncmp+0x20>
 800994c:	3901      	subs	r1, #1
 800994e:	1884      	adds	r4, r0, r2
 8009950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009954:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009958:	429a      	cmp	r2, r3
 800995a:	d103      	bne.n	8009964 <strncmp+0x1c>
 800995c:	42a0      	cmp	r0, r4
 800995e:	d001      	beq.n	8009964 <strncmp+0x1c>
 8009960:	2a00      	cmp	r2, #0
 8009962:	d1f5      	bne.n	8009950 <strncmp+0x8>
 8009964:	1ad0      	subs	r0, r2, r3
 8009966:	bd10      	pop	{r4, pc}
 8009968:	4610      	mov	r0, r2
 800996a:	e7fc      	b.n	8009966 <strncmp+0x1e>

0800996c <_sbrk_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d06      	ldr	r5, [pc, #24]	@ (8009988 <_sbrk_r+0x1c>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	602b      	str	r3, [r5, #0]
 8009978:	f7f9 fa06 	bl	8002d88 <_sbrk>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_sbrk_r+0x1a>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_sbrk_r+0x1a>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20000628 	.word	0x20000628

0800998c <memcpy>:
 800998c:	440a      	add	r2, r1
 800998e:	4291      	cmp	r1, r2
 8009990:	f100 33ff 	add.w	r3, r0, #4294967295
 8009994:	d100      	bne.n	8009998 <memcpy+0xc>
 8009996:	4770      	bx	lr
 8009998:	b510      	push	{r4, lr}
 800999a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800999e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a2:	4291      	cmp	r1, r2
 80099a4:	d1f9      	bne.n	800999a <memcpy+0xe>
 80099a6:	bd10      	pop	{r4, pc}

080099a8 <nan>:
 80099a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099b0 <nan+0x8>
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	00000000 	.word	0x00000000
 80099b4:	7ff80000 	.word	0x7ff80000

080099b8 <__assert_func>:
 80099b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ba:	4614      	mov	r4, r2
 80099bc:	461a      	mov	r2, r3
 80099be:	4b09      	ldr	r3, [pc, #36]	@ (80099e4 <__assert_func+0x2c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4605      	mov	r5, r0
 80099c4:	68d8      	ldr	r0, [r3, #12]
 80099c6:	b954      	cbnz	r4, 80099de <__assert_func+0x26>
 80099c8:	4b07      	ldr	r3, [pc, #28]	@ (80099e8 <__assert_func+0x30>)
 80099ca:	461c      	mov	r4, r3
 80099cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099d0:	9100      	str	r1, [sp, #0]
 80099d2:	462b      	mov	r3, r5
 80099d4:	4905      	ldr	r1, [pc, #20]	@ (80099ec <__assert_func+0x34>)
 80099d6:	f000 fba7 	bl	800a128 <fiprintf>
 80099da:	f000 fbb7 	bl	800a14c <abort>
 80099de:	4b04      	ldr	r3, [pc, #16]	@ (80099f0 <__assert_func+0x38>)
 80099e0:	e7f4      	b.n	80099cc <__assert_func+0x14>
 80099e2:	bf00      	nop
 80099e4:	2000016c 	.word	0x2000016c
 80099e8:	0800ab95 	.word	0x0800ab95
 80099ec:	0800ab67 	.word	0x0800ab67
 80099f0:	0800ab5a 	.word	0x0800ab5a

080099f4 <_calloc_r>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	fba1 5402 	umull	r5, r4, r1, r2
 80099fa:	b93c      	cbnz	r4, 8009a0c <_calloc_r+0x18>
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7fe f9c3 	bl	8007d88 <_malloc_r>
 8009a02:	4606      	mov	r6, r0
 8009a04:	b928      	cbnz	r0, 8009a12 <_calloc_r+0x1e>
 8009a06:	2600      	movs	r6, #0
 8009a08:	4630      	mov	r0, r6
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	220c      	movs	r2, #12
 8009a0e:	6002      	str	r2, [r0, #0]
 8009a10:	e7f9      	b.n	8009a06 <_calloc_r+0x12>
 8009a12:	462a      	mov	r2, r5
 8009a14:	4621      	mov	r1, r4
 8009a16:	f7fd fa6e 	bl	8006ef6 <memset>
 8009a1a:	e7f5      	b.n	8009a08 <_calloc_r+0x14>

08009a1c <rshift>:
 8009a1c:	6903      	ldr	r3, [r0, #16]
 8009a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a2a:	f100 0414 	add.w	r4, r0, #20
 8009a2e:	dd45      	ble.n	8009abc <rshift+0xa0>
 8009a30:	f011 011f 	ands.w	r1, r1, #31
 8009a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a3c:	d10c      	bne.n	8009a58 <rshift+0x3c>
 8009a3e:	f100 0710 	add.w	r7, r0, #16
 8009a42:	4629      	mov	r1, r5
 8009a44:	42b1      	cmp	r1, r6
 8009a46:	d334      	bcc.n	8009ab2 <rshift+0x96>
 8009a48:	1a9b      	subs	r3, r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	1eea      	subs	r2, r5, #3
 8009a4e:	4296      	cmp	r6, r2
 8009a50:	bf38      	it	cc
 8009a52:	2300      	movcc	r3, #0
 8009a54:	4423      	add	r3, r4
 8009a56:	e015      	b.n	8009a84 <rshift+0x68>
 8009a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a5c:	f1c1 0820 	rsb	r8, r1, #32
 8009a60:	40cf      	lsrs	r7, r1
 8009a62:	f105 0e04 	add.w	lr, r5, #4
 8009a66:	46a1      	mov	r9, r4
 8009a68:	4576      	cmp	r6, lr
 8009a6a:	46f4      	mov	ip, lr
 8009a6c:	d815      	bhi.n	8009a9a <rshift+0x7e>
 8009a6e:	1a9a      	subs	r2, r3, r2
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	3a04      	subs	r2, #4
 8009a74:	3501      	adds	r5, #1
 8009a76:	42ae      	cmp	r6, r5
 8009a78:	bf38      	it	cc
 8009a7a:	2200      	movcc	r2, #0
 8009a7c:	18a3      	adds	r3, r4, r2
 8009a7e:	50a7      	str	r7, [r4, r2]
 8009a80:	b107      	cbz	r7, 8009a84 <rshift+0x68>
 8009a82:	3304      	adds	r3, #4
 8009a84:	1b1a      	subs	r2, r3, r4
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a8c:	bf08      	it	eq
 8009a8e:	2300      	moveq	r3, #0
 8009a90:	6102      	str	r2, [r0, #16]
 8009a92:	bf08      	it	eq
 8009a94:	6143      	streq	r3, [r0, #20]
 8009a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a9a:	f8dc c000 	ldr.w	ip, [ip]
 8009a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8009aa6:	f849 7b04 	str.w	r7, [r9], #4
 8009aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aae:	40cf      	lsrs	r7, r1
 8009ab0:	e7da      	b.n	8009a68 <rshift+0x4c>
 8009ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009aba:	e7c3      	b.n	8009a44 <rshift+0x28>
 8009abc:	4623      	mov	r3, r4
 8009abe:	e7e1      	b.n	8009a84 <rshift+0x68>

08009ac0 <__hexdig_fun>:
 8009ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	d802      	bhi.n	8009ace <__hexdig_fun+0xe>
 8009ac8:	3820      	subs	r0, #32
 8009aca:	b2c0      	uxtb	r0, r0
 8009acc:	4770      	bx	lr
 8009ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d801      	bhi.n	8009ada <__hexdig_fun+0x1a>
 8009ad6:	3847      	subs	r0, #71	@ 0x47
 8009ad8:	e7f7      	b.n	8009aca <__hexdig_fun+0xa>
 8009ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ade:	2b05      	cmp	r3, #5
 8009ae0:	d801      	bhi.n	8009ae6 <__hexdig_fun+0x26>
 8009ae2:	3827      	subs	r0, #39	@ 0x27
 8009ae4:	e7f1      	b.n	8009aca <__hexdig_fun+0xa>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	4770      	bx	lr
	...

08009aec <__gethex>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	b085      	sub	sp, #20
 8009af2:	468a      	mov	sl, r1
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	680b      	ldr	r3, [r1, #0]
 8009af8:	9001      	str	r0, [sp, #4]
 8009afa:	4690      	mov	r8, r2
 8009afc:	1c9c      	adds	r4, r3, #2
 8009afe:	46a1      	mov	r9, r4
 8009b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b04:	2830      	cmp	r0, #48	@ 0x30
 8009b06:	d0fa      	beq.n	8009afe <__gethex+0x12>
 8009b08:	eba9 0303 	sub.w	r3, r9, r3
 8009b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b10:	f7ff ffd6 	bl	8009ac0 <__hexdig_fun>
 8009b14:	4605      	mov	r5, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d168      	bne.n	8009bec <__gethex+0x100>
 8009b1a:	49a0      	ldr	r1, [pc, #640]	@ (8009d9c <__gethex+0x2b0>)
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	4648      	mov	r0, r9
 8009b20:	f7ff ff12 	bl	8009948 <strncmp>
 8009b24:	4607      	mov	r7, r0
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d167      	bne.n	8009bfa <__gethex+0x10e>
 8009b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b2e:	4626      	mov	r6, r4
 8009b30:	f7ff ffc6 	bl	8009ac0 <__hexdig_fun>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d062      	beq.n	8009bfe <__gethex+0x112>
 8009b38:	4623      	mov	r3, r4
 8009b3a:	7818      	ldrb	r0, [r3, #0]
 8009b3c:	2830      	cmp	r0, #48	@ 0x30
 8009b3e:	4699      	mov	r9, r3
 8009b40:	f103 0301 	add.w	r3, r3, #1
 8009b44:	d0f9      	beq.n	8009b3a <__gethex+0x4e>
 8009b46:	f7ff ffbb 	bl	8009ac0 <__hexdig_fun>
 8009b4a:	fab0 f580 	clz	r5, r0
 8009b4e:	096d      	lsrs	r5, r5, #5
 8009b50:	f04f 0b01 	mov.w	fp, #1
 8009b54:	464a      	mov	r2, r9
 8009b56:	4616      	mov	r6, r2
 8009b58:	3201      	adds	r2, #1
 8009b5a:	7830      	ldrb	r0, [r6, #0]
 8009b5c:	f7ff ffb0 	bl	8009ac0 <__hexdig_fun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1f8      	bne.n	8009b56 <__gethex+0x6a>
 8009b64:	498d      	ldr	r1, [pc, #564]	@ (8009d9c <__gethex+0x2b0>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff feed 	bl	8009948 <strncmp>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d13f      	bne.n	8009bf2 <__gethex+0x106>
 8009b72:	b944      	cbnz	r4, 8009b86 <__gethex+0x9a>
 8009b74:	1c74      	adds	r4, r6, #1
 8009b76:	4622      	mov	r2, r4
 8009b78:	4616      	mov	r6, r2
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	7830      	ldrb	r0, [r6, #0]
 8009b7e:	f7ff ff9f 	bl	8009ac0 <__hexdig_fun>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d1f8      	bne.n	8009b78 <__gethex+0x8c>
 8009b86:	1ba4      	subs	r4, r4, r6
 8009b88:	00a7      	lsls	r7, r4, #2
 8009b8a:	7833      	ldrb	r3, [r6, #0]
 8009b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b90:	2b50      	cmp	r3, #80	@ 0x50
 8009b92:	d13e      	bne.n	8009c12 <__gethex+0x126>
 8009b94:	7873      	ldrb	r3, [r6, #1]
 8009b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b98:	d033      	beq.n	8009c02 <__gethex+0x116>
 8009b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b9c:	d034      	beq.n	8009c08 <__gethex+0x11c>
 8009b9e:	1c71      	adds	r1, r6, #1
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	7808      	ldrb	r0, [r1, #0]
 8009ba4:	f7ff ff8c 	bl	8009ac0 <__hexdig_fun>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b18      	cmp	r3, #24
 8009bae:	d830      	bhi.n	8009c12 <__gethex+0x126>
 8009bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8009bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bb8:	f7ff ff82 	bl	8009ac0 <__hexdig_fun>
 8009bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8009bc4:	f1bc 0f18 	cmp.w	ip, #24
 8009bc8:	f04f 030a 	mov.w	r3, #10
 8009bcc:	d91e      	bls.n	8009c0c <__gethex+0x120>
 8009bce:	b104      	cbz	r4, 8009bd2 <__gethex+0xe6>
 8009bd0:	4252      	negs	r2, r2
 8009bd2:	4417      	add	r7, r2
 8009bd4:	f8ca 1000 	str.w	r1, [sl]
 8009bd8:	b1ed      	cbz	r5, 8009c16 <__gethex+0x12a>
 8009bda:	f1bb 0f00 	cmp.w	fp, #0
 8009bde:	bf0c      	ite	eq
 8009be0:	2506      	moveq	r5, #6
 8009be2:	2500      	movne	r5, #0
 8009be4:	4628      	mov	r0, r5
 8009be6:	b005      	add	sp, #20
 8009be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	2500      	movs	r5, #0
 8009bee:	462c      	mov	r4, r5
 8009bf0:	e7b0      	b.n	8009b54 <__gethex+0x68>
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d1c7      	bne.n	8009b86 <__gethex+0x9a>
 8009bf6:	4627      	mov	r7, r4
 8009bf8:	e7c7      	b.n	8009b8a <__gethex+0x9e>
 8009bfa:	464e      	mov	r6, r9
 8009bfc:	462f      	mov	r7, r5
 8009bfe:	2501      	movs	r5, #1
 8009c00:	e7c3      	b.n	8009b8a <__gethex+0x9e>
 8009c02:	2400      	movs	r4, #0
 8009c04:	1cb1      	adds	r1, r6, #2
 8009c06:	e7cc      	b.n	8009ba2 <__gethex+0xb6>
 8009c08:	2401      	movs	r4, #1
 8009c0a:	e7fb      	b.n	8009c04 <__gethex+0x118>
 8009c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8009c10:	e7ce      	b.n	8009bb0 <__gethex+0xc4>
 8009c12:	4631      	mov	r1, r6
 8009c14:	e7de      	b.n	8009bd4 <__gethex+0xe8>
 8009c16:	eba6 0309 	sub.w	r3, r6, r9
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	dc0a      	bgt.n	8009c38 <__gethex+0x14c>
 8009c22:	9801      	ldr	r0, [sp, #4]
 8009c24:	f7fe f93c 	bl	8007ea0 <_Balloc>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	b940      	cbnz	r0, 8009c3e <__gethex+0x152>
 8009c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009da0 <__gethex+0x2b4>)
 8009c2e:	4602      	mov	r2, r0
 8009c30:	21e4      	movs	r1, #228	@ 0xe4
 8009c32:	485c      	ldr	r0, [pc, #368]	@ (8009da4 <__gethex+0x2b8>)
 8009c34:	f7ff fec0 	bl	80099b8 <__assert_func>
 8009c38:	3101      	adds	r1, #1
 8009c3a:	105b      	asrs	r3, r3, #1
 8009c3c:	e7ef      	b.n	8009c1e <__gethex+0x132>
 8009c3e:	f100 0a14 	add.w	sl, r0, #20
 8009c42:	2300      	movs	r3, #0
 8009c44:	4655      	mov	r5, sl
 8009c46:	469b      	mov	fp, r3
 8009c48:	45b1      	cmp	r9, r6
 8009c4a:	d337      	bcc.n	8009cbc <__gethex+0x1d0>
 8009c4c:	f845 bb04 	str.w	fp, [r5], #4
 8009c50:	eba5 050a 	sub.w	r5, r5, sl
 8009c54:	10ad      	asrs	r5, r5, #2
 8009c56:	6125      	str	r5, [r4, #16]
 8009c58:	4658      	mov	r0, fp
 8009c5a:	f7fe fa13 	bl	8008084 <__hi0bits>
 8009c5e:	016d      	lsls	r5, r5, #5
 8009c60:	f8d8 6000 	ldr.w	r6, [r8]
 8009c64:	1a2d      	subs	r5, r5, r0
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	dd54      	ble.n	8009d14 <__gethex+0x228>
 8009c6a:	1bad      	subs	r5, r5, r6
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7fe fda7 	bl	80087c2 <__any_on>
 8009c74:	4681      	mov	r9, r0
 8009c76:	b178      	cbz	r0, 8009c98 <__gethex+0x1ac>
 8009c78:	1e6b      	subs	r3, r5, #1
 8009c7a:	1159      	asrs	r1, r3, #5
 8009c7c:	f003 021f 	and.w	r2, r3, #31
 8009c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c84:	f04f 0901 	mov.w	r9, #1
 8009c88:	fa09 f202 	lsl.w	r2, r9, r2
 8009c8c:	420a      	tst	r2, r1
 8009c8e:	d003      	beq.n	8009c98 <__gethex+0x1ac>
 8009c90:	454b      	cmp	r3, r9
 8009c92:	dc36      	bgt.n	8009d02 <__gethex+0x216>
 8009c94:	f04f 0902 	mov.w	r9, #2
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7ff febe 	bl	8009a1c <rshift>
 8009ca0:	442f      	add	r7, r5
 8009ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ca6:	42bb      	cmp	r3, r7
 8009ca8:	da42      	bge.n	8009d30 <__gethex+0x244>
 8009caa:	9801      	ldr	r0, [sp, #4]
 8009cac:	4621      	mov	r1, r4
 8009cae:	f7fe f937 	bl	8007f20 <_Bfree>
 8009cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	25a3      	movs	r5, #163	@ 0xa3
 8009cba:	e793      	b.n	8009be4 <__gethex+0xf8>
 8009cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009cc2:	d012      	beq.n	8009cea <__gethex+0x1fe>
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d104      	bne.n	8009cd2 <__gethex+0x1e6>
 8009cc8:	f845 bb04 	str.w	fp, [r5], #4
 8009ccc:	f04f 0b00 	mov.w	fp, #0
 8009cd0:	465b      	mov	r3, fp
 8009cd2:	7830      	ldrb	r0, [r6, #0]
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	f7ff fef3 	bl	8009ac0 <__hexdig_fun>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	f000 000f 	and.w	r0, r0, #15
 8009ce0:	4098      	lsls	r0, r3
 8009ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	e7ae      	b.n	8009c48 <__gethex+0x15c>
 8009cea:	45b1      	cmp	r9, r6
 8009cec:	d8ea      	bhi.n	8009cc4 <__gethex+0x1d8>
 8009cee:	492b      	ldr	r1, [pc, #172]	@ (8009d9c <__gethex+0x2b0>)
 8009cf0:	9303      	str	r3, [sp, #12]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7ff fe27 	bl	8009948 <strncmp>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d1e1      	bne.n	8009cc4 <__gethex+0x1d8>
 8009d00:	e7a2      	b.n	8009c48 <__gethex+0x15c>
 8009d02:	1ea9      	subs	r1, r5, #2
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7fe fd5c 	bl	80087c2 <__any_on>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0c2      	beq.n	8009c94 <__gethex+0x1a8>
 8009d0e:	f04f 0903 	mov.w	r9, #3
 8009d12:	e7c1      	b.n	8009c98 <__gethex+0x1ac>
 8009d14:	da09      	bge.n	8009d2a <__gethex+0x23e>
 8009d16:	1b75      	subs	r5, r6, r5
 8009d18:	4621      	mov	r1, r4
 8009d1a:	9801      	ldr	r0, [sp, #4]
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	f7fe fb17 	bl	8008350 <__lshift>
 8009d22:	1b7f      	subs	r7, r7, r5
 8009d24:	4604      	mov	r4, r0
 8009d26:	f100 0a14 	add.w	sl, r0, #20
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	e7b8      	b.n	8009ca2 <__gethex+0x1b6>
 8009d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d34:	42bd      	cmp	r5, r7
 8009d36:	dd6f      	ble.n	8009e18 <__gethex+0x32c>
 8009d38:	1bed      	subs	r5, r5, r7
 8009d3a:	42ae      	cmp	r6, r5
 8009d3c:	dc34      	bgt.n	8009da8 <__gethex+0x2bc>
 8009d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d022      	beq.n	8009d8c <__gethex+0x2a0>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d024      	beq.n	8009d94 <__gethex+0x2a8>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d115      	bne.n	8009d7a <__gethex+0x28e>
 8009d4e:	42ae      	cmp	r6, r5
 8009d50:	d113      	bne.n	8009d7a <__gethex+0x28e>
 8009d52:	2e01      	cmp	r6, #1
 8009d54:	d10b      	bne.n	8009d6e <__gethex+0x282>
 8009d56:	9a02      	ldr	r2, [sp, #8]
 8009d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	f8ca 3000 	str.w	r3, [sl]
 8009d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d68:	2562      	movs	r5, #98	@ 0x62
 8009d6a:	601c      	str	r4, [r3, #0]
 8009d6c:	e73a      	b.n	8009be4 <__gethex+0xf8>
 8009d6e:	1e71      	subs	r1, r6, #1
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7fe fd26 	bl	80087c2 <__any_on>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d1ed      	bne.n	8009d56 <__gethex+0x26a>
 8009d7a:	9801      	ldr	r0, [sp, #4]
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	f7fe f8cf 	bl	8007f20 <_Bfree>
 8009d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d84:	2300      	movs	r3, #0
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	2550      	movs	r5, #80	@ 0x50
 8009d8a:	e72b      	b.n	8009be4 <__gethex+0xf8>
 8009d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f3      	bne.n	8009d7a <__gethex+0x28e>
 8009d92:	e7e0      	b.n	8009d56 <__gethex+0x26a>
 8009d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1dd      	bne.n	8009d56 <__gethex+0x26a>
 8009d9a:	e7ee      	b.n	8009d7a <__gethex+0x28e>
 8009d9c:	0800a9e8 	.word	0x0800a9e8
 8009da0:	0800a881 	.word	0x0800a881
 8009da4:	0800ab96 	.word	0x0800ab96
 8009da8:	1e6f      	subs	r7, r5, #1
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	d130      	bne.n	8009e12 <__gethex+0x326>
 8009db0:	b127      	cbz	r7, 8009dbc <__gethex+0x2d0>
 8009db2:	4639      	mov	r1, r7
 8009db4:	4620      	mov	r0, r4
 8009db6:	f7fe fd04 	bl	80087c2 <__any_on>
 8009dba:	4681      	mov	r9, r0
 8009dbc:	117a      	asrs	r2, r7, #5
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009dc4:	f007 071f 	and.w	r7, r7, #31
 8009dc8:	40bb      	lsls	r3, r7
 8009dca:	4213      	tst	r3, r2
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4620      	mov	r0, r4
 8009dd0:	bf18      	it	ne
 8009dd2:	f049 0902 	orrne.w	r9, r9, #2
 8009dd6:	f7ff fe21 	bl	8009a1c <rshift>
 8009dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009dde:	1b76      	subs	r6, r6, r5
 8009de0:	2502      	movs	r5, #2
 8009de2:	f1b9 0f00 	cmp.w	r9, #0
 8009de6:	d047      	beq.n	8009e78 <__gethex+0x38c>
 8009de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d015      	beq.n	8009e1c <__gethex+0x330>
 8009df0:	2b03      	cmp	r3, #3
 8009df2:	d017      	beq.n	8009e24 <__gethex+0x338>
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d109      	bne.n	8009e0c <__gethex+0x320>
 8009df8:	f019 0f02 	tst.w	r9, #2
 8009dfc:	d006      	beq.n	8009e0c <__gethex+0x320>
 8009dfe:	f8da 3000 	ldr.w	r3, [sl]
 8009e02:	ea49 0903 	orr.w	r9, r9, r3
 8009e06:	f019 0f01 	tst.w	r9, #1
 8009e0a:	d10e      	bne.n	8009e2a <__gethex+0x33e>
 8009e0c:	f045 0510 	orr.w	r5, r5, #16
 8009e10:	e032      	b.n	8009e78 <__gethex+0x38c>
 8009e12:	f04f 0901 	mov.w	r9, #1
 8009e16:	e7d1      	b.n	8009dbc <__gethex+0x2d0>
 8009e18:	2501      	movs	r5, #1
 8009e1a:	e7e2      	b.n	8009de2 <__gethex+0x2f6>
 8009e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1e:	f1c3 0301 	rsb	r3, r3, #1
 8009e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0f0      	beq.n	8009e0c <__gethex+0x320>
 8009e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e2e:	f104 0314 	add.w	r3, r4, #20
 8009e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e3a:	f04f 0c00 	mov.w	ip, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e48:	d01b      	beq.n	8009e82 <__gethex+0x396>
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	6002      	str	r2, [r0, #0]
 8009e4e:	2d02      	cmp	r5, #2
 8009e50:	f104 0314 	add.w	r3, r4, #20
 8009e54:	d13c      	bne.n	8009ed0 <__gethex+0x3e4>
 8009e56:	f8d8 2000 	ldr.w	r2, [r8]
 8009e5a:	3a01      	subs	r2, #1
 8009e5c:	42b2      	cmp	r2, r6
 8009e5e:	d109      	bne.n	8009e74 <__gethex+0x388>
 8009e60:	1171      	asrs	r1, r6, #5
 8009e62:	2201      	movs	r2, #1
 8009e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e68:	f006 061f 	and.w	r6, r6, #31
 8009e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8009e70:	421e      	tst	r6, r3
 8009e72:	d13a      	bne.n	8009eea <__gethex+0x3fe>
 8009e74:	f045 0520 	orr.w	r5, r5, #32
 8009e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7a:	601c      	str	r4, [r3, #0]
 8009e7c:	9b02      	ldr	r3, [sp, #8]
 8009e7e:	601f      	str	r7, [r3, #0]
 8009e80:	e6b0      	b.n	8009be4 <__gethex+0xf8>
 8009e82:	4299      	cmp	r1, r3
 8009e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e88:	d8d9      	bhi.n	8009e3e <__gethex+0x352>
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	459b      	cmp	fp, r3
 8009e8e:	db17      	blt.n	8009ec0 <__gethex+0x3d4>
 8009e90:	6861      	ldr	r1, [r4, #4]
 8009e92:	9801      	ldr	r0, [sp, #4]
 8009e94:	3101      	adds	r1, #1
 8009e96:	f7fe f803 	bl	8007ea0 <_Balloc>
 8009e9a:	4681      	mov	r9, r0
 8009e9c:	b918      	cbnz	r0, 8009ea6 <__gethex+0x3ba>
 8009e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f08 <__gethex+0x41c>)
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	2184      	movs	r1, #132	@ 0x84
 8009ea4:	e6c5      	b.n	8009c32 <__gethex+0x146>
 8009ea6:	6922      	ldr	r2, [r4, #16]
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	f104 010c 	add.w	r1, r4, #12
 8009eae:	0092      	lsls	r2, r2, #2
 8009eb0:	300c      	adds	r0, #12
 8009eb2:	f7ff fd6b 	bl	800998c <memcpy>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	9801      	ldr	r0, [sp, #4]
 8009eba:	f7fe f831 	bl	8007f20 <_Bfree>
 8009ebe:	464c      	mov	r4, r9
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ec8:	6122      	str	r2, [r4, #16]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	615a      	str	r2, [r3, #20]
 8009ece:	e7be      	b.n	8009e4e <__gethex+0x362>
 8009ed0:	6922      	ldr	r2, [r4, #16]
 8009ed2:	455a      	cmp	r2, fp
 8009ed4:	dd0b      	ble.n	8009eee <__gethex+0x402>
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7ff fd9f 	bl	8009a1c <rshift>
 8009ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ee2:	3701      	adds	r7, #1
 8009ee4:	42bb      	cmp	r3, r7
 8009ee6:	f6ff aee0 	blt.w	8009caa <__gethex+0x1be>
 8009eea:	2501      	movs	r5, #1
 8009eec:	e7c2      	b.n	8009e74 <__gethex+0x388>
 8009eee:	f016 061f 	ands.w	r6, r6, #31
 8009ef2:	d0fa      	beq.n	8009eea <__gethex+0x3fe>
 8009ef4:	4453      	add	r3, sl
 8009ef6:	f1c6 0620 	rsb	r6, r6, #32
 8009efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009efe:	f7fe f8c1 	bl	8008084 <__hi0bits>
 8009f02:	42b0      	cmp	r0, r6
 8009f04:	dbe7      	blt.n	8009ed6 <__gethex+0x3ea>
 8009f06:	e7f0      	b.n	8009eea <__gethex+0x3fe>
 8009f08:	0800a881 	.word	0x0800a881

08009f0c <L_shift>:
 8009f0c:	f1c2 0208 	rsb	r2, r2, #8
 8009f10:	0092      	lsls	r2, r2, #2
 8009f12:	b570      	push	{r4, r5, r6, lr}
 8009f14:	f1c2 0620 	rsb	r6, r2, #32
 8009f18:	6843      	ldr	r3, [r0, #4]
 8009f1a:	6804      	ldr	r4, [r0, #0]
 8009f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f20:	432c      	orrs	r4, r5
 8009f22:	40d3      	lsrs	r3, r2
 8009f24:	6004      	str	r4, [r0, #0]
 8009f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f2a:	4288      	cmp	r0, r1
 8009f2c:	d3f4      	bcc.n	8009f18 <L_shift+0xc>
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}

08009f30 <__match>:
 8009f30:	b530      	push	{r4, r5, lr}
 8009f32:	6803      	ldr	r3, [r0, #0]
 8009f34:	3301      	adds	r3, #1
 8009f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f3a:	b914      	cbnz	r4, 8009f42 <__match+0x12>
 8009f3c:	6003      	str	r3, [r0, #0]
 8009f3e:	2001      	movs	r0, #1
 8009f40:	bd30      	pop	{r4, r5, pc}
 8009f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f4a:	2d19      	cmp	r5, #25
 8009f4c:	bf98      	it	ls
 8009f4e:	3220      	addls	r2, #32
 8009f50:	42a2      	cmp	r2, r4
 8009f52:	d0f0      	beq.n	8009f36 <__match+0x6>
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7f3      	b.n	8009f40 <__match+0x10>

08009f58 <__hexnan>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	680b      	ldr	r3, [r1, #0]
 8009f5e:	6801      	ldr	r1, [r0, #0]
 8009f60:	115e      	asrs	r6, r3, #5
 8009f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f66:	f013 031f 	ands.w	r3, r3, #31
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	bf18      	it	ne
 8009f6e:	3604      	addne	r6, #4
 8009f70:	2500      	movs	r5, #0
 8009f72:	1f37      	subs	r7, r6, #4
 8009f74:	4682      	mov	sl, r0
 8009f76:	4690      	mov	r8, r2
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f7e:	46b9      	mov	r9, r7
 8009f80:	463c      	mov	r4, r7
 8009f82:	9502      	str	r5, [sp, #8]
 8009f84:	46ab      	mov	fp, r5
 8009f86:	784a      	ldrb	r2, [r1, #1]
 8009f88:	1c4b      	adds	r3, r1, #1
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	b342      	cbz	r2, 8009fe0 <__hexnan+0x88>
 8009f8e:	4610      	mov	r0, r2
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	9204      	str	r2, [sp, #16]
 8009f94:	f7ff fd94 	bl	8009ac0 <__hexdig_fun>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d151      	bne.n	800a040 <__hexnan+0xe8>
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	9905      	ldr	r1, [sp, #20]
 8009fa0:	2a20      	cmp	r2, #32
 8009fa2:	d818      	bhi.n	8009fd6 <__hexnan+0x7e>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	459b      	cmp	fp, r3
 8009fa8:	dd13      	ble.n	8009fd2 <__hexnan+0x7a>
 8009faa:	454c      	cmp	r4, r9
 8009fac:	d206      	bcs.n	8009fbc <__hexnan+0x64>
 8009fae:	2d07      	cmp	r5, #7
 8009fb0:	dc04      	bgt.n	8009fbc <__hexnan+0x64>
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7ff ffa8 	bl	8009f0c <L_shift>
 8009fbc:	4544      	cmp	r4, r8
 8009fbe:	d952      	bls.n	800a066 <__hexnan+0x10e>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8009fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fca:	f8cd b008 	str.w	fp, [sp, #8]
 8009fce:	464c      	mov	r4, r9
 8009fd0:	461d      	mov	r5, r3
 8009fd2:	9903      	ldr	r1, [sp, #12]
 8009fd4:	e7d7      	b.n	8009f86 <__hexnan+0x2e>
 8009fd6:	2a29      	cmp	r2, #41	@ 0x29
 8009fd8:	d157      	bne.n	800a08a <__hexnan+0x132>
 8009fda:	3102      	adds	r1, #2
 8009fdc:	f8ca 1000 	str.w	r1, [sl]
 8009fe0:	f1bb 0f00 	cmp.w	fp, #0
 8009fe4:	d051      	beq.n	800a08a <__hexnan+0x132>
 8009fe6:	454c      	cmp	r4, r9
 8009fe8:	d206      	bcs.n	8009ff8 <__hexnan+0xa0>
 8009fea:	2d07      	cmp	r5, #7
 8009fec:	dc04      	bgt.n	8009ff8 <__hexnan+0xa0>
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff ff8a 	bl	8009f0c <L_shift>
 8009ff8:	4544      	cmp	r4, r8
 8009ffa:	d936      	bls.n	800a06a <__hexnan+0x112>
 8009ffc:	f1a8 0204 	sub.w	r2, r8, #4
 800a000:	4623      	mov	r3, r4
 800a002:	f853 1b04 	ldr.w	r1, [r3], #4
 800a006:	f842 1f04 	str.w	r1, [r2, #4]!
 800a00a:	429f      	cmp	r7, r3
 800a00c:	d2f9      	bcs.n	800a002 <__hexnan+0xaa>
 800a00e:	1b3b      	subs	r3, r7, r4
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	3304      	adds	r3, #4
 800a016:	3401      	adds	r4, #1
 800a018:	3e03      	subs	r6, #3
 800a01a:	42b4      	cmp	r4, r6
 800a01c:	bf88      	it	hi
 800a01e:	2304      	movhi	r3, #4
 800a020:	4443      	add	r3, r8
 800a022:	2200      	movs	r2, #0
 800a024:	f843 2b04 	str.w	r2, [r3], #4
 800a028:	429f      	cmp	r7, r3
 800a02a:	d2fb      	bcs.n	800a024 <__hexnan+0xcc>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	b91b      	cbnz	r3, 800a038 <__hexnan+0xe0>
 800a030:	4547      	cmp	r7, r8
 800a032:	d128      	bne.n	800a086 <__hexnan+0x12e>
 800a034:	2301      	movs	r3, #1
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	2005      	movs	r0, #5
 800a03a:	b007      	add	sp, #28
 800a03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a040:	3501      	adds	r5, #1
 800a042:	2d08      	cmp	r5, #8
 800a044:	f10b 0b01 	add.w	fp, fp, #1
 800a048:	dd06      	ble.n	800a058 <__hexnan+0x100>
 800a04a:	4544      	cmp	r4, r8
 800a04c:	d9c1      	bls.n	8009fd2 <__hexnan+0x7a>
 800a04e:	2300      	movs	r3, #0
 800a050:	f844 3c04 	str.w	r3, [r4, #-4]
 800a054:	2501      	movs	r5, #1
 800a056:	3c04      	subs	r4, #4
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	f000 000f 	and.w	r0, r0, #15
 800a05e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a062:	6020      	str	r0, [r4, #0]
 800a064:	e7b5      	b.n	8009fd2 <__hexnan+0x7a>
 800a066:	2508      	movs	r5, #8
 800a068:	e7b3      	b.n	8009fd2 <__hexnan+0x7a>
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0dd      	beq.n	800a02c <__hexnan+0xd4>
 800a070:	f1c3 0320 	rsb	r3, r3, #32
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	40da      	lsrs	r2, r3
 800a07a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a07e:	4013      	ands	r3, r2
 800a080:	f846 3c04 	str.w	r3, [r6, #-4]
 800a084:	e7d2      	b.n	800a02c <__hexnan+0xd4>
 800a086:	3f04      	subs	r7, #4
 800a088:	e7d0      	b.n	800a02c <__hexnan+0xd4>
 800a08a:	2004      	movs	r0, #4
 800a08c:	e7d5      	b.n	800a03a <__hexnan+0xe2>

0800a08e <__ascii_mbtowc>:
 800a08e:	b082      	sub	sp, #8
 800a090:	b901      	cbnz	r1, 800a094 <__ascii_mbtowc+0x6>
 800a092:	a901      	add	r1, sp, #4
 800a094:	b142      	cbz	r2, 800a0a8 <__ascii_mbtowc+0x1a>
 800a096:	b14b      	cbz	r3, 800a0ac <__ascii_mbtowc+0x1e>
 800a098:	7813      	ldrb	r3, [r2, #0]
 800a09a:	600b      	str	r3, [r1, #0]
 800a09c:	7812      	ldrb	r2, [r2, #0]
 800a09e:	1e10      	subs	r0, r2, #0
 800a0a0:	bf18      	it	ne
 800a0a2:	2001      	movne	r0, #1
 800a0a4:	b002      	add	sp, #8
 800a0a6:	4770      	bx	lr
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	e7fb      	b.n	800a0a4 <__ascii_mbtowc+0x16>
 800a0ac:	f06f 0001 	mvn.w	r0, #1
 800a0b0:	e7f8      	b.n	800a0a4 <__ascii_mbtowc+0x16>

0800a0b2 <_realloc_r>:
 800a0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	b921      	cbnz	r1, 800a0c8 <_realloc_r+0x16>
 800a0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	f7fd be60 	b.w	8007d88 <_malloc_r>
 800a0c8:	b92a      	cbnz	r2, 800a0d6 <_realloc_r+0x24>
 800a0ca:	f7fd fde9 	bl	8007ca0 <_free_r>
 800a0ce:	2400      	movs	r4, #0
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d6:	f000 f840 	bl	800a15a <_malloc_usable_size_r>
 800a0da:	4285      	cmp	r5, r0
 800a0dc:	4606      	mov	r6, r0
 800a0de:	d802      	bhi.n	800a0e6 <_realloc_r+0x34>
 800a0e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0e4:	d8f4      	bhi.n	800a0d0 <_realloc_r+0x1e>
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7fd fe4d 	bl	8007d88 <_malloc_r>
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d0ec      	beq.n	800a0ce <_realloc_r+0x1c>
 800a0f4:	42b5      	cmp	r5, r6
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	bf28      	it	cs
 800a0fc:	4632      	movcs	r2, r6
 800a0fe:	f7ff fc45 	bl	800998c <memcpy>
 800a102:	4621      	mov	r1, r4
 800a104:	4640      	mov	r0, r8
 800a106:	f7fd fdcb 	bl	8007ca0 <_free_r>
 800a10a:	463c      	mov	r4, r7
 800a10c:	e7e0      	b.n	800a0d0 <_realloc_r+0x1e>

0800a10e <__ascii_wctomb>:
 800a10e:	4603      	mov	r3, r0
 800a110:	4608      	mov	r0, r1
 800a112:	b141      	cbz	r1, 800a126 <__ascii_wctomb+0x18>
 800a114:	2aff      	cmp	r2, #255	@ 0xff
 800a116:	d904      	bls.n	800a122 <__ascii_wctomb+0x14>
 800a118:	228a      	movs	r2, #138	@ 0x8a
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	4770      	bx	lr
 800a122:	700a      	strb	r2, [r1, #0]
 800a124:	2001      	movs	r0, #1
 800a126:	4770      	bx	lr

0800a128 <fiprintf>:
 800a128:	b40e      	push	{r1, r2, r3}
 800a12a:	b503      	push	{r0, r1, lr}
 800a12c:	4601      	mov	r1, r0
 800a12e:	ab03      	add	r3, sp, #12
 800a130:	4805      	ldr	r0, [pc, #20]	@ (800a148 <fiprintf+0x20>)
 800a132:	f853 2b04 	ldr.w	r2, [r3], #4
 800a136:	6800      	ldr	r0, [r0, #0]
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	f000 f83f 	bl	800a1bc <_vfiprintf_r>
 800a13e:	b002      	add	sp, #8
 800a140:	f85d eb04 	ldr.w	lr, [sp], #4
 800a144:	b003      	add	sp, #12
 800a146:	4770      	bx	lr
 800a148:	2000016c 	.word	0x2000016c

0800a14c <abort>:
 800a14c:	b508      	push	{r3, lr}
 800a14e:	2006      	movs	r0, #6
 800a150:	f000 fa08 	bl	800a564 <raise>
 800a154:	2001      	movs	r0, #1
 800a156:	f7f8 fd9f 	bl	8002c98 <_exit>

0800a15a <_malloc_usable_size_r>:
 800a15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15e:	1f18      	subs	r0, r3, #4
 800a160:	2b00      	cmp	r3, #0
 800a162:	bfbc      	itt	lt
 800a164:	580b      	ldrlt	r3, [r1, r0]
 800a166:	18c0      	addlt	r0, r0, r3
 800a168:	4770      	bx	lr

0800a16a <__sfputc_r>:
 800a16a:	6893      	ldr	r3, [r2, #8]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	b410      	push	{r4}
 800a172:	6093      	str	r3, [r2, #8]
 800a174:	da08      	bge.n	800a188 <__sfputc_r+0x1e>
 800a176:	6994      	ldr	r4, [r2, #24]
 800a178:	42a3      	cmp	r3, r4
 800a17a:	db01      	blt.n	800a180 <__sfputc_r+0x16>
 800a17c:	290a      	cmp	r1, #10
 800a17e:	d103      	bne.n	800a188 <__sfputc_r+0x1e>
 800a180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a184:	f000 b932 	b.w	800a3ec <__swbuf_r>
 800a188:	6813      	ldr	r3, [r2, #0]
 800a18a:	1c58      	adds	r0, r3, #1
 800a18c:	6010      	str	r0, [r2, #0]
 800a18e:	7019      	strb	r1, [r3, #0]
 800a190:	4608      	mov	r0, r1
 800a192:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <__sfputs_r>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	4614      	mov	r4, r2
 800a1a0:	18d5      	adds	r5, r2, r3
 800a1a2:	42ac      	cmp	r4, r5
 800a1a4:	d101      	bne.n	800a1aa <__sfputs_r+0x12>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e007      	b.n	800a1ba <__sfputs_r+0x22>
 800a1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ae:	463a      	mov	r2, r7
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7ff ffda 	bl	800a16a <__sfputc_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d1f3      	bne.n	800a1a2 <__sfputs_r+0xa>
 800a1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1bc <_vfiprintf_r>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	b09d      	sub	sp, #116	@ 0x74
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	4698      	mov	r8, r3
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	b118      	cbz	r0, 800a1d4 <_vfiprintf_r+0x18>
 800a1cc:	6a03      	ldr	r3, [r0, #32]
 800a1ce:	b90b      	cbnz	r3, 800a1d4 <_vfiprintf_r+0x18>
 800a1d0:	f7fc fdf8 	bl	8006dc4 <__sinit>
 800a1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1d6:	07d9      	lsls	r1, r3, #31
 800a1d8:	d405      	bmi.n	800a1e6 <_vfiprintf_r+0x2a>
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	059a      	lsls	r2, r3, #22
 800a1de:	d402      	bmi.n	800a1e6 <_vfiprintf_r+0x2a>
 800a1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e2:	f7fc ff06 	bl	8006ff2 <__retarget_lock_acquire_recursive>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	071b      	lsls	r3, r3, #28
 800a1ea:	d501      	bpl.n	800a1f0 <_vfiprintf_r+0x34>
 800a1ec:	692b      	ldr	r3, [r5, #16]
 800a1ee:	b99b      	cbnz	r3, 800a218 <_vfiprintf_r+0x5c>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f000 f938 	bl	800a468 <__swsetup_r>
 800a1f8:	b170      	cbz	r0, 800a218 <_vfiprintf_r+0x5c>
 800a1fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1fc:	07dc      	lsls	r4, r3, #31
 800a1fe:	d504      	bpl.n	800a20a <_vfiprintf_r+0x4e>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295
 800a204:	b01d      	add	sp, #116	@ 0x74
 800a206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	0598      	lsls	r0, r3, #22
 800a20e:	d4f7      	bmi.n	800a200 <_vfiprintf_r+0x44>
 800a210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a212:	f7fc feef 	bl	8006ff4 <__retarget_lock_release_recursive>
 800a216:	e7f3      	b.n	800a200 <_vfiprintf_r+0x44>
 800a218:	2300      	movs	r3, #0
 800a21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21c:	2320      	movs	r3, #32
 800a21e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a222:	f8cd 800c 	str.w	r8, [sp, #12]
 800a226:	2330      	movs	r3, #48	@ 0x30
 800a228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3d8 <_vfiprintf_r+0x21c>
 800a22c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a230:	f04f 0901 	mov.w	r9, #1
 800a234:	4623      	mov	r3, r4
 800a236:	469a      	mov	sl, r3
 800a238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23c:	b10a      	cbz	r2, 800a242 <_vfiprintf_r+0x86>
 800a23e:	2a25      	cmp	r2, #37	@ 0x25
 800a240:	d1f9      	bne.n	800a236 <_vfiprintf_r+0x7a>
 800a242:	ebba 0b04 	subs.w	fp, sl, r4
 800a246:	d00b      	beq.n	800a260 <_vfiprintf_r+0xa4>
 800a248:	465b      	mov	r3, fp
 800a24a:	4622      	mov	r2, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ffa2 	bl	800a198 <__sfputs_r>
 800a254:	3001      	adds	r0, #1
 800a256:	f000 80a7 	beq.w	800a3a8 <_vfiprintf_r+0x1ec>
 800a25a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a25c:	445a      	add	r2, fp
 800a25e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a260:	f89a 3000 	ldrb.w	r3, [sl]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 809f 	beq.w	800a3a8 <_vfiprintf_r+0x1ec>
 800a26a:	2300      	movs	r3, #0
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295
 800a270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a274:	f10a 0a01 	add.w	sl, sl, #1
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a280:	931a      	str	r3, [sp, #104]	@ 0x68
 800a282:	4654      	mov	r4, sl
 800a284:	2205      	movs	r2, #5
 800a286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28a:	4853      	ldr	r0, [pc, #332]	@ (800a3d8 <_vfiprintf_r+0x21c>)
 800a28c:	f7f5 ffd0 	bl	8000230 <memchr>
 800a290:	9a04      	ldr	r2, [sp, #16]
 800a292:	b9d8      	cbnz	r0, 800a2cc <_vfiprintf_r+0x110>
 800a294:	06d1      	lsls	r1, r2, #27
 800a296:	bf44      	itt	mi
 800a298:	2320      	movmi	r3, #32
 800a29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a29e:	0713      	lsls	r3, r2, #28
 800a2a0:	bf44      	itt	mi
 800a2a2:	232b      	movmi	r3, #43	@ 0x2b
 800a2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ae:	d015      	beq.n	800a2dc <_vfiprintf_r+0x120>
 800a2b0:	9a07      	ldr	r2, [sp, #28]
 800a2b2:	4654      	mov	r4, sl
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f04f 0c0a 	mov.w	ip, #10
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c0:	3b30      	subs	r3, #48	@ 0x30
 800a2c2:	2b09      	cmp	r3, #9
 800a2c4:	d94b      	bls.n	800a35e <_vfiprintf_r+0x1a2>
 800a2c6:	b1b0      	cbz	r0, 800a2f6 <_vfiprintf_r+0x13a>
 800a2c8:	9207      	str	r2, [sp, #28]
 800a2ca:	e014      	b.n	800a2f6 <_vfiprintf_r+0x13a>
 800a2cc:	eba0 0308 	sub.w	r3, r0, r8
 800a2d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	46a2      	mov	sl, r4
 800a2da:	e7d2      	b.n	800a282 <_vfiprintf_r+0xc6>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	1d19      	adds	r1, r3, #4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	9103      	str	r1, [sp, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	bfbb      	ittet	lt
 800a2e8:	425b      	neglt	r3, r3
 800a2ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ee:	9307      	strge	r3, [sp, #28]
 800a2f0:	9307      	strlt	r3, [sp, #28]
 800a2f2:	bfb8      	it	lt
 800a2f4:	9204      	strlt	r2, [sp, #16]
 800a2f6:	7823      	ldrb	r3, [r4, #0]
 800a2f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2fa:	d10a      	bne.n	800a312 <_vfiprintf_r+0x156>
 800a2fc:	7863      	ldrb	r3, [r4, #1]
 800a2fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a300:	d132      	bne.n	800a368 <_vfiprintf_r+0x1ac>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	9203      	str	r2, [sp, #12]
 800a30a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a30e:	3402      	adds	r4, #2
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3e8 <_vfiprintf_r+0x22c>
 800a316:	7821      	ldrb	r1, [r4, #0]
 800a318:	2203      	movs	r2, #3
 800a31a:	4650      	mov	r0, sl
 800a31c:	f7f5 ff88 	bl	8000230 <memchr>
 800a320:	b138      	cbz	r0, 800a332 <_vfiprintf_r+0x176>
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	eba0 000a 	sub.w	r0, r0, sl
 800a328:	2240      	movs	r2, #64	@ 0x40
 800a32a:	4082      	lsls	r2, r0
 800a32c:	4313      	orrs	r3, r2
 800a32e:	3401      	adds	r4, #1
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a336:	4829      	ldr	r0, [pc, #164]	@ (800a3dc <_vfiprintf_r+0x220>)
 800a338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a33c:	2206      	movs	r2, #6
 800a33e:	f7f5 ff77 	bl	8000230 <memchr>
 800a342:	2800      	cmp	r0, #0
 800a344:	d03f      	beq.n	800a3c6 <_vfiprintf_r+0x20a>
 800a346:	4b26      	ldr	r3, [pc, #152]	@ (800a3e0 <_vfiprintf_r+0x224>)
 800a348:	bb1b      	cbnz	r3, 800a392 <_vfiprintf_r+0x1d6>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	3308      	adds	r3, #8
 800a354:	9303      	str	r3, [sp, #12]
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	443b      	add	r3, r7
 800a35a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a35c:	e76a      	b.n	800a234 <_vfiprintf_r+0x78>
 800a35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a362:	460c      	mov	r4, r1
 800a364:	2001      	movs	r0, #1
 800a366:	e7a8      	b.n	800a2ba <_vfiprintf_r+0xfe>
 800a368:	2300      	movs	r3, #0
 800a36a:	3401      	adds	r4, #1
 800a36c:	9305      	str	r3, [sp, #20]
 800a36e:	4619      	mov	r1, r3
 800a370:	f04f 0c0a 	mov.w	ip, #10
 800a374:	4620      	mov	r0, r4
 800a376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a37a:	3a30      	subs	r2, #48	@ 0x30
 800a37c:	2a09      	cmp	r2, #9
 800a37e:	d903      	bls.n	800a388 <_vfiprintf_r+0x1cc>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0c6      	beq.n	800a312 <_vfiprintf_r+0x156>
 800a384:	9105      	str	r1, [sp, #20]
 800a386:	e7c4      	b.n	800a312 <_vfiprintf_r+0x156>
 800a388:	fb0c 2101 	mla	r1, ip, r1, r2
 800a38c:	4604      	mov	r4, r0
 800a38e:	2301      	movs	r3, #1
 800a390:	e7f0      	b.n	800a374 <_vfiprintf_r+0x1b8>
 800a392:	ab03      	add	r3, sp, #12
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	462a      	mov	r2, r5
 800a398:	4b12      	ldr	r3, [pc, #72]	@ (800a3e4 <_vfiprintf_r+0x228>)
 800a39a:	a904      	add	r1, sp, #16
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7fb feb9 	bl	8006114 <_printf_float>
 800a3a2:	4607      	mov	r7, r0
 800a3a4:	1c78      	adds	r0, r7, #1
 800a3a6:	d1d6      	bne.n	800a356 <_vfiprintf_r+0x19a>
 800a3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3aa:	07d9      	lsls	r1, r3, #31
 800a3ac:	d405      	bmi.n	800a3ba <_vfiprintf_r+0x1fe>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	059a      	lsls	r2, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_vfiprintf_r+0x1fe>
 800a3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3b6:	f7fc fe1d 	bl	8006ff4 <__retarget_lock_release_recursive>
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	065b      	lsls	r3, r3, #25
 800a3be:	f53f af1f 	bmi.w	800a200 <_vfiprintf_r+0x44>
 800a3c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c4:	e71e      	b.n	800a204 <_vfiprintf_r+0x48>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <_vfiprintf_r+0x228>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f7fc f937 	bl	8006644 <_printf_i>
 800a3d6:	e7e4      	b.n	800a3a2 <_vfiprintf_r+0x1e6>
 800a3d8:	0800ab41 	.word	0x0800ab41
 800a3dc:	0800ab4b 	.word	0x0800ab4b
 800a3e0:	08006115 	.word	0x08006115
 800a3e4:	0800a199 	.word	0x0800a199
 800a3e8:	0800ab47 	.word	0x0800ab47

0800a3ec <__swbuf_r>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	460e      	mov	r6, r1
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	b118      	cbz	r0, 800a3fe <__swbuf_r+0x12>
 800a3f6:	6a03      	ldr	r3, [r0, #32]
 800a3f8:	b90b      	cbnz	r3, 800a3fe <__swbuf_r+0x12>
 800a3fa:	f7fc fce3 	bl	8006dc4 <__sinit>
 800a3fe:	69a3      	ldr	r3, [r4, #24]
 800a400:	60a3      	str	r3, [r4, #8]
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	071a      	lsls	r2, r3, #28
 800a406:	d501      	bpl.n	800a40c <__swbuf_r+0x20>
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	b943      	cbnz	r3, 800a41e <__swbuf_r+0x32>
 800a40c:	4621      	mov	r1, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f82a 	bl	800a468 <__swsetup_r>
 800a414:	b118      	cbz	r0, 800a41e <__swbuf_r+0x32>
 800a416:	f04f 37ff 	mov.w	r7, #4294967295
 800a41a:	4638      	mov	r0, r7
 800a41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	6922      	ldr	r2, [r4, #16]
 800a422:	1a98      	subs	r0, r3, r2
 800a424:	6963      	ldr	r3, [r4, #20]
 800a426:	b2f6      	uxtb	r6, r6
 800a428:	4283      	cmp	r3, r0
 800a42a:	4637      	mov	r7, r6
 800a42c:	dc05      	bgt.n	800a43a <__swbuf_r+0x4e>
 800a42e:	4621      	mov	r1, r4
 800a430:	4628      	mov	r0, r5
 800a432:	f7ff fa47 	bl	80098c4 <_fflush_r>
 800a436:	2800      	cmp	r0, #0
 800a438:	d1ed      	bne.n	800a416 <__swbuf_r+0x2a>
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	60a3      	str	r3, [r4, #8]
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	701e      	strb	r6, [r3, #0]
 800a448:	6962      	ldr	r2, [r4, #20]
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d004      	beq.n	800a45a <__swbuf_r+0x6e>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d5e1      	bpl.n	800a41a <__swbuf_r+0x2e>
 800a456:	2e0a      	cmp	r6, #10
 800a458:	d1df      	bne.n	800a41a <__swbuf_r+0x2e>
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f7ff fa31 	bl	80098c4 <_fflush_r>
 800a462:	2800      	cmp	r0, #0
 800a464:	d0d9      	beq.n	800a41a <__swbuf_r+0x2e>
 800a466:	e7d6      	b.n	800a416 <__swbuf_r+0x2a>

0800a468 <__swsetup_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4b29      	ldr	r3, [pc, #164]	@ (800a510 <__swsetup_r+0xa8>)
 800a46c:	4605      	mov	r5, r0
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	460c      	mov	r4, r1
 800a472:	b118      	cbz	r0, 800a47c <__swsetup_r+0x14>
 800a474:	6a03      	ldr	r3, [r0, #32]
 800a476:	b90b      	cbnz	r3, 800a47c <__swsetup_r+0x14>
 800a478:	f7fc fca4 	bl	8006dc4 <__sinit>
 800a47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a480:	0719      	lsls	r1, r3, #28
 800a482:	d422      	bmi.n	800a4ca <__swsetup_r+0x62>
 800a484:	06da      	lsls	r2, r3, #27
 800a486:	d407      	bmi.n	800a498 <__swsetup_r+0x30>
 800a488:	2209      	movs	r2, #9
 800a48a:	602a      	str	r2, [r5, #0]
 800a48c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	f04f 30ff 	mov.w	r0, #4294967295
 800a496:	e033      	b.n	800a500 <__swsetup_r+0x98>
 800a498:	0758      	lsls	r0, r3, #29
 800a49a:	d512      	bpl.n	800a4c2 <__swsetup_r+0x5a>
 800a49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a49e:	b141      	cbz	r1, 800a4b2 <__swsetup_r+0x4a>
 800a4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	d002      	beq.n	800a4ae <__swsetup_r+0x46>
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7fd fbf9 	bl	8007ca0 <_free_r>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6063      	str	r3, [r4, #4]
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f043 0308 	orr.w	r3, r3, #8
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b94b      	cbnz	r3, 800a4e2 <__swsetup_r+0x7a>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d8:	d003      	beq.n	800a4e2 <__swsetup_r+0x7a>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f000 f883 	bl	800a5e8 <__smakebuf_r>
 800a4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e6:	f013 0201 	ands.w	r2, r3, #1
 800a4ea:	d00a      	beq.n	800a502 <__swsetup_r+0x9a>
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	60a2      	str	r2, [r4, #8]
 800a4f0:	6962      	ldr	r2, [r4, #20]
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	61a2      	str	r2, [r4, #24]
 800a4f6:	6922      	ldr	r2, [r4, #16]
 800a4f8:	b942      	cbnz	r2, 800a50c <__swsetup_r+0xa4>
 800a4fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4fe:	d1c5      	bne.n	800a48c <__swsetup_r+0x24>
 800a500:	bd38      	pop	{r3, r4, r5, pc}
 800a502:	0799      	lsls	r1, r3, #30
 800a504:	bf58      	it	pl
 800a506:	6962      	ldrpl	r2, [r4, #20]
 800a508:	60a2      	str	r2, [r4, #8]
 800a50a:	e7f4      	b.n	800a4f6 <__swsetup_r+0x8e>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f7      	b.n	800a500 <__swsetup_r+0x98>
 800a510:	2000016c 	.word	0x2000016c

0800a514 <_raise_r>:
 800a514:	291f      	cmp	r1, #31
 800a516:	b538      	push	{r3, r4, r5, lr}
 800a518:	4605      	mov	r5, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	d904      	bls.n	800a528 <_raise_r+0x14>
 800a51e:	2316      	movs	r3, #22
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a52a:	b112      	cbz	r2, 800a532 <_raise_r+0x1e>
 800a52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a530:	b94b      	cbnz	r3, 800a546 <_raise_r+0x32>
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f830 	bl	800a598 <_getpid_r>
 800a538:	4622      	mov	r2, r4
 800a53a:	4601      	mov	r1, r0
 800a53c:	4628      	mov	r0, r5
 800a53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a542:	f000 b817 	b.w	800a574 <_kill_r>
 800a546:	2b01      	cmp	r3, #1
 800a548:	d00a      	beq.n	800a560 <_raise_r+0x4c>
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	d103      	bne.n	800a556 <_raise_r+0x42>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	2001      	movs	r0, #1
 800a554:	e7e7      	b.n	800a526 <_raise_r+0x12>
 800a556:	2100      	movs	r1, #0
 800a558:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a55c:	4620      	mov	r0, r4
 800a55e:	4798      	blx	r3
 800a560:	2000      	movs	r0, #0
 800a562:	e7e0      	b.n	800a526 <_raise_r+0x12>

0800a564 <raise>:
 800a564:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <raise+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f7ff bfd3 	b.w	800a514 <_raise_r>
 800a56e:	bf00      	nop
 800a570:	2000016c 	.word	0x2000016c

0800a574 <_kill_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	@ (800a594 <_kill_r+0x20>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f8 fb79 	bl	8002c78 <_kill>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_kill_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_kill_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	20000628 	.word	0x20000628

0800a598 <_getpid_r>:
 800a598:	f7f8 bb66 	b.w	8002c68 <_getpid>

0800a59c <__swhatbuf_r>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	460c      	mov	r4, r1
 800a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	b096      	sub	sp, #88	@ 0x58
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	461e      	mov	r6, r3
 800a5ac:	da0d      	bge.n	800a5ca <__swhatbuf_r+0x2e>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5b4:	f04f 0100 	mov.w	r1, #0
 800a5b8:	bf14      	ite	ne
 800a5ba:	2340      	movne	r3, #64	@ 0x40
 800a5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	6031      	str	r1, [r6, #0]
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	b016      	add	sp, #88	@ 0x58
 800a5c8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ca:	466a      	mov	r2, sp
 800a5cc:	f000 f848 	bl	800a660 <_fstat_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	dbec      	blt.n	800a5ae <__swhatbuf_r+0x12>
 800a5d4:	9901      	ldr	r1, [sp, #4]
 800a5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5de:	4259      	negs	r1, r3
 800a5e0:	4159      	adcs	r1, r3
 800a5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e6:	e7eb      	b.n	800a5c0 <__swhatbuf_r+0x24>

0800a5e8 <__smakebuf_r>:
 800a5e8:	898b      	ldrh	r3, [r1, #12]
 800a5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ec:	079d      	lsls	r5, r3, #30
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	d507      	bpl.n	800a604 <__smakebuf_r+0x1c>
 800a5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	6163      	str	r3, [r4, #20]
 800a600:	b003      	add	sp, #12
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a604:	ab01      	add	r3, sp, #4
 800a606:	466a      	mov	r2, sp
 800a608:	f7ff ffc8 	bl	800a59c <__swhatbuf_r>
 800a60c:	9f00      	ldr	r7, [sp, #0]
 800a60e:	4605      	mov	r5, r0
 800a610:	4639      	mov	r1, r7
 800a612:	4630      	mov	r0, r6
 800a614:	f7fd fbb8 	bl	8007d88 <_malloc_r>
 800a618:	b948      	cbnz	r0, 800a62e <__smakebuf_r+0x46>
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	059a      	lsls	r2, r3, #22
 800a620:	d4ee      	bmi.n	800a600 <__smakebuf_r+0x18>
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	e7e2      	b.n	800a5f4 <__smakebuf_r+0xc>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	6020      	str	r0, [r4, #0]
 800a632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	9b01      	ldr	r3, [sp, #4]
 800a63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a63e:	b15b      	cbz	r3, 800a658 <__smakebuf_r+0x70>
 800a640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a644:	4630      	mov	r0, r6
 800a646:	f000 f81d 	bl	800a684 <_isatty_r>
 800a64a:	b128      	cbz	r0, 800a658 <__smakebuf_r+0x70>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f023 0303 	bic.w	r3, r3, #3
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	431d      	orrs	r5, r3
 800a65c:	81a5      	strh	r5, [r4, #12]
 800a65e:	e7cf      	b.n	800a600 <__smakebuf_r+0x18>

0800a660 <_fstat_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	@ (800a680 <_fstat_r+0x20>)
 800a664:	2300      	movs	r3, #0
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	f7f8 fb63 	bl	8002d38 <_fstat>
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	d102      	bne.n	800a67c <_fstat_r+0x1c>
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	b103      	cbz	r3, 800a67c <_fstat_r+0x1c>
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
 800a67e:	bf00      	nop
 800a680:	20000628 	.word	0x20000628

0800a684 <_isatty_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d06      	ldr	r5, [pc, #24]	@ (800a6a0 <_isatty_r+0x1c>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f8 fb62 	bl	8002d58 <_isatty>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_isatty_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_isatty_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000628 	.word	0x20000628

0800a6a4 <_init>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr

0800a6b0 <_fini>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr
