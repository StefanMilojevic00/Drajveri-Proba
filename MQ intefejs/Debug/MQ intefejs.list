
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a2d0  0800a2d0  0000b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a720  0800a720  0000c274  2**0
                  CONTENTS
  4 .ARM          00000008  0800a720  0800a720  0000b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a728  0800a728  0000c274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a728  0800a728  0000b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a72c  0800a72c  0000b72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  0800a730  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000274  0800a9a4  0000c274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800a9a4  0000c578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014600  00000000  00000000  0000c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ab  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00024050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  000251e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aff2  00000000  00000000  00025f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae2f  00000000  00000000  00050f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc52a  00000000  00000000  0006bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  001682cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000274 	.word	0x20000274
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2b4 	.word	0x0800a2b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000278 	.word	0x20000278
 800020c:	0800a2b4 	.word	0x0800a2b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <AirQualityIncicatorInit>:
#include "AirQualityIndicator.h"

static ledRow_t loadConfiguration;

void AirQualityIncicatorInit()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800102a:	2340      	movs	r3, #64	@ 0x40
 800102c:	9308      	str	r3, [sp, #32]
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <AirQualityIncicatorInit+0x3c>)
 8001030:	9307      	str	r3, [sp, #28]
 8001032:	2301      	movs	r3, #1
 8001034:	9306      	str	r3, [sp, #24]
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <AirQualityIncicatorInit+0x40>)
 8001038:	9305      	str	r3, [sp, #20]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	9304      	str	r3, [sp, #16]
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001040:	9303      	str	r3, [sp, #12]
 8001042:	2310      	movs	r3, #16
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <AirQualityIncicatorInit+0x48>)
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <AirQualityIncicatorInit+0x44>)
 8001050:	2240      	movs	r2, #64	@ 0x40
 8001052:	4907      	ldr	r1, [pc, #28]	@ (8001070 <AirQualityIncicatorInit+0x4c>)
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <AirQualityIncicatorInit+0x50>)
 8001056:	f000 f955 	bl	8001304 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40022000 	.word	0x40022000
 8001068:	40021800 	.word	0x40021800
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	20000290 	.word	0x20000290

08001078 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 8001082:	ed97 0a01 	vldr	s0, [r7, #4]
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <SetIndicatorLEDs+0x1c>)
 8001088:	f000 f96e 	bl	8001368 <LedRowWrite>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000290 	.word	0x20000290

08001098 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 800109c:	2204      	movs	r2, #4
 800109e:	4903      	ldr	r1, [pc, #12]	@ (80010ac <AlarmInit+0x14>)
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <AlarmInit+0x18>)
 80010a2:	f000 f8a5 	bl	80011f0 <Buzzer_init>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	200002c0 	.word	0x200002c0

080010b4 <AlarmON>:

void AlarmON()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <AlarmON+0x10>)
 80010bc:	f000 f8ab 	bl	8001216 <BuzzerWritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200002c0 	.word	0x200002c0

080010c8 <AlarmOFF>:

void AlarmOFF()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <AlarmOFF+0x10>)
 80010d0:	f000 f8a1 	bl	8001216 <BuzzerWritePin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002c0 	.word	0x200002c0

080010dc <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	739a      	strb	r2, [r3, #14]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    if (readEnable)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d052      	beq.n	80011de <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f002 fc9a 	bl	8003a7c <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7b9b      	ldrb	r3, [r3, #14]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d844      	bhi.n	80011de <ReadButton+0xb6>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <ReadButton+0x34>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800116d 	.word	0x0800116d
 8001160:	08001185 	.word	0x08001185
 8001164:	08001193 	.word	0x08001193
 8001168:	080011bb 	.word	0x080011bb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	429a      	cmp	r2, r3
 8001174:	d130      	bne.n	80011d8 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	70da      	strb	r2, [r3, #3]
                }
                break;
 8001182:	e029      	b.n	80011d8 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	70da      	strb	r2, [r3, #3]

                break;
 8001190:	e025      	b.n	80011de <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	429a      	cmp	r2, r3
 800119a:	d10a      	bne.n	80011b2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	739a      	strb	r2, [r3, #14]
                break;
 80011b8:	e011      	b.n	80011de <ReadButton+0xb6>

            case B_DETECT_IDLE:

                button_instance->btn_last_state = read_pin_status;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	711a      	strb	r2, [r3, #4]
                if (read_pin_status != button_instance->active_state)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d008      	beq.n	80011dc <ReadButton+0xb4>
                {
                    button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]
                    button_instance->button_state = B_IDLE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	739a      	strb	r2, [r3, #14]
                }
                break;
 80011d6:	e001      	b.n	80011dc <ReadButton+0xb4>
                break;
 80011d8:	bf00      	nop
 80011da:	e000      	b.n	80011de <ReadButton+0xb6>
                break;
 80011dc:	bf00      	nop

        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	78db      	ldrb	r3, [r3, #3]
 80011e2:	73bb      	strb	r3, [r7, #14]
    return retval;
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4613      	mov	r3, r2
 80011fc:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	809a      	strh	r2, [r3, #4]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	4619      	mov	r1, r3
 800122e:	f002 fc3d 	bl	8003aac <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001240:	f000 f944 	bl	80014cc <MQ9_GetRawValue>
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f956 	bl	80014fc <MQ9_ConverRaw2Real>
 8001250:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	ee07 3a90 	vmov	s15, r3
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	809a      	strh	r2, [r3, #4]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f002 fc00 	bl	8003aac <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ac:	e007      	b.n	80012be <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	889b      	ldrh	r3, [r3, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f002 fbf7 	bl	8003aac <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 80012cc:	2208      	movs	r2, #8
 80012ce:	4903      	ldr	r1, [pc, #12]	@ (80012dc <LED_init+0x14>)
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <LED_init+0x18>)
 80012d2:	f7ff ffc7 	bl	8001264 <CreateNewSingleLED>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	200002c8 	.word	0x200002c8

080012e4 <LED_Drive>:

void LED_Drive(bool state)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <LED_Drive+0x1c>)
 80012f4:	f7ff ffc9 	bl	800128a <UpdateSingleLED>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002c8 	.word	0x200002c8

08001304 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8b3a      	ldrh	r2, [r7, #24]
 800132a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8c3a      	ldrh	r2, [r7, #32]
 8001336:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001342:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001348:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800134e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800135a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 8001374:	edd7 7a00 	vldr	s15, [r7]
 8001378:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014b4 <LedRowWrite+0x14c>
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd08      	ble.n	8001398 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f002 fb8b 	bl	8003aac <HAL_GPIO_WritePin>
 8001396:	e007      	b.n	80013a8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	f002 fb82 	bl	8003aac <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013a8:	edd7 7a00 	vldr	s15, [r7]
 80013ac:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014b8 <LedRowWrite+0x150>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd08      	ble.n	80013cc <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6898      	ldr	r0, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	899b      	ldrh	r3, [r3, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	f002 fb71 	bl	8003aac <HAL_GPIO_WritePin>
 80013ca:	e007      	b.n	80013dc <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	899b      	ldrh	r3, [r3, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	f002 fb68 	bl	8003aac <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 80013dc:	edd7 7a00 	vldr	s15, [r7]
 80013e0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014bc <LedRowWrite+0x154>
 80013e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dd08      	ble.n	8001400 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6918      	ldr	r0, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8a9b      	ldrh	r3, [r3, #20]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	f002 fb57 	bl	8003aac <HAL_GPIO_WritePin>
 80013fe:	e007      	b.n	8001410 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6918      	ldr	r0, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8a9b      	ldrh	r3, [r3, #20]
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	f002 fb4e 	bl	8003aac <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001410:	edd7 7a00 	vldr	s15, [r7]
 8001414:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80014c0 <LedRowWrite+0x158>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	dd08      	ble.n	8001434 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6998      	ldr	r0, [r3, #24]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	8b9b      	ldrh	r3, [r3, #28]
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	f002 fb3d 	bl	8003aac <HAL_GPIO_WritePin>
 8001432:	e007      	b.n	8001444 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6998      	ldr	r0, [r3, #24]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8b9b      	ldrh	r3, [r3, #28]
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	f002 fb34 	bl	8003aac <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001444:	edd7 7a00 	vldr	s15, [r7]
 8001448:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80014c4 <LedRowWrite+0x15c>
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd08      	ble.n	8001468 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a18      	ldr	r0, [r3, #32]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f002 fb23 	bl	8003aac <HAL_GPIO_WritePin>
 8001466:	e007      	b.n	8001478 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a18      	ldr	r0, [r3, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fb1a 	bl	8003aac <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 8001478:	edd7 7a00 	vldr	s15, [r7]
 800147c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80014c8 <LedRowWrite+0x160>
 8001480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	dd08      	ble.n	800149c <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001492:	2201      	movs	r2, #1
 8001494:	4619      	mov	r1, r3
 8001496:	f002 fb09 	bl	8003aac <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 800149a:	e007      	b.n	80014ac <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f002 fb00 	bl	8003aac <HAL_GPIO_WritePin>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	43c80000 	.word	0x43c80000
 80014b8:	44160000 	.word	0x44160000
 80014bc:	44960000 	.word	0x44960000
 80014c0:	44e10000 	.word	0x44e10000
 80014c4:	45160000 	.word	0x45160000
 80014c8:	453b8000 	.word	0x453b8000

080014cc <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014d4:	f001 fb74 	bl	8002bc0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014de:	f001 fc3d 	bl	8002d5c <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MQ9_GetRawValue+0x2c>)
 80014e4:	f001 fcc5 	bl	8002e72 <HAL_ADC_GetValue>
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
	return raw;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002e4 	.word	0x200002e4

080014fc <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MQ9_ConverRaw2Real+0x48>)
 8001508:	edd3 6a00 	vldr	s13, [r3]
 800150c:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <MQ9_ConverRaw2Real+0x4c>)
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	ed97 7a03 	vldr	s14, [r7, #12]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000004 	.word	0x20000004
 8001548:	20000000 	.word	0x20000000

0800154c <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 8001550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001554:	4902      	ldr	r1, [pc, #8]	@ (8001560 <SignalSystemInit+0x14>)
 8001556:	4803      	ldr	r0, [pc, #12]	@ (8001564 <SignalSystemInit+0x18>)
 8001558:	f7ff fdc0 	bl	80010dc <CreateNewButton>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40022000 	.word	0x40022000
 8001564:	200002d0 	.word	0x200002d0

08001568 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <ReadSignal+0x20>)
 8001574:	f7ff fdd8 	bl	8001128 <ReadButton>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	return Status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002d0 	.word	0x200002d0

0800158c <AppInit>:
CountingTasterFSM countState = C_IDLE;
LED_StatusFSM ledState = LED_OFF;


void AppInit()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	AlarmInit();
 8001590:	f7ff fd82 	bl	8001098 <AlarmInit>
	SignalSystemInit();
 8001594:	f7ff ffda 	bl	800154c <SignalSystemInit>
	AirQualityIncicatorInit();
 8001598:	f7ff fd44 	bl	8001024 <AirQualityIncicatorInit>
	LED_init();
 800159c:	f7ff fe94 	bl	80012c8 <LED_init>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <AppStart>:

void AppStart()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	while(1)
	{
			switch(progState)
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <AppStart+0xdc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d00c      	beq.n	80015cc <AppStart+0x28>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	dcf9      	bgt.n	80015aa <AppStart+0x6>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d05e      	beq.n	8001678 <AppStart+0xd4>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d1f5      	bne.n	80015aa <AppStart+0x6>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 80015be:	4831      	ldr	r0, [pc, #196]	@ (8001684 <AppStart+0xe0>)
 80015c0:	f000 f9ce 	bl	8001960 <UART_TransmitString>
					progState = P_IDLE;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <AppStart+0xdc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
					break;
 80015ca:	e058      	b.n	800167e <AppStart+0xda>

					break;

				case P_WORK:

					float PPM = ReadGasSensor();
 80015cc:	f7ff fe35 	bl	800123a <ReadGasSensor>
 80015d0:	ed87 0a00 	vstr	s0, [r7]
					bool LED_correct;

					if(PPM < 400)
 80015d4:	edd7 7a00 	vldr	s15, [r7]
 80015d8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001688 <AppStart+0xe4>
 80015dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d502      	bpl.n	80015ec <AppStart+0x48>
					{
						LED_correct = false;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e001      	b.n	80015f0 <AppStart+0x4c>
					}
					else
					{
						LED_correct = true;
 80015ec:	2301      	movs	r3, #1
 80015ee:	71fb      	strb	r3, [r7, #7]
					}

					if(led_cnt.led_overflow_flag == true)
 80015f0:	4b26      	ldr	r3, [pc, #152]	@ (800168c <AppStart+0xe8>)
 80015f2:	7b1b      	ldrb	r3, [r3, #12]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01c      	beq.n	8001634 <AppStart+0x90>
					{
						switch(ledState)
 80015fa:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <AppStart+0xec>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d010      	beq.n	8001624 <AppStart+0x80>
 8001602:	2b02      	cmp	r3, #2
 8001604:	dc13      	bgt.n	800162e <AppStart+0x8a>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <AppStart+0x6c>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d005      	beq.n	800161a <AppStart+0x76>
 800160e:	e00e      	b.n	800162e <AppStart+0x8a>
						{
							case LED_OFF:

								LED_Drive(LED_correct);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe66 	bl	80012e4 <LED_Drive>

								break;
 8001618:	e009      	b.n	800162e <AppStart+0x8a>

							case LED_ON_CORECT:

								LED_Drive(LED_correct);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe61 	bl	80012e4 <LED_Drive>

								break;
 8001622:	e004      	b.n	800162e <AppStart+0x8a>

							case LED_ON_INCORECT:

								LED_Drive(LED_correct);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fe5c 	bl	80012e4 <LED_Drive>

								break;
 800162c:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <AppStart+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <AppStart+0xf0>)
 8001636:	7b9b      	ldrb	r3, [r3, #14]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01e      	beq.n	800167c <AppStart+0xd8>
					{
						UART_TransmitString(PPM_MSG);
 800163e:	4816      	ldr	r0, [pc, #88]	@ (8001698 <AppStart+0xf4>)
 8001640:	f000 f98e 	bl	8001960 <UART_TransmitString>
						UART_TransmitFloat(PPM);
 8001644:	ed97 0a00 	vldr	s0, [r7]
 8001648:	f000 f9b8 	bl	80019bc <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 800164c:	ed97 0a00 	vldr	s0, [r7]
 8001650:	f7ff fd12 	bl	8001078 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 8001654:	edd7 7a00 	vldr	s15, [r7]
 8001658:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800169c <AppStart+0xf8>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd04      	ble.n	8001670 <AppStart+0xcc>
						{
							UART_TransmitString(AlertMSG);
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <AppStart+0xfc>)
 8001668:	f000 f97a 	bl	8001960 <UART_TransmitString>
							AlarmON();
 800166c:	f7ff fd22 	bl	80010b4 <AlarmON>
						}
						prog_cnt.update_param_flag = false;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <AppStart+0xf0>)
 8001672:	2200      	movs	r2, #0
 8001674:	739a      	strb	r2, [r3, #14]
					}
					break;
 8001676:	e001      	b.n	800167c <AppStart+0xd8>
					break;
 8001678:	bf00      	nop
 800167a:	e796      	b.n	80015aa <AppStart+0x6>
					break;
 800167c:	bf00      	nop
			switch(progState)
 800167e:	e794      	b.n	80015aa <AppStart+0x6>
 8001680:	2000009e 	.word	0x2000009e
 8001684:	20000008 	.word	0x20000008
 8001688:	43c80000 	.word	0x43c80000
 800168c:	2000007c 	.word	0x2000007c
 8001690:	200002e2 	.word	0x200002e2
 8001694:	2000008c 	.word	0x2000008c
 8001698:	20000028 	.word	0x20000028
 800169c:	45098000 	.word	0x45098000
 80016a0:	20000030 	.word	0x20000030

080016a4 <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a9c      	ldr	r2, [pc, #624]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	f040 8149 	bne.w	8001948 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	{
		SysTickFlag = true;
 80016b6:	4b9b      	ldr	r3, [pc, #620]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]

		//Controling room clearing mechanism
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 80016bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016be:	7bdb      	ldrb	r3, [r3, #15]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b99      	ldr	r3, [pc, #612]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016c4:	7c1b      	ldrb	r3, [r3, #16]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d30f      	bcc.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x46>
 80016ca:	4b97      	ldr	r3, [pc, #604]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016cc:	7c5b      	ldrb	r3, [r3, #17]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00a      	beq.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			AlarmOFF();
 80016d4:	f7ff fcf8 	bl	80010c8 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80016d8:	4894      	ldr	r0, [pc, #592]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016da:	f000 f941 	bl	8001960 <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80016de:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80016e4:	4b90      	ldr	r3, [pc, #576]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	745a      	strb	r2, [r3, #17]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80016ea:	4b91      	ldr	r3, [pc, #580]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d042      	beq.n	8001778 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	dc5d      	bgt.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x10e>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d024      	beq.n	8001748 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80016fe:	e058      	b.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x10e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 8001700:	4b8c      	ldr	r3, [pc, #560]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b8a      	ldr	r3, [pc, #552]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800170c:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 800170e:	4b89      	ldr	r3, [pc, #548]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b87      	ldr	r3, [pc, #540]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001716:	895b      	ldrh	r3, [r3, #10]
 8001718:	429a      	cmp	r2, r3
 800171a:	d345      	bcc.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x104>
				{

					led_cnt.led_overflow_flag = true;
 800171c:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800171e:	2201      	movs	r2, #1
 8001720:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 8001722:	4b84      	ldr	r3, [pc, #528]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001724:	7b5b      	ldrb	r3, [r3, #13]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_TIM_PeriodElapsedCallback+0x90>
					{
						ledState =  LED_ON_CORECT;
 800172c:	4b80      	ldr	r3, [pc, #512]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e002      	b.n	800173a <HAL_TIM_PeriodElapsedCallback+0x96>
					}else
					{
						ledState = LED_ON_INCORECT;
 8001734:	4b7e      	ldr	r3, [pc, #504]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 800173a:	4b7e      	ldr	r3, [pc, #504]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800173c:	2200      	movs	r2, #0
 800173e:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 8001740:	4b7c      	ldr	r3, [pc, #496]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001742:	2201      	movs	r2, #1
 8001744:	731a      	strb	r2, [r3, #12]
				}

				break;
 8001746:	e02f      	b.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x104>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001748:	4b7a      	ldr	r3, [pc, #488]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	3301      	adds	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b78      	ldr	r3, [pc, #480]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001754:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 8001756:	4b77      	ldr	r3, [pc, #476]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800175e:	88db      	ldrh	r3, [r3, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d323      	bcc.n	80017ac <HAL_TIM_PeriodElapsedCallback+0x108>
				{
					led_cnt.cnt_led_correct_on = 0;
 8001764:	4b73      	ldr	r3, [pc, #460]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001766:	2200      	movs	r2, #0
 8001768:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 800176a:	4b72      	ldr	r3, [pc, #456]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800176c:	2201      	movs	r2, #1
 800176e:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001770:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001776:	e019      	b.n	80017ac <HAL_TIM_PeriodElapsedCallback+0x108>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001778:	4b6e      	ldr	r3, [pc, #440]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	b29b      	uxth	r3, r3
 800177e:	3301      	adds	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b6c      	ldr	r3, [pc, #432]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001784:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 8001786:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001788:	885b      	ldrh	r3, [r3, #2]
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b69      	ldr	r3, [pc, #420]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800178e:	891b      	ldrh	r3, [r3, #8]
 8001790:	429a      	cmp	r2, r3
 8001792:	d30d      	bcc.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x10c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 8001794:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001796:	2200      	movs	r2, #0
 8001798:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800179c:	2201      	movs	r2, #1
 800179e:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 80017a0:	4b63      	ldr	r3, [pc, #396]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80017a6:	e003      	b.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x10c>
				break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <HAL_TIM_PeriodElapsedCallback+0x10e>
				break;
 80017b0:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 80017b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017b4:	891b      	ldrh	r3, [r3, #8]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d014      	beq.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x142>
		{
			prog_cnt.cnt_ref_rate++;
 80017bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017be:	899b      	ldrh	r3, [r3, #12]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b58      	ldr	r3, [pc, #352]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017c8:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80017ca:	4b57      	ldr	r3, [pc, #348]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017d2:	891b      	ldrh	r3, [r3, #8]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d305      	bcc.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x142>
			{
				prog_cnt.update_param_flag = true;
 80017da:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017dc:	2201      	movs	r2, #1
 80017de:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80017e0:	4b51      	ldr	r3, [pc, #324]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80017e6:	484f      	ldr	r0, [pc, #316]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017e8:	f7ff febe 	bl	8001568 <ReadSignal>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017f2:	719a      	strb	r2, [r3, #6]
		switch(countState)
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d04f      	beq.n	800189c <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f300 80a0 	bgt.w	8001942 <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_TIM_PeriodElapsedCallback+0x168>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d018      	beq.n	800183c <HAL_TIM_PeriodElapsedCallback+0x198>
 800180a:	e09a      	b.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x29e>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 800180c:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800180e:	799b      	ldrb	r3, [r3, #6]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8082 	beq.w	800191c <HAL_TIM_PeriodElapsedCallback+0x278>
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800181a:	79db      	ldrb	r3, [r3, #7]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d07c      	beq.n	800191c <HAL_TIM_PeriodElapsedCallback+0x278>
				{
					prog_cnt.cnt_button = 0;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001824:	2200      	movs	r2, #0
 8001826:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001828:	4b3f      	ldr	r3, [pc, #252]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800182a:	2201      	movs	r2, #1
 800182c:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001830:	2200      	movs	r2, #0
 8001832:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 8001834:	4b40      	ldr	r3, [pc, #256]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
				}
				break;
 800183a:	e06f      	b.n	800191c <HAL_TIM_PeriodElapsedCallback+0x278>

			case C_START:

				prog_cnt.cnt_button++;
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	b29b      	uxth	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001848:	805a      	strh	r2, [r3, #2]
				UART_TransmitFloat((float)prog_cnt.cnt_button);
 800184a:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800184c:	885b      	ldrh	r3, [r3, #2]
 800184e:	b29b      	uxth	r3, r3
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 f8ae 	bl	80019bc <UART_TransmitFloat>
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001862:	885b      	ldrh	r3, [r3, #2]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b30      	ldr	r3, [pc, #192]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d303      	bcc.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x1d2>
				{
					countState = C_END;
 800186e:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001870:	2202      	movs	r2, #2
 8001872:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001874:	e064      	b.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x29c>
					if(((prog_cnt.read_button_flag) == true))
 8001876:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001878:	799b      	ldrb	r3, [r3, #6]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05f      	beq.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x29c>
						prog_cnt.cnt_button = 0;
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001882:	2200      	movs	r2, #0
 8001884:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001892:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001894:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
				break;
 800189a:	e051      	b.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x29c>

			case C_END:
				prog_cnt.cnt_button = 0;
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800189e:	2200      	movs	r2, #0
 80018a0:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 80018a2:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d82d      	bhi.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x264>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	08001909 	.word	0x08001909
 80018b8:	080018cd 	.word	0x080018cd
 80018bc:	080018db 	.word	0x080018db
 80018c0:	080018eb 	.word	0x080018eb
 80018c4:	08001909 	.word	0x08001909
 80018c8:	080018fb 	.word	0x080018fb

						break;

					case 1:

						progState = P_WORK;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 100;
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018d4:	2264      	movs	r2, #100	@ 0x64
 80018d6:	811a      	strh	r2, [r3, #8]
						break;
 80018d8:	e016      	b.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x264>

					case 2:

						progState = P_WORK;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 300;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018e6:	811a      	strh	r2, [r3, #8]
						break;
 80018e8:	e00e      	b.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x264>

					case 3:

						progState = P_WORK;
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 500;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018f6:	811a      	strh	r2, [r3, #8]
						break;
 80018f8:	e006      	b.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x264>
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001902:	2200      	movs	r2, #0
 8001904:	811a      	strh	r2, [r3, #8]
						break;
 8001906:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800190a:	2200      	movs	r2, #0
 800190c:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001910:	2201      	movs	r2, #1
 8001912:	71da      	strb	r2, [r3, #7]
				countState = C_IDLE;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
				break;
 800191a:	e012      	b.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x29e>
				break;
 800191c:	bf00      	nop
 800191e:	e010      	b.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001920:	20000350 	.word	0x20000350
 8001924:	200002e0 	.word	0x200002e0
 8001928:	2000008c 	.word	0x2000008c
 800192c:	20000054 	.word	0x20000054
 8001930:	200002e2 	.word	0x200002e2
 8001934:	2000007c 	.word	0x2000007c
 8001938:	200002e1 	.word	0x200002e1
 800193c:	2000009e 	.word	0x2000009e
				break;
 8001940:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001944:	2200      	movs	r2, #0
 8001946:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000008c 	.word	0x2000008c
 800195c:	200002e0 	.word	0x200002e0

08001960 <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7fe fca1 	bl	80002b0 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	b29a      	uxth	r2, r3
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <UART_TransmitString+0x54>)
 800197a:	f003 fcaf 	bl	80052dc <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 800197e:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <UART_TransmitString+0x58>)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4611      	mov	r1, r2
 8001988:	8019      	strh	r1, [r3, #0]
 800198a:	3302      	adds	r3, #2
 800198c:	0c12      	lsrs	r2, r2, #16
 800198e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fc8b 	bl	80002b0 <strlen>
 800199a:	4603      	mov	r3, r0
 800199c:	b29a      	uxth	r2, r3
 800199e:	f107 010c 	add.w	r1, r7, #12
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <UART_TransmitString+0x54>)
 80019a8:	f003 fc98 	bl	80052dc <HAL_UART_Transmit>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000039c 	.word	0x2000039c
 80019b8:	0800a2d0 	.word	0x0800a2d0

080019bc <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	@ 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fdde 	bl	8000588 <__aeabi_f2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	f107 000c 	add.w	r0, r7, #12
 80019d4:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <UART_TransmitFloat+0x44>)
 80019d6:	f005 f835 	bl	8006a44 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fc66 	bl	80002b0 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f107 010c 	add.w	r1, r7, #12
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <UART_TransmitFloat+0x48>)
 80019f2:	f003 fc73 	bl	80052dc <HAL_UART_Transmit>
}
 80019f6:	bf00      	nop
 80019f8:	3740      	adds	r7, #64	@ 0x40
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800a2d4 	.word	0x0800a2d4
 8001a04:	2000039c 	.word	0x2000039c

08001a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0c:	f001 f837 	bl	8002a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f000 f816 	bl	8001a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a14:	f000 f94c 	bl	8001cb0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a18:	f000 f882 	bl	8001b20 <MX_ADC3_Init>
  MX_CRC_Init();
 8001a1c:	f000 f8d2 	bl	8001bc4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a20:	f000 f916 	bl	8001c50 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001a24:	f000 f8f0 	bl	8001c08 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 8001a28:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <main+0x34>)
 8001a2a:	f003 f98b 	bl	8004d44 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 8001a2e:	f7ff fdad 	bl	800158c <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 8001a32:	f7ff fdb7 	bl	80015a4 <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <main+0x2e>
 8001a3a:	bf00      	nop
 8001a3c:	20000350 	.word	0x20000350

08001a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b094      	sub	sp, #80	@ 0x50
 8001a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	2230      	movs	r2, #48	@ 0x30
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f005 f85b 	bl	8006b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a64:	f002 f83c 	bl	8003ae0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <SystemClock_Config+0xd8>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b18 <SystemClock_Config+0xd8>)
 8001a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <SystemClock_Config+0xd8>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a80:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <SystemClock_Config+0xdc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <SystemClock_Config+0xdc>)
 8001a86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <SystemClock_Config+0xdc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001aac:	2319      	movs	r3, #25
 8001aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001ab0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001aba:	2309      	movs	r3, #9
 8001abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f86c 	bl	8003ba0 <HAL_RCC_OscConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ace:	f000 fd4b 	bl	8002568 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ad2:	f002 f815 	bl	8003b00 <HAL_PWREx_EnableOverDrive>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001adc:	f000 fd44 	bl	8002568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2106      	movs	r1, #6
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 faf2 	bl	80040e8 <HAL_RCC_ClockConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b0a:	f000 fd2d 	bl	8002568 <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3750      	adds	r7, #80	@ 0x50
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b32:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <MX_ADC3_Init+0x9c>)
 8001b36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b62:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <MX_ADC3_Init+0xa0>)
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001b82:	f000 ffd9 	bl	8002b38 <HAL_ADC_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001b8c:	f000 fcec 	bl	8002568 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_ADC3_Init+0x98>)
 8001ba2:	f001 f973 	bl	8002e8c <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bac:	f000 fcdc 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200002e4 	.word	0x200002e4
 8001bbc:	40012200 	.word	0x40012200
 8001bc0:	0f000001 	.word	0x0f000001

08001bc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001bca:	4a0e      	ldr	r2, [pc, #56]	@ (8001c04 <MX_CRC_Init+0x40>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	@ (8001c00 <MX_CRC_Init+0x3c>)
 8001bee:	f001 fcaf 	bl	8003550 <HAL_CRC_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001bf8:	f000 fcb6 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000032c 	.word	0x2000032c
 8001c04:	40023000 	.word	0x40023000

08001c08 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <MX_TIM11_Init+0x44>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c14:	f640 026f 	movw	r2, #2159	@ 0x86f
 8001c18:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c26:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_TIM11_Init+0x40>)
 8001c36:	f003 f82d 	bl	8004c94 <HAL_TIM_Base_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001c40:	f000 fc92 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000350 	.word	0x20000350
 8001c4c:	40014800 	.word	0x40014800

08001c50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <MX_USART1_UART_Init+0x5c>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_USART1_UART_Init+0x58>)
 8001c94:	f003 fad4 	bl	8005240 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c9e:	f000 fc63 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000039c 	.word	0x2000039c
 8001cac:	40011000 	.word	0x40011000

08001cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b090      	sub	sp, #64	@ 0x40
 8001cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	4baf      	ldr	r3, [pc, #700]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4aae      	ldr	r2, [pc, #696]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4bac      	ldr	r3, [pc, #688]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cde:	4ba9      	ldr	r3, [pc, #676]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4aa8      	ldr	r2, [pc, #672]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4ba6      	ldr	r3, [pc, #664]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4ba3      	ldr	r3, [pc, #652]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4aa2      	ldr	r2, [pc, #648]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4ba0      	ldr	r3, [pc, #640]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a9c      	ldr	r2, [pc, #624]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b9a      	ldr	r3, [pc, #616]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b97      	ldr	r3, [pc, #604]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a96      	ldr	r2, [pc, #600]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b94      	ldr	r3, [pc, #592]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b91      	ldr	r3, [pc, #580]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a90      	ldr	r2, [pc, #576]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d56:	4b8b      	ldr	r3, [pc, #556]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a8a      	ldr	r2, [pc, #552]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d6e:	4b85      	ldr	r3, [pc, #532]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a84      	ldr	r2, [pc, #528]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d86:	4b7f      	ldr	r3, [pc, #508]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9e:	4b79      	ldr	r3, [pc, #484]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a78      	ldr	r2, [pc, #480]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a72      	ldr	r2, [pc, #456]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b70      	ldr	r3, [pc, #448]	@ (8001f84 <MX_GPIO_Init+0x2d4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	486d      	ldr	r0, [pc, #436]	@ (8001f88 <MX_GPIO_Init+0x2d8>)
 8001dd4:	f001 fe6a 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2120      	movs	r1, #32
 8001ddc:	486b      	ldr	r0, [pc, #428]	@ (8001f8c <MX_GPIO_Init+0x2dc>)
 8001dde:	f001 fe65 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	210d      	movs	r1, #13
 8001de6:	486a      	ldr	r0, [pc, #424]	@ (8001f90 <MX_GPIO_Init+0x2e0>)
 8001de8:	f001 fe60 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2108      	movs	r1, #8
 8001df0:	4868      	ldr	r0, [pc, #416]	@ (8001f94 <MX_GPIO_Init+0x2e4>)
 8001df2:	f001 fe5b 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dfc:	4864      	ldr	r0, [pc, #400]	@ (8001f90 <MX_GPIO_Init+0x2e0>)
 8001dfe:	f001 fe55 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001e08:	4863      	ldr	r0, [pc, #396]	@ (8001f98 <MX_GPIO_Init+0x2e8>)
 8001e0a:	f001 fe4f 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2140      	movs	r1, #64	@ 0x40
 8001e12:	4862      	ldr	r0, [pc, #392]	@ (8001f9c <MX_GPIO_Init+0x2ec>)
 8001e14:	f001 fe4a 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	21c8      	movs	r1, #200	@ 0xc8
 8001e1c:	4860      	ldr	r0, [pc, #384]	@ (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001e1e:	f001 fe45 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e22:	2310      	movs	r3, #16
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e32:	230e      	movs	r3, #14
 8001e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4859      	ldr	r0, [pc, #356]	@ (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001e3e:	f001 fc71 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e42:	2308      	movs	r3, #8
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	4853      	ldr	r0, [pc, #332]	@ (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001e56:	f001 fc65 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e6a:	2309      	movs	r3, #9
 8001e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e72:	4619      	mov	r1, r3
 8001e74:	484b      	ldr	r0, [pc, #300]	@ (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001e76:	f001 fc55 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e7a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e8c:	230b      	movs	r3, #11
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4842      	ldr	r0, [pc, #264]	@ (8001fa0 <MX_GPIO_Init+0x2f0>)
 8001e98:	f001 fc44 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001e9c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eae:	230c      	movs	r3, #12
 8001eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	483a      	ldr	r0, [pc, #232]	@ (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001eba:	f001 fc33 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ebe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec4:	2312      	movs	r3, #18
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	482b      	ldr	r0, [pc, #172]	@ (8001f88 <MX_GPIO_Init+0x2d8>)
 8001edc:	f001 fc22 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4824      	ldr	r0, [pc, #144]	@ (8001f88 <MX_GPIO_Init+0x2d8>)
 8001ef8:	f001 fc14 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f14:	4619      	mov	r1, r3
 8001f16:	481d      	ldr	r0, [pc, #116]	@ (8001f8c <MX_GPIO_Init+0x2dc>)
 8001f18:	f001 fc04 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001f1c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f36:	4619      	mov	r1, r3
 8001f38:	4818      	ldr	r0, [pc, #96]	@ (8001f9c <MX_GPIO_Init+0x2ec>)
 8001f3a:	f001 fbf3 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f50:	2301      	movs	r3, #1
 8001f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4813      	ldr	r0, [pc, #76]	@ (8001fa8 <MX_GPIO_Init+0x2f8>)
 8001f5c:	f001 fbe2 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001f60:	2360      	movs	r3, #96	@ 0x60
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f70:	230d      	movs	r3, #13
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <MX_GPIO_Init+0x2f4>)
 8001f7c:	f001 fbd2 	bl	8003724 <HAL_GPIO_Init>
 8001f80:	e014      	b.n	8001fac <MX_GPIO_Init+0x2fc>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40022800 	.word	0x40022800
 8001f98:	40021c00 	.word	0x40021c00
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001fac:	2340      	movs	r3, #64	@ 0x40
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fbc:	230a      	movs	r3, #10
 8001fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	48bc      	ldr	r0, [pc, #752]	@ (80022b8 <MX_GPIO_Init+0x608>)
 8001fc8:	f001 fbac 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001fcc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	48b4      	ldr	r0, [pc, #720]	@ (80022bc <MX_GPIO_Init+0x60c>)
 8001fea:	f001 fb9b 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fee:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002000:	230e      	movs	r3, #14
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	48ad      	ldr	r0, [pc, #692]	@ (80022c0 <MX_GPIO_Init+0x610>)
 800200c:	f001 fb8a 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	48a6      	ldr	r0, [pc, #664]	@ (80022c0 <MX_GPIO_Init+0x610>)
 8002026:	f001 fb7d 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800202a:	2340      	movs	r3, #64	@ 0x40
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800202e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203c:	4619      	mov	r1, r3
 800203e:	48a1      	ldr	r0, [pc, #644]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002040:	f001 fb70 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002044:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002048:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002056:	230c      	movs	r3, #12
 8002058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	4898      	ldr	r0, [pc, #608]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002062:	f001 fb5f 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002066:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002078:	230a      	movs	r3, #10
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002080:	4619      	mov	r1, r3
 8002082:	4891      	ldr	r0, [pc, #580]	@ (80022c8 <MX_GPIO_Init+0x618>)
 8002084:	f001 fb4e 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002088:	23f0      	movs	r3, #240	@ 0xf0
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002098:	230a      	movs	r3, #10
 800209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	488a      	ldr	r0, [pc, #552]	@ (80022cc <MX_GPIO_Init+0x61c>)
 80020a4:	f001 fb3e 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020a8:	23f7      	movs	r3, #247	@ 0xf7
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b8:	230e      	movs	r3, #14
 80020ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c0:	4619      	mov	r1, r3
 80020c2:	4883      	ldr	r0, [pc, #524]	@ (80022d0 <MX_GPIO_Init+0x620>)
 80020c4:	f001 fb2e 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020da:	2309      	movs	r3, #9
 80020dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4875      	ldr	r0, [pc, #468]	@ (80022bc <MX_GPIO_Init+0x60c>)
 80020e6:	f001 fb1d 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020fc:	230a      	movs	r3, #10
 80020fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	486d      	ldr	r0, [pc, #436]	@ (80022bc <MX_GPIO_Init+0x60c>)
 8002108:	f001 fb0c 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800210c:	2320      	movs	r3, #32
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002120:	4619      	mov	r1, r3
 8002122:	4868      	ldr	r0, [pc, #416]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002124:	f001 fafe 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002128:	2308      	movs	r3, #8
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002138:	230d      	movs	r3, #13
 800213a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002140:	4619      	mov	r1, r3
 8002142:	4860      	ldr	r0, [pc, #384]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002144:	f001 faee 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 8002148:	230d      	movs	r3, #13
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002150:	2302      	movs	r3, #2
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800215c:	4619      	mov	r1, r3
 800215e:	485b      	ldr	r0, [pc, #364]	@ (80022cc <MX_GPIO_Init+0x61c>)
 8002160:	f001 fae0 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002176:	4619      	mov	r1, r3
 8002178:	4856      	ldr	r0, [pc, #344]	@ (80022d4 <MX_GPIO_Init+0x624>)
 800217a:	f001 fad3 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800217e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002190:	230c      	movs	r3, #12
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	484f      	ldr	r0, [pc, #316]	@ (80022d8 <MX_GPIO_Init+0x628>)
 800219c:	f001 fac2 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80021a0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b2:	230e      	movs	r3, #14
 80021b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ba:	4619      	mov	r1, r3
 80021bc:	4843      	ldr	r0, [pc, #268]	@ (80022cc <MX_GPIO_Init+0x61c>)
 80021be:	f001 fab1 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80021c2:	2308      	movs	r3, #8
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	483d      	ldr	r0, [pc, #244]	@ (80022d0 <MX_GPIO_Init+0x620>)
 80021da:	f001 faa3 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021f0:	230d      	movs	r3, #13
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	4830      	ldr	r0, [pc, #192]	@ (80022bc <MX_GPIO_Init+0x60c>)
 80021fc:	f001 fa92 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002200:	2310      	movs	r3, #16
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002210:	4619      	mov	r1, r3
 8002212:	482c      	ldr	r0, [pc, #176]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002214:	f001 fa86 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002218:	2304      	movs	r3, #4
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002228:	230c      	movs	r3, #12
 800222a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002230:	4619      	mov	r1, r3
 8002232:	4824      	ldr	r0, [pc, #144]	@ (80022c4 <MX_GPIO_Init+0x614>)
 8002234:	f001 fa76 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002238:	f248 0304 	movw	r3, #32772	@ 0x8004
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	4823      	ldr	r0, [pc, #140]	@ (80022dc <MX_GPIO_Init+0x62c>)
 800224e:	f001 fa69 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002252:	2302      	movs	r3, #2
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002262:	2305      	movs	r3, #5
 8002264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800226a:	4619      	mov	r1, r3
 800226c:	4817      	ldr	r0, [pc, #92]	@ (80022cc <MX_GPIO_Init+0x61c>)
 800226e:	f001 fa59 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	4810      	ldr	r0, [pc, #64]	@ (80022cc <MX_GPIO_Init+0x61c>)
 800228c:	f001 fa4a 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <MX_GPIO_Init+0x62c>)
 80022aa:	f001 fa3b 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80022ae:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	e013      	b.n	80022e0 <MX_GPIO_Init+0x630>
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40022400 	.word	0x40022400
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40022800 	.word	0x40022800
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022ea:	230d      	movs	r3, #13
 80022ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f2:	4619      	mov	r1, r3
 80022f4:	4895      	ldr	r0, [pc, #596]	@ (800254c <MX_GPIO_Init+0x89c>)
 80022f6:	f001 fa15 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80022fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002304:	2302      	movs	r3, #2
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230c:	4619      	mov	r1, r3
 800230e:	4890      	ldr	r0, [pc, #576]	@ (8002550 <MX_GPIO_Init+0x8a0>)
 8002310:	f001 fa08 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002326:	2301      	movs	r3, #1
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	4888      	ldr	r0, [pc, #544]	@ (8002554 <MX_GPIO_Init+0x8a4>)
 8002332:	f001 f9f7 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800233c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4880      	ldr	r0, [pc, #512]	@ (8002550 <MX_GPIO_Init+0x8a0>)
 800234e:	f001 f9e9 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002362:	2308      	movs	r3, #8
 8002364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236a:	4619      	mov	r1, r3
 800236c:	487a      	ldr	r0, [pc, #488]	@ (8002558 <MX_GPIO_Init+0x8a8>)
 800236e:	f001 f9d9 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002372:	2340      	movs	r3, #64	@ 0x40
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800237a:	2302      	movs	r3, #2
 800237c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002386:	4619      	mov	r1, r3
 8002388:	4873      	ldr	r0, [pc, #460]	@ (8002558 <MX_GPIO_Init+0x8a8>)
 800238a:	f001 f9cb 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800238e:	2328      	movs	r3, #40	@ 0x28
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800239e:	230c      	movs	r3, #12
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a6:	4619      	mov	r1, r3
 80023a8:	4868      	ldr	r0, [pc, #416]	@ (800254c <MX_GPIO_Init+0x89c>)
 80023aa:	f001 f9bb 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 80023ae:	23c0      	movs	r3, #192	@ 0xc0
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023b6:	2302      	movs	r3, #2
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4865      	ldr	r0, [pc, #404]	@ (800255c <MX_GPIO_Init+0x8ac>)
 80023c6:	f001 f9ad 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80023ca:	2308      	movs	r3, #8
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023da:	230c      	movs	r3, #12
 80023dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	485c      	ldr	r0, [pc, #368]	@ (8002558 <MX_GPIO_Init+0x8a8>)
 80023e6:	f001 f99d 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023ea:	2332      	movs	r3, #50	@ 0x32
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023fa:	230b      	movs	r3, #11
 80023fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	4854      	ldr	r0, [pc, #336]	@ (8002558 <MX_GPIO_Init+0x8a8>)
 8002406:	f001 f98d 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800240a:	2304      	movs	r3, #4
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800241a:	2309      	movs	r3, #9
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	484e      	ldr	r0, [pc, #312]	@ (8002560 <MX_GPIO_Init+0x8b0>)
 8002426:	f001 f97d 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800242a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800243c:	2309      	movs	r3, #9
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002440:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002444:	4619      	mov	r1, r3
 8002446:	4847      	ldr	r0, [pc, #284]	@ (8002564 <MX_GPIO_Init+0x8b4>)
 8002448:	f001 f96c 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800244c:	2308      	movs	r3, #8
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002460:	4619      	mov	r1, r3
 8002462:	483e      	ldr	r0, [pc, #248]	@ (800255c <MX_GPIO_Init+0x8ac>)
 8002464:	f001 f95e 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002468:	2304      	movs	r3, #4
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002478:	4619      	mov	r1, r3
 800247a:	4838      	ldr	r0, [pc, #224]	@ (800255c <MX_GPIO_Init+0x8ac>)
 800247c:	f001 f952 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002480:	2386      	movs	r3, #134	@ 0x86
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002490:	230b      	movs	r3, #11
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	482e      	ldr	r0, [pc, #184]	@ (8002554 <MX_GPIO_Init+0x8a4>)
 800249c:	f001 f942 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80024a0:	2350      	movs	r3, #80	@ 0x50
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024b0:	230d      	movs	r3, #13
 80024b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b8:	4619      	mov	r1, r3
 80024ba:	4826      	ldr	r0, [pc, #152]	@ (8002554 <MX_GPIO_Init+0x8a4>)
 80024bc:	f001 f932 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c6:	2312      	movs	r3, #18
 80024c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ca:	2301      	movs	r3, #1
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024d2:	2304      	movs	r3, #4
 80024d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	481b      	ldr	r0, [pc, #108]	@ (800254c <MX_GPIO_Init+0x89c>)
 80024de:	f001 f921 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 80024e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024f4:	230a      	movs	r3, #10
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fc:	4619      	mov	r1, r3
 80024fe:	4818      	ldr	r0, [pc, #96]	@ (8002560 <MX_GPIO_Init+0x8b0>)
 8002500:	f001 f910 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8002504:	2340      	movs	r3, #64	@ 0x40
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800250c:	2302      	movs	r3, #2
 800250e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	480c      	ldr	r0, [pc, #48]	@ (800254c <MX_GPIO_Init+0x89c>)
 800251c:	f001 f902 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002520:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002532:	2305      	movs	r3, #5
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <MX_GPIO_Init+0x8b0>)
 800253e:	f001 f8f1 	bl	8003724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002542:	bf00      	nop
 8002544:	3740      	adds	r7, #64	@ 0x40
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021c00 	.word	0x40021c00
 8002550:	40022000 	.word	0x40022000
 8002554:	40020000 	.word	0x40020000
 8002558:	40020800 	.word	0x40020800
 800255c:	40021800 	.word	0x40021800
 8002560:	40020400 	.word	0x40020400
 8002564:	40020c00 	.word	0x40020c00

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <Error_Handler+0x8>

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_MspInit+0x4c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	210f      	movs	r1, #15
 80025ae:	f06f 0001 	mvn.w	r0, #1
 80025b2:	f000 ff96 	bl	80034e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <HAL_ADC_MspInit+0xa4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d13c      	bne.n	8002660 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	4a20      	ldr	r2, [pc, #128]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 80025ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f2:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 8002604:	f043 0320 	orr.w	r3, r3, #32
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a14      	ldr	r2, [pc, #80]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_ADC_MspInit+0xa8>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800262e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002632:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002634:	2303      	movs	r3, #3
 8002636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	480b      	ldr	r0, [pc, #44]	@ (8002670 <HAL_ADC_MspInit+0xac>)
 8002644:	f001 f86e 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264c:	2303      	movs	r3, #3
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <HAL_ADC_MspInit+0xb0>)
 800265c:	f001 f862 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002660:	bf00      	nop
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012200 	.word	0x40012200
 800266c:	40023800 	.word	0x40023800
 8002670:	40021400 	.word	0x40021400
 8002674:	40020000 	.word	0x40020000

08002678 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <HAL_CRC_MspInit+0x38>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10b      	bne.n	80026a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_CRC_MspInit+0x3c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_CRC_MspInit+0x3c>)
 8002690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <HAL_CRC_MspInit+0x3c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023000 	.word	0x40023000
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <HAL_TIM_Base_MspInit+0x44>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d113      	bne.n	80026f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_TIM_Base_MspInit+0x48>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <HAL_TIM_Base_MspInit+0x48>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_TIM_Base_MspInit+0x48>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	201a      	movs	r0, #26
 80026e8:	f000 fefb 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026ec:	201a      	movs	r0, #26
 80026ee:	f000 ff14 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40014800 	.word	0x40014800
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0ac      	sub	sp, #176	@ 0xb0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	2284      	movs	r2, #132	@ 0x84
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f004 f9f0 	bl	8006b0a <memset>
  if(huart->Instance==USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a32      	ldr	r2, [pc, #200]	@ (80027f8 <HAL_UART_MspInit+0xf4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d15c      	bne.n	80027ee <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002734:	2340      	movs	r3, #64	@ 0x40
 8002736:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002738:	2300      	movs	r3, #0
 800273a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	4618      	mov	r0, r3
 8002742:	f001 feb7 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800274c:	f7ff ff0c 	bl	8002568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002750:	4b2a      	ldr	r3, [pc, #168]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	4a29      	ldr	r2, [pc, #164]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	6453      	str	r3, [r2, #68]	@ 0x44
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	6313      	str	r3, [r2, #48]	@ 0x30
 8002774:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4a1d      	ldr	r2, [pc, #116]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6313      	str	r3, [r2, #48]	@ 0x30
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_UART_MspInit+0xf8>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b0:	2307      	movs	r3, #7
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ba:	4619      	mov	r1, r3
 80027bc:	4810      	ldr	r0, [pc, #64]	@ (8002800 <HAL_UART_MspInit+0xfc>)
 80027be:	f000 ffb1 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027e6:	4619      	mov	r1, r3
 80027e8:	4806      	ldr	r0, [pc, #24]	@ (8002804 <HAL_UART_MspInit+0x100>)
 80027ea:	f000 ff9b 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	37b0      	adds	r7, #176	@ 0xb0
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020400 	.word	0x40020400
 8002804:	40020000 	.word	0x40020000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <NMI_Handler+0x4>

08002810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <HardFault_Handler+0x4>

08002818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <MemManage_Handler+0x4>

08002820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <BusFault_Handler+0x4>

08002828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <UsageFault_Handler+0x4>

08002830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800285e:	f000 f94b 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800286e:	f002 fae1 	bl	8004e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000350 	.word	0x20000350

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002896:	f004 f98b 	bl	8006bb0 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
  while (1) {}    /* Make sure we hang here */
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <_exit+0x12>

080028c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00a      	b.n	80028ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d4:	f3af 8000 	nop.w
 80028d8:	4601      	mov	r1, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbf0      	blt.n	80028d4 <_read+0x12>
  }

  return len;
 80028f2:	687b      	ldr	r3, [r7, #4]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e009      	b.n	8002922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf1      	blt.n	800290e <_write+0x12>
  }
  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_close>:

int _close(int file)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800295c:	605a      	str	r2, [r3, #4]
  return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_isatty>:

int _isatty(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f004 f8f0 	bl	8006bb0 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20050000 	.word	0x20050000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000424 	.word	0x20000424
 8002a04:	20000578 	.word	0x20000578

08002a08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a30:	480d      	ldr	r0, [pc, #52]	@ (8002a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a32:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a48:	4c0b      	ldr	r4, [pc, #44]	@ (8002a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a56:	f7ff ffd7 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f004 f8af 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7fe ffd3 	bl	8001a08 <main>
  bx  lr    
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002a70:	0800a730 	.word	0x0800a730
  ldr r2, =_sbss
 8002a74:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002a78:	20000578 	.word	0x20000578

08002a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>

08002a7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f000 fd22 	bl	80034cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f000 f805 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8e:	f7ff fd71 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fd3d 	bl	8003536 <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 fd05 	bl	80034e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	@ (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200000a0 	.word	0x200000a0
 8002af0:	200000a8 	.word	0x200000a8
 8002af4:	200000a4 	.word	0x200000a4

08002af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_IncTick+0x20>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_IncTick+0x24>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	200000a8 	.word	0x200000a8
 8002b1c:	20000428 	.word	0x20000428

08002b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return uwTick;
 8002b24:	4b03      	ldr	r3, [pc, #12]	@ (8002b34 <HAL_GetTick+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000428 	.word	0x20000428

08002b38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e031      	b.n	8002bb2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fd34 	bl	80025c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <HAL_ADC_Init+0x84>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	f043 0202 	orr.w	r2, r3, #2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fad6 	bl	8003138 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ba2:	e001      	b.n	8002ba8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	ffffeefd 	.word	0xffffeefd

08002bc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Start+0x1a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0ad      	b.n	8002d36 <HAL_ADC_Start+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d018      	beq.n	8002c22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c00:	4b50      	ldr	r3, [pc, #320]	@ (8002d44 <HAL_ADC_Start+0x184>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a50      	ldr	r2, [pc, #320]	@ (8002d48 <HAL_ADC_Start+0x188>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0c9a      	lsrs	r2, r3, #18
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c14:	e002      	b.n	8002c1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f9      	bne.n	8002c16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d175      	bne.n	8002d1c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c34:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <HAL_ADC_Start+0x18c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6a:	d106      	bne.n	8002c7a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c70:	f023 0206 	bic.w	r2, r3, #6
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002c92:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <HAL_ADC_Start+0x190>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d143      	bne.n	8002d34 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e03a      	b.n	8002d34 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a24      	ldr	r2, [pc, #144]	@ (8002d54 <HAL_ADC_Start+0x194>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_ADC_Start+0x126>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ce4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <HAL_ADC_Start+0x190>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d120      	bne.n	8002d34 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <HAL_ADC_Start+0x198>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d11b      	bne.n	8002d34 <HAL_ADC_Start+0x174>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	e00b      	b.n	8002d34 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	200000a0 	.word	0x200000a0
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	fffff8fe 	.word	0xfffff8fe
 8002d50:	40012300 	.word	0x40012300
 8002d54:	40012000 	.word	0x40012000
 8002d58:	40012200 	.word	0x40012200

08002d5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d78:	d113      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d88:	d10b      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e063      	b.n	8002e6a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002da2:	f7ff febd 	bl	8002b20 <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002da8:	e021      	b.n	8002dee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d01d      	beq.n	8002dee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_ADC_PollForConversion+0x6c>
 8002db8:	f7ff feb2 	bl	8002b20 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d212      	bcs.n	8002dee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d00b      	beq.n	8002dee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f043 0204 	orr.w	r2, r3, #4
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e03d      	b.n	8002e6a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d1d6      	bne.n	8002daa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0212 	mvn.w	r2, #18
 8002e04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d123      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11f      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e136      	b.n	8003116 <HAL_ADC_ConfigChannel+0x28a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	d93a      	bls.n	8002f2e <HAL_ADC_ConfigChannel+0xa2>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ec0:	d035      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b1e      	subs	r3, #30
 8002ed8:	2207      	movs	r2, #7
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a8d      	ldr	r2, [pc, #564]	@ (8003124 <HAL_ADC_ConfigChannel+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10a      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68d9      	ldr	r1, [r3, #12]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	061a      	lsls	r2, r3, #24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f06:	e035      	b.n	8002f74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4403      	add	r3, r0
 8002f20:	3b1e      	subs	r3, #30
 8002f22:	409a      	lsls	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f2c:	e022      	b.n	8002f74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6919      	ldr	r1, [r3, #16]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	2207      	movs	r2, #7
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	400a      	ands	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	4603      	mov	r3, r0
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4403      	add	r3, r0
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b05      	subs	r3, #5
 8002f8e:	221f      	movs	r2, #31
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b05      	subs	r3, #5
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fc4:	e04c      	b.n	8003060 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d824      	bhi.n	8003018 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b23      	subs	r3, #35	@ 0x23
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b23      	subs	r3, #35	@ 0x23
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
 8003016:	e023      	b.n	8003060 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b41      	subs	r3, #65	@ 0x41
 800302a:	221f      	movs	r2, #31
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43da      	mvns	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	400a      	ands	r2, r1
 8003038:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b41      	subs	r3, #65	@ 0x41
 8003054:	fa00 f203 	lsl.w	r2, r0, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <HAL_ADC_ConfigChannel+0x29c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10a      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1f4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003072:	d105      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a2c      	ldr	r2, [pc, #176]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 800307a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800307e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a28      	ldr	r2, [pc, #160]	@ (8003128 <HAL_ADC_ConfigChannel+0x29c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10f      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x21e>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b12      	cmp	r3, #18
 8003090:	d10b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003092:	4b26      	ldr	r3, [pc, #152]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a25      	ldr	r2, [pc, #148]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 8003098:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800309c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800309e:	4b23      	ldr	r3, [pc, #140]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a22      	ldr	r2, [pc, #136]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <HAL_ADC_ConfigChannel+0x29c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d12b      	bne.n	800310c <HAL_ADC_ConfigChannel+0x280>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003124 <HAL_ADC_ConfigChannel+0x298>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x23a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b11      	cmp	r3, #17
 80030c4:	d122      	bne.n	800310c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030c6:	4b19      	ldr	r3, [pc, #100]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a18      	ldr	r2, [pc, #96]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80030d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030d2:	4b16      	ldr	r3, [pc, #88]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a15      	ldr	r2, [pc, #84]	@ (800312c <HAL_ADC_ConfigChannel+0x2a0>)
 80030d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <HAL_ADC_ConfigChannel+0x298>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d111      	bne.n	800310c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030e8:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_ADC_ConfigChannel+0x2a4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_ADC_ConfigChannel+0x2a8>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9a      	lsrs	r2, r3, #18
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030fe:	e002      	b.n	8003106 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	10000012 	.word	0x10000012
 8003128:	40012000 	.word	0x40012000
 800312c:	40012300 	.word	0x40012300
 8003130:	200000a0 	.word	0x200000a0
 8003134:	431bde83 	.word	0x431bde83

08003138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003140:	4b78      	ldr	r3, [pc, #480]	@ (8003324 <ADC_Init+0x1ec>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a77      	ldr	r2, [pc, #476]	@ (8003324 <ADC_Init+0x1ec>)
 8003146:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800314a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800314c:	4b75      	ldr	r3, [pc, #468]	@ (8003324 <ADC_Init+0x1ec>)
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4973      	ldr	r1, [pc, #460]	@ (8003324 <ADC_Init+0x1ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800318c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	4a58      	ldr	r2, [pc, #352]	@ (8003328 <ADC_Init+0x1f0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e00f      	b.n	8003232 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0202 	bic.w	r2, r2, #2
 8003240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800327e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	3b01      	subs	r3, #1
 800328c:	035a      	lsls	r2, r3, #13
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e007      	b.n	80032a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	051a      	lsls	r2, r3, #20
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032ea:	025a      	lsls	r2, r3, #9
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	029a      	lsls	r2, r3, #10
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012300 	.word	0x40012300
 8003328:	0f000001 	.word	0x0f000001

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003354:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	@ (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00
 8003370:	05fa0000 	.word	0x05fa0000

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	@ (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4907      	ldr	r1, [pc, #28]	@ (80033c8 <__NVIC_EnableIRQ+0x38>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	@ (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	@ (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f1c3 0307 	rsb	r3, r3, #7
 800343a:	2b04      	cmp	r3, #4
 800343c:	bf28      	it	cs
 800343e:	2304      	movcs	r3, #4
 8003440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3304      	adds	r3, #4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d902      	bls.n	8003450 <NVIC_EncodePriority+0x30>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b03      	subs	r3, #3
 800344e:	e000      	b.n	8003452 <NVIC_EncodePriority+0x32>
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	401a      	ands	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43d9      	mvns	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	4313      	orrs	r3, r2
         );
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	@ 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003498:	d301      	bcc.n	800349e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a0a      	ldr	r2, [pc, #40]	@ (80034c8 <SysTick_Config+0x40>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a6:	210f      	movs	r1, #15
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f7ff ff8e 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <SysTick_Config+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	4b04      	ldr	r3, [pc, #16]	@ (80034c8 <SysTick_Config+0x40>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e010 	.word	0xe000e010

080034cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff29 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff3e 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff8e 	bl	8003420 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5d 	bl	80033cc <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff31 	bl	8003390 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa2 	bl	8003488 <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e054      	b.n	800360c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7f5b      	ldrb	r3, [r3, #29]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff f880 	bl	8002678 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	791b      	ldrb	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10c      	bne.n	80035a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	@ (8003614 <HAL_CRC_Init+0xc4>)
 800358c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0218 	bic.w	r2, r2, #24
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	e00c      	b.n	80035ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6899      	ldr	r1, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	461a      	mov	r2, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f834 	bl	8003618 <HAL_CRCEx_Polynomial_Set>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e028      	b.n	800360c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	795b      	ldrb	r3, [r3, #5]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	611a      	str	r2, [r3, #16]
 80035cc:	e004      	b.n	80035d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	04c11db7 	.word	0x04c11db7

08003618 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003628:	231f      	movs	r3, #31
 800362a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800362c:	bf00      	nop
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	613a      	str	r2, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_CRCEx_Polynomial_Set+0x34>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b18      	cmp	r3, #24
 8003650:	d846      	bhi.n	80036e0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003652:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	080036e7 	.word	0x080036e7
 800365c:	080036e1 	.word	0x080036e1
 8003660:	080036e1 	.word	0x080036e1
 8003664:	080036e1 	.word	0x080036e1
 8003668:	080036e1 	.word	0x080036e1
 800366c:	080036e1 	.word	0x080036e1
 8003670:	080036e1 	.word	0x080036e1
 8003674:	080036e1 	.word	0x080036e1
 8003678:	080036d5 	.word	0x080036d5
 800367c:	080036e1 	.word	0x080036e1
 8003680:	080036e1 	.word	0x080036e1
 8003684:	080036e1 	.word	0x080036e1
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036e1 	.word	0x080036e1
 8003690:	080036e1 	.word	0x080036e1
 8003694:	080036e1 	.word	0x080036e1
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036e1 	.word	0x080036e1
 80036a0:	080036e1 	.word	0x080036e1
 80036a4:	080036e1 	.word	0x080036e1
 80036a8:	080036e1 	.word	0x080036e1
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	080036e1 	.word	0x080036e1
 80036b8:	080036bd 	.word	0x080036bd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d913      	bls.n	80036ea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036c6:	e010      	b.n	80036ea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b07      	cmp	r3, #7
 80036cc:	d90f      	bls.n	80036ee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036d2:	e00c      	b.n	80036ee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	d90b      	bls.n	80036f2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036de:	e008      	b.n	80036f2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
      break;
 80036e4:	e006      	b.n	80036f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036e6:	bf00      	nop
 80036e8:	e004      	b.n	80036f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036f2:	bf00      	nop
  }
  if (status == HAL_OK)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 0118 	bic.w	r1, r3, #24
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e175      	b.n	8003a30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	429a      	cmp	r2, r3
 800375e:	f040 8164 	bne.w	8003a2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d005      	beq.n	800377a <HAL_GPIO_Init+0x56>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d130      	bne.n	80037dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b0:	2201      	movs	r2, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 0201 	and.w	r2, r3, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d017      	beq.n	8003818 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	2203      	movs	r2, #3
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d123      	bne.n	800386c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	08da      	lsrs	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3208      	adds	r2, #8
 800382c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	220f      	movs	r2, #15
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	08da      	lsrs	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3208      	adds	r2, #8
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	2203      	movs	r2, #3
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0203 	and.w	r2, r3, #3
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80be 	beq.w	8003a2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ae:	4b66      	ldr	r3, [pc, #408]	@ (8003a48 <HAL_GPIO_Init+0x324>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	4a65      	ldr	r2, [pc, #404]	@ (8003a48 <HAL_GPIO_Init+0x324>)
 80038b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ba:	4b63      	ldr	r3, [pc, #396]	@ (8003a48 <HAL_GPIO_Init+0x324>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038c6:	4a61      	ldr	r2, [pc, #388]	@ (8003a4c <HAL_GPIO_Init+0x328>)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	3302      	adds	r3, #2
 80038ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	220f      	movs	r2, #15
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a58      	ldr	r2, [pc, #352]	@ (8003a50 <HAL_GPIO_Init+0x32c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d037      	beq.n	8003962 <HAL_GPIO_Init+0x23e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a57      	ldr	r2, [pc, #348]	@ (8003a54 <HAL_GPIO_Init+0x330>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d031      	beq.n	800395e <HAL_GPIO_Init+0x23a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a56      	ldr	r2, [pc, #344]	@ (8003a58 <HAL_GPIO_Init+0x334>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02b      	beq.n	800395a <HAL_GPIO_Init+0x236>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a55      	ldr	r2, [pc, #340]	@ (8003a5c <HAL_GPIO_Init+0x338>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d025      	beq.n	8003956 <HAL_GPIO_Init+0x232>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a54      	ldr	r2, [pc, #336]	@ (8003a60 <HAL_GPIO_Init+0x33c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01f      	beq.n	8003952 <HAL_GPIO_Init+0x22e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a53      	ldr	r2, [pc, #332]	@ (8003a64 <HAL_GPIO_Init+0x340>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d019      	beq.n	800394e <HAL_GPIO_Init+0x22a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a52      	ldr	r2, [pc, #328]	@ (8003a68 <HAL_GPIO_Init+0x344>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0x226>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <HAL_GPIO_Init+0x348>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00d      	beq.n	8003946 <HAL_GPIO_Init+0x222>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a50      	ldr	r2, [pc, #320]	@ (8003a70 <HAL_GPIO_Init+0x34c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <HAL_GPIO_Init+0x21e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4f      	ldr	r2, [pc, #316]	@ (8003a74 <HAL_GPIO_Init+0x350>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_GPIO_Init+0x21a>
 800393a:	2309      	movs	r3, #9
 800393c:	e012      	b.n	8003964 <HAL_GPIO_Init+0x240>
 800393e:	230a      	movs	r3, #10
 8003940:	e010      	b.n	8003964 <HAL_GPIO_Init+0x240>
 8003942:	2308      	movs	r3, #8
 8003944:	e00e      	b.n	8003964 <HAL_GPIO_Init+0x240>
 8003946:	2307      	movs	r3, #7
 8003948:	e00c      	b.n	8003964 <HAL_GPIO_Init+0x240>
 800394a:	2306      	movs	r3, #6
 800394c:	e00a      	b.n	8003964 <HAL_GPIO_Init+0x240>
 800394e:	2305      	movs	r3, #5
 8003950:	e008      	b.n	8003964 <HAL_GPIO_Init+0x240>
 8003952:	2304      	movs	r3, #4
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x240>
 8003956:	2303      	movs	r3, #3
 8003958:	e004      	b.n	8003964 <HAL_GPIO_Init+0x240>
 800395a:	2302      	movs	r3, #2
 800395c:	e002      	b.n	8003964 <HAL_GPIO_Init+0x240>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_GPIO_Init+0x240>
 8003962:	2300      	movs	r3, #0
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f002 0203 	and.w	r2, r2, #3
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	4093      	lsls	r3, r2
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003974:	4935      	ldr	r1, [pc, #212]	@ (8003a4c <HAL_GPIO_Init+0x328>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039a6:	4a34      	ldr	r2, [pc, #208]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039ac:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d0:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039d6:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a24:	4a14      	ldr	r2, [pc, #80]	@ (8003a78 <HAL_GPIO_Init+0x354>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	f67f ae86 	bls.w	8003744 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3724      	adds	r7, #36	@ 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40021400 	.word	0x40021400
 8003a68:	40021800 	.word	0x40021800
 8003a6c:	40021c00 	.word	0x40021c00
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40022400 	.word	0x40022400
 8003a78:	40013c00 	.word	0x40013c00

08003a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e001      	b.n	8003a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ac8:	e003      	b.n	8003ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	041a      	lsls	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	@ (8003afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40007000 	.word	0x40007000

08003b00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2e:	f7fe fff7 	bl	8002b20 <HAL_GetTick>
 8003b32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b34:	e009      	b.n	8003b4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b36:	f7fe fff3 	bl	8002b20 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b44:	d901      	bls.n	8003b4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e022      	b.n	8003b90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b4a:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b56:	d1ee      	bne.n	8003b36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b58:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b64:	f7fe ffdc 	bl	8002b20 <HAL_GetTick>
 8003b68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b6a:	e009      	b.n	8003b80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b6c:	f7fe ffd8 	bl	8002b20 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b7a:	d901      	bls.n	8003b80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e007      	b.n	8003b90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e291      	b.n	80040da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8087 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc4:	4b96      	ldr	r3, [pc, #600]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d00c      	beq.n	8003bea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd0:	4b93      	ldr	r3, [pc, #588]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d112      	bne.n	8003c02 <HAL_RCC_OscConfig+0x62>
 8003bdc:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bea:	4b8d      	ldr	r3, [pc, #564]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d06c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x130>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d168      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e26b      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x7a>
 8003c0c:	4b84      	ldr	r3, [pc, #528]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e02e      	b.n	8003c78 <HAL_RCC_OscConfig+0xd8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x9c>
 8003c22:	4b7f      	ldr	r3, [pc, #508]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7e      	ldr	r2, [pc, #504]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7b      	ldr	r2, [pc, #492]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xd8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0xc0>
 8003c46:	4b76      	ldr	r3, [pc, #472]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a75      	ldr	r2, [pc, #468]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b73      	ldr	r3, [pc, #460]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a72      	ldr	r2, [pc, #456]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xd8>
 8003c60:	4b6f      	ldr	r3, [pc, #444]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6e      	ldr	r2, [pc, #440]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a6b      	ldr	r2, [pc, #428]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe ff4e 	bl	8002b20 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe ff4a 	bl	8002b20 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e21f      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b61      	ldr	r3, [pc, #388]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xe8>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe ff3a 	bl	8002b20 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe ff36 	bl	8002b20 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e20b      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b57      	ldr	r3, [pc, #348]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x110>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d069      	beq.n	8003db2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cde:	4b50      	ldr	r3, [pc, #320]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b4d      	ldr	r3, [pc, #308]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x190>
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b47      	ldr	r3, [pc, #284]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x17a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1df      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b41      	ldr	r3, [pc, #260]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	493d      	ldr	r1, [pc, #244]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e040      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d023      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a38      	ldr	r2, [pc, #224]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe feec 	bl	8002b20 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fee8 	bl	8002b20 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1bd      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4929      	ldr	r1, [pc, #164]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
 8003d7e:	e018      	b.n	8003db2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d80:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fec8 	bl	8002b20 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fe fec4 	bl	8002b20 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e199      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d038      	beq.n	8003e30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d019      	beq.n	8003dfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fea5 	bl	8002b20 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fea1 	bl	8002b20 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e176      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x23a>
 8003df8:	e01a      	b.n	8003e30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfe:	4a08      	ldr	r2, [pc, #32]	@ (8003e20 <HAL_RCC_OscConfig+0x280>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe fe8b 	bl	8002b20 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fe87 	bl	8002b20 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d903      	bls.n	8003e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e15c      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
 8003e20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b91      	ldr	r3, [pc, #580]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ee      	bne.n	8003e0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a4 	beq.w	8003f86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4b88      	ldr	r3, [pc, #544]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a87      	ldr	r2, [pc, #540]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b85      	ldr	r3, [pc, #532]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e66:	4b82      	ldr	r3, [pc, #520]	@ (8004070 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e72:	4b7f      	ldr	r3, [pc, #508]	@ (8004070 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7e      	ldr	r2, [pc, #504]	@ (8004070 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fe4f 	bl	8002b20 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe fe4b 	bl	8002b20 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	@ 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e120      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e98:	4b75      	ldr	r3, [pc, #468]	@ (8004070 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x31a>
 8003eac:	4b6f      	ldr	r3, [pc, #444]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb8:	e02d      	b.n	8003f16 <HAL_RCC_OscConfig+0x376>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x33c>
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a69      	ldr	r2, [pc, #420]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ece:	4b67      	ldr	r3, [pc, #412]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	4a66      	ldr	r2, [pc, #408]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eda:	e01c      	b.n	8003f16 <HAL_RCC_OscConfig+0x376>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x35e>
 8003ee4:	4b61      	ldr	r3, [pc, #388]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a60      	ldr	r2, [pc, #384]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	4a5d      	ldr	r2, [pc, #372]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efc:	e00b      	b.n	8003f16 <HAL_RCC_OscConfig+0x376>
 8003efe:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	4a5a      	ldr	r2, [pc, #360]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0a:	4b58      	ldr	r3, [pc, #352]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a57      	ldr	r2, [pc, #348]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fdff 	bl	8002b20 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fe fdfb 	bl	8002b20 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0ce      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ee      	beq.n	8003f26 <HAL_RCC_OscConfig+0x386>
 8003f48:	e014      	b.n	8003f74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fde9 	bl	8002b20 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe fde5 	bl	8002b20 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	4b40      	ldr	r3, [pc, #256]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ee      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a4 	beq.w	80040d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f90:	4b36      	ldr	r3, [pc, #216]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d06b      	beq.n	8004074 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d149      	bne.n	8004038 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa4:	4b31      	ldr	r3, [pc, #196]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a30      	ldr	r2, [pc, #192]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fdb6 	bl	8002b20 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe fdb2 	bl	8002b20 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e087      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b28      	ldr	r3, [pc, #160]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004002:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a18      	ldr	r2, [pc, #96]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 800400a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe fd86 	bl	8002b20 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe fd82 	bl	8002b20 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e057      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x478>
 8004036:	e04f      	b.n	80040d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0b      	ldr	r2, [pc, #44]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fd6c 	bl	8002b20 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fd68 	bl	8002b20 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e03d      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405e:	4b03      	ldr	r3, [pc, #12]	@ (800406c <HAL_RCC_OscConfig+0x4cc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x4ac>
 800406a:	e035      	b.n	80040d8 <HAL_RCC_OscConfig+0x538>
 800406c:	40023800 	.word	0x40023800
 8004070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004074:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x544>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d028      	beq.n	80040d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d121      	bne.n	80040d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0d0      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004100:	4b6a      	ldr	r3, [pc, #424]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d910      	bls.n	8004130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b67      	ldr	r3, [pc, #412]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 020f 	bic.w	r2, r3, #15
 8004116:	4965      	ldr	r1, [pc, #404]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b63      	ldr	r3, [pc, #396]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b8      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004148:	4b59      	ldr	r3, [pc, #356]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a58      	ldr	r2, [pc, #352]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004160:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a52      	ldr	r2, [pc, #328]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800416a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b50      	ldr	r3, [pc, #320]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494d      	ldr	r1, [pc, #308]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d040      	beq.n	800420c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	4b41      	ldr	r3, [pc, #260]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e073      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ba:	4b3d      	ldr	r3, [pc, #244]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06b      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ca:	4b39      	ldr	r3, [pc, #228]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 0203 	bic.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4936      	ldr	r1, [pc, #216]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fe fca0 	bl	8002b20 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e4:	f7fe fc9c 	bl	8002b20 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e053      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	4b2d      	ldr	r3, [pc, #180]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 020c 	and.w	r2, r3, #12
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	429a      	cmp	r2, r3
 800420a:	d1eb      	bne.n	80041e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800420c:	4b27      	ldr	r3, [pc, #156]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d210      	bcs.n	800423c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b24      	ldr	r3, [pc, #144]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 020f 	bic.w	r2, r3, #15
 8004222:	4922      	ldr	r1, [pc, #136]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e032      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b19      	ldr	r3, [pc, #100]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4916      	ldr	r1, [pc, #88]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004266:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490e      	ldr	r1, [pc, #56]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f821 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800427e:	4602      	mov	r2, r0
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	490a      	ldr	r1, [pc, #40]	@ (80042b4 <HAL_RCC_ClockConfig+0x1cc>)
 800428c:	5ccb      	ldrb	r3, [r1, r3]
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004296:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <HAL_RCC_ClockConfig+0x1d4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fbfc 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800a2dc 	.word	0x0800a2dc
 80042b8:	200000a0 	.word	0x200000a0
 80042bc:	200000a4 	.word	0x200000a4

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b090      	sub	sp, #64	@ 0x40
 80042c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	2300      	movs	r3, #0
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	2300      	movs	r3, #0
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d8:	4b59      	ldr	r3, [pc, #356]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d00d      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x40>
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	f200 80a1 	bhi.w	800442c <HAL_RCC_GetSysClockFreq+0x16c>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x34>
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x3a>
 80042f2:	e09b      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x184>)
 80042f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042f8:	e09b      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042fa:	4b53      	ldr	r3, [pc, #332]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 80042fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042fe:	e098      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004300:	4b4f      	ldr	r3, [pc, #316]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800430a:	4b4d      	ldr	r3, [pc, #308]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d028      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004316:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	2200      	movs	r2, #0
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	627a      	str	r2, [r7, #36]	@ 0x24
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004328:	2100      	movs	r1, #0
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 800432c:	fb03 f201 	mul.w	r2, r3, r1
 8004330:	2300      	movs	r3, #0
 8004332:	fb00 f303 	mul.w	r3, r0, r3
 8004336:	4413      	add	r3, r2
 8004338:	4a43      	ldr	r2, [pc, #268]	@ (8004448 <HAL_RCC_GetSysClockFreq+0x188>)
 800433a:	fba0 1202 	umull	r1, r2, r0, r2
 800433e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004340:	460a      	mov	r2, r1
 8004342:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004346:	4413      	add	r3, r2
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	2200      	movs	r2, #0
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	61fa      	str	r2, [r7, #28]
 8004352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800435a:	f7fc fcb5 	bl	8000cc8 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4613      	mov	r3, r2
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004366:	e053      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004368:	4b35      	ldr	r3, [pc, #212]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	2200      	movs	r2, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	617a      	str	r2, [r7, #20]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800437a:	f04f 0b00 	mov.w	fp, #0
 800437e:	4652      	mov	r2, sl
 8004380:	465b      	mov	r3, fp
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004390:	0150      	lsls	r0, r2, #5
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	ebb2 080a 	subs.w	r8, r2, sl
 800439a:	eb63 090b 	sbc.w	r9, r3, fp
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043b2:	ebb2 0408 	subs.w	r4, r2, r8
 80043b6:	eb63 0509 	sbc.w	r5, r3, r9
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	00eb      	lsls	r3, r5, #3
 80043c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c8:	00e2      	lsls	r2, r4, #3
 80043ca:	4614      	mov	r4, r2
 80043cc:	461d      	mov	r5, r3
 80043ce:	eb14 030a 	adds.w	r3, r4, sl
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	eb45 030b 	adc.w	r3, r5, fp
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e6:	4629      	mov	r1, r5
 80043e8:	028b      	lsls	r3, r1, #10
 80043ea:	4621      	mov	r1, r4
 80043ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043f0:	4621      	mov	r1, r4
 80043f2:	028a      	lsls	r2, r1, #10
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fa:	2200      	movs	r2, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	60fa      	str	r2, [r7, #12]
 8004400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004404:	f7fc fc60 	bl	8000cc8 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x180>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	3301      	adds	r3, #1
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800442a:	e002      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x184>)
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004434:	4618      	mov	r0, r3
 8004436:	3740      	adds	r7, #64	@ 0x40
 8004438:	46bd      	mov	sp, r7
 800443a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	00f42400 	.word	0x00f42400
 8004448:	017d7840 	.word	0x017d7840

0800444c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	200000a0 	.word	0x200000a0

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	0800a2ec 	.word	0x0800a2ec

0800448c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004490:	f7ff ffdc 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0b5b      	lsrs	r3, r3, #13
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	@ (80044b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800a2ec 	.word	0x0800a2ec

080044b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d012      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044dc:	4b69      	ldr	r3, [pc, #420]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044e6:	6093      	str	r3, [r2, #8]
 80044e8:	4b66      	ldr	r3, [pc, #408]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f0:	4964      	ldr	r1, [pc, #400]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d017      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800450e:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004514:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	4959      	ldr	r1, [pc, #356]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800453a:	2301      	movs	r3, #1
 800453c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d017      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800454a:	4b4e      	ldr	r3, [pc, #312]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004550:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	494a      	ldr	r1, [pc, #296]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004586:	2301      	movs	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 808b 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004598:	4b3a      	ldr	r3, [pc, #232]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	4a39      	ldr	r2, [pc, #228]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a4:	4b37      	ldr	r3, [pc, #220]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045b0:	4b35      	ldr	r3, [pc, #212]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fe fab0 	bl	8002b20 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fe faac 	bl	8002b20 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	@ 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e357      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e2:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d035      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d02e      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004600:	4b20      	ldr	r3, [pc, #128]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800460a:	4b1e      	ldr	r3, [pc, #120]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004614:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004616:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004620:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004622:	4a18      	ldr	r2, [pc, #96]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004628:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d114      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fe fa74 	bl	8002b20 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fe fa70 	bl	8002b20 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e319      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ee      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466a:	d111      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800466c:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004678:	4b04      	ldr	r3, [pc, #16]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800467a:	400b      	ands	r3, r1
 800467c:	4901      	ldr	r1, [pc, #4]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
 8004682:	e00b      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004684:	40023800 	.word	0x40023800
 8004688:	40007000 	.word	0x40007000
 800468c:	0ffffcff 	.word	0x0ffffcff
 8004690:	4baa      	ldr	r3, [pc, #680]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4aa9      	ldr	r2, [pc, #676]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004696:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800469a:	6093      	str	r3, [r2, #8]
 800469c:	4ba7      	ldr	r3, [pc, #668]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	49a4      	ldr	r1, [pc, #656]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ba:	4ba0      	ldr	r3, [pc, #640]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c0:	4a9e      	ldr	r2, [pc, #632]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046ca:	4b9c      	ldr	r3, [pc, #624]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	4999      	ldr	r1, [pc, #612]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e8:	4b94      	ldr	r3, [pc, #592]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f6:	4991      	ldr	r1, [pc, #580]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800470a:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	4988      	ldr	r1, [pc, #544]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800472c:	4b83      	ldr	r3, [pc, #524]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004732:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473a:	4980      	ldr	r1, [pc, #512]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800474e:	4b7b      	ldr	r3, [pc, #492]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	4977      	ldr	r1, [pc, #476]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004770:	4b72      	ldr	r3, [pc, #456]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f023 0203 	bic.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	496f      	ldr	r1, [pc, #444]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004792:	4b6a      	ldr	r3, [pc, #424]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004798:	f023 020c 	bic.w	r2, r3, #12
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	4966      	ldr	r1, [pc, #408]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b4:	4b61      	ldr	r3, [pc, #388]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c2:	495e      	ldr	r1, [pc, #376]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d6:	4b59      	ldr	r3, [pc, #356]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e4:	4955      	ldr	r1, [pc, #340]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f8:	4b50      	ldr	r3, [pc, #320]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	494d      	ldr	r1, [pc, #308]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800481a:	4b48      	ldr	r3, [pc, #288]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004828:	4944      	ldr	r1, [pc, #272]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800483c:	4b3f      	ldr	r3, [pc, #252]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004842:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484a:	493c      	ldr	r1, [pc, #240]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800485e:	4b37      	ldr	r3, [pc, #220]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004864:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	4933      	ldr	r1, [pc, #204]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004880:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800488e:	492b      	ldr	r1, [pc, #172]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d011      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048a2:	4b26      	ldr	r3, [pc, #152]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048b0:	4922      	ldr	r1, [pc, #136]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048e2:	4b16      	ldr	r3, [pc, #88]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f0:	4912      	ldr	r1, [pc, #72]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004904:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004914:	4909      	ldr	r1, [pc, #36]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d006      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80d9 	beq.w	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004930:	4b02      	ldr	r3, [pc, #8]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a01      	ldr	r2, [pc, #4]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800493a:	e001      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800493c:	40023800 	.word	0x40023800
 8004940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004942:	f7fe f8ed 	bl	8002b20 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800494a:	f7fe f8e9 	bl	8002b20 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b64      	cmp	r3, #100	@ 0x64
 8004956:	d901      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e194      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800495c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d021      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11d      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800497c:	4b64      	ldr	r3, [pc, #400]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800498a:	4b61      	ldr	r3, [pc, #388]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	019a      	lsls	r2, r3, #6
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	071b      	lsls	r3, r3, #28
 80049b0:	4957      	ldr	r1, [pc, #348]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d02e      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e2:	d129      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	019a      	lsls	r2, r3, #6
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	071b      	lsls	r3, r3, #28
 8004a18:	493d      	ldr	r1, [pc, #244]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a20:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a26:	f023 021f 	bic.w	r2, r3, #31
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4937      	ldr	r1, [pc, #220]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01d      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a44:	4b32      	ldr	r3, [pc, #200]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4a:	0e1b      	lsrs	r3, r3, #24
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a52:	4b2f      	ldr	r3, [pc, #188]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a58:	0f1b      	lsrs	r3, r3, #28
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	019a      	lsls	r2, r3, #6
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	4925      	ldr	r1, [pc, #148]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	019a      	lsls	r2, r3, #6
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	071b      	lsls	r3, r3, #28
 8004aa8:	4919      	ldr	r1, [pc, #100]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ab0:	4b17      	ldr	r3, [pc, #92]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fe f830 	bl	8002b20 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac4:	f7fe f82c 	bl	8002b20 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e0d7      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 80cd 	bne.w	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aea:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fe f813 	bl	8002b20 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004afe:	f7fe f80f 	bl	8002b20 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	@ 0x64
 8004b0a:	d903      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0ba      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b14:	4b5e      	ldr	r3, [pc, #376]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b20:	d0ed      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02e      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d12a      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b4a:	4b51      	ldr	r3, [pc, #324]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b58:	4b4d      	ldr	r3, [pc, #308]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	0f1b      	lsrs	r3, r3, #28
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4944      	ldr	r1, [pc, #272]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b86:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b8c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	493d      	ldr	r1, [pc, #244]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d022      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bb4:	d11d      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bb6:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bc4:	4b32      	ldr	r3, [pc, #200]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bca:	0f1b      	lsrs	r3, r3, #28
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	019a      	lsls	r2, r3, #6
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	431a      	orrs	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	4929      	ldr	r1, [pc, #164]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d028      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c0c:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	4917      	ldr	r1, [pc, #92]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4911      	ldr	r1, [pc, #68]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c50:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fd ff60 	bl	8002b20 <HAL_GetTick>
 8004c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c64:	f7fd ff5c 	bl	8002b20 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e007      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c76:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c82:	d1ef      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e049      	b.n	8004d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fcfc 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 f9f6 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d001      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e054      	b.n	8004e06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a26      	ldr	r2, [pc, #152]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d022      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d86:	d01d      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a22      	ldr	r2, [pc, #136]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a21      	ldr	r2, [pc, #132]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d013      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xe0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xe4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_Base_Start_IT+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <HAL_TIM_Base_Start_IT+0xe8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d115      	bne.n	8004df0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <HAL_TIM_Base_Start_IT+0xec>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d015      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0xbe>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ddc:	d011      	beq.n	8004e02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	e008      	b.n	8004e02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40001800 	.word	0x40001800
 8004e30:	00010007 	.word	0x00010007

08004e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0202 	mvn.w	r2, #2
 8004e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f905 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8f7 	bl	8005072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f908 	bl	800509a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0204 	mvn.w	r2, #4
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8db 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8cd 	bl	8005072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f8de 	bl	800509a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8b1 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8a3 	bl	8005072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8b4 	bl	800509a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0210 	mvn.w	r2, #16
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2208      	movs	r2, #8
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f887 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f879 	bl	8005072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f88a 	bl	800509a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0201 	mvn.w	r2, #1
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fb76 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	2b80      	cmp	r3, #128	@ 0x80
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f91a 	bl	8005218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff2:	d10e      	bne.n	8005012 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d107      	bne.n	8005012 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f90d 	bl	800522c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b40      	cmp	r3, #64	@ 0x40
 800501e:	d10e      	bne.n	800503e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502a:	2b40      	cmp	r3, #64	@ 0x40
 800502c:	d107      	bne.n	800503e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f838 	bl	80050ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d10e      	bne.n	800506a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b20      	cmp	r3, #32
 8005058:	d107      	bne.n	800506a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0220 	mvn.w	r2, #32
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8cd 	bl	8005204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a40      	ldr	r2, [pc, #256]	@ (80051d8 <TIM_Base_SetConfig+0x114>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <TIM_Base_SetConfig+0x118>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3c      	ldr	r2, [pc, #240]	@ (80051e0 <TIM_Base_SetConfig+0x11c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3b      	ldr	r2, [pc, #236]	@ (80051e4 <TIM_Base_SetConfig+0x120>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3a      	ldr	r2, [pc, #232]	@ (80051e8 <TIM_Base_SetConfig+0x124>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2f      	ldr	r2, [pc, #188]	@ (80051d8 <TIM_Base_SetConfig+0x114>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005124:	d027      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2c      	ldr	r2, [pc, #176]	@ (80051dc <TIM_Base_SetConfig+0x118>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d023      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2b      	ldr	r2, [pc, #172]	@ (80051e0 <TIM_Base_SetConfig+0x11c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01f      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2a      	ldr	r2, [pc, #168]	@ (80051e4 <TIM_Base_SetConfig+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a29      	ldr	r2, [pc, #164]	@ (80051e8 <TIM_Base_SetConfig+0x124>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d017      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a28      	ldr	r2, [pc, #160]	@ (80051ec <TIM_Base_SetConfig+0x128>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a27      	ldr	r2, [pc, #156]	@ (80051f0 <TIM_Base_SetConfig+0x12c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a26      	ldr	r2, [pc, #152]	@ (80051f4 <TIM_Base_SetConfig+0x130>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a25      	ldr	r2, [pc, #148]	@ (80051f8 <TIM_Base_SetConfig+0x134>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <TIM_Base_SetConfig+0x138>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a23      	ldr	r2, [pc, #140]	@ (8005200 <TIM_Base_SetConfig+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0a      	ldr	r2, [pc, #40]	@ (80051d8 <TIM_Base_SetConfig+0x114>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_Base_SetConfig+0xf8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a0c      	ldr	r2, [pc, #48]	@ (80051e8 <TIM_Base_SetConfig+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800
 80051f8:	40001800 	.word	0x40001800
 80051fc:	40001c00 	.word	0x40001c00
 8005200:	40002000 	.word	0x40002000

08005204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e040      	b.n	80052d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fd fa4e 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	@ 0x24
 800526c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8b0 	bl	80053e4 <UART_SetConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e022      	b.n	80052d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fb08 	bl	80058ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fb8f 	bl	80059f0 <UART_CheckIdleState>
 80052d2:	4603      	mov	r3, r0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d171      	bne.n	80053d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Transmit+0x24>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e06a      	b.n	80053da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2221      	movs	r2, #33	@ 0x21
 8005310:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005312:	f7fd fc05 	bl	8002b20 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005330:	d108      	bne.n	8005344 <HAL_UART_Transmit+0x68>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e003      	b.n	800534c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800534c:	e02c      	b.n	80053a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2180      	movs	r1, #128	@ 0x80
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb80 	bl	8005a5e <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e038      	b.n	80053da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	3302      	adds	r3, #2
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e007      	b.n	8005396 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1cc      	bne.n	800534e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	2140      	movs	r1, #64	@ 0x40
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fb4d 	bl	8005a5e <UART_WaitOnFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e005      	b.n	80053da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4ba6      	ldr	r3, [pc, #664]	@ (80056a8 <UART_SetConfig+0x2c4>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	430b      	orrs	r3, r1
 800541a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a94      	ldr	r2, [pc, #592]	@ (80056ac <UART_SetConfig+0x2c8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d120      	bne.n	80054a2 <UART_SetConfig+0xbe>
 8005460:	4b93      	ldr	r3, [pc, #588]	@ (80056b0 <UART_SetConfig+0x2cc>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b03      	cmp	r3, #3
 800546c:	d816      	bhi.n	800549c <UART_SetConfig+0xb8>
 800546e:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <UART_SetConfig+0x90>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005485 	.word	0x08005485
 8005478:	08005491 	.word	0x08005491
 800547c:	0800548b 	.word	0x0800548b
 8005480:	08005497 	.word	0x08005497
 8005484:	2301      	movs	r3, #1
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e150      	b.n	800572c <UART_SetConfig+0x348>
 800548a:	2302      	movs	r3, #2
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e14d      	b.n	800572c <UART_SetConfig+0x348>
 8005490:	2304      	movs	r3, #4
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e14a      	b.n	800572c <UART_SetConfig+0x348>
 8005496:	2308      	movs	r3, #8
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e147      	b.n	800572c <UART_SetConfig+0x348>
 800549c:	2310      	movs	r3, #16
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e144      	b.n	800572c <UART_SetConfig+0x348>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a83      	ldr	r2, [pc, #524]	@ (80056b4 <UART_SetConfig+0x2d0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d132      	bne.n	8005512 <UART_SetConfig+0x12e>
 80054ac:	4b80      	ldr	r3, [pc, #512]	@ (80056b0 <UART_SetConfig+0x2cc>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b0c      	cmp	r3, #12
 80054b8:	d828      	bhi.n	800550c <UART_SetConfig+0x128>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0xdc>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	0800550d 	.word	0x0800550d
 80054c8:	0800550d 	.word	0x0800550d
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	08005501 	.word	0x08005501
 80054d4:	0800550d 	.word	0x0800550d
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	0800550d 	.word	0x0800550d
 80054e0:	080054fb 	.word	0x080054fb
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	08005507 	.word	0x08005507
 80054f4:	2300      	movs	r3, #0
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e118      	b.n	800572c <UART_SetConfig+0x348>
 80054fa:	2302      	movs	r3, #2
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e115      	b.n	800572c <UART_SetConfig+0x348>
 8005500:	2304      	movs	r3, #4
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e112      	b.n	800572c <UART_SetConfig+0x348>
 8005506:	2308      	movs	r3, #8
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e10f      	b.n	800572c <UART_SetConfig+0x348>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e10c      	b.n	800572c <UART_SetConfig+0x348>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a68      	ldr	r2, [pc, #416]	@ (80056b8 <UART_SetConfig+0x2d4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d120      	bne.n	800555e <UART_SetConfig+0x17a>
 800551c:	4b64      	ldr	r3, [pc, #400]	@ (80056b0 <UART_SetConfig+0x2cc>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005522:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005526:	2b30      	cmp	r3, #48	@ 0x30
 8005528:	d013      	beq.n	8005552 <UART_SetConfig+0x16e>
 800552a:	2b30      	cmp	r3, #48	@ 0x30
 800552c:	d814      	bhi.n	8005558 <UART_SetConfig+0x174>
 800552e:	2b20      	cmp	r3, #32
 8005530:	d009      	beq.n	8005546 <UART_SetConfig+0x162>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d810      	bhi.n	8005558 <UART_SetConfig+0x174>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <UART_SetConfig+0x15c>
 800553a:	2b10      	cmp	r3, #16
 800553c:	d006      	beq.n	800554c <UART_SetConfig+0x168>
 800553e:	e00b      	b.n	8005558 <UART_SetConfig+0x174>
 8005540:	2300      	movs	r3, #0
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e0f2      	b.n	800572c <UART_SetConfig+0x348>
 8005546:	2302      	movs	r3, #2
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e0ef      	b.n	800572c <UART_SetConfig+0x348>
 800554c:	2304      	movs	r3, #4
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e0ec      	b.n	800572c <UART_SetConfig+0x348>
 8005552:	2308      	movs	r3, #8
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e0e9      	b.n	800572c <UART_SetConfig+0x348>
 8005558:	2310      	movs	r3, #16
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e0e6      	b.n	800572c <UART_SetConfig+0x348>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a56      	ldr	r2, [pc, #344]	@ (80056bc <UART_SetConfig+0x2d8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d120      	bne.n	80055aa <UART_SetConfig+0x1c6>
 8005568:	4b51      	ldr	r3, [pc, #324]	@ (80056b0 <UART_SetConfig+0x2cc>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005572:	2bc0      	cmp	r3, #192	@ 0xc0
 8005574:	d013      	beq.n	800559e <UART_SetConfig+0x1ba>
 8005576:	2bc0      	cmp	r3, #192	@ 0xc0
 8005578:	d814      	bhi.n	80055a4 <UART_SetConfig+0x1c0>
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d009      	beq.n	8005592 <UART_SetConfig+0x1ae>
 800557e:	2b80      	cmp	r3, #128	@ 0x80
 8005580:	d810      	bhi.n	80055a4 <UART_SetConfig+0x1c0>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <UART_SetConfig+0x1a8>
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d006      	beq.n	8005598 <UART_SetConfig+0x1b4>
 800558a:	e00b      	b.n	80055a4 <UART_SetConfig+0x1c0>
 800558c:	2300      	movs	r3, #0
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e0cc      	b.n	800572c <UART_SetConfig+0x348>
 8005592:	2302      	movs	r3, #2
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e0c9      	b.n	800572c <UART_SetConfig+0x348>
 8005598:	2304      	movs	r3, #4
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e0c6      	b.n	800572c <UART_SetConfig+0x348>
 800559e:	2308      	movs	r3, #8
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e0c3      	b.n	800572c <UART_SetConfig+0x348>
 80055a4:	2310      	movs	r3, #16
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e0c0      	b.n	800572c <UART_SetConfig+0x348>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a44      	ldr	r2, [pc, #272]	@ (80056c0 <UART_SetConfig+0x2dc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d125      	bne.n	8005600 <UART_SetConfig+0x21c>
 80055b4:	4b3e      	ldr	r3, [pc, #248]	@ (80056b0 <UART_SetConfig+0x2cc>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c2:	d017      	beq.n	80055f4 <UART_SetConfig+0x210>
 80055c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c8:	d817      	bhi.n	80055fa <UART_SetConfig+0x216>
 80055ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ce:	d00b      	beq.n	80055e8 <UART_SetConfig+0x204>
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d4:	d811      	bhi.n	80055fa <UART_SetConfig+0x216>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <UART_SetConfig+0x1fe>
 80055da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055de:	d006      	beq.n	80055ee <UART_SetConfig+0x20a>
 80055e0:	e00b      	b.n	80055fa <UART_SetConfig+0x216>
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e0a1      	b.n	800572c <UART_SetConfig+0x348>
 80055e8:	2302      	movs	r3, #2
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e09e      	b.n	800572c <UART_SetConfig+0x348>
 80055ee:	2304      	movs	r3, #4
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e09b      	b.n	800572c <UART_SetConfig+0x348>
 80055f4:	2308      	movs	r3, #8
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e098      	b.n	800572c <UART_SetConfig+0x348>
 80055fa:	2310      	movs	r3, #16
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e095      	b.n	800572c <UART_SetConfig+0x348>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2f      	ldr	r2, [pc, #188]	@ (80056c4 <UART_SetConfig+0x2e0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d125      	bne.n	8005656 <UART_SetConfig+0x272>
 800560a:	4b29      	ldr	r3, [pc, #164]	@ (80056b0 <UART_SetConfig+0x2cc>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005610:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005614:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005618:	d017      	beq.n	800564a <UART_SetConfig+0x266>
 800561a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800561e:	d817      	bhi.n	8005650 <UART_SetConfig+0x26c>
 8005620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005624:	d00b      	beq.n	800563e <UART_SetConfig+0x25a>
 8005626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800562a:	d811      	bhi.n	8005650 <UART_SetConfig+0x26c>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <UART_SetConfig+0x254>
 8005630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005634:	d006      	beq.n	8005644 <UART_SetConfig+0x260>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x26c>
 8005638:	2301      	movs	r3, #1
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e076      	b.n	800572c <UART_SetConfig+0x348>
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e073      	b.n	800572c <UART_SetConfig+0x348>
 8005644:	2304      	movs	r3, #4
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e070      	b.n	800572c <UART_SetConfig+0x348>
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e06d      	b.n	800572c <UART_SetConfig+0x348>
 8005650:	2310      	movs	r3, #16
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e06a      	b.n	800572c <UART_SetConfig+0x348>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <UART_SetConfig+0x2e4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d138      	bne.n	80056d2 <UART_SetConfig+0x2ee>
 8005660:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <UART_SetConfig+0x2cc>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800566a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800566e:	d017      	beq.n	80056a0 <UART_SetConfig+0x2bc>
 8005670:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005674:	d82a      	bhi.n	80056cc <UART_SetConfig+0x2e8>
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567a:	d00b      	beq.n	8005694 <UART_SetConfig+0x2b0>
 800567c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005680:	d824      	bhi.n	80056cc <UART_SetConfig+0x2e8>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <UART_SetConfig+0x2aa>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	d006      	beq.n	800569a <UART_SetConfig+0x2b6>
 800568c:	e01e      	b.n	80056cc <UART_SetConfig+0x2e8>
 800568e:	2300      	movs	r3, #0
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e04b      	b.n	800572c <UART_SetConfig+0x348>
 8005694:	2302      	movs	r3, #2
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e048      	b.n	800572c <UART_SetConfig+0x348>
 800569a:	2304      	movs	r3, #4
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e045      	b.n	800572c <UART_SetConfig+0x348>
 80056a0:	2308      	movs	r3, #8
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e042      	b.n	800572c <UART_SetConfig+0x348>
 80056a6:	bf00      	nop
 80056a8:	efff69f3 	.word	0xefff69f3
 80056ac:	40011000 	.word	0x40011000
 80056b0:	40023800 	.word	0x40023800
 80056b4:	40004400 	.word	0x40004400
 80056b8:	40004800 	.word	0x40004800
 80056bc:	40004c00 	.word	0x40004c00
 80056c0:	40005000 	.word	0x40005000
 80056c4:	40011400 	.word	0x40011400
 80056c8:	40007800 	.word	0x40007800
 80056cc:	2310      	movs	r3, #16
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e02c      	b.n	800572c <UART_SetConfig+0x348>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a72      	ldr	r2, [pc, #456]	@ (80058a0 <UART_SetConfig+0x4bc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d125      	bne.n	8005728 <UART_SetConfig+0x344>
 80056dc:	4b71      	ldr	r3, [pc, #452]	@ (80058a4 <UART_SetConfig+0x4c0>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056ea:	d017      	beq.n	800571c <UART_SetConfig+0x338>
 80056ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056f0:	d817      	bhi.n	8005722 <UART_SetConfig+0x33e>
 80056f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f6:	d00b      	beq.n	8005710 <UART_SetConfig+0x32c>
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fc:	d811      	bhi.n	8005722 <UART_SetConfig+0x33e>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <UART_SetConfig+0x326>
 8005702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005706:	d006      	beq.n	8005716 <UART_SetConfig+0x332>
 8005708:	e00b      	b.n	8005722 <UART_SetConfig+0x33e>
 800570a:	2300      	movs	r3, #0
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e00d      	b.n	800572c <UART_SetConfig+0x348>
 8005710:	2302      	movs	r3, #2
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e00a      	b.n	800572c <UART_SetConfig+0x348>
 8005716:	2304      	movs	r3, #4
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e007      	b.n	800572c <UART_SetConfig+0x348>
 800571c:	2308      	movs	r3, #8
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e004      	b.n	800572c <UART_SetConfig+0x348>
 8005722:	2310      	movs	r3, #16
 8005724:	77fb      	strb	r3, [r7, #31]
 8005726:	e001      	b.n	800572c <UART_SetConfig+0x348>
 8005728:	2310      	movs	r3, #16
 800572a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005734:	d15b      	bne.n	80057ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005736:	7ffb      	ldrb	r3, [r7, #31]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d828      	bhi.n	800578e <UART_SetConfig+0x3aa>
 800573c:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <UART_SetConfig+0x360>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	08005779 	.word	0x08005779
 8005750:	0800578f 	.word	0x0800578f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
 800575c:	0800578f 	.word	0x0800578f
 8005760:	0800578f 	.word	0x0800578f
 8005764:	08005787 	.word	0x08005787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fe fe7c 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800576c:	61b8      	str	r0, [r7, #24]
        break;
 800576e:	e013      	b.n	8005798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7fe fe8c 	bl	800448c <HAL_RCC_GetPCLK2Freq>
 8005774:	61b8      	str	r0, [r7, #24]
        break;
 8005776:	e00f      	b.n	8005798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005778:	4b4b      	ldr	r3, [pc, #300]	@ (80058a8 <UART_SetConfig+0x4c4>)
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e00c      	b.n	8005798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577e:	f7fe fd9f 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8005782:	61b8      	str	r0, [r7, #24]
        break;
 8005784:	e008      	b.n	8005798 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800578a:	61bb      	str	r3, [r7, #24]
        break;
 800578c:	e004      	b.n	8005798 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	77bb      	strb	r3, [r7, #30]
        break;
 8005796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d074      	beq.n	8005888 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d916      	bls.n	80057e8 <UART_SetConfig+0x404>
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c0:	d212      	bcs.n	80057e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f023 030f 	bic.w	r3, r3, #15
 80057ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	89fb      	ldrh	r3, [r7, #14]
 80057da:	4313      	orrs	r3, r2
 80057dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	89fa      	ldrh	r2, [r7, #14]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e04f      	b.n	8005888 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	77bb      	strb	r3, [r7, #30]
 80057ec:	e04c      	b.n	8005888 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d828      	bhi.n	8005846 <UART_SetConfig+0x462>
 80057f4:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <UART_SetConfig+0x418>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005829 	.word	0x08005829
 8005804:	08005831 	.word	0x08005831
 8005808:	08005847 	.word	0x08005847
 800580c:	08005837 	.word	0x08005837
 8005810:	08005847 	.word	0x08005847
 8005814:	08005847 	.word	0x08005847
 8005818:	08005847 	.word	0x08005847
 800581c:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe fe20 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 8005824:	61b8      	str	r0, [r7, #24]
        break;
 8005826:	e013      	b.n	8005850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005828:	f7fe fe30 	bl	800448c <HAL_RCC_GetPCLK2Freq>
 800582c:	61b8      	str	r0, [r7, #24]
        break;
 800582e:	e00f      	b.n	8005850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <UART_SetConfig+0x4c4>)
 8005832:	61bb      	str	r3, [r7, #24]
        break;
 8005834:	e00c      	b.n	8005850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7fe fd43 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800583a:	61b8      	str	r0, [r7, #24]
        break;
 800583c:	e008      	b.n	8005850 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005842:	61bb      	str	r3, [r7, #24]
        break;
 8005844:	e004      	b.n	8005850 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	77bb      	strb	r3, [r7, #30]
        break;
 800584e:	bf00      	nop
    }

    if (pclk != 0U)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085a      	lsrs	r2, r3, #1
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b0f      	cmp	r3, #15
 800586e:	d909      	bls.n	8005884 <UART_SetConfig+0x4a0>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005876:	d205      	bcs.n	8005884 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	e001      	b.n	8005888 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005894:	7fbb      	ldrb	r3, [r7, #30]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40007c00 	.word	0x40007c00
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400

080058ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059aa:	d10a      	bne.n	80059c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a00:	f7fd f88e 	bl	8002b20 <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10e      	bne.n	8005a32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f81b 	bl	8005a5e <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e011      	b.n	8005a56 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b09c      	sub	sp, #112	@ 0x70
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6e:	e0a7      	b.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	f000 80a3 	beq.w	8005bc0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fd f851 	bl	8002b20 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d13f      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005aa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ab0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ab4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ae2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005ae4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e068      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d050      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2c:	d148      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b58:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e6      	bne.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b8a:	623a      	str	r2, [r7, #32]
 8005b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	69f9      	ldr	r1, [r7, #28]
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e010      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	f43f af48 	beq.w	8005a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3770      	adds	r7, #112	@ 0x70
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <__cvt>:
 8005bea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bee:	ec57 6b10 	vmov	r6, r7, d0
 8005bf2:	2f00      	cmp	r7, #0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	bfbb      	ittet	lt
 8005bfc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c00:	461f      	movlt	r7, r3
 8005c02:	2300      	movge	r3, #0
 8005c04:	232d      	movlt	r3, #45	@ 0x2d
 8005c06:	700b      	strb	r3, [r1, #0]
 8005c08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c0a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c0e:	4691      	mov	r9, r2
 8005c10:	f023 0820 	bic.w	r8, r3, #32
 8005c14:	bfbc      	itt	lt
 8005c16:	4632      	movlt	r2, r6
 8005c18:	4616      	movlt	r6, r2
 8005c1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c1e:	d005      	beq.n	8005c2c <__cvt+0x42>
 8005c20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c24:	d100      	bne.n	8005c28 <__cvt+0x3e>
 8005c26:	3401      	adds	r4, #1
 8005c28:	2102      	movs	r1, #2
 8005c2a:	e000      	b.n	8005c2e <__cvt+0x44>
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	ab03      	add	r3, sp, #12
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	ab02      	add	r3, sp, #8
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	ec47 6b10 	vmov	d0, r6, r7
 8005c3a:	4653      	mov	r3, sl
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	f001 f873 	bl	8006d28 <_dtoa_r>
 8005c42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c46:	4605      	mov	r5, r0
 8005c48:	d119      	bne.n	8005c7e <__cvt+0x94>
 8005c4a:	f019 0f01 	tst.w	r9, #1
 8005c4e:	d00e      	beq.n	8005c6e <__cvt+0x84>
 8005c50:	eb00 0904 	add.w	r9, r0, r4
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa ff54 	bl	8000b08 <__aeabi_dcmpeq>
 8005c60:	b108      	cbz	r0, 8005c66 <__cvt+0x7c>
 8005c62:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c66:	2230      	movs	r2, #48	@ 0x30
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	454b      	cmp	r3, r9
 8005c6c:	d31e      	bcc.n	8005cac <__cvt+0xc2>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c72:	1b5b      	subs	r3, r3, r5
 8005c74:	4628      	mov	r0, r5
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	b004      	add	sp, #16
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c82:	eb00 0904 	add.w	r9, r0, r4
 8005c86:	d1e5      	bne.n	8005c54 <__cvt+0x6a>
 8005c88:	7803      	ldrb	r3, [r0, #0]
 8005c8a:	2b30      	cmp	r3, #48	@ 0x30
 8005c8c:	d10a      	bne.n	8005ca4 <__cvt+0xba>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2300      	movs	r3, #0
 8005c92:	4630      	mov	r0, r6
 8005c94:	4639      	mov	r1, r7
 8005c96:	f7fa ff37 	bl	8000b08 <__aeabi_dcmpeq>
 8005c9a:	b918      	cbnz	r0, 8005ca4 <__cvt+0xba>
 8005c9c:	f1c4 0401 	rsb	r4, r4, #1
 8005ca0:	f8ca 4000 	str.w	r4, [sl]
 8005ca4:	f8da 3000 	ldr.w	r3, [sl]
 8005ca8:	4499      	add	r9, r3
 8005caa:	e7d3      	b.n	8005c54 <__cvt+0x6a>
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	9103      	str	r1, [sp, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e7d9      	b.n	8005c68 <__cvt+0x7e>

08005cb4 <__exponent>:
 8005cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	bfba      	itte	lt
 8005cba:	4249      	neglt	r1, r1
 8005cbc:	232d      	movlt	r3, #45	@ 0x2d
 8005cbe:	232b      	movge	r3, #43	@ 0x2b
 8005cc0:	2909      	cmp	r1, #9
 8005cc2:	7002      	strb	r2, [r0, #0]
 8005cc4:	7043      	strb	r3, [r0, #1]
 8005cc6:	dd29      	ble.n	8005d1c <__exponent+0x68>
 8005cc8:	f10d 0307 	add.w	r3, sp, #7
 8005ccc:	461d      	mov	r5, r3
 8005cce:	270a      	movs	r7, #10
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cd6:	fb07 1416 	mls	r4, r7, r6, r1
 8005cda:	3430      	adds	r4, #48	@ 0x30
 8005cdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	2c63      	cmp	r4, #99	@ 0x63
 8005ce4:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ce8:	4631      	mov	r1, r6
 8005cea:	dcf1      	bgt.n	8005cd0 <__exponent+0x1c>
 8005cec:	3130      	adds	r1, #48	@ 0x30
 8005cee:	1e94      	subs	r4, r2, #2
 8005cf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cf4:	1c41      	adds	r1, r0, #1
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	d30a      	bcc.n	8005d12 <__exponent+0x5e>
 8005cfc:	f10d 0309 	add.w	r3, sp, #9
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	42ac      	cmp	r4, r5
 8005d04:	bf88      	it	hi
 8005d06:	2300      	movhi	r3, #0
 8005d08:	3302      	adds	r3, #2
 8005d0a:	4403      	add	r3, r0
 8005d0c:	1a18      	subs	r0, r3, r0
 8005d0e:	b003      	add	sp, #12
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d1a:	e7ed      	b.n	8005cf8 <__exponent+0x44>
 8005d1c:	2330      	movs	r3, #48	@ 0x30
 8005d1e:	3130      	adds	r1, #48	@ 0x30
 8005d20:	7083      	strb	r3, [r0, #2]
 8005d22:	70c1      	strb	r1, [r0, #3]
 8005d24:	1d03      	adds	r3, r0, #4
 8005d26:	e7f1      	b.n	8005d0c <__exponent+0x58>

08005d28 <_printf_float>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	b08d      	sub	sp, #52	@ 0x34
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d34:	4616      	mov	r6, r2
 8005d36:	461f      	mov	r7, r3
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f000 feef 	bl	8006b1c <_localeconv_r>
 8005d3e:	6803      	ldr	r3, [r0, #0]
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fa fab4 	bl	80002b0 <strlen>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d50:	9005      	str	r0, [sp, #20]
 8005d52:	3307      	adds	r3, #7
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	f103 0208 	add.w	r2, r3, #8
 8005d5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d60:	f8d4 b000 	ldr.w	fp, [r4]
 8005d64:	f8c8 2000 	str.w	r2, [r8]
 8005d68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d70:	9307      	str	r3, [sp, #28]
 8005d72:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ff0 <_printf_float+0x2c8>)
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	f7fa fef2 	bl	8000b6c <__aeabi_dcmpun>
 8005d88:	bb70      	cbnz	r0, 8005de8 <_printf_float+0xc0>
 8005d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d8e:	4b98      	ldr	r3, [pc, #608]	@ (8005ff0 <_printf_float+0x2c8>)
 8005d90:	f04f 32ff 	mov.w	r2, #4294967295
 8005d94:	f7fa fecc 	bl	8000b30 <__aeabi_dcmple>
 8005d98:	bb30      	cbnz	r0, 8005de8 <_printf_float+0xc0>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa febb 	bl	8000b1c <__aeabi_dcmplt>
 8005da6:	b110      	cbz	r0, 8005dae <_printf_float+0x86>
 8005da8:	232d      	movs	r3, #45	@ 0x2d
 8005daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dae:	4a91      	ldr	r2, [pc, #580]	@ (8005ff4 <_printf_float+0x2cc>)
 8005db0:	4b91      	ldr	r3, [pc, #580]	@ (8005ff8 <_printf_float+0x2d0>)
 8005db2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005db6:	bf94      	ite	ls
 8005db8:	4690      	movls	r8, r2
 8005dba:	4698      	movhi	r8, r3
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	f02b 0304 	bic.w	r3, fp, #4
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	f04f 0900 	mov.w	r9, #0
 8005dca:	9700      	str	r7, [sp, #0]
 8005dcc:	4633      	mov	r3, r6
 8005dce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 f9d2 	bl	800617c <_printf_common>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	f040 808d 	bne.w	8005ef8 <_printf_float+0x1d0>
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	b00d      	add	sp, #52	@ 0x34
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa febc 	bl	8000b6c <__aeabi_dcmpun>
 8005df4:	b140      	cbz	r0, 8005e08 <_printf_float+0xe0>
 8005df6:	464b      	mov	r3, r9
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bfbc      	itt	lt
 8005dfc:	232d      	movlt	r3, #45	@ 0x2d
 8005dfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e02:	4a7e      	ldr	r2, [pc, #504]	@ (8005ffc <_printf_float+0x2d4>)
 8005e04:	4b7e      	ldr	r3, [pc, #504]	@ (8006000 <_printf_float+0x2d8>)
 8005e06:	e7d4      	b.n	8005db2 <_printf_float+0x8a>
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e0e:	9206      	str	r2, [sp, #24]
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	d13b      	bne.n	8005e8c <_printf_float+0x164>
 8005e14:	2306      	movs	r3, #6
 8005e16:	6063      	str	r3, [r4, #4]
 8005e18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e28:	ab09      	add	r3, sp, #36	@ 0x24
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	ec49 8b10 	vmov	d0, r8, r9
 8005e32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7ff fed7 	bl	8005bea <__cvt>
 8005e3c:	9b06      	ldr	r3, [sp, #24]
 8005e3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e40:	2b47      	cmp	r3, #71	@ 0x47
 8005e42:	4680      	mov	r8, r0
 8005e44:	d129      	bne.n	8005e9a <_printf_float+0x172>
 8005e46:	1cc8      	adds	r0, r1, #3
 8005e48:	db02      	blt.n	8005e50 <_printf_float+0x128>
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	dd41      	ble.n	8005ed4 <_printf_float+0x1ac>
 8005e50:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e54:	fa5f fa8a 	uxtb.w	sl, sl
 8005e58:	3901      	subs	r1, #1
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e60:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e62:	f7ff ff27 	bl	8005cb4 <__exponent>
 8005e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e68:	1813      	adds	r3, r2, r0
 8005e6a:	2a01      	cmp	r2, #1
 8005e6c:	4681      	mov	r9, r0
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	dc02      	bgt.n	8005e78 <_printf_float+0x150>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	07d2      	lsls	r2, r2, #31
 8005e76:	d501      	bpl.n	8005e7c <_printf_float+0x154>
 8005e78:	3301      	adds	r3, #1
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0a2      	beq.n	8005dca <_printf_float+0xa2>
 8005e84:	232d      	movs	r3, #45	@ 0x2d
 8005e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8a:	e79e      	b.n	8005dca <_printf_float+0xa2>
 8005e8c:	9a06      	ldr	r2, [sp, #24]
 8005e8e:	2a47      	cmp	r2, #71	@ 0x47
 8005e90:	d1c2      	bne.n	8005e18 <_printf_float+0xf0>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1c0      	bne.n	8005e18 <_printf_float+0xf0>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e7bd      	b.n	8005e16 <_printf_float+0xee>
 8005e9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e9e:	d9db      	bls.n	8005e58 <_printf_float+0x130>
 8005ea0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ea4:	d118      	bne.n	8005ed8 <_printf_float+0x1b0>
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	6863      	ldr	r3, [r4, #4]
 8005eaa:	dd0b      	ble.n	8005ec4 <_printf_float+0x19c>
 8005eac:	6121      	str	r1, [r4, #16]
 8005eae:	b913      	cbnz	r3, 8005eb6 <_printf_float+0x18e>
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	07d0      	lsls	r0, r2, #31
 8005eb4:	d502      	bpl.n	8005ebc <_printf_float+0x194>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	440b      	add	r3, r1
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ebe:	f04f 0900 	mov.w	r9, #0
 8005ec2:	e7db      	b.n	8005e7c <_printf_float+0x154>
 8005ec4:	b913      	cbnz	r3, 8005ecc <_printf_float+0x1a4>
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	07d2      	lsls	r2, r2, #31
 8005eca:	d501      	bpl.n	8005ed0 <_printf_float+0x1a8>
 8005ecc:	3302      	adds	r3, #2
 8005ece:	e7f4      	b.n	8005eba <_printf_float+0x192>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7f2      	b.n	8005eba <_printf_float+0x192>
 8005ed4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eda:	4299      	cmp	r1, r3
 8005edc:	db05      	blt.n	8005eea <_printf_float+0x1c2>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	6121      	str	r1, [r4, #16]
 8005ee2:	07d8      	lsls	r0, r3, #31
 8005ee4:	d5ea      	bpl.n	8005ebc <_printf_float+0x194>
 8005ee6:	1c4b      	adds	r3, r1, #1
 8005ee8:	e7e7      	b.n	8005eba <_printf_float+0x192>
 8005eea:	2900      	cmp	r1, #0
 8005eec:	bfd4      	ite	le
 8005eee:	f1c1 0202 	rsble	r2, r1, #2
 8005ef2:	2201      	movgt	r2, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	e7e0      	b.n	8005eba <_printf_float+0x192>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	055a      	lsls	r2, r3, #21
 8005efc:	d407      	bmi.n	8005f0e <_printf_float+0x1e6>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	4642      	mov	r2, r8
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d12b      	bne.n	8005f64 <_printf_float+0x23c>
 8005f0c:	e767      	b.n	8005dde <_printf_float+0xb6>
 8005f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f12:	f240 80dd 	bls.w	80060d0 <_printf_float+0x3a8>
 8005f16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f7fa fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d033      	beq.n	8005f8e <_printf_float+0x266>
 8005f26:	4a37      	ldr	r2, [pc, #220]	@ (8006004 <_printf_float+0x2dc>)
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f af54 	beq.w	8005dde <_printf_float+0xb6>
 8005f36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f3a:	4543      	cmp	r3, r8
 8005f3c:	db02      	blt.n	8005f44 <_printf_float+0x21c>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07d8      	lsls	r0, r3, #31
 8005f42:	d50f      	bpl.n	8005f64 <_printf_float+0x23c>
 8005f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af45 	beq.w	8005dde <_printf_float+0xb6>
 8005f54:	f04f 0900 	mov.w	r9, #0
 8005f58:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f5c:	f104 0a1a 	add.w	sl, r4, #26
 8005f60:	45c8      	cmp	r8, r9
 8005f62:	dc09      	bgt.n	8005f78 <_printf_float+0x250>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	f100 8103 	bmi.w	8006172 <_printf_float+0x44a>
 8005f6c:	68e0      	ldr	r0, [r4, #12]
 8005f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f70:	4298      	cmp	r0, r3
 8005f72:	bfb8      	it	lt
 8005f74:	4618      	movlt	r0, r3
 8005f76:	e734      	b.n	8005de2 <_printf_float+0xba>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	f43f af2b 	beq.w	8005dde <_printf_float+0xb6>
 8005f88:	f109 0901 	add.w	r9, r9, #1
 8005f8c:	e7e8      	b.n	8005f60 <_printf_float+0x238>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dc39      	bgt.n	8006008 <_printf_float+0x2e0>
 8005f94:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <_printf_float+0x2dc>)
 8005f96:	2301      	movs	r3, #1
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af1d 	beq.w	8005dde <_printf_float+0xb6>
 8005fa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fa8:	ea59 0303 	orrs.w	r3, r9, r3
 8005fac:	d102      	bne.n	8005fb4 <_printf_float+0x28c>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	07d9      	lsls	r1, r3, #31
 8005fb2:	d5d7      	bpl.n	8005f64 <_printf_float+0x23c>
 8005fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af0d 	beq.w	8005dde <_printf_float+0xb6>
 8005fc4:	f04f 0a00 	mov.w	sl, #0
 8005fc8:	f104 0b1a 	add.w	fp, r4, #26
 8005fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fce:	425b      	negs	r3, r3
 8005fd0:	4553      	cmp	r3, sl
 8005fd2:	dc01      	bgt.n	8005fd8 <_printf_float+0x2b0>
 8005fd4:	464b      	mov	r3, r9
 8005fd6:	e793      	b.n	8005f00 <_printf_float+0x1d8>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	465a      	mov	r2, fp
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f aefb 	beq.w	8005dde <_printf_float+0xb6>
 8005fe8:	f10a 0a01 	add.w	sl, sl, #1
 8005fec:	e7ee      	b.n	8005fcc <_printf_float+0x2a4>
 8005fee:	bf00      	nop
 8005ff0:	7fefffff 	.word	0x7fefffff
 8005ff4:	0800a2f4 	.word	0x0800a2f4
 8005ff8:	0800a2f8 	.word	0x0800a2f8
 8005ffc:	0800a2fc 	.word	0x0800a2fc
 8006000:	0800a300 	.word	0x0800a300
 8006004:	0800a304 	.word	0x0800a304
 8006008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800600a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800600e:	4553      	cmp	r3, sl
 8006010:	bfa8      	it	ge
 8006012:	4653      	movge	r3, sl
 8006014:	2b00      	cmp	r3, #0
 8006016:	4699      	mov	r9, r3
 8006018:	dc36      	bgt.n	8006088 <_printf_float+0x360>
 800601a:	f04f 0b00 	mov.w	fp, #0
 800601e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006022:	f104 021a 	add.w	r2, r4, #26
 8006026:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006028:	9306      	str	r3, [sp, #24]
 800602a:	eba3 0309 	sub.w	r3, r3, r9
 800602e:	455b      	cmp	r3, fp
 8006030:	dc31      	bgt.n	8006096 <_printf_float+0x36e>
 8006032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006034:	459a      	cmp	sl, r3
 8006036:	dc3a      	bgt.n	80060ae <_printf_float+0x386>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	07da      	lsls	r2, r3, #31
 800603c:	d437      	bmi.n	80060ae <_printf_float+0x386>
 800603e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006040:	ebaa 0903 	sub.w	r9, sl, r3
 8006044:	9b06      	ldr	r3, [sp, #24]
 8006046:	ebaa 0303 	sub.w	r3, sl, r3
 800604a:	4599      	cmp	r9, r3
 800604c:	bfa8      	it	ge
 800604e:	4699      	movge	r9, r3
 8006050:	f1b9 0f00 	cmp.w	r9, #0
 8006054:	dc33      	bgt.n	80060be <_printf_float+0x396>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800605e:	f104 0b1a 	add.w	fp, r4, #26
 8006062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006064:	ebaa 0303 	sub.w	r3, sl, r3
 8006068:	eba3 0309 	sub.w	r3, r3, r9
 800606c:	4543      	cmp	r3, r8
 800606e:	f77f af79 	ble.w	8005f64 <_printf_float+0x23c>
 8006072:	2301      	movs	r3, #1
 8006074:	465a      	mov	r2, fp
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f aeae 	beq.w	8005dde <_printf_float+0xb6>
 8006082:	f108 0801 	add.w	r8, r8, #1
 8006086:	e7ec      	b.n	8006062 <_printf_float+0x33a>
 8006088:	4642      	mov	r2, r8
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	d1c2      	bne.n	800601a <_printf_float+0x2f2>
 8006094:	e6a3      	b.n	8005dde <_printf_float+0xb6>
 8006096:	2301      	movs	r3, #1
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	9206      	str	r2, [sp, #24]
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f ae9c 	beq.w	8005dde <_printf_float+0xb6>
 80060a6:	9a06      	ldr	r2, [sp, #24]
 80060a8:	f10b 0b01 	add.w	fp, fp, #1
 80060ac:	e7bb      	b.n	8006026 <_printf_float+0x2fe>
 80060ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	d1c0      	bne.n	800603e <_printf_float+0x316>
 80060bc:	e68f      	b.n	8005dde <_printf_float+0xb6>
 80060be:	9a06      	ldr	r2, [sp, #24]
 80060c0:	464b      	mov	r3, r9
 80060c2:	4442      	add	r2, r8
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	d1c3      	bne.n	8006056 <_printf_float+0x32e>
 80060ce:	e686      	b.n	8005dde <_printf_float+0xb6>
 80060d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060d4:	f1ba 0f01 	cmp.w	sl, #1
 80060d8:	dc01      	bgt.n	80060de <_printf_float+0x3b6>
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d536      	bpl.n	800614c <_printf_float+0x424>
 80060de:	2301      	movs	r3, #1
 80060e0:	4642      	mov	r2, r8
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f ae78 	beq.w	8005dde <_printf_float+0xb6>
 80060ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f ae70 	beq.w	8005dde <_printf_float+0xb6>
 80060fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610a:	f7fa fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800610e:	b9c0      	cbnz	r0, 8006142 <_printf_float+0x41a>
 8006110:	4653      	mov	r3, sl
 8006112:	f108 0201 	add.w	r2, r8, #1
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	d10c      	bne.n	800613a <_printf_float+0x412>
 8006120:	e65d      	b.n	8005dde <_printf_float+0xb6>
 8006122:	2301      	movs	r3, #1
 8006124:	465a      	mov	r2, fp
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae56 	beq.w	8005dde <_printf_float+0xb6>
 8006132:	f108 0801 	add.w	r8, r8, #1
 8006136:	45d0      	cmp	r8, sl
 8006138:	dbf3      	blt.n	8006122 <_printf_float+0x3fa>
 800613a:	464b      	mov	r3, r9
 800613c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006140:	e6df      	b.n	8005f02 <_printf_float+0x1da>
 8006142:	f04f 0800 	mov.w	r8, #0
 8006146:	f104 0b1a 	add.w	fp, r4, #26
 800614a:	e7f4      	b.n	8006136 <_printf_float+0x40e>
 800614c:	2301      	movs	r3, #1
 800614e:	4642      	mov	r2, r8
 8006150:	e7e1      	b.n	8006116 <_printf_float+0x3ee>
 8006152:	2301      	movs	r3, #1
 8006154:	464a      	mov	r2, r9
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f ae3e 	beq.w	8005dde <_printf_float+0xb6>
 8006162:	f108 0801 	add.w	r8, r8, #1
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800616a:	1a5b      	subs	r3, r3, r1
 800616c:	4543      	cmp	r3, r8
 800616e:	dcf0      	bgt.n	8006152 <_printf_float+0x42a>
 8006170:	e6fc      	b.n	8005f6c <_printf_float+0x244>
 8006172:	f04f 0800 	mov.w	r8, #0
 8006176:	f104 0919 	add.w	r9, r4, #25
 800617a:	e7f4      	b.n	8006166 <_printf_float+0x43e>

0800617c <_printf_common>:
 800617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	4616      	mov	r6, r2
 8006182:	4698      	mov	r8, r3
 8006184:	688a      	ldr	r2, [r1, #8]
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800618c:	4293      	cmp	r3, r2
 800618e:	bfb8      	it	lt
 8006190:	4613      	movlt	r3, r2
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006198:	4607      	mov	r7, r0
 800619a:	460c      	mov	r4, r1
 800619c:	b10a      	cbz	r2, 80061a2 <_printf_common+0x26>
 800619e:	3301      	adds	r3, #1
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	0699      	lsls	r1, r3, #26
 80061a6:	bf42      	ittt	mi
 80061a8:	6833      	ldrmi	r3, [r6, #0]
 80061aa:	3302      	addmi	r3, #2
 80061ac:	6033      	strmi	r3, [r6, #0]
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	f015 0506 	ands.w	r5, r5, #6
 80061b4:	d106      	bne.n	80061c4 <_printf_common+0x48>
 80061b6:	f104 0a19 	add.w	sl, r4, #25
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	6832      	ldr	r2, [r6, #0]
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dc26      	bgt.n	8006212 <_printf_common+0x96>
 80061c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	3b00      	subs	r3, #0
 80061cc:	bf18      	it	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	0692      	lsls	r2, r2, #26
 80061d2:	d42b      	bmi.n	800622c <_printf_common+0xb0>
 80061d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061d8:	4641      	mov	r1, r8
 80061da:	4638      	mov	r0, r7
 80061dc:	47c8      	blx	r9
 80061de:	3001      	adds	r0, #1
 80061e0:	d01e      	beq.n	8006220 <_printf_common+0xa4>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	f003 0306 	and.w	r3, r3, #6
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	bf02      	ittt	eq
 80061ee:	68e5      	ldreq	r5, [r4, #12]
 80061f0:	6833      	ldreq	r3, [r6, #0]
 80061f2:	1aed      	subeq	r5, r5, r3
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	bf0c      	ite	eq
 80061f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061fc:	2500      	movne	r5, #0
 80061fe:	4293      	cmp	r3, r2
 8006200:	bfc4      	itt	gt
 8006202:	1a9b      	subgt	r3, r3, r2
 8006204:	18ed      	addgt	r5, r5, r3
 8006206:	2600      	movs	r6, #0
 8006208:	341a      	adds	r4, #26
 800620a:	42b5      	cmp	r5, r6
 800620c:	d11a      	bne.n	8006244 <_printf_common+0xc8>
 800620e:	2000      	movs	r0, #0
 8006210:	e008      	b.n	8006224 <_printf_common+0xa8>
 8006212:	2301      	movs	r3, #1
 8006214:	4652      	mov	r2, sl
 8006216:	4641      	mov	r1, r8
 8006218:	4638      	mov	r0, r7
 800621a:	47c8      	blx	r9
 800621c:	3001      	adds	r0, #1
 800621e:	d103      	bne.n	8006228 <_printf_common+0xac>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006228:	3501      	adds	r5, #1
 800622a:	e7c6      	b.n	80061ba <_printf_common+0x3e>
 800622c:	18e1      	adds	r1, r4, r3
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	2030      	movs	r0, #48	@ 0x30
 8006232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006236:	4422      	add	r2, r4
 8006238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800623c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006240:	3302      	adds	r3, #2
 8006242:	e7c7      	b.n	80061d4 <_printf_common+0x58>
 8006244:	2301      	movs	r3, #1
 8006246:	4622      	mov	r2, r4
 8006248:	4641      	mov	r1, r8
 800624a:	4638      	mov	r0, r7
 800624c:	47c8      	blx	r9
 800624e:	3001      	adds	r0, #1
 8006250:	d0e6      	beq.n	8006220 <_printf_common+0xa4>
 8006252:	3601      	adds	r6, #1
 8006254:	e7d9      	b.n	800620a <_printf_common+0x8e>
	...

08006258 <_printf_i>:
 8006258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	7e0f      	ldrb	r7, [r1, #24]
 800625e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006260:	2f78      	cmp	r7, #120	@ 0x78
 8006262:	4691      	mov	r9, r2
 8006264:	4680      	mov	r8, r0
 8006266:	460c      	mov	r4, r1
 8006268:	469a      	mov	sl, r3
 800626a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800626e:	d807      	bhi.n	8006280 <_printf_i+0x28>
 8006270:	2f62      	cmp	r7, #98	@ 0x62
 8006272:	d80a      	bhi.n	800628a <_printf_i+0x32>
 8006274:	2f00      	cmp	r7, #0
 8006276:	f000 80d2 	beq.w	800641e <_printf_i+0x1c6>
 800627a:	2f58      	cmp	r7, #88	@ 0x58
 800627c:	f000 80b9 	beq.w	80063f2 <_printf_i+0x19a>
 8006280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006288:	e03a      	b.n	8006300 <_printf_i+0xa8>
 800628a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800628e:	2b15      	cmp	r3, #21
 8006290:	d8f6      	bhi.n	8006280 <_printf_i+0x28>
 8006292:	a101      	add	r1, pc, #4	@ (adr r1, 8006298 <_printf_i+0x40>)
 8006294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006298:	080062f1 	.word	0x080062f1
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006281 	.word	0x08006281
 80062a4:	08006281 	.word	0x08006281
 80062a8:	08006281 	.word	0x08006281
 80062ac:	08006281 	.word	0x08006281
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006281 	.word	0x08006281
 80062b8:	08006281 	.word	0x08006281
 80062bc:	08006281 	.word	0x08006281
 80062c0:	08006281 	.word	0x08006281
 80062c4:	08006405 	.word	0x08006405
 80062c8:	0800632f 	.word	0x0800632f
 80062cc:	080063bf 	.word	0x080063bf
 80062d0:	08006281 	.word	0x08006281
 80062d4:	08006281 	.word	0x08006281
 80062d8:	08006427 	.word	0x08006427
 80062dc:	08006281 	.word	0x08006281
 80062e0:	0800632f 	.word	0x0800632f
 80062e4:	08006281 	.word	0x08006281
 80062e8:	08006281 	.word	0x08006281
 80062ec:	080063c7 	.word	0x080063c7
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6032      	str	r2, [r6, #0]
 80062f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006300:	2301      	movs	r3, #1
 8006302:	e09d      	b.n	8006440 <_printf_i+0x1e8>
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	6820      	ldr	r0, [r4, #0]
 8006308:	1d19      	adds	r1, r3, #4
 800630a:	6031      	str	r1, [r6, #0]
 800630c:	0606      	lsls	r6, r0, #24
 800630e:	d501      	bpl.n	8006314 <_printf_i+0xbc>
 8006310:	681d      	ldr	r5, [r3, #0]
 8006312:	e003      	b.n	800631c <_printf_i+0xc4>
 8006314:	0645      	lsls	r5, r0, #25
 8006316:	d5fb      	bpl.n	8006310 <_printf_i+0xb8>
 8006318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800631c:	2d00      	cmp	r5, #0
 800631e:	da03      	bge.n	8006328 <_printf_i+0xd0>
 8006320:	232d      	movs	r3, #45	@ 0x2d
 8006322:	426d      	negs	r5, r5
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006328:	4859      	ldr	r0, [pc, #356]	@ (8006490 <_printf_i+0x238>)
 800632a:	230a      	movs	r3, #10
 800632c:	e011      	b.n	8006352 <_printf_i+0xfa>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	6833      	ldr	r3, [r6, #0]
 8006332:	0608      	lsls	r0, r1, #24
 8006334:	f853 5b04 	ldr.w	r5, [r3], #4
 8006338:	d402      	bmi.n	8006340 <_printf_i+0xe8>
 800633a:	0649      	lsls	r1, r1, #25
 800633c:	bf48      	it	mi
 800633e:	b2ad      	uxthmi	r5, r5
 8006340:	2f6f      	cmp	r7, #111	@ 0x6f
 8006342:	4853      	ldr	r0, [pc, #332]	@ (8006490 <_printf_i+0x238>)
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	bf14      	ite	ne
 8006348:	230a      	movne	r3, #10
 800634a:	2308      	moveq	r3, #8
 800634c:	2100      	movs	r1, #0
 800634e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006352:	6866      	ldr	r6, [r4, #4]
 8006354:	60a6      	str	r6, [r4, #8]
 8006356:	2e00      	cmp	r6, #0
 8006358:	bfa2      	ittt	ge
 800635a:	6821      	ldrge	r1, [r4, #0]
 800635c:	f021 0104 	bicge.w	r1, r1, #4
 8006360:	6021      	strge	r1, [r4, #0]
 8006362:	b90d      	cbnz	r5, 8006368 <_printf_i+0x110>
 8006364:	2e00      	cmp	r6, #0
 8006366:	d04b      	beq.n	8006400 <_printf_i+0x1a8>
 8006368:	4616      	mov	r6, r2
 800636a:	fbb5 f1f3 	udiv	r1, r5, r3
 800636e:	fb03 5711 	mls	r7, r3, r1, r5
 8006372:	5dc7      	ldrb	r7, [r0, r7]
 8006374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006378:	462f      	mov	r7, r5
 800637a:	42bb      	cmp	r3, r7
 800637c:	460d      	mov	r5, r1
 800637e:	d9f4      	bls.n	800636a <_printf_i+0x112>
 8006380:	2b08      	cmp	r3, #8
 8006382:	d10b      	bne.n	800639c <_printf_i+0x144>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	07df      	lsls	r7, r3, #31
 8006388:	d508      	bpl.n	800639c <_printf_i+0x144>
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	4299      	cmp	r1, r3
 8006390:	bfde      	ittt	le
 8006392:	2330      	movle	r3, #48	@ 0x30
 8006394:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006398:	f106 36ff 	addle.w	r6, r6, #4294967295
 800639c:	1b92      	subs	r2, r2, r6
 800639e:	6122      	str	r2, [r4, #16]
 80063a0:	f8cd a000 	str.w	sl, [sp]
 80063a4:	464b      	mov	r3, r9
 80063a6:	aa03      	add	r2, sp, #12
 80063a8:	4621      	mov	r1, r4
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7ff fee6 	bl	800617c <_printf_common>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d14a      	bne.n	800644a <_printf_i+0x1f2>
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	b004      	add	sp, #16
 80063ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	f043 0320 	orr.w	r3, r3, #32
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	4833      	ldr	r0, [pc, #204]	@ (8006494 <_printf_i+0x23c>)
 80063c8:	2778      	movs	r7, #120	@ 0x78
 80063ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	6831      	ldr	r1, [r6, #0]
 80063d2:	061f      	lsls	r7, r3, #24
 80063d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80063d8:	d402      	bmi.n	80063e0 <_printf_i+0x188>
 80063da:	065f      	lsls	r7, r3, #25
 80063dc:	bf48      	it	mi
 80063de:	b2ad      	uxthmi	r5, r5
 80063e0:	6031      	str	r1, [r6, #0]
 80063e2:	07d9      	lsls	r1, r3, #31
 80063e4:	bf44      	itt	mi
 80063e6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ea:	6023      	strmi	r3, [r4, #0]
 80063ec:	b11d      	cbz	r5, 80063f6 <_printf_i+0x19e>
 80063ee:	2310      	movs	r3, #16
 80063f0:	e7ac      	b.n	800634c <_printf_i+0xf4>
 80063f2:	4827      	ldr	r0, [pc, #156]	@ (8006490 <_printf_i+0x238>)
 80063f4:	e7e9      	b.n	80063ca <_printf_i+0x172>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	f023 0320 	bic.w	r3, r3, #32
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	e7f6      	b.n	80063ee <_printf_i+0x196>
 8006400:	4616      	mov	r6, r2
 8006402:	e7bd      	b.n	8006380 <_printf_i+0x128>
 8006404:	6833      	ldr	r3, [r6, #0]
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	6961      	ldr	r1, [r4, #20]
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	6030      	str	r0, [r6, #0]
 800640e:	062e      	lsls	r6, r5, #24
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	d501      	bpl.n	8006418 <_printf_i+0x1c0>
 8006414:	6019      	str	r1, [r3, #0]
 8006416:	e002      	b.n	800641e <_printf_i+0x1c6>
 8006418:	0668      	lsls	r0, r5, #25
 800641a:	d5fb      	bpl.n	8006414 <_printf_i+0x1bc>
 800641c:	8019      	strh	r1, [r3, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	4616      	mov	r6, r2
 8006424:	e7bc      	b.n	80063a0 <_printf_i+0x148>
 8006426:	6833      	ldr	r3, [r6, #0]
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	6032      	str	r2, [r6, #0]
 800642c:	681e      	ldr	r6, [r3, #0]
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	2100      	movs	r1, #0
 8006432:	4630      	mov	r0, r6
 8006434:	f7f9 feec 	bl	8000210 <memchr>
 8006438:	b108      	cbz	r0, 800643e <_printf_i+0x1e6>
 800643a:	1b80      	subs	r0, r0, r6
 800643c:	6060      	str	r0, [r4, #4]
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	2300      	movs	r3, #0
 8006444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006448:	e7aa      	b.n	80063a0 <_printf_i+0x148>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	4632      	mov	r2, r6
 800644e:	4649      	mov	r1, r9
 8006450:	4640      	mov	r0, r8
 8006452:	47d0      	blx	sl
 8006454:	3001      	adds	r0, #1
 8006456:	d0ad      	beq.n	80063b4 <_printf_i+0x15c>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	079b      	lsls	r3, r3, #30
 800645c:	d413      	bmi.n	8006486 <_printf_i+0x22e>
 800645e:	68e0      	ldr	r0, [r4, #12]
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	4298      	cmp	r0, r3
 8006464:	bfb8      	it	lt
 8006466:	4618      	movlt	r0, r3
 8006468:	e7a6      	b.n	80063b8 <_printf_i+0x160>
 800646a:	2301      	movs	r3, #1
 800646c:	4632      	mov	r2, r6
 800646e:	4649      	mov	r1, r9
 8006470:	4640      	mov	r0, r8
 8006472:	47d0      	blx	sl
 8006474:	3001      	adds	r0, #1
 8006476:	d09d      	beq.n	80063b4 <_printf_i+0x15c>
 8006478:	3501      	adds	r5, #1
 800647a:	68e3      	ldr	r3, [r4, #12]
 800647c:	9903      	ldr	r1, [sp, #12]
 800647e:	1a5b      	subs	r3, r3, r1
 8006480:	42ab      	cmp	r3, r5
 8006482:	dcf2      	bgt.n	800646a <_printf_i+0x212>
 8006484:	e7eb      	b.n	800645e <_printf_i+0x206>
 8006486:	2500      	movs	r5, #0
 8006488:	f104 0619 	add.w	r6, r4, #25
 800648c:	e7f5      	b.n	800647a <_printf_i+0x222>
 800648e:	bf00      	nop
 8006490:	0800a306 	.word	0x0800a306
 8006494:	0800a317 	.word	0x0800a317

08006498 <_scanf_float>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	b087      	sub	sp, #28
 800649e:	4617      	mov	r7, r2
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	688b      	ldr	r3, [r1, #8]
 80064a4:	1e5a      	subs	r2, r3, #1
 80064a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80064aa:	bf81      	itttt	hi
 80064ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80064b0:	eb03 0b05 	addhi.w	fp, r3, r5
 80064b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80064b8:	608b      	strhi	r3, [r1, #8]
 80064ba:	680b      	ldr	r3, [r1, #0]
 80064bc:	460a      	mov	r2, r1
 80064be:	f04f 0500 	mov.w	r5, #0
 80064c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80064c6:	f842 3b1c 	str.w	r3, [r2], #28
 80064ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064ce:	4680      	mov	r8, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	bf98      	it	ls
 80064d4:	f04f 0b00 	movls.w	fp, #0
 80064d8:	9201      	str	r2, [sp, #4]
 80064da:	4616      	mov	r6, r2
 80064dc:	46aa      	mov	sl, r5
 80064de:	46a9      	mov	r9, r5
 80064e0:	9502      	str	r5, [sp, #8]
 80064e2:	68a2      	ldr	r2, [r4, #8]
 80064e4:	b152      	cbz	r2, 80064fc <_scanf_float+0x64>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80064ec:	d864      	bhi.n	80065b8 <_scanf_float+0x120>
 80064ee:	2b40      	cmp	r3, #64	@ 0x40
 80064f0:	d83c      	bhi.n	800656c <_scanf_float+0xd4>
 80064f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80064f6:	b2c8      	uxtb	r0, r1
 80064f8:	280e      	cmp	r0, #14
 80064fa:	d93a      	bls.n	8006572 <_scanf_float+0xda>
 80064fc:	f1b9 0f00 	cmp.w	r9, #0
 8006500:	d003      	beq.n	800650a <_scanf_float+0x72>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800650e:	f1ba 0f01 	cmp.w	sl, #1
 8006512:	f200 8117 	bhi.w	8006744 <_scanf_float+0x2ac>
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	429e      	cmp	r6, r3
 800651a:	f200 8108 	bhi.w	800672e <_scanf_float+0x296>
 800651e:	2001      	movs	r0, #1
 8006520:	b007      	add	sp, #28
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800652a:	2a0d      	cmp	r2, #13
 800652c:	d8e6      	bhi.n	80064fc <_scanf_float+0x64>
 800652e:	a101      	add	r1, pc, #4	@ (adr r1, 8006534 <_scanf_float+0x9c>)
 8006530:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006534:	0800667b 	.word	0x0800667b
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	080064fd 	.word	0x080064fd
 8006544:	080066db 	.word	0x080066db
 8006548:	080066b3 	.word	0x080066b3
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	08006689 	.word	0x08006689
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080064fd 	.word	0x080064fd
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006641 	.word	0x08006641
 800656c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006570:	e7db      	b.n	800652a <_scanf_float+0x92>
 8006572:	290e      	cmp	r1, #14
 8006574:	d8c2      	bhi.n	80064fc <_scanf_float+0x64>
 8006576:	a001      	add	r0, pc, #4	@ (adr r0, 800657c <_scanf_float+0xe4>)
 8006578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800657c:	08006631 	.word	0x08006631
 8006580:	080064fd 	.word	0x080064fd
 8006584:	08006631 	.word	0x08006631
 8006588:	080066c7 	.word	0x080066c7
 800658c:	080064fd 	.word	0x080064fd
 8006590:	080065d9 	.word	0x080065d9
 8006594:	08006617 	.word	0x08006617
 8006598:	08006617 	.word	0x08006617
 800659c:	08006617 	.word	0x08006617
 80065a0:	08006617 	.word	0x08006617
 80065a4:	08006617 	.word	0x08006617
 80065a8:	08006617 	.word	0x08006617
 80065ac:	08006617 	.word	0x08006617
 80065b0:	08006617 	.word	0x08006617
 80065b4:	08006617 	.word	0x08006617
 80065b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80065ba:	d809      	bhi.n	80065d0 <_scanf_float+0x138>
 80065bc:	2b60      	cmp	r3, #96	@ 0x60
 80065be:	d8b2      	bhi.n	8006526 <_scanf_float+0x8e>
 80065c0:	2b54      	cmp	r3, #84	@ 0x54
 80065c2:	d07b      	beq.n	80066bc <_scanf_float+0x224>
 80065c4:	2b59      	cmp	r3, #89	@ 0x59
 80065c6:	d199      	bne.n	80064fc <_scanf_float+0x64>
 80065c8:	2d07      	cmp	r5, #7
 80065ca:	d197      	bne.n	80064fc <_scanf_float+0x64>
 80065cc:	2508      	movs	r5, #8
 80065ce:	e02c      	b.n	800662a <_scanf_float+0x192>
 80065d0:	2b74      	cmp	r3, #116	@ 0x74
 80065d2:	d073      	beq.n	80066bc <_scanf_float+0x224>
 80065d4:	2b79      	cmp	r3, #121	@ 0x79
 80065d6:	e7f6      	b.n	80065c6 <_scanf_float+0x12e>
 80065d8:	6821      	ldr	r1, [r4, #0]
 80065da:	05c8      	lsls	r0, r1, #23
 80065dc:	d51b      	bpl.n	8006616 <_scanf_float+0x17e>
 80065de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80065e2:	6021      	str	r1, [r4, #0]
 80065e4:	f109 0901 	add.w	r9, r9, #1
 80065e8:	f1bb 0f00 	cmp.w	fp, #0
 80065ec:	d003      	beq.n	80065f6 <_scanf_float+0x15e>
 80065ee:	3201      	adds	r2, #1
 80065f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065f4:	60a2      	str	r2, [r4, #8]
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	60a3      	str	r3, [r4, #8]
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	3301      	adds	r3, #1
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3b01      	subs	r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	f340 8087 	ble.w	800671c <_scanf_float+0x284>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	3301      	adds	r3, #1
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	e765      	b.n	80064e2 <_scanf_float+0x4a>
 8006616:	eb1a 0105 	adds.w	r1, sl, r5
 800661a:	f47f af6f 	bne.w	80064fc <_scanf_float+0x64>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	460d      	mov	r5, r1
 8006628:	468a      	mov	sl, r1
 800662a:	f806 3b01 	strb.w	r3, [r6], #1
 800662e:	e7e2      	b.n	80065f6 <_scanf_float+0x15e>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	0610      	lsls	r0, r2, #24
 8006634:	f57f af62 	bpl.w	80064fc <_scanf_float+0x64>
 8006638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	e7f4      	b.n	800662a <_scanf_float+0x192>
 8006640:	f1ba 0f00 	cmp.w	sl, #0
 8006644:	d10e      	bne.n	8006664 <_scanf_float+0x1cc>
 8006646:	f1b9 0f00 	cmp.w	r9, #0
 800664a:	d10e      	bne.n	800666a <_scanf_float+0x1d2>
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006652:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006656:	d108      	bne.n	800666a <_scanf_float+0x1d2>
 8006658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800665c:	6022      	str	r2, [r4, #0]
 800665e:	f04f 0a01 	mov.w	sl, #1
 8006662:	e7e2      	b.n	800662a <_scanf_float+0x192>
 8006664:	f1ba 0f02 	cmp.w	sl, #2
 8006668:	d055      	beq.n	8006716 <_scanf_float+0x27e>
 800666a:	2d01      	cmp	r5, #1
 800666c:	d002      	beq.n	8006674 <_scanf_float+0x1dc>
 800666e:	2d04      	cmp	r5, #4
 8006670:	f47f af44 	bne.w	80064fc <_scanf_float+0x64>
 8006674:	3501      	adds	r5, #1
 8006676:	b2ed      	uxtb	r5, r5
 8006678:	e7d7      	b.n	800662a <_scanf_float+0x192>
 800667a:	f1ba 0f01 	cmp.w	sl, #1
 800667e:	f47f af3d 	bne.w	80064fc <_scanf_float+0x64>
 8006682:	f04f 0a02 	mov.w	sl, #2
 8006686:	e7d0      	b.n	800662a <_scanf_float+0x192>
 8006688:	b97d      	cbnz	r5, 80066aa <_scanf_float+0x212>
 800668a:	f1b9 0f00 	cmp.w	r9, #0
 800668e:	f47f af38 	bne.w	8006502 <_scanf_float+0x6a>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006698:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800669c:	f040 8108 	bne.w	80068b0 <_scanf_float+0x418>
 80066a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	2501      	movs	r5, #1
 80066a8:	e7bf      	b.n	800662a <_scanf_float+0x192>
 80066aa:	2d03      	cmp	r5, #3
 80066ac:	d0e2      	beq.n	8006674 <_scanf_float+0x1dc>
 80066ae:	2d05      	cmp	r5, #5
 80066b0:	e7de      	b.n	8006670 <_scanf_float+0x1d8>
 80066b2:	2d02      	cmp	r5, #2
 80066b4:	f47f af22 	bne.w	80064fc <_scanf_float+0x64>
 80066b8:	2503      	movs	r5, #3
 80066ba:	e7b6      	b.n	800662a <_scanf_float+0x192>
 80066bc:	2d06      	cmp	r5, #6
 80066be:	f47f af1d 	bne.w	80064fc <_scanf_float+0x64>
 80066c2:	2507      	movs	r5, #7
 80066c4:	e7b1      	b.n	800662a <_scanf_float+0x192>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	0591      	lsls	r1, r2, #22
 80066ca:	f57f af17 	bpl.w	80064fc <_scanf_float+0x64>
 80066ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80066d8:	e7a7      	b.n	800662a <_scanf_float+0x192>
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80066e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80066e4:	d006      	beq.n	80066f4 <_scanf_float+0x25c>
 80066e6:	0550      	lsls	r0, r2, #21
 80066e8:	f57f af08 	bpl.w	80064fc <_scanf_float+0x64>
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	f000 80de 	beq.w	80068b0 <_scanf_float+0x418>
 80066f4:	0591      	lsls	r1, r2, #22
 80066f6:	bf58      	it	pl
 80066f8:	9902      	ldrpl	r1, [sp, #8]
 80066fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066fe:	bf58      	it	pl
 8006700:	eba9 0101 	subpl.w	r1, r9, r1
 8006704:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006708:	bf58      	it	pl
 800670a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800670e:	6022      	str	r2, [r4, #0]
 8006710:	f04f 0900 	mov.w	r9, #0
 8006714:	e789      	b.n	800662a <_scanf_float+0x192>
 8006716:	f04f 0a03 	mov.w	sl, #3
 800671a:	e786      	b.n	800662a <_scanf_float+0x192>
 800671c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006720:	4639      	mov	r1, r7
 8006722:	4640      	mov	r0, r8
 8006724:	4798      	blx	r3
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f aedb 	beq.w	80064e2 <_scanf_float+0x4a>
 800672c:	e6e6      	b.n	80064fc <_scanf_float+0x64>
 800672e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006736:	463a      	mov	r2, r7
 8006738:	4640      	mov	r0, r8
 800673a:	4798      	blx	r3
 800673c:	6923      	ldr	r3, [r4, #16]
 800673e:	3b01      	subs	r3, #1
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	e6e8      	b.n	8006516 <_scanf_float+0x7e>
 8006744:	1e6b      	subs	r3, r5, #1
 8006746:	2b06      	cmp	r3, #6
 8006748:	d824      	bhi.n	8006794 <_scanf_float+0x2fc>
 800674a:	2d02      	cmp	r5, #2
 800674c:	d836      	bhi.n	80067bc <_scanf_float+0x324>
 800674e:	9b01      	ldr	r3, [sp, #4]
 8006750:	429e      	cmp	r6, r3
 8006752:	f67f aee4 	bls.w	800651e <_scanf_float+0x86>
 8006756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800675a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800675e:	463a      	mov	r2, r7
 8006760:	4640      	mov	r0, r8
 8006762:	4798      	blx	r3
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	3b01      	subs	r3, #1
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	e7f0      	b.n	800674e <_scanf_float+0x2b6>
 800676c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006770:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006774:	463a      	mov	r2, r7
 8006776:	4640      	mov	r0, r8
 8006778:	4798      	blx	r3
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	3b01      	subs	r3, #1
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006784:	fa5f fa8a 	uxtb.w	sl, sl
 8006788:	f1ba 0f02 	cmp.w	sl, #2
 800678c:	d1ee      	bne.n	800676c <_scanf_float+0x2d4>
 800678e:	3d03      	subs	r5, #3
 8006790:	b2ed      	uxtb	r5, r5
 8006792:	1b76      	subs	r6, r6, r5
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	05da      	lsls	r2, r3, #23
 8006798:	d530      	bpl.n	80067fc <_scanf_float+0x364>
 800679a:	055b      	lsls	r3, r3, #21
 800679c:	d511      	bpl.n	80067c2 <_scanf_float+0x32a>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	429e      	cmp	r6, r3
 80067a2:	f67f aebc 	bls.w	800651e <_scanf_float+0x86>
 80067a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067ae:	463a      	mov	r2, r7
 80067b0:	4640      	mov	r0, r8
 80067b2:	4798      	blx	r3
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	e7f0      	b.n	800679e <_scanf_float+0x306>
 80067bc:	46aa      	mov	sl, r5
 80067be:	46b3      	mov	fp, r6
 80067c0:	e7de      	b.n	8006780 <_scanf_float+0x2e8>
 80067c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	2965      	cmp	r1, #101	@ 0x65
 80067ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	d00c      	beq.n	80067f0 <_scanf_float+0x358>
 80067d6:	2945      	cmp	r1, #69	@ 0x45
 80067d8:	d00a      	beq.n	80067f0 <_scanf_float+0x358>
 80067da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067de:	463a      	mov	r2, r7
 80067e0:	4640      	mov	r0, r8
 80067e2:	4798      	blx	r3
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	1eb5      	subs	r5, r6, #2
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067f4:	463a      	mov	r2, r7
 80067f6:	4640      	mov	r0, r8
 80067f8:	4798      	blx	r3
 80067fa:	462e      	mov	r6, r5
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	f012 0210 	ands.w	r2, r2, #16
 8006802:	d001      	beq.n	8006808 <_scanf_float+0x370>
 8006804:	2000      	movs	r0, #0
 8006806:	e68b      	b.n	8006520 <_scanf_float+0x88>
 8006808:	7032      	strb	r2, [r6, #0]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006814:	d11c      	bne.n	8006850 <_scanf_float+0x3b8>
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	454b      	cmp	r3, r9
 800681a:	eba3 0209 	sub.w	r2, r3, r9
 800681e:	d123      	bne.n	8006868 <_scanf_float+0x3d0>
 8006820:	9901      	ldr	r1, [sp, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	4640      	mov	r0, r8
 8006826:	f002 fbf7 	bl	8009018 <_strtod_r>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	6821      	ldr	r1, [r4, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f011 0f02 	tst.w	r1, #2
 8006834:	ec57 6b10 	vmov	r6, r7, d0
 8006838:	f103 0204 	add.w	r2, r3, #4
 800683c:	d01f      	beq.n	800687e <_scanf_float+0x3e6>
 800683e:	9903      	ldr	r1, [sp, #12]
 8006840:	600a      	str	r2, [r1, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	e9c3 6700 	strd	r6, r7, [r3]
 8006848:	68e3      	ldr	r3, [r4, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60e3      	str	r3, [r4, #12]
 800684e:	e7d9      	b.n	8006804 <_scanf_float+0x36c>
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0e4      	beq.n	8006820 <_scanf_float+0x388>
 8006856:	9905      	ldr	r1, [sp, #20]
 8006858:	230a      	movs	r3, #10
 800685a:	3101      	adds	r1, #1
 800685c:	4640      	mov	r0, r8
 800685e:	f002 fc5b 	bl	8009118 <_strtol_r>
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	9e05      	ldr	r6, [sp, #20]
 8006866:	1ac2      	subs	r2, r0, r3
 8006868:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800686c:	429e      	cmp	r6, r3
 800686e:	bf28      	it	cs
 8006870:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006874:	4910      	ldr	r1, [pc, #64]	@ (80068b8 <_scanf_float+0x420>)
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f8e4 	bl	8006a44 <siprintf>
 800687c:	e7d0      	b.n	8006820 <_scanf_float+0x388>
 800687e:	f011 0f04 	tst.w	r1, #4
 8006882:	9903      	ldr	r1, [sp, #12]
 8006884:	600a      	str	r2, [r1, #0]
 8006886:	d1dc      	bne.n	8006842 <_scanf_float+0x3aa>
 8006888:	681d      	ldr	r5, [r3, #0]
 800688a:	4632      	mov	r2, r6
 800688c:	463b      	mov	r3, r7
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7fa f96b 	bl	8000b6c <__aeabi_dcmpun>
 8006896:	b128      	cbz	r0, 80068a4 <_scanf_float+0x40c>
 8006898:	4808      	ldr	r0, [pc, #32]	@ (80068bc <_scanf_float+0x424>)
 800689a:	f000 f9b7 	bl	8006c0c <nanf>
 800689e:	ed85 0a00 	vstr	s0, [r5]
 80068a2:	e7d1      	b.n	8006848 <_scanf_float+0x3b0>
 80068a4:	4630      	mov	r0, r6
 80068a6:	4639      	mov	r1, r7
 80068a8:	f7fa f9be 	bl	8000c28 <__aeabi_d2f>
 80068ac:	6028      	str	r0, [r5, #0]
 80068ae:	e7cb      	b.n	8006848 <_scanf_float+0x3b0>
 80068b0:	f04f 0900 	mov.w	r9, #0
 80068b4:	e629      	b.n	800650a <_scanf_float+0x72>
 80068b6:	bf00      	nop
 80068b8:	0800a328 	.word	0x0800a328
 80068bc:	0800a6bd 	.word	0x0800a6bd

080068c0 <std>:
 80068c0:	2300      	movs	r3, #0
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ce:	6083      	str	r3, [r0, #8]
 80068d0:	8181      	strh	r1, [r0, #12]
 80068d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80068d4:	81c2      	strh	r2, [r0, #14]
 80068d6:	6183      	str	r3, [r0, #24]
 80068d8:	4619      	mov	r1, r3
 80068da:	2208      	movs	r2, #8
 80068dc:	305c      	adds	r0, #92	@ 0x5c
 80068de:	f000 f914 	bl	8006b0a <memset>
 80068e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006918 <std+0x58>)
 80068e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <std+0x5c>)
 80068e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <std+0x60>)
 80068ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <std+0x64>)
 80068f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <std+0x68>)
 80068f4:	6224      	str	r4, [r4, #32]
 80068f6:	429c      	cmp	r4, r3
 80068f8:	d006      	beq.n	8006908 <std+0x48>
 80068fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068fe:	4294      	cmp	r4, r2
 8006900:	d002      	beq.n	8006908 <std+0x48>
 8006902:	33d0      	adds	r3, #208	@ 0xd0
 8006904:	429c      	cmp	r4, r3
 8006906:	d105      	bne.n	8006914 <std+0x54>
 8006908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006910:	f000 b978 	b.w	8006c04 <__retarget_lock_init_recursive>
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	08006a85 	.word	0x08006a85
 800691c:	08006aa7 	.word	0x08006aa7
 8006920:	08006adf 	.word	0x08006adf
 8006924:	08006b03 	.word	0x08006b03
 8006928:	2000042c 	.word	0x2000042c

0800692c <stdio_exit_handler>:
 800692c:	4a02      	ldr	r2, [pc, #8]	@ (8006938 <stdio_exit_handler+0xc>)
 800692e:	4903      	ldr	r1, [pc, #12]	@ (800693c <stdio_exit_handler+0x10>)
 8006930:	4803      	ldr	r0, [pc, #12]	@ (8006940 <stdio_exit_handler+0x14>)
 8006932:	f000 b869 	b.w	8006a08 <_fwalk_sglue>
 8006936:	bf00      	nop
 8006938:	200000ac 	.word	0x200000ac
 800693c:	080094d5 	.word	0x080094d5
 8006940:	200000bc 	.word	0x200000bc

08006944 <cleanup_stdio>:
 8006944:	6841      	ldr	r1, [r0, #4]
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <cleanup_stdio+0x34>)
 8006948:	4299      	cmp	r1, r3
 800694a:	b510      	push	{r4, lr}
 800694c:	4604      	mov	r4, r0
 800694e:	d001      	beq.n	8006954 <cleanup_stdio+0x10>
 8006950:	f002 fdc0 	bl	80094d4 <_fflush_r>
 8006954:	68a1      	ldr	r1, [r4, #8]
 8006956:	4b09      	ldr	r3, [pc, #36]	@ (800697c <cleanup_stdio+0x38>)
 8006958:	4299      	cmp	r1, r3
 800695a:	d002      	beq.n	8006962 <cleanup_stdio+0x1e>
 800695c:	4620      	mov	r0, r4
 800695e:	f002 fdb9 	bl	80094d4 <_fflush_r>
 8006962:	68e1      	ldr	r1, [r4, #12]
 8006964:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <cleanup_stdio+0x3c>)
 8006966:	4299      	cmp	r1, r3
 8006968:	d004      	beq.n	8006974 <cleanup_stdio+0x30>
 800696a:	4620      	mov	r0, r4
 800696c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006970:	f002 bdb0 	b.w	80094d4 <_fflush_r>
 8006974:	bd10      	pop	{r4, pc}
 8006976:	bf00      	nop
 8006978:	2000042c 	.word	0x2000042c
 800697c:	20000494 	.word	0x20000494
 8006980:	200004fc 	.word	0x200004fc

08006984 <global_stdio_init.part.0>:
 8006984:	b510      	push	{r4, lr}
 8006986:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <global_stdio_init.part.0+0x30>)
 8006988:	4c0b      	ldr	r4, [pc, #44]	@ (80069b8 <global_stdio_init.part.0+0x34>)
 800698a:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <global_stdio_init.part.0+0x38>)
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	4620      	mov	r0, r4
 8006990:	2200      	movs	r2, #0
 8006992:	2104      	movs	r1, #4
 8006994:	f7ff ff94 	bl	80068c0 <std>
 8006998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800699c:	2201      	movs	r2, #1
 800699e:	2109      	movs	r1, #9
 80069a0:	f7ff ff8e 	bl	80068c0 <std>
 80069a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069a8:	2202      	movs	r2, #2
 80069aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ae:	2112      	movs	r1, #18
 80069b0:	f7ff bf86 	b.w	80068c0 <std>
 80069b4:	20000564 	.word	0x20000564
 80069b8:	2000042c 	.word	0x2000042c
 80069bc:	0800692d 	.word	0x0800692d

080069c0 <__sfp_lock_acquire>:
 80069c0:	4801      	ldr	r0, [pc, #4]	@ (80069c8 <__sfp_lock_acquire+0x8>)
 80069c2:	f000 b920 	b.w	8006c06 <__retarget_lock_acquire_recursive>
 80069c6:	bf00      	nop
 80069c8:	2000056d 	.word	0x2000056d

080069cc <__sfp_lock_release>:
 80069cc:	4801      	ldr	r0, [pc, #4]	@ (80069d4 <__sfp_lock_release+0x8>)
 80069ce:	f000 b91b 	b.w	8006c08 <__retarget_lock_release_recursive>
 80069d2:	bf00      	nop
 80069d4:	2000056d 	.word	0x2000056d

080069d8 <__sinit>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	4604      	mov	r4, r0
 80069dc:	f7ff fff0 	bl	80069c0 <__sfp_lock_acquire>
 80069e0:	6a23      	ldr	r3, [r4, #32]
 80069e2:	b11b      	cbz	r3, 80069ec <__sinit+0x14>
 80069e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e8:	f7ff bff0 	b.w	80069cc <__sfp_lock_release>
 80069ec:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <__sinit+0x28>)
 80069ee:	6223      	str	r3, [r4, #32]
 80069f0:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <__sinit+0x2c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f5      	bne.n	80069e4 <__sinit+0xc>
 80069f8:	f7ff ffc4 	bl	8006984 <global_stdio_init.part.0>
 80069fc:	e7f2      	b.n	80069e4 <__sinit+0xc>
 80069fe:	bf00      	nop
 8006a00:	08006945 	.word	0x08006945
 8006a04:	20000564 	.word	0x20000564

08006a08 <_fwalk_sglue>:
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	4688      	mov	r8, r1
 8006a10:	4614      	mov	r4, r2
 8006a12:	2600      	movs	r6, #0
 8006a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a18:	f1b9 0901 	subs.w	r9, r9, #1
 8006a1c:	d505      	bpl.n	8006a2a <_fwalk_sglue+0x22>
 8006a1e:	6824      	ldr	r4, [r4, #0]
 8006a20:	2c00      	cmp	r4, #0
 8006a22:	d1f7      	bne.n	8006a14 <_fwalk_sglue+0xc>
 8006a24:	4630      	mov	r0, r6
 8006a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d907      	bls.n	8006a40 <_fwalk_sglue+0x38>
 8006a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a34:	3301      	adds	r3, #1
 8006a36:	d003      	beq.n	8006a40 <_fwalk_sglue+0x38>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c0      	blx	r8
 8006a3e:	4306      	orrs	r6, r0
 8006a40:	3568      	adds	r5, #104	@ 0x68
 8006a42:	e7e9      	b.n	8006a18 <_fwalk_sglue+0x10>

08006a44 <siprintf>:
 8006a44:	b40e      	push	{r1, r2, r3}
 8006a46:	b500      	push	{lr}
 8006a48:	b09c      	sub	sp, #112	@ 0x70
 8006a4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	9006      	str	r0, [sp, #24]
 8006a50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a54:	4809      	ldr	r0, [pc, #36]	@ (8006a7c <siprintf+0x38>)
 8006a56:	9107      	str	r1, [sp, #28]
 8006a58:	9104      	str	r1, [sp, #16]
 8006a5a:	4909      	ldr	r1, [pc, #36]	@ (8006a80 <siprintf+0x3c>)
 8006a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a60:	9105      	str	r1, [sp, #20]
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	a902      	add	r1, sp, #8
 8006a68:	f002 fbb4 	bl	80091d4 <_svfiprintf_r>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	b01c      	add	sp, #112	@ 0x70
 8006a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a78:	b003      	add	sp, #12
 8006a7a:	4770      	bx	lr
 8006a7c:	200000b8 	.word	0x200000b8
 8006a80:	ffff0208 	.word	0xffff0208

08006a84 <__sread>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	460c      	mov	r4, r1
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	f000 f86c 	bl	8006b68 <_read_r>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	bfab      	itete	ge
 8006a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a96:	89a3      	ldrhlt	r3, [r4, #12]
 8006a98:	181b      	addge	r3, r3, r0
 8006a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a9e:	bfac      	ite	ge
 8006aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006aa2:	81a3      	strhlt	r3, [r4, #12]
 8006aa4:	bd10      	pop	{r4, pc}

08006aa6 <__swrite>:
 8006aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	461f      	mov	r7, r3
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	05db      	lsls	r3, r3, #23
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	d505      	bpl.n	8006ac4 <__swrite+0x1e>
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	2302      	movs	r3, #2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f000 f840 	bl	8006b44 <_lseek_r>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	f000 b857 	b.w	8006b8c <_write_r>

08006ade <__sseek>:
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae6:	f000 f82d 	bl	8006b44 <_lseek_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	bf15      	itete	ne
 8006af0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006afa:	81a3      	strheq	r3, [r4, #12]
 8006afc:	bf18      	it	ne
 8006afe:	81a3      	strhne	r3, [r4, #12]
 8006b00:	bd10      	pop	{r4, pc}

08006b02 <__sclose>:
 8006b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b06:	f000 b80d 	b.w	8006b24 <_close_r>

08006b0a <memset>:
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d100      	bne.n	8006b14 <memset+0xa>
 8006b12:	4770      	bx	lr
 8006b14:	f803 1b01 	strb.w	r1, [r3], #1
 8006b18:	e7f9      	b.n	8006b0e <memset+0x4>
	...

08006b1c <_localeconv_r>:
 8006b1c:	4800      	ldr	r0, [pc, #0]	@ (8006b20 <_localeconv_r+0x4>)
 8006b1e:	4770      	bx	lr
 8006b20:	200001f8 	.word	0x200001f8

08006b24 <_close_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	@ (8006b40 <_close_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fb ff00 	bl	8002934 <_close>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_close_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_close_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000568 	.word	0x20000568

08006b44 <_lseek_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	@ (8006b64 <_lseek_r+0x20>)
 8006b48:	4604      	mov	r4, r0
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	602a      	str	r2, [r5, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7fb ff15 	bl	8002982 <_lseek>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_lseek_r+0x1e>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_lseek_r+0x1e>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000568 	.word	0x20000568

08006b68 <_read_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_read_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fb fea3 	bl	80028c2 <_read>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_read_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_read_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20000568 	.word	0x20000568

08006b8c <_write_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_write_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fb feae 	bl	80028fc <_write>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_write_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_write_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20000568 	.word	0x20000568

08006bb0 <__errno>:
 8006bb0:	4b01      	ldr	r3, [pc, #4]	@ (8006bb8 <__errno+0x8>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	200000b8 	.word	0x200000b8

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006bf4 <__libc_init_array+0x38>)
 8006bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006bf8 <__libc_init_array+0x3c>)
 8006bc2:	1b64      	subs	r4, r4, r5
 8006bc4:	10a4      	asrs	r4, r4, #2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8006bfc <__libc_init_array+0x40>)
 8006bce:	4c0c      	ldr	r4, [pc, #48]	@ (8006c00 <__libc_init_array+0x44>)
 8006bd0:	f003 fb70 	bl	800a2b4 <_init>
 8006bd4:	1b64      	subs	r4, r4, r5
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	2600      	movs	r6, #0
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	0800a728 	.word	0x0800a728
 8006bf8:	0800a728 	.word	0x0800a728
 8006bfc:	0800a728 	.word	0x0800a728
 8006c00:	0800a72c 	.word	0x0800a72c

08006c04 <__retarget_lock_init_recursive>:
 8006c04:	4770      	bx	lr

08006c06 <__retarget_lock_acquire_recursive>:
 8006c06:	4770      	bx	lr

08006c08 <__retarget_lock_release_recursive>:
 8006c08:	4770      	bx	lr
	...

08006c0c <nanf>:
 8006c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c14 <nanf+0x8>
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	7fc00000 	.word	0x7fc00000

08006c18 <quorem>:
 8006c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	6903      	ldr	r3, [r0, #16]
 8006c1e:	690c      	ldr	r4, [r1, #16]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	4607      	mov	r7, r0
 8006c24:	db7e      	blt.n	8006d24 <quorem+0x10c>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	f101 0814 	add.w	r8, r1, #20
 8006c2c:	00a3      	lsls	r3, r4, #2
 8006c2e:	f100 0514 	add.w	r5, r0, #20
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c42:	3301      	adds	r3, #1
 8006c44:	429a      	cmp	r2, r3
 8006c46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c4e:	d32e      	bcc.n	8006cae <quorem+0x96>
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	46c4      	mov	ip, r8
 8006c56:	46ae      	mov	lr, r5
 8006c58:	46d3      	mov	fp, sl
 8006c5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c5e:	b298      	uxth	r0, r3
 8006c60:	fb06 a000 	mla	r0, r6, r0, sl
 8006c64:	0c02      	lsrs	r2, r0, #16
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	fb06 2303 	mla	r3, r6, r3, r2
 8006c6c:	f8de 2000 	ldr.w	r2, [lr]
 8006c70:	b280      	uxth	r0, r0
 8006c72:	b292      	uxth	r2, r2
 8006c74:	1a12      	subs	r2, r2, r0
 8006c76:	445a      	add	r2, fp
 8006c78:	f8de 0000 	ldr.w	r0, [lr]
 8006c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c90:	45e1      	cmp	r9, ip
 8006c92:	f84e 2b04 	str.w	r2, [lr], #4
 8006c96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c9a:	d2de      	bcs.n	8006c5a <quorem+0x42>
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	58eb      	ldr	r3, [r5, r3]
 8006ca0:	b92b      	cbnz	r3, 8006cae <quorem+0x96>
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	d32f      	bcc.n	8006d0c <quorem+0xf4>
 8006cac:	613c      	str	r4, [r7, #16]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f001 f9c2 	bl	8008038 <__mcmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	db25      	blt.n	8006d04 <quorem+0xec>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cc0:	f8d1 c000 	ldr.w	ip, [r1]
 8006cc4:	fa1f fe82 	uxth.w	lr, r2
 8006cc8:	fa1f f38c 	uxth.w	r3, ip
 8006ccc:	eba3 030e 	sub.w	r3, r3, lr
 8006cd0:	4403      	add	r3, r0
 8006cd2:	0c12      	lsrs	r2, r2, #16
 8006cd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce2:	45c1      	cmp	r9, r8
 8006ce4:	f841 3b04 	str.w	r3, [r1], #4
 8006ce8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cec:	d2e6      	bcs.n	8006cbc <quorem+0xa4>
 8006cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf6:	b922      	cbnz	r2, 8006d02 <quorem+0xea>
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	d30b      	bcc.n	8006d18 <quorem+0x100>
 8006d00:	613c      	str	r4, [r7, #16]
 8006d02:	3601      	adds	r6, #1
 8006d04:	4630      	mov	r0, r6
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d1cb      	bne.n	8006cac <quorem+0x94>
 8006d14:	3c01      	subs	r4, #1
 8006d16:	e7c6      	b.n	8006ca6 <quorem+0x8e>
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	3b04      	subs	r3, #4
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	d1ef      	bne.n	8006d00 <quorem+0xe8>
 8006d20:	3c01      	subs	r4, #1
 8006d22:	e7ea      	b.n	8006cfa <quorem+0xe2>
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7ee      	b.n	8006d06 <quorem+0xee>

08006d28 <_dtoa_r>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	69c7      	ldr	r7, [r0, #28]
 8006d2e:	b099      	sub	sp, #100	@ 0x64
 8006d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d34:	ec55 4b10 	vmov	r4, r5, d0
 8006d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d3c:	4683      	mov	fp, r0
 8006d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d42:	b97f      	cbnz	r7, 8006d64 <_dtoa_r+0x3c>
 8006d44:	2010      	movs	r0, #16
 8006d46:	f000 fdfd 	bl	8007944 <malloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d50:	b920      	cbnz	r0, 8006d5c <_dtoa_r+0x34>
 8006d52:	4ba7      	ldr	r3, [pc, #668]	@ (8006ff0 <_dtoa_r+0x2c8>)
 8006d54:	21ef      	movs	r1, #239	@ 0xef
 8006d56:	48a7      	ldr	r0, [pc, #668]	@ (8006ff4 <_dtoa_r+0x2cc>)
 8006d58:	f002 fc36 	bl	80095c8 <__assert_func>
 8006d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d60:	6007      	str	r7, [r0, #0]
 8006d62:	60c7      	str	r7, [r0, #12]
 8006d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d68:	6819      	ldr	r1, [r3, #0]
 8006d6a:	b159      	cbz	r1, 8006d84 <_dtoa_r+0x5c>
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	604a      	str	r2, [r1, #4]
 8006d70:	2301      	movs	r3, #1
 8006d72:	4093      	lsls	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 feda 	bl	8007b30 <_Bfree>
 8006d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	1e2b      	subs	r3, r5, #0
 8006d86:	bfb9      	ittee	lt
 8006d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d8c:	9303      	strlt	r3, [sp, #12]
 8006d8e:	2300      	movge	r3, #0
 8006d90:	6033      	strge	r3, [r6, #0]
 8006d92:	9f03      	ldr	r7, [sp, #12]
 8006d94:	4b98      	ldr	r3, [pc, #608]	@ (8006ff8 <_dtoa_r+0x2d0>)
 8006d96:	bfbc      	itt	lt
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	6032      	strlt	r2, [r6, #0]
 8006d9c:	43bb      	bics	r3, r7
 8006d9e:	d112      	bne.n	8006dc6 <_dtoa_r+0x9e>
 8006da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006dac:	4323      	orrs	r3, r4
 8006dae:	f000 854d 	beq.w	800784c <_dtoa_r+0xb24>
 8006db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800700c <_dtoa_r+0x2e4>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 854f 	beq.w	800785c <_dtoa_r+0xb34>
 8006dbe:	f10a 0303 	add.w	r3, sl, #3
 8006dc2:	f000 bd49 	b.w	8007858 <_dtoa_r+0xb30>
 8006dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	ec51 0b17 	vmov	r0, r1, d7
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006dd6:	f7f9 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	b158      	cbz	r0, 8006df6 <_dtoa_r+0xce>
 8006dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006de0:	2301      	movs	r3, #1
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006de6:	b113      	cbz	r3, 8006dee <_dtoa_r+0xc6>
 8006de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dea:	4b84      	ldr	r3, [pc, #528]	@ (8006ffc <_dtoa_r+0x2d4>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007010 <_dtoa_r+0x2e8>
 8006df2:	f000 bd33 	b.w	800785c <_dtoa_r+0xb34>
 8006df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8006dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8006dfe:	4658      	mov	r0, fp
 8006e00:	f001 fa3a 	bl	8008278 <__d2b>
 8006e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e08:	4681      	mov	r9, r0
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d077      	beq.n	8006efe <_dtoa_r+0x1d6>
 8006e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b74      	ldr	r3, [pc, #464]	@ (8007000 <_dtoa_r+0x2d8>)
 8006e2e:	f7f9 fa4b 	bl	80002c8 <__aeabi_dsub>
 8006e32:	a369      	add	r3, pc, #420	@ (adr r3, 8006fd8 <_dtoa_r+0x2b0>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fbfe 	bl	8000638 <__aeabi_dmul>
 8006e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8006fe0 <_dtoa_r+0x2b8>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fa43 	bl	80002cc <__adddf3>
 8006e46:	4604      	mov	r4, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	f7f9 fb8a 	bl	8000564 <__aeabi_i2d>
 8006e50:	a365      	add	r3, pc, #404	@ (adr r3, 8006fe8 <_dtoa_r+0x2c0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fbef 	bl	8000638 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fa33 	bl	80002cc <__adddf3>
 8006e66:	4604      	mov	r4, r0
 8006e68:	460d      	mov	r5, r1
 8006e6a:	f7f9 fe95 	bl	8000b98 <__aeabi_d2iz>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4607      	mov	r7, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 fe50 	bl	8000b1c <__aeabi_dcmplt>
 8006e7c:	b140      	cbz	r0, 8006e90 <_dtoa_r+0x168>
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7f9 fb70 	bl	8000564 <__aeabi_i2d>
 8006e84:	4622      	mov	r2, r4
 8006e86:	462b      	mov	r3, r5
 8006e88:	f7f9 fe3e 	bl	8000b08 <__aeabi_dcmpeq>
 8006e8c:	b900      	cbnz	r0, 8006e90 <_dtoa_r+0x168>
 8006e8e:	3f01      	subs	r7, #1
 8006e90:	2f16      	cmp	r7, #22
 8006e92:	d851      	bhi.n	8006f38 <_dtoa_r+0x210>
 8006e94:	4b5b      	ldr	r3, [pc, #364]	@ (8007004 <_dtoa_r+0x2dc>)
 8006e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ea2:	f7f9 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d048      	beq.n	8006f3c <_dtoa_r+0x214>
 8006eaa:	3f01      	subs	r7, #1
 8006eac:	2300      	movs	r3, #0
 8006eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8006eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006eb2:	1b9b      	subs	r3, r3, r6
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	bf44      	itt	mi
 8006eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ebc:	2300      	movmi	r3, #0
 8006ebe:	9208      	str	r2, [sp, #32]
 8006ec0:	bf54      	ite	pl
 8006ec2:	f04f 0800 	movpl.w	r8, #0
 8006ec6:	9308      	strmi	r3, [sp, #32]
 8006ec8:	2f00      	cmp	r7, #0
 8006eca:	db39      	blt.n	8006f40 <_dtoa_r+0x218>
 8006ecc:	9b08      	ldr	r3, [sp, #32]
 8006ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ed0:	443b      	add	r3, r7
 8006ed2:	9308      	str	r3, [sp, #32]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d864      	bhi.n	8006fa8 <_dtoa_r+0x280>
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	bfc4      	itt	gt
 8006ee2:	3b04      	subgt	r3, #4
 8006ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8006eec:	bfcc      	ite	gt
 8006eee:	2400      	movgt	r4, #0
 8006ef0:	2401      	movle	r4, #1
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d863      	bhi.n	8006fbe <_dtoa_r+0x296>
 8006ef6:	e8df f003 	tbb	[pc, r3]
 8006efa:	372a      	.short	0x372a
 8006efc:	5535      	.short	0x5535
 8006efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f02:	441e      	add	r6, r3
 8006f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	bfc1      	itttt	gt
 8006f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f10:	409f      	lslgt	r7, r3
 8006f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f1a:	bfd6      	itet	le
 8006f1c:	f1c3 0320 	rsble	r3, r3, #32
 8006f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f24:	fa04 f003 	lslle.w	r0, r4, r3
 8006f28:	f7f9 fb0c 	bl	8000544 <__aeabi_ui2d>
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f32:	3e01      	subs	r6, #1
 8006f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f36:	e777      	b.n	8006e28 <_dtoa_r+0x100>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e7b8      	b.n	8006eae <_dtoa_r+0x186>
 8006f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f3e:	e7b7      	b.n	8006eb0 <_dtoa_r+0x188>
 8006f40:	427b      	negs	r3, r7
 8006f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f44:	2300      	movs	r3, #0
 8006f46:	eba8 0807 	sub.w	r8, r8, r7
 8006f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f4c:	e7c4      	b.n	8006ed8 <_dtoa_r+0x1b0>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dc35      	bgt.n	8006fc4 <_dtoa_r+0x29c>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f62:	e00b      	b.n	8006f7c <_dtoa_r+0x254>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e7f3      	b.n	8006f50 <_dtoa_r+0x228>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	bfb8      	it	lt
 8006f7a:	2301      	movlt	r3, #1
 8006f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f80:	2100      	movs	r1, #0
 8006f82:	2204      	movs	r2, #4
 8006f84:	f102 0514 	add.w	r5, r2, #20
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	d91f      	bls.n	8006fcc <_dtoa_r+0x2a4>
 8006f8c:	6041      	str	r1, [r0, #4]
 8006f8e:	4658      	mov	r0, fp
 8006f90:	f000 fd8e 	bl	8007ab0 <_Balloc>
 8006f94:	4682      	mov	sl, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d13c      	bne.n	8007014 <_dtoa_r+0x2ec>
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <_dtoa_r+0x2e0>)
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fa2:	e6d8      	b.n	8006d56 <_dtoa_r+0x2e>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e7e0      	b.n	8006f6a <_dtoa_r+0x242>
 8006fa8:	2401      	movs	r4, #1
 8006faa:	2300      	movs	r3, #0
 8006fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2312      	movs	r3, #18
 8006fbc:	e7d0      	b.n	8006f60 <_dtoa_r+0x238>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fc2:	e7f5      	b.n	8006fb0 <_dtoa_r+0x288>
 8006fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	9307      	str	r3, [sp, #28]
 8006fca:	e7d7      	b.n	8006f7c <_dtoa_r+0x254>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	0052      	lsls	r2, r2, #1
 8006fd0:	e7d8      	b.n	8006f84 <_dtoa_r+0x25c>
 8006fd2:	bf00      	nop
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	636f4361 	.word	0x636f4361
 8006fdc:	3fd287a7 	.word	0x3fd287a7
 8006fe0:	8b60c8b3 	.word	0x8b60c8b3
 8006fe4:	3fc68a28 	.word	0x3fc68a28
 8006fe8:	509f79fb 	.word	0x509f79fb
 8006fec:	3fd34413 	.word	0x3fd34413
 8006ff0:	0800a33a 	.word	0x0800a33a
 8006ff4:	0800a351 	.word	0x0800a351
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	0800a305 	.word	0x0800a305
 8007000:	3ff80000 	.word	0x3ff80000
 8007004:	0800a448 	.word	0x0800a448
 8007008:	0800a3a9 	.word	0x0800a3a9
 800700c:	0800a336 	.word	0x0800a336
 8007010:	0800a304 	.word	0x0800a304
 8007014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007018:	6018      	str	r0, [r3, #0]
 800701a:	9b07      	ldr	r3, [sp, #28]
 800701c:	2b0e      	cmp	r3, #14
 800701e:	f200 80a4 	bhi.w	800716a <_dtoa_r+0x442>
 8007022:	2c00      	cmp	r4, #0
 8007024:	f000 80a1 	beq.w	800716a <_dtoa_r+0x442>
 8007028:	2f00      	cmp	r7, #0
 800702a:	dd33      	ble.n	8007094 <_dtoa_r+0x36c>
 800702c:	4bad      	ldr	r3, [pc, #692]	@ (80072e4 <_dtoa_r+0x5bc>)
 800702e:	f007 020f 	and.w	r2, r7, #15
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	ed93 7b00 	vldr	d7, [r3]
 800703a:	05f8      	lsls	r0, r7, #23
 800703c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007040:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007044:	d516      	bpl.n	8007074 <_dtoa_r+0x34c>
 8007046:	4ba8      	ldr	r3, [pc, #672]	@ (80072e8 <_dtoa_r+0x5c0>)
 8007048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800704c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007050:	f7f9 fc1c 	bl	800088c <__aeabi_ddiv>
 8007054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007058:	f004 040f 	and.w	r4, r4, #15
 800705c:	2603      	movs	r6, #3
 800705e:	4da2      	ldr	r5, [pc, #648]	@ (80072e8 <_dtoa_r+0x5c0>)
 8007060:	b954      	cbnz	r4, 8007078 <_dtoa_r+0x350>
 8007062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706a:	f7f9 fc0f 	bl	800088c <__aeabi_ddiv>
 800706e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007072:	e028      	b.n	80070c6 <_dtoa_r+0x39e>
 8007074:	2602      	movs	r6, #2
 8007076:	e7f2      	b.n	800705e <_dtoa_r+0x336>
 8007078:	07e1      	lsls	r1, r4, #31
 800707a:	d508      	bpl.n	800708e <_dtoa_r+0x366>
 800707c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007080:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007084:	f7f9 fad8 	bl	8000638 <__aeabi_dmul>
 8007088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800708c:	3601      	adds	r6, #1
 800708e:	1064      	asrs	r4, r4, #1
 8007090:	3508      	adds	r5, #8
 8007092:	e7e5      	b.n	8007060 <_dtoa_r+0x338>
 8007094:	f000 80d2 	beq.w	800723c <_dtoa_r+0x514>
 8007098:	427c      	negs	r4, r7
 800709a:	4b92      	ldr	r3, [pc, #584]	@ (80072e4 <_dtoa_r+0x5bc>)
 800709c:	4d92      	ldr	r5, [pc, #584]	@ (80072e8 <_dtoa_r+0x5c0>)
 800709e:	f004 020f 	and.w	r2, r4, #15
 80070a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ae:	f7f9 fac3 	bl	8000638 <__aeabi_dmul>
 80070b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b6:	1124      	asrs	r4, r4, #4
 80070b8:	2300      	movs	r3, #0
 80070ba:	2602      	movs	r6, #2
 80070bc:	2c00      	cmp	r4, #0
 80070be:	f040 80b2 	bne.w	8007226 <_dtoa_r+0x4fe>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1d3      	bne.n	800706e <_dtoa_r+0x346>
 80070c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80b7 	beq.w	8007240 <_dtoa_r+0x518>
 80070d2:	4b86      	ldr	r3, [pc, #536]	@ (80072ec <_dtoa_r+0x5c4>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f000 80ae 	beq.w	8007240 <_dtoa_r+0x518>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80aa 	beq.w	8007240 <_dtoa_r+0x518>
 80070ec:	9b00      	ldr	r3, [sp, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dd37      	ble.n	8007162 <_dtoa_r+0x43a>
 80070f2:	1e7b      	subs	r3, r7, #1
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	4620      	mov	r0, r4
 80070f8:	4b7d      	ldr	r3, [pc, #500]	@ (80072f0 <_dtoa_r+0x5c8>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 fa9b 	bl	8000638 <__aeabi_dmul>
 8007102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007106:	9c00      	ldr	r4, [sp, #0]
 8007108:	3601      	adds	r6, #1
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 fa2a 	bl	8000564 <__aeabi_i2d>
 8007110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007114:	f7f9 fa90 	bl	8000638 <__aeabi_dmul>
 8007118:	4b76      	ldr	r3, [pc, #472]	@ (80072f4 <_dtoa_r+0x5cc>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 f8d6 	bl	80002cc <__adddf3>
 8007120:	4605      	mov	r5, r0
 8007122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007126:	2c00      	cmp	r4, #0
 8007128:	f040 808d 	bne.w	8007246 <_dtoa_r+0x51e>
 800712c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007130:	4b71      	ldr	r3, [pc, #452]	@ (80072f8 <_dtoa_r+0x5d0>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 f8c8 	bl	80002c8 <__aeabi_dsub>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007140:	462a      	mov	r2, r5
 8007142:	4633      	mov	r3, r6
 8007144:	f7f9 fd08 	bl	8000b58 <__aeabi_dcmpgt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f040 828b 	bne.w	8007664 <_dtoa_r+0x93c>
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	462a      	mov	r2, r5
 8007154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007158:	f7f9 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 8128 	bne.w	80073b2 <_dtoa_r+0x68a>
 8007162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800716a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f2c0 815a 	blt.w	8007426 <_dtoa_r+0x6fe>
 8007172:	2f0e      	cmp	r7, #14
 8007174:	f300 8157 	bgt.w	8007426 <_dtoa_r+0x6fe>
 8007178:	4b5a      	ldr	r3, [pc, #360]	@ (80072e4 <_dtoa_r+0x5bc>)
 800717a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800717e:	ed93 7b00 	vldr	d7, [r3]
 8007182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	ed8d 7b00 	vstr	d7, [sp]
 800718a:	da03      	bge.n	8007194 <_dtoa_r+0x46c>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f340 8101 	ble.w	8007396 <_dtoa_r+0x66e>
 8007194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007198:	4656      	mov	r6, sl
 800719a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 fb73 	bl	800088c <__aeabi_ddiv>
 80071a6:	f7f9 fcf7 	bl	8000b98 <__aeabi_d2iz>
 80071aa:	4680      	mov	r8, r0
 80071ac:	f7f9 f9da 	bl	8000564 <__aeabi_i2d>
 80071b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b4:	f7f9 fa40 	bl	8000638 <__aeabi_dmul>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071c4:	f7f9 f880 	bl	80002c8 <__aeabi_dsub>
 80071c8:	f806 4b01 	strb.w	r4, [r6], #1
 80071cc:	9d07      	ldr	r5, [sp, #28]
 80071ce:	eba6 040a 	sub.w	r4, r6, sl
 80071d2:	42a5      	cmp	r5, r4
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	f040 8117 	bne.w	800740a <_dtoa_r+0x6e2>
 80071dc:	f7f9 f876 	bl	80002cc <__adddf3>
 80071e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	f7f9 fcb6 	bl	8000b58 <__aeabi_dcmpgt>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f040 80f9 	bne.w	80073e4 <_dtoa_r+0x6bc>
 80071f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f9 fc85 	bl	8000b08 <__aeabi_dcmpeq>
 80071fe:	b118      	cbz	r0, 8007208 <_dtoa_r+0x4e0>
 8007200:	f018 0f01 	tst.w	r8, #1
 8007204:	f040 80ee 	bne.w	80073e4 <_dtoa_r+0x6bc>
 8007208:	4649      	mov	r1, r9
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fc90 	bl	8007b30 <_Bfree>
 8007210:	2300      	movs	r3, #0
 8007212:	7033      	strb	r3, [r6, #0]
 8007214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007216:	3701      	adds	r7, #1
 8007218:	601f      	str	r7, [r3, #0]
 800721a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 831d 	beq.w	800785c <_dtoa_r+0xb34>
 8007222:	601e      	str	r6, [r3, #0]
 8007224:	e31a      	b.n	800785c <_dtoa_r+0xb34>
 8007226:	07e2      	lsls	r2, r4, #31
 8007228:	d505      	bpl.n	8007236 <_dtoa_r+0x50e>
 800722a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800722e:	f7f9 fa03 	bl	8000638 <__aeabi_dmul>
 8007232:	3601      	adds	r6, #1
 8007234:	2301      	movs	r3, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3508      	adds	r5, #8
 800723a:	e73f      	b.n	80070bc <_dtoa_r+0x394>
 800723c:	2602      	movs	r6, #2
 800723e:	e742      	b.n	80070c6 <_dtoa_r+0x39e>
 8007240:	9c07      	ldr	r4, [sp, #28]
 8007242:	9704      	str	r7, [sp, #16]
 8007244:	e761      	b.n	800710a <_dtoa_r+0x3e2>
 8007246:	4b27      	ldr	r3, [pc, #156]	@ (80072e4 <_dtoa_r+0x5bc>)
 8007248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800724a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800724e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007252:	4454      	add	r4, sl
 8007254:	2900      	cmp	r1, #0
 8007256:	d053      	beq.n	8007300 <_dtoa_r+0x5d8>
 8007258:	4928      	ldr	r1, [pc, #160]	@ (80072fc <_dtoa_r+0x5d4>)
 800725a:	2000      	movs	r0, #0
 800725c:	f7f9 fb16 	bl	800088c <__aeabi_ddiv>
 8007260:	4633      	mov	r3, r6
 8007262:	462a      	mov	r2, r5
 8007264:	f7f9 f830 	bl	80002c8 <__aeabi_dsub>
 8007268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800726c:	4656      	mov	r6, sl
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	f7f9 fc91 	bl	8000b98 <__aeabi_d2iz>
 8007276:	4605      	mov	r5, r0
 8007278:	f7f9 f974 	bl	8000564 <__aeabi_i2d>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007284:	f7f9 f820 	bl	80002c8 <__aeabi_dsub>
 8007288:	3530      	adds	r5, #48	@ 0x30
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007292:	f806 5b01 	strb.w	r5, [r6], #1
 8007296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800729a:	f7f9 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d171      	bne.n	8007386 <_dtoa_r+0x65e>
 80072a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072a6:	4911      	ldr	r1, [pc, #68]	@ (80072ec <_dtoa_r+0x5c4>)
 80072a8:	2000      	movs	r0, #0
 80072aa:	f7f9 f80d 	bl	80002c8 <__aeabi_dsub>
 80072ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072b2:	f7f9 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f040 8095 	bne.w	80073e6 <_dtoa_r+0x6be>
 80072bc:	42a6      	cmp	r6, r4
 80072be:	f43f af50 	beq.w	8007162 <_dtoa_r+0x43a>
 80072c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <_dtoa_r+0x5c8>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7f9 f9b5 	bl	8000638 <__aeabi_dmul>
 80072ce:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <_dtoa_r+0x5c8>)
 80072d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072d4:	2200      	movs	r2, #0
 80072d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072da:	f7f9 f9ad 	bl	8000638 <__aeabi_dmul>
 80072de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e2:	e7c4      	b.n	800726e <_dtoa_r+0x546>
 80072e4:	0800a448 	.word	0x0800a448
 80072e8:	0800a420 	.word	0x0800a420
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	40240000 	.word	0x40240000
 80072f4:	401c0000 	.word	0x401c0000
 80072f8:	40140000 	.word	0x40140000
 80072fc:	3fe00000 	.word	0x3fe00000
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	f7f9 f998 	bl	8000638 <__aeabi_dmul>
 8007308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800730c:	9415      	str	r4, [sp, #84]	@ 0x54
 800730e:	4656      	mov	r6, sl
 8007310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007314:	f7f9 fc40 	bl	8000b98 <__aeabi_d2iz>
 8007318:	4605      	mov	r5, r0
 800731a:	f7f9 f923 	bl	8000564 <__aeabi_i2d>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007326:	f7f8 ffcf 	bl	80002c8 <__aeabi_dsub>
 800732a:	3530      	adds	r5, #48	@ 0x30
 800732c:	f806 5b01 	strb.w	r5, [r6], #1
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	42a6      	cmp	r6, r4
 8007336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	d124      	bne.n	800738a <_dtoa_r+0x662>
 8007340:	4bac      	ldr	r3, [pc, #688]	@ (80075f4 <_dtoa_r+0x8cc>)
 8007342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007346:	f7f8 ffc1 	bl	80002cc <__adddf3>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007352:	f7f9 fc01 	bl	8000b58 <__aeabi_dcmpgt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d145      	bne.n	80073e6 <_dtoa_r+0x6be>
 800735a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800735e:	49a5      	ldr	r1, [pc, #660]	@ (80075f4 <_dtoa_r+0x8cc>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7f8 ffb1 	bl	80002c8 <__aeabi_dsub>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736e:	f7f9 fbd5 	bl	8000b1c <__aeabi_dcmplt>
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f aef5 	beq.w	8007162 <_dtoa_r+0x43a>
 8007378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800737a:	1e73      	subs	r3, r6, #1
 800737c:	9315      	str	r3, [sp, #84]	@ 0x54
 800737e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007382:	2b30      	cmp	r3, #48	@ 0x30
 8007384:	d0f8      	beq.n	8007378 <_dtoa_r+0x650>
 8007386:	9f04      	ldr	r7, [sp, #16]
 8007388:	e73e      	b.n	8007208 <_dtoa_r+0x4e0>
 800738a:	4b9b      	ldr	r3, [pc, #620]	@ (80075f8 <_dtoa_r+0x8d0>)
 800738c:	f7f9 f954 	bl	8000638 <__aeabi_dmul>
 8007390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007394:	e7bc      	b.n	8007310 <_dtoa_r+0x5e8>
 8007396:	d10c      	bne.n	80073b2 <_dtoa_r+0x68a>
 8007398:	4b98      	ldr	r3, [pc, #608]	@ (80075fc <_dtoa_r+0x8d4>)
 800739a:	2200      	movs	r2, #0
 800739c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a0:	f7f9 f94a 	bl	8000638 <__aeabi_dmul>
 80073a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073a8:	f7f9 fbcc 	bl	8000b44 <__aeabi_dcmpge>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f000 8157 	beq.w	8007660 <_dtoa_r+0x938>
 80073b2:	2400      	movs	r4, #0
 80073b4:	4625      	mov	r5, r4
 80073b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b8:	43db      	mvns	r3, r3
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	4656      	mov	r6, sl
 80073be:	2700      	movs	r7, #0
 80073c0:	4621      	mov	r1, r4
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 fbb4 	bl	8007b30 <_Bfree>
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	d0dc      	beq.n	8007386 <_dtoa_r+0x65e>
 80073cc:	b12f      	cbz	r7, 80073da <_dtoa_r+0x6b2>
 80073ce:	42af      	cmp	r7, r5
 80073d0:	d003      	beq.n	80073da <_dtoa_r+0x6b2>
 80073d2:	4639      	mov	r1, r7
 80073d4:	4658      	mov	r0, fp
 80073d6:	f000 fbab 	bl	8007b30 <_Bfree>
 80073da:	4629      	mov	r1, r5
 80073dc:	4658      	mov	r0, fp
 80073de:	f000 fba7 	bl	8007b30 <_Bfree>
 80073e2:	e7d0      	b.n	8007386 <_dtoa_r+0x65e>
 80073e4:	9704      	str	r7, [sp, #16]
 80073e6:	4633      	mov	r3, r6
 80073e8:	461e      	mov	r6, r3
 80073ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ee:	2a39      	cmp	r2, #57	@ 0x39
 80073f0:	d107      	bne.n	8007402 <_dtoa_r+0x6da>
 80073f2:	459a      	cmp	sl, r3
 80073f4:	d1f8      	bne.n	80073e8 <_dtoa_r+0x6c0>
 80073f6:	9a04      	ldr	r2, [sp, #16]
 80073f8:	3201      	adds	r2, #1
 80073fa:	9204      	str	r2, [sp, #16]
 80073fc:	2230      	movs	r2, #48	@ 0x30
 80073fe:	f88a 2000 	strb.w	r2, [sl]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	3201      	adds	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e7bd      	b.n	8007386 <_dtoa_r+0x65e>
 800740a:	4b7b      	ldr	r3, [pc, #492]	@ (80075f8 <_dtoa_r+0x8d0>)
 800740c:	2200      	movs	r2, #0
 800740e:	f7f9 f913 	bl	8000638 <__aeabi_dmul>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	f7f9 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aebb 	beq.w	800719a <_dtoa_r+0x472>
 8007424:	e6f0      	b.n	8007208 <_dtoa_r+0x4e0>
 8007426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007428:	2a00      	cmp	r2, #0
 800742a:	f000 80db 	beq.w	80075e4 <_dtoa_r+0x8bc>
 800742e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007430:	2a01      	cmp	r2, #1
 8007432:	f300 80bf 	bgt.w	80075b4 <_dtoa_r+0x88c>
 8007436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007438:	2a00      	cmp	r2, #0
 800743a:	f000 80b7 	beq.w	80075ac <_dtoa_r+0x884>
 800743e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007444:	4646      	mov	r6, r8
 8007446:	9a08      	ldr	r2, [sp, #32]
 8007448:	2101      	movs	r1, #1
 800744a:	441a      	add	r2, r3
 800744c:	4658      	mov	r0, fp
 800744e:	4498      	add	r8, r3
 8007450:	9208      	str	r2, [sp, #32]
 8007452:	f000 fc6b 	bl	8007d2c <__i2b>
 8007456:	4605      	mov	r5, r0
 8007458:	b15e      	cbz	r6, 8007472 <_dtoa_r+0x74a>
 800745a:	9b08      	ldr	r3, [sp, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd08      	ble.n	8007472 <_dtoa_r+0x74a>
 8007460:	42b3      	cmp	r3, r6
 8007462:	9a08      	ldr	r2, [sp, #32]
 8007464:	bfa8      	it	ge
 8007466:	4633      	movge	r3, r6
 8007468:	eba8 0803 	sub.w	r8, r8, r3
 800746c:	1af6      	subs	r6, r6, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007474:	b1f3      	cbz	r3, 80074b4 <_dtoa_r+0x78c>
 8007476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80b7 	beq.w	80075ec <_dtoa_r+0x8c4>
 800747e:	b18c      	cbz	r4, 80074a4 <_dtoa_r+0x77c>
 8007480:	4629      	mov	r1, r5
 8007482:	4622      	mov	r2, r4
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fd11 	bl	8007eac <__pow5mult>
 800748a:	464a      	mov	r2, r9
 800748c:	4601      	mov	r1, r0
 800748e:	4605      	mov	r5, r0
 8007490:	4658      	mov	r0, fp
 8007492:	f000 fc61 	bl	8007d58 <__multiply>
 8007496:	4649      	mov	r1, r9
 8007498:	9004      	str	r0, [sp, #16]
 800749a:	4658      	mov	r0, fp
 800749c:	f000 fb48 	bl	8007b30 <_Bfree>
 80074a0:	9b04      	ldr	r3, [sp, #16]
 80074a2:	4699      	mov	r9, r3
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	1b1a      	subs	r2, r3, r4
 80074a8:	d004      	beq.n	80074b4 <_dtoa_r+0x78c>
 80074aa:	4649      	mov	r1, r9
 80074ac:	4658      	mov	r0, fp
 80074ae:	f000 fcfd 	bl	8007eac <__pow5mult>
 80074b2:	4681      	mov	r9, r0
 80074b4:	2101      	movs	r1, #1
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 fc38 	bl	8007d2c <__i2b>
 80074bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074be:	4604      	mov	r4, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 81cf 	beq.w	8007864 <_dtoa_r+0xb3c>
 80074c6:	461a      	mov	r2, r3
 80074c8:	4601      	mov	r1, r0
 80074ca:	4658      	mov	r0, fp
 80074cc:	f000 fcee 	bl	8007eac <__pow5mult>
 80074d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	4604      	mov	r4, r0
 80074d6:	f300 8095 	bgt.w	8007604 <_dtoa_r+0x8dc>
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8087 	bne.w	80075f0 <_dtoa_r+0x8c8>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 8089 	bne.w	8007600 <_dtoa_r+0x8d8>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	0d1b      	lsrs	r3, r3, #20
 80074f6:	051b      	lsls	r3, r3, #20
 80074f8:	b12b      	cbz	r3, 8007506 <_dtoa_r+0x7de>
 80074fa:	9b08      	ldr	r3, [sp, #32]
 80074fc:	3301      	adds	r3, #1
 80074fe:	9308      	str	r3, [sp, #32]
 8007500:	f108 0801 	add.w	r8, r8, #1
 8007504:	2301      	movs	r3, #1
 8007506:	930a      	str	r3, [sp, #40]	@ 0x28
 8007508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 81b0 	beq.w	8007870 <_dtoa_r+0xb48>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007516:	6918      	ldr	r0, [r3, #16]
 8007518:	f000 fbbc 	bl	8007c94 <__hi0bits>
 800751c:	f1c0 0020 	rsb	r0, r0, #32
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	4418      	add	r0, r3
 8007524:	f010 001f 	ands.w	r0, r0, #31
 8007528:	d077      	beq.n	800761a <_dtoa_r+0x8f2>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	2b04      	cmp	r3, #4
 8007530:	dd6b      	ble.n	800760a <_dtoa_r+0x8e2>
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	f1c0 001c 	rsb	r0, r0, #28
 8007538:	4403      	add	r3, r0
 800753a:	4480      	add	r8, r0
 800753c:	4406      	add	r6, r0
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	f1b8 0f00 	cmp.w	r8, #0
 8007544:	dd05      	ble.n	8007552 <_dtoa_r+0x82a>
 8007546:	4649      	mov	r1, r9
 8007548:	4642      	mov	r2, r8
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fd08 	bl	8007f60 <__lshift>
 8007550:	4681      	mov	r9, r0
 8007552:	9b08      	ldr	r3, [sp, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dd05      	ble.n	8007564 <_dtoa_r+0x83c>
 8007558:	4621      	mov	r1, r4
 800755a:	461a      	mov	r2, r3
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fcff 	bl	8007f60 <__lshift>
 8007562:	4604      	mov	r4, r0
 8007564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007566:	2b00      	cmp	r3, #0
 8007568:	d059      	beq.n	800761e <_dtoa_r+0x8f6>
 800756a:	4621      	mov	r1, r4
 800756c:	4648      	mov	r0, r9
 800756e:	f000 fd63 	bl	8008038 <__mcmp>
 8007572:	2800      	cmp	r0, #0
 8007574:	da53      	bge.n	800761e <_dtoa_r+0x8f6>
 8007576:	1e7b      	subs	r3, r7, #1
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	4649      	mov	r1, r9
 800757c:	2300      	movs	r3, #0
 800757e:	220a      	movs	r2, #10
 8007580:	4658      	mov	r0, fp
 8007582:	f000 faf7 	bl	8007b74 <__multadd>
 8007586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007588:	4681      	mov	r9, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8172 	beq.w	8007874 <_dtoa_r+0xb4c>
 8007590:	2300      	movs	r3, #0
 8007592:	4629      	mov	r1, r5
 8007594:	220a      	movs	r2, #10
 8007596:	4658      	mov	r0, fp
 8007598:	f000 faec 	bl	8007b74 <__multadd>
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	4605      	mov	r5, r0
 80075a2:	dc67      	bgt.n	8007674 <_dtoa_r+0x94c>
 80075a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dc41      	bgt.n	800762e <_dtoa_r+0x906>
 80075aa:	e063      	b.n	8007674 <_dtoa_r+0x94c>
 80075ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075b2:	e746      	b.n	8007442 <_dtoa_r+0x71a>
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	1e5c      	subs	r4, r3, #1
 80075b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	bfbf      	itttt	lt
 80075be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80075c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80075c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80075c4:	1ae3      	sublt	r3, r4, r3
 80075c6:	bfb4      	ite	lt
 80075c8:	18d2      	addlt	r2, r2, r3
 80075ca:	1b1c      	subge	r4, r3, r4
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	bfbc      	itt	lt
 80075d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075d2:	2400      	movlt	r4, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bfb5      	itete	lt
 80075d8:	eba8 0603 	sublt.w	r6, r8, r3
 80075dc:	9b07      	ldrge	r3, [sp, #28]
 80075de:	2300      	movlt	r3, #0
 80075e0:	4646      	movge	r6, r8
 80075e2:	e730      	b.n	8007446 <_dtoa_r+0x71e>
 80075e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075e8:	4646      	mov	r6, r8
 80075ea:	e735      	b.n	8007458 <_dtoa_r+0x730>
 80075ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ee:	e75c      	b.n	80074aa <_dtoa_r+0x782>
 80075f0:	2300      	movs	r3, #0
 80075f2:	e788      	b.n	8007506 <_dtoa_r+0x7de>
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	40140000 	.word	0x40140000
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	e780      	b.n	8007506 <_dtoa_r+0x7de>
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	@ 0x28
 8007608:	e782      	b.n	8007510 <_dtoa_r+0x7e8>
 800760a:	d099      	beq.n	8007540 <_dtoa_r+0x818>
 800760c:	9a08      	ldr	r2, [sp, #32]
 800760e:	331c      	adds	r3, #28
 8007610:	441a      	add	r2, r3
 8007612:	4498      	add	r8, r3
 8007614:	441e      	add	r6, r3
 8007616:	9208      	str	r2, [sp, #32]
 8007618:	e792      	b.n	8007540 <_dtoa_r+0x818>
 800761a:	4603      	mov	r3, r0
 800761c:	e7f6      	b.n	800760c <_dtoa_r+0x8e4>
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	9704      	str	r7, [sp, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	dc20      	bgt.n	8007668 <_dtoa_r+0x940>
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762a:	2b02      	cmp	r3, #2
 800762c:	dd1e      	ble.n	800766c <_dtoa_r+0x944>
 800762e:	9b00      	ldr	r3, [sp, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f aec0 	bne.w	80073b6 <_dtoa_r+0x68e>
 8007636:	4621      	mov	r1, r4
 8007638:	2205      	movs	r2, #5
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fa9a 	bl	8007b74 <__multadd>
 8007640:	4601      	mov	r1, r0
 8007642:	4604      	mov	r4, r0
 8007644:	4648      	mov	r0, r9
 8007646:	f000 fcf7 	bl	8008038 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	f77f aeb3 	ble.w	80073b6 <_dtoa_r+0x68e>
 8007650:	4656      	mov	r6, sl
 8007652:	2331      	movs	r3, #49	@ 0x31
 8007654:	f806 3b01 	strb.w	r3, [r6], #1
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	3301      	adds	r3, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	e6ae      	b.n	80073be <_dtoa_r+0x696>
 8007660:	9c07      	ldr	r4, [sp, #28]
 8007662:	9704      	str	r7, [sp, #16]
 8007664:	4625      	mov	r5, r4
 8007666:	e7f3      	b.n	8007650 <_dtoa_r+0x928>
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8104 	beq.w	800787c <_dtoa_r+0xb54>
 8007674:	2e00      	cmp	r6, #0
 8007676:	dd05      	ble.n	8007684 <_dtoa_r+0x95c>
 8007678:	4629      	mov	r1, r5
 800767a:	4632      	mov	r2, r6
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fc6f 	bl	8007f60 <__lshift>
 8007682:	4605      	mov	r5, r0
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d05a      	beq.n	8007740 <_dtoa_r+0xa18>
 800768a:	6869      	ldr	r1, [r5, #4]
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fa0f 	bl	8007ab0 <_Balloc>
 8007692:	4606      	mov	r6, r0
 8007694:	b928      	cbnz	r0, 80076a2 <_dtoa_r+0x97a>
 8007696:	4b84      	ldr	r3, [pc, #528]	@ (80078a8 <_dtoa_r+0xb80>)
 8007698:	4602      	mov	r2, r0
 800769a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800769e:	f7ff bb5a 	b.w	8006d56 <_dtoa_r+0x2e>
 80076a2:	692a      	ldr	r2, [r5, #16]
 80076a4:	3202      	adds	r2, #2
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	f105 010c 	add.w	r1, r5, #12
 80076ac:	300c      	adds	r0, #12
 80076ae:	f001 ff75 	bl	800959c <memcpy>
 80076b2:	2201      	movs	r2, #1
 80076b4:	4631      	mov	r1, r6
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fc52 	bl	8007f60 <__lshift>
 80076bc:	f10a 0301 	add.w	r3, sl, #1
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	9b00      	ldr	r3, [sp, #0]
 80076c4:	4453      	add	r3, sl
 80076c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	462f      	mov	r7, r5
 80076d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d2:	4605      	mov	r5, r0
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	4621      	mov	r1, r4
 80076d8:	3b01      	subs	r3, #1
 80076da:	4648      	mov	r0, r9
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	f7ff fa9b 	bl	8006c18 <quorem>
 80076e2:	4639      	mov	r1, r7
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076ea:	4648      	mov	r0, r9
 80076ec:	f000 fca4 	bl	8008038 <__mcmp>
 80076f0:	462a      	mov	r2, r5
 80076f2:	9008      	str	r0, [sp, #32]
 80076f4:	4621      	mov	r1, r4
 80076f6:	4658      	mov	r0, fp
 80076f8:	f000 fcba 	bl	8008070 <__mdiff>
 80076fc:	68c2      	ldr	r2, [r0, #12]
 80076fe:	4606      	mov	r6, r0
 8007700:	bb02      	cbnz	r2, 8007744 <_dtoa_r+0xa1c>
 8007702:	4601      	mov	r1, r0
 8007704:	4648      	mov	r0, r9
 8007706:	f000 fc97 	bl	8008038 <__mcmp>
 800770a:	4602      	mov	r2, r0
 800770c:	4631      	mov	r1, r6
 800770e:	4658      	mov	r0, fp
 8007710:	920e      	str	r2, [sp, #56]	@ 0x38
 8007712:	f000 fa0d 	bl	8007b30 <_Bfree>
 8007716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800771a:	9e07      	ldr	r6, [sp, #28]
 800771c:	ea43 0102 	orr.w	r1, r3, r2
 8007720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007722:	4319      	orrs	r1, r3
 8007724:	d110      	bne.n	8007748 <_dtoa_r+0xa20>
 8007726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800772a:	d029      	beq.n	8007780 <_dtoa_r+0xa58>
 800772c:	9b08      	ldr	r3, [sp, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd02      	ble.n	8007738 <_dtoa_r+0xa10>
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007738:	9b00      	ldr	r3, [sp, #0]
 800773a:	f883 8000 	strb.w	r8, [r3]
 800773e:	e63f      	b.n	80073c0 <_dtoa_r+0x698>
 8007740:	4628      	mov	r0, r5
 8007742:	e7bb      	b.n	80076bc <_dtoa_r+0x994>
 8007744:	2201      	movs	r2, #1
 8007746:	e7e1      	b.n	800770c <_dtoa_r+0x9e4>
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	db04      	blt.n	8007758 <_dtoa_r+0xa30>
 800774e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007750:	430b      	orrs	r3, r1
 8007752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007754:	430b      	orrs	r3, r1
 8007756:	d120      	bne.n	800779a <_dtoa_r+0xa72>
 8007758:	2a00      	cmp	r2, #0
 800775a:	dded      	ble.n	8007738 <_dtoa_r+0xa10>
 800775c:	4649      	mov	r1, r9
 800775e:	2201      	movs	r2, #1
 8007760:	4658      	mov	r0, fp
 8007762:	f000 fbfd 	bl	8007f60 <__lshift>
 8007766:	4621      	mov	r1, r4
 8007768:	4681      	mov	r9, r0
 800776a:	f000 fc65 	bl	8008038 <__mcmp>
 800776e:	2800      	cmp	r0, #0
 8007770:	dc03      	bgt.n	800777a <_dtoa_r+0xa52>
 8007772:	d1e1      	bne.n	8007738 <_dtoa_r+0xa10>
 8007774:	f018 0f01 	tst.w	r8, #1
 8007778:	d0de      	beq.n	8007738 <_dtoa_r+0xa10>
 800777a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800777e:	d1d8      	bne.n	8007732 <_dtoa_r+0xa0a>
 8007780:	9a00      	ldr	r2, [sp, #0]
 8007782:	2339      	movs	r3, #57	@ 0x39
 8007784:	7013      	strb	r3, [r2, #0]
 8007786:	4633      	mov	r3, r6
 8007788:	461e      	mov	r6, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007790:	2a39      	cmp	r2, #57	@ 0x39
 8007792:	d052      	beq.n	800783a <_dtoa_r+0xb12>
 8007794:	3201      	adds	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e612      	b.n	80073c0 <_dtoa_r+0x698>
 800779a:	2a00      	cmp	r2, #0
 800779c:	dd07      	ble.n	80077ae <_dtoa_r+0xa86>
 800779e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077a2:	d0ed      	beq.n	8007780 <_dtoa_r+0xa58>
 80077a4:	9a00      	ldr	r2, [sp, #0]
 80077a6:	f108 0301 	add.w	r3, r8, #1
 80077aa:	7013      	strb	r3, [r2, #0]
 80077ac:	e608      	b.n	80073c0 <_dtoa_r+0x698>
 80077ae:	9b07      	ldr	r3, [sp, #28]
 80077b0:	9a07      	ldr	r2, [sp, #28]
 80077b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80077b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d028      	beq.n	800780e <_dtoa_r+0xae6>
 80077bc:	4649      	mov	r1, r9
 80077be:	2300      	movs	r3, #0
 80077c0:	220a      	movs	r2, #10
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 f9d6 	bl	8007b74 <__multadd>
 80077c8:	42af      	cmp	r7, r5
 80077ca:	4681      	mov	r9, r0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	f04f 020a 	mov.w	r2, #10
 80077d4:	4639      	mov	r1, r7
 80077d6:	4658      	mov	r0, fp
 80077d8:	d107      	bne.n	80077ea <_dtoa_r+0xac2>
 80077da:	f000 f9cb 	bl	8007b74 <__multadd>
 80077de:	4607      	mov	r7, r0
 80077e0:	4605      	mov	r5, r0
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	e774      	b.n	80076d4 <_dtoa_r+0x9ac>
 80077ea:	f000 f9c3 	bl	8007b74 <__multadd>
 80077ee:	4629      	mov	r1, r5
 80077f0:	4607      	mov	r7, r0
 80077f2:	2300      	movs	r3, #0
 80077f4:	220a      	movs	r2, #10
 80077f6:	4658      	mov	r0, fp
 80077f8:	f000 f9bc 	bl	8007b74 <__multadd>
 80077fc:	4605      	mov	r5, r0
 80077fe:	e7f0      	b.n	80077e2 <_dtoa_r+0xaba>
 8007800:	9b00      	ldr	r3, [sp, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfcc      	ite	gt
 8007806:	461e      	movgt	r6, r3
 8007808:	2601      	movle	r6, #1
 800780a:	4456      	add	r6, sl
 800780c:	2700      	movs	r7, #0
 800780e:	4649      	mov	r1, r9
 8007810:	2201      	movs	r2, #1
 8007812:	4658      	mov	r0, fp
 8007814:	f000 fba4 	bl	8007f60 <__lshift>
 8007818:	4621      	mov	r1, r4
 800781a:	4681      	mov	r9, r0
 800781c:	f000 fc0c 	bl	8008038 <__mcmp>
 8007820:	2800      	cmp	r0, #0
 8007822:	dcb0      	bgt.n	8007786 <_dtoa_r+0xa5e>
 8007824:	d102      	bne.n	800782c <_dtoa_r+0xb04>
 8007826:	f018 0f01 	tst.w	r8, #1
 800782a:	d1ac      	bne.n	8007786 <_dtoa_r+0xa5e>
 800782c:	4633      	mov	r3, r6
 800782e:	461e      	mov	r6, r3
 8007830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007834:	2a30      	cmp	r2, #48	@ 0x30
 8007836:	d0fa      	beq.n	800782e <_dtoa_r+0xb06>
 8007838:	e5c2      	b.n	80073c0 <_dtoa_r+0x698>
 800783a:	459a      	cmp	sl, r3
 800783c:	d1a4      	bne.n	8007788 <_dtoa_r+0xa60>
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	3301      	adds	r3, #1
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	2331      	movs	r3, #49	@ 0x31
 8007846:	f88a 3000 	strb.w	r3, [sl]
 800784a:	e5b9      	b.n	80073c0 <_dtoa_r+0x698>
 800784c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800784e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80078ac <_dtoa_r+0xb84>
 8007852:	b11b      	cbz	r3, 800785c <_dtoa_r+0xb34>
 8007854:	f10a 0308 	add.w	r3, sl, #8
 8007858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4650      	mov	r0, sl
 800785e:	b019      	add	sp, #100	@ 0x64
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	2b01      	cmp	r3, #1
 8007868:	f77f ae37 	ble.w	80074da <_dtoa_r+0x7b2>
 800786c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007870:	2001      	movs	r0, #1
 8007872:	e655      	b.n	8007520 <_dtoa_r+0x7f8>
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f77f aed6 	ble.w	8007628 <_dtoa_r+0x900>
 800787c:	4656      	mov	r6, sl
 800787e:	4621      	mov	r1, r4
 8007880:	4648      	mov	r0, r9
 8007882:	f7ff f9c9 	bl	8006c18 <quorem>
 8007886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800788a:	f806 8b01 	strb.w	r8, [r6], #1
 800788e:	9b00      	ldr	r3, [sp, #0]
 8007890:	eba6 020a 	sub.w	r2, r6, sl
 8007894:	4293      	cmp	r3, r2
 8007896:	ddb3      	ble.n	8007800 <_dtoa_r+0xad8>
 8007898:	4649      	mov	r1, r9
 800789a:	2300      	movs	r3, #0
 800789c:	220a      	movs	r2, #10
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 f968 	bl	8007b74 <__multadd>
 80078a4:	4681      	mov	r9, r0
 80078a6:	e7ea      	b.n	800787e <_dtoa_r+0xb56>
 80078a8:	0800a3a9 	.word	0x0800a3a9
 80078ac:	0800a32d 	.word	0x0800a32d

080078b0 <_free_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4605      	mov	r5, r0
 80078b4:	2900      	cmp	r1, #0
 80078b6:	d041      	beq.n	800793c <_free_r+0x8c>
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f0c      	subs	r4, r1, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	18e4      	addlt	r4, r4, r3
 80078c4:	f000 f8e8 	bl	8007a98 <__malloc_lock>
 80078c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007940 <_free_r+0x90>)
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	b933      	cbnz	r3, 80078dc <_free_r+0x2c>
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	6014      	str	r4, [r2, #0]
 80078d2:	4628      	mov	r0, r5
 80078d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d8:	f000 b8e4 	b.w	8007aa4 <__malloc_unlock>
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d908      	bls.n	80078f2 <_free_r+0x42>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	1821      	adds	r1, r4, r0
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf01      	itttt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	e7ed      	b.n	80078ce <_free_r+0x1e>
 80078f2:	461a      	mov	r2, r3
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	b10b      	cbz	r3, 80078fc <_free_r+0x4c>
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	d9fa      	bls.n	80078f2 <_free_r+0x42>
 80078fc:	6811      	ldr	r1, [r2, #0]
 80078fe:	1850      	adds	r0, r2, r1
 8007900:	42a0      	cmp	r0, r4
 8007902:	d10b      	bne.n	800791c <_free_r+0x6c>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	4401      	add	r1, r0
 8007908:	1850      	adds	r0, r2, r1
 800790a:	4283      	cmp	r3, r0
 800790c:	6011      	str	r1, [r2, #0]
 800790e:	d1e0      	bne.n	80078d2 <_free_r+0x22>
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	6053      	str	r3, [r2, #4]
 8007916:	4408      	add	r0, r1
 8007918:	6010      	str	r0, [r2, #0]
 800791a:	e7da      	b.n	80078d2 <_free_r+0x22>
 800791c:	d902      	bls.n	8007924 <_free_r+0x74>
 800791e:	230c      	movs	r3, #12
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	e7d6      	b.n	80078d2 <_free_r+0x22>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	1821      	adds	r1, r4, r0
 8007928:	428b      	cmp	r3, r1
 800792a:	bf04      	itt	eq
 800792c:	6819      	ldreq	r1, [r3, #0]
 800792e:	685b      	ldreq	r3, [r3, #4]
 8007930:	6063      	str	r3, [r4, #4]
 8007932:	bf04      	itt	eq
 8007934:	1809      	addeq	r1, r1, r0
 8007936:	6021      	streq	r1, [r4, #0]
 8007938:	6054      	str	r4, [r2, #4]
 800793a:	e7ca      	b.n	80078d2 <_free_r+0x22>
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000574 	.word	0x20000574

08007944 <malloc>:
 8007944:	4b02      	ldr	r3, [pc, #8]	@ (8007950 <malloc+0xc>)
 8007946:	4601      	mov	r1, r0
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f000 b825 	b.w	8007998 <_malloc_r>
 800794e:	bf00      	nop
 8007950:	200000b8 	.word	0x200000b8

08007954 <sbrk_aligned>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4e0f      	ldr	r6, [pc, #60]	@ (8007994 <sbrk_aligned+0x40>)
 8007958:	460c      	mov	r4, r1
 800795a:	6831      	ldr	r1, [r6, #0]
 800795c:	4605      	mov	r5, r0
 800795e:	b911      	cbnz	r1, 8007966 <sbrk_aligned+0x12>
 8007960:	f001 fe0c 	bl	800957c <_sbrk_r>
 8007964:	6030      	str	r0, [r6, #0]
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f001 fe07 	bl	800957c <_sbrk_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d103      	bne.n	800797a <sbrk_aligned+0x26>
 8007972:	f04f 34ff 	mov.w	r4, #4294967295
 8007976:	4620      	mov	r0, r4
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	1cc4      	adds	r4, r0, #3
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	42a0      	cmp	r0, r4
 8007982:	d0f8      	beq.n	8007976 <sbrk_aligned+0x22>
 8007984:	1a21      	subs	r1, r4, r0
 8007986:	4628      	mov	r0, r5
 8007988:	f001 fdf8 	bl	800957c <_sbrk_r>
 800798c:	3001      	adds	r0, #1
 800798e:	d1f2      	bne.n	8007976 <sbrk_aligned+0x22>
 8007990:	e7ef      	b.n	8007972 <sbrk_aligned+0x1e>
 8007992:	bf00      	nop
 8007994:	20000570 	.word	0x20000570

08007998 <_malloc_r>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	1ccd      	adds	r5, r1, #3
 800799e:	f025 0503 	bic.w	r5, r5, #3
 80079a2:	3508      	adds	r5, #8
 80079a4:	2d0c      	cmp	r5, #12
 80079a6:	bf38      	it	cc
 80079a8:	250c      	movcc	r5, #12
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	4606      	mov	r6, r0
 80079ae:	db01      	blt.n	80079b4 <_malloc_r+0x1c>
 80079b0:	42a9      	cmp	r1, r5
 80079b2:	d904      	bls.n	80079be <_malloc_r+0x26>
 80079b4:	230c      	movs	r3, #12
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	2000      	movs	r0, #0
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a94 <_malloc_r+0xfc>
 80079c2:	f000 f869 	bl	8007a98 <__malloc_lock>
 80079c6:	f8d8 3000 	ldr.w	r3, [r8]
 80079ca:	461c      	mov	r4, r3
 80079cc:	bb44      	cbnz	r4, 8007a20 <_malloc_r+0x88>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff ffbf 	bl	8007954 <sbrk_aligned>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	4604      	mov	r4, r0
 80079da:	d158      	bne.n	8007a8e <_malloc_r+0xf6>
 80079dc:	f8d8 4000 	ldr.w	r4, [r8]
 80079e0:	4627      	mov	r7, r4
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d143      	bne.n	8007a6e <_malloc_r+0xd6>
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	d04b      	beq.n	8007a82 <_malloc_r+0xea>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	4639      	mov	r1, r7
 80079ee:	4630      	mov	r0, r6
 80079f0:	eb04 0903 	add.w	r9, r4, r3
 80079f4:	f001 fdc2 	bl	800957c <_sbrk_r>
 80079f8:	4581      	cmp	r9, r0
 80079fa:	d142      	bne.n	8007a82 <_malloc_r+0xea>
 80079fc:	6821      	ldr	r1, [r4, #0]
 80079fe:	1a6d      	subs	r5, r5, r1
 8007a00:	4629      	mov	r1, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ffa6 	bl	8007954 <sbrk_aligned>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d03a      	beq.n	8007a82 <_malloc_r+0xea>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	442b      	add	r3, r5
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	f8d8 3000 	ldr.w	r3, [r8]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	bb62      	cbnz	r2, 8007a74 <_malloc_r+0xdc>
 8007a1a:	f8c8 7000 	str.w	r7, [r8]
 8007a1e:	e00f      	b.n	8007a40 <_malloc_r+0xa8>
 8007a20:	6822      	ldr	r2, [r4, #0]
 8007a22:	1b52      	subs	r2, r2, r5
 8007a24:	d420      	bmi.n	8007a68 <_malloc_r+0xd0>
 8007a26:	2a0b      	cmp	r2, #11
 8007a28:	d917      	bls.n	8007a5a <_malloc_r+0xc2>
 8007a2a:	1961      	adds	r1, r4, r5
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	6025      	str	r5, [r4, #0]
 8007a30:	bf18      	it	ne
 8007a32:	6059      	strne	r1, [r3, #4]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	bf08      	it	eq
 8007a38:	f8c8 1000 	streq.w	r1, [r8]
 8007a3c:	5162      	str	r2, [r4, r5]
 8007a3e:	604b      	str	r3, [r1, #4]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f82f 	bl	8007aa4 <__malloc_unlock>
 8007a46:	f104 000b 	add.w	r0, r4, #11
 8007a4a:	1d23      	adds	r3, r4, #4
 8007a4c:	f020 0007 	bic.w	r0, r0, #7
 8007a50:	1ac2      	subs	r2, r0, r3
 8007a52:	bf1c      	itt	ne
 8007a54:	1a1b      	subne	r3, r3, r0
 8007a56:	50a3      	strne	r3, [r4, r2]
 8007a58:	e7af      	b.n	80079ba <_malloc_r+0x22>
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	bf0c      	ite	eq
 8007a60:	f8c8 2000 	streq.w	r2, [r8]
 8007a64:	605a      	strne	r2, [r3, #4]
 8007a66:	e7eb      	b.n	8007a40 <_malloc_r+0xa8>
 8007a68:	4623      	mov	r3, r4
 8007a6a:	6864      	ldr	r4, [r4, #4]
 8007a6c:	e7ae      	b.n	80079cc <_malloc_r+0x34>
 8007a6e:	463c      	mov	r4, r7
 8007a70:	687f      	ldr	r7, [r7, #4]
 8007a72:	e7b6      	b.n	80079e2 <_malloc_r+0x4a>
 8007a74:	461a      	mov	r2, r3
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d1fb      	bne.n	8007a74 <_malloc_r+0xdc>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6053      	str	r3, [r2, #4]
 8007a80:	e7de      	b.n	8007a40 <_malloc_r+0xa8>
 8007a82:	230c      	movs	r3, #12
 8007a84:	6033      	str	r3, [r6, #0]
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 f80c 	bl	8007aa4 <__malloc_unlock>
 8007a8c:	e794      	b.n	80079b8 <_malloc_r+0x20>
 8007a8e:	6005      	str	r5, [r0, #0]
 8007a90:	e7d6      	b.n	8007a40 <_malloc_r+0xa8>
 8007a92:	bf00      	nop
 8007a94:	20000574 	.word	0x20000574

08007a98 <__malloc_lock>:
 8007a98:	4801      	ldr	r0, [pc, #4]	@ (8007aa0 <__malloc_lock+0x8>)
 8007a9a:	f7ff b8b4 	b.w	8006c06 <__retarget_lock_acquire_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	2000056c 	.word	0x2000056c

08007aa4 <__malloc_unlock>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	@ (8007aac <__malloc_unlock+0x8>)
 8007aa6:	f7ff b8af 	b.w	8006c08 <__retarget_lock_release_recursive>
 8007aaa:	bf00      	nop
 8007aac:	2000056c 	.word	0x2000056c

08007ab0 <_Balloc>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	69c6      	ldr	r6, [r0, #28]
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	b976      	cbnz	r6, 8007ad8 <_Balloc+0x28>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff ff42 	bl	8007944 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	61e0      	str	r0, [r4, #28]
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_Balloc+0x20>
 8007ac6:	4b18      	ldr	r3, [pc, #96]	@ (8007b28 <_Balloc+0x78>)
 8007ac8:	4818      	ldr	r0, [pc, #96]	@ (8007b2c <_Balloc+0x7c>)
 8007aca:	216b      	movs	r1, #107	@ 0x6b
 8007acc:	f001 fd7c 	bl	80095c8 <__assert_func>
 8007ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad4:	6006      	str	r6, [r0, #0]
 8007ad6:	60c6      	str	r6, [r0, #12]
 8007ad8:	69e6      	ldr	r6, [r4, #28]
 8007ada:	68f3      	ldr	r3, [r6, #12]
 8007adc:	b183      	cbz	r3, 8007b00 <_Balloc+0x50>
 8007ade:	69e3      	ldr	r3, [r4, #28]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae6:	b9b8      	cbnz	r0, 8007b18 <_Balloc+0x68>
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f605 	lsl.w	r6, r1, r5
 8007aee:	1d72      	adds	r2, r6, #5
 8007af0:	0092      	lsls	r2, r2, #2
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fd86 	bl	8009604 <_calloc_r>
 8007af8:	b160      	cbz	r0, 8007b14 <_Balloc+0x64>
 8007afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007afe:	e00e      	b.n	8007b1e <_Balloc+0x6e>
 8007b00:	2221      	movs	r2, #33	@ 0x21
 8007b02:	2104      	movs	r1, #4
 8007b04:	4620      	mov	r0, r4
 8007b06:	f001 fd7d 	bl	8009604 <_calloc_r>
 8007b0a:	69e3      	ldr	r3, [r4, #28]
 8007b0c:	60f0      	str	r0, [r6, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <_Balloc+0x2e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b24:	e7f7      	b.n	8007b16 <_Balloc+0x66>
 8007b26:	bf00      	nop
 8007b28:	0800a33a 	.word	0x0800a33a
 8007b2c:	0800a3ba 	.word	0x0800a3ba

08007b30 <_Bfree>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	69c6      	ldr	r6, [r0, #28]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Bfree+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ff02 	bl	8007944 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	61e8      	str	r0, [r5, #28]
 8007b44:	b920      	cbnz	r0, 8007b50 <_Bfree+0x20>
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <_Bfree+0x3c>)
 8007b48:	4809      	ldr	r0, [pc, #36]	@ (8007b70 <_Bfree+0x40>)
 8007b4a:	218f      	movs	r1, #143	@ 0x8f
 8007b4c:	f001 fd3c 	bl	80095c8 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	b13c      	cbz	r4, 8007b6a <_Bfree+0x3a>
 8007b5a:	69eb      	ldr	r3, [r5, #28]
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b64:	6021      	str	r1, [r4, #0]
 8007b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	0800a33a 	.word	0x0800a33a
 8007b70:	0800a3ba 	.word	0x0800a3ba

08007b74 <__multadd>:
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	690d      	ldr	r5, [r1, #16]
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	461e      	mov	r6, r3
 8007b80:	f101 0c14 	add.w	ip, r1, #20
 8007b84:	2000      	movs	r0, #0
 8007b86:	f8dc 3000 	ldr.w	r3, [ip]
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b90:	0c1e      	lsrs	r6, r3, #16
 8007b92:	0c0b      	lsrs	r3, r1, #16
 8007b94:	fb02 3306 	mla	r3, r2, r6, r3
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ba0:	4285      	cmp	r5, r0
 8007ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007baa:	dcec      	bgt.n	8007b86 <__multadd+0x12>
 8007bac:	b30e      	cbz	r6, 8007bf2 <__multadd+0x7e>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc19      	bgt.n	8007be8 <__multadd+0x74>
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	3101      	adds	r1, #1
 8007bba:	f7ff ff79 	bl	8007ab0 <_Balloc>
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__multadd+0x5a>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <__multadd+0x84>)
 8007bc6:	480d      	ldr	r0, [pc, #52]	@ (8007bfc <__multadd+0x88>)
 8007bc8:	21ba      	movs	r1, #186	@ 0xba
 8007bca:	f001 fcfd 	bl	80095c8 <__assert_func>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	f104 010c 	add.w	r1, r4, #12
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f001 fcdf 	bl	800959c <memcpy>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ffa5 	bl	8007b30 <_Bfree>
 8007be6:	4644      	mov	r4, r8
 8007be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bec:	3501      	adds	r5, #1
 8007bee:	615e      	str	r6, [r3, #20]
 8007bf0:	6125      	str	r5, [r4, #16]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	0800a3a9 	.word	0x0800a3a9
 8007bfc:	0800a3ba 	.word	0x0800a3ba

08007c00 <__s2b>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	4615      	mov	r5, r2
 8007c08:	461f      	mov	r7, r3
 8007c0a:	2209      	movs	r2, #9
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	4606      	mov	r6, r0
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	2100      	movs	r1, #0
 8007c16:	2201      	movs	r2, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	db09      	blt.n	8007c30 <__s2b+0x30>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff ff47 	bl	8007ab0 <_Balloc>
 8007c22:	b940      	cbnz	r0, 8007c36 <__s2b+0x36>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b19      	ldr	r3, [pc, #100]	@ (8007c8c <__s2b+0x8c>)
 8007c28:	4819      	ldr	r0, [pc, #100]	@ (8007c90 <__s2b+0x90>)
 8007c2a:	21d3      	movs	r1, #211	@ 0xd3
 8007c2c:	f001 fccc 	bl	80095c8 <__assert_func>
 8007c30:	0052      	lsls	r2, r2, #1
 8007c32:	3101      	adds	r1, #1
 8007c34:	e7f0      	b.n	8007c18 <__s2b+0x18>
 8007c36:	9b08      	ldr	r3, [sp, #32]
 8007c38:	6143      	str	r3, [r0, #20]
 8007c3a:	2d09      	cmp	r5, #9
 8007c3c:	f04f 0301 	mov.w	r3, #1
 8007c40:	6103      	str	r3, [r0, #16]
 8007c42:	dd16      	ble.n	8007c72 <__s2b+0x72>
 8007c44:	f104 0909 	add.w	r9, r4, #9
 8007c48:	46c8      	mov	r8, r9
 8007c4a:	442c      	add	r4, r5
 8007c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c50:	4601      	mov	r1, r0
 8007c52:	3b30      	subs	r3, #48	@ 0x30
 8007c54:	220a      	movs	r2, #10
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ff8c 	bl	8007b74 <__multadd>
 8007c5c:	45a0      	cmp	r8, r4
 8007c5e:	d1f5      	bne.n	8007c4c <__s2b+0x4c>
 8007c60:	f1a5 0408 	sub.w	r4, r5, #8
 8007c64:	444c      	add	r4, r9
 8007c66:	1b2d      	subs	r5, r5, r4
 8007c68:	1963      	adds	r3, r4, r5
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	db04      	blt.n	8007c78 <__s2b+0x78>
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	340a      	adds	r4, #10
 8007c74:	2509      	movs	r5, #9
 8007c76:	e7f6      	b.n	8007c66 <__s2b+0x66>
 8007c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	3b30      	subs	r3, #48	@ 0x30
 8007c80:	220a      	movs	r2, #10
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ff76 	bl	8007b74 <__multadd>
 8007c88:	e7ee      	b.n	8007c68 <__s2b+0x68>
 8007c8a:	bf00      	nop
 8007c8c:	0800a3a9 	.word	0x0800a3a9
 8007c90:	0800a3ba 	.word	0x0800a3ba

08007c94 <__hi0bits>:
 8007c94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c98:	4603      	mov	r3, r0
 8007c9a:	bf36      	itet	cc
 8007c9c:	0403      	lslcc	r3, r0, #16
 8007c9e:	2000      	movcs	r0, #0
 8007ca0:	2010      	movcc	r0, #16
 8007ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ca6:	bf3c      	itt	cc
 8007ca8:	021b      	lslcc	r3, r3, #8
 8007caa:	3008      	addcc	r0, #8
 8007cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cb0:	bf3c      	itt	cc
 8007cb2:	011b      	lslcc	r3, r3, #4
 8007cb4:	3004      	addcc	r0, #4
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cba:	bf3c      	itt	cc
 8007cbc:	009b      	lslcc	r3, r3, #2
 8007cbe:	3002      	addcc	r0, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	db05      	blt.n	8007cd0 <__hi0bits+0x3c>
 8007cc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cc8:	f100 0001 	add.w	r0, r0, #1
 8007ccc:	bf08      	it	eq
 8007cce:	2020      	moveq	r0, #32
 8007cd0:	4770      	bx	lr

08007cd2 <__lo0bits>:
 8007cd2:	6803      	ldr	r3, [r0, #0]
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f013 0007 	ands.w	r0, r3, #7
 8007cda:	d00b      	beq.n	8007cf4 <__lo0bits+0x22>
 8007cdc:	07d9      	lsls	r1, r3, #31
 8007cde:	d421      	bmi.n	8007d24 <__lo0bits+0x52>
 8007ce0:	0798      	lsls	r0, r3, #30
 8007ce2:	bf49      	itett	mi
 8007ce4:	085b      	lsrmi	r3, r3, #1
 8007ce6:	089b      	lsrpl	r3, r3, #2
 8007ce8:	2001      	movmi	r0, #1
 8007cea:	6013      	strmi	r3, [r2, #0]
 8007cec:	bf5c      	itt	pl
 8007cee:	6013      	strpl	r3, [r2, #0]
 8007cf0:	2002      	movpl	r0, #2
 8007cf2:	4770      	bx	lr
 8007cf4:	b299      	uxth	r1, r3
 8007cf6:	b909      	cbnz	r1, 8007cfc <__lo0bits+0x2a>
 8007cf8:	0c1b      	lsrs	r3, r3, #16
 8007cfa:	2010      	movs	r0, #16
 8007cfc:	b2d9      	uxtb	r1, r3
 8007cfe:	b909      	cbnz	r1, 8007d04 <__lo0bits+0x32>
 8007d00:	3008      	adds	r0, #8
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	0719      	lsls	r1, r3, #28
 8007d06:	bf04      	itt	eq
 8007d08:	091b      	lsreq	r3, r3, #4
 8007d0a:	3004      	addeq	r0, #4
 8007d0c:	0799      	lsls	r1, r3, #30
 8007d0e:	bf04      	itt	eq
 8007d10:	089b      	lsreq	r3, r3, #2
 8007d12:	3002      	addeq	r0, #2
 8007d14:	07d9      	lsls	r1, r3, #31
 8007d16:	d403      	bmi.n	8007d20 <__lo0bits+0x4e>
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	f100 0001 	add.w	r0, r0, #1
 8007d1e:	d003      	beq.n	8007d28 <__lo0bits+0x56>
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4770      	bx	lr
 8007d24:	2000      	movs	r0, #0
 8007d26:	4770      	bx	lr
 8007d28:	2020      	movs	r0, #32
 8007d2a:	4770      	bx	lr

08007d2c <__i2b>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	2101      	movs	r1, #1
 8007d32:	f7ff febd 	bl	8007ab0 <_Balloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__i2b+0x1a>
 8007d3a:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <__i2b+0x24>)
 8007d3c:	4805      	ldr	r0, [pc, #20]	@ (8007d54 <__i2b+0x28>)
 8007d3e:	f240 1145 	movw	r1, #325	@ 0x145
 8007d42:	f001 fc41 	bl	80095c8 <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	6144      	str	r4, [r0, #20]
 8007d4a:	6103      	str	r3, [r0, #16]
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	0800a3a9 	.word	0x0800a3a9
 8007d54:	0800a3ba 	.word	0x0800a3ba

08007d58 <__multiply>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	690a      	ldr	r2, [r1, #16]
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	bfa8      	it	ge
 8007d66:	4623      	movge	r3, r4
 8007d68:	460f      	mov	r7, r1
 8007d6a:	bfa4      	itt	ge
 8007d6c:	460c      	movge	r4, r1
 8007d6e:	461f      	movge	r7, r3
 8007d70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	6861      	ldr	r1, [r4, #4]
 8007d7c:	eb0a 0609 	add.w	r6, sl, r9
 8007d80:	42b3      	cmp	r3, r6
 8007d82:	b085      	sub	sp, #20
 8007d84:	bfb8      	it	lt
 8007d86:	3101      	addlt	r1, #1
 8007d88:	f7ff fe92 	bl	8007ab0 <_Balloc>
 8007d8c:	b930      	cbnz	r0, 8007d9c <__multiply+0x44>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4b44      	ldr	r3, [pc, #272]	@ (8007ea4 <__multiply+0x14c>)
 8007d92:	4845      	ldr	r0, [pc, #276]	@ (8007ea8 <__multiply+0x150>)
 8007d94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d98:	f001 fc16 	bl	80095c8 <__assert_func>
 8007d9c:	f100 0514 	add.w	r5, r0, #20
 8007da0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007da4:	462b      	mov	r3, r5
 8007da6:	2200      	movs	r2, #0
 8007da8:	4543      	cmp	r3, r8
 8007daa:	d321      	bcc.n	8007df0 <__multiply+0x98>
 8007dac:	f107 0114 	add.w	r1, r7, #20
 8007db0:	f104 0214 	add.w	r2, r4, #20
 8007db4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007db8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	1b13      	subs	r3, r2, r4
 8007dc0:	3b15      	subs	r3, #21
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	f104 0715 	add.w	r7, r4, #21
 8007dcc:	42ba      	cmp	r2, r7
 8007dce:	bf38      	it	cc
 8007dd0:	2304      	movcc	r3, #4
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	9103      	str	r1, [sp, #12]
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	d80c      	bhi.n	8007df6 <__multiply+0x9e>
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	dd03      	ble.n	8007de8 <__multiply+0x90>
 8007de0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05b      	beq.n	8007ea0 <__multiply+0x148>
 8007de8:	6106      	str	r6, [r0, #16]
 8007dea:	b005      	add	sp, #20
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	f843 2b04 	str.w	r2, [r3], #4
 8007df4:	e7d8      	b.n	8007da8 <__multiply+0x50>
 8007df6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dfa:	f1ba 0f00 	cmp.w	sl, #0
 8007dfe:	d024      	beq.n	8007e4a <__multiply+0xf2>
 8007e00:	f104 0e14 	add.w	lr, r4, #20
 8007e04:	46a9      	mov	r9, r5
 8007e06:	f04f 0c00 	mov.w	ip, #0
 8007e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e0e:	f8d9 3000 	ldr.w	r3, [r9]
 8007e12:	fa1f fb87 	uxth.w	fp, r7
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e20:	f8d9 7000 	ldr.w	r7, [r9]
 8007e24:	4463      	add	r3, ip
 8007e26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e38:	4572      	cmp	r2, lr
 8007e3a:	f849 3b04 	str.w	r3, [r9], #4
 8007e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e42:	d8e2      	bhi.n	8007e0a <__multiply+0xb2>
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	f845 c003 	str.w	ip, [r5, r3]
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e50:	3104      	adds	r1, #4
 8007e52:	f1b9 0f00 	cmp.w	r9, #0
 8007e56:	d021      	beq.n	8007e9c <__multiply+0x144>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	f104 0c14 	add.w	ip, r4, #20
 8007e5e:	46ae      	mov	lr, r5
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	f8bc b000 	ldrh.w	fp, [ip]
 8007e68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e6c:	fb09 770b 	mla	r7, r9, fp, r7
 8007e70:	4457      	add	r7, sl
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e78:	f84e 3b04 	str.w	r3, [lr], #4
 8007e7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e84:	f8be 3000 	ldrh.w	r3, [lr]
 8007e88:	fb09 330a 	mla	r3, r9, sl, r3
 8007e8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e90:	4562      	cmp	r2, ip
 8007e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e96:	d8e5      	bhi.n	8007e64 <__multiply+0x10c>
 8007e98:	9f01      	ldr	r7, [sp, #4]
 8007e9a:	51eb      	str	r3, [r5, r7]
 8007e9c:	3504      	adds	r5, #4
 8007e9e:	e799      	b.n	8007dd4 <__multiply+0x7c>
 8007ea0:	3e01      	subs	r6, #1
 8007ea2:	e79b      	b.n	8007ddc <__multiply+0x84>
 8007ea4:	0800a3a9 	.word	0x0800a3a9
 8007ea8:	0800a3ba 	.word	0x0800a3ba

08007eac <__pow5mult>:
 8007eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	f012 0203 	ands.w	r2, r2, #3
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	460e      	mov	r6, r1
 8007eba:	d007      	beq.n	8007ecc <__pow5mult+0x20>
 8007ebc:	4c25      	ldr	r4, [pc, #148]	@ (8007f54 <__pow5mult+0xa8>)
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ec6:	f7ff fe55 	bl	8007b74 <__multadd>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	10ad      	asrs	r5, r5, #2
 8007ece:	d03d      	beq.n	8007f4c <__pow5mult+0xa0>
 8007ed0:	69fc      	ldr	r4, [r7, #28]
 8007ed2:	b97c      	cbnz	r4, 8007ef4 <__pow5mult+0x48>
 8007ed4:	2010      	movs	r0, #16
 8007ed6:	f7ff fd35 	bl	8007944 <malloc>
 8007eda:	4602      	mov	r2, r0
 8007edc:	61f8      	str	r0, [r7, #28]
 8007ede:	b928      	cbnz	r0, 8007eec <__pow5mult+0x40>
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f58 <__pow5mult+0xac>)
 8007ee2:	481e      	ldr	r0, [pc, #120]	@ (8007f5c <__pow5mult+0xb0>)
 8007ee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ee8:	f001 fb6e 	bl	80095c8 <__assert_func>
 8007eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	60c4      	str	r4, [r0, #12]
 8007ef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007efc:	b94c      	cbnz	r4, 8007f12 <__pow5mult+0x66>
 8007efe:	f240 2171 	movw	r1, #625	@ 0x271
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ff12 	bl	8007d2c <__i2b>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f0e:	4604      	mov	r4, r0
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	07eb      	lsls	r3, r5, #31
 8007f18:	d50a      	bpl.n	8007f30 <__pow5mult+0x84>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ff1a 	bl	8007d58 <__multiply>
 8007f24:	4631      	mov	r1, r6
 8007f26:	4680      	mov	r8, r0
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fe01 	bl	8007b30 <_Bfree>
 8007f2e:	4646      	mov	r6, r8
 8007f30:	106d      	asrs	r5, r5, #1
 8007f32:	d00b      	beq.n	8007f4c <__pow5mult+0xa0>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	b938      	cbnz	r0, 8007f48 <__pow5mult+0x9c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ff0b 	bl	8007d58 <__multiply>
 8007f42:	6020      	str	r0, [r4, #0]
 8007f44:	f8c0 9000 	str.w	r9, [r0]
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e7e4      	b.n	8007f16 <__pow5mult+0x6a>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	bf00      	nop
 8007f54:	0800a414 	.word	0x0800a414
 8007f58:	0800a33a 	.word	0x0800a33a
 8007f5c:	0800a3ba 	.word	0x0800a3ba

08007f60 <__lshift>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	460c      	mov	r4, r1
 8007f66:	6849      	ldr	r1, [r1, #4]
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	4607      	mov	r7, r0
 8007f72:	4691      	mov	r9, r2
 8007f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f78:	f108 0601 	add.w	r6, r8, #1
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	db0b      	blt.n	8007f98 <__lshift+0x38>
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff fd95 	bl	8007ab0 <_Balloc>
 8007f86:	4605      	mov	r5, r0
 8007f88:	b948      	cbnz	r0, 8007f9e <__lshift+0x3e>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b28      	ldr	r3, [pc, #160]	@ (8008030 <__lshift+0xd0>)
 8007f8e:	4829      	ldr	r0, [pc, #164]	@ (8008034 <__lshift+0xd4>)
 8007f90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f94:	f001 fb18 	bl	80095c8 <__assert_func>
 8007f98:	3101      	adds	r1, #1
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	e7ee      	b.n	8007f7c <__lshift+0x1c>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f100 0114 	add.w	r1, r0, #20
 8007fa4:	f100 0210 	add.w	r2, r0, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4553      	cmp	r3, sl
 8007fac:	db33      	blt.n	8008016 <__lshift+0xb6>
 8007fae:	6920      	ldr	r0, [r4, #16]
 8007fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fb4:	f104 0314 	add.w	r3, r4, #20
 8007fb8:	f019 091f 	ands.w	r9, r9, #31
 8007fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fc4:	d02b      	beq.n	800801e <__lshift+0xbe>
 8007fc6:	f1c9 0e20 	rsb	lr, r9, #32
 8007fca:	468a      	mov	sl, r1
 8007fcc:	2200      	movs	r2, #0
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8007fd4:	4310      	orrs	r0, r2
 8007fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fde:	459c      	cmp	ip, r3
 8007fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fe4:	d8f3      	bhi.n	8007fce <__lshift+0x6e>
 8007fe6:	ebac 0304 	sub.w	r3, ip, r4
 8007fea:	3b15      	subs	r3, #21
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	f104 0015 	add.w	r0, r4, #21
 8007ff6:	4584      	cmp	ip, r0
 8007ff8:	bf38      	it	cc
 8007ffa:	2304      	movcc	r3, #4
 8007ffc:	50ca      	str	r2, [r1, r3]
 8007ffe:	b10a      	cbz	r2, 8008004 <__lshift+0xa4>
 8008000:	f108 0602 	add.w	r6, r8, #2
 8008004:	3e01      	subs	r6, #1
 8008006:	4638      	mov	r0, r7
 8008008:	612e      	str	r6, [r5, #16]
 800800a:	4621      	mov	r1, r4
 800800c:	f7ff fd90 	bl	8007b30 <_Bfree>
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	f842 0f04 	str.w	r0, [r2, #4]!
 800801a:	3301      	adds	r3, #1
 800801c:	e7c5      	b.n	8007faa <__lshift+0x4a>
 800801e:	3904      	subs	r1, #4
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	f841 2f04 	str.w	r2, [r1, #4]!
 8008028:	459c      	cmp	ip, r3
 800802a:	d8f9      	bhi.n	8008020 <__lshift+0xc0>
 800802c:	e7ea      	b.n	8008004 <__lshift+0xa4>
 800802e:	bf00      	nop
 8008030:	0800a3a9 	.word	0x0800a3a9
 8008034:	0800a3ba 	.word	0x0800a3ba

08008038 <__mcmp>:
 8008038:	690a      	ldr	r2, [r1, #16]
 800803a:	4603      	mov	r3, r0
 800803c:	6900      	ldr	r0, [r0, #16]
 800803e:	1a80      	subs	r0, r0, r2
 8008040:	b530      	push	{r4, r5, lr}
 8008042:	d10e      	bne.n	8008062 <__mcmp+0x2a>
 8008044:	3314      	adds	r3, #20
 8008046:	3114      	adds	r1, #20
 8008048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800804c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008058:	4295      	cmp	r5, r2
 800805a:	d003      	beq.n	8008064 <__mcmp+0x2c>
 800805c:	d205      	bcs.n	800806a <__mcmp+0x32>
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	bd30      	pop	{r4, r5, pc}
 8008064:	42a3      	cmp	r3, r4
 8008066:	d3f3      	bcc.n	8008050 <__mcmp+0x18>
 8008068:	e7fb      	b.n	8008062 <__mcmp+0x2a>
 800806a:	2001      	movs	r0, #1
 800806c:	e7f9      	b.n	8008062 <__mcmp+0x2a>
	...

08008070 <__mdiff>:
 8008070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4689      	mov	r9, r1
 8008076:	4606      	mov	r6, r0
 8008078:	4611      	mov	r1, r2
 800807a:	4648      	mov	r0, r9
 800807c:	4614      	mov	r4, r2
 800807e:	f7ff ffdb 	bl	8008038 <__mcmp>
 8008082:	1e05      	subs	r5, r0, #0
 8008084:	d112      	bne.n	80080ac <__mdiff+0x3c>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff fd11 	bl	8007ab0 <_Balloc>
 800808e:	4602      	mov	r2, r0
 8008090:	b928      	cbnz	r0, 800809e <__mdiff+0x2e>
 8008092:	4b3f      	ldr	r3, [pc, #252]	@ (8008190 <__mdiff+0x120>)
 8008094:	f240 2137 	movw	r1, #567	@ 0x237
 8008098:	483e      	ldr	r0, [pc, #248]	@ (8008194 <__mdiff+0x124>)
 800809a:	f001 fa95 	bl	80095c8 <__assert_func>
 800809e:	2301      	movs	r3, #1
 80080a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a4:	4610      	mov	r0, r2
 80080a6:	b003      	add	sp, #12
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	bfbc      	itt	lt
 80080ae:	464b      	movlt	r3, r9
 80080b0:	46a1      	movlt	r9, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080b8:	bfba      	itte	lt
 80080ba:	461c      	movlt	r4, r3
 80080bc:	2501      	movlt	r5, #1
 80080be:	2500      	movge	r5, #0
 80080c0:	f7ff fcf6 	bl	8007ab0 <_Balloc>
 80080c4:	4602      	mov	r2, r0
 80080c6:	b918      	cbnz	r0, 80080d0 <__mdiff+0x60>
 80080c8:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <__mdiff+0x120>)
 80080ca:	f240 2145 	movw	r1, #581	@ 0x245
 80080ce:	e7e3      	b.n	8008098 <__mdiff+0x28>
 80080d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080d4:	6926      	ldr	r6, [r4, #16]
 80080d6:	60c5      	str	r5, [r0, #12]
 80080d8:	f109 0310 	add.w	r3, r9, #16
 80080dc:	f109 0514 	add.w	r5, r9, #20
 80080e0:	f104 0e14 	add.w	lr, r4, #20
 80080e4:	f100 0b14 	add.w	fp, r0, #20
 80080e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	46d9      	mov	r9, fp
 80080f4:	f04f 0c00 	mov.w	ip, #0
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	fa1f f38a 	uxth.w	r3, sl
 8008108:	4619      	mov	r1, r3
 800810a:	b283      	uxth	r3, r0
 800810c:	1acb      	subs	r3, r1, r3
 800810e:	0c00      	lsrs	r0, r0, #16
 8008110:	4463      	add	r3, ip
 8008112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800811a:	b29b      	uxth	r3, r3
 800811c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008120:	4576      	cmp	r6, lr
 8008122:	f849 3b04 	str.w	r3, [r9], #4
 8008126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800812a:	d8e5      	bhi.n	80080f8 <__mdiff+0x88>
 800812c:	1b33      	subs	r3, r6, r4
 800812e:	3b15      	subs	r3, #21
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3415      	adds	r4, #21
 8008136:	3304      	adds	r3, #4
 8008138:	42a6      	cmp	r6, r4
 800813a:	bf38      	it	cc
 800813c:	2304      	movcc	r3, #4
 800813e:	441d      	add	r5, r3
 8008140:	445b      	add	r3, fp
 8008142:	461e      	mov	r6, r3
 8008144:	462c      	mov	r4, r5
 8008146:	4544      	cmp	r4, r8
 8008148:	d30e      	bcc.n	8008168 <__mdiff+0xf8>
 800814a:	f108 0103 	add.w	r1, r8, #3
 800814e:	1b49      	subs	r1, r1, r5
 8008150:	f021 0103 	bic.w	r1, r1, #3
 8008154:	3d03      	subs	r5, #3
 8008156:	45a8      	cmp	r8, r5
 8008158:	bf38      	it	cc
 800815a:	2100      	movcc	r1, #0
 800815c:	440b      	add	r3, r1
 800815e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008162:	b191      	cbz	r1, 800818a <__mdiff+0x11a>
 8008164:	6117      	str	r7, [r2, #16]
 8008166:	e79d      	b.n	80080a4 <__mdiff+0x34>
 8008168:	f854 1b04 	ldr.w	r1, [r4], #4
 800816c:	46e6      	mov	lr, ip
 800816e:	0c08      	lsrs	r0, r1, #16
 8008170:	fa1c fc81 	uxtah	ip, ip, r1
 8008174:	4471      	add	r1, lr
 8008176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800817a:	b289      	uxth	r1, r1
 800817c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008180:	f846 1b04 	str.w	r1, [r6], #4
 8008184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008188:	e7dd      	b.n	8008146 <__mdiff+0xd6>
 800818a:	3f01      	subs	r7, #1
 800818c:	e7e7      	b.n	800815e <__mdiff+0xee>
 800818e:	bf00      	nop
 8008190:	0800a3a9 	.word	0x0800a3a9
 8008194:	0800a3ba 	.word	0x0800a3ba

08008198 <__ulp>:
 8008198:	b082      	sub	sp, #8
 800819a:	ed8d 0b00 	vstr	d0, [sp]
 800819e:	9a01      	ldr	r2, [sp, #4]
 80081a0:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <__ulp+0x48>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	dc08      	bgt.n	80081be <__ulp+0x26>
 80081ac:	425b      	negs	r3, r3
 80081ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80081b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80081b6:	da04      	bge.n	80081c2 <__ulp+0x2a>
 80081b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80081bc:	4113      	asrs	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	e008      	b.n	80081d4 <__ulp+0x3c>
 80081c2:	f1a2 0314 	sub.w	r3, r2, #20
 80081c6:	2b1e      	cmp	r3, #30
 80081c8:	bfda      	itte	le
 80081ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80081ce:	40da      	lsrle	r2, r3
 80081d0:	2201      	movgt	r2, #1
 80081d2:	2300      	movs	r3, #0
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	ec41 0b10 	vmov	d0, r0, r1
 80081dc:	b002      	add	sp, #8
 80081de:	4770      	bx	lr
 80081e0:	7ff00000 	.word	0x7ff00000

080081e4 <__b2d>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	6906      	ldr	r6, [r0, #16]
 80081ea:	f100 0814 	add.w	r8, r0, #20
 80081ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081f2:	1f37      	subs	r7, r6, #4
 80081f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7ff fd4b 	bl	8007c94 <__hi0bits>
 80081fe:	f1c0 0320 	rsb	r3, r0, #32
 8008202:	280a      	cmp	r0, #10
 8008204:	600b      	str	r3, [r1, #0]
 8008206:	491b      	ldr	r1, [pc, #108]	@ (8008274 <__b2d+0x90>)
 8008208:	dc15      	bgt.n	8008236 <__b2d+0x52>
 800820a:	f1c0 0c0b 	rsb	ip, r0, #11
 800820e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008212:	45b8      	cmp	r8, r7
 8008214:	ea43 0501 	orr.w	r5, r3, r1
 8008218:	bf34      	ite	cc
 800821a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800821e:	2300      	movcs	r3, #0
 8008220:	3015      	adds	r0, #21
 8008222:	fa02 f000 	lsl.w	r0, r2, r0
 8008226:	fa23 f30c 	lsr.w	r3, r3, ip
 800822a:	4303      	orrs	r3, r0
 800822c:	461c      	mov	r4, r3
 800822e:	ec45 4b10 	vmov	d0, r4, r5
 8008232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008236:	45b8      	cmp	r8, r7
 8008238:	bf3a      	itte	cc
 800823a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800823e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008242:	2300      	movcs	r3, #0
 8008244:	380b      	subs	r0, #11
 8008246:	d012      	beq.n	800826e <__b2d+0x8a>
 8008248:	f1c0 0120 	rsb	r1, r0, #32
 800824c:	fa23 f401 	lsr.w	r4, r3, r1
 8008250:	4082      	lsls	r2, r0
 8008252:	4322      	orrs	r2, r4
 8008254:	4547      	cmp	r7, r8
 8008256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800825a:	bf8c      	ite	hi
 800825c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008260:	2200      	movls	r2, #0
 8008262:	4083      	lsls	r3, r0
 8008264:	40ca      	lsrs	r2, r1
 8008266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800826a:	4313      	orrs	r3, r2
 800826c:	e7de      	b.n	800822c <__b2d+0x48>
 800826e:	ea42 0501 	orr.w	r5, r2, r1
 8008272:	e7db      	b.n	800822c <__b2d+0x48>
 8008274:	3ff00000 	.word	0x3ff00000

08008278 <__d2b>:
 8008278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800827c:	460f      	mov	r7, r1
 800827e:	2101      	movs	r1, #1
 8008280:	ec59 8b10 	vmov	r8, r9, d0
 8008284:	4616      	mov	r6, r2
 8008286:	f7ff fc13 	bl	8007ab0 <_Balloc>
 800828a:	4604      	mov	r4, r0
 800828c:	b930      	cbnz	r0, 800829c <__d2b+0x24>
 800828e:	4602      	mov	r2, r0
 8008290:	4b23      	ldr	r3, [pc, #140]	@ (8008320 <__d2b+0xa8>)
 8008292:	4824      	ldr	r0, [pc, #144]	@ (8008324 <__d2b+0xac>)
 8008294:	f240 310f 	movw	r1, #783	@ 0x30f
 8008298:	f001 f996 	bl	80095c8 <__assert_func>
 800829c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082a4:	b10d      	cbz	r5, 80082aa <__d2b+0x32>
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	f1b8 0300 	subs.w	r3, r8, #0
 80082b0:	d023      	beq.n	80082fa <__d2b+0x82>
 80082b2:	4668      	mov	r0, sp
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	f7ff fd0c 	bl	8007cd2 <__lo0bits>
 80082ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082be:	b1d0      	cbz	r0, 80082f6 <__d2b+0x7e>
 80082c0:	f1c0 0320 	rsb	r3, r0, #32
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	430b      	orrs	r3, r1
 80082ca:	40c2      	lsrs	r2, r0
 80082cc:	6163      	str	r3, [r4, #20]
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	61a3      	str	r3, [r4, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf0c      	ite	eq
 80082d8:	2201      	moveq	r2, #1
 80082da:	2202      	movne	r2, #2
 80082dc:	6122      	str	r2, [r4, #16]
 80082de:	b1a5      	cbz	r5, 800830a <__d2b+0x92>
 80082e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082e4:	4405      	add	r5, r0
 80082e6:	603d      	str	r5, [r7, #0]
 80082e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	4620      	mov	r0, r4
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f6:	6161      	str	r1, [r4, #20]
 80082f8:	e7ea      	b.n	80082d0 <__d2b+0x58>
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	f7ff fce9 	bl	8007cd2 <__lo0bits>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	3020      	adds	r0, #32
 8008306:	2201      	movs	r2, #1
 8008308:	e7e8      	b.n	80082dc <__d2b+0x64>
 800830a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800830e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008312:	6038      	str	r0, [r7, #0]
 8008314:	6918      	ldr	r0, [r3, #16]
 8008316:	f7ff fcbd 	bl	8007c94 <__hi0bits>
 800831a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800831e:	e7e5      	b.n	80082ec <__d2b+0x74>
 8008320:	0800a3a9 	.word	0x0800a3a9
 8008324:	0800a3ba 	.word	0x0800a3ba

08008328 <__ratio>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	b085      	sub	sp, #20
 800832e:	e9cd 1000 	strd	r1, r0, [sp]
 8008332:	a902      	add	r1, sp, #8
 8008334:	f7ff ff56 	bl	80081e4 <__b2d>
 8008338:	9800      	ldr	r0, [sp, #0]
 800833a:	a903      	add	r1, sp, #12
 800833c:	ec55 4b10 	vmov	r4, r5, d0
 8008340:	f7ff ff50 	bl	80081e4 <__b2d>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	6919      	ldr	r1, [r3, #16]
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	1ac9      	subs	r1, r1, r3
 800834e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	ec5b ab10 	vmov	sl, fp, d0
 8008358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfce      	itee	gt
 8008360:	462a      	movgt	r2, r5
 8008362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008366:	465a      	movle	r2, fp
 8008368:	462f      	mov	r7, r5
 800836a:	46d9      	mov	r9, fp
 800836c:	bfcc      	ite	gt
 800836e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008376:	464b      	mov	r3, r9
 8008378:	4652      	mov	r2, sl
 800837a:	4620      	mov	r0, r4
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fa85 	bl	800088c <__aeabi_ddiv>
 8008382:	ec41 0b10 	vmov	d0, r0, r1
 8008386:	b005      	add	sp, #20
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800838c <__copybits>:
 800838c:	3901      	subs	r1, #1
 800838e:	b570      	push	{r4, r5, r6, lr}
 8008390:	1149      	asrs	r1, r1, #5
 8008392:	6914      	ldr	r4, [r2, #16]
 8008394:	3101      	adds	r1, #1
 8008396:	f102 0314 	add.w	r3, r2, #20
 800839a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800839e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083a2:	1f05      	subs	r5, r0, #4
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d30c      	bcc.n	80083c2 <__copybits+0x36>
 80083a8:	1aa3      	subs	r3, r4, r2
 80083aa:	3b11      	subs	r3, #17
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	3211      	adds	r2, #17
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	bf88      	it	hi
 80083b6:	2300      	movhi	r3, #0
 80083b8:	4418      	add	r0, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	4288      	cmp	r0, r1
 80083be:	d305      	bcc.n	80083cc <__copybits+0x40>
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
 80083c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80083c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80083ca:	e7eb      	b.n	80083a4 <__copybits+0x18>
 80083cc:	f840 3b04 	str.w	r3, [r0], #4
 80083d0:	e7f4      	b.n	80083bc <__copybits+0x30>

080083d2 <__any_on>:
 80083d2:	f100 0214 	add.w	r2, r0, #20
 80083d6:	6900      	ldr	r0, [r0, #16]
 80083d8:	114b      	asrs	r3, r1, #5
 80083da:	4298      	cmp	r0, r3
 80083dc:	b510      	push	{r4, lr}
 80083de:	db11      	blt.n	8008404 <__any_on+0x32>
 80083e0:	dd0a      	ble.n	80083f8 <__any_on+0x26>
 80083e2:	f011 011f 	ands.w	r1, r1, #31
 80083e6:	d007      	beq.n	80083f8 <__any_on+0x26>
 80083e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083ec:	fa24 f001 	lsr.w	r0, r4, r1
 80083f0:	fa00 f101 	lsl.w	r1, r0, r1
 80083f4:	428c      	cmp	r4, r1
 80083f6:	d10b      	bne.n	8008410 <__any_on+0x3e>
 80083f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d803      	bhi.n	8008408 <__any_on+0x36>
 8008400:	2000      	movs	r0, #0
 8008402:	bd10      	pop	{r4, pc}
 8008404:	4603      	mov	r3, r0
 8008406:	e7f7      	b.n	80083f8 <__any_on+0x26>
 8008408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800840c:	2900      	cmp	r1, #0
 800840e:	d0f5      	beq.n	80083fc <__any_on+0x2a>
 8008410:	2001      	movs	r0, #1
 8008412:	e7f6      	b.n	8008402 <__any_on+0x30>

08008414 <sulp>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	ec45 4b10 	vmov	d0, r4, r5
 800841e:	4616      	mov	r6, r2
 8008420:	f7ff feba 	bl	8008198 <__ulp>
 8008424:	ec51 0b10 	vmov	r0, r1, d0
 8008428:	b17e      	cbz	r6, 800844a <sulp+0x36>
 800842a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800842e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd09      	ble.n	800844a <sulp+0x36>
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800843c:	2400      	movs	r4, #0
 800843e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008442:	4622      	mov	r2, r4
 8008444:	462b      	mov	r3, r5
 8008446:	f7f8 f8f7 	bl	8000638 <__aeabi_dmul>
 800844a:	ec41 0b10 	vmov	d0, r0, r1
 800844e:	bd70      	pop	{r4, r5, r6, pc}

08008450 <_strtod_l>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	b09f      	sub	sp, #124	@ 0x7c
 8008456:	460c      	mov	r4, r1
 8008458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800845a:	2200      	movs	r2, #0
 800845c:	921a      	str	r2, [sp, #104]	@ 0x68
 800845e:	9005      	str	r0, [sp, #20]
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	460a      	mov	r2, r1
 800846a:	9219      	str	r2, [sp, #100]	@ 0x64
 800846c:	7811      	ldrb	r1, [r2, #0]
 800846e:	292b      	cmp	r1, #43	@ 0x2b
 8008470:	d04a      	beq.n	8008508 <_strtod_l+0xb8>
 8008472:	d838      	bhi.n	80084e6 <_strtod_l+0x96>
 8008474:	290d      	cmp	r1, #13
 8008476:	d832      	bhi.n	80084de <_strtod_l+0x8e>
 8008478:	2908      	cmp	r1, #8
 800847a:	d832      	bhi.n	80084e2 <_strtod_l+0x92>
 800847c:	2900      	cmp	r1, #0
 800847e:	d03b      	beq.n	80084f8 <_strtod_l+0xa8>
 8008480:	2200      	movs	r2, #0
 8008482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008486:	782a      	ldrb	r2, [r5, #0]
 8008488:	2a30      	cmp	r2, #48	@ 0x30
 800848a:	f040 80b3 	bne.w	80085f4 <_strtod_l+0x1a4>
 800848e:	786a      	ldrb	r2, [r5, #1]
 8008490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008494:	2a58      	cmp	r2, #88	@ 0x58
 8008496:	d16e      	bne.n	8008576 <_strtod_l+0x126>
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	ab1a      	add	r3, sp, #104	@ 0x68
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4a8e      	ldr	r2, [pc, #568]	@ (80086dc <_strtod_l+0x28c>)
 80084a4:	9805      	ldr	r0, [sp, #20]
 80084a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80084a8:	a919      	add	r1, sp, #100	@ 0x64
 80084aa:	f001 f927 	bl	80096fc <__gethex>
 80084ae:	f010 060f 	ands.w	r6, r0, #15
 80084b2:	4604      	mov	r4, r0
 80084b4:	d005      	beq.n	80084c2 <_strtod_l+0x72>
 80084b6:	2e06      	cmp	r6, #6
 80084b8:	d128      	bne.n	800850c <_strtod_l+0xbc>
 80084ba:	3501      	adds	r5, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	9519      	str	r5, [sp, #100]	@ 0x64
 80084c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 858e 	bne.w	8008fe6 <_strtod_l+0xb96>
 80084ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084cc:	b1cb      	cbz	r3, 8008502 <_strtod_l+0xb2>
 80084ce:	4652      	mov	r2, sl
 80084d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80084d4:	ec43 2b10 	vmov	d0, r2, r3
 80084d8:	b01f      	add	sp, #124	@ 0x7c
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	2920      	cmp	r1, #32
 80084e0:	d1ce      	bne.n	8008480 <_strtod_l+0x30>
 80084e2:	3201      	adds	r2, #1
 80084e4:	e7c1      	b.n	800846a <_strtod_l+0x1a>
 80084e6:	292d      	cmp	r1, #45	@ 0x2d
 80084e8:	d1ca      	bne.n	8008480 <_strtod_l+0x30>
 80084ea:	2101      	movs	r1, #1
 80084ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084ee:	1c51      	adds	r1, r2, #1
 80084f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80084f2:	7852      	ldrb	r2, [r2, #1]
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d1c5      	bne.n	8008484 <_strtod_l+0x34>
 80084f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8570 	bne.w	8008fe2 <_strtod_l+0xb92>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	e7e5      	b.n	80084d4 <_strtod_l+0x84>
 8008508:	2100      	movs	r1, #0
 800850a:	e7ef      	b.n	80084ec <_strtod_l+0x9c>
 800850c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800850e:	b13a      	cbz	r2, 8008520 <_strtod_l+0xd0>
 8008510:	2135      	movs	r1, #53	@ 0x35
 8008512:	a81c      	add	r0, sp, #112	@ 0x70
 8008514:	f7ff ff3a 	bl	800838c <__copybits>
 8008518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800851a:	9805      	ldr	r0, [sp, #20]
 800851c:	f7ff fb08 	bl	8007b30 <_Bfree>
 8008520:	3e01      	subs	r6, #1
 8008522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008524:	2e04      	cmp	r6, #4
 8008526:	d806      	bhi.n	8008536 <_strtod_l+0xe6>
 8008528:	e8df f006 	tbb	[pc, r6]
 800852c:	201d0314 	.word	0x201d0314
 8008530:	14          	.byte	0x14
 8008531:	00          	.byte	0x00
 8008532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008536:	05e1      	lsls	r1, r4, #23
 8008538:	bf48      	it	mi
 800853a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800853e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008542:	0d1b      	lsrs	r3, r3, #20
 8008544:	051b      	lsls	r3, r3, #20
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1bb      	bne.n	80084c2 <_strtod_l+0x72>
 800854a:	f7fe fb31 	bl	8006bb0 <__errno>
 800854e:	2322      	movs	r3, #34	@ 0x22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	e7b6      	b.n	80084c2 <_strtod_l+0x72>
 8008554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800855c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008564:	e7e7      	b.n	8008536 <_strtod_l+0xe6>
 8008566:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80086e4 <_strtod_l+0x294>
 800856a:	e7e4      	b.n	8008536 <_strtod_l+0xe6>
 800856c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008570:	f04f 3aff 	mov.w	sl, #4294967295
 8008574:	e7df      	b.n	8008536 <_strtod_l+0xe6>
 8008576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	9219      	str	r2, [sp, #100]	@ 0x64
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b30      	cmp	r3, #48	@ 0x30
 8008580:	d0f9      	beq.n	8008576 <_strtod_l+0x126>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d09d      	beq.n	80084c2 <_strtod_l+0x72>
 8008586:	2301      	movs	r3, #1
 8008588:	9309      	str	r3, [sp, #36]	@ 0x24
 800858a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800858c:	930c      	str	r3, [sp, #48]	@ 0x30
 800858e:	2300      	movs	r3, #0
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	930a      	str	r3, [sp, #40]	@ 0x28
 8008594:	461f      	mov	r7, r3
 8008596:	220a      	movs	r2, #10
 8008598:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800859a:	7805      	ldrb	r5, [r0, #0]
 800859c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80085a0:	b2d9      	uxtb	r1, r3
 80085a2:	2909      	cmp	r1, #9
 80085a4:	d928      	bls.n	80085f8 <_strtod_l+0x1a8>
 80085a6:	494e      	ldr	r1, [pc, #312]	@ (80086e0 <_strtod_l+0x290>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	f000 ffd5 	bl	8009558 <strncmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d032      	beq.n	8008618 <_strtod_l+0x1c8>
 80085b2:	2000      	movs	r0, #0
 80085b4:	462a      	mov	r2, r5
 80085b6:	4681      	mov	r9, r0
 80085b8:	463d      	mov	r5, r7
 80085ba:	4603      	mov	r3, r0
 80085bc:	2a65      	cmp	r2, #101	@ 0x65
 80085be:	d001      	beq.n	80085c4 <_strtod_l+0x174>
 80085c0:	2a45      	cmp	r2, #69	@ 0x45
 80085c2:	d114      	bne.n	80085ee <_strtod_l+0x19e>
 80085c4:	b91d      	cbnz	r5, 80085ce <_strtod_l+0x17e>
 80085c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c8:	4302      	orrs	r2, r0
 80085ca:	d095      	beq.n	80084f8 <_strtod_l+0xa8>
 80085cc:	2500      	movs	r5, #0
 80085ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80085d0:	1c62      	adds	r2, r4, #1
 80085d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80085d4:	7862      	ldrb	r2, [r4, #1]
 80085d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80085d8:	d077      	beq.n	80086ca <_strtod_l+0x27a>
 80085da:	2a2d      	cmp	r2, #45	@ 0x2d
 80085dc:	d07b      	beq.n	80086d6 <_strtod_l+0x286>
 80085de:	f04f 0c00 	mov.w	ip, #0
 80085e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80085e6:	2909      	cmp	r1, #9
 80085e8:	f240 8082 	bls.w	80086f0 <_strtod_l+0x2a0>
 80085ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	e0a2      	b.n	800873a <_strtod_l+0x2ea>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7c7      	b.n	8008588 <_strtod_l+0x138>
 80085f8:	2f08      	cmp	r7, #8
 80085fa:	bfd5      	itete	le
 80085fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80085fe:	9908      	ldrgt	r1, [sp, #32]
 8008600:	fb02 3301 	mlale	r3, r2, r1, r3
 8008604:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008608:	f100 0001 	add.w	r0, r0, #1
 800860c:	bfd4      	ite	le
 800860e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008610:	9308      	strgt	r3, [sp, #32]
 8008612:	3701      	adds	r7, #1
 8008614:	9019      	str	r0, [sp, #100]	@ 0x64
 8008616:	e7bf      	b.n	8008598 <_strtod_l+0x148>
 8008618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	9219      	str	r2, [sp, #100]	@ 0x64
 800861e:	785a      	ldrb	r2, [r3, #1]
 8008620:	b37f      	cbz	r7, 8008682 <_strtod_l+0x232>
 8008622:	4681      	mov	r9, r0
 8008624:	463d      	mov	r5, r7
 8008626:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800862a:	2b09      	cmp	r3, #9
 800862c:	d912      	bls.n	8008654 <_strtod_l+0x204>
 800862e:	2301      	movs	r3, #1
 8008630:	e7c4      	b.n	80085bc <_strtod_l+0x16c>
 8008632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	9219      	str	r2, [sp, #100]	@ 0x64
 8008638:	785a      	ldrb	r2, [r3, #1]
 800863a:	3001      	adds	r0, #1
 800863c:	2a30      	cmp	r2, #48	@ 0x30
 800863e:	d0f8      	beq.n	8008632 <_strtod_l+0x1e2>
 8008640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008644:	2b08      	cmp	r3, #8
 8008646:	f200 84d3 	bhi.w	8008ff0 <_strtod_l+0xba0>
 800864a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800864c:	930c      	str	r3, [sp, #48]	@ 0x30
 800864e:	4681      	mov	r9, r0
 8008650:	2000      	movs	r0, #0
 8008652:	4605      	mov	r5, r0
 8008654:	3a30      	subs	r2, #48	@ 0x30
 8008656:	f100 0301 	add.w	r3, r0, #1
 800865a:	d02a      	beq.n	80086b2 <_strtod_l+0x262>
 800865c:	4499      	add	r9, r3
 800865e:	eb00 0c05 	add.w	ip, r0, r5
 8008662:	462b      	mov	r3, r5
 8008664:	210a      	movs	r1, #10
 8008666:	4563      	cmp	r3, ip
 8008668:	d10d      	bne.n	8008686 <_strtod_l+0x236>
 800866a:	1c69      	adds	r1, r5, #1
 800866c:	4401      	add	r1, r0
 800866e:	4428      	add	r0, r5
 8008670:	2808      	cmp	r0, #8
 8008672:	dc16      	bgt.n	80086a2 <_strtod_l+0x252>
 8008674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008676:	230a      	movs	r3, #10
 8008678:	fb03 2300 	mla	r3, r3, r0, r2
 800867c:	930a      	str	r3, [sp, #40]	@ 0x28
 800867e:	2300      	movs	r3, #0
 8008680:	e018      	b.n	80086b4 <_strtod_l+0x264>
 8008682:	4638      	mov	r0, r7
 8008684:	e7da      	b.n	800863c <_strtod_l+0x1ec>
 8008686:	2b08      	cmp	r3, #8
 8008688:	f103 0301 	add.w	r3, r3, #1
 800868c:	dc03      	bgt.n	8008696 <_strtod_l+0x246>
 800868e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008690:	434e      	muls	r6, r1
 8008692:	960a      	str	r6, [sp, #40]	@ 0x28
 8008694:	e7e7      	b.n	8008666 <_strtod_l+0x216>
 8008696:	2b10      	cmp	r3, #16
 8008698:	bfde      	ittt	le
 800869a:	9e08      	ldrle	r6, [sp, #32]
 800869c:	434e      	mulle	r6, r1
 800869e:	9608      	strle	r6, [sp, #32]
 80086a0:	e7e1      	b.n	8008666 <_strtod_l+0x216>
 80086a2:	280f      	cmp	r0, #15
 80086a4:	dceb      	bgt.n	800867e <_strtod_l+0x22e>
 80086a6:	9808      	ldr	r0, [sp, #32]
 80086a8:	230a      	movs	r3, #10
 80086aa:	fb03 2300 	mla	r3, r3, r0, r2
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	e7e5      	b.n	800867e <_strtod_l+0x22e>
 80086b2:	4629      	mov	r1, r5
 80086b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b6:	1c50      	adds	r0, r2, #1
 80086b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80086ba:	7852      	ldrb	r2, [r2, #1]
 80086bc:	4618      	mov	r0, r3
 80086be:	460d      	mov	r5, r1
 80086c0:	e7b1      	b.n	8008626 <_strtod_l+0x1d6>
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	2301      	movs	r3, #1
 80086c8:	e77d      	b.n	80085c6 <_strtod_l+0x176>
 80086ca:	f04f 0c00 	mov.w	ip, #0
 80086ce:	1ca2      	adds	r2, r4, #2
 80086d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80086d2:	78a2      	ldrb	r2, [r4, #2]
 80086d4:	e785      	b.n	80085e2 <_strtod_l+0x192>
 80086d6:	f04f 0c01 	mov.w	ip, #1
 80086da:	e7f8      	b.n	80086ce <_strtod_l+0x27e>
 80086dc:	0800a528 	.word	0x0800a528
 80086e0:	0800a510 	.word	0x0800a510
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086ea:	1c51      	adds	r1, r2, #1
 80086ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80086ee:	7852      	ldrb	r2, [r2, #1]
 80086f0:	2a30      	cmp	r2, #48	@ 0x30
 80086f2:	d0f9      	beq.n	80086e8 <_strtod_l+0x298>
 80086f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086f8:	2908      	cmp	r1, #8
 80086fa:	f63f af78 	bhi.w	80085ee <_strtod_l+0x19e>
 80086fe:	3a30      	subs	r2, #48	@ 0x30
 8008700:	920e      	str	r2, [sp, #56]	@ 0x38
 8008702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008704:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008706:	f04f 080a 	mov.w	r8, #10
 800870a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800870c:	1c56      	adds	r6, r2, #1
 800870e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008710:	7852      	ldrb	r2, [r2, #1]
 8008712:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008716:	f1be 0f09 	cmp.w	lr, #9
 800871a:	d939      	bls.n	8008790 <_strtod_l+0x340>
 800871c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800871e:	1a76      	subs	r6, r6, r1
 8008720:	2e08      	cmp	r6, #8
 8008722:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008726:	dc03      	bgt.n	8008730 <_strtod_l+0x2e0>
 8008728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800872a:	4588      	cmp	r8, r1
 800872c:	bfa8      	it	ge
 800872e:	4688      	movge	r8, r1
 8008730:	f1bc 0f00 	cmp.w	ip, #0
 8008734:	d001      	beq.n	800873a <_strtod_l+0x2ea>
 8008736:	f1c8 0800 	rsb	r8, r8, #0
 800873a:	2d00      	cmp	r5, #0
 800873c:	d14e      	bne.n	80087dc <_strtod_l+0x38c>
 800873e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008740:	4308      	orrs	r0, r1
 8008742:	f47f aebe 	bne.w	80084c2 <_strtod_l+0x72>
 8008746:	2b00      	cmp	r3, #0
 8008748:	f47f aed6 	bne.w	80084f8 <_strtod_l+0xa8>
 800874c:	2a69      	cmp	r2, #105	@ 0x69
 800874e:	d028      	beq.n	80087a2 <_strtod_l+0x352>
 8008750:	dc25      	bgt.n	800879e <_strtod_l+0x34e>
 8008752:	2a49      	cmp	r2, #73	@ 0x49
 8008754:	d025      	beq.n	80087a2 <_strtod_l+0x352>
 8008756:	2a4e      	cmp	r2, #78	@ 0x4e
 8008758:	f47f aece 	bne.w	80084f8 <_strtod_l+0xa8>
 800875c:	499b      	ldr	r1, [pc, #620]	@ (80089cc <_strtod_l+0x57c>)
 800875e:	a819      	add	r0, sp, #100	@ 0x64
 8008760:	f001 f9ee 	bl	8009b40 <__match>
 8008764:	2800      	cmp	r0, #0
 8008766:	f43f aec7 	beq.w	80084f8 <_strtod_l+0xa8>
 800876a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b28      	cmp	r3, #40	@ 0x28
 8008770:	d12e      	bne.n	80087d0 <_strtod_l+0x380>
 8008772:	4997      	ldr	r1, [pc, #604]	@ (80089d0 <_strtod_l+0x580>)
 8008774:	aa1c      	add	r2, sp, #112	@ 0x70
 8008776:	a819      	add	r0, sp, #100	@ 0x64
 8008778:	f001 f9f6 	bl	8009b68 <__hexnan>
 800877c:	2805      	cmp	r0, #5
 800877e:	d127      	bne.n	80087d0 <_strtod_l+0x380>
 8008780:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008782:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008786:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800878a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800878e:	e698      	b.n	80084c2 <_strtod_l+0x72>
 8008790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008792:	fb08 2101 	mla	r1, r8, r1, r2
 8008796:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800879a:	920e      	str	r2, [sp, #56]	@ 0x38
 800879c:	e7b5      	b.n	800870a <_strtod_l+0x2ba>
 800879e:	2a6e      	cmp	r2, #110	@ 0x6e
 80087a0:	e7da      	b.n	8008758 <_strtod_l+0x308>
 80087a2:	498c      	ldr	r1, [pc, #560]	@ (80089d4 <_strtod_l+0x584>)
 80087a4:	a819      	add	r0, sp, #100	@ 0x64
 80087a6:	f001 f9cb 	bl	8009b40 <__match>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f43f aea4 	beq.w	80084f8 <_strtod_l+0xa8>
 80087b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087b2:	4989      	ldr	r1, [pc, #548]	@ (80089d8 <_strtod_l+0x588>)
 80087b4:	3b01      	subs	r3, #1
 80087b6:	a819      	add	r0, sp, #100	@ 0x64
 80087b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80087ba:	f001 f9c1 	bl	8009b40 <__match>
 80087be:	b910      	cbnz	r0, 80087c6 <_strtod_l+0x376>
 80087c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087c2:	3301      	adds	r3, #1
 80087c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80087c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80089e8 <_strtod_l+0x598>
 80087ca:	f04f 0a00 	mov.w	sl, #0
 80087ce:	e678      	b.n	80084c2 <_strtod_l+0x72>
 80087d0:	4882      	ldr	r0, [pc, #520]	@ (80089dc <_strtod_l+0x58c>)
 80087d2:	f000 fef1 	bl	80095b8 <nan>
 80087d6:	ec5b ab10 	vmov	sl, fp, d0
 80087da:	e672      	b.n	80084c2 <_strtod_l+0x72>
 80087dc:	eba8 0309 	sub.w	r3, r8, r9
 80087e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	bf08      	it	eq
 80087e8:	462f      	moveq	r7, r5
 80087ea:	2d10      	cmp	r5, #16
 80087ec:	462c      	mov	r4, r5
 80087ee:	bfa8      	it	ge
 80087f0:	2410      	movge	r4, #16
 80087f2:	f7f7 fea7 	bl	8000544 <__aeabi_ui2d>
 80087f6:	2d09      	cmp	r5, #9
 80087f8:	4682      	mov	sl, r0
 80087fa:	468b      	mov	fp, r1
 80087fc:	dc13      	bgt.n	8008826 <_strtod_l+0x3d6>
 80087fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	f43f ae5e 	beq.w	80084c2 <_strtod_l+0x72>
 8008806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008808:	dd78      	ble.n	80088fc <_strtod_l+0x4ac>
 800880a:	2b16      	cmp	r3, #22
 800880c:	dc5f      	bgt.n	80088ce <_strtod_l+0x47e>
 800880e:	4974      	ldr	r1, [pc, #464]	@ (80089e0 <_strtod_l+0x590>)
 8008810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008818:	4652      	mov	r2, sl
 800881a:	465b      	mov	r3, fp
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	e64d      	b.n	80084c2 <_strtod_l+0x72>
 8008826:	4b6e      	ldr	r3, [pc, #440]	@ (80089e0 <_strtod_l+0x590>)
 8008828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800882c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008830:	f7f7 ff02 	bl	8000638 <__aeabi_dmul>
 8008834:	4682      	mov	sl, r0
 8008836:	9808      	ldr	r0, [sp, #32]
 8008838:	468b      	mov	fp, r1
 800883a:	f7f7 fe83 	bl	8000544 <__aeabi_ui2d>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4650      	mov	r0, sl
 8008844:	4659      	mov	r1, fp
 8008846:	f7f7 fd41 	bl	80002cc <__adddf3>
 800884a:	2d0f      	cmp	r5, #15
 800884c:	4682      	mov	sl, r0
 800884e:	468b      	mov	fp, r1
 8008850:	ddd5      	ble.n	80087fe <_strtod_l+0x3ae>
 8008852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008854:	1b2c      	subs	r4, r5, r4
 8008856:	441c      	add	r4, r3
 8008858:	2c00      	cmp	r4, #0
 800885a:	f340 8096 	ble.w	800898a <_strtod_l+0x53a>
 800885e:	f014 030f 	ands.w	r3, r4, #15
 8008862:	d00a      	beq.n	800887a <_strtod_l+0x42a>
 8008864:	495e      	ldr	r1, [pc, #376]	@ (80089e0 <_strtod_l+0x590>)
 8008866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008872:	f7f7 fee1 	bl	8000638 <__aeabi_dmul>
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	f034 040f 	bics.w	r4, r4, #15
 800887e:	d073      	beq.n	8008968 <_strtod_l+0x518>
 8008880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008884:	dd48      	ble.n	8008918 <_strtod_l+0x4c8>
 8008886:	2400      	movs	r4, #0
 8008888:	46a0      	mov	r8, r4
 800888a:	940a      	str	r4, [sp, #40]	@ 0x28
 800888c:	46a1      	mov	r9, r4
 800888e:	9a05      	ldr	r2, [sp, #20]
 8008890:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80089e8 <_strtod_l+0x598>
 8008894:	2322      	movs	r3, #34	@ 0x22
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f04f 0a00 	mov.w	sl, #0
 800889c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f43f ae0f 	beq.w	80084c2 <_strtod_l+0x72>
 80088a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	f7ff f942 	bl	8007b30 <_Bfree>
 80088ac:	9805      	ldr	r0, [sp, #20]
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7ff f93e 	bl	8007b30 <_Bfree>
 80088b4:	9805      	ldr	r0, [sp, #20]
 80088b6:	4641      	mov	r1, r8
 80088b8:	f7ff f93a 	bl	8007b30 <_Bfree>
 80088bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	f7ff f936 	bl	8007b30 <_Bfree>
 80088c4:	9805      	ldr	r0, [sp, #20]
 80088c6:	4621      	mov	r1, r4
 80088c8:	f7ff f932 	bl	8007b30 <_Bfree>
 80088cc:	e5f9      	b.n	80084c2 <_strtod_l+0x72>
 80088ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80088d4:	4293      	cmp	r3, r2
 80088d6:	dbbc      	blt.n	8008852 <_strtod_l+0x402>
 80088d8:	4c41      	ldr	r4, [pc, #260]	@ (80089e0 <_strtod_l+0x590>)
 80088da:	f1c5 050f 	rsb	r5, r5, #15
 80088de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ea:	f7f7 fea5 	bl	8000638 <__aeabi_dmul>
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	1b5d      	subs	r5, r3, r5
 80088f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088fa:	e78f      	b.n	800881c <_strtod_l+0x3cc>
 80088fc:	3316      	adds	r3, #22
 80088fe:	dba8      	blt.n	8008852 <_strtod_l+0x402>
 8008900:	4b37      	ldr	r3, [pc, #220]	@ (80089e0 <_strtod_l+0x590>)
 8008902:	eba9 0808 	sub.w	r8, r9, r8
 8008906:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800890a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800890e:	4650      	mov	r0, sl
 8008910:	4659      	mov	r1, fp
 8008912:	f7f7 ffbb 	bl	800088c <__aeabi_ddiv>
 8008916:	e783      	b.n	8008820 <_strtod_l+0x3d0>
 8008918:	4b32      	ldr	r3, [pc, #200]	@ (80089e4 <_strtod_l+0x594>)
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	2300      	movs	r3, #0
 800891e:	1124      	asrs	r4, r4, #4
 8008920:	4650      	mov	r0, sl
 8008922:	4659      	mov	r1, fp
 8008924:	461e      	mov	r6, r3
 8008926:	2c01      	cmp	r4, #1
 8008928:	dc21      	bgt.n	800896e <_strtod_l+0x51e>
 800892a:	b10b      	cbz	r3, 8008930 <_strtod_l+0x4e0>
 800892c:	4682      	mov	sl, r0
 800892e:	468b      	mov	fp, r1
 8008930:	492c      	ldr	r1, [pc, #176]	@ (80089e4 <_strtod_l+0x594>)
 8008932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008942:	f7f7 fe79 	bl	8000638 <__aeabi_dmul>
 8008946:	4b28      	ldr	r3, [pc, #160]	@ (80089e8 <_strtod_l+0x598>)
 8008948:	460a      	mov	r2, r1
 800894a:	400b      	ands	r3, r1
 800894c:	4927      	ldr	r1, [pc, #156]	@ (80089ec <_strtod_l+0x59c>)
 800894e:	428b      	cmp	r3, r1
 8008950:	4682      	mov	sl, r0
 8008952:	d898      	bhi.n	8008886 <_strtod_l+0x436>
 8008954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008958:	428b      	cmp	r3, r1
 800895a:	bf86      	itte	hi
 800895c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80089f0 <_strtod_l+0x5a0>
 8008960:	f04f 3aff 	movhi.w	sl, #4294967295
 8008964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008968:	2300      	movs	r3, #0
 800896a:	9308      	str	r3, [sp, #32]
 800896c:	e07a      	b.n	8008a64 <_strtod_l+0x614>
 800896e:	07e2      	lsls	r2, r4, #31
 8008970:	d505      	bpl.n	800897e <_strtod_l+0x52e>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fe5e 	bl	8000638 <__aeabi_dmul>
 800897c:	2301      	movs	r3, #1
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	3208      	adds	r2, #8
 8008982:	3601      	adds	r6, #1
 8008984:	1064      	asrs	r4, r4, #1
 8008986:	9208      	str	r2, [sp, #32]
 8008988:	e7cd      	b.n	8008926 <_strtod_l+0x4d6>
 800898a:	d0ed      	beq.n	8008968 <_strtod_l+0x518>
 800898c:	4264      	negs	r4, r4
 800898e:	f014 020f 	ands.w	r2, r4, #15
 8008992:	d00a      	beq.n	80089aa <_strtod_l+0x55a>
 8008994:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <_strtod_l+0x590>)
 8008996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899a:	4650      	mov	r0, sl
 800899c:	4659      	mov	r1, fp
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 ff73 	bl	800088c <__aeabi_ddiv>
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	1124      	asrs	r4, r4, #4
 80089ac:	d0dc      	beq.n	8008968 <_strtod_l+0x518>
 80089ae:	2c1f      	cmp	r4, #31
 80089b0:	dd20      	ble.n	80089f4 <_strtod_l+0x5a4>
 80089b2:	2400      	movs	r4, #0
 80089b4:	46a0      	mov	r8, r4
 80089b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80089b8:	46a1      	mov	r9, r4
 80089ba:	9a05      	ldr	r2, [sp, #20]
 80089bc:	2322      	movs	r3, #34	@ 0x22
 80089be:	f04f 0a00 	mov.w	sl, #0
 80089c2:	f04f 0b00 	mov.w	fp, #0
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	e768      	b.n	800889c <_strtod_l+0x44c>
 80089ca:	bf00      	nop
 80089cc:	0800a301 	.word	0x0800a301
 80089d0:	0800a514 	.word	0x0800a514
 80089d4:	0800a2f9 	.word	0x0800a2f9
 80089d8:	0800a330 	.word	0x0800a330
 80089dc:	0800a6bd 	.word	0x0800a6bd
 80089e0:	0800a448 	.word	0x0800a448
 80089e4:	0800a420 	.word	0x0800a420
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	7ca00000 	.word	0x7ca00000
 80089f0:	7fefffff 	.word	0x7fefffff
 80089f4:	f014 0310 	ands.w	r3, r4, #16
 80089f8:	bf18      	it	ne
 80089fa:	236a      	movne	r3, #106	@ 0x6a
 80089fc:	4ea9      	ldr	r6, [pc, #676]	@ (8008ca4 <_strtod_l+0x854>)
 80089fe:	9308      	str	r3, [sp, #32]
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	2300      	movs	r3, #0
 8008a06:	07e2      	lsls	r2, r4, #31
 8008a08:	d504      	bpl.n	8008a14 <_strtod_l+0x5c4>
 8008a0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a0e:	f7f7 fe13 	bl	8000638 <__aeabi_dmul>
 8008a12:	2301      	movs	r3, #1
 8008a14:	1064      	asrs	r4, r4, #1
 8008a16:	f106 0608 	add.w	r6, r6, #8
 8008a1a:	d1f4      	bne.n	8008a06 <_strtod_l+0x5b6>
 8008a1c:	b10b      	cbz	r3, 8008a22 <_strtod_l+0x5d2>
 8008a1e:	4682      	mov	sl, r0
 8008a20:	468b      	mov	fp, r1
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	b1b3      	cbz	r3, 8008a54 <_strtod_l+0x604>
 8008a26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	4659      	mov	r1, fp
 8008a32:	dd0f      	ble.n	8008a54 <_strtod_l+0x604>
 8008a34:	2b1f      	cmp	r3, #31
 8008a36:	dd55      	ble.n	8008ae4 <_strtod_l+0x694>
 8008a38:	2b34      	cmp	r3, #52	@ 0x34
 8008a3a:	bfde      	ittt	le
 8008a3c:	f04f 33ff 	movle.w	r3, #4294967295
 8008a40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008a44:	4093      	lslle	r3, r2
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	bfcc      	ite	gt
 8008a4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a50:	ea03 0b01 	andle.w	fp, r3, r1
 8008a54:	2200      	movs	r2, #0
 8008a56:	2300      	movs	r3, #0
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f8 f854 	bl	8000b08 <__aeabi_dcmpeq>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d1a6      	bne.n	80089b2 <_strtod_l+0x562>
 8008a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a6a:	9805      	ldr	r0, [sp, #20]
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	463a      	mov	r2, r7
 8008a70:	f7ff f8c6 	bl	8007c00 <__s2b>
 8008a74:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f af05 	beq.w	8008886 <_strtod_l+0x436>
 8008a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	eba9 0308 	sub.w	r3, r9, r8
 8008a84:	bfa8      	it	ge
 8008a86:	2300      	movge	r3, #0
 8008a88:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a90:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a92:	46a0      	mov	r8, r4
 8008a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	6859      	ldr	r1, [r3, #4]
 8008a9a:	f7ff f809 	bl	8007ab0 <_Balloc>
 8008a9e:	4681      	mov	r9, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f43f aef4 	beq.w	800888e <_strtod_l+0x43e>
 8008aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	3202      	adds	r2, #2
 8008aac:	f103 010c 	add.w	r1, r3, #12
 8008ab0:	0092      	lsls	r2, r2, #2
 8008ab2:	300c      	adds	r0, #12
 8008ab4:	f000 fd72 	bl	800959c <memcpy>
 8008ab8:	ec4b ab10 	vmov	d0, sl, fp
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ac0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008ac2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ac6:	f7ff fbd7 	bl	8008278 <__d2b>
 8008aca:	901a      	str	r0, [sp, #104]	@ 0x68
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f aede 	beq.w	800888e <_strtod_l+0x43e>
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	f7ff f929 	bl	8007d2c <__i2b>
 8008ada:	4680      	mov	r8, r0
 8008adc:	b948      	cbnz	r0, 8008af2 <_strtod_l+0x6a2>
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	e6d4      	b.n	800888e <_strtod_l+0x43e>
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	ea03 0a0a 	and.w	sl, r3, sl
 8008af0:	e7b0      	b.n	8008a54 <_strtod_l+0x604>
 8008af2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008af4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	bfab      	itete	ge
 8008afa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008afc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008afe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008b00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008b02:	bfac      	ite	ge
 8008b04:	18ef      	addge	r7, r5, r3
 8008b06:	1b5e      	sublt	r6, r3, r5
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	1aed      	subs	r5, r5, r3
 8008b0c:	4415      	add	r5, r2
 8008b0e:	4b66      	ldr	r3, [pc, #408]	@ (8008ca8 <_strtod_l+0x858>)
 8008b10:	3d01      	subs	r5, #1
 8008b12:	429d      	cmp	r5, r3
 8008b14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008b18:	da50      	bge.n	8008bbc <_strtod_l+0x76c>
 8008b1a:	1b5b      	subs	r3, r3, r5
 8008b1c:	2b1f      	cmp	r3, #31
 8008b1e:	eba2 0203 	sub.w	r2, r2, r3
 8008b22:	f04f 0101 	mov.w	r1, #1
 8008b26:	dc3d      	bgt.n	8008ba4 <_strtod_l+0x754>
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b32:	18bd      	adds	r5, r7, r2
 8008b34:	9b08      	ldr	r3, [sp, #32]
 8008b36:	42af      	cmp	r7, r5
 8008b38:	4416      	add	r6, r2
 8008b3a:	441e      	add	r6, r3
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	bfa8      	it	ge
 8008b40:	462b      	movge	r3, r5
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	bfa8      	it	ge
 8008b46:	4633      	movge	r3, r6
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bfc2      	ittt	gt
 8008b4c:	1aed      	subgt	r5, r5, r3
 8008b4e:	1af6      	subgt	r6, r6, r3
 8008b50:	1aff      	subgt	r7, r7, r3
 8008b52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd16      	ble.n	8008b86 <_strtod_l+0x736>
 8008b58:	4641      	mov	r1, r8
 8008b5a:	9805      	ldr	r0, [sp, #20]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f7ff f9a5 	bl	8007eac <__pow5mult>
 8008b62:	4680      	mov	r8, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d0ba      	beq.n	8008ade <_strtod_l+0x68e>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f7ff f8f3 	bl	8007d58 <__multiply>
 8008b72:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f43f ae8a 	beq.w	800888e <_strtod_l+0x43e>
 8008b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	f7fe ffd7 	bl	8007b30 <_Bfree>
 8008b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	dc1d      	bgt.n	8008bc6 <_strtod_l+0x776>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd23      	ble.n	8008bd8 <_strtod_l+0x788>
 8008b90:	4649      	mov	r1, r9
 8008b92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b94:	9805      	ldr	r0, [sp, #20]
 8008b96:	f7ff f989 	bl	8007eac <__pow5mult>
 8008b9a:	4681      	mov	r9, r0
 8008b9c:	b9e0      	cbnz	r0, 8008bd8 <_strtod_l+0x788>
 8008b9e:	f04f 0900 	mov.w	r9, #0
 8008ba2:	e674      	b.n	800888e <_strtod_l+0x43e>
 8008ba4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ba8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008bac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008bb0:	35e2      	adds	r5, #226	@ 0xe2
 8008bb2:	fa01 f305 	lsl.w	r3, r1, r5
 8008bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008bba:	e7ba      	b.n	8008b32 <_strtod_l+0x6e2>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bc4:	e7b5      	b.n	8008b32 <_strtod_l+0x6e2>
 8008bc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bc8:	9805      	ldr	r0, [sp, #20]
 8008bca:	462a      	mov	r2, r5
 8008bcc:	f7ff f9c8 	bl	8007f60 <__lshift>
 8008bd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d1d9      	bne.n	8008b8a <_strtod_l+0x73a>
 8008bd6:	e65a      	b.n	800888e <_strtod_l+0x43e>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	dd07      	ble.n	8008bec <_strtod_l+0x79c>
 8008bdc:	4649      	mov	r1, r9
 8008bde:	9805      	ldr	r0, [sp, #20]
 8008be0:	4632      	mov	r2, r6
 8008be2:	f7ff f9bd 	bl	8007f60 <__lshift>
 8008be6:	4681      	mov	r9, r0
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0d8      	beq.n	8008b9e <_strtod_l+0x74e>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	dd08      	ble.n	8008c02 <_strtod_l+0x7b2>
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	f7ff f9b3 	bl	8007f60 <__lshift>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f43f ae46 	beq.w	800888e <_strtod_l+0x43e>
 8008c02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	464a      	mov	r2, r9
 8008c08:	f7ff fa32 	bl	8008070 <__mdiff>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f ae3d 	beq.w	800888e <_strtod_l+0x43e>
 8008c14:	68c3      	ldr	r3, [r0, #12]
 8008c16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60c3      	str	r3, [r0, #12]
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	f7ff fa0b 	bl	8008038 <__mcmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	da46      	bge.n	8008cb4 <_strtod_l+0x864>
 8008c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c28:	ea53 030a 	orrs.w	r3, r3, sl
 8008c2c:	d16c      	bne.n	8008d08 <_strtod_l+0x8b8>
 8008c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d168      	bne.n	8008d08 <_strtod_l+0x8b8>
 8008c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c3a:	0d1b      	lsrs	r3, r3, #20
 8008c3c:	051b      	lsls	r3, r3, #20
 8008c3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c42:	d961      	bls.n	8008d08 <_strtod_l+0x8b8>
 8008c44:	6963      	ldr	r3, [r4, #20]
 8008c46:	b913      	cbnz	r3, 8008c4e <_strtod_l+0x7fe>
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	dd5c      	ble.n	8008d08 <_strtod_l+0x8b8>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	2201      	movs	r2, #1
 8008c52:	9805      	ldr	r0, [sp, #20]
 8008c54:	f7ff f984 	bl	8007f60 <__lshift>
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	f7ff f9ec 	bl	8008038 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dd51      	ble.n	8008d08 <_strtod_l+0x8b8>
 8008c64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	0d1b      	lsrs	r3, r3, #20
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	d06b      	beq.n	8008d4a <_strtod_l+0x8fa>
 8008c72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c76:	d868      	bhi.n	8008d4a <_strtod_l+0x8fa>
 8008c78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c7c:	f67f ae9d 	bls.w	80089ba <_strtod_l+0x56a>
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <_strtod_l+0x85c>)
 8008c82:	4650      	mov	r0, sl
 8008c84:	4659      	mov	r1, fp
 8008c86:	2200      	movs	r2, #0
 8008c88:	f7f7 fcd6 	bl	8000638 <__aeabi_dmul>
 8008c8c:	4b08      	ldr	r3, [pc, #32]	@ (8008cb0 <_strtod_l+0x860>)
 8008c8e:	400b      	ands	r3, r1
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f47f ae05 	bne.w	80088a4 <_strtod_l+0x454>
 8008c9a:	9a05      	ldr	r2, [sp, #20]
 8008c9c:	2322      	movs	r3, #34	@ 0x22
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e600      	b.n	80088a4 <_strtod_l+0x454>
 8008ca2:	bf00      	nop
 8008ca4:	0800a540 	.word	0x0800a540
 8008ca8:	fffffc02 	.word	0xfffffc02
 8008cac:	39500000 	.word	0x39500000
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008cb8:	d165      	bne.n	8008d86 <_strtod_l+0x936>
 8008cba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cc0:	b35a      	cbz	r2, 8008d1a <_strtod_l+0x8ca>
 8008cc2:	4a9f      	ldr	r2, [pc, #636]	@ (8008f40 <_strtod_l+0xaf0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d12b      	bne.n	8008d20 <_strtod_l+0x8d0>
 8008cc8:	9b08      	ldr	r3, [sp, #32]
 8008cca:	4651      	mov	r1, sl
 8008ccc:	b303      	cbz	r3, 8008d10 <_strtod_l+0x8c0>
 8008cce:	4b9d      	ldr	r3, [pc, #628]	@ (8008f44 <_strtod_l+0xaf4>)
 8008cd0:	465a      	mov	r2, fp
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cdc:	d81b      	bhi.n	8008d16 <_strtod_l+0x8c6>
 8008cde:	0d1b      	lsrs	r3, r3, #20
 8008ce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	d119      	bne.n	8008d20 <_strtod_l+0x8d0>
 8008cec:	4b96      	ldr	r3, [pc, #600]	@ (8008f48 <_strtod_l+0xaf8>)
 8008cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d102      	bne.n	8008cfa <_strtod_l+0x8aa>
 8008cf4:	3101      	adds	r1, #1
 8008cf6:	f43f adca 	beq.w	800888e <_strtod_l+0x43e>
 8008cfa:	4b92      	ldr	r3, [pc, #584]	@ (8008f44 <_strtod_l+0xaf4>)
 8008cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cfe:	401a      	ands	r2, r3
 8008d00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008d04:	f04f 0a00 	mov.w	sl, #0
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1b8      	bne.n	8008c80 <_strtod_l+0x830>
 8008d0e:	e5c9      	b.n	80088a4 <_strtod_l+0x454>
 8008d10:	f04f 33ff 	mov.w	r3, #4294967295
 8008d14:	e7e8      	b.n	8008ce8 <_strtod_l+0x898>
 8008d16:	4613      	mov	r3, r2
 8008d18:	e7e6      	b.n	8008ce8 <_strtod_l+0x898>
 8008d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8008d1e:	d0a1      	beq.n	8008c64 <_strtod_l+0x814>
 8008d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d22:	b1db      	cbz	r3, 8008d5c <_strtod_l+0x90c>
 8008d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d26:	4213      	tst	r3, r2
 8008d28:	d0ee      	beq.n	8008d08 <_strtod_l+0x8b8>
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2c:	9a08      	ldr	r2, [sp, #32]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	b1bb      	cbz	r3, 8008d64 <_strtod_l+0x914>
 8008d34:	f7ff fb6e 	bl	8008414 <sulp>
 8008d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d3c:	ec53 2b10 	vmov	r2, r3, d0
 8008d40:	f7f7 fac4 	bl	80002cc <__adddf3>
 8008d44:	4682      	mov	sl, r0
 8008d46:	468b      	mov	fp, r1
 8008d48:	e7de      	b.n	8008d08 <_strtod_l+0x8b8>
 8008d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008d4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d56:	f04f 3aff 	mov.w	sl, #4294967295
 8008d5a:	e7d5      	b.n	8008d08 <_strtod_l+0x8b8>
 8008d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d5e:	ea13 0f0a 	tst.w	r3, sl
 8008d62:	e7e1      	b.n	8008d28 <_strtod_l+0x8d8>
 8008d64:	f7ff fb56 	bl	8008414 <sulp>
 8008d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d6c:	ec53 2b10 	vmov	r2, r3, d0
 8008d70:	f7f7 faaa 	bl	80002c8 <__aeabi_dsub>
 8008d74:	2200      	movs	r2, #0
 8008d76:	2300      	movs	r3, #0
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	f7f7 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0c1      	beq.n	8008d08 <_strtod_l+0x8b8>
 8008d84:	e619      	b.n	80089ba <_strtod_l+0x56a>
 8008d86:	4641      	mov	r1, r8
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff facd 	bl	8008328 <__ratio>
 8008d8e:	ec57 6b10 	vmov	r6, r7, d0
 8008d92:	2200      	movs	r2, #0
 8008d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fec8 	bl	8000b30 <__aeabi_dcmple>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d06f      	beq.n	8008e84 <_strtod_l+0xa34>
 8008da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d17a      	bne.n	8008ea0 <_strtod_l+0xa50>
 8008daa:	f1ba 0f00 	cmp.w	sl, #0
 8008dae:	d158      	bne.n	8008e62 <_strtod_l+0xa12>
 8008db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d15a      	bne.n	8008e70 <_strtod_l+0xa20>
 8008dba:	4b64      	ldr	r3, [pc, #400]	@ (8008f4c <_strtod_l+0xafc>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	f7f7 feab 	bl	8000b1c <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d159      	bne.n	8008e7e <_strtod_l+0xa2e>
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4b60      	ldr	r3, [pc, #384]	@ (8008f50 <_strtod_l+0xb00>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fc31 	bl	8000638 <__aeabi_dmul>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460f      	mov	r7, r1
 8008dda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008dde:	9606      	str	r6, [sp, #24]
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de6:	4d57      	ldr	r5, [pc, #348]	@ (8008f44 <_strtod_l+0xaf4>)
 8008de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dee:	401d      	ands	r5, r3
 8008df0:	4b58      	ldr	r3, [pc, #352]	@ (8008f54 <_strtod_l+0xb04>)
 8008df2:	429d      	cmp	r5, r3
 8008df4:	f040 80b2 	bne.w	8008f5c <_strtod_l+0xb0c>
 8008df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dfe:	ec4b ab10 	vmov	d0, sl, fp
 8008e02:	f7ff f9c9 	bl	8008198 <__ulp>
 8008e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e0a:	ec51 0b10 	vmov	r0, r1, d0
 8008e0e:	f7f7 fc13 	bl	8000638 <__aeabi_dmul>
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	f7f7 fa59 	bl	80002cc <__adddf3>
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4949      	ldr	r1, [pc, #292]	@ (8008f44 <_strtod_l+0xaf4>)
 8008e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8008f58 <_strtod_l+0xb08>)
 8008e20:	4019      	ands	r1, r3
 8008e22:	4291      	cmp	r1, r2
 8008e24:	4682      	mov	sl, r0
 8008e26:	d942      	bls.n	8008eae <_strtod_l+0xa5e>
 8008e28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e2a:	4b47      	ldr	r3, [pc, #284]	@ (8008f48 <_strtod_l+0xaf8>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d103      	bne.n	8008e38 <_strtod_l+0x9e8>
 8008e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e32:	3301      	adds	r3, #1
 8008e34:	f43f ad2b 	beq.w	800888e <_strtod_l+0x43e>
 8008e38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008f48 <_strtod_l+0xaf8>
 8008e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e42:	9805      	ldr	r0, [sp, #20]
 8008e44:	f7fe fe74 	bl	8007b30 <_Bfree>
 8008e48:	9805      	ldr	r0, [sp, #20]
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7fe fe70 	bl	8007b30 <_Bfree>
 8008e50:	9805      	ldr	r0, [sp, #20]
 8008e52:	4641      	mov	r1, r8
 8008e54:	f7fe fe6c 	bl	8007b30 <_Bfree>
 8008e58:	9805      	ldr	r0, [sp, #20]
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	f7fe fe68 	bl	8007b30 <_Bfree>
 8008e60:	e618      	b.n	8008a94 <_strtod_l+0x644>
 8008e62:	f1ba 0f01 	cmp.w	sl, #1
 8008e66:	d103      	bne.n	8008e70 <_strtod_l+0xa20>
 8008e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f43f ada5 	beq.w	80089ba <_strtod_l+0x56a>
 8008e70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008f20 <_strtod_l+0xad0>
 8008e74:	4f35      	ldr	r7, [pc, #212]	@ (8008f4c <_strtod_l+0xafc>)
 8008e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	e7b1      	b.n	8008de2 <_strtod_l+0x992>
 8008e7e:	4f34      	ldr	r7, [pc, #208]	@ (8008f50 <_strtod_l+0xb00>)
 8008e80:	2600      	movs	r6, #0
 8008e82:	e7aa      	b.n	8008dda <_strtod_l+0x98a>
 8008e84:	4b32      	ldr	r3, [pc, #200]	@ (8008f50 <_strtod_l+0xb00>)
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f7f7 fbd4 	bl	8000638 <__aeabi_dmul>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e92:	4606      	mov	r6, r0
 8008e94:	460f      	mov	r7, r1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d09f      	beq.n	8008dda <_strtod_l+0x98a>
 8008e9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e9e:	e7a0      	b.n	8008de2 <_strtod_l+0x992>
 8008ea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008f28 <_strtod_l+0xad8>
 8008ea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ea8:	ec57 6b17 	vmov	r6, r7, d7
 8008eac:	e799      	b.n	8008de2 <_strtod_l+0x992>
 8008eae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1c1      	bne.n	8008e40 <_strtod_l+0x9f0>
 8008ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ec0:	0d1b      	lsrs	r3, r3, #20
 8008ec2:	051b      	lsls	r3, r3, #20
 8008ec4:	429d      	cmp	r5, r3
 8008ec6:	d1bb      	bne.n	8008e40 <_strtod_l+0x9f0>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 ff14 	bl	8000cf8 <__aeabi_d2lz>
 8008ed0:	f7f7 fb84 	bl	80005dc <__aeabi_l2d>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 f9f4 	bl	80002c8 <__aeabi_dsub>
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eee:	ea46 060a 	orr.w	r6, r6, sl
 8008ef2:	431e      	orrs	r6, r3
 8008ef4:	d06f      	beq.n	8008fd6 <_strtod_l+0xb86>
 8008ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f30 <_strtod_l+0xae0>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f7f7 fe0e 	bl	8000b1c <__aeabi_dcmplt>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f47f accf 	bne.w	80088a4 <_strtod_l+0x454>
 8008f06:	a30c      	add	r3, pc, #48	@ (adr r3, 8008f38 <_strtod_l+0xae8>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f10:	f7f7 fe22 	bl	8000b58 <__aeabi_dcmpgt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d093      	beq.n	8008e40 <_strtod_l+0x9f0>
 8008f18:	e4c4      	b.n	80088a4 <_strtod_l+0x454>
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w
 8008f20:	00000000 	.word	0x00000000
 8008f24:	bff00000 	.word	0xbff00000
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	94a03595 	.word	0x94a03595
 8008f34:	3fdfffff 	.word	0x3fdfffff
 8008f38:	35afe535 	.word	0x35afe535
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	000fffff 	.word	0x000fffff
 8008f44:	7ff00000 	.word	0x7ff00000
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	7fe00000 	.word	0x7fe00000
 8008f58:	7c9fffff 	.word	0x7c9fffff
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	b323      	cbz	r3, 8008faa <_strtod_l+0xb5a>
 8008f60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f64:	d821      	bhi.n	8008faa <_strtod_l+0xb5a>
 8008f66:	a328      	add	r3, pc, #160	@ (adr r3, 8009008 <_strtod_l+0xbb8>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 fdde 	bl	8000b30 <__aeabi_dcmple>
 8008f74:	b1a0      	cbz	r0, 8008fa0 <_strtod_l+0xb50>
 8008f76:	4639      	mov	r1, r7
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7f7 fe35 	bl	8000be8 <__aeabi_d2uiz>
 8008f7e:	2801      	cmp	r0, #1
 8008f80:	bf38      	it	cc
 8008f82:	2001      	movcc	r0, #1
 8008f84:	f7f7 fade 	bl	8000544 <__aeabi_ui2d>
 8008f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	b9fb      	cbnz	r3, 8008fd0 <_strtod_l+0xb80>
 8008f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f94:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f96:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008fa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008faa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008fb2:	f7ff f8f1 	bl	8008198 <__ulp>
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	ec53 2b10 	vmov	r2, r3, d0
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 fb3b 	bl	8000638 <__aeabi_dmul>
 8008fc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008fc6:	f7f7 f981 	bl	80002cc <__adddf3>
 8008fca:	4682      	mov	sl, r0
 8008fcc:	468b      	mov	fp, r1
 8008fce:	e770      	b.n	8008eb2 <_strtod_l+0xa62>
 8008fd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008fd4:	e7e0      	b.n	8008f98 <_strtod_l+0xb48>
 8008fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009010 <_strtod_l+0xbc0>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 8008fe0:	e798      	b.n	8008f14 <_strtod_l+0xac4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	f7ff ba6d 	b.w	80084ca <_strtod_l+0x7a>
 8008ff0:	2a65      	cmp	r2, #101	@ 0x65
 8008ff2:	f43f ab66 	beq.w	80086c2 <_strtod_l+0x272>
 8008ff6:	2a45      	cmp	r2, #69	@ 0x45
 8008ff8:	f43f ab63 	beq.w	80086c2 <_strtod_l+0x272>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f7ff bb9e 	b.w	800873e <_strtod_l+0x2ee>
 8009002:	bf00      	nop
 8009004:	f3af 8000 	nop.w
 8009008:	ffc00000 	.word	0xffc00000
 800900c:	41dfffff 	.word	0x41dfffff
 8009010:	94a03595 	.word	0x94a03595
 8009014:	3fcfffff 	.word	0x3fcfffff

08009018 <_strtod_r>:
 8009018:	4b01      	ldr	r3, [pc, #4]	@ (8009020 <_strtod_r+0x8>)
 800901a:	f7ff ba19 	b.w	8008450 <_strtod_l>
 800901e:	bf00      	nop
 8009020:	20000108 	.word	0x20000108

08009024 <_strtol_l.constprop.0>:
 8009024:	2b24      	cmp	r3, #36	@ 0x24
 8009026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902a:	4686      	mov	lr, r0
 800902c:	4690      	mov	r8, r2
 800902e:	d801      	bhi.n	8009034 <_strtol_l.constprop.0+0x10>
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <_strtol_l.constprop.0+0x1e>
 8009034:	f7fd fdbc 	bl	8006bb0 <__errno>
 8009038:	2316      	movs	r3, #22
 800903a:	6003      	str	r3, [r0, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009042:	4834      	ldr	r0, [pc, #208]	@ (8009114 <_strtol_l.constprop.0+0xf0>)
 8009044:	460d      	mov	r5, r1
 8009046:	462a      	mov	r2, r5
 8009048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800904c:	5d06      	ldrb	r6, [r0, r4]
 800904e:	f016 0608 	ands.w	r6, r6, #8
 8009052:	d1f8      	bne.n	8009046 <_strtol_l.constprop.0+0x22>
 8009054:	2c2d      	cmp	r4, #45	@ 0x2d
 8009056:	d12d      	bne.n	80090b4 <_strtol_l.constprop.0+0x90>
 8009058:	782c      	ldrb	r4, [r5, #0]
 800905a:	2601      	movs	r6, #1
 800905c:	1c95      	adds	r5, r2, #2
 800905e:	f033 0210 	bics.w	r2, r3, #16
 8009062:	d109      	bne.n	8009078 <_strtol_l.constprop.0+0x54>
 8009064:	2c30      	cmp	r4, #48	@ 0x30
 8009066:	d12a      	bne.n	80090be <_strtol_l.constprop.0+0x9a>
 8009068:	782a      	ldrb	r2, [r5, #0]
 800906a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800906e:	2a58      	cmp	r2, #88	@ 0x58
 8009070:	d125      	bne.n	80090be <_strtol_l.constprop.0+0x9a>
 8009072:	786c      	ldrb	r4, [r5, #1]
 8009074:	2310      	movs	r3, #16
 8009076:	3502      	adds	r5, #2
 8009078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800907c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009080:	2200      	movs	r2, #0
 8009082:	fbbc f9f3 	udiv	r9, ip, r3
 8009086:	4610      	mov	r0, r2
 8009088:	fb03 ca19 	mls	sl, r3, r9, ip
 800908c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009090:	2f09      	cmp	r7, #9
 8009092:	d81b      	bhi.n	80090cc <_strtol_l.constprop.0+0xa8>
 8009094:	463c      	mov	r4, r7
 8009096:	42a3      	cmp	r3, r4
 8009098:	dd27      	ble.n	80090ea <_strtol_l.constprop.0+0xc6>
 800909a:	1c57      	adds	r7, r2, #1
 800909c:	d007      	beq.n	80090ae <_strtol_l.constprop.0+0x8a>
 800909e:	4581      	cmp	r9, r0
 80090a0:	d320      	bcc.n	80090e4 <_strtol_l.constprop.0+0xc0>
 80090a2:	d101      	bne.n	80090a8 <_strtol_l.constprop.0+0x84>
 80090a4:	45a2      	cmp	sl, r4
 80090a6:	db1d      	blt.n	80090e4 <_strtol_l.constprop.0+0xc0>
 80090a8:	fb00 4003 	mla	r0, r0, r3, r4
 80090ac:	2201      	movs	r2, #1
 80090ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b2:	e7eb      	b.n	800908c <_strtol_l.constprop.0+0x68>
 80090b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80090b6:	bf04      	itt	eq
 80090b8:	782c      	ldrbeq	r4, [r5, #0]
 80090ba:	1c95      	addeq	r5, r2, #2
 80090bc:	e7cf      	b.n	800905e <_strtol_l.constprop.0+0x3a>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1da      	bne.n	8009078 <_strtol_l.constprop.0+0x54>
 80090c2:	2c30      	cmp	r4, #48	@ 0x30
 80090c4:	bf0c      	ite	eq
 80090c6:	2308      	moveq	r3, #8
 80090c8:	230a      	movne	r3, #10
 80090ca:	e7d5      	b.n	8009078 <_strtol_l.constprop.0+0x54>
 80090cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090d0:	2f19      	cmp	r7, #25
 80090d2:	d801      	bhi.n	80090d8 <_strtol_l.constprop.0+0xb4>
 80090d4:	3c37      	subs	r4, #55	@ 0x37
 80090d6:	e7de      	b.n	8009096 <_strtol_l.constprop.0+0x72>
 80090d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090dc:	2f19      	cmp	r7, #25
 80090de:	d804      	bhi.n	80090ea <_strtol_l.constprop.0+0xc6>
 80090e0:	3c57      	subs	r4, #87	@ 0x57
 80090e2:	e7d8      	b.n	8009096 <_strtol_l.constprop.0+0x72>
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	e7e1      	b.n	80090ae <_strtol_l.constprop.0+0x8a>
 80090ea:	1c53      	adds	r3, r2, #1
 80090ec:	d108      	bne.n	8009100 <_strtol_l.constprop.0+0xdc>
 80090ee:	2322      	movs	r3, #34	@ 0x22
 80090f0:	f8ce 3000 	str.w	r3, [lr]
 80090f4:	4660      	mov	r0, ip
 80090f6:	f1b8 0f00 	cmp.w	r8, #0
 80090fa:	d0a0      	beq.n	800903e <_strtol_l.constprop.0+0x1a>
 80090fc:	1e69      	subs	r1, r5, #1
 80090fe:	e006      	b.n	800910e <_strtol_l.constprop.0+0xea>
 8009100:	b106      	cbz	r6, 8009104 <_strtol_l.constprop.0+0xe0>
 8009102:	4240      	negs	r0, r0
 8009104:	f1b8 0f00 	cmp.w	r8, #0
 8009108:	d099      	beq.n	800903e <_strtol_l.constprop.0+0x1a>
 800910a:	2a00      	cmp	r2, #0
 800910c:	d1f6      	bne.n	80090fc <_strtol_l.constprop.0+0xd8>
 800910e:	f8c8 1000 	str.w	r1, [r8]
 8009112:	e794      	b.n	800903e <_strtol_l.constprop.0+0x1a>
 8009114:	0800a569 	.word	0x0800a569

08009118 <_strtol_r>:
 8009118:	f7ff bf84 	b.w	8009024 <_strtol_l.constprop.0>

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	461f      	mov	r7, r3
 8009124:	42be      	cmp	r6, r7
 8009126:	680b      	ldr	r3, [r1, #0]
 8009128:	4682      	mov	sl, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4690      	mov	r8, r2
 800912e:	d82d      	bhi.n	800918c <__ssputs_r+0x70>
 8009130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009138:	d026      	beq.n	8009188 <__ssputs_r+0x6c>
 800913a:	6965      	ldr	r5, [r4, #20]
 800913c:	6909      	ldr	r1, [r1, #16]
 800913e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009142:	eba3 0901 	sub.w	r9, r3, r1
 8009146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914a:	1c7b      	adds	r3, r7, #1
 800914c:	444b      	add	r3, r9
 800914e:	106d      	asrs	r5, r5, #1
 8009150:	429d      	cmp	r5, r3
 8009152:	bf38      	it	cc
 8009154:	461d      	movcc	r5, r3
 8009156:	0553      	lsls	r3, r2, #21
 8009158:	d527      	bpl.n	80091aa <__ssputs_r+0x8e>
 800915a:	4629      	mov	r1, r5
 800915c:	f7fe fc1c 	bl	8007998 <_malloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	b360      	cbz	r0, 80091be <__ssputs_r+0xa2>
 8009164:	6921      	ldr	r1, [r4, #16]
 8009166:	464a      	mov	r2, r9
 8009168:	f000 fa18 	bl	800959c <memcpy>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6126      	str	r6, [r4, #16]
 800917a:	6165      	str	r5, [r4, #20]
 800917c:	444e      	add	r6, r9
 800917e:	eba5 0509 	sub.w	r5, r5, r9
 8009182:	6026      	str	r6, [r4, #0]
 8009184:	60a5      	str	r5, [r4, #8]
 8009186:	463e      	mov	r6, r7
 8009188:	42be      	cmp	r6, r7
 800918a:	d900      	bls.n	800918e <__ssputs_r+0x72>
 800918c:	463e      	mov	r6, r7
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	4632      	mov	r2, r6
 8009192:	4641      	mov	r1, r8
 8009194:	f000 f9c6 	bl	8009524 <memmove>
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	1b9b      	subs	r3, r3, r6
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	4433      	add	r3, r6
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	2000      	movs	r0, #0
 80091a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091aa:	462a      	mov	r2, r5
 80091ac:	f000 fd89 	bl	8009cc2 <_realloc_r>
 80091b0:	4606      	mov	r6, r0
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1e0      	bne.n	8009178 <__ssputs_r+0x5c>
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	4650      	mov	r0, sl
 80091ba:	f7fe fb79 	bl	80078b0 <_free_r>
 80091be:	230c      	movs	r3, #12
 80091c0:	f8ca 3000 	str.w	r3, [sl]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e7e9      	b.n	80091a6 <__ssputs_r+0x8a>
	...

080091d4 <_svfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4698      	mov	r8, r3
 80091da:	898b      	ldrh	r3, [r1, #12]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	b09d      	sub	sp, #116	@ 0x74
 80091e0:	4607      	mov	r7, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	d510      	bpl.n	800920a <_svfiprintf_r+0x36>
 80091e8:	690b      	ldr	r3, [r1, #16]
 80091ea:	b973      	cbnz	r3, 800920a <_svfiprintf_r+0x36>
 80091ec:	2140      	movs	r1, #64	@ 0x40
 80091ee:	f7fe fbd3 	bl	8007998 <_malloc_r>
 80091f2:	6028      	str	r0, [r5, #0]
 80091f4:	6128      	str	r0, [r5, #16]
 80091f6:	b930      	cbnz	r0, 8009206 <_svfiprintf_r+0x32>
 80091f8:	230c      	movs	r3, #12
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b01d      	add	sp, #116	@ 0x74
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	2340      	movs	r3, #64	@ 0x40
 8009208:	616b      	str	r3, [r5, #20]
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	@ 0x24
 800920e:	2320      	movs	r3, #32
 8009210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009214:	f8cd 800c 	str.w	r8, [sp, #12]
 8009218:	2330      	movs	r3, #48	@ 0x30
 800921a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093b8 <_svfiprintf_r+0x1e4>
 800921e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	4623      	mov	r3, r4
 8009228:	469a      	mov	sl, r3
 800922a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922e:	b10a      	cbz	r2, 8009234 <_svfiprintf_r+0x60>
 8009230:	2a25      	cmp	r2, #37	@ 0x25
 8009232:	d1f9      	bne.n	8009228 <_svfiprintf_r+0x54>
 8009234:	ebba 0b04 	subs.w	fp, sl, r4
 8009238:	d00b      	beq.n	8009252 <_svfiprintf_r+0x7e>
 800923a:	465b      	mov	r3, fp
 800923c:	4622      	mov	r2, r4
 800923e:	4629      	mov	r1, r5
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ff6b 	bl	800911c <__ssputs_r>
 8009246:	3001      	adds	r0, #1
 8009248:	f000 80a7 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800924c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800924e:	445a      	add	r2, fp
 8009250:	9209      	str	r2, [sp, #36]	@ 0x24
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 809f 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800925c:	2300      	movs	r3, #0
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009266:	f10a 0a01 	add.w	sl, sl, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009272:	931a      	str	r3, [sp, #104]	@ 0x68
 8009274:	4654      	mov	r4, sl
 8009276:	2205      	movs	r2, #5
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	484e      	ldr	r0, [pc, #312]	@ (80093b8 <_svfiprintf_r+0x1e4>)
 800927e:	f7f6 ffc7 	bl	8000210 <memchr>
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	b9d8      	cbnz	r0, 80092be <_svfiprintf_r+0xea>
 8009286:	06d0      	lsls	r0, r2, #27
 8009288:	bf44      	itt	mi
 800928a:	2320      	movmi	r3, #32
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009290:	0711      	lsls	r1, r2, #28
 8009292:	bf44      	itt	mi
 8009294:	232b      	movmi	r3, #43	@ 0x2b
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a0:	d015      	beq.n	80092ce <_svfiprintf_r+0xfa>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4654      	mov	r4, sl
 80092a6:	2000      	movs	r0, #0
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4621      	mov	r1, r4
 80092ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b2:	3b30      	subs	r3, #48	@ 0x30
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d94b      	bls.n	8009350 <_svfiprintf_r+0x17c>
 80092b8:	b1b0      	cbz	r0, 80092e8 <_svfiprintf_r+0x114>
 80092ba:	9207      	str	r2, [sp, #28]
 80092bc:	e014      	b.n	80092e8 <_svfiprintf_r+0x114>
 80092be:	eba0 0308 	sub.w	r3, r0, r8
 80092c2:	fa09 f303 	lsl.w	r3, r9, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	46a2      	mov	sl, r4
 80092cc:	e7d2      	b.n	8009274 <_svfiprintf_r+0xa0>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbb      	ittet	lt
 80092da:	425b      	neglt	r3, r3
 80092dc:	f042 0202 	orrlt.w	r2, r2, #2
 80092e0:	9307      	strge	r3, [sp, #28]
 80092e2:	9307      	strlt	r3, [sp, #28]
 80092e4:	bfb8      	it	lt
 80092e6:	9204      	strlt	r2, [sp, #16]
 80092e8:	7823      	ldrb	r3, [r4, #0]
 80092ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ec:	d10a      	bne.n	8009304 <_svfiprintf_r+0x130>
 80092ee:	7863      	ldrb	r3, [r4, #1]
 80092f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f2:	d132      	bne.n	800935a <_svfiprintf_r+0x186>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009300:	3402      	adds	r4, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093c8 <_svfiprintf_r+0x1f4>
 8009308:	7821      	ldrb	r1, [r4, #0]
 800930a:	2203      	movs	r2, #3
 800930c:	4650      	mov	r0, sl
 800930e:	f7f6 ff7f 	bl	8000210 <memchr>
 8009312:	b138      	cbz	r0, 8009324 <_svfiprintf_r+0x150>
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	2240      	movs	r2, #64	@ 0x40
 800931c:	4082      	lsls	r2, r0
 800931e:	4313      	orrs	r3, r2
 8009320:	3401      	adds	r4, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	4824      	ldr	r0, [pc, #144]	@ (80093bc <_svfiprintf_r+0x1e8>)
 800932a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800932e:	2206      	movs	r2, #6
 8009330:	f7f6 ff6e 	bl	8000210 <memchr>
 8009334:	2800      	cmp	r0, #0
 8009336:	d036      	beq.n	80093a6 <_svfiprintf_r+0x1d2>
 8009338:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <_svfiprintf_r+0x1ec>)
 800933a:	bb1b      	cbnz	r3, 8009384 <_svfiprintf_r+0x1b0>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	3307      	adds	r3, #7
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	3308      	adds	r3, #8
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934a:	4433      	add	r3, r6
 800934c:	9309      	str	r3, [sp, #36]	@ 0x24
 800934e:	e76a      	b.n	8009226 <_svfiprintf_r+0x52>
 8009350:	fb0c 3202 	mla	r2, ip, r2, r3
 8009354:	460c      	mov	r4, r1
 8009356:	2001      	movs	r0, #1
 8009358:	e7a8      	b.n	80092ac <_svfiprintf_r+0xd8>
 800935a:	2300      	movs	r3, #0
 800935c:	3401      	adds	r4, #1
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4619      	mov	r1, r3
 8009362:	f04f 0c0a 	mov.w	ip, #10
 8009366:	4620      	mov	r0, r4
 8009368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936c:	3a30      	subs	r2, #48	@ 0x30
 800936e:	2a09      	cmp	r2, #9
 8009370:	d903      	bls.n	800937a <_svfiprintf_r+0x1a6>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0c6      	beq.n	8009304 <_svfiprintf_r+0x130>
 8009376:	9105      	str	r1, [sp, #20]
 8009378:	e7c4      	b.n	8009304 <_svfiprintf_r+0x130>
 800937a:	fb0c 2101 	mla	r1, ip, r1, r2
 800937e:	4604      	mov	r4, r0
 8009380:	2301      	movs	r3, #1
 8009382:	e7f0      	b.n	8009366 <_svfiprintf_r+0x192>
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	462a      	mov	r2, r5
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 800938c:	a904      	add	r1, sp, #16
 800938e:	4638      	mov	r0, r7
 8009390:	f7fc fcca 	bl	8005d28 <_printf_float>
 8009394:	1c42      	adds	r2, r0, #1
 8009396:	4606      	mov	r6, r0
 8009398:	d1d6      	bne.n	8009348 <_svfiprintf_r+0x174>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	065b      	lsls	r3, r3, #25
 800939e:	f53f af2d 	bmi.w	80091fc <_svfiprintf_r+0x28>
 80093a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a4:	e72c      	b.n	8009200 <_svfiprintf_r+0x2c>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b05      	ldr	r3, [pc, #20]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7fc ff51 	bl	8006258 <_printf_i>
 80093b6:	e7ed      	b.n	8009394 <_svfiprintf_r+0x1c0>
 80093b8:	0800a669 	.word	0x0800a669
 80093bc:	0800a673 	.word	0x0800a673
 80093c0:	08005d29 	.word	0x08005d29
 80093c4:	0800911d 	.word	0x0800911d
 80093c8:	0800a66f 	.word	0x0800a66f

080093cc <__sflush_r>:
 80093cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	0716      	lsls	r6, r2, #28
 80093d6:	4605      	mov	r5, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d454      	bmi.n	8009486 <__sflush_r+0xba>
 80093dc:	684b      	ldr	r3, [r1, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc02      	bgt.n	80093e8 <__sflush_r+0x1c>
 80093e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd48      	ble.n	800947a <__sflush_r+0xae>
 80093e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d045      	beq.n	800947a <__sflush_r+0xae>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093f4:	682f      	ldr	r7, [r5, #0]
 80093f6:	6a21      	ldr	r1, [r4, #32]
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	d030      	beq.n	800945e <__sflush_r+0x92>
 80093fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	0759      	lsls	r1, r3, #29
 8009402:	d505      	bpl.n	8009410 <__sflush_r+0x44>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800940a:	b10b      	cbz	r3, 8009410 <__sflush_r+0x44>
 800940c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009414:	6a21      	ldr	r1, [r4, #32]
 8009416:	4628      	mov	r0, r5
 8009418:	47b0      	blx	r6
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	d106      	bne.n	800942e <__sflush_r+0x62>
 8009420:	6829      	ldr	r1, [r5, #0]
 8009422:	291d      	cmp	r1, #29
 8009424:	d82b      	bhi.n	800947e <__sflush_r+0xb2>
 8009426:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <__sflush_r+0x104>)
 8009428:	410a      	asrs	r2, r1
 800942a:	07d6      	lsls	r6, r2, #31
 800942c:	d427      	bmi.n	800947e <__sflush_r+0xb2>
 800942e:	2200      	movs	r2, #0
 8009430:	6062      	str	r2, [r4, #4]
 8009432:	04d9      	lsls	r1, r3, #19
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	d504      	bpl.n	8009444 <__sflush_r+0x78>
 800943a:	1c42      	adds	r2, r0, #1
 800943c:	d101      	bne.n	8009442 <__sflush_r+0x76>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b903      	cbnz	r3, 8009444 <__sflush_r+0x78>
 8009442:	6560      	str	r0, [r4, #84]	@ 0x54
 8009444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	b1b9      	cbz	r1, 800947a <__sflush_r+0xae>
 800944a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944e:	4299      	cmp	r1, r3
 8009450:	d002      	beq.n	8009458 <__sflush_r+0x8c>
 8009452:	4628      	mov	r0, r5
 8009454:	f7fe fa2c 	bl	80078b0 <_free_r>
 8009458:	2300      	movs	r3, #0
 800945a:	6363      	str	r3, [r4, #52]	@ 0x34
 800945c:	e00d      	b.n	800947a <__sflush_r+0xae>
 800945e:	2301      	movs	r3, #1
 8009460:	4628      	mov	r0, r5
 8009462:	47b0      	blx	r6
 8009464:	4602      	mov	r2, r0
 8009466:	1c50      	adds	r0, r2, #1
 8009468:	d1c9      	bne.n	80093fe <__sflush_r+0x32>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0c6      	beq.n	80093fe <__sflush_r+0x32>
 8009470:	2b1d      	cmp	r3, #29
 8009472:	d001      	beq.n	8009478 <__sflush_r+0xac>
 8009474:	2b16      	cmp	r3, #22
 8009476:	d11e      	bne.n	80094b6 <__sflush_r+0xea>
 8009478:	602f      	str	r7, [r5, #0]
 800947a:	2000      	movs	r0, #0
 800947c:	e022      	b.n	80094c4 <__sflush_r+0xf8>
 800947e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009482:	b21b      	sxth	r3, r3
 8009484:	e01b      	b.n	80094be <__sflush_r+0xf2>
 8009486:	690f      	ldr	r7, [r1, #16]
 8009488:	2f00      	cmp	r7, #0
 800948a:	d0f6      	beq.n	800947a <__sflush_r+0xae>
 800948c:	0793      	lsls	r3, r2, #30
 800948e:	680e      	ldr	r6, [r1, #0]
 8009490:	bf08      	it	eq
 8009492:	694b      	ldreq	r3, [r1, #20]
 8009494:	600f      	str	r7, [r1, #0]
 8009496:	bf18      	it	ne
 8009498:	2300      	movne	r3, #0
 800949a:	eba6 0807 	sub.w	r8, r6, r7
 800949e:	608b      	str	r3, [r1, #8]
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	dde9      	ble.n	800947a <__sflush_r+0xae>
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094aa:	4643      	mov	r3, r8
 80094ac:	463a      	mov	r2, r7
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b0      	blx	r6
 80094b2:	2800      	cmp	r0, #0
 80094b4:	dc08      	bgt.n	80094c8 <__sflush_r+0xfc>
 80094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	4407      	add	r7, r0
 80094ca:	eba8 0800 	sub.w	r8, r8, r0
 80094ce:	e7e7      	b.n	80094a0 <__sflush_r+0xd4>
 80094d0:	dfbffffe 	.word	0xdfbffffe

080094d4 <_fflush_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b913      	cbnz	r3, 80094e4 <_fflush_r+0x10>
 80094de:	2500      	movs	r5, #0
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	b118      	cbz	r0, 80094ee <_fflush_r+0x1a>
 80094e6:	6a03      	ldr	r3, [r0, #32]
 80094e8:	b90b      	cbnz	r3, 80094ee <_fflush_r+0x1a>
 80094ea:	f7fd fa75 	bl	80069d8 <__sinit>
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0f3      	beq.n	80094de <_fflush_r+0xa>
 80094f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d404      	bmi.n	8009506 <_fflush_r+0x32>
 80094fc:	0599      	lsls	r1, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_fflush_r+0x32>
 8009500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009502:	f7fd fb80 	bl	8006c06 <__retarget_lock_acquire_recursive>
 8009506:	4628      	mov	r0, r5
 8009508:	4621      	mov	r1, r4
 800950a:	f7ff ff5f 	bl	80093cc <__sflush_r>
 800950e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	4605      	mov	r5, r0
 8009514:	d4e4      	bmi.n	80094e0 <_fflush_r+0xc>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d4e1      	bmi.n	80094e0 <_fflush_r+0xc>
 800951c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951e:	f7fd fb73 	bl	8006c08 <__retarget_lock_release_recursive>
 8009522:	e7dd      	b.n	80094e0 <_fflush_r+0xc>

08009524 <memmove>:
 8009524:	4288      	cmp	r0, r1
 8009526:	b510      	push	{r4, lr}
 8009528:	eb01 0402 	add.w	r4, r1, r2
 800952c:	d902      	bls.n	8009534 <memmove+0x10>
 800952e:	4284      	cmp	r4, r0
 8009530:	4623      	mov	r3, r4
 8009532:	d807      	bhi.n	8009544 <memmove+0x20>
 8009534:	1e43      	subs	r3, r0, #1
 8009536:	42a1      	cmp	r1, r4
 8009538:	d008      	beq.n	800954c <memmove+0x28>
 800953a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800953e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009542:	e7f8      	b.n	8009536 <memmove+0x12>
 8009544:	4402      	add	r2, r0
 8009546:	4601      	mov	r1, r0
 8009548:	428a      	cmp	r2, r1
 800954a:	d100      	bne.n	800954e <memmove+0x2a>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009556:	e7f7      	b.n	8009548 <memmove+0x24>

08009558 <strncmp>:
 8009558:	b510      	push	{r4, lr}
 800955a:	b16a      	cbz	r2, 8009578 <strncmp+0x20>
 800955c:	3901      	subs	r1, #1
 800955e:	1884      	adds	r4, r0, r2
 8009560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009568:	429a      	cmp	r2, r3
 800956a:	d103      	bne.n	8009574 <strncmp+0x1c>
 800956c:	42a0      	cmp	r0, r4
 800956e:	d001      	beq.n	8009574 <strncmp+0x1c>
 8009570:	2a00      	cmp	r2, #0
 8009572:	d1f5      	bne.n	8009560 <strncmp+0x8>
 8009574:	1ad0      	subs	r0, r2, r3
 8009576:	bd10      	pop	{r4, pc}
 8009578:	4610      	mov	r0, r2
 800957a:	e7fc      	b.n	8009576 <strncmp+0x1e>

0800957c <_sbrk_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	@ (8009598 <_sbrk_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f9 fa08 	bl	800299c <_sbrk>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_sbrk_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_sbrk_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000568 	.word	0x20000568

0800959c <memcpy>:
 800959c:	440a      	add	r2, r1
 800959e:	4291      	cmp	r1, r2
 80095a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a4:	d100      	bne.n	80095a8 <memcpy+0xc>
 80095a6:	4770      	bx	lr
 80095a8:	b510      	push	{r4, lr}
 80095aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b2:	4291      	cmp	r1, r2
 80095b4:	d1f9      	bne.n	80095aa <memcpy+0xe>
 80095b6:	bd10      	pop	{r4, pc}

080095b8 <nan>:
 80095b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80095c0 <nan+0x8>
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	00000000 	.word	0x00000000
 80095c4:	7ff80000 	.word	0x7ff80000

080095c8 <__assert_func>:
 80095c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ca:	4614      	mov	r4, r2
 80095cc:	461a      	mov	r2, r3
 80095ce:	4b09      	ldr	r3, [pc, #36]	@ (80095f4 <__assert_func+0x2c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4605      	mov	r5, r0
 80095d4:	68d8      	ldr	r0, [r3, #12]
 80095d6:	b954      	cbnz	r4, 80095ee <__assert_func+0x26>
 80095d8:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <__assert_func+0x30>)
 80095da:	461c      	mov	r4, r3
 80095dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	462b      	mov	r3, r5
 80095e4:	4905      	ldr	r1, [pc, #20]	@ (80095fc <__assert_func+0x34>)
 80095e6:	f000 fba7 	bl	8009d38 <fiprintf>
 80095ea:	f000 fbb7 	bl	8009d5c <abort>
 80095ee:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <__assert_func+0x38>)
 80095f0:	e7f4      	b.n	80095dc <__assert_func+0x14>
 80095f2:	bf00      	nop
 80095f4:	200000b8 	.word	0x200000b8
 80095f8:	0800a6bd 	.word	0x0800a6bd
 80095fc:	0800a68f 	.word	0x0800a68f
 8009600:	0800a682 	.word	0x0800a682

08009604 <_calloc_r>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	fba1 5402 	umull	r5, r4, r1, r2
 800960a:	b93c      	cbnz	r4, 800961c <_calloc_r+0x18>
 800960c:	4629      	mov	r1, r5
 800960e:	f7fe f9c3 	bl	8007998 <_malloc_r>
 8009612:	4606      	mov	r6, r0
 8009614:	b928      	cbnz	r0, 8009622 <_calloc_r+0x1e>
 8009616:	2600      	movs	r6, #0
 8009618:	4630      	mov	r0, r6
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	220c      	movs	r2, #12
 800961e:	6002      	str	r2, [r0, #0]
 8009620:	e7f9      	b.n	8009616 <_calloc_r+0x12>
 8009622:	462a      	mov	r2, r5
 8009624:	4621      	mov	r1, r4
 8009626:	f7fd fa70 	bl	8006b0a <memset>
 800962a:	e7f5      	b.n	8009618 <_calloc_r+0x14>

0800962c <rshift>:
 800962c:	6903      	ldr	r3, [r0, #16]
 800962e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800963a:	f100 0414 	add.w	r4, r0, #20
 800963e:	dd45      	ble.n	80096cc <rshift+0xa0>
 8009640:	f011 011f 	ands.w	r1, r1, #31
 8009644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800964c:	d10c      	bne.n	8009668 <rshift+0x3c>
 800964e:	f100 0710 	add.w	r7, r0, #16
 8009652:	4629      	mov	r1, r5
 8009654:	42b1      	cmp	r1, r6
 8009656:	d334      	bcc.n	80096c2 <rshift+0x96>
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	1eea      	subs	r2, r5, #3
 800965e:	4296      	cmp	r6, r2
 8009660:	bf38      	it	cc
 8009662:	2300      	movcc	r3, #0
 8009664:	4423      	add	r3, r4
 8009666:	e015      	b.n	8009694 <rshift+0x68>
 8009668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800966c:	f1c1 0820 	rsb	r8, r1, #32
 8009670:	40cf      	lsrs	r7, r1
 8009672:	f105 0e04 	add.w	lr, r5, #4
 8009676:	46a1      	mov	r9, r4
 8009678:	4576      	cmp	r6, lr
 800967a:	46f4      	mov	ip, lr
 800967c:	d815      	bhi.n	80096aa <rshift+0x7e>
 800967e:	1a9a      	subs	r2, r3, r2
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	3a04      	subs	r2, #4
 8009684:	3501      	adds	r5, #1
 8009686:	42ae      	cmp	r6, r5
 8009688:	bf38      	it	cc
 800968a:	2200      	movcc	r2, #0
 800968c:	18a3      	adds	r3, r4, r2
 800968e:	50a7      	str	r7, [r4, r2]
 8009690:	b107      	cbz	r7, 8009694 <rshift+0x68>
 8009692:	3304      	adds	r3, #4
 8009694:	1b1a      	subs	r2, r3, r4
 8009696:	42a3      	cmp	r3, r4
 8009698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800969c:	bf08      	it	eq
 800969e:	2300      	moveq	r3, #0
 80096a0:	6102      	str	r2, [r0, #16]
 80096a2:	bf08      	it	eq
 80096a4:	6143      	streq	r3, [r0, #20]
 80096a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8dc c000 	ldr.w	ip, [ip]
 80096ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80096b2:	ea4c 0707 	orr.w	r7, ip, r7
 80096b6:	f849 7b04 	str.w	r7, [r9], #4
 80096ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096be:	40cf      	lsrs	r7, r1
 80096c0:	e7da      	b.n	8009678 <rshift+0x4c>
 80096c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80096c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80096ca:	e7c3      	b.n	8009654 <rshift+0x28>
 80096cc:	4623      	mov	r3, r4
 80096ce:	e7e1      	b.n	8009694 <rshift+0x68>

080096d0 <__hexdig_fun>:
 80096d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d802      	bhi.n	80096de <__hexdig_fun+0xe>
 80096d8:	3820      	subs	r0, #32
 80096da:	b2c0      	uxtb	r0, r0
 80096dc:	4770      	bx	lr
 80096de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d801      	bhi.n	80096ea <__hexdig_fun+0x1a>
 80096e6:	3847      	subs	r0, #71	@ 0x47
 80096e8:	e7f7      	b.n	80096da <__hexdig_fun+0xa>
 80096ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d801      	bhi.n	80096f6 <__hexdig_fun+0x26>
 80096f2:	3827      	subs	r0, #39	@ 0x27
 80096f4:	e7f1      	b.n	80096da <__hexdig_fun+0xa>
 80096f6:	2000      	movs	r0, #0
 80096f8:	4770      	bx	lr
	...

080096fc <__gethex>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	b085      	sub	sp, #20
 8009702:	468a      	mov	sl, r1
 8009704:	9302      	str	r3, [sp, #8]
 8009706:	680b      	ldr	r3, [r1, #0]
 8009708:	9001      	str	r0, [sp, #4]
 800970a:	4690      	mov	r8, r2
 800970c:	1c9c      	adds	r4, r3, #2
 800970e:	46a1      	mov	r9, r4
 8009710:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009714:	2830      	cmp	r0, #48	@ 0x30
 8009716:	d0fa      	beq.n	800970e <__gethex+0x12>
 8009718:	eba9 0303 	sub.w	r3, r9, r3
 800971c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009720:	f7ff ffd6 	bl	80096d0 <__hexdig_fun>
 8009724:	4605      	mov	r5, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	d168      	bne.n	80097fc <__gethex+0x100>
 800972a:	49a0      	ldr	r1, [pc, #640]	@ (80099ac <__gethex+0x2b0>)
 800972c:	2201      	movs	r2, #1
 800972e:	4648      	mov	r0, r9
 8009730:	f7ff ff12 	bl	8009558 <strncmp>
 8009734:	4607      	mov	r7, r0
 8009736:	2800      	cmp	r0, #0
 8009738:	d167      	bne.n	800980a <__gethex+0x10e>
 800973a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800973e:	4626      	mov	r6, r4
 8009740:	f7ff ffc6 	bl	80096d0 <__hexdig_fun>
 8009744:	2800      	cmp	r0, #0
 8009746:	d062      	beq.n	800980e <__gethex+0x112>
 8009748:	4623      	mov	r3, r4
 800974a:	7818      	ldrb	r0, [r3, #0]
 800974c:	2830      	cmp	r0, #48	@ 0x30
 800974e:	4699      	mov	r9, r3
 8009750:	f103 0301 	add.w	r3, r3, #1
 8009754:	d0f9      	beq.n	800974a <__gethex+0x4e>
 8009756:	f7ff ffbb 	bl	80096d0 <__hexdig_fun>
 800975a:	fab0 f580 	clz	r5, r0
 800975e:	096d      	lsrs	r5, r5, #5
 8009760:	f04f 0b01 	mov.w	fp, #1
 8009764:	464a      	mov	r2, r9
 8009766:	4616      	mov	r6, r2
 8009768:	3201      	adds	r2, #1
 800976a:	7830      	ldrb	r0, [r6, #0]
 800976c:	f7ff ffb0 	bl	80096d0 <__hexdig_fun>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1f8      	bne.n	8009766 <__gethex+0x6a>
 8009774:	498d      	ldr	r1, [pc, #564]	@ (80099ac <__gethex+0x2b0>)
 8009776:	2201      	movs	r2, #1
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff feed 	bl	8009558 <strncmp>
 800977e:	2800      	cmp	r0, #0
 8009780:	d13f      	bne.n	8009802 <__gethex+0x106>
 8009782:	b944      	cbnz	r4, 8009796 <__gethex+0x9a>
 8009784:	1c74      	adds	r4, r6, #1
 8009786:	4622      	mov	r2, r4
 8009788:	4616      	mov	r6, r2
 800978a:	3201      	adds	r2, #1
 800978c:	7830      	ldrb	r0, [r6, #0]
 800978e:	f7ff ff9f 	bl	80096d0 <__hexdig_fun>
 8009792:	2800      	cmp	r0, #0
 8009794:	d1f8      	bne.n	8009788 <__gethex+0x8c>
 8009796:	1ba4      	subs	r4, r4, r6
 8009798:	00a7      	lsls	r7, r4, #2
 800979a:	7833      	ldrb	r3, [r6, #0]
 800979c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097a0:	2b50      	cmp	r3, #80	@ 0x50
 80097a2:	d13e      	bne.n	8009822 <__gethex+0x126>
 80097a4:	7873      	ldrb	r3, [r6, #1]
 80097a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80097a8:	d033      	beq.n	8009812 <__gethex+0x116>
 80097aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80097ac:	d034      	beq.n	8009818 <__gethex+0x11c>
 80097ae:	1c71      	adds	r1, r6, #1
 80097b0:	2400      	movs	r4, #0
 80097b2:	7808      	ldrb	r0, [r1, #0]
 80097b4:	f7ff ff8c 	bl	80096d0 <__hexdig_fun>
 80097b8:	1e43      	subs	r3, r0, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b18      	cmp	r3, #24
 80097be:	d830      	bhi.n	8009822 <__gethex+0x126>
 80097c0:	f1a0 0210 	sub.w	r2, r0, #16
 80097c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097c8:	f7ff ff82 	bl	80096d0 <__hexdig_fun>
 80097cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80097d0:	fa5f fc8c 	uxtb.w	ip, ip
 80097d4:	f1bc 0f18 	cmp.w	ip, #24
 80097d8:	f04f 030a 	mov.w	r3, #10
 80097dc:	d91e      	bls.n	800981c <__gethex+0x120>
 80097de:	b104      	cbz	r4, 80097e2 <__gethex+0xe6>
 80097e0:	4252      	negs	r2, r2
 80097e2:	4417      	add	r7, r2
 80097e4:	f8ca 1000 	str.w	r1, [sl]
 80097e8:	b1ed      	cbz	r5, 8009826 <__gethex+0x12a>
 80097ea:	f1bb 0f00 	cmp.w	fp, #0
 80097ee:	bf0c      	ite	eq
 80097f0:	2506      	moveq	r5, #6
 80097f2:	2500      	movne	r5, #0
 80097f4:	4628      	mov	r0, r5
 80097f6:	b005      	add	sp, #20
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	2500      	movs	r5, #0
 80097fe:	462c      	mov	r4, r5
 8009800:	e7b0      	b.n	8009764 <__gethex+0x68>
 8009802:	2c00      	cmp	r4, #0
 8009804:	d1c7      	bne.n	8009796 <__gethex+0x9a>
 8009806:	4627      	mov	r7, r4
 8009808:	e7c7      	b.n	800979a <__gethex+0x9e>
 800980a:	464e      	mov	r6, r9
 800980c:	462f      	mov	r7, r5
 800980e:	2501      	movs	r5, #1
 8009810:	e7c3      	b.n	800979a <__gethex+0x9e>
 8009812:	2400      	movs	r4, #0
 8009814:	1cb1      	adds	r1, r6, #2
 8009816:	e7cc      	b.n	80097b2 <__gethex+0xb6>
 8009818:	2401      	movs	r4, #1
 800981a:	e7fb      	b.n	8009814 <__gethex+0x118>
 800981c:	fb03 0002 	mla	r0, r3, r2, r0
 8009820:	e7ce      	b.n	80097c0 <__gethex+0xc4>
 8009822:	4631      	mov	r1, r6
 8009824:	e7de      	b.n	80097e4 <__gethex+0xe8>
 8009826:	eba6 0309 	sub.w	r3, r6, r9
 800982a:	3b01      	subs	r3, #1
 800982c:	4629      	mov	r1, r5
 800982e:	2b07      	cmp	r3, #7
 8009830:	dc0a      	bgt.n	8009848 <__gethex+0x14c>
 8009832:	9801      	ldr	r0, [sp, #4]
 8009834:	f7fe f93c 	bl	8007ab0 <_Balloc>
 8009838:	4604      	mov	r4, r0
 800983a:	b940      	cbnz	r0, 800984e <__gethex+0x152>
 800983c:	4b5c      	ldr	r3, [pc, #368]	@ (80099b0 <__gethex+0x2b4>)
 800983e:	4602      	mov	r2, r0
 8009840:	21e4      	movs	r1, #228	@ 0xe4
 8009842:	485c      	ldr	r0, [pc, #368]	@ (80099b4 <__gethex+0x2b8>)
 8009844:	f7ff fec0 	bl	80095c8 <__assert_func>
 8009848:	3101      	adds	r1, #1
 800984a:	105b      	asrs	r3, r3, #1
 800984c:	e7ef      	b.n	800982e <__gethex+0x132>
 800984e:	f100 0a14 	add.w	sl, r0, #20
 8009852:	2300      	movs	r3, #0
 8009854:	4655      	mov	r5, sl
 8009856:	469b      	mov	fp, r3
 8009858:	45b1      	cmp	r9, r6
 800985a:	d337      	bcc.n	80098cc <__gethex+0x1d0>
 800985c:	f845 bb04 	str.w	fp, [r5], #4
 8009860:	eba5 050a 	sub.w	r5, r5, sl
 8009864:	10ad      	asrs	r5, r5, #2
 8009866:	6125      	str	r5, [r4, #16]
 8009868:	4658      	mov	r0, fp
 800986a:	f7fe fa13 	bl	8007c94 <__hi0bits>
 800986e:	016d      	lsls	r5, r5, #5
 8009870:	f8d8 6000 	ldr.w	r6, [r8]
 8009874:	1a2d      	subs	r5, r5, r0
 8009876:	42b5      	cmp	r5, r6
 8009878:	dd54      	ble.n	8009924 <__gethex+0x228>
 800987a:	1bad      	subs	r5, r5, r6
 800987c:	4629      	mov	r1, r5
 800987e:	4620      	mov	r0, r4
 8009880:	f7fe fda7 	bl	80083d2 <__any_on>
 8009884:	4681      	mov	r9, r0
 8009886:	b178      	cbz	r0, 80098a8 <__gethex+0x1ac>
 8009888:	1e6b      	subs	r3, r5, #1
 800988a:	1159      	asrs	r1, r3, #5
 800988c:	f003 021f 	and.w	r2, r3, #31
 8009890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009894:	f04f 0901 	mov.w	r9, #1
 8009898:	fa09 f202 	lsl.w	r2, r9, r2
 800989c:	420a      	tst	r2, r1
 800989e:	d003      	beq.n	80098a8 <__gethex+0x1ac>
 80098a0:	454b      	cmp	r3, r9
 80098a2:	dc36      	bgt.n	8009912 <__gethex+0x216>
 80098a4:	f04f 0902 	mov.w	r9, #2
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff febe 	bl	800962c <rshift>
 80098b0:	442f      	add	r7, r5
 80098b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	da42      	bge.n	8009940 <__gethex+0x244>
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fe f937 	bl	8007b30 <_Bfree>
 80098c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098c4:	2300      	movs	r3, #0
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	25a3      	movs	r5, #163	@ 0xa3
 80098ca:	e793      	b.n	80097f4 <__gethex+0xf8>
 80098cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80098d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80098d2:	d012      	beq.n	80098fa <__gethex+0x1fe>
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d104      	bne.n	80098e2 <__gethex+0x1e6>
 80098d8:	f845 bb04 	str.w	fp, [r5], #4
 80098dc:	f04f 0b00 	mov.w	fp, #0
 80098e0:	465b      	mov	r3, fp
 80098e2:	7830      	ldrb	r0, [r6, #0]
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	f7ff fef3 	bl	80096d0 <__hexdig_fun>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	f000 000f 	and.w	r0, r0, #15
 80098f0:	4098      	lsls	r0, r3
 80098f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80098f6:	3304      	adds	r3, #4
 80098f8:	e7ae      	b.n	8009858 <__gethex+0x15c>
 80098fa:	45b1      	cmp	r9, r6
 80098fc:	d8ea      	bhi.n	80098d4 <__gethex+0x1d8>
 80098fe:	492b      	ldr	r1, [pc, #172]	@ (80099ac <__gethex+0x2b0>)
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff fe27 	bl	8009558 <strncmp>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	2800      	cmp	r0, #0
 800990e:	d1e1      	bne.n	80098d4 <__gethex+0x1d8>
 8009910:	e7a2      	b.n	8009858 <__gethex+0x15c>
 8009912:	1ea9      	subs	r1, r5, #2
 8009914:	4620      	mov	r0, r4
 8009916:	f7fe fd5c 	bl	80083d2 <__any_on>
 800991a:	2800      	cmp	r0, #0
 800991c:	d0c2      	beq.n	80098a4 <__gethex+0x1a8>
 800991e:	f04f 0903 	mov.w	r9, #3
 8009922:	e7c1      	b.n	80098a8 <__gethex+0x1ac>
 8009924:	da09      	bge.n	800993a <__gethex+0x23e>
 8009926:	1b75      	subs	r5, r6, r5
 8009928:	4621      	mov	r1, r4
 800992a:	9801      	ldr	r0, [sp, #4]
 800992c:	462a      	mov	r2, r5
 800992e:	f7fe fb17 	bl	8007f60 <__lshift>
 8009932:	1b7f      	subs	r7, r7, r5
 8009934:	4604      	mov	r4, r0
 8009936:	f100 0a14 	add.w	sl, r0, #20
 800993a:	f04f 0900 	mov.w	r9, #0
 800993e:	e7b8      	b.n	80098b2 <__gethex+0x1b6>
 8009940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009944:	42bd      	cmp	r5, r7
 8009946:	dd6f      	ble.n	8009a28 <__gethex+0x32c>
 8009948:	1bed      	subs	r5, r5, r7
 800994a:	42ae      	cmp	r6, r5
 800994c:	dc34      	bgt.n	80099b8 <__gethex+0x2bc>
 800994e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009952:	2b02      	cmp	r3, #2
 8009954:	d022      	beq.n	800999c <__gethex+0x2a0>
 8009956:	2b03      	cmp	r3, #3
 8009958:	d024      	beq.n	80099a4 <__gethex+0x2a8>
 800995a:	2b01      	cmp	r3, #1
 800995c:	d115      	bne.n	800998a <__gethex+0x28e>
 800995e:	42ae      	cmp	r6, r5
 8009960:	d113      	bne.n	800998a <__gethex+0x28e>
 8009962:	2e01      	cmp	r6, #1
 8009964:	d10b      	bne.n	800997e <__gethex+0x282>
 8009966:	9a02      	ldr	r2, [sp, #8]
 8009968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	2301      	movs	r3, #1
 8009970:	6123      	str	r3, [r4, #16]
 8009972:	f8ca 3000 	str.w	r3, [sl]
 8009976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009978:	2562      	movs	r5, #98	@ 0x62
 800997a:	601c      	str	r4, [r3, #0]
 800997c:	e73a      	b.n	80097f4 <__gethex+0xf8>
 800997e:	1e71      	subs	r1, r6, #1
 8009980:	4620      	mov	r0, r4
 8009982:	f7fe fd26 	bl	80083d2 <__any_on>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1ed      	bne.n	8009966 <__gethex+0x26a>
 800998a:	9801      	ldr	r0, [sp, #4]
 800998c:	4621      	mov	r1, r4
 800998e:	f7fe f8cf 	bl	8007b30 <_Bfree>
 8009992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009994:	2300      	movs	r3, #0
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	2550      	movs	r5, #80	@ 0x50
 800999a:	e72b      	b.n	80097f4 <__gethex+0xf8>
 800999c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1f3      	bne.n	800998a <__gethex+0x28e>
 80099a2:	e7e0      	b.n	8009966 <__gethex+0x26a>
 80099a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1dd      	bne.n	8009966 <__gethex+0x26a>
 80099aa:	e7ee      	b.n	800998a <__gethex+0x28e>
 80099ac:	0800a510 	.word	0x0800a510
 80099b0:	0800a3a9 	.word	0x0800a3a9
 80099b4:	0800a6be 	.word	0x0800a6be
 80099b8:	1e6f      	subs	r7, r5, #1
 80099ba:	f1b9 0f00 	cmp.w	r9, #0
 80099be:	d130      	bne.n	8009a22 <__gethex+0x326>
 80099c0:	b127      	cbz	r7, 80099cc <__gethex+0x2d0>
 80099c2:	4639      	mov	r1, r7
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7fe fd04 	bl	80083d2 <__any_on>
 80099ca:	4681      	mov	r9, r0
 80099cc:	117a      	asrs	r2, r7, #5
 80099ce:	2301      	movs	r3, #1
 80099d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099d4:	f007 071f 	and.w	r7, r7, #31
 80099d8:	40bb      	lsls	r3, r7
 80099da:	4213      	tst	r3, r2
 80099dc:	4629      	mov	r1, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	bf18      	it	ne
 80099e2:	f049 0902 	orrne.w	r9, r9, #2
 80099e6:	f7ff fe21 	bl	800962c <rshift>
 80099ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80099ee:	1b76      	subs	r6, r6, r5
 80099f0:	2502      	movs	r5, #2
 80099f2:	f1b9 0f00 	cmp.w	r9, #0
 80099f6:	d047      	beq.n	8009a88 <__gethex+0x38c>
 80099f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d015      	beq.n	8009a2c <__gethex+0x330>
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d017      	beq.n	8009a34 <__gethex+0x338>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d109      	bne.n	8009a1c <__gethex+0x320>
 8009a08:	f019 0f02 	tst.w	r9, #2
 8009a0c:	d006      	beq.n	8009a1c <__gethex+0x320>
 8009a0e:	f8da 3000 	ldr.w	r3, [sl]
 8009a12:	ea49 0903 	orr.w	r9, r9, r3
 8009a16:	f019 0f01 	tst.w	r9, #1
 8009a1a:	d10e      	bne.n	8009a3a <__gethex+0x33e>
 8009a1c:	f045 0510 	orr.w	r5, r5, #16
 8009a20:	e032      	b.n	8009a88 <__gethex+0x38c>
 8009a22:	f04f 0901 	mov.w	r9, #1
 8009a26:	e7d1      	b.n	80099cc <__gethex+0x2d0>
 8009a28:	2501      	movs	r5, #1
 8009a2a:	e7e2      	b.n	80099f2 <__gethex+0x2f6>
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	f1c3 0301 	rsb	r3, r3, #1
 8009a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0f0      	beq.n	8009a1c <__gethex+0x320>
 8009a3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a3e:	f104 0314 	add.w	r3, r4, #20
 8009a42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a4a:	f04f 0c00 	mov.w	ip, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a58:	d01b      	beq.n	8009a92 <__gethex+0x396>
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	6002      	str	r2, [r0, #0]
 8009a5e:	2d02      	cmp	r5, #2
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	d13c      	bne.n	8009ae0 <__gethex+0x3e4>
 8009a66:	f8d8 2000 	ldr.w	r2, [r8]
 8009a6a:	3a01      	subs	r2, #1
 8009a6c:	42b2      	cmp	r2, r6
 8009a6e:	d109      	bne.n	8009a84 <__gethex+0x388>
 8009a70:	1171      	asrs	r1, r6, #5
 8009a72:	2201      	movs	r2, #1
 8009a74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a78:	f006 061f 	and.w	r6, r6, #31
 8009a7c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a80:	421e      	tst	r6, r3
 8009a82:	d13a      	bne.n	8009afa <__gethex+0x3fe>
 8009a84:	f045 0520 	orr.w	r5, r5, #32
 8009a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8a:	601c      	str	r4, [r3, #0]
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	601f      	str	r7, [r3, #0]
 8009a90:	e6b0      	b.n	80097f4 <__gethex+0xf8>
 8009a92:	4299      	cmp	r1, r3
 8009a94:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a98:	d8d9      	bhi.n	8009a4e <__gethex+0x352>
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	459b      	cmp	fp, r3
 8009a9e:	db17      	blt.n	8009ad0 <__gethex+0x3d4>
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	9801      	ldr	r0, [sp, #4]
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	f7fe f803 	bl	8007ab0 <_Balloc>
 8009aaa:	4681      	mov	r9, r0
 8009aac:	b918      	cbnz	r0, 8009ab6 <__gethex+0x3ba>
 8009aae:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <__gethex+0x41c>)
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	2184      	movs	r1, #132	@ 0x84
 8009ab4:	e6c5      	b.n	8009842 <__gethex+0x146>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	3202      	adds	r2, #2
 8009aba:	f104 010c 	add.w	r1, r4, #12
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f7ff fd6b 	bl	800959c <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	f7fe f831 	bl	8007b30 <_Bfree>
 8009ace:	464c      	mov	r4, r9
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ad8:	6122      	str	r2, [r4, #16]
 8009ada:	2201      	movs	r2, #1
 8009adc:	615a      	str	r2, [r3, #20]
 8009ade:	e7be      	b.n	8009a5e <__gethex+0x362>
 8009ae0:	6922      	ldr	r2, [r4, #16]
 8009ae2:	455a      	cmp	r2, fp
 8009ae4:	dd0b      	ble.n	8009afe <__gethex+0x402>
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7ff fd9f 	bl	800962c <rshift>
 8009aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009af2:	3701      	adds	r7, #1
 8009af4:	42bb      	cmp	r3, r7
 8009af6:	f6ff aee0 	blt.w	80098ba <__gethex+0x1be>
 8009afa:	2501      	movs	r5, #1
 8009afc:	e7c2      	b.n	8009a84 <__gethex+0x388>
 8009afe:	f016 061f 	ands.w	r6, r6, #31
 8009b02:	d0fa      	beq.n	8009afa <__gethex+0x3fe>
 8009b04:	4453      	add	r3, sl
 8009b06:	f1c6 0620 	rsb	r6, r6, #32
 8009b0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b0e:	f7fe f8c1 	bl	8007c94 <__hi0bits>
 8009b12:	42b0      	cmp	r0, r6
 8009b14:	dbe7      	blt.n	8009ae6 <__gethex+0x3ea>
 8009b16:	e7f0      	b.n	8009afa <__gethex+0x3fe>
 8009b18:	0800a3a9 	.word	0x0800a3a9

08009b1c <L_shift>:
 8009b1c:	f1c2 0208 	rsb	r2, r2, #8
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	f1c2 0620 	rsb	r6, r2, #32
 8009b28:	6843      	ldr	r3, [r0, #4]
 8009b2a:	6804      	ldr	r4, [r0, #0]
 8009b2c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b30:	432c      	orrs	r4, r5
 8009b32:	40d3      	lsrs	r3, r2
 8009b34:	6004      	str	r4, [r0, #0]
 8009b36:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b3a:	4288      	cmp	r0, r1
 8009b3c:	d3f4      	bcc.n	8009b28 <L_shift+0xc>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}

08009b40 <__match>:
 8009b40:	b530      	push	{r4, r5, lr}
 8009b42:	6803      	ldr	r3, [r0, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4a:	b914      	cbnz	r4, 8009b52 <__match+0x12>
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	2001      	movs	r0, #1
 8009b50:	bd30      	pop	{r4, r5, pc}
 8009b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b5a:	2d19      	cmp	r5, #25
 8009b5c:	bf98      	it	ls
 8009b5e:	3220      	addls	r2, #32
 8009b60:	42a2      	cmp	r2, r4
 8009b62:	d0f0      	beq.n	8009b46 <__match+0x6>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7f3      	b.n	8009b50 <__match+0x10>

08009b68 <__hexnan>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	680b      	ldr	r3, [r1, #0]
 8009b6e:	6801      	ldr	r1, [r0, #0]
 8009b70:	115e      	asrs	r6, r3, #5
 8009b72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b76:	f013 031f 	ands.w	r3, r3, #31
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	bf18      	it	ne
 8009b7e:	3604      	addne	r6, #4
 8009b80:	2500      	movs	r5, #0
 8009b82:	1f37      	subs	r7, r6, #4
 8009b84:	4682      	mov	sl, r0
 8009b86:	4690      	mov	r8, r2
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b8e:	46b9      	mov	r9, r7
 8009b90:	463c      	mov	r4, r7
 8009b92:	9502      	str	r5, [sp, #8]
 8009b94:	46ab      	mov	fp, r5
 8009b96:	784a      	ldrb	r2, [r1, #1]
 8009b98:	1c4b      	adds	r3, r1, #1
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	b342      	cbz	r2, 8009bf0 <__hexnan+0x88>
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	9105      	str	r1, [sp, #20]
 8009ba2:	9204      	str	r2, [sp, #16]
 8009ba4:	f7ff fd94 	bl	80096d0 <__hexdig_fun>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d151      	bne.n	8009c50 <__hexnan+0xe8>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	9905      	ldr	r1, [sp, #20]
 8009bb0:	2a20      	cmp	r2, #32
 8009bb2:	d818      	bhi.n	8009be6 <__hexnan+0x7e>
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	459b      	cmp	fp, r3
 8009bb8:	dd13      	ble.n	8009be2 <__hexnan+0x7a>
 8009bba:	454c      	cmp	r4, r9
 8009bbc:	d206      	bcs.n	8009bcc <__hexnan+0x64>
 8009bbe:	2d07      	cmp	r5, #7
 8009bc0:	dc04      	bgt.n	8009bcc <__hexnan+0x64>
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7ff ffa8 	bl	8009b1c <L_shift>
 8009bcc:	4544      	cmp	r4, r8
 8009bce:	d952      	bls.n	8009c76 <__hexnan+0x10e>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f1a4 0904 	sub.w	r9, r4, #4
 8009bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bda:	f8cd b008 	str.w	fp, [sp, #8]
 8009bde:	464c      	mov	r4, r9
 8009be0:	461d      	mov	r5, r3
 8009be2:	9903      	ldr	r1, [sp, #12]
 8009be4:	e7d7      	b.n	8009b96 <__hexnan+0x2e>
 8009be6:	2a29      	cmp	r2, #41	@ 0x29
 8009be8:	d157      	bne.n	8009c9a <__hexnan+0x132>
 8009bea:	3102      	adds	r1, #2
 8009bec:	f8ca 1000 	str.w	r1, [sl]
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	d051      	beq.n	8009c9a <__hexnan+0x132>
 8009bf6:	454c      	cmp	r4, r9
 8009bf8:	d206      	bcs.n	8009c08 <__hexnan+0xa0>
 8009bfa:	2d07      	cmp	r5, #7
 8009bfc:	dc04      	bgt.n	8009c08 <__hexnan+0xa0>
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4649      	mov	r1, r9
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff ff8a 	bl	8009b1c <L_shift>
 8009c08:	4544      	cmp	r4, r8
 8009c0a:	d936      	bls.n	8009c7a <__hexnan+0x112>
 8009c0c:	f1a8 0204 	sub.w	r2, r8, #4
 8009c10:	4623      	mov	r3, r4
 8009c12:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c16:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c1a:	429f      	cmp	r7, r3
 8009c1c:	d2f9      	bcs.n	8009c12 <__hexnan+0xaa>
 8009c1e:	1b3b      	subs	r3, r7, r4
 8009c20:	f023 0303 	bic.w	r3, r3, #3
 8009c24:	3304      	adds	r3, #4
 8009c26:	3401      	adds	r4, #1
 8009c28:	3e03      	subs	r6, #3
 8009c2a:	42b4      	cmp	r4, r6
 8009c2c:	bf88      	it	hi
 8009c2e:	2304      	movhi	r3, #4
 8009c30:	4443      	add	r3, r8
 8009c32:	2200      	movs	r2, #0
 8009c34:	f843 2b04 	str.w	r2, [r3], #4
 8009c38:	429f      	cmp	r7, r3
 8009c3a:	d2fb      	bcs.n	8009c34 <__hexnan+0xcc>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	b91b      	cbnz	r3, 8009c48 <__hexnan+0xe0>
 8009c40:	4547      	cmp	r7, r8
 8009c42:	d128      	bne.n	8009c96 <__hexnan+0x12e>
 8009c44:	2301      	movs	r3, #1
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	2005      	movs	r0, #5
 8009c4a:	b007      	add	sp, #28
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	2d08      	cmp	r5, #8
 8009c54:	f10b 0b01 	add.w	fp, fp, #1
 8009c58:	dd06      	ble.n	8009c68 <__hexnan+0x100>
 8009c5a:	4544      	cmp	r4, r8
 8009c5c:	d9c1      	bls.n	8009be2 <__hexnan+0x7a>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c64:	2501      	movs	r5, #1
 8009c66:	3c04      	subs	r4, #4
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	f000 000f 	and.w	r0, r0, #15
 8009c6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c72:	6020      	str	r0, [r4, #0]
 8009c74:	e7b5      	b.n	8009be2 <__hexnan+0x7a>
 8009c76:	2508      	movs	r5, #8
 8009c78:	e7b3      	b.n	8009be2 <__hexnan+0x7a>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0dd      	beq.n	8009c3c <__hexnan+0xd4>
 8009c80:	f1c3 0320 	rsb	r3, r3, #32
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295
 8009c88:	40da      	lsrs	r2, r3
 8009c8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c94:	e7d2      	b.n	8009c3c <__hexnan+0xd4>
 8009c96:	3f04      	subs	r7, #4
 8009c98:	e7d0      	b.n	8009c3c <__hexnan+0xd4>
 8009c9a:	2004      	movs	r0, #4
 8009c9c:	e7d5      	b.n	8009c4a <__hexnan+0xe2>

08009c9e <__ascii_mbtowc>:
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	b901      	cbnz	r1, 8009ca4 <__ascii_mbtowc+0x6>
 8009ca2:	a901      	add	r1, sp, #4
 8009ca4:	b142      	cbz	r2, 8009cb8 <__ascii_mbtowc+0x1a>
 8009ca6:	b14b      	cbz	r3, 8009cbc <__ascii_mbtowc+0x1e>
 8009ca8:	7813      	ldrb	r3, [r2, #0]
 8009caa:	600b      	str	r3, [r1, #0]
 8009cac:	7812      	ldrb	r2, [r2, #0]
 8009cae:	1e10      	subs	r0, r2, #0
 8009cb0:	bf18      	it	ne
 8009cb2:	2001      	movne	r0, #1
 8009cb4:	b002      	add	sp, #8
 8009cb6:	4770      	bx	lr
 8009cb8:	4610      	mov	r0, r2
 8009cba:	e7fb      	b.n	8009cb4 <__ascii_mbtowc+0x16>
 8009cbc:	f06f 0001 	mvn.w	r0, #1
 8009cc0:	e7f8      	b.n	8009cb4 <__ascii_mbtowc+0x16>

08009cc2 <_realloc_r>:
 8009cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	4615      	mov	r5, r2
 8009cca:	460c      	mov	r4, r1
 8009ccc:	b921      	cbnz	r1, 8009cd8 <_realloc_r+0x16>
 8009cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	f7fd be60 	b.w	8007998 <_malloc_r>
 8009cd8:	b92a      	cbnz	r2, 8009ce6 <_realloc_r+0x24>
 8009cda:	f7fd fde9 	bl	80078b0 <_free_r>
 8009cde:	2400      	movs	r4, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce6:	f000 f840 	bl	8009d6a <_malloc_usable_size_r>
 8009cea:	4285      	cmp	r5, r0
 8009cec:	4606      	mov	r6, r0
 8009cee:	d802      	bhi.n	8009cf6 <_realloc_r+0x34>
 8009cf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cf4:	d8f4      	bhi.n	8009ce0 <_realloc_r+0x1e>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	f7fd fe4d 	bl	8007998 <_malloc_r>
 8009cfe:	4607      	mov	r7, r0
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0ec      	beq.n	8009cde <_realloc_r+0x1c>
 8009d04:	42b5      	cmp	r5, r6
 8009d06:	462a      	mov	r2, r5
 8009d08:	4621      	mov	r1, r4
 8009d0a:	bf28      	it	cs
 8009d0c:	4632      	movcs	r2, r6
 8009d0e:	f7ff fc45 	bl	800959c <memcpy>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4640      	mov	r0, r8
 8009d16:	f7fd fdcb 	bl	80078b0 <_free_r>
 8009d1a:	463c      	mov	r4, r7
 8009d1c:	e7e0      	b.n	8009ce0 <_realloc_r+0x1e>

08009d1e <__ascii_wctomb>:
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	b141      	cbz	r1, 8009d36 <__ascii_wctomb+0x18>
 8009d24:	2aff      	cmp	r2, #255	@ 0xff
 8009d26:	d904      	bls.n	8009d32 <__ascii_wctomb+0x14>
 8009d28:	228a      	movs	r2, #138	@ 0x8a
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	4770      	bx	lr
 8009d32:	700a      	strb	r2, [r1, #0]
 8009d34:	2001      	movs	r0, #1
 8009d36:	4770      	bx	lr

08009d38 <fiprintf>:
 8009d38:	b40e      	push	{r1, r2, r3}
 8009d3a:	b503      	push	{r0, r1, lr}
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	4805      	ldr	r0, [pc, #20]	@ (8009d58 <fiprintf+0x20>)
 8009d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d46:	6800      	ldr	r0, [r0, #0]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	f000 f83f 	bl	8009dcc <_vfiprintf_r>
 8009d4e:	b002      	add	sp, #8
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b003      	add	sp, #12
 8009d56:	4770      	bx	lr
 8009d58:	200000b8 	.word	0x200000b8

08009d5c <abort>:
 8009d5c:	b508      	push	{r3, lr}
 8009d5e:	2006      	movs	r0, #6
 8009d60:	f000 fa08 	bl	800a174 <raise>
 8009d64:	2001      	movs	r0, #1
 8009d66:	f7f8 fda1 	bl	80028ac <_exit>

08009d6a <_malloc_usable_size_r>:
 8009d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d6e:	1f18      	subs	r0, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfbc      	itt	lt
 8009d74:	580b      	ldrlt	r3, [r1, r0]
 8009d76:	18c0      	addlt	r0, r0, r3
 8009d78:	4770      	bx	lr

08009d7a <__sfputc_r>:
 8009d7a:	6893      	ldr	r3, [r2, #8]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	b410      	push	{r4}
 8009d82:	6093      	str	r3, [r2, #8]
 8009d84:	da08      	bge.n	8009d98 <__sfputc_r+0x1e>
 8009d86:	6994      	ldr	r4, [r2, #24]
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	db01      	blt.n	8009d90 <__sfputc_r+0x16>
 8009d8c:	290a      	cmp	r1, #10
 8009d8e:	d103      	bne.n	8009d98 <__sfputc_r+0x1e>
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	f000 b932 	b.w	8009ffc <__swbuf_r>
 8009d98:	6813      	ldr	r3, [r2, #0]
 8009d9a:	1c58      	adds	r0, r3, #1
 8009d9c:	6010      	str	r0, [r2, #0]
 8009d9e:	7019      	strb	r1, [r3, #0]
 8009da0:	4608      	mov	r0, r1
 8009da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <__sfputs_r>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	4614      	mov	r4, r2
 8009db0:	18d5      	adds	r5, r2, r3
 8009db2:	42ac      	cmp	r4, r5
 8009db4:	d101      	bne.n	8009dba <__sfputs_r+0x12>
 8009db6:	2000      	movs	r0, #0
 8009db8:	e007      	b.n	8009dca <__sfputs_r+0x22>
 8009dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff ffda 	bl	8009d7a <__sfputc_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d1f3      	bne.n	8009db2 <__sfputs_r+0xa>
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dcc <_vfiprintf_r>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	b09d      	sub	sp, #116	@ 0x74
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	4606      	mov	r6, r0
 8009dda:	b118      	cbz	r0, 8009de4 <_vfiprintf_r+0x18>
 8009ddc:	6a03      	ldr	r3, [r0, #32]
 8009dde:	b90b      	cbnz	r3, 8009de4 <_vfiprintf_r+0x18>
 8009de0:	f7fc fdfa 	bl	80069d8 <__sinit>
 8009de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009de6:	07d9      	lsls	r1, r3, #31
 8009de8:	d405      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df2:	f7fc ff08 	bl	8006c06 <__retarget_lock_acquire_recursive>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	071b      	lsls	r3, r3, #28
 8009dfa:	d501      	bpl.n	8009e00 <_vfiprintf_r+0x34>
 8009dfc:	692b      	ldr	r3, [r5, #16]
 8009dfe:	b99b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x5c>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 f938 	bl	800a078 <__swsetup_r>
 8009e08:	b170      	cbz	r0, 8009e28 <_vfiprintf_r+0x5c>
 8009e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e0c:	07dc      	lsls	r4, r3, #31
 8009e0e:	d504      	bpl.n	8009e1a <_vfiprintf_r+0x4e>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	b01d      	add	sp, #116	@ 0x74
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	0598      	lsls	r0, r3, #22
 8009e1e:	d4f7      	bmi.n	8009e10 <_vfiprintf_r+0x44>
 8009e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e22:	f7fc fef1 	bl	8006c08 <__retarget_lock_release_recursive>
 8009e26:	e7f3      	b.n	8009e10 <_vfiprintf_r+0x44>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e36:	2330      	movs	r3, #48	@ 0x30
 8009e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fe8 <_vfiprintf_r+0x21c>
 8009e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e40:	f04f 0901 	mov.w	r9, #1
 8009e44:	4623      	mov	r3, r4
 8009e46:	469a      	mov	sl, r3
 8009e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4c:	b10a      	cbz	r2, 8009e52 <_vfiprintf_r+0x86>
 8009e4e:	2a25      	cmp	r2, #37	@ 0x25
 8009e50:	d1f9      	bne.n	8009e46 <_vfiprintf_r+0x7a>
 8009e52:	ebba 0b04 	subs.w	fp, sl, r4
 8009e56:	d00b      	beq.n	8009e70 <_vfiprintf_r+0xa4>
 8009e58:	465b      	mov	r3, fp
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ffa2 	bl	8009da8 <__sfputs_r>
 8009e64:	3001      	adds	r0, #1
 8009e66:	f000 80a7 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e6c:	445a      	add	r2, fp
 8009e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e70:	f89a 3000 	ldrb.w	r3, [sl]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 809f 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e84:	f10a 0a01 	add.w	sl, sl, #1
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	9307      	str	r3, [sp, #28]
 8009e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e92:	4654      	mov	r4, sl
 8009e94:	2205      	movs	r2, #5
 8009e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9a:	4853      	ldr	r0, [pc, #332]	@ (8009fe8 <_vfiprintf_r+0x21c>)
 8009e9c:	f7f6 f9b8 	bl	8000210 <memchr>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	b9d8      	cbnz	r0, 8009edc <_vfiprintf_r+0x110>
 8009ea4:	06d1      	lsls	r1, r2, #27
 8009ea6:	bf44      	itt	mi
 8009ea8:	2320      	movmi	r3, #32
 8009eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eae:	0713      	lsls	r3, r2, #28
 8009eb0:	bf44      	itt	mi
 8009eb2:	232b      	movmi	r3, #43	@ 0x2b
 8009eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ebe:	d015      	beq.n	8009eec <_vfiprintf_r+0x120>
 8009ec0:	9a07      	ldr	r2, [sp, #28]
 8009ec2:	4654      	mov	r4, sl
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f04f 0c0a 	mov.w	ip, #10
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed0:	3b30      	subs	r3, #48	@ 0x30
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	d94b      	bls.n	8009f6e <_vfiprintf_r+0x1a2>
 8009ed6:	b1b0      	cbz	r0, 8009f06 <_vfiprintf_r+0x13a>
 8009ed8:	9207      	str	r2, [sp, #28]
 8009eda:	e014      	b.n	8009f06 <_vfiprintf_r+0x13a>
 8009edc:	eba0 0308 	sub.w	r3, r0, r8
 8009ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	46a2      	mov	sl, r4
 8009eea:	e7d2      	b.n	8009e92 <_vfiprintf_r+0xc6>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	1d19      	adds	r1, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9103      	str	r1, [sp, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bfbb      	ittet	lt
 8009ef8:	425b      	neglt	r3, r3
 8009efa:	f042 0202 	orrlt.w	r2, r2, #2
 8009efe:	9307      	strge	r3, [sp, #28]
 8009f00:	9307      	strlt	r3, [sp, #28]
 8009f02:	bfb8      	it	lt
 8009f04:	9204      	strlt	r2, [sp, #16]
 8009f06:	7823      	ldrb	r3, [r4, #0]
 8009f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0a:	d10a      	bne.n	8009f22 <_vfiprintf_r+0x156>
 8009f0c:	7863      	ldrb	r3, [r4, #1]
 8009f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f10:	d132      	bne.n	8009f78 <_vfiprintf_r+0x1ac>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9203      	str	r2, [sp, #12]
 8009f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f1e:	3402      	adds	r4, #2
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ff8 <_vfiprintf_r+0x22c>
 8009f26:	7821      	ldrb	r1, [r4, #0]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f7f6 f970 	bl	8000210 <memchr>
 8009f30:	b138      	cbz	r0, 8009f42 <_vfiprintf_r+0x176>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	eba0 000a 	sub.w	r0, r0, sl
 8009f38:	2240      	movs	r2, #64	@ 0x40
 8009f3a:	4082      	lsls	r2, r0
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	3401      	adds	r4, #1
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f46:	4829      	ldr	r0, [pc, #164]	@ (8009fec <_vfiprintf_r+0x220>)
 8009f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f4c:	2206      	movs	r2, #6
 8009f4e:	f7f6 f95f 	bl	8000210 <memchr>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d03f      	beq.n	8009fd6 <_vfiprintf_r+0x20a>
 8009f56:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <_vfiprintf_r+0x224>)
 8009f58:	bb1b      	cbnz	r3, 8009fa2 <_vfiprintf_r+0x1d6>
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	3307      	adds	r3, #7
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	3308      	adds	r3, #8
 8009f64:	9303      	str	r3, [sp, #12]
 8009f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f68:	443b      	add	r3, r7
 8009f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6c:	e76a      	b.n	8009e44 <_vfiprintf_r+0x78>
 8009f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f72:	460c      	mov	r4, r1
 8009f74:	2001      	movs	r0, #1
 8009f76:	e7a8      	b.n	8009eca <_vfiprintf_r+0xfe>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4620      	mov	r0, r4
 8009f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8a:	3a30      	subs	r2, #48	@ 0x30
 8009f8c:	2a09      	cmp	r2, #9
 8009f8e:	d903      	bls.n	8009f98 <_vfiprintf_r+0x1cc>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0c6      	beq.n	8009f22 <_vfiprintf_r+0x156>
 8009f94:	9105      	str	r1, [sp, #20]
 8009f96:	e7c4      	b.n	8009f22 <_vfiprintf_r+0x156>
 8009f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7f0      	b.n	8009f84 <_vfiprintf_r+0x1b8>
 8009fa2:	ab03      	add	r3, sp, #12
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009faa:	a904      	add	r1, sp, #16
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7fb febb 	bl	8005d28 <_printf_float>
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	1c78      	adds	r0, r7, #1
 8009fb6:	d1d6      	bne.n	8009f66 <_vfiprintf_r+0x19a>
 8009fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fc fe1f 	bl	8006c08 <__retarget_lock_release_recursive>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	065b      	lsls	r3, r3, #25
 8009fce:	f53f af1f 	bmi.w	8009e10 <_vfiprintf_r+0x44>
 8009fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd4:	e71e      	b.n	8009e14 <_vfiprintf_r+0x48>
 8009fd6:	ab03      	add	r3, sp, #12
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009fde:	a904      	add	r1, sp, #16
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7fc f939 	bl	8006258 <_printf_i>
 8009fe6:	e7e4      	b.n	8009fb2 <_vfiprintf_r+0x1e6>
 8009fe8:	0800a669 	.word	0x0800a669
 8009fec:	0800a673 	.word	0x0800a673
 8009ff0:	08005d29 	.word	0x08005d29
 8009ff4:	08009da9 	.word	0x08009da9
 8009ff8:	0800a66f 	.word	0x0800a66f

08009ffc <__swbuf_r>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	460e      	mov	r6, r1
 800a000:	4614      	mov	r4, r2
 800a002:	4605      	mov	r5, r0
 800a004:	b118      	cbz	r0, 800a00e <__swbuf_r+0x12>
 800a006:	6a03      	ldr	r3, [r0, #32]
 800a008:	b90b      	cbnz	r3, 800a00e <__swbuf_r+0x12>
 800a00a:	f7fc fce5 	bl	80069d8 <__sinit>
 800a00e:	69a3      	ldr	r3, [r4, #24]
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	071a      	lsls	r2, r3, #28
 800a016:	d501      	bpl.n	800a01c <__swbuf_r+0x20>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swbuf_r+0x32>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f82a 	bl	800a078 <__swsetup_r>
 800a024:	b118      	cbz	r0, 800a02e <__swbuf_r+0x32>
 800a026:	f04f 37ff 	mov.w	r7, #4294967295
 800a02a:	4638      	mov	r0, r7
 800a02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	1a98      	subs	r0, r3, r2
 800a034:	6963      	ldr	r3, [r4, #20]
 800a036:	b2f6      	uxtb	r6, r6
 800a038:	4283      	cmp	r3, r0
 800a03a:	4637      	mov	r7, r6
 800a03c:	dc05      	bgt.n	800a04a <__swbuf_r+0x4e>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f7ff fa47 	bl	80094d4 <_fflush_r>
 800a046:	2800      	cmp	r0, #0
 800a048:	d1ed      	bne.n	800a026 <__swbuf_r+0x2a>
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	701e      	strb	r6, [r3, #0]
 800a058:	6962      	ldr	r2, [r4, #20]
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d004      	beq.n	800a06a <__swbuf_r+0x6e>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d5e1      	bpl.n	800a02a <__swbuf_r+0x2e>
 800a066:	2e0a      	cmp	r6, #10
 800a068:	d1df      	bne.n	800a02a <__swbuf_r+0x2e>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7ff fa31 	bl	80094d4 <_fflush_r>
 800a072:	2800      	cmp	r0, #0
 800a074:	d0d9      	beq.n	800a02a <__swbuf_r+0x2e>
 800a076:	e7d6      	b.n	800a026 <__swbuf_r+0x2a>

0800a078 <__swsetup_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4b29      	ldr	r3, [pc, #164]	@ (800a120 <__swsetup_r+0xa8>)
 800a07c:	4605      	mov	r5, r0
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	460c      	mov	r4, r1
 800a082:	b118      	cbz	r0, 800a08c <__swsetup_r+0x14>
 800a084:	6a03      	ldr	r3, [r0, #32]
 800a086:	b90b      	cbnz	r3, 800a08c <__swsetup_r+0x14>
 800a088:	f7fc fca6 	bl	80069d8 <__sinit>
 800a08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a090:	0719      	lsls	r1, r3, #28
 800a092:	d422      	bmi.n	800a0da <__swsetup_r+0x62>
 800a094:	06da      	lsls	r2, r3, #27
 800a096:	d407      	bmi.n	800a0a8 <__swsetup_r+0x30>
 800a098:	2209      	movs	r2, #9
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a6:	e033      	b.n	800a110 <__swsetup_r+0x98>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x5a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x4a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x46>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f7fd fbf9 	bl	80078b0 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x7a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x7a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 f883 	bl	800a1f8 <__smakebuf_r>
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	f013 0201 	ands.w	r2, r3, #1
 800a0fa:	d00a      	beq.n	800a112 <__swsetup_r+0x9a>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	60a2      	str	r2, [r4, #8]
 800a100:	6962      	ldr	r2, [r4, #20]
 800a102:	4252      	negs	r2, r2
 800a104:	61a2      	str	r2, [r4, #24]
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	b942      	cbnz	r2, 800a11c <__swsetup_r+0xa4>
 800a10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a10e:	d1c5      	bne.n	800a09c <__swsetup_r+0x24>
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	0799      	lsls	r1, r3, #30
 800a114:	bf58      	it	pl
 800a116:	6962      	ldrpl	r2, [r4, #20]
 800a118:	60a2      	str	r2, [r4, #8]
 800a11a:	e7f4      	b.n	800a106 <__swsetup_r+0x8e>
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7f7      	b.n	800a110 <__swsetup_r+0x98>
 800a120:	200000b8 	.word	0x200000b8

0800a124 <_raise_r>:
 800a124:	291f      	cmp	r1, #31
 800a126:	b538      	push	{r3, r4, r5, lr}
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	d904      	bls.n	800a138 <_raise_r+0x14>
 800a12e:	2316      	movs	r3, #22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a13a:	b112      	cbz	r2, 800a142 <_raise_r+0x1e>
 800a13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a140:	b94b      	cbnz	r3, 800a156 <_raise_r+0x32>
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f830 	bl	800a1a8 <_getpid_r>
 800a148:	4622      	mov	r2, r4
 800a14a:	4601      	mov	r1, r0
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a152:	f000 b817 	b.w	800a184 <_kill_r>
 800a156:	2b01      	cmp	r3, #1
 800a158:	d00a      	beq.n	800a170 <_raise_r+0x4c>
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	d103      	bne.n	800a166 <_raise_r+0x42>
 800a15e:	2316      	movs	r3, #22
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	2001      	movs	r0, #1
 800a164:	e7e7      	b.n	800a136 <_raise_r+0x12>
 800a166:	2100      	movs	r1, #0
 800a168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a16c:	4620      	mov	r0, r4
 800a16e:	4798      	blx	r3
 800a170:	2000      	movs	r0, #0
 800a172:	e7e0      	b.n	800a136 <_raise_r+0x12>

0800a174 <raise>:
 800a174:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <raise+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f7ff bfd3 	b.w	800a124 <_raise_r>
 800a17e:	bf00      	nop
 800a180:	200000b8 	.word	0x200000b8

0800a184 <_kill_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	@ (800a1a4 <_kill_r+0x20>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	f7f8 fb7b 	bl	800288c <_kill>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d102      	bne.n	800a1a0 <_kill_r+0x1c>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b103      	cbz	r3, 800a1a0 <_kill_r+0x1c>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000568 	.word	0x20000568

0800a1a8 <_getpid_r>:
 800a1a8:	f7f8 bb68 	b.w	800287c <_getpid>

0800a1ac <__swhatbuf_r>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	b096      	sub	sp, #88	@ 0x58
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	461e      	mov	r6, r3
 800a1bc:	da0d      	bge.n	800a1da <__swhatbuf_r+0x2e>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1c4:	f04f 0100 	mov.w	r1, #0
 800a1c8:	bf14      	ite	ne
 800a1ca:	2340      	movne	r3, #64	@ 0x40
 800a1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	6031      	str	r1, [r6, #0]
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	b016      	add	sp, #88	@ 0x58
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	466a      	mov	r2, sp
 800a1dc:	f000 f848 	bl	800a270 <_fstat_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dbec      	blt.n	800a1be <__swhatbuf_r+0x12>
 800a1e4:	9901      	ldr	r1, [sp, #4]
 800a1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1ee:	4259      	negs	r1, r3
 800a1f0:	4159      	adcs	r1, r3
 800a1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1f6:	e7eb      	b.n	800a1d0 <__swhatbuf_r+0x24>

0800a1f8 <__smakebuf_r>:
 800a1f8:	898b      	ldrh	r3, [r1, #12]
 800a1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fc:	079d      	lsls	r5, r3, #30
 800a1fe:	4606      	mov	r6, r0
 800a200:	460c      	mov	r4, r1
 800a202:	d507      	bpl.n	800a214 <__smakebuf_r+0x1c>
 800a204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	2301      	movs	r3, #1
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	b003      	add	sp, #12
 800a212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a214:	ab01      	add	r3, sp, #4
 800a216:	466a      	mov	r2, sp
 800a218:	f7ff ffc8 	bl	800a1ac <__swhatbuf_r>
 800a21c:	9f00      	ldr	r7, [sp, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	f7fd fbb8 	bl	8007998 <_malloc_r>
 800a228:	b948      	cbnz	r0, 800a23e <__smakebuf_r+0x46>
 800a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22e:	059a      	lsls	r2, r3, #22
 800a230:	d4ee      	bmi.n	800a210 <__smakebuf_r+0x18>
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	f043 0302 	orr.w	r3, r3, #2
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	e7e2      	b.n	800a204 <__smakebuf_r+0xc>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	6020      	str	r0, [r4, #0]
 800a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a24e:	b15b      	cbz	r3, 800a268 <__smakebuf_r+0x70>
 800a250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a254:	4630      	mov	r0, r6
 800a256:	f000 f81d 	bl	800a294 <_isatty_r>
 800a25a:	b128      	cbz	r0, 800a268 <__smakebuf_r+0x70>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	f043 0301 	orr.w	r3, r3, #1
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	431d      	orrs	r5, r3
 800a26c:	81a5      	strh	r5, [r4, #12]
 800a26e:	e7cf      	b.n	800a210 <__smakebuf_r+0x18>

0800a270 <_fstat_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	@ (800a290 <_fstat_r+0x20>)
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f7f8 fb65 	bl	800294c <_fstat>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d102      	bne.n	800a28c <_fstat_r+0x1c>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	b103      	cbz	r3, 800a28c <_fstat_r+0x1c>
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
 800a28e:	bf00      	nop
 800a290:	20000568 	.word	0x20000568

0800a294 <_isatty_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	@ (800a2b0 <_isatty_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f8 fb64 	bl	800296c <_isatty>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_isatty_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_isatty_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20000568 	.word	0x20000568

0800a2b4 <_init>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_fini>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr
