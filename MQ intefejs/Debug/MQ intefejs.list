
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009790  08009790  0000a790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c80  08009c80  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c80  08009c80  0000ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c88  08009c88  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c88  08009c88  0000ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c8c  08009c8c  0000ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009c90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001e0  08009e70  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08009e70  0000b498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c65  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e12  00000000  00000000  0001de75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00020c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb1  00000000  00000000  00021d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b6f  00000000  00000000  000229b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f09  00000000  00000000  0004c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc218  00000000  00000000  00063431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  0015f68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00164e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009774 	.word	0x08009774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009774 	.word	0x08009774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <ChooseAirQualityZone>:
#include "AirQuality.h"

extern char* ErrorMessages[];

static void ChooseAirQualityZone(struct AirQuality* air_quality_instance, uint16_t* index_value)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t index = *index_value;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	81bb      	strh	r3, [r7, #12]
	uint8_t i;
	uint8_t max_index = (sizeof(AirQualityMaxIndexMap)/2);
 8001034:	2306      	movs	r3, #6
 8001036:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < max_index; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e014      	b.n	8001068 <ChooseAirQualityZone+0x44>
	{
		uint16_t temp = AirQualityMaxIndexMap[i];
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4a19      	ldr	r2, [pc, #100]	@ (80010a8 <ChooseAirQualityZone+0x84>)
 8001042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001046:	813b      	strh	r3, [r7, #8]

		if(index > temp)
 8001048:	89ba      	ldrh	r2, [r7, #12]
 800104a:	893b      	ldrh	r3, [r7, #8]
 800104c:	429a      	cmp	r2, r3
 800104e:	d807      	bhi.n	8001060 <ChooseAirQualityZone+0x3c>
		{
			continue;
		}
		else if(index <= temp)
 8001050:	89ba      	ldrh	r2, [r7, #12]
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	429a      	cmp	r2, r3
 8001056:	d804      	bhi.n	8001062 <ChooseAirQualityZone+0x3e>
		{
			air_quality_instance->AirQualityZone = i;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	719a      	strb	r2, [r3, #6]
			break;
 800105e:	e007      	b.n	8001070 <ChooseAirQualityZone+0x4c>
			continue;
 8001060:	bf00      	nop
	for(i = 0; i < max_index; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3e6      	bcc.n	800103e <ChooseAirQualityZone+0x1a>
	if ERROR_CONDITION_1
	{
		air_quality_instance->error_flag = true;
		air_quality_instance->error_code = 1;
	}
	else if ERROR_CONDITION_2
 8001070:	89bb      	ldrh	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <ChooseAirQualityZone+0x6a>
 8001076:	230a      	movs	r3, #10
 8001078:	461a      	mov	r2, r3
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	4293      	cmp	r3, r2
 800107e:	d206      	bcs.n	800108e <ChooseAirQualityZone+0x6a>
	{
		air_quality_instance->error_flag = true;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	711a      	strb	r2, [r3, #4]
		air_quality_instance->error_code = 2;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2202      	movs	r2, #2
 800108a:	715a      	strb	r2, [r3, #5]
 800108c:	e006      	b.n	800109c <ChooseAirQualityZone+0x78>
		//	strcpy(air_quality_instance->error_message, "Error Code: [2] < Error Message: Data is to low! > ");
	}
	else
	{
		air_quality_instance->error_flag = false;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	711a      	strb	r2, [r3, #4]
		air_quality_instance->error_code = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	715a      	strb	r2, [r3, #5]
	}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	08009830 	.word	0x08009830

080010ac <GetAirQuality>:

// Function to get air quality
bool GetAirQuality(struct AirQuality* air_quality_instance, uint16_t* input_param ,uint8_t* return_value) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]

	ChooseAirQualityZone(air_quality_instance, input_param);
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ffb2 	bl	8001024 <ChooseAirQualityZone>

    *return_value = air_quality_instance->AirQualityZone;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	701a      	strb	r2, [r3, #0]

    return  air_quality_instance->error_flag;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	791b      	ldrb	r3, [r3, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <GetAirQualityError>:

//////////////////  Doesn't work /////////////////////
char* GetAirQualityError(struct AirQuality* air_quality_instance) {
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

   // strcpy(air_quality_instance->error_message, Error_messages[air_quality_instance->error_code]);
	char* mess = air_quality_instance->error_message = ErrorMessages[air_quality_instance->error_code];
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	795b      	ldrb	r3, [r3, #5]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <GetAirQualityError+0x2c>)
 80010e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]

    //return "Error Code: [0] < System work well :D > \r\n";

	//strcpy(mess, ErrorMessages[air_quality_instance->error_code]);
	return  mess;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	20000000 	.word	0x20000000

08001104 <CreateNewAirQuality>:

void CreateNewAirQuality(struct AirQuality* air_quality_instance)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	air_quality_instance->error_message = ErrorMessages[air_quality_instance->error_code];
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	461a      	mov	r2, r3
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <CreateNewAirQuality+0x38>)
 8001114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	601a      	str	r2, [r3, #0]
	air_quality_instance->error_flag = false;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	711a      	strb	r2, [r3, #4]
	air_quality_instance->AirQualityZone = Z0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	719a      	strb	r2, [r3, #6]
	air_quality_instance->error_code = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	715a      	strb	r2, [r3, #5]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000000 	.word	0x20000000

08001140 <AlarmInit>:
#include "Buzzer.h"

static Buzzer_t loadConfiguration;

void AlarmInit()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 8001144:	2204      	movs	r2, #4
 8001146:	4903      	ldr	r1, [pc, #12]	@ (8001154 <AlarmInit+0x14>)
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <AlarmInit+0x18>)
 800114a:	f000 f82f 	bl	80011ac <Buzzer_init>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000
 8001158:	200001fc 	.word	0x200001fc

0800115c <CreateNewButton>:
 *  Created on: Apr 10, 2024
 *      Author: Marko.Manic
 */
#include "Button.h"

void CreateNewButton(struct Button* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
    button_instance->btn_polling_flag = false;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	709a      	strb	r2, [r3, #2]
    button_instance->read_button_flag = false;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	70da      	strb	r2, [r3, #3]
    button_instance->btn_press_detect_flag = false;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	711a      	strb	r2, [r3, #4]
    button_instance->btn_last_state = GPIO_PIN_RESET;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	715a      	strb	r2, [r3, #5]
    button_instance->active_state = GPIO_PIN_SET;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	719a      	strb	r2, [r3, #6]
    button_instance->GPIOx = GPIOx;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	739a      	strb	r2, [r3, #14]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	4613      	mov	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	809a      	strh	r2, [r3, #4]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <UART_TransmitString>:
#include "UART.h"

extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff f867 	bl	80002b0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	480e      	ldr	r0, [pc, #56]	@ (8001228 <UART_TransmitString+0x54>)
 80011ee:	f003 fad3 	bl	8004798 <HAL_UART_Transmit>
	char ret[] = "\r\n";
 80011f2:	4a0e      	ldr	r2, [pc, #56]	@ (800122c <UART_TransmitString+0x58>)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4611      	mov	r1, r2
 80011fc:	8019      	strh	r1, [r3, #0]
 80011fe:	3302      	adds	r3, #2
 8001200:	0c12      	lsrs	r2, r2, #16
 8001202:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)ret, strlen(ret), HAL_MAX_DELAY);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f851 	bl	80002b0 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	f107 010c 	add.w	r1, r7, #12
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <UART_TransmitString+0x54>)
 800121c:	f003 fabc 	bl	8004798 <HAL_UART_Transmit>
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002bc 	.word	0x200002bc
 800122c:	08009824 	.word	0x08009824

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
float PPM;
bool test;
uint16_t nemojmarko = 300;
 8001236:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800123a:	83bb      	strh	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f001 f847 	bl	80022ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f838 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f000 f96e 	bl	8001524 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001248:	f000 f8a4 	bl	8001394 <MX_ADC3_Init>
  MX_CRC_Init();
 800124c:	f000 f8f4 	bl	8001438 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001250:	f000 f938 	bl	80014c4 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8001254:	f000 f912 	bl	800147c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  AlarmInit();
 8001258:	f7ff ff72 	bl	8001140 <AlarmInit>
	struct Button btn_1;
	CreateNewButton(&btn_1, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001264:	4912      	ldr	r1, [pc, #72]	@ (80012b0 <main+0x80>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff78 	bl	800115c <CreateNewButton>
	struct AirQuality aq_1;
	CreateNewAirQuality(&aq_1);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff48 	bl	8001104 <CreateNewAirQuality>
		//struct AirQuality aq_1;
		//CreateNewAirQuality(&aq_1);
		//uint8_t zone;
		//GetAirQuality(&aq_1, 9 , &zone);
*/
		bool err = GetAirQuality(&aq_1, &nemojmarko , &zone);
 8001274:	1cfa      	adds	r2, r7, #3
 8001276:	f107 011c 	add.w	r1, r7, #28
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff15 	bl	80010ac <GetAirQuality>
 8001282:	4603      	mov	r3, r0
 8001284:	77fb      	strb	r3, [r7, #31]

		char error_mes_for_uart = GetAirQualityError(&aq_1);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff23 	bl	80010d4 <GetAirQualityError>
 800128e:	4603      	mov	r3, r0
 8001290:	77bb      	strb	r3, [r7, #30]

		UART_TransmitString(GetAirQualityError(&aq_1));
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff1d 	bl	80010d4 <GetAirQualityError>
 800129a:	4603      	mov	r3, r0
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff99 	bl	80011d4 <UART_TransmitString>

		HAL_Delay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a6:	f001 f86f 	bl	8002388 <HAL_Delay>
  {
 80012aa:	bf00      	nop
 80012ac:	e7e2      	b.n	8001274 <main+0x44>
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	@ 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	@ 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fe7f 	bl	8005fc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d8:	f001 fed0 	bl	800307c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <SystemClock_Config+0xd8>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a2a      	ldr	r2, [pc, #168]	@ (800138c <SystemClock_Config+0xd8>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <SystemClock_Config+0xd8>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <SystemClock_Config+0xdc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a25      	ldr	r2, [pc, #148]	@ (8001390 <SystemClock_Config+0xdc>)
 80012fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <SystemClock_Config+0xdc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001320:	2319      	movs	r3, #25
 8001322:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001324:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800132e:	2309      	movs	r3, #9
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	4618      	mov	r0, r3
 8001338:	f001 ff00 	bl	800313c <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001342:	f000 fd39 	bl	8001db8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001346:	f001 fea9 	bl	800309c <HAL_PWREx_EnableOverDrive>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001350:	f000 fd32 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001360:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2106      	movs	r1, #6
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f986 	bl	8003684 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800137e:	f000 fd1b 	bl	8001db8 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	@ 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_ADC3_Init+0x98>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <MX_ADC3_Init+0x9c>)
 80013aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_ADC3_Init+0x98>)
 80013ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_ADC3_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_ADC3_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <MX_ADC3_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_ADC3_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_ADC3_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <MX_ADC3_Init+0x98>)
 80013d6:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <MX_ADC3_Init+0xa0>)
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_ADC3_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_ADC3_Init+0x98>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_ADC3_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_ADC3_Init+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013f4:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_ADC3_Init+0x98>)
 80013f6:	f000 ffeb 	bl	80023d0 <HAL_ADC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 fcda 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001408:	2301      	movs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_ADC3_Init+0x98>)
 8001416:	f001 f81f 	bl	8002458 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001420:	f000 fcca 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000204 	.word	0x20000204
 8001430:	40012200 	.word	0x40012200
 8001434:	0f000001 	.word	0x0f000001

08001438 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <MX_CRC_Init+0x3c>)
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <MX_CRC_Init+0x40>)
 8001440:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_CRC_Init+0x3c>)
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <MX_CRC_Init+0x3c>)
 800144a:	2200      	movs	r2, #0
 800144c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_CRC_Init+0x3c>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <MX_CRC_Init+0x3c>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_CRC_Init+0x3c>)
 800145c:	2201      	movs	r2, #1
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_CRC_Init+0x3c>)
 8001462:	f001 fb5b 	bl	8002b1c <HAL_CRC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800146c:	f000 fca4 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000024c 	.word	0x2000024c
 8001478:	40023000 	.word	0x40023000

0800147c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_TIM11_Init+0x40>)
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <MX_TIM11_Init+0x44>)
 8001484:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <MX_TIM11_Init+0x40>)
 8001488:	f640 026f 	movw	r2, #2159	@ 0x86f
 800148c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_TIM11_Init+0x40>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_TIM11_Init+0x40>)
 8001496:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800149a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_TIM11_Init+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_TIM11_Init+0x40>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_TIM11_Init+0x40>)
 80014aa:	f002 fec1 	bl	8004230 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80014b4:	f000 fc80 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000270 	.word	0x20000270
 80014c0:	40014800 	.word	0x40014800

080014c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <MX_USART1_UART_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_USART1_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_USART1_UART_Init+0x58>)
 8001508:	f003 f8f8 	bl	80046fc <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001512:	f000 fc51 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200002bc 	.word	0x200002bc
 8001520:	40011000 	.word	0x40011000

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b090      	sub	sp, #64	@ 0x40
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	4bae      	ldr	r3, [pc, #696]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4aad      	ldr	r2, [pc, #692]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4bab      	ldr	r3, [pc, #684]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	4ba8      	ldr	r3, [pc, #672]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4aa7      	ldr	r2, [pc, #668]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4ba5      	ldr	r3, [pc, #660]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4ba2      	ldr	r3, [pc, #648]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4aa1      	ldr	r2, [pc, #644]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b9f      	ldr	r3, [pc, #636]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	4b9c      	ldr	r3, [pc, #624]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a9b      	ldr	r2, [pc, #620]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b99      	ldr	r3, [pc, #612]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b96      	ldr	r3, [pc, #600]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a95      	ldr	r2, [pc, #596]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b93      	ldr	r3, [pc, #588]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b90      	ldr	r3, [pc, #576]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a8f      	ldr	r2, [pc, #572]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b8d      	ldr	r3, [pc, #564]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015ca:	4b8a      	ldr	r3, [pc, #552]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a89      	ldr	r2, [pc, #548]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b87      	ldr	r3, [pc, #540]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015e2:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a83      	ldr	r2, [pc, #524]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015fa:	4b7e      	ldr	r3, [pc, #504]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a7d      	ldr	r2, [pc, #500]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b7b      	ldr	r3, [pc, #492]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001612:	4b78      	ldr	r3, [pc, #480]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a77      	ldr	r2, [pc, #476]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b75      	ldr	r3, [pc, #468]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162a:	4b72      	ldr	r3, [pc, #456]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a71      	ldr	r2, [pc, #452]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b6f      	ldr	r3, [pc, #444]	@ (80017f4 <MX_GPIO_Init+0x2d0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2120      	movs	r1, #32
 8001646:	486c      	ldr	r0, [pc, #432]	@ (80017f8 <MX_GPIO_Init+0x2d4>)
 8001648:	f001 fcfe 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	210c      	movs	r1, #12
 8001650:	486a      	ldr	r0, [pc, #424]	@ (80017fc <MX_GPIO_Init+0x2d8>)
 8001652:	f001 fcf9 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2108      	movs	r1, #8
 800165a:	4869      	ldr	r0, [pc, #420]	@ (8001800 <MX_GPIO_Init+0x2dc>)
 800165c:	f001 fcf4 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001666:	4865      	ldr	r0, [pc, #404]	@ (80017fc <MX_GPIO_Init+0x2d8>)
 8001668:	f001 fcee 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001672:	4864      	ldr	r0, [pc, #400]	@ (8001804 <MX_GPIO_Init+0x2e0>)
 8001674:	f001 fce8 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	21c8      	movs	r1, #200	@ 0xc8
 800167c:	4862      	ldr	r0, [pc, #392]	@ (8001808 <MX_GPIO_Init+0x2e4>)
 800167e:	f001 fce3 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001682:	2310      	movs	r3, #16
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001692:	230e      	movs	r3, #14
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800169a:	4619      	mov	r1, r3
 800169c:	485b      	ldr	r0, [pc, #364]	@ (800180c <MX_GPIO_Init+0x2e8>)
 800169e:	f001 fb27 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016a2:	2308      	movs	r3, #8
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	4855      	ldr	r0, [pc, #340]	@ (800180c <MX_GPIO_Init+0x2e8>)
 80016b6:	f001 fb1b 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80016ba:	2304      	movs	r3, #4
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ca:	2309      	movs	r3, #9
 80016cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d2:	4619      	mov	r1, r3
 80016d4:	484d      	ldr	r0, [pc, #308]	@ (800180c <MX_GPIO_Init+0x2e8>)
 80016d6:	f001 fb0b 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80016da:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ec:	230b      	movs	r3, #11
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f4:	4619      	mov	r1, r3
 80016f6:	4844      	ldr	r0, [pc, #272]	@ (8001808 <MX_GPIO_Init+0x2e4>)
 80016f8:	f001 fafa 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80016fc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170e:	230c      	movs	r3, #12
 8001710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001716:	4619      	mov	r1, r3
 8001718:	483c      	ldr	r0, [pc, #240]	@ (800180c <MX_GPIO_Init+0x2e8>)
 800171a:	f001 fae9 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800171e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001728:	2301      	movs	r3, #1
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001730:	2304      	movs	r3, #4
 8001732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001738:	4619      	mov	r1, r3
 800173a:	4835      	ldr	r0, [pc, #212]	@ (8001810 <MX_GPIO_Init+0x2ec>)
 800173c:	f001 fad8 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001740:	2310      	movs	r3, #16
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001750:	2302      	movs	r3, #2
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001758:	4619      	mov	r1, r3
 800175a:	482d      	ldr	r0, [pc, #180]	@ (8001810 <MX_GPIO_Init+0x2ec>)
 800175c:	f001 fac8 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001770:	2308      	movs	r3, #8
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001778:	4619      	mov	r1, r3
 800177a:	481f      	ldr	r0, [pc, #124]	@ (80017f8 <MX_GPIO_Init+0x2d4>)
 800177c:	f001 fab8 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001780:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001792:	230c      	movs	r3, #12
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	481d      	ldr	r0, [pc, #116]	@ (8001814 <MX_GPIO_Init+0x2f0>)
 800179e:	f001 faa7 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80017a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b4:	2301      	movs	r3, #1
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017bc:	4619      	mov	r1, r3
 80017be:	4816      	ldr	r0, [pc, #88]	@ (8001818 <MX_GPIO_Init+0x2f4>)
 80017c0:	f001 fa96 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80017c4:	2360      	movs	r3, #96	@ 0x60
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017d4:	230d      	movs	r3, #13
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <MX_GPIO_Init+0x2e8>)
 80017e0:	f001 fa86 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017e4:	2340      	movs	r3, #64	@ 0x40
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80017f0:	e014      	b.n	800181c <MX_GPIO_Init+0x2f8>
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40022000 	.word	0x40022000
 8001800:	40022800 	.word	0x40022800
 8001804:	40021c00 	.word	0x40021c00
 8001808:	40021800 	.word	0x40021800
 800180c:	40021000 	.word	0x40021000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001820:	230a      	movs	r3, #10
 8001822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	48bc      	ldr	r0, [pc, #752]	@ (8001b1c <MX_GPIO_Init+0x5f8>)
 800182c:	f001 fa60 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001830:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001842:	230c      	movs	r3, #12
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	48b4      	ldr	r0, [pc, #720]	@ (8001b20 <MX_GPIO_Init+0x5fc>)
 800184e:	f001 fa4f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001852:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001864:	230e      	movs	r3, #14
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	48ad      	ldr	r0, [pc, #692]	@ (8001b24 <MX_GPIO_Init+0x600>)
 8001870:	f001 fa3e 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	48a6      	ldr	r0, [pc, #664]	@ (8001b24 <MX_GPIO_Init+0x600>)
 800188a:	f001 fa31 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800188e:	2340      	movs	r3, #64	@ 0x40
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001892:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	48a1      	ldr	r0, [pc, #644]	@ (8001b28 <MX_GPIO_Init+0x604>)
 80018a4:	f001 fa24 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80018a8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ba:	230c      	movs	r3, #12
 80018bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4898      	ldr	r0, [pc, #608]	@ (8001b28 <MX_GPIO_Init+0x604>)
 80018c6:	f001 fa13 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80018ca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018dc:	230a      	movs	r3, #10
 80018de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	4891      	ldr	r0, [pc, #580]	@ (8001b2c <MX_GPIO_Init+0x608>)
 80018e8:	f001 fa02 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018ec:	23f0      	movs	r3, #240	@ 0xf0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018fc:	230a      	movs	r3, #10
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	488a      	ldr	r0, [pc, #552]	@ (8001b30 <MX_GPIO_Init+0x60c>)
 8001908:	f001 f9f2 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800190c:	23f7      	movs	r3, #247	@ 0xf7
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4883      	ldr	r0, [pc, #524]	@ (8001b34 <MX_GPIO_Init+0x610>)
 8001928:	f001 f9e2 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800192c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800193e:	2309      	movs	r3, #9
 8001940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4875      	ldr	r0, [pc, #468]	@ (8001b20 <MX_GPIO_Init+0x5fc>)
 800194a:	f001 f9d1 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800194e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001960:	230a      	movs	r3, #10
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001968:	4619      	mov	r1, r3
 800196a:	486d      	ldr	r0, [pc, #436]	@ (8001b20 <MX_GPIO_Init+0x5fc>)
 800196c:	f001 f9c0 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001970:	2320      	movs	r3, #32
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4868      	ldr	r0, [pc, #416]	@ (8001b28 <MX_GPIO_Init+0x604>)
 8001988:	f001 f9b2 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800198c:	2308      	movs	r3, #8
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800199c:	230d      	movs	r3, #13
 800199e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4860      	ldr	r0, [pc, #384]	@ (8001b28 <MX_GPIO_Init+0x604>)
 80019a8:	f001 f9a2 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin;
 80019ac:	230c      	movs	r3, #12
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b4:	2302      	movs	r3, #2
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	485b      	ldr	r0, [pc, #364]	@ (8001b30 <MX_GPIO_Init+0x60c>)
 80019c4:	f001 f994 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	4856      	ldr	r0, [pc, #344]	@ (8001b38 <MX_GPIO_Init+0x614>)
 80019de:	f001 f987 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80019e2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f4:	230c      	movs	r3, #12
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	484f      	ldr	r0, [pc, #316]	@ (8001b3c <MX_GPIO_Init+0x618>)
 8001a00:	f001 f976 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001a04:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a16:	230e      	movs	r3, #14
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4843      	ldr	r0, [pc, #268]	@ (8001b30 <MX_GPIO_Init+0x60c>)
 8001a22:	f001 f965 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a26:	2308      	movs	r3, #8
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	483d      	ldr	r0, [pc, #244]	@ (8001b34 <MX_GPIO_Init+0x610>)
 8001a3e:	f001 f957 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a54:	230d      	movs	r3, #13
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4830      	ldr	r0, [pc, #192]	@ (8001b20 <MX_GPIO_Init+0x5fc>)
 8001a60:	f001 f946 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a64:	2310      	movs	r3, #16
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a74:	4619      	mov	r1, r3
 8001a76:	482c      	ldr	r0, [pc, #176]	@ (8001b28 <MX_GPIO_Init+0x604>)
 8001a78:	f001 f93a 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <MX_GPIO_Init+0x604>)
 8001a98:	f001 f92a 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a9c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4823      	ldr	r0, [pc, #140]	@ (8001b40 <MX_GPIO_Init+0x61c>)
 8001ab2:	f001 f91d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <MX_GPIO_Init+0x60c>)
 8001ad2:	f001 f90d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <MX_GPIO_Init+0x60c>)
 8001af0:	f001 f8fe 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <MX_GPIO_Init+0x61c>)
 8001b0e:	f001 f8ef 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b12:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e013      	b.n	8001b44 <MX_GPIO_Init+0x620>
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40022400 	.word	0x40022400
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40022800 	.word	0x40022800
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40021400 	.word	0x40021400
 8001b40:	40021c00 	.word	0x40021c00
 8001b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b4e:	230d      	movs	r3, #13
 8001b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4890      	ldr	r0, [pc, #576]	@ (8001d9c <MX_GPIO_Init+0x878>)
 8001b5a:	f001 f8c9 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	4889      	ldr	r0, [pc, #548]	@ (8001da0 <MX_GPIO_Init+0x87c>)
 8001b7a:	f001 f8b9 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 8001b7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b90:	4619      	mov	r1, r3
 8001b92:	4883      	ldr	r0, [pc, #524]	@ (8001da0 <MX_GPIO_Init+0x87c>)
 8001b94:	f001 f8ac 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	487b      	ldr	r0, [pc, #492]	@ (8001da4 <MX_GPIO_Init+0x880>)
 8001bb6:	f001 f89b 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bc0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4873      	ldr	r0, [pc, #460]	@ (8001da0 <MX_GPIO_Init+0x87c>)
 8001bd2:	f001 f88d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001bd6:	23c0      	movs	r3, #192	@ 0xc0
 8001bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001be6:	2308      	movs	r3, #8
 8001be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	486d      	ldr	r0, [pc, #436]	@ (8001da8 <MX_GPIO_Init+0x884>)
 8001bf2:	f001 f87d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001bf6:	2328      	movs	r3, #40	@ 0x28
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c06:	230c      	movs	r3, #12
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4862      	ldr	r0, [pc, #392]	@ (8001d9c <MX_GPIO_Init+0x878>)
 8001c12:	f001 f86d 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c16:	23c8      	movs	r3, #200	@ 0xc8
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	485f      	ldr	r0, [pc, #380]	@ (8001dac <MX_GPIO_Init+0x888>)
 8001c2e:	f001 f85f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001c32:	2308      	movs	r3, #8
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c42:	230c      	movs	r3, #12
 8001c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4856      	ldr	r0, [pc, #344]	@ (8001da8 <MX_GPIO_Init+0x884>)
 8001c4e:	f001 f84f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c52:	2332      	movs	r3, #50	@ 0x32
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c62:	230b      	movs	r3, #11
 8001c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	484e      	ldr	r0, [pc, #312]	@ (8001da8 <MX_GPIO_Init+0x884>)
 8001c6e:	f001 f83f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c82:	2309      	movs	r3, #9
 8001c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4848      	ldr	r0, [pc, #288]	@ (8001db0 <MX_GPIO_Init+0x88c>)
 8001c8e:	f001 f82f 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c92:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ca4:	2309      	movs	r3, #9
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4841      	ldr	r0, [pc, #260]	@ (8001db4 <MX_GPIO_Init+0x890>)
 8001cb0:	f001 f81e 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4839      	ldr	r0, [pc, #228]	@ (8001dac <MX_GPIO_Init+0x888>)
 8001cc8:	f001 f812 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ccc:	2386      	movs	r3, #134	@ 0x86
 8001cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cdc:	230b      	movs	r3, #11
 8001cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	482f      	ldr	r0, [pc, #188]	@ (8001da4 <MX_GPIO_Init+0x880>)
 8001ce8:	f001 f802 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cec:	2350      	movs	r3, #80	@ 0x50
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cfc:	230d      	movs	r3, #13
 8001cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d04:	4619      	mov	r1, r3
 8001d06:	4827      	ldr	r0, [pc, #156]	@ (8001da4 <MX_GPIO_Init+0x880>)
 8001d08:	f000 fff2 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d0c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d12:	2312      	movs	r3, #18
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	481c      	ldr	r0, [pc, #112]	@ (8001d9c <MX_GPIO_Init+0x878>)
 8001d2a:	f000 ffe1 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8001d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d40:	230a      	movs	r3, #10
 8001d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4819      	ldr	r0, [pc, #100]	@ (8001db0 <MX_GPIO_Init+0x88c>)
 8001d4c:	f000 ffd0 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d50:	2340      	movs	r3, #64	@ 0x40
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d60:	2309      	movs	r3, #9
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <MX_GPIO_Init+0x878>)
 8001d6c:	f000 ffc0 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d70:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d82:	2305      	movs	r3, #5
 8001d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4808      	ldr	r0, [pc, #32]	@ (8001db0 <MX_GPIO_Init+0x88c>)
 8001d8e:	f000 ffaf 	bl	8002cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3740      	adds	r7, #64	@ 0x40
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021c00 	.word	0x40021c00
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020c00 	.word	0x40020c00

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	f06f 0001 	mvn.w	r0, #1
 8001e02:	f000 fe54 	bl	8002aae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <HAL_ADC_MspInit+0xa4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d13c      	bne.n	8001eb0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e36:	4b21      	ldr	r3, [pc, #132]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e54:	f043 0320 	orr.w	r3, r3, #32
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_ADC_MspInit+0xa8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001e7e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001e82:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e84:	2303      	movs	r3, #3
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <HAL_ADC_MspInit+0xac>)
 8001e94:	f000 ff2c 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	@ (8001ec4 <HAL_ADC_MspInit+0xb0>)
 8001eac:	f000 ff20 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40012200 	.word	0x40012200
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_CRC_MspInit+0x38>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_CRC_MspInit+0x3c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_CRC_MspInit+0x3c>)
 8001ee0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_CRC_MspInit+0x3c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023000 	.word	0x40023000
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_TIM_Base_MspInit+0x44>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d113      	bne.n	8001f42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_TIM_Base_MspInit+0x48>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <HAL_TIM_Base_MspInit+0x48>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_TIM_Base_MspInit+0x48>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	201a      	movs	r0, #26
 8001f38:	f000 fdb9 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f3c:	201a      	movs	r0, #26
 8001f3e:	f000 fdd2 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40014800 	.word	0x40014800
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0ac      	sub	sp, #176	@ 0xb0
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	2284      	movs	r2, #132	@ 0x84
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f826 	bl	8005fc6 <memset>
  if(huart->Instance==USART1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a32      	ldr	r2, [pc, #200]	@ (8002048 <HAL_UART_MspInit+0xf4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d15c      	bne.n	800203e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f84:	2340      	movs	r3, #64	@ 0x40
 8001f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fd5d 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f9c:	f7ff ff0c 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	4a29      	ldr	r2, [pc, #164]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	4a23      	ldr	r2, [pc, #140]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_UART_MspInit+0xf8>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800200a:	4619      	mov	r1, r3
 800200c:	4810      	ldr	r0, [pc, #64]	@ (8002050 <HAL_UART_MspInit+0xfc>)
 800200e:	f000 fe6f 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800202c:	2307      	movs	r3, #7
 800202e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002036:	4619      	mov	r1, r3
 8002038:	4806      	ldr	r0, [pc, #24]	@ (8002054 <HAL_UART_MspInit+0x100>)
 800203a:	f000 fe59 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	37b0      	adds	r7, #176	@ 0xb0
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40011000 	.word	0x40011000
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400
 8002054:	40020000 	.word	0x40020000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <MemManage_Handler+0x4>

08002070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <UsageFault_Handler+0x4>

08002080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 f94b 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020be:	f002 f90e 	bl	80042de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000270 	.word	0x20000270

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e6:	f003 ffc1 	bl	800606c <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
  return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <_exit+0x12>

08002112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00a      	b.n	800213a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002124:	f3af 8000 	nop.w
 8002128:	4601      	mov	r1, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf0      	blt.n	8002124 <_read+0x12>
  }

  return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e009      	b.n	8002172 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	dbf1      	blt.n	800215e <_write+0x12>
  }
  return len;
 800217a:	687b      	ldr	r3, [r7, #4]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_close>:

int _close(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ac:	605a      	str	r2, [r3, #4]
  return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_isatty>:

int _isatty(int file)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f003 ff26 	bl	800606c <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20050000 	.word	0x20050000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000344 	.word	0x20000344
 8002254:	20000498 	.word	0x20000498

08002258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002280:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002282:	490e      	ldr	r1, [pc, #56]	@ (80022bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002284:	4a0e      	ldr	r2, [pc, #56]	@ (80022c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002298:	4c0b      	ldr	r4, [pc, #44]	@ (80022c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a6:	f7ff ffd7 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f003 fee5 	bl	8006078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7fe ffbf 	bl	8001230 <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80022c0:	08009c90 	.word	0x08009c90
  ldr r2, =_sbss
 80022c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80022c8:	20000498 	.word	0x20000498

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>

080022ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d2:	2003      	movs	r0, #3
 80022d4:	f000 fbe0 	bl	8002a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d8:	2000      	movs	r0, #0
 80022da:	f000 f805 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022de:	f7ff fd71 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fbfb 	bl	8002b02 <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 fbc3 	bl	8002aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000000c 	.word	0x2000000c
 8002340:	20000014 	.word	0x20000014
 8002344:	20000010 	.word	0x20000010

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000014 	.word	0x20000014
 800236c:	20000348 	.word	0x20000348

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000348 	.word	0x20000348

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffde 	bl	8002370 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000014 	.word	0x20000014

080023d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e031      	b.n	800244a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fd10 	bl	8001e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_ADC_Init+0x84>)
 8002414:	4013      	ands	r3, r2
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f970 	bl	8002704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
 800243a:	e001      	b.n	8002440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	ffffeefd 	.word	0xffffeefd

08002458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e136      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x28a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d93a      	bls.n	80024fa <HAL_ADC_ConfigChannel+0xa2>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800248c:	d035      	beq.n	80024fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68d9      	ldr	r1, [r3, #12]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	3b1e      	subs	r3, #30
 80024a4:	2207      	movs	r2, #7
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8d      	ldr	r2, [pc, #564]	@ (80026f0 <HAL_ADC_ConfigChannel+0x298>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10a      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	061a      	lsls	r2, r3, #24
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	e035      	b.n	8002540 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4403      	add	r3, r0
 80024ec:	3b1e      	subs	r3, #30
 80024ee:	409a      	lsls	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f8:	e022      	b.n	8002540 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43da      	mvns	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	400a      	ands	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	4603      	mov	r3, r0
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4403      	add	r3, r0
 8002536:	409a      	lsls	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d824      	bhi.n	8002592 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b05      	subs	r3, #5
 800255a:	221f      	movs	r2, #31
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43da      	mvns	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b05      	subs	r3, #5
 8002584:	fa00 f203 	lsl.w	r2, r0, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002590:	e04c      	b.n	800262c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d824      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b23      	subs	r3, #35	@ 0x23
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b23      	subs	r3, #35	@ 0x23
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e2:	e023      	b.n	800262c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	@ 0x41
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	400a      	ands	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b41      	subs	r3, #65	@ 0x41
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a30      	ldr	r2, [pc, #192]	@ (80026f4 <HAL_ADC_ConfigChannel+0x29c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10a      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1f4>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800263e:	d105      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a2c      	ldr	r2, [pc, #176]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002646:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800264a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_ADC_ConfigChannel+0x29c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10f      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x21e>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b12      	cmp	r3, #18
 800265c:	d10b      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4a25      	ldr	r2, [pc, #148]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002664:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002668:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800266a:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a22      	ldr	r2, [pc, #136]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002670:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002674:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <HAL_ADC_ConfigChannel+0x29c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d12b      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x280>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1a      	ldr	r2, [pc, #104]	@ (80026f0 <HAL_ADC_ConfigChannel+0x298>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b11      	cmp	r3, #17
 8002690:	d122      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a18      	ldr	r2, [pc, #96]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002698:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800269c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800269e:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026a8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_ADC_ConfigChannel+0x298>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d111      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_ADC_ConfigChannel+0x2a4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9a      	lsrs	r2, r3, #18
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	10000012 	.word	0x10000012
 80026f4:	40012000 	.word	0x40012000
 80026f8:	40012300 	.word	0x40012300
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	431bde83 	.word	0x431bde83

08002704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800270c:	4b78      	ldr	r3, [pc, #480]	@ (80028f0 <ADC_Init+0x1ec>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a77      	ldr	r2, [pc, #476]	@ (80028f0 <ADC_Init+0x1ec>)
 8002712:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002716:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002718:	4b75      	ldr	r3, [pc, #468]	@ (80028f0 <ADC_Init+0x1ec>)
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4973      	ldr	r1, [pc, #460]	@ (80028f0 <ADC_Init+0x1ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	021a      	lsls	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <ADC_Init+0x1f0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e00f      	b.n	80027fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0202 	bic.w	r2, r2, #2
 800280c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	005a      	lsls	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800284a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	035a      	lsls	r2, r3, #13
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	e007      	b.n	8002874 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002882:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	3b01      	subs	r3, #1
 8002890:	051a      	lsls	r2, r3, #20
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028b6:	025a      	lsls	r2, r3, #9
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	029a      	lsls	r2, r3, #10
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40012300 	.word	0x40012300
 80028f4:	0f000001 	.word	0x0f000001

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <__NVIC_SetPriorityGrouping+0x40>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 8002922:	4313      	orrs	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <__NVIC_SetPriorityGrouping+0x40>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	05fa0000 	.word	0x05fa0000

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4907      	ldr	r1, [pc, #28]	@ (8002994 <__NVIC_EnableIRQ+0x38>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	@ (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a64:	d301      	bcc.n	8002a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00f      	b.n	8002a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <SysTick_Config+0x40>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a72:	210f      	movs	r1, #15
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f7ff ff8e 	bl	8002998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <SysTick_Config+0x40>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <SysTick_Config+0x40>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff29 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac0:	f7ff ff3e 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f7ff ff8e 	bl	80029ec <NVIC_EncodePriority>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff5d 	bl	8002998 <__NVIC_SetPriority>
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff31 	bl	800295c <__NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffa2 	bl	8002a54 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e054      	b.n	8002bd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7f5b      	ldrb	r3, [r3, #29]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff f9c2 	bl	8001ec8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a22      	ldr	r2, [pc, #136]	@ (8002be0 <HAL_CRC_Init+0xc4>)
 8002b58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0218 	bic.w	r2, r2, #24
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	e00c      	b.n	8002b86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	461a      	mov	r2, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f834 	bl	8002be4 <HAL_CRCEx_Polynomial_Set>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e028      	b.n	8002bd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	795b      	ldrb	r3, [r3, #5]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	e004      	b.n	8002ba4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6912      	ldr	r2, [r2, #16]
 8002ba2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	04c11db7 	.word	0x04c11db7

08002be4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002bf4:	231f      	movs	r3, #31
 8002bf6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002bf8:	bf00      	nop
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	613a      	str	r2, [r7, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <HAL_CRCEx_Polynomial_Set+0x34>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b18      	cmp	r3, #24
 8002c1c:	d846      	bhi.n	8002cac <HAL_CRCEx_Polynomial_Set+0xc8>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002cb3 	.word	0x08002cb3
 8002c28:	08002cad 	.word	0x08002cad
 8002c2c:	08002cad 	.word	0x08002cad
 8002c30:	08002cad 	.word	0x08002cad
 8002c34:	08002cad 	.word	0x08002cad
 8002c38:	08002cad 	.word	0x08002cad
 8002c3c:	08002cad 	.word	0x08002cad
 8002c40:	08002cad 	.word	0x08002cad
 8002c44:	08002ca1 	.word	0x08002ca1
 8002c48:	08002cad 	.word	0x08002cad
 8002c4c:	08002cad 	.word	0x08002cad
 8002c50:	08002cad 	.word	0x08002cad
 8002c54:	08002cad 	.word	0x08002cad
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002cad 	.word	0x08002cad
 8002c64:	08002c95 	.word	0x08002c95
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002c89 	.word	0x08002c89
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d913      	bls.n	8002cb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c92:	e010      	b.n	8002cb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b07      	cmp	r3, #7
 8002c98:	d90f      	bls.n	8002cba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c9e:	e00c      	b.n	8002cba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d90b      	bls.n	8002cbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002caa:	e008      	b.n	8002cbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb0:	e006      	b.n	8002cc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e004      	b.n	8002cc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e002      	b.n	8002cc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 0118 	bic.w	r1, r3, #24
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e175      	b.n	8002ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	f040 8164 	bne.w	8002ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d005      	beq.n	8002d46 <HAL_GPIO_Init+0x56>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d017      	beq.n	8002de4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d123      	bne.n	8002e38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	08da      	lsrs	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3208      	adds	r2, #8
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80be 	beq.w	8002ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	4b66      	ldr	r3, [pc, #408]	@ (8003014 <HAL_GPIO_Init+0x324>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	4a65      	ldr	r2, [pc, #404]	@ (8003014 <HAL_GPIO_Init+0x324>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e86:	4b63      	ldr	r3, [pc, #396]	@ (8003014 <HAL_GPIO_Init+0x324>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e92:	4a61      	ldr	r2, [pc, #388]	@ (8003018 <HAL_GPIO_Init+0x328>)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	@ (800301c <HAL_GPIO_Init+0x32c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d037      	beq.n	8002f2e <HAL_GPIO_Init+0x23e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a57      	ldr	r2, [pc, #348]	@ (8003020 <HAL_GPIO_Init+0x330>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_GPIO_Init+0x23a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a56      	ldr	r2, [pc, #344]	@ (8003024 <HAL_GPIO_Init+0x334>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02b      	beq.n	8002f26 <HAL_GPIO_Init+0x236>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a55      	ldr	r2, [pc, #340]	@ (8003028 <HAL_GPIO_Init+0x338>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d025      	beq.n	8002f22 <HAL_GPIO_Init+0x232>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a54      	ldr	r2, [pc, #336]	@ (800302c <HAL_GPIO_Init+0x33c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <HAL_GPIO_Init+0x22e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a53      	ldr	r2, [pc, #332]	@ (8003030 <HAL_GPIO_Init+0x340>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d019      	beq.n	8002f1a <HAL_GPIO_Init+0x22a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a52      	ldr	r2, [pc, #328]	@ (8003034 <HAL_GPIO_Init+0x344>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0x226>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a51      	ldr	r2, [pc, #324]	@ (8003038 <HAL_GPIO_Init+0x348>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00d      	beq.n	8002f12 <HAL_GPIO_Init+0x222>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	@ (800303c <HAL_GPIO_Init+0x34c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <HAL_GPIO_Init+0x21e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4f      	ldr	r2, [pc, #316]	@ (8003040 <HAL_GPIO_Init+0x350>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_GPIO_Init+0x21a>
 8002f06:	2309      	movs	r3, #9
 8002f08:	e012      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	e010      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	e00e      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f12:	2307      	movs	r3, #7
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x240>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	@ (8003018 <HAL_GPIO_Init+0x328>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a34      	ldr	r2, [pc, #208]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b32      	ldr	r3, [pc, #200]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b28      	ldr	r3, [pc, #160]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <HAL_GPIO_Init+0x354>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae86 	bls.w	8002d10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	@ 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40022000 	.word	0x40022000
 8003040:	40022400 	.word	0x40022400
 8003044:	40013c00 	.word	0x40013c00

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003064:	e003      	b.n	800306e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	041a      	lsls	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	619a      	str	r2, [r3, #24]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40007000 	.word	0x40007000

0800309c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	4a22      	ldr	r2, [pc, #136]	@ (8003134 <HAL_PWREx_EnableOverDrive+0x98>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030be:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ca:	f7ff f951 	bl	8002370 <HAL_GetTick>
 80030ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d0:	e009      	b.n	80030e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d2:	f7ff f94d 	bl	8002370 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030e0:	d901      	bls.n	80030e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e022      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f2:	d1ee      	bne.n	80030d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003100:	f7ff f936 	bl	8002370 <HAL_GetTick>
 8003104:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003106:	e009      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003108:	f7ff f932 	bl	8002370 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003116:	d901      	bls.n	800311c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e007      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800311c:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x9c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003128:	d1ee      	bne.n	8003108 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000

0800313c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e291      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8087 	beq.w	800326e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003160:	4b96      	ldr	r3, [pc, #600]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b04      	cmp	r3, #4
 800316a:	d00c      	beq.n	8003186 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316c:	4b93      	ldr	r3, [pc, #588]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d112      	bne.n	800319e <HAL_RCC_OscConfig+0x62>
 8003178:	4b90      	ldr	r3, [pc, #576]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003184:	d10b      	bne.n	800319e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	4b8d      	ldr	r3, [pc, #564]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d06c      	beq.n	800326c <HAL_RCC_OscConfig+0x130>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d168      	bne.n	800326c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e26b      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x7a>
 80031a8:	4b84      	ldr	r3, [pc, #528]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a83      	ldr	r2, [pc, #524]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e02e      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x9c>
 80031be:	4b7f      	ldr	r3, [pc, #508]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7e      	ldr	r2, [pc, #504]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b7c      	ldr	r3, [pc, #496]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7b      	ldr	r2, [pc, #492]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0xc0>
 80031e2:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a75      	ldr	r2, [pc, #468]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b73      	ldr	r3, [pc, #460]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a72      	ldr	r2, [pc, #456]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xd8>
 80031fc:	4b6f      	ldr	r3, [pc, #444]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6e      	ldr	r2, [pc, #440]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b6c      	ldr	r3, [pc, #432]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6b      	ldr	r2, [pc, #428]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7ff f8a8 	bl	8002370 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff f8a4 	bl	8002370 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e21f      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b61      	ldr	r3, [pc, #388]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7ff f894 	bl	8002370 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff f890 	bl	8002370 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e20b      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	4b57      	ldr	r3, [pc, #348]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x110>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d069      	beq.n	800334e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327a:	4b50      	ldr	r3, [pc, #320]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11c      	bne.n	80032cc <HAL_RCC_OscConfig+0x190>
 8003292:	4b4a      	ldr	r3, [pc, #296]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e1df      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	493d      	ldr	r1, [pc, #244]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ca:	e040      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d4:	4b39      	ldr	r3, [pc, #228]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a38      	ldr	r2, [pc, #224]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff f846 	bl	8002370 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e8:	f7ff f842 	bl	8002370 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1bd      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4929      	ldr	r1, [pc, #164]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
 800331a:	e018      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7ff f822 	bl	8002370 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003330:	f7ff f81e 	bl	8002370 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e199      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d038      	beq.n	80033cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003362:	4b16      	ldr	r3, [pc, #88]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003366:	4a15      	ldr	r2, [pc, #84]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe ffff 	bl	8002370 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fffb 	bl	8002370 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e176      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x23a>
 8003394:	e01a      	b.n	80033cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 8003398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339a:	4a08      	ldr	r2, [pc, #32]	@ (80033bc <HAL_RCC_OscConfig+0x280>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fe ffe5 	bl	8002370 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe ffe1 	bl	8002370 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d903      	bls.n	80033c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e15c      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
 80033bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b91      	ldr	r3, [pc, #580]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ee      	bne.n	80033aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a4 	beq.w	8003522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033da:	4b8b      	ldr	r3, [pc, #556]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b88      	ldr	r3, [pc, #544]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a87      	ldr	r2, [pc, #540]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b85      	ldr	r3, [pc, #532]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4b82      	ldr	r3, [pc, #520]	@ (800360c <HAL_RCC_OscConfig+0x4d0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d118      	bne.n	8003440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800340e:	4b7f      	ldr	r3, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x4d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7e      	ldr	r2, [pc, #504]	@ (800360c <HAL_RCC_OscConfig+0x4d0>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fe ffa9 	bl	8002370 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fe ffa5 	bl	8002370 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	@ 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e120      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003434:	4b75      	ldr	r3, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x4d0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x31a>
 8003448:	4b6f      	ldr	r3, [pc, #444]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a6e      	ldr	r2, [pc, #440]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	e02d      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x33c>
 800345e:	4b6a      	ldr	r3, [pc, #424]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a69      	ldr	r2, [pc, #420]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
 800346a:	4b67      	ldr	r3, [pc, #412]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a66      	ldr	r2, [pc, #408]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x35e>
 8003480:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	@ 0x70
 800348c:	4b5e      	ldr	r3, [pc, #376]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a5d      	ldr	r2, [pc, #372]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
 800349a:	4b5b      	ldr	r3, [pc, #364]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349e:	4a5a      	ldr	r2, [pc, #360]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a6:	4b58      	ldr	r3, [pc, #352]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a57      	ldr	r2, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fe ff59 	bl	8002370 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe ff55 	bl	8002370 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0ce      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x386>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe ff43 	bl	8002370 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe ff3f 	bl	8002370 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0b8      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b3c      	ldr	r3, [pc, #240]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	4a3b      	ldr	r2, [pc, #236]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80a4 	beq.w	8003674 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800352c:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d06b      	beq.n	8003610 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d149      	bne.n	80035d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a30      	ldr	r2, [pc, #192]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe ff10 	bl	8002370 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe ff0c 	bl	8002370 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e087      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	4313      	orrs	r3, r2
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800359e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fee0 	bl	8002370 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fedc 	bl	8002370 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e057      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x478>
 80035d2:	e04f      	b.n	8003674 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fec6 	bl	8002370 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fec2 	bl	8002370 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e03d      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4ac>
 8003606:	e035      	b.n	8003674 <HAL_RCC_OscConfig+0x538>
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003610:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <HAL_RCC_OscConfig+0x544>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d028      	beq.n	8003670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d121      	bne.n	8003670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11a      	bne.n	8003670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003646:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003648:	4293      	cmp	r3, r2
 800364a:	d111      	bne.n	8003670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d107      	bne.n	8003670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d0      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b6a      	ldr	r3, [pc, #424]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b67      	ldr	r3, [pc, #412]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	4965      	ldr	r1, [pc, #404]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a58      	ldr	r2, [pc, #352]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d040      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d115      	bne.n	8003766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e073      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3d      	ldr	r3, [pc, #244]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06b      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4936      	ldr	r1, [pc, #216]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003778:	f7fe fdfa 	bl	8002370 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe fdf6 	bl	8002370 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e053      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d210      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 020f 	bic.w	r2, r3, #15
 80037be:	4922      	ldr	r1, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x1cc>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1d0>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1d4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fd56 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00
 800384c:	40023800 	.word	0x40023800
 8003850:	0800983c 	.word	0x0800983c
 8003854:	2000000c 	.word	0x2000000c
 8003858:	20000010 	.word	0x20000010

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003860:	b090      	sub	sp, #64	@ 0x40
 8003862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
 8003868:	2300      	movs	r3, #0
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800386c:	2300      	movs	r3, #0
 800386e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4b59      	ldr	r3, [pc, #356]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d00d      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x40>
 8003880:	2b08      	cmp	r3, #8
 8003882:	f200 80a1 	bhi.w	80039c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x34>
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x3a>
 800388e:	e09b      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003894:	e09b      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003896:	4b53      	ldr	r3, [pc, #332]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003898:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800389a:	e098      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4b4f      	ldr	r3, [pc, #316]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038a6:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d028      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b4a      	ldr	r3, [pc, #296]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038c4:	2100      	movs	r1, #0
 80038c6:	4b47      	ldr	r3, [pc, #284]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c8:	fb03 f201 	mul.w	r2, r3, r1
 80038cc:	2300      	movs	r3, #0
 80038ce:	fb00 f303 	mul.w	r3, r0, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	4a43      	ldr	r2, [pc, #268]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d6:	fba0 1202 	umull	r1, r2, r0, r2
 80038da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038dc:	460a      	mov	r2, r1
 80038de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e2:	4413      	add	r3, r2
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	2200      	movs	r2, #0
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	61fa      	str	r2, [r7, #28]
 80038ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038f6:	f7fd f9e7 	bl	8000cc8 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4613      	mov	r3, r2
 8003900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003902:	e053      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003904:	4b35      	ldr	r3, [pc, #212]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	2200      	movs	r2, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	617a      	str	r2, [r7, #20]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003916:	f04f 0b00 	mov.w	fp, #0
 800391a:	4652      	mov	r2, sl
 800391c:	465b      	mov	r3, fp
 800391e:	f04f 0000 	mov.w	r0, #0
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	0159      	lsls	r1, r3, #5
 8003928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800392c:	0150      	lsls	r0, r2, #5
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	ebb2 080a 	subs.w	r8, r2, sl
 8003936:	eb63 090b 	sbc.w	r9, r3, fp
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800394a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800394e:	ebb2 0408 	subs.w	r4, r2, r8
 8003952:	eb63 0509 	sbc.w	r5, r3, r9
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	00eb      	lsls	r3, r5, #3
 8003960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003964:	00e2      	lsls	r2, r4, #3
 8003966:	4614      	mov	r4, r2
 8003968:	461d      	mov	r5, r3
 800396a:	eb14 030a 	adds.w	r3, r4, sl
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	eb45 030b 	adc.w	r3, r5, fp
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003982:	4629      	mov	r1, r5
 8003984:	028b      	lsls	r3, r1, #10
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398c:	4621      	mov	r1, r4
 800398e:	028a      	lsls	r2, r1, #10
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003996:	2200      	movs	r2, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	60fa      	str	r2, [r7, #12]
 800399c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a0:	f7fd f992 	bl	8000cc8 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3740      	adds	r7, #64	@ 0x40
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	017d7840 	.word	0x017d7840

080039e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000000c 	.word	0x2000000c

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	0800984c 	.word	0x0800984c

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a2c:	f7ff ffdc 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0b5b      	lsrs	r3, r3, #13
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0800984c 	.word	0x0800984c

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a78:	4b69      	ldr	r3, [pc, #420]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a68      	ldr	r2, [pc, #416]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a82:	6093      	str	r3, [r2, #8]
 8003a84:	4b66      	ldr	r3, [pc, #408]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8c:	4964      	ldr	r1, [pc, #400]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	4959      	ldr	r1, [pc, #356]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d017      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	494a      	ldr	r1, [pc, #296]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b04:	d101      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 808b 	beq.w	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	4a39      	ldr	r2, [pc, #228]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b40:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b4c:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a34      	ldr	r2, [pc, #208]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fe fc0a 	bl	8002370 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fc06 	bl	8002370 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	@ 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e357      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b72:	4b2c      	ldr	r3, [pc, #176]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d035      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d02e      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9c:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bc4:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d114      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fbce 	bl	8002370 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fbca 	bl	8002370 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e319      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c06:	d111      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c14:	4b04      	ldr	r3, [pc, #16]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c16:	400b      	ands	r3, r1
 8003c18:	4901      	ldr	r1, [pc, #4]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	0ffffcff 	.word	0x0ffffcff
 8003c2c:	4baa      	ldr	r3, [pc, #680]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4aa9      	ldr	r2, [pc, #676]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c36:	6093      	str	r3, [r2, #8]
 8003c38:	4ba7      	ldr	r3, [pc, #668]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	49a4      	ldr	r1, [pc, #656]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c56:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c5c:	4a9e      	ldr	r2, [pc, #632]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c66:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	4999      	ldr	r1, [pc, #612]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c84:	4b94      	ldr	r3, [pc, #592]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c92:	4991      	ldr	r1, [pc, #580]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb4:	4988      	ldr	r1, [pc, #544]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc8:	4b83      	ldr	r3, [pc, #524]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd6:	4980      	ldr	r1, [pc, #512]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cea:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf8:	4977      	ldr	r1, [pc, #476]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0c:	4b72      	ldr	r3, [pc, #456]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	496f      	ldr	r1, [pc, #444]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d34:	f023 020c 	bic.w	r2, r3, #12
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3c:	4966      	ldr	r1, [pc, #408]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d50:	4b61      	ldr	r3, [pc, #388]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	495e      	ldr	r1, [pc, #376]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d72:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d80:	4955      	ldr	r1, [pc, #340]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d94:	4b50      	ldr	r3, [pc, #320]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da2:	494d      	ldr	r1, [pc, #308]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003db6:	4b48      	ldr	r3, [pc, #288]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	4944      	ldr	r1, [pc, #272]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	493c      	ldr	r1, [pc, #240]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dfa:	4b37      	ldr	r3, [pc, #220]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	4933      	ldr	r1, [pc, #204]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2a:	492b      	ldr	r1, [pc, #172]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e4c:	4922      	ldr	r1, [pc, #136]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8c:	4912      	ldr	r1, [pc, #72]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb0:	4909      	ldr	r1, [pc, #36]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d006      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80d9 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ecc:	4b02      	ldr	r3, [pc, #8]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a01      	ldr	r2, [pc, #4]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fe fa47 	bl	8002370 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee6:	f7fe fa43 	bl	8002370 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	@ 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e194      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d021      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11d      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f18:	4b64      	ldr	r3, [pc, #400]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f26:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2c:	0e1b      	lsrs	r3, r3, #24
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	019a      	lsls	r2, r3, #6
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	071b      	lsls	r3, r3, #28
 8003f4c:	4957      	ldr	r1, [pc, #348]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d02e      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f7e:	d129      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f80:	4b4a      	ldr	r3, [pc, #296]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f8e:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f94:	0f1b      	lsrs	r3, r3, #28
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	019a      	lsls	r2, r3, #6
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	071b      	lsls	r3, r3, #28
 8003fb4:	493d      	ldr	r1, [pc, #244]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc2:	f023 021f 	bic.w	r2, r3, #31
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	4937      	ldr	r1, [pc, #220]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01d      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fe0:	4b32      	ldr	r3, [pc, #200]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	0e1b      	lsrs	r3, r3, #24
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fee:	4b2f      	ldr	r3, [pc, #188]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff4:	0f1b      	lsrs	r3, r3, #28
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	019a      	lsls	r2, r3, #6
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	431a      	orrs	r2, r3
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	431a      	orrs	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	071b      	lsls	r3, r3, #28
 8004014:	4925      	ldr	r1, [pc, #148]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	019a      	lsls	r2, r3, #6
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	071b      	lsls	r3, r3, #28
 8004044:	4919      	ldr	r1, [pc, #100]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800404c:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004052:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7fe f98a 	bl	8002370 <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004060:	f7fe f986 	bl	8002370 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	@ 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0d7      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004072:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 80cd 	bne.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004086:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fe f96d 	bl	8002370 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800409a:	f7fe f969 	bl	8002370 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	@ 0x64
 80040a6:	d903      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0ba      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b0:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040bc:	d0ed      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e6:	4b51      	ldr	r3, [pc, #324]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040f4:	4b4d      	ldr	r3, [pc, #308]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	0f1b      	lsrs	r3, r3, #28
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	019a      	lsls	r2, r3, #6
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	4944      	ldr	r1, [pc, #272]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004122:	4b42      	ldr	r3, [pc, #264]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004128:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	493d      	ldr	r1, [pc, #244]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d022      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800414c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004150:	d11d      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004160:	4b32      	ldr	r3, [pc, #200]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	0f1b      	lsrs	r3, r3, #28
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	431a      	orrs	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	4929      	ldr	r1, [pc, #164]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d028      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041a8:	4b20      	ldr	r3, [pc, #128]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	019a      	lsls	r2, r3, #6
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	4917      	ldr	r1, [pc, #92]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	4911      	ldr	r1, [pc, #68]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0e      	ldr	r2, [pc, #56]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fe f8ba 	bl	8002370 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004200:	f7fe f8b6 	bl	8002370 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e007      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800421e:	d1ef      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e049      	b.n	80042d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fe56 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 f986 	bl	8004580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d122      	bne.n	800433a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d11b      	bne.n	800433a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0202 	mvn.w	r2, #2
 800430a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f90f 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 8004326:	e005      	b.n	8004334 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f901 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f912 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d122      	bne.n	800438e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d11b      	bne.n	800438e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0204 	mvn.w	r2, #4
 800435e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8e5 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 800437a:	e005      	b.n	8004388 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8d7 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8e8 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d122      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11b      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f06f 0208 	mvn.w	r2, #8
 80043b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f8bb 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 80043ce:	e005      	b.n	80043dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8ad 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8be 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d122      	bne.n	8004436 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d11b      	bne.n	8004436 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0210 	mvn.w	r2, #16
 8004406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2208      	movs	r2, #8
 800440c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f891 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 8004422:	e005      	b.n	8004430 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f883 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f894 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10e      	bne.n	8004462 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f06f 0201 	mvn.w	r2, #1
 800445a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f85d 	bl	800451c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d10e      	bne.n	800448e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d107      	bne.n	800448e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f923 	bl	80046d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f916 	bl	80046e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f842 	bl	800456c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0220 	mvn.w	r2, #32
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8d6 	bl	80046c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a40      	ldr	r2, [pc, #256]	@ (8004694 <TIM_Base_SetConfig+0x114>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459e:	d00f      	beq.n	80045c0 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004698 <TIM_Base_SetConfig+0x118>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3c      	ldr	r2, [pc, #240]	@ (800469c <TIM_Base_SetConfig+0x11c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3b      	ldr	r2, [pc, #236]	@ (80046a0 <TIM_Base_SetConfig+0x120>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3a      	ldr	r2, [pc, #232]	@ (80046a4 <TIM_Base_SetConfig+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d108      	bne.n	80045d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004694 <TIM_Base_SetConfig+0x114>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02b      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e0:	d027      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <TIM_Base_SetConfig+0x118>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d023      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2b      	ldr	r2, [pc, #172]	@ (800469c <TIM_Base_SetConfig+0x11c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01f      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <TIM_Base_SetConfig+0x120>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01b      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a29      	ldr	r2, [pc, #164]	@ (80046a4 <TIM_Base_SetConfig+0x124>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d017      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <TIM_Base_SetConfig+0x128>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a27      	ldr	r2, [pc, #156]	@ (80046ac <TIM_Base_SetConfig+0x12c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00f      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <TIM_Base_SetConfig+0x130>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <TIM_Base_SetConfig+0x134>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a24      	ldr	r2, [pc, #144]	@ (80046b8 <TIM_Base_SetConfig+0x138>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a23      	ldr	r2, [pc, #140]	@ (80046bc <TIM_Base_SetConfig+0x13c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d108      	bne.n	8004644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <TIM_Base_SetConfig+0x114>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0xf8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0c      	ldr	r2, [pc, #48]	@ (80046a4 <TIM_Base_SetConfig+0x124>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d103      	bne.n	8004680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	615a      	str	r2, [r3, #20]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40010000 	.word	0x40010000
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40010400 	.word	0x40010400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40001800 	.word	0x40001800
 80046b8:	40001c00 	.word	0x40001c00
 80046bc:	40002000 	.word	0x40002000

080046c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e040      	b.n	8004790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd fc18 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8b0 	bl	80048a0 <UART_SetConfig>
 8004740:	4603      	mov	r3, r0
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e022      	b.n	8004790 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fb08 	bl	8004d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb8f 	bl	8004eac <UART_CheckIdleState>
 800478e:	4603      	mov	r3, r0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	@ 0x28
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d171      	bne.n	8004894 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Transmit+0x24>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e06a      	b.n	8004896 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	@ 0x21
 80047cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fd fdcf 	bl	8002370 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Transmit+0x68>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004808:	e02c      	b.n	8004864 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	@ 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fb80 	bl	8004f1a <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e038      	b.n	8004896 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004838:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	3302      	adds	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e007      	b.n	8004852 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	3301      	adds	r3, #1
 8004850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1cc      	bne.n	800480a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	2140      	movs	r1, #64	@ 0x40
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fb4d 	bl	8004f1a <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e005      	b.n	8004896 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4ba6      	ldr	r3, [pc, #664]	@ (8004b64 <UART_SetConfig+0x2c4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a94      	ldr	r2, [pc, #592]	@ (8004b68 <UART_SetConfig+0x2c8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d120      	bne.n	800495e <UART_SetConfig+0xbe>
 800491c:	4b93      	ldr	r3, [pc, #588]	@ (8004b6c <UART_SetConfig+0x2cc>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b03      	cmp	r3, #3
 8004928:	d816      	bhi.n	8004958 <UART_SetConfig+0xb8>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x90>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004941 	.word	0x08004941
 8004934:	0800494d 	.word	0x0800494d
 8004938:	08004947 	.word	0x08004947
 800493c:	08004953 	.word	0x08004953
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e150      	b.n	8004be8 <UART_SetConfig+0x348>
 8004946:	2302      	movs	r3, #2
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e14d      	b.n	8004be8 <UART_SetConfig+0x348>
 800494c:	2304      	movs	r3, #4
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e14a      	b.n	8004be8 <UART_SetConfig+0x348>
 8004952:	2308      	movs	r3, #8
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e147      	b.n	8004be8 <UART_SetConfig+0x348>
 8004958:	2310      	movs	r3, #16
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e144      	b.n	8004be8 <UART_SetConfig+0x348>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a83      	ldr	r2, [pc, #524]	@ (8004b70 <UART_SetConfig+0x2d0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d132      	bne.n	80049ce <UART_SetConfig+0x12e>
 8004968:	4b80      	ldr	r3, [pc, #512]	@ (8004b6c <UART_SetConfig+0x2cc>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d828      	bhi.n	80049c8 <UART_SetConfig+0x128>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0xdc>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049c9 	.word	0x080049c9
 8004984:	080049c9 	.word	0x080049c9
 8004988:	080049c9 	.word	0x080049c9
 800498c:	080049bd 	.word	0x080049bd
 8004990:	080049c9 	.word	0x080049c9
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049c9 	.word	0x080049c9
 800499c:	080049b7 	.word	0x080049b7
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049c9 	.word	0x080049c9
 80049ac:	080049c3 	.word	0x080049c3
 80049b0:	2300      	movs	r3, #0
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e118      	b.n	8004be8 <UART_SetConfig+0x348>
 80049b6:	2302      	movs	r3, #2
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e115      	b.n	8004be8 <UART_SetConfig+0x348>
 80049bc:	2304      	movs	r3, #4
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e112      	b.n	8004be8 <UART_SetConfig+0x348>
 80049c2:	2308      	movs	r3, #8
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e10f      	b.n	8004be8 <UART_SetConfig+0x348>
 80049c8:	2310      	movs	r3, #16
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e10c      	b.n	8004be8 <UART_SetConfig+0x348>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a68      	ldr	r2, [pc, #416]	@ (8004b74 <UART_SetConfig+0x2d4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d120      	bne.n	8004a1a <UART_SetConfig+0x17a>
 80049d8:	4b64      	ldr	r3, [pc, #400]	@ (8004b6c <UART_SetConfig+0x2cc>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049e2:	2b30      	cmp	r3, #48	@ 0x30
 80049e4:	d013      	beq.n	8004a0e <UART_SetConfig+0x16e>
 80049e6:	2b30      	cmp	r3, #48	@ 0x30
 80049e8:	d814      	bhi.n	8004a14 <UART_SetConfig+0x174>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d009      	beq.n	8004a02 <UART_SetConfig+0x162>
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d810      	bhi.n	8004a14 <UART_SetConfig+0x174>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <UART_SetConfig+0x15c>
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d006      	beq.n	8004a08 <UART_SetConfig+0x168>
 80049fa:	e00b      	b.n	8004a14 <UART_SetConfig+0x174>
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e0f2      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e0ef      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e0ec      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e0e9      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a14:	2310      	movs	r3, #16
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e0e6      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a56      	ldr	r2, [pc, #344]	@ (8004b78 <UART_SetConfig+0x2d8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d120      	bne.n	8004a66 <UART_SetConfig+0x1c6>
 8004a24:	4b51      	ldr	r3, [pc, #324]	@ (8004b6c <UART_SetConfig+0x2cc>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a30:	d013      	beq.n	8004a5a <UART_SetConfig+0x1ba>
 8004a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a34:	d814      	bhi.n	8004a60 <UART_SetConfig+0x1c0>
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d009      	beq.n	8004a4e <UART_SetConfig+0x1ae>
 8004a3a:	2b80      	cmp	r3, #128	@ 0x80
 8004a3c:	d810      	bhi.n	8004a60 <UART_SetConfig+0x1c0>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <UART_SetConfig+0x1a8>
 8004a42:	2b40      	cmp	r3, #64	@ 0x40
 8004a44:	d006      	beq.n	8004a54 <UART_SetConfig+0x1b4>
 8004a46:	e00b      	b.n	8004a60 <UART_SetConfig+0x1c0>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e0cc      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e0c9      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a54:	2304      	movs	r3, #4
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0c6      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e0c3      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a60:	2310      	movs	r3, #16
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0c0      	b.n	8004be8 <UART_SetConfig+0x348>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a44      	ldr	r2, [pc, #272]	@ (8004b7c <UART_SetConfig+0x2dc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d125      	bne.n	8004abc <UART_SetConfig+0x21c>
 8004a70:	4b3e      	ldr	r3, [pc, #248]	@ (8004b6c <UART_SetConfig+0x2cc>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a7e:	d017      	beq.n	8004ab0 <UART_SetConfig+0x210>
 8004a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a84:	d817      	bhi.n	8004ab6 <UART_SetConfig+0x216>
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a8a:	d00b      	beq.n	8004aa4 <UART_SetConfig+0x204>
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a90:	d811      	bhi.n	8004ab6 <UART_SetConfig+0x216>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <UART_SetConfig+0x1fe>
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9a:	d006      	beq.n	8004aaa <UART_SetConfig+0x20a>
 8004a9c:	e00b      	b.n	8004ab6 <UART_SetConfig+0x216>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e0a1      	b.n	8004be8 <UART_SetConfig+0x348>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e09e      	b.n	8004be8 <UART_SetConfig+0x348>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e09b      	b.n	8004be8 <UART_SetConfig+0x348>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e098      	b.n	8004be8 <UART_SetConfig+0x348>
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e095      	b.n	8004be8 <UART_SetConfig+0x348>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8004b80 <UART_SetConfig+0x2e0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d125      	bne.n	8004b12 <UART_SetConfig+0x272>
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <UART_SetConfig+0x2cc>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ad4:	d017      	beq.n	8004b06 <UART_SetConfig+0x266>
 8004ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ada:	d817      	bhi.n	8004b0c <UART_SetConfig+0x26c>
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae0:	d00b      	beq.n	8004afa <UART_SetConfig+0x25a>
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ae6:	d811      	bhi.n	8004b0c <UART_SetConfig+0x26c>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <UART_SetConfig+0x254>
 8004aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af0:	d006      	beq.n	8004b00 <UART_SetConfig+0x260>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x26c>
 8004af4:	2301      	movs	r3, #1
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e076      	b.n	8004be8 <UART_SetConfig+0x348>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e073      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e070      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e06d      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e06a      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	@ (8004b84 <UART_SetConfig+0x2e4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d138      	bne.n	8004b8e <UART_SetConfig+0x2ee>
 8004b1c:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <UART_SetConfig+0x2cc>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b2a:	d017      	beq.n	8004b5c <UART_SetConfig+0x2bc>
 8004b2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b30:	d82a      	bhi.n	8004b88 <UART_SetConfig+0x2e8>
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b36:	d00b      	beq.n	8004b50 <UART_SetConfig+0x2b0>
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3c:	d824      	bhi.n	8004b88 <UART_SetConfig+0x2e8>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <UART_SetConfig+0x2aa>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	d006      	beq.n	8004b56 <UART_SetConfig+0x2b6>
 8004b48:	e01e      	b.n	8004b88 <UART_SetConfig+0x2e8>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e04b      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b50:	2302      	movs	r3, #2
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e048      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b56:	2304      	movs	r3, #4
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e045      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e042      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b62:	bf00      	nop
 8004b64:	efff69f3 	.word	0xefff69f3
 8004b68:	40011000 	.word	0x40011000
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40004400 	.word	0x40004400
 8004b74:	40004800 	.word	0x40004800
 8004b78:	40004c00 	.word	0x40004c00
 8004b7c:	40005000 	.word	0x40005000
 8004b80:	40011400 	.word	0x40011400
 8004b84:	40007800 	.word	0x40007800
 8004b88:	2310      	movs	r3, #16
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e02c      	b.n	8004be8 <UART_SetConfig+0x348>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a72      	ldr	r2, [pc, #456]	@ (8004d5c <UART_SetConfig+0x4bc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d125      	bne.n	8004be4 <UART_SetConfig+0x344>
 8004b98:	4b71      	ldr	r3, [pc, #452]	@ (8004d60 <UART_SetConfig+0x4c0>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ba2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ba6:	d017      	beq.n	8004bd8 <UART_SetConfig+0x338>
 8004ba8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bac:	d817      	bhi.n	8004bde <UART_SetConfig+0x33e>
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d00b      	beq.n	8004bcc <UART_SetConfig+0x32c>
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb8:	d811      	bhi.n	8004bde <UART_SetConfig+0x33e>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <UART_SetConfig+0x326>
 8004bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc2:	d006      	beq.n	8004bd2 <UART_SetConfig+0x332>
 8004bc4:	e00b      	b.n	8004bde <UART_SetConfig+0x33e>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e00d      	b.n	8004be8 <UART_SetConfig+0x348>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e00a      	b.n	8004be8 <UART_SetConfig+0x348>
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e007      	b.n	8004be8 <UART_SetConfig+0x348>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e004      	b.n	8004be8 <UART_SetConfig+0x348>
 8004bde:	2310      	movs	r3, #16
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e001      	b.n	8004be8 <UART_SetConfig+0x348>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf0:	d15b      	bne.n	8004caa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d828      	bhi.n	8004c4a <UART_SetConfig+0x3aa>
 8004bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <UART_SetConfig+0x360>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe feec 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004c28:	61b8      	str	r0, [r7, #24]
        break;
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe fefc 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004c30:	61b8      	str	r0, [r7, #24]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b4b      	ldr	r3, [pc, #300]	@ (8004d64 <UART_SetConfig+0x4c4>)
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fe0f 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8004c3e:	61b8      	str	r0, [r7, #24]
        break;
 8004c40:	e008      	b.n	8004c54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c46:	61bb      	str	r3, [r7, #24]
        break;
 8004c48:	e004      	b.n	8004c54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	77bb      	strb	r3, [r7, #30]
        break;
 8004c52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d074      	beq.n	8004d44 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	005a      	lsls	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b0f      	cmp	r3, #15
 8004c74:	d916      	bls.n	8004ca4 <UART_SetConfig+0x404>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7c:	d212      	bcs.n	8004ca4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f023 030f 	bic.w	r3, r3, #15
 8004c86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	89fa      	ldrh	r2, [r7, #14]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e04f      	b.n	8004d44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77bb      	strb	r3, [r7, #30]
 8004ca8:	e04c      	b.n	8004d44 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d828      	bhi.n	8004d02 <UART_SetConfig+0x462>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <UART_SetConfig+0x418>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fe fe90 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61b8      	str	r0, [r7, #24]
        break;
 8004ce2:	e013      	b.n	8004d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fe fea0 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	61b8      	str	r0, [r7, #24]
        break;
 8004cea:	e00f      	b.n	8004d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <UART_SetConfig+0x4c4>)
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e00c      	b.n	8004d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fe fdb3 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8004cf6:	61b8      	str	r0, [r7, #24]
        break;
 8004cf8:	e008      	b.n	8004d0c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfe:	61bb      	str	r3, [r7, #24]
        break;
 8004d00:	e004      	b.n	8004d0c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	77bb      	strb	r3, [r7, #30]
        break;
 8004d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	085a      	lsrs	r2, r3, #1
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d909      	bls.n	8004d40 <UART_SetConfig+0x4a0>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d32:	d205      	bcs.n	8004d40 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e001      	b.n	8004d44 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40007c00 	.word	0x40007c00
 8004d60:	40023800 	.word	0x40023800
 8004d64:	00f42400 	.word	0x00f42400

08004d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e66:	d10a      	bne.n	8004e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ebc:	f7fd fa58 	bl	8002370 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d10e      	bne.n	8004eee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f81b 	bl	8004f1a <UART_WaitOnFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e011      	b.n	8004f12 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b09c      	sub	sp, #112	@ 0x70
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2a:	e0a7      	b.n	800507c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	f000 80a3 	beq.w	800507c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fd fa1b 	bl	8002370 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13f      	bne.n	8004fcc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f60:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f9e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004fa0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e068      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d050      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe8:	d148      	bne.n	800507c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ff2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
 8005014:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e6      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	613b      	str	r3, [r7, #16]
   return(result);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3308      	adds	r3, #8
 8005044:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005046:	623a      	str	r2, [r7, #32]
 8005048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	61bb      	str	r3, [r7, #24]
   return(result);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e010      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4013      	ands	r3, r2
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	429a      	cmp	r2, r3
 8005098:	f43f af48 	beq.w	8004f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3770      	adds	r7, #112	@ 0x70
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <__cvt>:
 80050a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050aa:	ec57 6b10 	vmov	r6, r7, d0
 80050ae:	2f00      	cmp	r7, #0
 80050b0:	460c      	mov	r4, r1
 80050b2:	4619      	mov	r1, r3
 80050b4:	463b      	mov	r3, r7
 80050b6:	bfbb      	ittet	lt
 80050b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050bc:	461f      	movlt	r7, r3
 80050be:	2300      	movge	r3, #0
 80050c0:	232d      	movlt	r3, #45	@ 0x2d
 80050c2:	700b      	strb	r3, [r1, #0]
 80050c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050ca:	4691      	mov	r9, r2
 80050cc:	f023 0820 	bic.w	r8, r3, #32
 80050d0:	bfbc      	itt	lt
 80050d2:	4632      	movlt	r2, r6
 80050d4:	4616      	movlt	r6, r2
 80050d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050da:	d005      	beq.n	80050e8 <__cvt+0x42>
 80050dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050e0:	d100      	bne.n	80050e4 <__cvt+0x3e>
 80050e2:	3401      	adds	r4, #1
 80050e4:	2102      	movs	r1, #2
 80050e6:	e000      	b.n	80050ea <__cvt+0x44>
 80050e8:	2103      	movs	r1, #3
 80050ea:	ab03      	add	r3, sp, #12
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	ab02      	add	r3, sp, #8
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	ec47 6b10 	vmov	d0, r6, r7
 80050f6:	4653      	mov	r3, sl
 80050f8:	4622      	mov	r2, r4
 80050fa:	f001 f875 	bl	80061e8 <_dtoa_r>
 80050fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005102:	4605      	mov	r5, r0
 8005104:	d119      	bne.n	800513a <__cvt+0x94>
 8005106:	f019 0f01 	tst.w	r9, #1
 800510a:	d00e      	beq.n	800512a <__cvt+0x84>
 800510c:	eb00 0904 	add.w	r9, r0, r4
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	f7fb fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 800511c:	b108      	cbz	r0, 8005122 <__cvt+0x7c>
 800511e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005122:	2230      	movs	r2, #48	@ 0x30
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	454b      	cmp	r3, r9
 8005128:	d31e      	bcc.n	8005168 <__cvt+0xc2>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800512e:	1b5b      	subs	r3, r3, r5
 8005130:	4628      	mov	r0, r5
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	b004      	add	sp, #16
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800513e:	eb00 0904 	add.w	r9, r0, r4
 8005142:	d1e5      	bne.n	8005110 <__cvt+0x6a>
 8005144:	7803      	ldrb	r3, [r0, #0]
 8005146:	2b30      	cmp	r3, #48	@ 0x30
 8005148:	d10a      	bne.n	8005160 <__cvt+0xba>
 800514a:	2200      	movs	r2, #0
 800514c:	2300      	movs	r3, #0
 800514e:	4630      	mov	r0, r6
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 8005156:	b918      	cbnz	r0, 8005160 <__cvt+0xba>
 8005158:	f1c4 0401 	rsb	r4, r4, #1
 800515c:	f8ca 4000 	str.w	r4, [sl]
 8005160:	f8da 3000 	ldr.w	r3, [sl]
 8005164:	4499      	add	r9, r3
 8005166:	e7d3      	b.n	8005110 <__cvt+0x6a>
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	9103      	str	r1, [sp, #12]
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e7d9      	b.n	8005124 <__cvt+0x7e>

08005170 <__exponent>:
 8005170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005172:	2900      	cmp	r1, #0
 8005174:	bfba      	itte	lt
 8005176:	4249      	neglt	r1, r1
 8005178:	232d      	movlt	r3, #45	@ 0x2d
 800517a:	232b      	movge	r3, #43	@ 0x2b
 800517c:	2909      	cmp	r1, #9
 800517e:	7002      	strb	r2, [r0, #0]
 8005180:	7043      	strb	r3, [r0, #1]
 8005182:	dd29      	ble.n	80051d8 <__exponent+0x68>
 8005184:	f10d 0307 	add.w	r3, sp, #7
 8005188:	461d      	mov	r5, r3
 800518a:	270a      	movs	r7, #10
 800518c:	461a      	mov	r2, r3
 800518e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005192:	fb07 1416 	mls	r4, r7, r6, r1
 8005196:	3430      	adds	r4, #48	@ 0x30
 8005198:	f802 4c01 	strb.w	r4, [r2, #-1]
 800519c:	460c      	mov	r4, r1
 800519e:	2c63      	cmp	r4, #99	@ 0x63
 80051a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80051a4:	4631      	mov	r1, r6
 80051a6:	dcf1      	bgt.n	800518c <__exponent+0x1c>
 80051a8:	3130      	adds	r1, #48	@ 0x30
 80051aa:	1e94      	subs	r4, r2, #2
 80051ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051b0:	1c41      	adds	r1, r0, #1
 80051b2:	4623      	mov	r3, r4
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	d30a      	bcc.n	80051ce <__exponent+0x5e>
 80051b8:	f10d 0309 	add.w	r3, sp, #9
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	42ac      	cmp	r4, r5
 80051c0:	bf88      	it	hi
 80051c2:	2300      	movhi	r3, #0
 80051c4:	3302      	adds	r3, #2
 80051c6:	4403      	add	r3, r0
 80051c8:	1a18      	subs	r0, r3, r0
 80051ca:	b003      	add	sp, #12
 80051cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051d6:	e7ed      	b.n	80051b4 <__exponent+0x44>
 80051d8:	2330      	movs	r3, #48	@ 0x30
 80051da:	3130      	adds	r1, #48	@ 0x30
 80051dc:	7083      	strb	r3, [r0, #2]
 80051de:	70c1      	strb	r1, [r0, #3]
 80051e0:	1d03      	adds	r3, r0, #4
 80051e2:	e7f1      	b.n	80051c8 <__exponent+0x58>

080051e4 <_printf_float>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	b08d      	sub	sp, #52	@ 0x34
 80051ea:	460c      	mov	r4, r1
 80051ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051f0:	4616      	mov	r6, r2
 80051f2:	461f      	mov	r7, r3
 80051f4:	4605      	mov	r5, r0
 80051f6:	f000 feef 	bl	8005fd8 <_localeconv_r>
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb f856 	bl	80002b0 <strlen>
 8005204:	2300      	movs	r3, #0
 8005206:	930a      	str	r3, [sp, #40]	@ 0x28
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	9005      	str	r0, [sp, #20]
 800520e:	3307      	adds	r3, #7
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	f103 0208 	add.w	r2, r3, #8
 8005218:	f894 a018 	ldrb.w	sl, [r4, #24]
 800521c:	f8d4 b000 	ldr.w	fp, [r4]
 8005220:	f8c8 2000 	str.w	r2, [r8]
 8005224:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005228:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800522c:	9307      	str	r3, [sp, #28]
 800522e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005232:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800523a:	4b9c      	ldr	r3, [pc, #624]	@ (80054ac <_printf_float+0x2c8>)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	f7fb fc94 	bl	8000b6c <__aeabi_dcmpun>
 8005244:	bb70      	cbnz	r0, 80052a4 <_printf_float+0xc0>
 8005246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524a:	4b98      	ldr	r3, [pc, #608]	@ (80054ac <_printf_float+0x2c8>)
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	f7fb fc6e 	bl	8000b30 <__aeabi_dcmple>
 8005254:	bb30      	cbnz	r0, 80052a4 <_printf_float+0xc0>
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	4640      	mov	r0, r8
 800525c:	4649      	mov	r1, r9
 800525e:	f7fb fc5d 	bl	8000b1c <__aeabi_dcmplt>
 8005262:	b110      	cbz	r0, 800526a <_printf_float+0x86>
 8005264:	232d      	movs	r3, #45	@ 0x2d
 8005266:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800526a:	4a91      	ldr	r2, [pc, #580]	@ (80054b0 <_printf_float+0x2cc>)
 800526c:	4b91      	ldr	r3, [pc, #580]	@ (80054b4 <_printf_float+0x2d0>)
 800526e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005272:	bf94      	ite	ls
 8005274:	4690      	movls	r8, r2
 8005276:	4698      	movhi	r8, r3
 8005278:	2303      	movs	r3, #3
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	f02b 0304 	bic.w	r3, fp, #4
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	f04f 0900 	mov.w	r9, #0
 8005286:	9700      	str	r7, [sp, #0]
 8005288:	4633      	mov	r3, r6
 800528a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f9d2 	bl	8005638 <_printf_common>
 8005294:	3001      	adds	r0, #1
 8005296:	f040 808d 	bne.w	80053b4 <_printf_float+0x1d0>
 800529a:	f04f 30ff 	mov.w	r0, #4294967295
 800529e:	b00d      	add	sp, #52	@ 0x34
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fb fc5e 	bl	8000b6c <__aeabi_dcmpun>
 80052b0:	b140      	cbz	r0, 80052c4 <_printf_float+0xe0>
 80052b2:	464b      	mov	r3, r9
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bfbc      	itt	lt
 80052b8:	232d      	movlt	r3, #45	@ 0x2d
 80052ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052be:	4a7e      	ldr	r2, [pc, #504]	@ (80054b8 <_printf_float+0x2d4>)
 80052c0:	4b7e      	ldr	r3, [pc, #504]	@ (80054bc <_printf_float+0x2d8>)
 80052c2:	e7d4      	b.n	800526e <_printf_float+0x8a>
 80052c4:	6863      	ldr	r3, [r4, #4]
 80052c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052ca:	9206      	str	r2, [sp, #24]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	d13b      	bne.n	8005348 <_printf_float+0x164>
 80052d0:	2306      	movs	r3, #6
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052d8:	2300      	movs	r3, #0
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	ab0a      	add	r3, sp, #40	@ 0x28
 80052e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052e4:	ab09      	add	r3, sp, #36	@ 0x24
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	6861      	ldr	r1, [r4, #4]
 80052ea:	ec49 8b10 	vmov	d0, r8, r9
 80052ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052f2:	4628      	mov	r0, r5
 80052f4:	f7ff fed7 	bl	80050a6 <__cvt>
 80052f8:	9b06      	ldr	r3, [sp, #24]
 80052fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052fc:	2b47      	cmp	r3, #71	@ 0x47
 80052fe:	4680      	mov	r8, r0
 8005300:	d129      	bne.n	8005356 <_printf_float+0x172>
 8005302:	1cc8      	adds	r0, r1, #3
 8005304:	db02      	blt.n	800530c <_printf_float+0x128>
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	4299      	cmp	r1, r3
 800530a:	dd41      	ble.n	8005390 <_printf_float+0x1ac>
 800530c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005310:	fa5f fa8a 	uxtb.w	sl, sl
 8005314:	3901      	subs	r1, #1
 8005316:	4652      	mov	r2, sl
 8005318:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800531c:	9109      	str	r1, [sp, #36]	@ 0x24
 800531e:	f7ff ff27 	bl	8005170 <__exponent>
 8005322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005324:	1813      	adds	r3, r2, r0
 8005326:	2a01      	cmp	r2, #1
 8005328:	4681      	mov	r9, r0
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	dc02      	bgt.n	8005334 <_printf_float+0x150>
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	07d2      	lsls	r2, r2, #31
 8005332:	d501      	bpl.n	8005338 <_printf_float+0x154>
 8005334:	3301      	adds	r3, #1
 8005336:	6123      	str	r3, [r4, #16]
 8005338:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0a2      	beq.n	8005286 <_printf_float+0xa2>
 8005340:	232d      	movs	r3, #45	@ 0x2d
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005346:	e79e      	b.n	8005286 <_printf_float+0xa2>
 8005348:	9a06      	ldr	r2, [sp, #24]
 800534a:	2a47      	cmp	r2, #71	@ 0x47
 800534c:	d1c2      	bne.n	80052d4 <_printf_float+0xf0>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1c0      	bne.n	80052d4 <_printf_float+0xf0>
 8005352:	2301      	movs	r3, #1
 8005354:	e7bd      	b.n	80052d2 <_printf_float+0xee>
 8005356:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800535a:	d9db      	bls.n	8005314 <_printf_float+0x130>
 800535c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005360:	d118      	bne.n	8005394 <_printf_float+0x1b0>
 8005362:	2900      	cmp	r1, #0
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	dd0b      	ble.n	8005380 <_printf_float+0x19c>
 8005368:	6121      	str	r1, [r4, #16]
 800536a:	b913      	cbnz	r3, 8005372 <_printf_float+0x18e>
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	07d0      	lsls	r0, r2, #31
 8005370:	d502      	bpl.n	8005378 <_printf_float+0x194>
 8005372:	3301      	adds	r3, #1
 8005374:	440b      	add	r3, r1
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	65a1      	str	r1, [r4, #88]	@ 0x58
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	e7db      	b.n	8005338 <_printf_float+0x154>
 8005380:	b913      	cbnz	r3, 8005388 <_printf_float+0x1a4>
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	07d2      	lsls	r2, r2, #31
 8005386:	d501      	bpl.n	800538c <_printf_float+0x1a8>
 8005388:	3302      	adds	r3, #2
 800538a:	e7f4      	b.n	8005376 <_printf_float+0x192>
 800538c:	2301      	movs	r3, #1
 800538e:	e7f2      	b.n	8005376 <_printf_float+0x192>
 8005390:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005396:	4299      	cmp	r1, r3
 8005398:	db05      	blt.n	80053a6 <_printf_float+0x1c2>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	6121      	str	r1, [r4, #16]
 800539e:	07d8      	lsls	r0, r3, #31
 80053a0:	d5ea      	bpl.n	8005378 <_printf_float+0x194>
 80053a2:	1c4b      	adds	r3, r1, #1
 80053a4:	e7e7      	b.n	8005376 <_printf_float+0x192>
 80053a6:	2900      	cmp	r1, #0
 80053a8:	bfd4      	ite	le
 80053aa:	f1c1 0202 	rsble	r2, r1, #2
 80053ae:	2201      	movgt	r2, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	e7e0      	b.n	8005376 <_printf_float+0x192>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	055a      	lsls	r2, r3, #21
 80053b8:	d407      	bmi.n	80053ca <_printf_float+0x1e6>
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	4642      	mov	r2, r8
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	d12b      	bne.n	8005420 <_printf_float+0x23c>
 80053c8:	e767      	b.n	800529a <_printf_float+0xb6>
 80053ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053ce:	f240 80dd 	bls.w	800558c <_printf_float+0x3a8>
 80053d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053d6:	2200      	movs	r2, #0
 80053d8:	2300      	movs	r3, #0
 80053da:	f7fb fb95 	bl	8000b08 <__aeabi_dcmpeq>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d033      	beq.n	800544a <_printf_float+0x266>
 80053e2:	4a37      	ldr	r2, [pc, #220]	@ (80054c0 <_printf_float+0x2dc>)
 80053e4:	2301      	movs	r3, #1
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	f43f af54 	beq.w	800529a <_printf_float+0xb6>
 80053f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053f6:	4543      	cmp	r3, r8
 80053f8:	db02      	blt.n	8005400 <_printf_float+0x21c>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	07d8      	lsls	r0, r3, #31
 80053fe:	d50f      	bpl.n	8005420 <_printf_float+0x23c>
 8005400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	f43f af45 	beq.w	800529a <_printf_float+0xb6>
 8005410:	f04f 0900 	mov.w	r9, #0
 8005414:	f108 38ff 	add.w	r8, r8, #4294967295
 8005418:	f104 0a1a 	add.w	sl, r4, #26
 800541c:	45c8      	cmp	r8, r9
 800541e:	dc09      	bgt.n	8005434 <_printf_float+0x250>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	079b      	lsls	r3, r3, #30
 8005424:	f100 8103 	bmi.w	800562e <_printf_float+0x44a>
 8005428:	68e0      	ldr	r0, [r4, #12]
 800542a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800542c:	4298      	cmp	r0, r3
 800542e:	bfb8      	it	lt
 8005430:	4618      	movlt	r0, r3
 8005432:	e734      	b.n	800529e <_printf_float+0xba>
 8005434:	2301      	movs	r3, #1
 8005436:	4652      	mov	r2, sl
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af2b 	beq.w	800529a <_printf_float+0xb6>
 8005444:	f109 0901 	add.w	r9, r9, #1
 8005448:	e7e8      	b.n	800541c <_printf_float+0x238>
 800544a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	dc39      	bgt.n	80054c4 <_printf_float+0x2e0>
 8005450:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <_printf_float+0x2dc>)
 8005452:	2301      	movs	r3, #1
 8005454:	4631      	mov	r1, r6
 8005456:	4628      	mov	r0, r5
 8005458:	47b8      	blx	r7
 800545a:	3001      	adds	r0, #1
 800545c:	f43f af1d 	beq.w	800529a <_printf_float+0xb6>
 8005460:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005464:	ea59 0303 	orrs.w	r3, r9, r3
 8005468:	d102      	bne.n	8005470 <_printf_float+0x28c>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	07d9      	lsls	r1, r3, #31
 800546e:	d5d7      	bpl.n	8005420 <_printf_float+0x23c>
 8005470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005474:	4631      	mov	r1, r6
 8005476:	4628      	mov	r0, r5
 8005478:	47b8      	blx	r7
 800547a:	3001      	adds	r0, #1
 800547c:	f43f af0d 	beq.w	800529a <_printf_float+0xb6>
 8005480:	f04f 0a00 	mov.w	sl, #0
 8005484:	f104 0b1a 	add.w	fp, r4, #26
 8005488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548a:	425b      	negs	r3, r3
 800548c:	4553      	cmp	r3, sl
 800548e:	dc01      	bgt.n	8005494 <_printf_float+0x2b0>
 8005490:	464b      	mov	r3, r9
 8005492:	e793      	b.n	80053bc <_printf_float+0x1d8>
 8005494:	2301      	movs	r3, #1
 8005496:	465a      	mov	r2, fp
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f aefb 	beq.w	800529a <_printf_float+0xb6>
 80054a4:	f10a 0a01 	add.w	sl, sl, #1
 80054a8:	e7ee      	b.n	8005488 <_printf_float+0x2a4>
 80054aa:	bf00      	nop
 80054ac:	7fefffff 	.word	0x7fefffff
 80054b0:	08009854 	.word	0x08009854
 80054b4:	08009858 	.word	0x08009858
 80054b8:	0800985c 	.word	0x0800985c
 80054bc:	08009860 	.word	0x08009860
 80054c0:	08009864 	.word	0x08009864
 80054c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054ca:	4553      	cmp	r3, sl
 80054cc:	bfa8      	it	ge
 80054ce:	4653      	movge	r3, sl
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	4699      	mov	r9, r3
 80054d4:	dc36      	bgt.n	8005544 <_printf_float+0x360>
 80054d6:	f04f 0b00 	mov.w	fp, #0
 80054da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054de:	f104 021a 	add.w	r2, r4, #26
 80054e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054e4:	9306      	str	r3, [sp, #24]
 80054e6:	eba3 0309 	sub.w	r3, r3, r9
 80054ea:	455b      	cmp	r3, fp
 80054ec:	dc31      	bgt.n	8005552 <_printf_float+0x36e>
 80054ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f0:	459a      	cmp	sl, r3
 80054f2:	dc3a      	bgt.n	800556a <_printf_float+0x386>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	07da      	lsls	r2, r3, #31
 80054f8:	d437      	bmi.n	800556a <_printf_float+0x386>
 80054fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	ebaa 0303 	sub.w	r3, sl, r3
 8005506:	4599      	cmp	r9, r3
 8005508:	bfa8      	it	ge
 800550a:	4699      	movge	r9, r3
 800550c:	f1b9 0f00 	cmp.w	r9, #0
 8005510:	dc33      	bgt.n	800557a <_printf_float+0x396>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800551a:	f104 0b1a 	add.w	fp, r4, #26
 800551e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005520:	ebaa 0303 	sub.w	r3, sl, r3
 8005524:	eba3 0309 	sub.w	r3, r3, r9
 8005528:	4543      	cmp	r3, r8
 800552a:	f77f af79 	ble.w	8005420 <_printf_float+0x23c>
 800552e:	2301      	movs	r3, #1
 8005530:	465a      	mov	r2, fp
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	47b8      	blx	r7
 8005538:	3001      	adds	r0, #1
 800553a:	f43f aeae 	beq.w	800529a <_printf_float+0xb6>
 800553e:	f108 0801 	add.w	r8, r8, #1
 8005542:	e7ec      	b.n	800551e <_printf_float+0x33a>
 8005544:	4642      	mov	r2, r8
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	d1c2      	bne.n	80054d6 <_printf_float+0x2f2>
 8005550:	e6a3      	b.n	800529a <_printf_float+0xb6>
 8005552:	2301      	movs	r3, #1
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	9206      	str	r2, [sp, #24]
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae9c 	beq.w	800529a <_printf_float+0xb6>
 8005562:	9a06      	ldr	r2, [sp, #24]
 8005564:	f10b 0b01 	add.w	fp, fp, #1
 8005568:	e7bb      	b.n	80054e2 <_printf_float+0x2fe>
 800556a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	d1c0      	bne.n	80054fa <_printf_float+0x316>
 8005578:	e68f      	b.n	800529a <_printf_float+0xb6>
 800557a:	9a06      	ldr	r2, [sp, #24]
 800557c:	464b      	mov	r3, r9
 800557e:	4442      	add	r2, r8
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	d1c3      	bne.n	8005512 <_printf_float+0x32e>
 800558a:	e686      	b.n	800529a <_printf_float+0xb6>
 800558c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005590:	f1ba 0f01 	cmp.w	sl, #1
 8005594:	dc01      	bgt.n	800559a <_printf_float+0x3b6>
 8005596:	07db      	lsls	r3, r3, #31
 8005598:	d536      	bpl.n	8005608 <_printf_float+0x424>
 800559a:	2301      	movs	r3, #1
 800559c:	4642      	mov	r2, r8
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f ae78 	beq.w	800529a <_printf_float+0xb6>
 80055aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	f43f ae70 	beq.w	800529a <_printf_float+0xb6>
 80055ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055be:	2200      	movs	r2, #0
 80055c0:	2300      	movs	r3, #0
 80055c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055c6:	f7fb fa9f 	bl	8000b08 <__aeabi_dcmpeq>
 80055ca:	b9c0      	cbnz	r0, 80055fe <_printf_float+0x41a>
 80055cc:	4653      	mov	r3, sl
 80055ce:	f108 0201 	add.w	r2, r8, #1
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	d10c      	bne.n	80055f6 <_printf_float+0x412>
 80055dc:	e65d      	b.n	800529a <_printf_float+0xb6>
 80055de:	2301      	movs	r3, #1
 80055e0:	465a      	mov	r2, fp
 80055e2:	4631      	mov	r1, r6
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b8      	blx	r7
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f ae56 	beq.w	800529a <_printf_float+0xb6>
 80055ee:	f108 0801 	add.w	r8, r8, #1
 80055f2:	45d0      	cmp	r8, sl
 80055f4:	dbf3      	blt.n	80055de <_printf_float+0x3fa>
 80055f6:	464b      	mov	r3, r9
 80055f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80055fc:	e6df      	b.n	80053be <_printf_float+0x1da>
 80055fe:	f04f 0800 	mov.w	r8, #0
 8005602:	f104 0b1a 	add.w	fp, r4, #26
 8005606:	e7f4      	b.n	80055f2 <_printf_float+0x40e>
 8005608:	2301      	movs	r3, #1
 800560a:	4642      	mov	r2, r8
 800560c:	e7e1      	b.n	80055d2 <_printf_float+0x3ee>
 800560e:	2301      	movs	r3, #1
 8005610:	464a      	mov	r2, r9
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	f43f ae3e 	beq.w	800529a <_printf_float+0xb6>
 800561e:	f108 0801 	add.w	r8, r8, #1
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005626:	1a5b      	subs	r3, r3, r1
 8005628:	4543      	cmp	r3, r8
 800562a:	dcf0      	bgt.n	800560e <_printf_float+0x42a>
 800562c:	e6fc      	b.n	8005428 <_printf_float+0x244>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	f104 0919 	add.w	r9, r4, #25
 8005636:	e7f4      	b.n	8005622 <_printf_float+0x43e>

08005638 <_printf_common>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	4616      	mov	r6, r2
 800563e:	4698      	mov	r8, r3
 8005640:	688a      	ldr	r2, [r1, #8]
 8005642:	690b      	ldr	r3, [r1, #16]
 8005644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005648:	4293      	cmp	r3, r2
 800564a:	bfb8      	it	lt
 800564c:	4613      	movlt	r3, r2
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005654:	4607      	mov	r7, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b10a      	cbz	r2, 800565e <_printf_common+0x26>
 800565a:	3301      	adds	r3, #1
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	0699      	lsls	r1, r3, #26
 8005662:	bf42      	ittt	mi
 8005664:	6833      	ldrmi	r3, [r6, #0]
 8005666:	3302      	addmi	r3, #2
 8005668:	6033      	strmi	r3, [r6, #0]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	f015 0506 	ands.w	r5, r5, #6
 8005670:	d106      	bne.n	8005680 <_printf_common+0x48>
 8005672:	f104 0a19 	add.w	sl, r4, #25
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	6832      	ldr	r2, [r6, #0]
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	42ab      	cmp	r3, r5
 800567e:	dc26      	bgt.n	80056ce <_printf_common+0x96>
 8005680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	3b00      	subs	r3, #0
 8005688:	bf18      	it	ne
 800568a:	2301      	movne	r3, #1
 800568c:	0692      	lsls	r2, r2, #26
 800568e:	d42b      	bmi.n	80056e8 <_printf_common+0xb0>
 8005690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005694:	4641      	mov	r1, r8
 8005696:	4638      	mov	r0, r7
 8005698:	47c8      	blx	r9
 800569a:	3001      	adds	r0, #1
 800569c:	d01e      	beq.n	80056dc <_printf_common+0xa4>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	f003 0306 	and.w	r3, r3, #6
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	bf02      	ittt	eq
 80056aa:	68e5      	ldreq	r5, [r4, #12]
 80056ac:	6833      	ldreq	r3, [r6, #0]
 80056ae:	1aed      	subeq	r5, r5, r3
 80056b0:	68a3      	ldr	r3, [r4, #8]
 80056b2:	bf0c      	ite	eq
 80056b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b8:	2500      	movne	r5, #0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bfc4      	itt	gt
 80056be:	1a9b      	subgt	r3, r3, r2
 80056c0:	18ed      	addgt	r5, r5, r3
 80056c2:	2600      	movs	r6, #0
 80056c4:	341a      	adds	r4, #26
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d11a      	bne.n	8005700 <_printf_common+0xc8>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e008      	b.n	80056e0 <_printf_common+0xa8>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4641      	mov	r1, r8
 80056d4:	4638      	mov	r0, r7
 80056d6:	47c8      	blx	r9
 80056d8:	3001      	adds	r0, #1
 80056da:	d103      	bne.n	80056e4 <_printf_common+0xac>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7c6      	b.n	8005676 <_printf_common+0x3e>
 80056e8:	18e1      	adds	r1, r4, r3
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	2030      	movs	r0, #48	@ 0x30
 80056ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056f2:	4422      	add	r2, r4
 80056f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056fc:	3302      	adds	r3, #2
 80056fe:	e7c7      	b.n	8005690 <_printf_common+0x58>
 8005700:	2301      	movs	r3, #1
 8005702:	4622      	mov	r2, r4
 8005704:	4641      	mov	r1, r8
 8005706:	4638      	mov	r0, r7
 8005708:	47c8      	blx	r9
 800570a:	3001      	adds	r0, #1
 800570c:	d0e6      	beq.n	80056dc <_printf_common+0xa4>
 800570e:	3601      	adds	r6, #1
 8005710:	e7d9      	b.n	80056c6 <_printf_common+0x8e>
	...

08005714 <_printf_i>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	7e0f      	ldrb	r7, [r1, #24]
 800571a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800571c:	2f78      	cmp	r7, #120	@ 0x78
 800571e:	4691      	mov	r9, r2
 8005720:	4680      	mov	r8, r0
 8005722:	460c      	mov	r4, r1
 8005724:	469a      	mov	sl, r3
 8005726:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800572a:	d807      	bhi.n	800573c <_printf_i+0x28>
 800572c:	2f62      	cmp	r7, #98	@ 0x62
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x32>
 8005730:	2f00      	cmp	r7, #0
 8005732:	f000 80d2 	beq.w	80058da <_printf_i+0x1c6>
 8005736:	2f58      	cmp	r7, #88	@ 0x58
 8005738:	f000 80b9 	beq.w	80058ae <_printf_i+0x19a>
 800573c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005740:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005744:	e03a      	b.n	80057bc <_printf_i+0xa8>
 8005746:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800574a:	2b15      	cmp	r3, #21
 800574c:	d8f6      	bhi.n	800573c <_printf_i+0x28>
 800574e:	a101      	add	r1, pc, #4	@ (adr r1, 8005754 <_printf_i+0x40>)
 8005750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057c1 	.word	0x080057c1
 800575c:	0800573d 	.word	0x0800573d
 8005760:	0800573d 	.word	0x0800573d
 8005764:	0800573d 	.word	0x0800573d
 8005768:	0800573d 	.word	0x0800573d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800573d 	.word	0x0800573d
 8005774:	0800573d 	.word	0x0800573d
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	080058c1 	.word	0x080058c1
 8005784:	080057eb 	.word	0x080057eb
 8005788:	0800587b 	.word	0x0800587b
 800578c:	0800573d 	.word	0x0800573d
 8005790:	0800573d 	.word	0x0800573d
 8005794:	080058e3 	.word	0x080058e3
 8005798:	0800573d 	.word	0x0800573d
 800579c:	080057eb 	.word	0x080057eb
 80057a0:	0800573d 	.word	0x0800573d
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	08005883 	.word	0x08005883
 80057ac:	6833      	ldr	r3, [r6, #0]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6032      	str	r2, [r6, #0]
 80057b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057bc:	2301      	movs	r3, #1
 80057be:	e09d      	b.n	80058fc <_printf_i+0x1e8>
 80057c0:	6833      	ldr	r3, [r6, #0]
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	1d19      	adds	r1, r3, #4
 80057c6:	6031      	str	r1, [r6, #0]
 80057c8:	0606      	lsls	r6, r0, #24
 80057ca:	d501      	bpl.n	80057d0 <_printf_i+0xbc>
 80057cc:	681d      	ldr	r5, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <_printf_i+0xc4>
 80057d0:	0645      	lsls	r5, r0, #25
 80057d2:	d5fb      	bpl.n	80057cc <_printf_i+0xb8>
 80057d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057d8:	2d00      	cmp	r5, #0
 80057da:	da03      	bge.n	80057e4 <_printf_i+0xd0>
 80057dc:	232d      	movs	r3, #45	@ 0x2d
 80057de:	426d      	negs	r5, r5
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e4:	4859      	ldr	r0, [pc, #356]	@ (800594c <_printf_i+0x238>)
 80057e6:	230a      	movs	r3, #10
 80057e8:	e011      	b.n	800580e <_printf_i+0xfa>
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	0608      	lsls	r0, r1, #24
 80057f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80057f4:	d402      	bmi.n	80057fc <_printf_i+0xe8>
 80057f6:	0649      	lsls	r1, r1, #25
 80057f8:	bf48      	it	mi
 80057fa:	b2ad      	uxthmi	r5, r5
 80057fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80057fe:	4853      	ldr	r0, [pc, #332]	@ (800594c <_printf_i+0x238>)
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	bf14      	ite	ne
 8005804:	230a      	movne	r3, #10
 8005806:	2308      	moveq	r3, #8
 8005808:	2100      	movs	r1, #0
 800580a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800580e:	6866      	ldr	r6, [r4, #4]
 8005810:	60a6      	str	r6, [r4, #8]
 8005812:	2e00      	cmp	r6, #0
 8005814:	bfa2      	ittt	ge
 8005816:	6821      	ldrge	r1, [r4, #0]
 8005818:	f021 0104 	bicge.w	r1, r1, #4
 800581c:	6021      	strge	r1, [r4, #0]
 800581e:	b90d      	cbnz	r5, 8005824 <_printf_i+0x110>
 8005820:	2e00      	cmp	r6, #0
 8005822:	d04b      	beq.n	80058bc <_printf_i+0x1a8>
 8005824:	4616      	mov	r6, r2
 8005826:	fbb5 f1f3 	udiv	r1, r5, r3
 800582a:	fb03 5711 	mls	r7, r3, r1, r5
 800582e:	5dc7      	ldrb	r7, [r0, r7]
 8005830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005834:	462f      	mov	r7, r5
 8005836:	42bb      	cmp	r3, r7
 8005838:	460d      	mov	r5, r1
 800583a:	d9f4      	bls.n	8005826 <_printf_i+0x112>
 800583c:	2b08      	cmp	r3, #8
 800583e:	d10b      	bne.n	8005858 <_printf_i+0x144>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	07df      	lsls	r7, r3, #31
 8005844:	d508      	bpl.n	8005858 <_printf_i+0x144>
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	6861      	ldr	r1, [r4, #4]
 800584a:	4299      	cmp	r1, r3
 800584c:	bfde      	ittt	le
 800584e:	2330      	movle	r3, #48	@ 0x30
 8005850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005858:	1b92      	subs	r2, r2, r6
 800585a:	6122      	str	r2, [r4, #16]
 800585c:	f8cd a000 	str.w	sl, [sp]
 8005860:	464b      	mov	r3, r9
 8005862:	aa03      	add	r2, sp, #12
 8005864:	4621      	mov	r1, r4
 8005866:	4640      	mov	r0, r8
 8005868:	f7ff fee6 	bl	8005638 <_printf_common>
 800586c:	3001      	adds	r0, #1
 800586e:	d14a      	bne.n	8005906 <_printf_i+0x1f2>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	b004      	add	sp, #16
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	f043 0320 	orr.w	r3, r3, #32
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	4833      	ldr	r0, [pc, #204]	@ (8005950 <_printf_i+0x23c>)
 8005884:	2778      	movs	r7, #120	@ 0x78
 8005886:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	6831      	ldr	r1, [r6, #0]
 800588e:	061f      	lsls	r7, r3, #24
 8005890:	f851 5b04 	ldr.w	r5, [r1], #4
 8005894:	d402      	bmi.n	800589c <_printf_i+0x188>
 8005896:	065f      	lsls	r7, r3, #25
 8005898:	bf48      	it	mi
 800589a:	b2ad      	uxthmi	r5, r5
 800589c:	6031      	str	r1, [r6, #0]
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	bf44      	itt	mi
 80058a2:	f043 0320 	orrmi.w	r3, r3, #32
 80058a6:	6023      	strmi	r3, [r4, #0]
 80058a8:	b11d      	cbz	r5, 80058b2 <_printf_i+0x19e>
 80058aa:	2310      	movs	r3, #16
 80058ac:	e7ac      	b.n	8005808 <_printf_i+0xf4>
 80058ae:	4827      	ldr	r0, [pc, #156]	@ (800594c <_printf_i+0x238>)
 80058b0:	e7e9      	b.n	8005886 <_printf_i+0x172>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f023 0320 	bic.w	r3, r3, #32
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	e7f6      	b.n	80058aa <_printf_i+0x196>
 80058bc:	4616      	mov	r6, r2
 80058be:	e7bd      	b.n	800583c <_printf_i+0x128>
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	6961      	ldr	r1, [r4, #20]
 80058c6:	1d18      	adds	r0, r3, #4
 80058c8:	6030      	str	r0, [r6, #0]
 80058ca:	062e      	lsls	r6, r5, #24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	d501      	bpl.n	80058d4 <_printf_i+0x1c0>
 80058d0:	6019      	str	r1, [r3, #0]
 80058d2:	e002      	b.n	80058da <_printf_i+0x1c6>
 80058d4:	0668      	lsls	r0, r5, #25
 80058d6:	d5fb      	bpl.n	80058d0 <_printf_i+0x1bc>
 80058d8:	8019      	strh	r1, [r3, #0]
 80058da:	2300      	movs	r3, #0
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	4616      	mov	r6, r2
 80058e0:	e7bc      	b.n	800585c <_printf_i+0x148>
 80058e2:	6833      	ldr	r3, [r6, #0]
 80058e4:	1d1a      	adds	r2, r3, #4
 80058e6:	6032      	str	r2, [r6, #0]
 80058e8:	681e      	ldr	r6, [r3, #0]
 80058ea:	6862      	ldr	r2, [r4, #4]
 80058ec:	2100      	movs	r1, #0
 80058ee:	4630      	mov	r0, r6
 80058f0:	f7fa fc8e 	bl	8000210 <memchr>
 80058f4:	b108      	cbz	r0, 80058fa <_printf_i+0x1e6>
 80058f6:	1b80      	subs	r0, r0, r6
 80058f8:	6060      	str	r0, [r4, #4]
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	2300      	movs	r3, #0
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005904:	e7aa      	b.n	800585c <_printf_i+0x148>
 8005906:	6923      	ldr	r3, [r4, #16]
 8005908:	4632      	mov	r2, r6
 800590a:	4649      	mov	r1, r9
 800590c:	4640      	mov	r0, r8
 800590e:	47d0      	blx	sl
 8005910:	3001      	adds	r0, #1
 8005912:	d0ad      	beq.n	8005870 <_printf_i+0x15c>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	079b      	lsls	r3, r3, #30
 8005918:	d413      	bmi.n	8005942 <_printf_i+0x22e>
 800591a:	68e0      	ldr	r0, [r4, #12]
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	4298      	cmp	r0, r3
 8005920:	bfb8      	it	lt
 8005922:	4618      	movlt	r0, r3
 8005924:	e7a6      	b.n	8005874 <_printf_i+0x160>
 8005926:	2301      	movs	r3, #1
 8005928:	4632      	mov	r2, r6
 800592a:	4649      	mov	r1, r9
 800592c:	4640      	mov	r0, r8
 800592e:	47d0      	blx	sl
 8005930:	3001      	adds	r0, #1
 8005932:	d09d      	beq.n	8005870 <_printf_i+0x15c>
 8005934:	3501      	adds	r5, #1
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	9903      	ldr	r1, [sp, #12]
 800593a:	1a5b      	subs	r3, r3, r1
 800593c:	42ab      	cmp	r3, r5
 800593e:	dcf2      	bgt.n	8005926 <_printf_i+0x212>
 8005940:	e7eb      	b.n	800591a <_printf_i+0x206>
 8005942:	2500      	movs	r5, #0
 8005944:	f104 0619 	add.w	r6, r4, #25
 8005948:	e7f5      	b.n	8005936 <_printf_i+0x222>
 800594a:	bf00      	nop
 800594c:	08009866 	.word	0x08009866
 8005950:	08009877 	.word	0x08009877

08005954 <_scanf_float>:
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	b087      	sub	sp, #28
 800595a:	4617      	mov	r7, r2
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	688b      	ldr	r3, [r1, #8]
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005966:	bf81      	itttt	hi
 8005968:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800596c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005970:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005974:	608b      	strhi	r3, [r1, #8]
 8005976:	680b      	ldr	r3, [r1, #0]
 8005978:	460a      	mov	r2, r1
 800597a:	f04f 0500 	mov.w	r5, #0
 800597e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005982:	f842 3b1c 	str.w	r3, [r2], #28
 8005986:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800598a:	4680      	mov	r8, r0
 800598c:	460c      	mov	r4, r1
 800598e:	bf98      	it	ls
 8005990:	f04f 0b00 	movls.w	fp, #0
 8005994:	9201      	str	r2, [sp, #4]
 8005996:	4616      	mov	r6, r2
 8005998:	46aa      	mov	sl, r5
 800599a:	46a9      	mov	r9, r5
 800599c:	9502      	str	r5, [sp, #8]
 800599e:	68a2      	ldr	r2, [r4, #8]
 80059a0:	b152      	cbz	r2, 80059b8 <_scanf_float+0x64>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80059a8:	d864      	bhi.n	8005a74 <_scanf_float+0x120>
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d83c      	bhi.n	8005a28 <_scanf_float+0xd4>
 80059ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80059b2:	b2c8      	uxtb	r0, r1
 80059b4:	280e      	cmp	r0, #14
 80059b6:	d93a      	bls.n	8005a2e <_scanf_float+0xda>
 80059b8:	f1b9 0f00 	cmp.w	r9, #0
 80059bc:	d003      	beq.n	80059c6 <_scanf_float+0x72>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ca:	f1ba 0f01 	cmp.w	sl, #1
 80059ce:	f200 8117 	bhi.w	8005c00 <_scanf_float+0x2ac>
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	429e      	cmp	r6, r3
 80059d6:	f200 8108 	bhi.w	8005bea <_scanf_float+0x296>
 80059da:	2001      	movs	r0, #1
 80059dc:	b007      	add	sp, #28
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80059e6:	2a0d      	cmp	r2, #13
 80059e8:	d8e6      	bhi.n	80059b8 <_scanf_float+0x64>
 80059ea:	a101      	add	r1, pc, #4	@ (adr r1, 80059f0 <_scanf_float+0x9c>)
 80059ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059f0:	08005b37 	.word	0x08005b37
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	080059b9 	.word	0x080059b9
 8005a00:	08005b97 	.word	0x08005b97
 8005a04:	08005b6f 	.word	0x08005b6f
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b45 	.word	0x08005b45
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	080059b9 	.word	0x080059b9
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005afd 	.word	0x08005afd
 8005a28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005a2c:	e7db      	b.n	80059e6 <_scanf_float+0x92>
 8005a2e:	290e      	cmp	r1, #14
 8005a30:	d8c2      	bhi.n	80059b8 <_scanf_float+0x64>
 8005a32:	a001      	add	r0, pc, #4	@ (adr r0, 8005a38 <_scanf_float+0xe4>)
 8005a34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a38:	08005aed 	.word	0x08005aed
 8005a3c:	080059b9 	.word	0x080059b9
 8005a40:	08005aed 	.word	0x08005aed
 8005a44:	08005b83 	.word	0x08005b83
 8005a48:	080059b9 	.word	0x080059b9
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005ad3 	.word	0x08005ad3
 8005a58:	08005ad3 	.word	0x08005ad3
 8005a5c:	08005ad3 	.word	0x08005ad3
 8005a60:	08005ad3 	.word	0x08005ad3
 8005a64:	08005ad3 	.word	0x08005ad3
 8005a68:	08005ad3 	.word	0x08005ad3
 8005a6c:	08005ad3 	.word	0x08005ad3
 8005a70:	08005ad3 	.word	0x08005ad3
 8005a74:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a76:	d809      	bhi.n	8005a8c <_scanf_float+0x138>
 8005a78:	2b60      	cmp	r3, #96	@ 0x60
 8005a7a:	d8b2      	bhi.n	80059e2 <_scanf_float+0x8e>
 8005a7c:	2b54      	cmp	r3, #84	@ 0x54
 8005a7e:	d07b      	beq.n	8005b78 <_scanf_float+0x224>
 8005a80:	2b59      	cmp	r3, #89	@ 0x59
 8005a82:	d199      	bne.n	80059b8 <_scanf_float+0x64>
 8005a84:	2d07      	cmp	r5, #7
 8005a86:	d197      	bne.n	80059b8 <_scanf_float+0x64>
 8005a88:	2508      	movs	r5, #8
 8005a8a:	e02c      	b.n	8005ae6 <_scanf_float+0x192>
 8005a8c:	2b74      	cmp	r3, #116	@ 0x74
 8005a8e:	d073      	beq.n	8005b78 <_scanf_float+0x224>
 8005a90:	2b79      	cmp	r3, #121	@ 0x79
 8005a92:	e7f6      	b.n	8005a82 <_scanf_float+0x12e>
 8005a94:	6821      	ldr	r1, [r4, #0]
 8005a96:	05c8      	lsls	r0, r1, #23
 8005a98:	d51b      	bpl.n	8005ad2 <_scanf_float+0x17e>
 8005a9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a9e:	6021      	str	r1, [r4, #0]
 8005aa0:	f109 0901 	add.w	r9, r9, #1
 8005aa4:	f1bb 0f00 	cmp.w	fp, #0
 8005aa8:	d003      	beq.n	8005ab2 <_scanf_float+0x15e>
 8005aaa:	3201      	adds	r2, #1
 8005aac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ab0:	60a2      	str	r2, [r4, #8]
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	60a3      	str	r3, [r4, #8]
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	3301      	adds	r3, #1
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	f340 8087 	ble.w	8005bd8 <_scanf_float+0x284>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	e765      	b.n	800599e <_scanf_float+0x4a>
 8005ad2:	eb1a 0105 	adds.w	r1, sl, r5
 8005ad6:	f47f af6f 	bne.w	80059b8 <_scanf_float+0x64>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005ae0:	6022      	str	r2, [r4, #0]
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	468a      	mov	sl, r1
 8005ae6:	f806 3b01 	strb.w	r3, [r6], #1
 8005aea:	e7e2      	b.n	8005ab2 <_scanf_float+0x15e>
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	0610      	lsls	r0, r2, #24
 8005af0:	f57f af62 	bpl.w	80059b8 <_scanf_float+0x64>
 8005af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	e7f4      	b.n	8005ae6 <_scanf_float+0x192>
 8005afc:	f1ba 0f00 	cmp.w	sl, #0
 8005b00:	d10e      	bne.n	8005b20 <_scanf_float+0x1cc>
 8005b02:	f1b9 0f00 	cmp.w	r9, #0
 8005b06:	d10e      	bne.n	8005b26 <_scanf_float+0x1d2>
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b12:	d108      	bne.n	8005b26 <_scanf_float+0x1d2>
 8005b14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	f04f 0a01 	mov.w	sl, #1
 8005b1e:	e7e2      	b.n	8005ae6 <_scanf_float+0x192>
 8005b20:	f1ba 0f02 	cmp.w	sl, #2
 8005b24:	d055      	beq.n	8005bd2 <_scanf_float+0x27e>
 8005b26:	2d01      	cmp	r5, #1
 8005b28:	d002      	beq.n	8005b30 <_scanf_float+0x1dc>
 8005b2a:	2d04      	cmp	r5, #4
 8005b2c:	f47f af44 	bne.w	80059b8 <_scanf_float+0x64>
 8005b30:	3501      	adds	r5, #1
 8005b32:	b2ed      	uxtb	r5, r5
 8005b34:	e7d7      	b.n	8005ae6 <_scanf_float+0x192>
 8005b36:	f1ba 0f01 	cmp.w	sl, #1
 8005b3a:	f47f af3d 	bne.w	80059b8 <_scanf_float+0x64>
 8005b3e:	f04f 0a02 	mov.w	sl, #2
 8005b42:	e7d0      	b.n	8005ae6 <_scanf_float+0x192>
 8005b44:	b97d      	cbnz	r5, 8005b66 <_scanf_float+0x212>
 8005b46:	f1b9 0f00 	cmp.w	r9, #0
 8005b4a:	f47f af38 	bne.w	80059be <_scanf_float+0x6a>
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b58:	f040 8108 	bne.w	8005d6c <_scanf_float+0x418>
 8005b5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b60:	6022      	str	r2, [r4, #0]
 8005b62:	2501      	movs	r5, #1
 8005b64:	e7bf      	b.n	8005ae6 <_scanf_float+0x192>
 8005b66:	2d03      	cmp	r5, #3
 8005b68:	d0e2      	beq.n	8005b30 <_scanf_float+0x1dc>
 8005b6a:	2d05      	cmp	r5, #5
 8005b6c:	e7de      	b.n	8005b2c <_scanf_float+0x1d8>
 8005b6e:	2d02      	cmp	r5, #2
 8005b70:	f47f af22 	bne.w	80059b8 <_scanf_float+0x64>
 8005b74:	2503      	movs	r5, #3
 8005b76:	e7b6      	b.n	8005ae6 <_scanf_float+0x192>
 8005b78:	2d06      	cmp	r5, #6
 8005b7a:	f47f af1d 	bne.w	80059b8 <_scanf_float+0x64>
 8005b7e:	2507      	movs	r5, #7
 8005b80:	e7b1      	b.n	8005ae6 <_scanf_float+0x192>
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	0591      	lsls	r1, r2, #22
 8005b86:	f57f af17 	bpl.w	80059b8 <_scanf_float+0x64>
 8005b8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b94:	e7a7      	b.n	8005ae6 <_scanf_float+0x192>
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ba0:	d006      	beq.n	8005bb0 <_scanf_float+0x25c>
 8005ba2:	0550      	lsls	r0, r2, #21
 8005ba4:	f57f af08 	bpl.w	80059b8 <_scanf_float+0x64>
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	f000 80de 	beq.w	8005d6c <_scanf_float+0x418>
 8005bb0:	0591      	lsls	r1, r2, #22
 8005bb2:	bf58      	it	pl
 8005bb4:	9902      	ldrpl	r1, [sp, #8]
 8005bb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bba:	bf58      	it	pl
 8005bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8005bc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005bc4:	bf58      	it	pl
 8005bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bca:	6022      	str	r2, [r4, #0]
 8005bcc:	f04f 0900 	mov.w	r9, #0
 8005bd0:	e789      	b.n	8005ae6 <_scanf_float+0x192>
 8005bd2:	f04f 0a03 	mov.w	sl, #3
 8005bd6:	e786      	b.n	8005ae6 <_scanf_float+0x192>
 8005bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4640      	mov	r0, r8
 8005be0:	4798      	blx	r3
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f43f aedb 	beq.w	800599e <_scanf_float+0x4a>
 8005be8:	e6e6      	b.n	80059b8 <_scanf_float+0x64>
 8005bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4798      	blx	r3
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	e6e8      	b.n	80059d2 <_scanf_float+0x7e>
 8005c00:	1e6b      	subs	r3, r5, #1
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d824      	bhi.n	8005c50 <_scanf_float+0x2fc>
 8005c06:	2d02      	cmp	r5, #2
 8005c08:	d836      	bhi.n	8005c78 <_scanf_float+0x324>
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	429e      	cmp	r6, r3
 8005c0e:	f67f aee4 	bls.w	80059da <_scanf_float+0x86>
 8005c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4798      	blx	r3
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	e7f0      	b.n	8005c0a <_scanf_float+0x2b6>
 8005c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005c30:	463a      	mov	r2, r7
 8005c32:	4640      	mov	r0, r8
 8005c34:	4798      	blx	r3
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c40:	fa5f fa8a 	uxtb.w	sl, sl
 8005c44:	f1ba 0f02 	cmp.w	sl, #2
 8005c48:	d1ee      	bne.n	8005c28 <_scanf_float+0x2d4>
 8005c4a:	3d03      	subs	r5, #3
 8005c4c:	b2ed      	uxtb	r5, r5
 8005c4e:	1b76      	subs	r6, r6, r5
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	05da      	lsls	r2, r3, #23
 8005c54:	d530      	bpl.n	8005cb8 <_scanf_float+0x364>
 8005c56:	055b      	lsls	r3, r3, #21
 8005c58:	d511      	bpl.n	8005c7e <_scanf_float+0x32a>
 8005c5a:	9b01      	ldr	r3, [sp, #4]
 8005c5c:	429e      	cmp	r6, r3
 8005c5e:	f67f aebc 	bls.w	80059da <_scanf_float+0x86>
 8005c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	4798      	blx	r3
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	e7f0      	b.n	8005c5a <_scanf_float+0x306>
 8005c78:	46aa      	mov	sl, r5
 8005c7a:	46b3      	mov	fp, r6
 8005c7c:	e7de      	b.n	8005c3c <_scanf_float+0x2e8>
 8005c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	2965      	cmp	r1, #101	@ 0x65
 8005c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	d00c      	beq.n	8005cac <_scanf_float+0x358>
 8005c92:	2945      	cmp	r1, #69	@ 0x45
 8005c94:	d00a      	beq.n	8005cac <_scanf_float+0x358>
 8005c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4798      	blx	r3
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	1eb5      	subs	r5, r6, #2
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4798      	blx	r3
 8005cb6:	462e      	mov	r6, r5
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	f012 0210 	ands.w	r2, r2, #16
 8005cbe:	d001      	beq.n	8005cc4 <_scanf_float+0x370>
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e68b      	b.n	80059dc <_scanf_float+0x88>
 8005cc4:	7032      	strb	r2, [r6, #0]
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd0:	d11c      	bne.n	8005d0c <_scanf_float+0x3b8>
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	454b      	cmp	r3, r9
 8005cd6:	eba3 0209 	sub.w	r2, r3, r9
 8005cda:	d123      	bne.n	8005d24 <_scanf_float+0x3d0>
 8005cdc:	9901      	ldr	r1, [sp, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	f002 fbf9 	bl	80084d8 <_strtod_r>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	6821      	ldr	r1, [r4, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f011 0f02 	tst.w	r1, #2
 8005cf0:	ec57 6b10 	vmov	r6, r7, d0
 8005cf4:	f103 0204 	add.w	r2, r3, #4
 8005cf8:	d01f      	beq.n	8005d3a <_scanf_float+0x3e6>
 8005cfa:	9903      	ldr	r1, [sp, #12]
 8005cfc:	600a      	str	r2, [r1, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	e9c3 6700 	strd	r6, r7, [r3]
 8005d04:	68e3      	ldr	r3, [r4, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60e3      	str	r3, [r4, #12]
 8005d0a:	e7d9      	b.n	8005cc0 <_scanf_float+0x36c>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0e4      	beq.n	8005cdc <_scanf_float+0x388>
 8005d12:	9905      	ldr	r1, [sp, #20]
 8005d14:	230a      	movs	r3, #10
 8005d16:	3101      	adds	r1, #1
 8005d18:	4640      	mov	r0, r8
 8005d1a:	f002 fc5d 	bl	80085d8 <_strtol_r>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	9e05      	ldr	r6, [sp, #20]
 8005d22:	1ac2      	subs	r2, r0, r3
 8005d24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005d28:	429e      	cmp	r6, r3
 8005d2a:	bf28      	it	cs
 8005d2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005d30:	4910      	ldr	r1, [pc, #64]	@ (8005d74 <_scanf_float+0x420>)
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 f8e4 	bl	8005f00 <siprintf>
 8005d38:	e7d0      	b.n	8005cdc <_scanf_float+0x388>
 8005d3a:	f011 0f04 	tst.w	r1, #4
 8005d3e:	9903      	ldr	r1, [sp, #12]
 8005d40:	600a      	str	r2, [r1, #0]
 8005d42:	d1dc      	bne.n	8005cfe <_scanf_float+0x3aa>
 8005d44:	681d      	ldr	r5, [r3, #0]
 8005d46:	4632      	mov	r2, r6
 8005d48:	463b      	mov	r3, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	f7fa ff0d 	bl	8000b6c <__aeabi_dcmpun>
 8005d52:	b128      	cbz	r0, 8005d60 <_scanf_float+0x40c>
 8005d54:	4808      	ldr	r0, [pc, #32]	@ (8005d78 <_scanf_float+0x424>)
 8005d56:	f000 f9b7 	bl	80060c8 <nanf>
 8005d5a:	ed85 0a00 	vstr	s0, [r5]
 8005d5e:	e7d1      	b.n	8005d04 <_scanf_float+0x3b0>
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa ff60 	bl	8000c28 <__aeabi_d2f>
 8005d68:	6028      	str	r0, [r5, #0]
 8005d6a:	e7cb      	b.n	8005d04 <_scanf_float+0x3b0>
 8005d6c:	f04f 0900 	mov.w	r9, #0
 8005d70:	e629      	b.n	80059c6 <_scanf_float+0x72>
 8005d72:	bf00      	nop
 8005d74:	08009888 	.word	0x08009888
 8005d78:	08009c1d 	.word	0x08009c1d

08005d7c <std>:
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	e9c0 3300 	strd	r3, r3, [r0]
 8005d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d8a:	6083      	str	r3, [r0, #8]
 8005d8c:	8181      	strh	r1, [r0, #12]
 8005d8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d90:	81c2      	strh	r2, [r0, #14]
 8005d92:	6183      	str	r3, [r0, #24]
 8005d94:	4619      	mov	r1, r3
 8005d96:	2208      	movs	r2, #8
 8005d98:	305c      	adds	r0, #92	@ 0x5c
 8005d9a:	f000 f914 	bl	8005fc6 <memset>
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd4 <std+0x58>)
 8005da0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <std+0x5c>)
 8005da4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <std+0x60>)
 8005da8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005daa:	4b0d      	ldr	r3, [pc, #52]	@ (8005de0 <std+0x64>)
 8005dac:	6323      	str	r3, [r4, #48]	@ 0x30
 8005dae:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <std+0x68>)
 8005db0:	6224      	str	r4, [r4, #32]
 8005db2:	429c      	cmp	r4, r3
 8005db4:	d006      	beq.n	8005dc4 <std+0x48>
 8005db6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dba:	4294      	cmp	r4, r2
 8005dbc:	d002      	beq.n	8005dc4 <std+0x48>
 8005dbe:	33d0      	adds	r3, #208	@ 0xd0
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d105      	bne.n	8005dd0 <std+0x54>
 8005dc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dcc:	f000 b978 	b.w	80060c0 <__retarget_lock_init_recursive>
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08005f41 	.word	0x08005f41
 8005dd8:	08005f63 	.word	0x08005f63
 8005ddc:	08005f9b 	.word	0x08005f9b
 8005de0:	08005fbf 	.word	0x08005fbf
 8005de4:	2000034c 	.word	0x2000034c

08005de8 <stdio_exit_handler>:
 8005de8:	4a02      	ldr	r2, [pc, #8]	@ (8005df4 <stdio_exit_handler+0xc>)
 8005dea:	4903      	ldr	r1, [pc, #12]	@ (8005df8 <stdio_exit_handler+0x10>)
 8005dec:	4803      	ldr	r0, [pc, #12]	@ (8005dfc <stdio_exit_handler+0x14>)
 8005dee:	f000 b869 	b.w	8005ec4 <_fwalk_sglue>
 8005df2:	bf00      	nop
 8005df4:	20000018 	.word	0x20000018
 8005df8:	08008995 	.word	0x08008995
 8005dfc:	20000028 	.word	0x20000028

08005e00 <cleanup_stdio>:
 8005e00:	6841      	ldr	r1, [r0, #4]
 8005e02:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <cleanup_stdio+0x34>)
 8005e04:	4299      	cmp	r1, r3
 8005e06:	b510      	push	{r4, lr}
 8005e08:	4604      	mov	r4, r0
 8005e0a:	d001      	beq.n	8005e10 <cleanup_stdio+0x10>
 8005e0c:	f002 fdc2 	bl	8008994 <_fflush_r>
 8005e10:	68a1      	ldr	r1, [r4, #8]
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <cleanup_stdio+0x38>)
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <cleanup_stdio+0x1e>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f002 fdbb 	bl	8008994 <_fflush_r>
 8005e1e:	68e1      	ldr	r1, [r4, #12]
 8005e20:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <cleanup_stdio+0x3c>)
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d004      	beq.n	8005e30 <cleanup_stdio+0x30>
 8005e26:	4620      	mov	r0, r4
 8005e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2c:	f002 bdb2 	b.w	8008994 <_fflush_r>
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	bf00      	nop
 8005e34:	2000034c 	.word	0x2000034c
 8005e38:	200003b4 	.word	0x200003b4
 8005e3c:	2000041c 	.word	0x2000041c

08005e40 <global_stdio_init.part.0>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <global_stdio_init.part.0+0x30>)
 8005e44:	4c0b      	ldr	r4, [pc, #44]	@ (8005e74 <global_stdio_init.part.0+0x34>)
 8005e46:	4a0c      	ldr	r2, [pc, #48]	@ (8005e78 <global_stdio_init.part.0+0x38>)
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2104      	movs	r1, #4
 8005e50:	f7ff ff94 	bl	8005d7c <std>
 8005e54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2109      	movs	r1, #9
 8005e5c:	f7ff ff8e 	bl	8005d7c <std>
 8005e60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e64:	2202      	movs	r2, #2
 8005e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6a:	2112      	movs	r1, #18
 8005e6c:	f7ff bf86 	b.w	8005d7c <std>
 8005e70:	20000484 	.word	0x20000484
 8005e74:	2000034c 	.word	0x2000034c
 8005e78:	08005de9 	.word	0x08005de9

08005e7c <__sfp_lock_acquire>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	@ (8005e84 <__sfp_lock_acquire+0x8>)
 8005e7e:	f000 b920 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	2000048d 	.word	0x2000048d

08005e88 <__sfp_lock_release>:
 8005e88:	4801      	ldr	r0, [pc, #4]	@ (8005e90 <__sfp_lock_release+0x8>)
 8005e8a:	f000 b91b 	b.w	80060c4 <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	2000048d 	.word	0x2000048d

08005e94 <__sinit>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
 8005e98:	f7ff fff0 	bl	8005e7c <__sfp_lock_acquire>
 8005e9c:	6a23      	ldr	r3, [r4, #32]
 8005e9e:	b11b      	cbz	r3, 8005ea8 <__sinit+0x14>
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea4:	f7ff bff0 	b.w	8005e88 <__sfp_lock_release>
 8005ea8:	4b04      	ldr	r3, [pc, #16]	@ (8005ebc <__sinit+0x28>)
 8005eaa:	6223      	str	r3, [r4, #32]
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <__sinit+0x2c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f5      	bne.n	8005ea0 <__sinit+0xc>
 8005eb4:	f7ff ffc4 	bl	8005e40 <global_stdio_init.part.0>
 8005eb8:	e7f2      	b.n	8005ea0 <__sinit+0xc>
 8005eba:	bf00      	nop
 8005ebc:	08005e01 	.word	0x08005e01
 8005ec0:	20000484 	.word	0x20000484

08005ec4 <_fwalk_sglue>:
 8005ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	4607      	mov	r7, r0
 8005eca:	4688      	mov	r8, r1
 8005ecc:	4614      	mov	r4, r2
 8005ece:	2600      	movs	r6, #0
 8005ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed8:	d505      	bpl.n	8005ee6 <_fwalk_sglue+0x22>
 8005eda:	6824      	ldr	r4, [r4, #0]
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d1f7      	bne.n	8005ed0 <_fwalk_sglue+0xc>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d907      	bls.n	8005efc <_fwalk_sglue+0x38>
 8005eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	d003      	beq.n	8005efc <_fwalk_sglue+0x38>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	4306      	orrs	r6, r0
 8005efc:	3568      	adds	r5, #104	@ 0x68
 8005efe:	e7e9      	b.n	8005ed4 <_fwalk_sglue+0x10>

08005f00 <siprintf>:
 8005f00:	b40e      	push	{r1, r2, r3}
 8005f02:	b500      	push	{lr}
 8005f04:	b09c      	sub	sp, #112	@ 0x70
 8005f06:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f08:	9002      	str	r0, [sp, #8]
 8005f0a:	9006      	str	r0, [sp, #24]
 8005f0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f10:	4809      	ldr	r0, [pc, #36]	@ (8005f38 <siprintf+0x38>)
 8005f12:	9107      	str	r1, [sp, #28]
 8005f14:	9104      	str	r1, [sp, #16]
 8005f16:	4909      	ldr	r1, [pc, #36]	@ (8005f3c <siprintf+0x3c>)
 8005f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	a902      	add	r1, sp, #8
 8005f24:	f002 fbb6 	bl	8008694 <_svfiprintf_r>
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	b01c      	add	sp, #112	@ 0x70
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	b003      	add	sp, #12
 8005f36:	4770      	bx	lr
 8005f38:	20000024 	.word	0x20000024
 8005f3c:	ffff0208 	.word	0xffff0208

08005f40 <__sread>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	460c      	mov	r4, r1
 8005f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f48:	f000 f86c 	bl	8006024 <_read_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	bfab      	itete	ge
 8005f50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f52:	89a3      	ldrhlt	r3, [r4, #12]
 8005f54:	181b      	addge	r3, r3, r0
 8005f56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f5a:	bfac      	ite	ge
 8005f5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f5e:	81a3      	strhlt	r3, [r4, #12]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__swrite>:
 8005f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	461f      	mov	r7, r3
 8005f68:	898b      	ldrh	r3, [r1, #12]
 8005f6a:	05db      	lsls	r3, r3, #23
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	4616      	mov	r6, r2
 8005f72:	d505      	bpl.n	8005f80 <__swrite+0x1e>
 8005f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f78:	2302      	movs	r3, #2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f000 f840 	bl	8006000 <_lseek_r>
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	463b      	mov	r3, r7
 8005f90:	4628      	mov	r0, r5
 8005f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	f000 b857 	b.w	8006048 <_write_r>

08005f9a <__sseek>:
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa2:	f000 f82d 	bl	8006000 <_lseek_r>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	bf15      	itete	ne
 8005fac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fb6:	81a3      	strheq	r3, [r4, #12]
 8005fb8:	bf18      	it	ne
 8005fba:	81a3      	strhne	r3, [r4, #12]
 8005fbc:	bd10      	pop	{r4, pc}

08005fbe <__sclose>:
 8005fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc2:	f000 b80d 	b.w	8005fe0 <_close_r>

08005fc6 <memset>:
 8005fc6:	4402      	add	r2, r0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d100      	bne.n	8005fd0 <memset+0xa>
 8005fce:	4770      	bx	lr
 8005fd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd4:	e7f9      	b.n	8005fca <memset+0x4>
	...

08005fd8 <_localeconv_r>:
 8005fd8:	4800      	ldr	r0, [pc, #0]	@ (8005fdc <_localeconv_r+0x4>)
 8005fda:	4770      	bx	lr
 8005fdc:	20000164 	.word	0x20000164

08005fe0 <_close_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	@ (8005ffc <_close_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fc f8ca 	bl	8002184 <_close>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_close_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_close_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	20000488 	.word	0x20000488

08006000 <_lseek_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	@ (8006020 <_lseek_r+0x20>)
 8006004:	4604      	mov	r4, r0
 8006006:	4608      	mov	r0, r1
 8006008:	4611      	mov	r1, r2
 800600a:	2200      	movs	r2, #0
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f7fc f8df 	bl	80021d2 <_lseek>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_lseek_r+0x1e>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_lseek_r+0x1e>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20000488 	.word	0x20000488

08006024 <_read_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d07      	ldr	r5, [pc, #28]	@ (8006044 <_read_r+0x20>)
 8006028:	4604      	mov	r4, r0
 800602a:	4608      	mov	r0, r1
 800602c:	4611      	mov	r1, r2
 800602e:	2200      	movs	r2, #0
 8006030:	602a      	str	r2, [r5, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f7fc f86d 	bl	8002112 <_read>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_read_r+0x1e>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_read_r+0x1e>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000488 	.word	0x20000488

08006048 <_write_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	@ (8006068 <_write_r+0x20>)
 800604c:	4604      	mov	r4, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	602a      	str	r2, [r5, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7fc f878 	bl	800214c <_write>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_write_r+0x1e>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_write_r+0x1e>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20000488 	.word	0x20000488

0800606c <__errno>:
 800606c:	4b01      	ldr	r3, [pc, #4]	@ (8006074 <__errno+0x8>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000024 	.word	0x20000024

08006078 <__libc_init_array>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4d0d      	ldr	r5, [pc, #52]	@ (80060b0 <__libc_init_array+0x38>)
 800607c:	4c0d      	ldr	r4, [pc, #52]	@ (80060b4 <__libc_init_array+0x3c>)
 800607e:	1b64      	subs	r4, r4, r5
 8006080:	10a4      	asrs	r4, r4, #2
 8006082:	2600      	movs	r6, #0
 8006084:	42a6      	cmp	r6, r4
 8006086:	d109      	bne.n	800609c <__libc_init_array+0x24>
 8006088:	4d0b      	ldr	r5, [pc, #44]	@ (80060b8 <__libc_init_array+0x40>)
 800608a:	4c0c      	ldr	r4, [pc, #48]	@ (80060bc <__libc_init_array+0x44>)
 800608c:	f003 fb72 	bl	8009774 <_init>
 8006090:	1b64      	subs	r4, r4, r5
 8006092:	10a4      	asrs	r4, r4, #2
 8006094:	2600      	movs	r6, #0
 8006096:	42a6      	cmp	r6, r4
 8006098:	d105      	bne.n	80060a6 <__libc_init_array+0x2e>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a0:	4798      	blx	r3
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7ee      	b.n	8006084 <__libc_init_array+0xc>
 80060a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060aa:	4798      	blx	r3
 80060ac:	3601      	adds	r6, #1
 80060ae:	e7f2      	b.n	8006096 <__libc_init_array+0x1e>
 80060b0:	08009c88 	.word	0x08009c88
 80060b4:	08009c88 	.word	0x08009c88
 80060b8:	08009c88 	.word	0x08009c88
 80060bc:	08009c8c 	.word	0x08009c8c

080060c0 <__retarget_lock_init_recursive>:
 80060c0:	4770      	bx	lr

080060c2 <__retarget_lock_acquire_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <__retarget_lock_release_recursive>:
 80060c4:	4770      	bx	lr
	...

080060c8 <nanf>:
 80060c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80060d0 <nanf+0x8>
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	7fc00000 	.word	0x7fc00000

080060d4 <quorem>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	6903      	ldr	r3, [r0, #16]
 80060da:	690c      	ldr	r4, [r1, #16]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	4607      	mov	r7, r0
 80060e0:	db7e      	blt.n	80061e0 <quorem+0x10c>
 80060e2:	3c01      	subs	r4, #1
 80060e4:	f101 0814 	add.w	r8, r1, #20
 80060e8:	00a3      	lsls	r3, r4, #2
 80060ea:	f100 0514 	add.w	r5, r0, #20
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060fe:	3301      	adds	r3, #1
 8006100:	429a      	cmp	r2, r3
 8006102:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006106:	fbb2 f6f3 	udiv	r6, r2, r3
 800610a:	d32e      	bcc.n	800616a <quorem+0x96>
 800610c:	f04f 0a00 	mov.w	sl, #0
 8006110:	46c4      	mov	ip, r8
 8006112:	46ae      	mov	lr, r5
 8006114:	46d3      	mov	fp, sl
 8006116:	f85c 3b04 	ldr.w	r3, [ip], #4
 800611a:	b298      	uxth	r0, r3
 800611c:	fb06 a000 	mla	r0, r6, r0, sl
 8006120:	0c02      	lsrs	r2, r0, #16
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	fb06 2303 	mla	r3, r6, r3, r2
 8006128:	f8de 2000 	ldr.w	r2, [lr]
 800612c:	b280      	uxth	r0, r0
 800612e:	b292      	uxth	r2, r2
 8006130:	1a12      	subs	r2, r2, r0
 8006132:	445a      	add	r2, fp
 8006134:	f8de 0000 	ldr.w	r0, [lr]
 8006138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800613c:	b29b      	uxth	r3, r3
 800613e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006142:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006146:	b292      	uxth	r2, r2
 8006148:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800614c:	45e1      	cmp	r9, ip
 800614e:	f84e 2b04 	str.w	r2, [lr], #4
 8006152:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006156:	d2de      	bcs.n	8006116 <quorem+0x42>
 8006158:	9b00      	ldr	r3, [sp, #0]
 800615a:	58eb      	ldr	r3, [r5, r3]
 800615c:	b92b      	cbnz	r3, 800616a <quorem+0x96>
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	3b04      	subs	r3, #4
 8006162:	429d      	cmp	r5, r3
 8006164:	461a      	mov	r2, r3
 8006166:	d32f      	bcc.n	80061c8 <quorem+0xf4>
 8006168:	613c      	str	r4, [r7, #16]
 800616a:	4638      	mov	r0, r7
 800616c:	f001 f9c4 	bl	80074f8 <__mcmp>
 8006170:	2800      	cmp	r0, #0
 8006172:	db25      	blt.n	80061c0 <quorem+0xec>
 8006174:	4629      	mov	r1, r5
 8006176:	2000      	movs	r0, #0
 8006178:	f858 2b04 	ldr.w	r2, [r8], #4
 800617c:	f8d1 c000 	ldr.w	ip, [r1]
 8006180:	fa1f fe82 	uxth.w	lr, r2
 8006184:	fa1f f38c 	uxth.w	r3, ip
 8006188:	eba3 030e 	sub.w	r3, r3, lr
 800618c:	4403      	add	r3, r0
 800618e:	0c12      	lsrs	r2, r2, #16
 8006190:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006194:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619e:	45c1      	cmp	r9, r8
 80061a0:	f841 3b04 	str.w	r3, [r1], #4
 80061a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061a8:	d2e6      	bcs.n	8006178 <quorem+0xa4>
 80061aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b2:	b922      	cbnz	r2, 80061be <quorem+0xea>
 80061b4:	3b04      	subs	r3, #4
 80061b6:	429d      	cmp	r5, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	d30b      	bcc.n	80061d4 <quorem+0x100>
 80061bc:	613c      	str	r4, [r7, #16]
 80061be:	3601      	adds	r6, #1
 80061c0:	4630      	mov	r0, r6
 80061c2:	b003      	add	sp, #12
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	3b04      	subs	r3, #4
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	d1cb      	bne.n	8006168 <quorem+0x94>
 80061d0:	3c01      	subs	r4, #1
 80061d2:	e7c6      	b.n	8006162 <quorem+0x8e>
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	3b04      	subs	r3, #4
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d1ef      	bne.n	80061bc <quorem+0xe8>
 80061dc:	3c01      	subs	r4, #1
 80061de:	e7ea      	b.n	80061b6 <quorem+0xe2>
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7ee      	b.n	80061c2 <quorem+0xee>
 80061e4:	0000      	movs	r0, r0
	...

080061e8 <_dtoa_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	69c7      	ldr	r7, [r0, #28]
 80061ee:	b099      	sub	sp, #100	@ 0x64
 80061f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061f4:	ec55 4b10 	vmov	r4, r5, d0
 80061f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80061fc:	4683      	mov	fp, r0
 80061fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006202:	b97f      	cbnz	r7, 8006224 <_dtoa_r+0x3c>
 8006204:	2010      	movs	r0, #16
 8006206:	f000 fdfd 	bl	8006e04 <malloc>
 800620a:	4602      	mov	r2, r0
 800620c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006210:	b920      	cbnz	r0, 800621c <_dtoa_r+0x34>
 8006212:	4ba7      	ldr	r3, [pc, #668]	@ (80064b0 <_dtoa_r+0x2c8>)
 8006214:	21ef      	movs	r1, #239	@ 0xef
 8006216:	48a7      	ldr	r0, [pc, #668]	@ (80064b4 <_dtoa_r+0x2cc>)
 8006218:	f002 fc36 	bl	8008a88 <__assert_func>
 800621c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006220:	6007      	str	r7, [r0, #0]
 8006222:	60c7      	str	r7, [r0, #12]
 8006224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006228:	6819      	ldr	r1, [r3, #0]
 800622a:	b159      	cbz	r1, 8006244 <_dtoa_r+0x5c>
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	604a      	str	r2, [r1, #4]
 8006230:	2301      	movs	r3, #1
 8006232:	4093      	lsls	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
 8006236:	4658      	mov	r0, fp
 8006238:	f000 feda 	bl	8006ff0 <_Bfree>
 800623c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	1e2b      	subs	r3, r5, #0
 8006246:	bfb9      	ittee	lt
 8006248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800624c:	9303      	strlt	r3, [sp, #12]
 800624e:	2300      	movge	r3, #0
 8006250:	6033      	strge	r3, [r6, #0]
 8006252:	9f03      	ldr	r7, [sp, #12]
 8006254:	4b98      	ldr	r3, [pc, #608]	@ (80064b8 <_dtoa_r+0x2d0>)
 8006256:	bfbc      	itt	lt
 8006258:	2201      	movlt	r2, #1
 800625a:	6032      	strlt	r2, [r6, #0]
 800625c:	43bb      	bics	r3, r7
 800625e:	d112      	bne.n	8006286 <_dtoa_r+0x9e>
 8006260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800626c:	4323      	orrs	r3, r4
 800626e:	f000 854d 	beq.w	8006d0c <_dtoa_r+0xb24>
 8006272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064cc <_dtoa_r+0x2e4>
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 854f 	beq.w	8006d1c <_dtoa_r+0xb34>
 800627e:	f10a 0303 	add.w	r3, sl, #3
 8006282:	f000 bd49 	b.w	8006d18 <_dtoa_r+0xb30>
 8006286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	ec51 0b17 	vmov	r0, r1, d7
 8006290:	2300      	movs	r3, #0
 8006292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006296:	f7fa fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800629a:	4680      	mov	r8, r0
 800629c:	b158      	cbz	r0, 80062b6 <_dtoa_r+0xce>
 800629e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062a0:	2301      	movs	r3, #1
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062a6:	b113      	cbz	r3, 80062ae <_dtoa_r+0xc6>
 80062a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062aa:	4b84      	ldr	r3, [pc, #528]	@ (80064bc <_dtoa_r+0x2d4>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064d0 <_dtoa_r+0x2e8>
 80062b2:	f000 bd33 	b.w	8006d1c <_dtoa_r+0xb34>
 80062b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062ba:	aa16      	add	r2, sp, #88	@ 0x58
 80062bc:	a917      	add	r1, sp, #92	@ 0x5c
 80062be:	4658      	mov	r0, fp
 80062c0:	f001 fa3a 	bl	8007738 <__d2b>
 80062c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062c8:	4681      	mov	r9, r0
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	d077      	beq.n	80063be <_dtoa_r+0x1d6>
 80062ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062e8:	4619      	mov	r1, r3
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b74      	ldr	r3, [pc, #464]	@ (80064c0 <_dtoa_r+0x2d8>)
 80062ee:	f7f9 ffeb 	bl	80002c8 <__aeabi_dsub>
 80062f2:	a369      	add	r3, pc, #420	@ (adr r3, 8006498 <_dtoa_r+0x2b0>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7fa f99e 	bl	8000638 <__aeabi_dmul>
 80062fc:	a368      	add	r3, pc, #416	@ (adr r3, 80064a0 <_dtoa_r+0x2b8>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7f9 ffe3 	bl	80002cc <__adddf3>
 8006306:	4604      	mov	r4, r0
 8006308:	4630      	mov	r0, r6
 800630a:	460d      	mov	r5, r1
 800630c:	f7fa f92a 	bl	8000564 <__aeabi_i2d>
 8006310:	a365      	add	r3, pc, #404	@ (adr r3, 80064a8 <_dtoa_r+0x2c0>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f7fa f98f 	bl	8000638 <__aeabi_dmul>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4620      	mov	r0, r4
 8006320:	4629      	mov	r1, r5
 8006322:	f7f9 ffd3 	bl	80002cc <__adddf3>
 8006326:	4604      	mov	r4, r0
 8006328:	460d      	mov	r5, r1
 800632a:	f7fa fc35 	bl	8000b98 <__aeabi_d2iz>
 800632e:	2200      	movs	r2, #0
 8006330:	4607      	mov	r7, r0
 8006332:	2300      	movs	r3, #0
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7fa fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800633c:	b140      	cbz	r0, 8006350 <_dtoa_r+0x168>
 800633e:	4638      	mov	r0, r7
 8006340:	f7fa f910 	bl	8000564 <__aeabi_i2d>
 8006344:	4622      	mov	r2, r4
 8006346:	462b      	mov	r3, r5
 8006348:	f7fa fbde 	bl	8000b08 <__aeabi_dcmpeq>
 800634c:	b900      	cbnz	r0, 8006350 <_dtoa_r+0x168>
 800634e:	3f01      	subs	r7, #1
 8006350:	2f16      	cmp	r7, #22
 8006352:	d851      	bhi.n	80063f8 <_dtoa_r+0x210>
 8006354:	4b5b      	ldr	r3, [pc, #364]	@ (80064c4 <_dtoa_r+0x2dc>)
 8006356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006362:	f7fa fbdb 	bl	8000b1c <__aeabi_dcmplt>
 8006366:	2800      	cmp	r0, #0
 8006368:	d048      	beq.n	80063fc <_dtoa_r+0x214>
 800636a:	3f01      	subs	r7, #1
 800636c:	2300      	movs	r3, #0
 800636e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006372:	1b9b      	subs	r3, r3, r6
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	bf44      	itt	mi
 8006378:	f1c3 0801 	rsbmi	r8, r3, #1
 800637c:	2300      	movmi	r3, #0
 800637e:	9208      	str	r2, [sp, #32]
 8006380:	bf54      	ite	pl
 8006382:	f04f 0800 	movpl.w	r8, #0
 8006386:	9308      	strmi	r3, [sp, #32]
 8006388:	2f00      	cmp	r7, #0
 800638a:	db39      	blt.n	8006400 <_dtoa_r+0x218>
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006390:	443b      	add	r3, r7
 8006392:	9308      	str	r3, [sp, #32]
 8006394:	2300      	movs	r3, #0
 8006396:	930a      	str	r3, [sp, #40]	@ 0x28
 8006398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639a:	2b09      	cmp	r3, #9
 800639c:	d864      	bhi.n	8006468 <_dtoa_r+0x280>
 800639e:	2b05      	cmp	r3, #5
 80063a0:	bfc4      	itt	gt
 80063a2:	3b04      	subgt	r3, #4
 80063a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80063a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a8:	f1a3 0302 	sub.w	r3, r3, #2
 80063ac:	bfcc      	ite	gt
 80063ae:	2400      	movgt	r4, #0
 80063b0:	2401      	movle	r4, #1
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d863      	bhi.n	800647e <_dtoa_r+0x296>
 80063b6:	e8df f003 	tbb	[pc, r3]
 80063ba:	372a      	.short	0x372a
 80063bc:	5535      	.short	0x5535
 80063be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063c2:	441e      	add	r6, r3
 80063c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	bfc1      	itttt	gt
 80063cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063d0:	409f      	lslgt	r7, r3
 80063d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063da:	bfd6      	itet	le
 80063dc:	f1c3 0320 	rsble	r3, r3, #32
 80063e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80063e4:	fa04 f003 	lslle.w	r0, r4, r3
 80063e8:	f7fa f8ac 	bl	8000544 <__aeabi_ui2d>
 80063ec:	2201      	movs	r2, #1
 80063ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063f2:	3e01      	subs	r6, #1
 80063f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80063f6:	e777      	b.n	80062e8 <_dtoa_r+0x100>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e7b8      	b.n	800636e <_dtoa_r+0x186>
 80063fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80063fe:	e7b7      	b.n	8006370 <_dtoa_r+0x188>
 8006400:	427b      	negs	r3, r7
 8006402:	930a      	str	r3, [sp, #40]	@ 0x28
 8006404:	2300      	movs	r3, #0
 8006406:	eba8 0807 	sub.w	r8, r8, r7
 800640a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800640c:	e7c4      	b.n	8006398 <_dtoa_r+0x1b0>
 800640e:	2300      	movs	r3, #0
 8006410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	dc35      	bgt.n	8006484 <_dtoa_r+0x29c>
 8006418:	2301      	movs	r3, #1
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	461a      	mov	r2, r3
 8006420:	920e      	str	r2, [sp, #56]	@ 0x38
 8006422:	e00b      	b.n	800643c <_dtoa_r+0x254>
 8006424:	2301      	movs	r3, #1
 8006426:	e7f3      	b.n	8006410 <_dtoa_r+0x228>
 8006428:	2300      	movs	r3, #0
 800642a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800642c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	9307      	str	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	2301      	movlt	r3, #1
 800643c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006440:	2100      	movs	r1, #0
 8006442:	2204      	movs	r2, #4
 8006444:	f102 0514 	add.w	r5, r2, #20
 8006448:	429d      	cmp	r5, r3
 800644a:	d91f      	bls.n	800648c <_dtoa_r+0x2a4>
 800644c:	6041      	str	r1, [r0, #4]
 800644e:	4658      	mov	r0, fp
 8006450:	f000 fd8e 	bl	8006f70 <_Balloc>
 8006454:	4682      	mov	sl, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	d13c      	bne.n	80064d4 <_dtoa_r+0x2ec>
 800645a:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <_dtoa_r+0x2e0>)
 800645c:	4602      	mov	r2, r0
 800645e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006462:	e6d8      	b.n	8006216 <_dtoa_r+0x2e>
 8006464:	2301      	movs	r3, #1
 8006466:	e7e0      	b.n	800642a <_dtoa_r+0x242>
 8006468:	2401      	movs	r4, #1
 800646a:	2300      	movs	r3, #0
 800646c:	9309      	str	r3, [sp, #36]	@ 0x24
 800646e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	9307      	str	r3, [sp, #28]
 8006478:	2200      	movs	r2, #0
 800647a:	2312      	movs	r3, #18
 800647c:	e7d0      	b.n	8006420 <_dtoa_r+0x238>
 800647e:	2301      	movs	r3, #1
 8006480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006482:	e7f5      	b.n	8006470 <_dtoa_r+0x288>
 8006484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	9307      	str	r3, [sp, #28]
 800648a:	e7d7      	b.n	800643c <_dtoa_r+0x254>
 800648c:	3101      	adds	r1, #1
 800648e:	0052      	lsls	r2, r2, #1
 8006490:	e7d8      	b.n	8006444 <_dtoa_r+0x25c>
 8006492:	bf00      	nop
 8006494:	f3af 8000 	nop.w
 8006498:	636f4361 	.word	0x636f4361
 800649c:	3fd287a7 	.word	0x3fd287a7
 80064a0:	8b60c8b3 	.word	0x8b60c8b3
 80064a4:	3fc68a28 	.word	0x3fc68a28
 80064a8:	509f79fb 	.word	0x509f79fb
 80064ac:	3fd34413 	.word	0x3fd34413
 80064b0:	0800989a 	.word	0x0800989a
 80064b4:	080098b1 	.word	0x080098b1
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	08009865 	.word	0x08009865
 80064c0:	3ff80000 	.word	0x3ff80000
 80064c4:	080099a8 	.word	0x080099a8
 80064c8:	08009909 	.word	0x08009909
 80064cc:	08009896 	.word	0x08009896
 80064d0:	08009864 	.word	0x08009864
 80064d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d8:	6018      	str	r0, [r3, #0]
 80064da:	9b07      	ldr	r3, [sp, #28]
 80064dc:	2b0e      	cmp	r3, #14
 80064de:	f200 80a4 	bhi.w	800662a <_dtoa_r+0x442>
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	f000 80a1 	beq.w	800662a <_dtoa_r+0x442>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	dd33      	ble.n	8006554 <_dtoa_r+0x36c>
 80064ec:	4bad      	ldr	r3, [pc, #692]	@ (80067a4 <_dtoa_r+0x5bc>)
 80064ee:	f007 020f 	and.w	r2, r7, #15
 80064f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f6:	ed93 7b00 	vldr	d7, [r3]
 80064fa:	05f8      	lsls	r0, r7, #23
 80064fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006504:	d516      	bpl.n	8006534 <_dtoa_r+0x34c>
 8006506:	4ba8      	ldr	r3, [pc, #672]	@ (80067a8 <_dtoa_r+0x5c0>)
 8006508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800650c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006510:	f7fa f9bc 	bl	800088c <__aeabi_ddiv>
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	f004 040f 	and.w	r4, r4, #15
 800651c:	2603      	movs	r6, #3
 800651e:	4da2      	ldr	r5, [pc, #648]	@ (80067a8 <_dtoa_r+0x5c0>)
 8006520:	b954      	cbnz	r4, 8006538 <_dtoa_r+0x350>
 8006522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652a:	f7fa f9af 	bl	800088c <__aeabi_ddiv>
 800652e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006532:	e028      	b.n	8006586 <_dtoa_r+0x39e>
 8006534:	2602      	movs	r6, #2
 8006536:	e7f2      	b.n	800651e <_dtoa_r+0x336>
 8006538:	07e1      	lsls	r1, r4, #31
 800653a:	d508      	bpl.n	800654e <_dtoa_r+0x366>
 800653c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006544:	f7fa f878 	bl	8000638 <__aeabi_dmul>
 8006548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800654c:	3601      	adds	r6, #1
 800654e:	1064      	asrs	r4, r4, #1
 8006550:	3508      	adds	r5, #8
 8006552:	e7e5      	b.n	8006520 <_dtoa_r+0x338>
 8006554:	f000 80d2 	beq.w	80066fc <_dtoa_r+0x514>
 8006558:	427c      	negs	r4, r7
 800655a:	4b92      	ldr	r3, [pc, #584]	@ (80067a4 <_dtoa_r+0x5bc>)
 800655c:	4d92      	ldr	r5, [pc, #584]	@ (80067a8 <_dtoa_r+0x5c0>)
 800655e:	f004 020f 	and.w	r2, r4, #15
 8006562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800656e:	f7fa f863 	bl	8000638 <__aeabi_dmul>
 8006572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006576:	1124      	asrs	r4, r4, #4
 8006578:	2300      	movs	r3, #0
 800657a:	2602      	movs	r6, #2
 800657c:	2c00      	cmp	r4, #0
 800657e:	f040 80b2 	bne.w	80066e6 <_dtoa_r+0x4fe>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1d3      	bne.n	800652e <_dtoa_r+0x346>
 8006586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80b7 	beq.w	8006700 <_dtoa_r+0x518>
 8006592:	4b86      	ldr	r3, [pc, #536]	@ (80067ac <_dtoa_r+0x5c4>)
 8006594:	2200      	movs	r2, #0
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fabf 	bl	8000b1c <__aeabi_dcmplt>
 800659e:	2800      	cmp	r0, #0
 80065a0:	f000 80ae 	beq.w	8006700 <_dtoa_r+0x518>
 80065a4:	9b07      	ldr	r3, [sp, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80aa 	beq.w	8006700 <_dtoa_r+0x518>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dd37      	ble.n	8006622 <_dtoa_r+0x43a>
 80065b2:	1e7b      	subs	r3, r7, #1
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	4620      	mov	r0, r4
 80065b8:	4b7d      	ldr	r3, [pc, #500]	@ (80067b0 <_dtoa_r+0x5c8>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa f83b 	bl	8000638 <__aeabi_dmul>
 80065c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c6:	9c00      	ldr	r4, [sp, #0]
 80065c8:	3601      	adds	r6, #1
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 ffca 	bl	8000564 <__aeabi_i2d>
 80065d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d4:	f7fa f830 	bl	8000638 <__aeabi_dmul>
 80065d8:	4b76      	ldr	r3, [pc, #472]	@ (80067b4 <_dtoa_r+0x5cc>)
 80065da:	2200      	movs	r2, #0
 80065dc:	f7f9 fe76 	bl	80002cc <__adddf3>
 80065e0:	4605      	mov	r5, r0
 80065e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065e6:	2c00      	cmp	r4, #0
 80065e8:	f040 808d 	bne.w	8006706 <_dtoa_r+0x51e>
 80065ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f0:	4b71      	ldr	r3, [pc, #452]	@ (80067b8 <_dtoa_r+0x5d0>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	f7f9 fe68 	bl	80002c8 <__aeabi_dsub>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006600:	462a      	mov	r2, r5
 8006602:	4633      	mov	r3, r6
 8006604:	f7fa faa8 	bl	8000b58 <__aeabi_dcmpgt>
 8006608:	2800      	cmp	r0, #0
 800660a:	f040 828b 	bne.w	8006b24 <_dtoa_r+0x93c>
 800660e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006612:	462a      	mov	r2, r5
 8006614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006618:	f7fa fa80 	bl	8000b1c <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 8128 	bne.w	8006872 <_dtoa_r+0x68a>
 8006622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800662a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f2c0 815a 	blt.w	80068e6 <_dtoa_r+0x6fe>
 8006632:	2f0e      	cmp	r7, #14
 8006634:	f300 8157 	bgt.w	80068e6 <_dtoa_r+0x6fe>
 8006638:	4b5a      	ldr	r3, [pc, #360]	@ (80067a4 <_dtoa_r+0x5bc>)
 800663a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800663e:	ed93 7b00 	vldr	d7, [r3]
 8006642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	ed8d 7b00 	vstr	d7, [sp]
 800664a:	da03      	bge.n	8006654 <_dtoa_r+0x46c>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f340 8101 	ble.w	8006856 <_dtoa_r+0x66e>
 8006654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006658:	4656      	mov	r6, sl
 800665a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	f7fa f913 	bl	800088c <__aeabi_ddiv>
 8006666:	f7fa fa97 	bl	8000b98 <__aeabi_d2iz>
 800666a:	4680      	mov	r8, r0
 800666c:	f7f9 ff7a 	bl	8000564 <__aeabi_i2d>
 8006670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006674:	f7f9 ffe0 	bl	8000638 <__aeabi_dmul>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006684:	f7f9 fe20 	bl	80002c8 <__aeabi_dsub>
 8006688:	f806 4b01 	strb.w	r4, [r6], #1
 800668c:	9d07      	ldr	r5, [sp, #28]
 800668e:	eba6 040a 	sub.w	r4, r6, sl
 8006692:	42a5      	cmp	r5, r4
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	f040 8117 	bne.w	80068ca <_dtoa_r+0x6e2>
 800669c:	f7f9 fe16 	bl	80002cc <__adddf3>
 80066a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	f7fa fa56 	bl	8000b58 <__aeabi_dcmpgt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f040 80f9 	bne.w	80068a4 <_dtoa_r+0x6bc>
 80066b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066b6:	4620      	mov	r0, r4
 80066b8:	4629      	mov	r1, r5
 80066ba:	f7fa fa25 	bl	8000b08 <__aeabi_dcmpeq>
 80066be:	b118      	cbz	r0, 80066c8 <_dtoa_r+0x4e0>
 80066c0:	f018 0f01 	tst.w	r8, #1
 80066c4:	f040 80ee 	bne.w	80068a4 <_dtoa_r+0x6bc>
 80066c8:	4649      	mov	r1, r9
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 fc90 	bl	8006ff0 <_Bfree>
 80066d0:	2300      	movs	r3, #0
 80066d2:	7033      	strb	r3, [r6, #0]
 80066d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066d6:	3701      	adds	r7, #1
 80066d8:	601f      	str	r7, [r3, #0]
 80066da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 831d 	beq.w	8006d1c <_dtoa_r+0xb34>
 80066e2:	601e      	str	r6, [r3, #0]
 80066e4:	e31a      	b.n	8006d1c <_dtoa_r+0xb34>
 80066e6:	07e2      	lsls	r2, r4, #31
 80066e8:	d505      	bpl.n	80066f6 <_dtoa_r+0x50e>
 80066ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066ee:	f7f9 ffa3 	bl	8000638 <__aeabi_dmul>
 80066f2:	3601      	adds	r6, #1
 80066f4:	2301      	movs	r3, #1
 80066f6:	1064      	asrs	r4, r4, #1
 80066f8:	3508      	adds	r5, #8
 80066fa:	e73f      	b.n	800657c <_dtoa_r+0x394>
 80066fc:	2602      	movs	r6, #2
 80066fe:	e742      	b.n	8006586 <_dtoa_r+0x39e>
 8006700:	9c07      	ldr	r4, [sp, #28]
 8006702:	9704      	str	r7, [sp, #16]
 8006704:	e761      	b.n	80065ca <_dtoa_r+0x3e2>
 8006706:	4b27      	ldr	r3, [pc, #156]	@ (80067a4 <_dtoa_r+0x5bc>)
 8006708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800670a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800670e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006712:	4454      	add	r4, sl
 8006714:	2900      	cmp	r1, #0
 8006716:	d053      	beq.n	80067c0 <_dtoa_r+0x5d8>
 8006718:	4928      	ldr	r1, [pc, #160]	@ (80067bc <_dtoa_r+0x5d4>)
 800671a:	2000      	movs	r0, #0
 800671c:	f7fa f8b6 	bl	800088c <__aeabi_ddiv>
 8006720:	4633      	mov	r3, r6
 8006722:	462a      	mov	r2, r5
 8006724:	f7f9 fdd0 	bl	80002c8 <__aeabi_dsub>
 8006728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800672c:	4656      	mov	r6, sl
 800672e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006732:	f7fa fa31 	bl	8000b98 <__aeabi_d2iz>
 8006736:	4605      	mov	r5, r0
 8006738:	f7f9 ff14 	bl	8000564 <__aeabi_i2d>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006744:	f7f9 fdc0 	bl	80002c8 <__aeabi_dsub>
 8006748:	3530      	adds	r5, #48	@ 0x30
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006752:	f806 5b01 	strb.w	r5, [r6], #1
 8006756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800675a:	f7fa f9df 	bl	8000b1c <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d171      	bne.n	8006846 <_dtoa_r+0x65e>
 8006762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006766:	4911      	ldr	r1, [pc, #68]	@ (80067ac <_dtoa_r+0x5c4>)
 8006768:	2000      	movs	r0, #0
 800676a:	f7f9 fdad 	bl	80002c8 <__aeabi_dsub>
 800676e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006772:	f7fa f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	f040 8095 	bne.w	80068a6 <_dtoa_r+0x6be>
 800677c:	42a6      	cmp	r6, r4
 800677e:	f43f af50 	beq.w	8006622 <_dtoa_r+0x43a>
 8006782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <_dtoa_r+0x5c8>)
 8006788:	2200      	movs	r2, #0
 800678a:	f7f9 ff55 	bl	8000638 <__aeabi_dmul>
 800678e:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <_dtoa_r+0x5c8>)
 8006790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006794:	2200      	movs	r2, #0
 8006796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679a:	f7f9 ff4d 	bl	8000638 <__aeabi_dmul>
 800679e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a2:	e7c4      	b.n	800672e <_dtoa_r+0x546>
 80067a4:	080099a8 	.word	0x080099a8
 80067a8:	08009980 	.word	0x08009980
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	401c0000 	.word	0x401c0000
 80067b8:	40140000 	.word	0x40140000
 80067bc:	3fe00000 	.word	0x3fe00000
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	f7f9 ff38 	bl	8000638 <__aeabi_dmul>
 80067c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80067ce:	4656      	mov	r6, sl
 80067d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d4:	f7fa f9e0 	bl	8000b98 <__aeabi_d2iz>
 80067d8:	4605      	mov	r5, r0
 80067da:	f7f9 fec3 	bl	8000564 <__aeabi_i2d>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e6:	f7f9 fd6f 	bl	80002c8 <__aeabi_dsub>
 80067ea:	3530      	adds	r5, #48	@ 0x30
 80067ec:	f806 5b01 	strb.w	r5, [r6], #1
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	d124      	bne.n	800684a <_dtoa_r+0x662>
 8006800:	4bac      	ldr	r3, [pc, #688]	@ (8006ab4 <_dtoa_r+0x8cc>)
 8006802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006806:	f7f9 fd61 	bl	80002cc <__adddf3>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006812:	f7fa f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d145      	bne.n	80068a6 <_dtoa_r+0x6be>
 800681a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800681e:	49a5      	ldr	r1, [pc, #660]	@ (8006ab4 <_dtoa_r+0x8cc>)
 8006820:	2000      	movs	r0, #0
 8006822:	f7f9 fd51 	bl	80002c8 <__aeabi_dsub>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682e:	f7fa f975 	bl	8000b1c <__aeabi_dcmplt>
 8006832:	2800      	cmp	r0, #0
 8006834:	f43f aef5 	beq.w	8006622 <_dtoa_r+0x43a>
 8006838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800683a:	1e73      	subs	r3, r6, #1
 800683c:	9315      	str	r3, [sp, #84]	@ 0x54
 800683e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006842:	2b30      	cmp	r3, #48	@ 0x30
 8006844:	d0f8      	beq.n	8006838 <_dtoa_r+0x650>
 8006846:	9f04      	ldr	r7, [sp, #16]
 8006848:	e73e      	b.n	80066c8 <_dtoa_r+0x4e0>
 800684a:	4b9b      	ldr	r3, [pc, #620]	@ (8006ab8 <_dtoa_r+0x8d0>)
 800684c:	f7f9 fef4 	bl	8000638 <__aeabi_dmul>
 8006850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006854:	e7bc      	b.n	80067d0 <_dtoa_r+0x5e8>
 8006856:	d10c      	bne.n	8006872 <_dtoa_r+0x68a>
 8006858:	4b98      	ldr	r3, [pc, #608]	@ (8006abc <_dtoa_r+0x8d4>)
 800685a:	2200      	movs	r2, #0
 800685c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006860:	f7f9 feea 	bl	8000638 <__aeabi_dmul>
 8006864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006868:	f7fa f96c 	bl	8000b44 <__aeabi_dcmpge>
 800686c:	2800      	cmp	r0, #0
 800686e:	f000 8157 	beq.w	8006b20 <_dtoa_r+0x938>
 8006872:	2400      	movs	r4, #0
 8006874:	4625      	mov	r5, r4
 8006876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006878:	43db      	mvns	r3, r3
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	4656      	mov	r6, sl
 800687e:	2700      	movs	r7, #0
 8006880:	4621      	mov	r1, r4
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fbb4 	bl	8006ff0 <_Bfree>
 8006888:	2d00      	cmp	r5, #0
 800688a:	d0dc      	beq.n	8006846 <_dtoa_r+0x65e>
 800688c:	b12f      	cbz	r7, 800689a <_dtoa_r+0x6b2>
 800688e:	42af      	cmp	r7, r5
 8006890:	d003      	beq.n	800689a <_dtoa_r+0x6b2>
 8006892:	4639      	mov	r1, r7
 8006894:	4658      	mov	r0, fp
 8006896:	f000 fbab 	bl	8006ff0 <_Bfree>
 800689a:	4629      	mov	r1, r5
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fba7 	bl	8006ff0 <_Bfree>
 80068a2:	e7d0      	b.n	8006846 <_dtoa_r+0x65e>
 80068a4:	9704      	str	r7, [sp, #16]
 80068a6:	4633      	mov	r3, r6
 80068a8:	461e      	mov	r6, r3
 80068aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068ae:	2a39      	cmp	r2, #57	@ 0x39
 80068b0:	d107      	bne.n	80068c2 <_dtoa_r+0x6da>
 80068b2:	459a      	cmp	sl, r3
 80068b4:	d1f8      	bne.n	80068a8 <_dtoa_r+0x6c0>
 80068b6:	9a04      	ldr	r2, [sp, #16]
 80068b8:	3201      	adds	r2, #1
 80068ba:	9204      	str	r2, [sp, #16]
 80068bc:	2230      	movs	r2, #48	@ 0x30
 80068be:	f88a 2000 	strb.w	r2, [sl]
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	3201      	adds	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e7bd      	b.n	8006846 <_dtoa_r+0x65e>
 80068ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab8 <_dtoa_r+0x8d0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	f7f9 feb3 	bl	8000638 <__aeabi_dmul>
 80068d2:	2200      	movs	r2, #0
 80068d4:	2300      	movs	r3, #0
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
 80068da:	f7fa f915 	bl	8000b08 <__aeabi_dcmpeq>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f aebb 	beq.w	800665a <_dtoa_r+0x472>
 80068e4:	e6f0      	b.n	80066c8 <_dtoa_r+0x4e0>
 80068e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	f000 80db 	beq.w	8006aa4 <_dtoa_r+0x8bc>
 80068ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068f0:	2a01      	cmp	r2, #1
 80068f2:	f300 80bf 	bgt.w	8006a74 <_dtoa_r+0x88c>
 80068f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068f8:	2a00      	cmp	r2, #0
 80068fa:	f000 80b7 	beq.w	8006a6c <_dtoa_r+0x884>
 80068fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006904:	4646      	mov	r6, r8
 8006906:	9a08      	ldr	r2, [sp, #32]
 8006908:	2101      	movs	r1, #1
 800690a:	441a      	add	r2, r3
 800690c:	4658      	mov	r0, fp
 800690e:	4498      	add	r8, r3
 8006910:	9208      	str	r2, [sp, #32]
 8006912:	f000 fc6b 	bl	80071ec <__i2b>
 8006916:	4605      	mov	r5, r0
 8006918:	b15e      	cbz	r6, 8006932 <_dtoa_r+0x74a>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	dd08      	ble.n	8006932 <_dtoa_r+0x74a>
 8006920:	42b3      	cmp	r3, r6
 8006922:	9a08      	ldr	r2, [sp, #32]
 8006924:	bfa8      	it	ge
 8006926:	4633      	movge	r3, r6
 8006928:	eba8 0803 	sub.w	r8, r8, r3
 800692c:	1af6      	subs	r6, r6, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	9308      	str	r3, [sp, #32]
 8006932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006934:	b1f3      	cbz	r3, 8006974 <_dtoa_r+0x78c>
 8006936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80b7 	beq.w	8006aac <_dtoa_r+0x8c4>
 800693e:	b18c      	cbz	r4, 8006964 <_dtoa_r+0x77c>
 8006940:	4629      	mov	r1, r5
 8006942:	4622      	mov	r2, r4
 8006944:	4658      	mov	r0, fp
 8006946:	f000 fd11 	bl	800736c <__pow5mult>
 800694a:	464a      	mov	r2, r9
 800694c:	4601      	mov	r1, r0
 800694e:	4605      	mov	r5, r0
 8006950:	4658      	mov	r0, fp
 8006952:	f000 fc61 	bl	8007218 <__multiply>
 8006956:	4649      	mov	r1, r9
 8006958:	9004      	str	r0, [sp, #16]
 800695a:	4658      	mov	r0, fp
 800695c:	f000 fb48 	bl	8006ff0 <_Bfree>
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	4699      	mov	r9, r3
 8006964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006966:	1b1a      	subs	r2, r3, r4
 8006968:	d004      	beq.n	8006974 <_dtoa_r+0x78c>
 800696a:	4649      	mov	r1, r9
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fcfd 	bl	800736c <__pow5mult>
 8006972:	4681      	mov	r9, r0
 8006974:	2101      	movs	r1, #1
 8006976:	4658      	mov	r0, fp
 8006978:	f000 fc38 	bl	80071ec <__i2b>
 800697c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800697e:	4604      	mov	r4, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 81cf 	beq.w	8006d24 <_dtoa_r+0xb3c>
 8006986:	461a      	mov	r2, r3
 8006988:	4601      	mov	r1, r0
 800698a:	4658      	mov	r0, fp
 800698c:	f000 fcee 	bl	800736c <__pow5mult>
 8006990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006992:	2b01      	cmp	r3, #1
 8006994:	4604      	mov	r4, r0
 8006996:	f300 8095 	bgt.w	8006ac4 <_dtoa_r+0x8dc>
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8087 	bne.w	8006ab0 <_dtoa_r+0x8c8>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 8089 	bne.w	8006ac0 <_dtoa_r+0x8d8>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	0d1b      	lsrs	r3, r3, #20
 80069b6:	051b      	lsls	r3, r3, #20
 80069b8:	b12b      	cbz	r3, 80069c6 <_dtoa_r+0x7de>
 80069ba:	9b08      	ldr	r3, [sp, #32]
 80069bc:	3301      	adds	r3, #1
 80069be:	9308      	str	r3, [sp, #32]
 80069c0:	f108 0801 	add.w	r8, r8, #1
 80069c4:	2301      	movs	r3, #1
 80069c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 81b0 	beq.w	8006d30 <_dtoa_r+0xb48>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d6:	6918      	ldr	r0, [r3, #16]
 80069d8:	f000 fbbc 	bl	8007154 <__hi0bits>
 80069dc:	f1c0 0020 	rsb	r0, r0, #32
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	4418      	add	r0, r3
 80069e4:	f010 001f 	ands.w	r0, r0, #31
 80069e8:	d077      	beq.n	8006ada <_dtoa_r+0x8f2>
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	dd6b      	ble.n	8006aca <_dtoa_r+0x8e2>
 80069f2:	9b08      	ldr	r3, [sp, #32]
 80069f4:	f1c0 001c 	rsb	r0, r0, #28
 80069f8:	4403      	add	r3, r0
 80069fa:	4480      	add	r8, r0
 80069fc:	4406      	add	r6, r0
 80069fe:	9308      	str	r3, [sp, #32]
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	dd05      	ble.n	8006a12 <_dtoa_r+0x82a>
 8006a06:	4649      	mov	r1, r9
 8006a08:	4642      	mov	r2, r8
 8006a0a:	4658      	mov	r0, fp
 8006a0c:	f000 fd08 	bl	8007420 <__lshift>
 8006a10:	4681      	mov	r9, r0
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd05      	ble.n	8006a24 <_dtoa_r+0x83c>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f000 fcff 	bl	8007420 <__lshift>
 8006a22:	4604      	mov	r4, r0
 8006a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d059      	beq.n	8006ade <_dtoa_r+0x8f6>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fd63 	bl	80074f8 <__mcmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	da53      	bge.n	8006ade <_dtoa_r+0x8f6>
 8006a36:	1e7b      	subs	r3, r7, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	220a      	movs	r2, #10
 8006a40:	4658      	mov	r0, fp
 8006a42:	f000 faf7 	bl	8007034 <__multadd>
 8006a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a48:	4681      	mov	r9, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8172 	beq.w	8006d34 <_dtoa_r+0xb4c>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4629      	mov	r1, r5
 8006a54:	220a      	movs	r2, #10
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 faec 	bl	8007034 <__multadd>
 8006a5c:	9b00      	ldr	r3, [sp, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	4605      	mov	r5, r0
 8006a62:	dc67      	bgt.n	8006b34 <_dtoa_r+0x94c>
 8006a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc41      	bgt.n	8006aee <_dtoa_r+0x906>
 8006a6a:	e063      	b.n	8006b34 <_dtoa_r+0x94c>
 8006a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a72:	e746      	b.n	8006902 <_dtoa_r+0x71a>
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	1e5c      	subs	r4, r3, #1
 8006a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	bfbf      	itttt	lt
 8006a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a84:	1ae3      	sublt	r3, r4, r3
 8006a86:	bfb4      	ite	lt
 8006a88:	18d2      	addlt	r2, r2, r3
 8006a8a:	1b1c      	subge	r4, r3, r4
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	bfbc      	itt	lt
 8006a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a92:	2400      	movlt	r4, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfb5      	itete	lt
 8006a98:	eba8 0603 	sublt.w	r6, r8, r3
 8006a9c:	9b07      	ldrge	r3, [sp, #28]
 8006a9e:	2300      	movlt	r3, #0
 8006aa0:	4646      	movge	r6, r8
 8006aa2:	e730      	b.n	8006906 <_dtoa_r+0x71e>
 8006aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aa8:	4646      	mov	r6, r8
 8006aaa:	e735      	b.n	8006918 <_dtoa_r+0x730>
 8006aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aae:	e75c      	b.n	800696a <_dtoa_r+0x782>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e788      	b.n	80069c6 <_dtoa_r+0x7de>
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	40140000 	.word	0x40140000
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	e780      	b.n	80069c6 <_dtoa_r+0x7de>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac8:	e782      	b.n	80069d0 <_dtoa_r+0x7e8>
 8006aca:	d099      	beq.n	8006a00 <_dtoa_r+0x818>
 8006acc:	9a08      	ldr	r2, [sp, #32]
 8006ace:	331c      	adds	r3, #28
 8006ad0:	441a      	add	r2, r3
 8006ad2:	4498      	add	r8, r3
 8006ad4:	441e      	add	r6, r3
 8006ad6:	9208      	str	r2, [sp, #32]
 8006ad8:	e792      	b.n	8006a00 <_dtoa_r+0x818>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e7f6      	b.n	8006acc <_dtoa_r+0x8e4>
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	9704      	str	r7, [sp, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dc20      	bgt.n	8006b28 <_dtoa_r+0x940>
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd1e      	ble.n	8006b2c <_dtoa_r+0x944>
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f aec0 	bne.w	8006876 <_dtoa_r+0x68e>
 8006af6:	4621      	mov	r1, r4
 8006af8:	2205      	movs	r2, #5
 8006afa:	4658      	mov	r0, fp
 8006afc:	f000 fa9a 	bl	8007034 <__multadd>
 8006b00:	4601      	mov	r1, r0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4648      	mov	r0, r9
 8006b06:	f000 fcf7 	bl	80074f8 <__mcmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	f77f aeb3 	ble.w	8006876 <_dtoa_r+0x68e>
 8006b10:	4656      	mov	r6, sl
 8006b12:	2331      	movs	r3, #49	@ 0x31
 8006b14:	f806 3b01 	strb.w	r3, [r6], #1
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	e6ae      	b.n	800687e <_dtoa_r+0x696>
 8006b20:	9c07      	ldr	r4, [sp, #28]
 8006b22:	9704      	str	r7, [sp, #16]
 8006b24:	4625      	mov	r5, r4
 8006b26:	e7f3      	b.n	8006b10 <_dtoa_r+0x928>
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8104 	beq.w	8006d3c <_dtoa_r+0xb54>
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	dd05      	ble.n	8006b44 <_dtoa_r+0x95c>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fc6f 	bl	8007420 <__lshift>
 8006b42:	4605      	mov	r5, r0
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d05a      	beq.n	8006c00 <_dtoa_r+0xa18>
 8006b4a:	6869      	ldr	r1, [r5, #4]
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f000 fa0f 	bl	8006f70 <_Balloc>
 8006b52:	4606      	mov	r6, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <_dtoa_r+0x97a>
 8006b56:	4b84      	ldr	r3, [pc, #528]	@ (8006d68 <_dtoa_r+0xb80>)
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b5e:	f7ff bb5a 	b.w	8006216 <_dtoa_r+0x2e>
 8006b62:	692a      	ldr	r2, [r5, #16]
 8006b64:	3202      	adds	r2, #2
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	f105 010c 	add.w	r1, r5, #12
 8006b6c:	300c      	adds	r0, #12
 8006b6e:	f001 ff75 	bl	8008a5c <memcpy>
 8006b72:	2201      	movs	r2, #1
 8006b74:	4631      	mov	r1, r6
 8006b76:	4658      	mov	r0, fp
 8006b78:	f000 fc52 	bl	8007420 <__lshift>
 8006b7c:	f10a 0301 	add.w	r3, sl, #1
 8006b80:	9307      	str	r3, [sp, #28]
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	4453      	add	r3, sl
 8006b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	462f      	mov	r7, r5
 8006b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b92:	4605      	mov	r5, r0
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	4621      	mov	r1, r4
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	f7ff fa99 	bl	80060d4 <quorem>
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	9002      	str	r0, [sp, #8]
 8006ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006baa:	4648      	mov	r0, r9
 8006bac:	f000 fca4 	bl	80074f8 <__mcmp>
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	9008      	str	r0, [sp, #32]
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4658      	mov	r0, fp
 8006bb8:	f000 fcba 	bl	8007530 <__mdiff>
 8006bbc:	68c2      	ldr	r2, [r0, #12]
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	bb02      	cbnz	r2, 8006c04 <_dtoa_r+0xa1c>
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	f000 fc97 	bl	80074f8 <__mcmp>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4658      	mov	r0, fp
 8006bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bd2:	f000 fa0d 	bl	8006ff0 <_Bfree>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bda:	9e07      	ldr	r6, [sp, #28]
 8006bdc:	ea43 0102 	orr.w	r1, r3, r2
 8006be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be2:	4319      	orrs	r1, r3
 8006be4:	d110      	bne.n	8006c08 <_dtoa_r+0xa20>
 8006be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bea:	d029      	beq.n	8006c40 <_dtoa_r+0xa58>
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dd02      	ble.n	8006bf8 <_dtoa_r+0xa10>
 8006bf2:	9b02      	ldr	r3, [sp, #8]
 8006bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	f883 8000 	strb.w	r8, [r3]
 8006bfe:	e63f      	b.n	8006880 <_dtoa_r+0x698>
 8006c00:	4628      	mov	r0, r5
 8006c02:	e7bb      	b.n	8006b7c <_dtoa_r+0x994>
 8006c04:	2201      	movs	r2, #1
 8006c06:	e7e1      	b.n	8006bcc <_dtoa_r+0x9e4>
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	db04      	blt.n	8006c18 <_dtoa_r+0xa30>
 8006c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c10:	430b      	orrs	r3, r1
 8006c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c14:	430b      	orrs	r3, r1
 8006c16:	d120      	bne.n	8006c5a <_dtoa_r+0xa72>
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	dded      	ble.n	8006bf8 <_dtoa_r+0xa10>
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 fbfd 	bl	8007420 <__lshift>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4681      	mov	r9, r0
 8006c2a:	f000 fc65 	bl	80074f8 <__mcmp>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	dc03      	bgt.n	8006c3a <_dtoa_r+0xa52>
 8006c32:	d1e1      	bne.n	8006bf8 <_dtoa_r+0xa10>
 8006c34:	f018 0f01 	tst.w	r8, #1
 8006c38:	d0de      	beq.n	8006bf8 <_dtoa_r+0xa10>
 8006c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c3e:	d1d8      	bne.n	8006bf2 <_dtoa_r+0xa0a>
 8006c40:	9a00      	ldr	r2, [sp, #0]
 8006c42:	2339      	movs	r3, #57	@ 0x39
 8006c44:	7013      	strb	r3, [r2, #0]
 8006c46:	4633      	mov	r3, r6
 8006c48:	461e      	mov	r6, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c50:	2a39      	cmp	r2, #57	@ 0x39
 8006c52:	d052      	beq.n	8006cfa <_dtoa_r+0xb12>
 8006c54:	3201      	adds	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	e612      	b.n	8006880 <_dtoa_r+0x698>
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	dd07      	ble.n	8006c6e <_dtoa_r+0xa86>
 8006c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c62:	d0ed      	beq.n	8006c40 <_dtoa_r+0xa58>
 8006c64:	9a00      	ldr	r2, [sp, #0]
 8006c66:	f108 0301 	add.w	r3, r8, #1
 8006c6a:	7013      	strb	r3, [r2, #0]
 8006c6c:	e608      	b.n	8006880 <_dtoa_r+0x698>
 8006c6e:	9b07      	ldr	r3, [sp, #28]
 8006c70:	9a07      	ldr	r2, [sp, #28]
 8006c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d028      	beq.n	8006cce <_dtoa_r+0xae6>
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	2300      	movs	r3, #0
 8006c80:	220a      	movs	r2, #10
 8006c82:	4658      	mov	r0, fp
 8006c84:	f000 f9d6 	bl	8007034 <__multadd>
 8006c88:	42af      	cmp	r7, r5
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	f04f 020a 	mov.w	r2, #10
 8006c94:	4639      	mov	r1, r7
 8006c96:	4658      	mov	r0, fp
 8006c98:	d107      	bne.n	8006caa <_dtoa_r+0xac2>
 8006c9a:	f000 f9cb 	bl	8007034 <__multadd>
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	e774      	b.n	8006b94 <_dtoa_r+0x9ac>
 8006caa:	f000 f9c3 	bl	8007034 <__multadd>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f000 f9bc 	bl	8007034 <__multadd>
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	e7f0      	b.n	8006ca2 <_dtoa_r+0xaba>
 8006cc0:	9b00      	ldr	r3, [sp, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfcc      	ite	gt
 8006cc6:	461e      	movgt	r6, r3
 8006cc8:	2601      	movle	r6, #1
 8006cca:	4456      	add	r6, sl
 8006ccc:	2700      	movs	r7, #0
 8006cce:	4649      	mov	r1, r9
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	4658      	mov	r0, fp
 8006cd4:	f000 fba4 	bl	8007420 <__lshift>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4681      	mov	r9, r0
 8006cdc:	f000 fc0c 	bl	80074f8 <__mcmp>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	dcb0      	bgt.n	8006c46 <_dtoa_r+0xa5e>
 8006ce4:	d102      	bne.n	8006cec <_dtoa_r+0xb04>
 8006ce6:	f018 0f01 	tst.w	r8, #1
 8006cea:	d1ac      	bne.n	8006c46 <_dtoa_r+0xa5e>
 8006cec:	4633      	mov	r3, r6
 8006cee:	461e      	mov	r6, r3
 8006cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf4:	2a30      	cmp	r2, #48	@ 0x30
 8006cf6:	d0fa      	beq.n	8006cee <_dtoa_r+0xb06>
 8006cf8:	e5c2      	b.n	8006880 <_dtoa_r+0x698>
 8006cfa:	459a      	cmp	sl, r3
 8006cfc:	d1a4      	bne.n	8006c48 <_dtoa_r+0xa60>
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	2331      	movs	r3, #49	@ 0x31
 8006d06:	f88a 3000 	strb.w	r3, [sl]
 8006d0a:	e5b9      	b.n	8006880 <_dtoa_r+0x698>
 8006d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d6c <_dtoa_r+0xb84>
 8006d12:	b11b      	cbz	r3, 8006d1c <_dtoa_r+0xb34>
 8006d14:	f10a 0308 	add.w	r3, sl, #8
 8006d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	b019      	add	sp, #100	@ 0x64
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	f77f ae37 	ble.w	800699a <_dtoa_r+0x7b2>
 8006d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	2001      	movs	r0, #1
 8006d32:	e655      	b.n	80069e0 <_dtoa_r+0x7f8>
 8006d34:	9b00      	ldr	r3, [sp, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f77f aed6 	ble.w	8006ae8 <_dtoa_r+0x900>
 8006d3c:	4656      	mov	r6, sl
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4648      	mov	r0, r9
 8006d42:	f7ff f9c7 	bl	80060d4 <quorem>
 8006d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	eba6 020a 	sub.w	r2, r6, sl
 8006d54:	4293      	cmp	r3, r2
 8006d56:	ddb3      	ble.n	8006cc0 <_dtoa_r+0xad8>
 8006d58:	4649      	mov	r1, r9
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f000 f968 	bl	8007034 <__multadd>
 8006d64:	4681      	mov	r9, r0
 8006d66:	e7ea      	b.n	8006d3e <_dtoa_r+0xb56>
 8006d68:	08009909 	.word	0x08009909
 8006d6c:	0800988d 	.word	0x0800988d

08006d70 <_free_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4605      	mov	r5, r0
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d041      	beq.n	8006dfc <_free_r+0x8c>
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f0c      	subs	r4, r1, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	18e4      	addlt	r4, r4, r3
 8006d84:	f000 f8e8 	bl	8006f58 <__malloc_lock>
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <_free_r+0x90>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x2c>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d98:	f000 b8e4 	b.w	8006f64 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x42>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	1821      	adds	r1, r4, r0
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x1e>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x4c>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x42>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1850      	adds	r0, r2, r1
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x6c>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	1850      	adds	r0, r2, r1
 8006dca:	4283      	cmp	r3, r0
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x22>
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4408      	add	r0, r1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x22>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x74>
 8006dde:	230c      	movs	r3, #12
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x22>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1809      	addeq	r1, r1, r0
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x22>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000494 	.word	0x20000494

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	@ (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b825 	b.w	8006e58 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000024 	.word	0x20000024

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f001 fe0c 	bl	8008a3c <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f001 fe07 	bl	8008a3c <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f001 fdf8 	bl	8008a3c <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20000490 	.word	0x20000490

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f001 fdc2 	bl	8008a3c <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20000494 	.word	0x20000494

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff b8b2 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	2000048c 	.word	0x2000048c

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff b8ad 	b.w	80060c4 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	2000048c 	.word	0x2000048c

08006f70 <_Balloc>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	69c6      	ldr	r6, [r0, #28]
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	b976      	cbnz	r6, 8006f98 <_Balloc+0x28>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f7ff ff42 	bl	8006e04 <malloc>
 8006f80:	4602      	mov	r2, r0
 8006f82:	61e0      	str	r0, [r4, #28]
 8006f84:	b920      	cbnz	r0, 8006f90 <_Balloc+0x20>
 8006f86:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <_Balloc+0x78>)
 8006f88:	4818      	ldr	r0, [pc, #96]	@ (8006fec <_Balloc+0x7c>)
 8006f8a:	216b      	movs	r1, #107	@ 0x6b
 8006f8c:	f001 fd7c 	bl	8008a88 <__assert_func>
 8006f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f94:	6006      	str	r6, [r0, #0]
 8006f96:	60c6      	str	r6, [r0, #12]
 8006f98:	69e6      	ldr	r6, [r4, #28]
 8006f9a:	68f3      	ldr	r3, [r6, #12]
 8006f9c:	b183      	cbz	r3, 8006fc0 <_Balloc+0x50>
 8006f9e:	69e3      	ldr	r3, [r4, #28]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa6:	b9b8      	cbnz	r0, 8006fd8 <_Balloc+0x68>
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f605 	lsl.w	r6, r1, r5
 8006fae:	1d72      	adds	r2, r6, #5
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f001 fd86 	bl	8008ac4 <_calloc_r>
 8006fb8:	b160      	cbz	r0, 8006fd4 <_Balloc+0x64>
 8006fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fbe:	e00e      	b.n	8006fde <_Balloc+0x6e>
 8006fc0:	2221      	movs	r2, #33	@ 0x21
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f001 fd7d 	bl	8008ac4 <_calloc_r>
 8006fca:	69e3      	ldr	r3, [r4, #28]
 8006fcc:	60f0      	str	r0, [r6, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e4      	bne.n	8006f9e <_Balloc+0x2e>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	6802      	ldr	r2, [r0, #0]
 8006fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe4:	e7f7      	b.n	8006fd6 <_Balloc+0x66>
 8006fe6:	bf00      	nop
 8006fe8:	0800989a 	.word	0x0800989a
 8006fec:	0800991a 	.word	0x0800991a

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	69c6      	ldr	r6, [r0, #28]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b976      	cbnz	r6, 8007018 <_Bfree+0x28>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ff02 	bl	8006e04 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	61e8      	str	r0, [r5, #28]
 8007004:	b920      	cbnz	r0, 8007010 <_Bfree+0x20>
 8007006:	4b09      	ldr	r3, [pc, #36]	@ (800702c <_Bfree+0x3c>)
 8007008:	4809      	ldr	r0, [pc, #36]	@ (8007030 <_Bfree+0x40>)
 800700a:	218f      	movs	r1, #143	@ 0x8f
 800700c:	f001 fd3c 	bl	8008a88 <__assert_func>
 8007010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007014:	6006      	str	r6, [r0, #0]
 8007016:	60c6      	str	r6, [r0, #12]
 8007018:	b13c      	cbz	r4, 800702a <_Bfree+0x3a>
 800701a:	69eb      	ldr	r3, [r5, #28]
 800701c:	6862      	ldr	r2, [r4, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	6021      	str	r1, [r4, #0]
 8007026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	0800989a 	.word	0x0800989a
 8007030:	0800991a 	.word	0x0800991a

08007034 <__multadd>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	690d      	ldr	r5, [r1, #16]
 800703a:	4607      	mov	r7, r0
 800703c:	460c      	mov	r4, r1
 800703e:	461e      	mov	r6, r3
 8007040:	f101 0c14 	add.w	ip, r1, #20
 8007044:	2000      	movs	r0, #0
 8007046:	f8dc 3000 	ldr.w	r3, [ip]
 800704a:	b299      	uxth	r1, r3
 800704c:	fb02 6101 	mla	r1, r2, r1, r6
 8007050:	0c1e      	lsrs	r6, r3, #16
 8007052:	0c0b      	lsrs	r3, r1, #16
 8007054:	fb02 3306 	mla	r3, r2, r6, r3
 8007058:	b289      	uxth	r1, r1
 800705a:	3001      	adds	r0, #1
 800705c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007060:	4285      	cmp	r5, r0
 8007062:	f84c 1b04 	str.w	r1, [ip], #4
 8007066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800706a:	dcec      	bgt.n	8007046 <__multadd+0x12>
 800706c:	b30e      	cbz	r6, 80070b2 <__multadd+0x7e>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc19      	bgt.n	80070a8 <__multadd+0x74>
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4638      	mov	r0, r7
 8007078:	3101      	adds	r1, #1
 800707a:	f7ff ff79 	bl	8006f70 <_Balloc>
 800707e:	4680      	mov	r8, r0
 8007080:	b928      	cbnz	r0, 800708e <__multadd+0x5a>
 8007082:	4602      	mov	r2, r0
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <__multadd+0x84>)
 8007086:	480d      	ldr	r0, [pc, #52]	@ (80070bc <__multadd+0x88>)
 8007088:	21ba      	movs	r1, #186	@ 0xba
 800708a:	f001 fcfd 	bl	8008a88 <__assert_func>
 800708e:	6922      	ldr	r2, [r4, #16]
 8007090:	3202      	adds	r2, #2
 8007092:	f104 010c 	add.w	r1, r4, #12
 8007096:	0092      	lsls	r2, r2, #2
 8007098:	300c      	adds	r0, #12
 800709a:	f001 fcdf 	bl	8008a5c <memcpy>
 800709e:	4621      	mov	r1, r4
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ffa5 	bl	8006ff0 <_Bfree>
 80070a6:	4644      	mov	r4, r8
 80070a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070ac:	3501      	adds	r5, #1
 80070ae:	615e      	str	r6, [r3, #20]
 80070b0:	6125      	str	r5, [r4, #16]
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	08009909 	.word	0x08009909
 80070bc:	0800991a 	.word	0x0800991a

080070c0 <__s2b>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	4615      	mov	r5, r2
 80070c8:	461f      	mov	r7, r3
 80070ca:	2209      	movs	r2, #9
 80070cc:	3308      	adds	r3, #8
 80070ce:	4606      	mov	r6, r0
 80070d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d4:	2100      	movs	r1, #0
 80070d6:	2201      	movs	r2, #1
 80070d8:	429a      	cmp	r2, r3
 80070da:	db09      	blt.n	80070f0 <__s2b+0x30>
 80070dc:	4630      	mov	r0, r6
 80070de:	f7ff ff47 	bl	8006f70 <_Balloc>
 80070e2:	b940      	cbnz	r0, 80070f6 <__s2b+0x36>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b19      	ldr	r3, [pc, #100]	@ (800714c <__s2b+0x8c>)
 80070e8:	4819      	ldr	r0, [pc, #100]	@ (8007150 <__s2b+0x90>)
 80070ea:	21d3      	movs	r1, #211	@ 0xd3
 80070ec:	f001 fccc 	bl	8008a88 <__assert_func>
 80070f0:	0052      	lsls	r2, r2, #1
 80070f2:	3101      	adds	r1, #1
 80070f4:	e7f0      	b.n	80070d8 <__s2b+0x18>
 80070f6:	9b08      	ldr	r3, [sp, #32]
 80070f8:	6143      	str	r3, [r0, #20]
 80070fa:	2d09      	cmp	r5, #9
 80070fc:	f04f 0301 	mov.w	r3, #1
 8007100:	6103      	str	r3, [r0, #16]
 8007102:	dd16      	ble.n	8007132 <__s2b+0x72>
 8007104:	f104 0909 	add.w	r9, r4, #9
 8007108:	46c8      	mov	r8, r9
 800710a:	442c      	add	r4, r5
 800710c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007110:	4601      	mov	r1, r0
 8007112:	3b30      	subs	r3, #48	@ 0x30
 8007114:	220a      	movs	r2, #10
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff ff8c 	bl	8007034 <__multadd>
 800711c:	45a0      	cmp	r8, r4
 800711e:	d1f5      	bne.n	800710c <__s2b+0x4c>
 8007120:	f1a5 0408 	sub.w	r4, r5, #8
 8007124:	444c      	add	r4, r9
 8007126:	1b2d      	subs	r5, r5, r4
 8007128:	1963      	adds	r3, r4, r5
 800712a:	42bb      	cmp	r3, r7
 800712c:	db04      	blt.n	8007138 <__s2b+0x78>
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	340a      	adds	r4, #10
 8007134:	2509      	movs	r5, #9
 8007136:	e7f6      	b.n	8007126 <__s2b+0x66>
 8007138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800713c:	4601      	mov	r1, r0
 800713e:	3b30      	subs	r3, #48	@ 0x30
 8007140:	220a      	movs	r2, #10
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff76 	bl	8007034 <__multadd>
 8007148:	e7ee      	b.n	8007128 <__s2b+0x68>
 800714a:	bf00      	nop
 800714c:	08009909 	.word	0x08009909
 8007150:	0800991a 	.word	0x0800991a

08007154 <__hi0bits>:
 8007154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007158:	4603      	mov	r3, r0
 800715a:	bf36      	itet	cc
 800715c:	0403      	lslcc	r3, r0, #16
 800715e:	2000      	movcs	r0, #0
 8007160:	2010      	movcc	r0, #16
 8007162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007166:	bf3c      	itt	cc
 8007168:	021b      	lslcc	r3, r3, #8
 800716a:	3008      	addcc	r0, #8
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007170:	bf3c      	itt	cc
 8007172:	011b      	lslcc	r3, r3, #4
 8007174:	3004      	addcc	r0, #4
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717a:	bf3c      	itt	cc
 800717c:	009b      	lslcc	r3, r3, #2
 800717e:	3002      	addcc	r0, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	db05      	blt.n	8007190 <__hi0bits+0x3c>
 8007184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007188:	f100 0001 	add.w	r0, r0, #1
 800718c:	bf08      	it	eq
 800718e:	2020      	moveq	r0, #32
 8007190:	4770      	bx	lr

08007192 <__lo0bits>:
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	4602      	mov	r2, r0
 8007196:	f013 0007 	ands.w	r0, r3, #7
 800719a:	d00b      	beq.n	80071b4 <__lo0bits+0x22>
 800719c:	07d9      	lsls	r1, r3, #31
 800719e:	d421      	bmi.n	80071e4 <__lo0bits+0x52>
 80071a0:	0798      	lsls	r0, r3, #30
 80071a2:	bf49      	itett	mi
 80071a4:	085b      	lsrmi	r3, r3, #1
 80071a6:	089b      	lsrpl	r3, r3, #2
 80071a8:	2001      	movmi	r0, #1
 80071aa:	6013      	strmi	r3, [r2, #0]
 80071ac:	bf5c      	itt	pl
 80071ae:	6013      	strpl	r3, [r2, #0]
 80071b0:	2002      	movpl	r0, #2
 80071b2:	4770      	bx	lr
 80071b4:	b299      	uxth	r1, r3
 80071b6:	b909      	cbnz	r1, 80071bc <__lo0bits+0x2a>
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	2010      	movs	r0, #16
 80071bc:	b2d9      	uxtb	r1, r3
 80071be:	b909      	cbnz	r1, 80071c4 <__lo0bits+0x32>
 80071c0:	3008      	adds	r0, #8
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	0719      	lsls	r1, r3, #28
 80071c6:	bf04      	itt	eq
 80071c8:	091b      	lsreq	r3, r3, #4
 80071ca:	3004      	addeq	r0, #4
 80071cc:	0799      	lsls	r1, r3, #30
 80071ce:	bf04      	itt	eq
 80071d0:	089b      	lsreq	r3, r3, #2
 80071d2:	3002      	addeq	r0, #2
 80071d4:	07d9      	lsls	r1, r3, #31
 80071d6:	d403      	bmi.n	80071e0 <__lo0bits+0x4e>
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	f100 0001 	add.w	r0, r0, #1
 80071de:	d003      	beq.n	80071e8 <__lo0bits+0x56>
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	4770      	bx	lr
 80071e4:	2000      	movs	r0, #0
 80071e6:	4770      	bx	lr
 80071e8:	2020      	movs	r0, #32
 80071ea:	4770      	bx	lr

080071ec <__i2b>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	460c      	mov	r4, r1
 80071f0:	2101      	movs	r1, #1
 80071f2:	f7ff febd 	bl	8006f70 <_Balloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	b928      	cbnz	r0, 8007206 <__i2b+0x1a>
 80071fa:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <__i2b+0x24>)
 80071fc:	4805      	ldr	r0, [pc, #20]	@ (8007214 <__i2b+0x28>)
 80071fe:	f240 1145 	movw	r1, #325	@ 0x145
 8007202:	f001 fc41 	bl	8008a88 <__assert_func>
 8007206:	2301      	movs	r3, #1
 8007208:	6144      	str	r4, [r0, #20]
 800720a:	6103      	str	r3, [r0, #16]
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	08009909 	.word	0x08009909
 8007214:	0800991a 	.word	0x0800991a

08007218 <__multiply>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4614      	mov	r4, r2
 800721e:	690a      	ldr	r2, [r1, #16]
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	bfa8      	it	ge
 8007226:	4623      	movge	r3, r4
 8007228:	460f      	mov	r7, r1
 800722a:	bfa4      	itt	ge
 800722c:	460c      	movge	r4, r1
 800722e:	461f      	movge	r7, r3
 8007230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	eb0a 0609 	add.w	r6, sl, r9
 8007240:	42b3      	cmp	r3, r6
 8007242:	b085      	sub	sp, #20
 8007244:	bfb8      	it	lt
 8007246:	3101      	addlt	r1, #1
 8007248:	f7ff fe92 	bl	8006f70 <_Balloc>
 800724c:	b930      	cbnz	r0, 800725c <__multiply+0x44>
 800724e:	4602      	mov	r2, r0
 8007250:	4b44      	ldr	r3, [pc, #272]	@ (8007364 <__multiply+0x14c>)
 8007252:	4845      	ldr	r0, [pc, #276]	@ (8007368 <__multiply+0x150>)
 8007254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007258:	f001 fc16 	bl	8008a88 <__assert_func>
 800725c:	f100 0514 	add.w	r5, r0, #20
 8007260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007264:	462b      	mov	r3, r5
 8007266:	2200      	movs	r2, #0
 8007268:	4543      	cmp	r3, r8
 800726a:	d321      	bcc.n	80072b0 <__multiply+0x98>
 800726c:	f107 0114 	add.w	r1, r7, #20
 8007270:	f104 0214 	add.w	r2, r4, #20
 8007274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	1b13      	subs	r3, r2, r4
 8007280:	3b15      	subs	r3, #21
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	3304      	adds	r3, #4
 8007288:	f104 0715 	add.w	r7, r4, #21
 800728c:	42ba      	cmp	r2, r7
 800728e:	bf38      	it	cc
 8007290:	2304      	movcc	r3, #4
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	9b02      	ldr	r3, [sp, #8]
 8007296:	9103      	str	r1, [sp, #12]
 8007298:	428b      	cmp	r3, r1
 800729a:	d80c      	bhi.n	80072b6 <__multiply+0x9e>
 800729c:	2e00      	cmp	r6, #0
 800729e:	dd03      	ble.n	80072a8 <__multiply+0x90>
 80072a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05b      	beq.n	8007360 <__multiply+0x148>
 80072a8:	6106      	str	r6, [r0, #16]
 80072aa:	b005      	add	sp, #20
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	f843 2b04 	str.w	r2, [r3], #4
 80072b4:	e7d8      	b.n	8007268 <__multiply+0x50>
 80072b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	d024      	beq.n	800730a <__multiply+0xf2>
 80072c0:	f104 0e14 	add.w	lr, r4, #20
 80072c4:	46a9      	mov	r9, r5
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072ce:	f8d9 3000 	ldr.w	r3, [r9]
 80072d2:	fa1f fb87 	uxth.w	fp, r7
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80072dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80072e0:	f8d9 7000 	ldr.w	r7, [r9]
 80072e4:	4463      	add	r3, ip
 80072e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80072ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80072ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072f8:	4572      	cmp	r2, lr
 80072fa:	f849 3b04 	str.w	r3, [r9], #4
 80072fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007302:	d8e2      	bhi.n	80072ca <__multiply+0xb2>
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	f845 c003 	str.w	ip, [r5, r3]
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007310:	3104      	adds	r1, #4
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	d021      	beq.n	800735c <__multiply+0x144>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	f104 0c14 	add.w	ip, r4, #20
 800731e:	46ae      	mov	lr, r5
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	f8bc b000 	ldrh.w	fp, [ip]
 8007328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800732c:	fb09 770b 	mla	r7, r9, fp, r7
 8007330:	4457      	add	r7, sl
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007338:	f84e 3b04 	str.w	r3, [lr], #4
 800733c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007344:	f8be 3000 	ldrh.w	r3, [lr]
 8007348:	fb09 330a 	mla	r3, r9, sl, r3
 800734c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007350:	4562      	cmp	r2, ip
 8007352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007356:	d8e5      	bhi.n	8007324 <__multiply+0x10c>
 8007358:	9f01      	ldr	r7, [sp, #4]
 800735a:	51eb      	str	r3, [r5, r7]
 800735c:	3504      	adds	r5, #4
 800735e:	e799      	b.n	8007294 <__multiply+0x7c>
 8007360:	3e01      	subs	r6, #1
 8007362:	e79b      	b.n	800729c <__multiply+0x84>
 8007364:	08009909 	.word	0x08009909
 8007368:	0800991a 	.word	0x0800991a

0800736c <__pow5mult>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4615      	mov	r5, r2
 8007372:	f012 0203 	ands.w	r2, r2, #3
 8007376:	4607      	mov	r7, r0
 8007378:	460e      	mov	r6, r1
 800737a:	d007      	beq.n	800738c <__pow5mult+0x20>
 800737c:	4c25      	ldr	r4, [pc, #148]	@ (8007414 <__pow5mult+0xa8>)
 800737e:	3a01      	subs	r2, #1
 8007380:	2300      	movs	r3, #0
 8007382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007386:	f7ff fe55 	bl	8007034 <__multadd>
 800738a:	4606      	mov	r6, r0
 800738c:	10ad      	asrs	r5, r5, #2
 800738e:	d03d      	beq.n	800740c <__pow5mult+0xa0>
 8007390:	69fc      	ldr	r4, [r7, #28]
 8007392:	b97c      	cbnz	r4, 80073b4 <__pow5mult+0x48>
 8007394:	2010      	movs	r0, #16
 8007396:	f7ff fd35 	bl	8006e04 <malloc>
 800739a:	4602      	mov	r2, r0
 800739c:	61f8      	str	r0, [r7, #28]
 800739e:	b928      	cbnz	r0, 80073ac <__pow5mult+0x40>
 80073a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <__pow5mult+0xac>)
 80073a2:	481e      	ldr	r0, [pc, #120]	@ (800741c <__pow5mult+0xb0>)
 80073a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80073a8:	f001 fb6e 	bl	8008a88 <__assert_func>
 80073ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b0:	6004      	str	r4, [r0, #0]
 80073b2:	60c4      	str	r4, [r0, #12]
 80073b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80073b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073bc:	b94c      	cbnz	r4, 80073d2 <__pow5mult+0x66>
 80073be:	f240 2171 	movw	r1, #625	@ 0x271
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7ff ff12 	bl	80071ec <__i2b>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ce:	4604      	mov	r4, r0
 80073d0:	6003      	str	r3, [r0, #0]
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	07eb      	lsls	r3, r5, #31
 80073d8:	d50a      	bpl.n	80073f0 <__pow5mult+0x84>
 80073da:	4631      	mov	r1, r6
 80073dc:	4622      	mov	r2, r4
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff ff1a 	bl	8007218 <__multiply>
 80073e4:	4631      	mov	r1, r6
 80073e6:	4680      	mov	r8, r0
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff fe01 	bl	8006ff0 <_Bfree>
 80073ee:	4646      	mov	r6, r8
 80073f0:	106d      	asrs	r5, r5, #1
 80073f2:	d00b      	beq.n	800740c <__pow5mult+0xa0>
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	b938      	cbnz	r0, 8007408 <__pow5mult+0x9c>
 80073f8:	4622      	mov	r2, r4
 80073fa:	4621      	mov	r1, r4
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff ff0b 	bl	8007218 <__multiply>
 8007402:	6020      	str	r0, [r4, #0]
 8007404:	f8c0 9000 	str.w	r9, [r0]
 8007408:	4604      	mov	r4, r0
 800740a:	e7e4      	b.n	80073d6 <__pow5mult+0x6a>
 800740c:	4630      	mov	r0, r6
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	bf00      	nop
 8007414:	08009974 	.word	0x08009974
 8007418:	0800989a 	.word	0x0800989a
 800741c:	0800991a 	.word	0x0800991a

08007420 <__lshift>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	6849      	ldr	r1, [r1, #4]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800742e:	68a3      	ldr	r3, [r4, #8]
 8007430:	4607      	mov	r7, r0
 8007432:	4691      	mov	r9, r2
 8007434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007438:	f108 0601 	add.w	r6, r8, #1
 800743c:	42b3      	cmp	r3, r6
 800743e:	db0b      	blt.n	8007458 <__lshift+0x38>
 8007440:	4638      	mov	r0, r7
 8007442:	f7ff fd95 	bl	8006f70 <_Balloc>
 8007446:	4605      	mov	r5, r0
 8007448:	b948      	cbnz	r0, 800745e <__lshift+0x3e>
 800744a:	4602      	mov	r2, r0
 800744c:	4b28      	ldr	r3, [pc, #160]	@ (80074f0 <__lshift+0xd0>)
 800744e:	4829      	ldr	r0, [pc, #164]	@ (80074f4 <__lshift+0xd4>)
 8007450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007454:	f001 fb18 	bl	8008a88 <__assert_func>
 8007458:	3101      	adds	r1, #1
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	e7ee      	b.n	800743c <__lshift+0x1c>
 800745e:	2300      	movs	r3, #0
 8007460:	f100 0114 	add.w	r1, r0, #20
 8007464:	f100 0210 	add.w	r2, r0, #16
 8007468:	4618      	mov	r0, r3
 800746a:	4553      	cmp	r3, sl
 800746c:	db33      	blt.n	80074d6 <__lshift+0xb6>
 800746e:	6920      	ldr	r0, [r4, #16]
 8007470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007474:	f104 0314 	add.w	r3, r4, #20
 8007478:	f019 091f 	ands.w	r9, r9, #31
 800747c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007484:	d02b      	beq.n	80074de <__lshift+0xbe>
 8007486:	f1c9 0e20 	rsb	lr, r9, #32
 800748a:	468a      	mov	sl, r1
 800748c:	2200      	movs	r2, #0
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	fa00 f009 	lsl.w	r0, r0, r9
 8007494:	4310      	orrs	r0, r2
 8007496:	f84a 0b04 	str.w	r0, [sl], #4
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	459c      	cmp	ip, r3
 80074a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80074a4:	d8f3      	bhi.n	800748e <__lshift+0x6e>
 80074a6:	ebac 0304 	sub.w	r3, ip, r4
 80074aa:	3b15      	subs	r3, #21
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	3304      	adds	r3, #4
 80074b2:	f104 0015 	add.w	r0, r4, #21
 80074b6:	4584      	cmp	ip, r0
 80074b8:	bf38      	it	cc
 80074ba:	2304      	movcc	r3, #4
 80074bc:	50ca      	str	r2, [r1, r3]
 80074be:	b10a      	cbz	r2, 80074c4 <__lshift+0xa4>
 80074c0:	f108 0602 	add.w	r6, r8, #2
 80074c4:	3e01      	subs	r6, #1
 80074c6:	4638      	mov	r0, r7
 80074c8:	612e      	str	r6, [r5, #16]
 80074ca:	4621      	mov	r1, r4
 80074cc:	f7ff fd90 	bl	8006ff0 <_Bfree>
 80074d0:	4628      	mov	r0, r5
 80074d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80074da:	3301      	adds	r3, #1
 80074dc:	e7c5      	b.n	800746a <__lshift+0x4a>
 80074de:	3904      	subs	r1, #4
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e8:	459c      	cmp	ip, r3
 80074ea:	d8f9      	bhi.n	80074e0 <__lshift+0xc0>
 80074ec:	e7ea      	b.n	80074c4 <__lshift+0xa4>
 80074ee:	bf00      	nop
 80074f0:	08009909 	.word	0x08009909
 80074f4:	0800991a 	.word	0x0800991a

080074f8 <__mcmp>:
 80074f8:	690a      	ldr	r2, [r1, #16]
 80074fa:	4603      	mov	r3, r0
 80074fc:	6900      	ldr	r0, [r0, #16]
 80074fe:	1a80      	subs	r0, r0, r2
 8007500:	b530      	push	{r4, r5, lr}
 8007502:	d10e      	bne.n	8007522 <__mcmp+0x2a>
 8007504:	3314      	adds	r3, #20
 8007506:	3114      	adds	r1, #20
 8007508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800750c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007518:	4295      	cmp	r5, r2
 800751a:	d003      	beq.n	8007524 <__mcmp+0x2c>
 800751c:	d205      	bcs.n	800752a <__mcmp+0x32>
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	42a3      	cmp	r3, r4
 8007526:	d3f3      	bcc.n	8007510 <__mcmp+0x18>
 8007528:	e7fb      	b.n	8007522 <__mcmp+0x2a>
 800752a:	2001      	movs	r0, #1
 800752c:	e7f9      	b.n	8007522 <__mcmp+0x2a>
	...

08007530 <__mdiff>:
 8007530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	4689      	mov	r9, r1
 8007536:	4606      	mov	r6, r0
 8007538:	4611      	mov	r1, r2
 800753a:	4648      	mov	r0, r9
 800753c:	4614      	mov	r4, r2
 800753e:	f7ff ffdb 	bl	80074f8 <__mcmp>
 8007542:	1e05      	subs	r5, r0, #0
 8007544:	d112      	bne.n	800756c <__mdiff+0x3c>
 8007546:	4629      	mov	r1, r5
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff fd11 	bl	8006f70 <_Balloc>
 800754e:	4602      	mov	r2, r0
 8007550:	b928      	cbnz	r0, 800755e <__mdiff+0x2e>
 8007552:	4b3f      	ldr	r3, [pc, #252]	@ (8007650 <__mdiff+0x120>)
 8007554:	f240 2137 	movw	r1, #567	@ 0x237
 8007558:	483e      	ldr	r0, [pc, #248]	@ (8007654 <__mdiff+0x124>)
 800755a:	f001 fa95 	bl	8008a88 <__assert_func>
 800755e:	2301      	movs	r3, #1
 8007560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007564:	4610      	mov	r0, r2
 8007566:	b003      	add	sp, #12
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	bfbc      	itt	lt
 800756e:	464b      	movlt	r3, r9
 8007570:	46a1      	movlt	r9, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007578:	bfba      	itte	lt
 800757a:	461c      	movlt	r4, r3
 800757c:	2501      	movlt	r5, #1
 800757e:	2500      	movge	r5, #0
 8007580:	f7ff fcf6 	bl	8006f70 <_Balloc>
 8007584:	4602      	mov	r2, r0
 8007586:	b918      	cbnz	r0, 8007590 <__mdiff+0x60>
 8007588:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <__mdiff+0x120>)
 800758a:	f240 2145 	movw	r1, #581	@ 0x245
 800758e:	e7e3      	b.n	8007558 <__mdiff+0x28>
 8007590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007594:	6926      	ldr	r6, [r4, #16]
 8007596:	60c5      	str	r5, [r0, #12]
 8007598:	f109 0310 	add.w	r3, r9, #16
 800759c:	f109 0514 	add.w	r5, r9, #20
 80075a0:	f104 0e14 	add.w	lr, r4, #20
 80075a4:	f100 0b14 	add.w	fp, r0, #20
 80075a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80075ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	46d9      	mov	r9, fp
 80075b4:	f04f 0c00 	mov.w	ip, #0
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80075be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	fa1f f38a 	uxth.w	r3, sl
 80075c8:	4619      	mov	r1, r3
 80075ca:	b283      	uxth	r3, r0
 80075cc:	1acb      	subs	r3, r1, r3
 80075ce:	0c00      	lsrs	r0, r0, #16
 80075d0:	4463      	add	r3, ip
 80075d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075e0:	4576      	cmp	r6, lr
 80075e2:	f849 3b04 	str.w	r3, [r9], #4
 80075e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075ea:	d8e5      	bhi.n	80075b8 <__mdiff+0x88>
 80075ec:	1b33      	subs	r3, r6, r4
 80075ee:	3b15      	subs	r3, #21
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	3415      	adds	r4, #21
 80075f6:	3304      	adds	r3, #4
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	bf38      	it	cc
 80075fc:	2304      	movcc	r3, #4
 80075fe:	441d      	add	r5, r3
 8007600:	445b      	add	r3, fp
 8007602:	461e      	mov	r6, r3
 8007604:	462c      	mov	r4, r5
 8007606:	4544      	cmp	r4, r8
 8007608:	d30e      	bcc.n	8007628 <__mdiff+0xf8>
 800760a:	f108 0103 	add.w	r1, r8, #3
 800760e:	1b49      	subs	r1, r1, r5
 8007610:	f021 0103 	bic.w	r1, r1, #3
 8007614:	3d03      	subs	r5, #3
 8007616:	45a8      	cmp	r8, r5
 8007618:	bf38      	it	cc
 800761a:	2100      	movcc	r1, #0
 800761c:	440b      	add	r3, r1
 800761e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007622:	b191      	cbz	r1, 800764a <__mdiff+0x11a>
 8007624:	6117      	str	r7, [r2, #16]
 8007626:	e79d      	b.n	8007564 <__mdiff+0x34>
 8007628:	f854 1b04 	ldr.w	r1, [r4], #4
 800762c:	46e6      	mov	lr, ip
 800762e:	0c08      	lsrs	r0, r1, #16
 8007630:	fa1c fc81 	uxtah	ip, ip, r1
 8007634:	4471      	add	r1, lr
 8007636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800763a:	b289      	uxth	r1, r1
 800763c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007640:	f846 1b04 	str.w	r1, [r6], #4
 8007644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007648:	e7dd      	b.n	8007606 <__mdiff+0xd6>
 800764a:	3f01      	subs	r7, #1
 800764c:	e7e7      	b.n	800761e <__mdiff+0xee>
 800764e:	bf00      	nop
 8007650:	08009909 	.word	0x08009909
 8007654:	0800991a 	.word	0x0800991a

08007658 <__ulp>:
 8007658:	b082      	sub	sp, #8
 800765a:	ed8d 0b00 	vstr	d0, [sp]
 800765e:	9a01      	ldr	r2, [sp, #4]
 8007660:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <__ulp+0x48>)
 8007662:	4013      	ands	r3, r2
 8007664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007668:	2b00      	cmp	r3, #0
 800766a:	dc08      	bgt.n	800767e <__ulp+0x26>
 800766c:	425b      	negs	r3, r3
 800766e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007672:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007676:	da04      	bge.n	8007682 <__ulp+0x2a>
 8007678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800767c:	4113      	asrs	r3, r2
 800767e:	2200      	movs	r2, #0
 8007680:	e008      	b.n	8007694 <__ulp+0x3c>
 8007682:	f1a2 0314 	sub.w	r3, r2, #20
 8007686:	2b1e      	cmp	r3, #30
 8007688:	bfda      	itte	le
 800768a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800768e:	40da      	lsrle	r2, r3
 8007690:	2201      	movgt	r2, #1
 8007692:	2300      	movs	r3, #0
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	ec41 0b10 	vmov	d0, r0, r1
 800769c:	b002      	add	sp, #8
 800769e:	4770      	bx	lr
 80076a0:	7ff00000 	.word	0x7ff00000

080076a4 <__b2d>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	6906      	ldr	r6, [r0, #16]
 80076aa:	f100 0814 	add.w	r8, r0, #20
 80076ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80076b2:	1f37      	subs	r7, r6, #4
 80076b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7ff fd4b 	bl	8007154 <__hi0bits>
 80076be:	f1c0 0320 	rsb	r3, r0, #32
 80076c2:	280a      	cmp	r0, #10
 80076c4:	600b      	str	r3, [r1, #0]
 80076c6:	491b      	ldr	r1, [pc, #108]	@ (8007734 <__b2d+0x90>)
 80076c8:	dc15      	bgt.n	80076f6 <__b2d+0x52>
 80076ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80076d2:	45b8      	cmp	r8, r7
 80076d4:	ea43 0501 	orr.w	r5, r3, r1
 80076d8:	bf34      	ite	cc
 80076da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076de:	2300      	movcs	r3, #0
 80076e0:	3015      	adds	r0, #21
 80076e2:	fa02 f000 	lsl.w	r0, r2, r0
 80076e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80076ea:	4303      	orrs	r3, r0
 80076ec:	461c      	mov	r4, r3
 80076ee:	ec45 4b10 	vmov	d0, r4, r5
 80076f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f6:	45b8      	cmp	r8, r7
 80076f8:	bf3a      	itte	cc
 80076fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8007702:	2300      	movcs	r3, #0
 8007704:	380b      	subs	r0, #11
 8007706:	d012      	beq.n	800772e <__b2d+0x8a>
 8007708:	f1c0 0120 	rsb	r1, r0, #32
 800770c:	fa23 f401 	lsr.w	r4, r3, r1
 8007710:	4082      	lsls	r2, r0
 8007712:	4322      	orrs	r2, r4
 8007714:	4547      	cmp	r7, r8
 8007716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800771a:	bf8c      	ite	hi
 800771c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007720:	2200      	movls	r2, #0
 8007722:	4083      	lsls	r3, r0
 8007724:	40ca      	lsrs	r2, r1
 8007726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800772a:	4313      	orrs	r3, r2
 800772c:	e7de      	b.n	80076ec <__b2d+0x48>
 800772e:	ea42 0501 	orr.w	r5, r2, r1
 8007732:	e7db      	b.n	80076ec <__b2d+0x48>
 8007734:	3ff00000 	.word	0x3ff00000

08007738 <__d2b>:
 8007738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800773c:	460f      	mov	r7, r1
 800773e:	2101      	movs	r1, #1
 8007740:	ec59 8b10 	vmov	r8, r9, d0
 8007744:	4616      	mov	r6, r2
 8007746:	f7ff fc13 	bl	8006f70 <_Balloc>
 800774a:	4604      	mov	r4, r0
 800774c:	b930      	cbnz	r0, 800775c <__d2b+0x24>
 800774e:	4602      	mov	r2, r0
 8007750:	4b23      	ldr	r3, [pc, #140]	@ (80077e0 <__d2b+0xa8>)
 8007752:	4824      	ldr	r0, [pc, #144]	@ (80077e4 <__d2b+0xac>)
 8007754:	f240 310f 	movw	r1, #783	@ 0x30f
 8007758:	f001 f996 	bl	8008a88 <__assert_func>
 800775c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007764:	b10d      	cbz	r5, 800776a <__d2b+0x32>
 8007766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f1b8 0300 	subs.w	r3, r8, #0
 8007770:	d023      	beq.n	80077ba <__d2b+0x82>
 8007772:	4668      	mov	r0, sp
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	f7ff fd0c 	bl	8007192 <__lo0bits>
 800777a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800777e:	b1d0      	cbz	r0, 80077b6 <__d2b+0x7e>
 8007780:	f1c0 0320 	rsb	r3, r0, #32
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	430b      	orrs	r3, r1
 800778a:	40c2      	lsrs	r2, r0
 800778c:	6163      	str	r3, [r4, #20]
 800778e:	9201      	str	r2, [sp, #4]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	61a3      	str	r3, [r4, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2201      	moveq	r2, #1
 800779a:	2202      	movne	r2, #2
 800779c:	6122      	str	r2, [r4, #16]
 800779e:	b1a5      	cbz	r5, 80077ca <__d2b+0x92>
 80077a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077a4:	4405      	add	r5, r0
 80077a6:	603d      	str	r5, [r7, #0]
 80077a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	b003      	add	sp, #12
 80077b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b6:	6161      	str	r1, [r4, #20]
 80077b8:	e7ea      	b.n	8007790 <__d2b+0x58>
 80077ba:	a801      	add	r0, sp, #4
 80077bc:	f7ff fce9 	bl	8007192 <__lo0bits>
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	3020      	adds	r0, #32
 80077c6:	2201      	movs	r2, #1
 80077c8:	e7e8      	b.n	800779c <__d2b+0x64>
 80077ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077d2:	6038      	str	r0, [r7, #0]
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f7ff fcbd 	bl	8007154 <__hi0bits>
 80077da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077de:	e7e5      	b.n	80077ac <__d2b+0x74>
 80077e0:	08009909 	.word	0x08009909
 80077e4:	0800991a 	.word	0x0800991a

080077e8 <__ratio>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	b085      	sub	sp, #20
 80077ee:	e9cd 1000 	strd	r1, r0, [sp]
 80077f2:	a902      	add	r1, sp, #8
 80077f4:	f7ff ff56 	bl	80076a4 <__b2d>
 80077f8:	9800      	ldr	r0, [sp, #0]
 80077fa:	a903      	add	r1, sp, #12
 80077fc:	ec55 4b10 	vmov	r4, r5, d0
 8007800:	f7ff ff50 	bl	80076a4 <__b2d>
 8007804:	9b01      	ldr	r3, [sp, #4]
 8007806:	6919      	ldr	r1, [r3, #16]
 8007808:	9b00      	ldr	r3, [sp, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	1ac9      	subs	r1, r1, r3
 800780e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	ec5b ab10 	vmov	sl, fp, d0
 8007818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfce      	itee	gt
 8007820:	462a      	movgt	r2, r5
 8007822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007826:	465a      	movle	r2, fp
 8007828:	462f      	mov	r7, r5
 800782a:	46d9      	mov	r9, fp
 800782c:	bfcc      	ite	gt
 800782e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007836:	464b      	mov	r3, r9
 8007838:	4652      	mov	r2, sl
 800783a:	4620      	mov	r0, r4
 800783c:	4639      	mov	r1, r7
 800783e:	f7f9 f825 	bl	800088c <__aeabi_ddiv>
 8007842:	ec41 0b10 	vmov	d0, r0, r1
 8007846:	b005      	add	sp, #20
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800784c <__copybits>:
 800784c:	3901      	subs	r1, #1
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	1149      	asrs	r1, r1, #5
 8007852:	6914      	ldr	r4, [r2, #16]
 8007854:	3101      	adds	r1, #1
 8007856:	f102 0314 	add.w	r3, r2, #20
 800785a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800785e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007862:	1f05      	subs	r5, r0, #4
 8007864:	42a3      	cmp	r3, r4
 8007866:	d30c      	bcc.n	8007882 <__copybits+0x36>
 8007868:	1aa3      	subs	r3, r4, r2
 800786a:	3b11      	subs	r3, #17
 800786c:	f023 0303 	bic.w	r3, r3, #3
 8007870:	3211      	adds	r2, #17
 8007872:	42a2      	cmp	r2, r4
 8007874:	bf88      	it	hi
 8007876:	2300      	movhi	r3, #0
 8007878:	4418      	add	r0, r3
 800787a:	2300      	movs	r3, #0
 800787c:	4288      	cmp	r0, r1
 800787e:	d305      	bcc.n	800788c <__copybits+0x40>
 8007880:	bd70      	pop	{r4, r5, r6, pc}
 8007882:	f853 6b04 	ldr.w	r6, [r3], #4
 8007886:	f845 6f04 	str.w	r6, [r5, #4]!
 800788a:	e7eb      	b.n	8007864 <__copybits+0x18>
 800788c:	f840 3b04 	str.w	r3, [r0], #4
 8007890:	e7f4      	b.n	800787c <__copybits+0x30>

08007892 <__any_on>:
 8007892:	f100 0214 	add.w	r2, r0, #20
 8007896:	6900      	ldr	r0, [r0, #16]
 8007898:	114b      	asrs	r3, r1, #5
 800789a:	4298      	cmp	r0, r3
 800789c:	b510      	push	{r4, lr}
 800789e:	db11      	blt.n	80078c4 <__any_on+0x32>
 80078a0:	dd0a      	ble.n	80078b8 <__any_on+0x26>
 80078a2:	f011 011f 	ands.w	r1, r1, #31
 80078a6:	d007      	beq.n	80078b8 <__any_on+0x26>
 80078a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078ac:	fa24 f001 	lsr.w	r0, r4, r1
 80078b0:	fa00 f101 	lsl.w	r1, r0, r1
 80078b4:	428c      	cmp	r4, r1
 80078b6:	d10b      	bne.n	80078d0 <__any_on+0x3e>
 80078b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078bc:	4293      	cmp	r3, r2
 80078be:	d803      	bhi.n	80078c8 <__any_on+0x36>
 80078c0:	2000      	movs	r0, #0
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	4603      	mov	r3, r0
 80078c6:	e7f7      	b.n	80078b8 <__any_on+0x26>
 80078c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d0f5      	beq.n	80078bc <__any_on+0x2a>
 80078d0:	2001      	movs	r0, #1
 80078d2:	e7f6      	b.n	80078c2 <__any_on+0x30>

080078d4 <sulp>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	ec45 4b10 	vmov	d0, r4, r5
 80078de:	4616      	mov	r6, r2
 80078e0:	f7ff feba 	bl	8007658 <__ulp>
 80078e4:	ec51 0b10 	vmov	r0, r1, d0
 80078e8:	b17e      	cbz	r6, 800790a <sulp+0x36>
 80078ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd09      	ble.n	800790a <sulp+0x36>
 80078f6:	051b      	lsls	r3, r3, #20
 80078f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078fc:	2400      	movs	r4, #0
 80078fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	f7f8 fe97 	bl	8000638 <__aeabi_dmul>
 800790a:	ec41 0b10 	vmov	d0, r0, r1
 800790e:	bd70      	pop	{r4, r5, r6, pc}

08007910 <_strtod_l>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	b09f      	sub	sp, #124	@ 0x7c
 8007916:	460c      	mov	r4, r1
 8007918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800791a:	2200      	movs	r2, #0
 800791c:	921a      	str	r2, [sp, #104]	@ 0x68
 800791e:	9005      	str	r0, [sp, #20]
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	f04f 0b00 	mov.w	fp, #0
 8007928:	460a      	mov	r2, r1
 800792a:	9219      	str	r2, [sp, #100]	@ 0x64
 800792c:	7811      	ldrb	r1, [r2, #0]
 800792e:	292b      	cmp	r1, #43	@ 0x2b
 8007930:	d04a      	beq.n	80079c8 <_strtod_l+0xb8>
 8007932:	d838      	bhi.n	80079a6 <_strtod_l+0x96>
 8007934:	290d      	cmp	r1, #13
 8007936:	d832      	bhi.n	800799e <_strtod_l+0x8e>
 8007938:	2908      	cmp	r1, #8
 800793a:	d832      	bhi.n	80079a2 <_strtod_l+0x92>
 800793c:	2900      	cmp	r1, #0
 800793e:	d03b      	beq.n	80079b8 <_strtod_l+0xa8>
 8007940:	2200      	movs	r2, #0
 8007942:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007946:	782a      	ldrb	r2, [r5, #0]
 8007948:	2a30      	cmp	r2, #48	@ 0x30
 800794a:	f040 80b3 	bne.w	8007ab4 <_strtod_l+0x1a4>
 800794e:	786a      	ldrb	r2, [r5, #1]
 8007950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007954:	2a58      	cmp	r2, #88	@ 0x58
 8007956:	d16e      	bne.n	8007a36 <_strtod_l+0x126>
 8007958:	9302      	str	r3, [sp, #8]
 800795a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4a8e      	ldr	r2, [pc, #568]	@ (8007b9c <_strtod_l+0x28c>)
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007968:	a919      	add	r1, sp, #100	@ 0x64
 800796a:	f001 f927 	bl	8008bbc <__gethex>
 800796e:	f010 060f 	ands.w	r6, r0, #15
 8007972:	4604      	mov	r4, r0
 8007974:	d005      	beq.n	8007982 <_strtod_l+0x72>
 8007976:	2e06      	cmp	r6, #6
 8007978:	d128      	bne.n	80079cc <_strtod_l+0xbc>
 800797a:	3501      	adds	r5, #1
 800797c:	2300      	movs	r3, #0
 800797e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 858e 	bne.w	80084a6 <_strtod_l+0xb96>
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	b1cb      	cbz	r3, 80079c2 <_strtod_l+0xb2>
 800798e:	4652      	mov	r2, sl
 8007990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007994:	ec43 2b10 	vmov	d0, r2, r3
 8007998:	b01f      	add	sp, #124	@ 0x7c
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	2920      	cmp	r1, #32
 80079a0:	d1ce      	bne.n	8007940 <_strtod_l+0x30>
 80079a2:	3201      	adds	r2, #1
 80079a4:	e7c1      	b.n	800792a <_strtod_l+0x1a>
 80079a6:	292d      	cmp	r1, #45	@ 0x2d
 80079a8:	d1ca      	bne.n	8007940 <_strtod_l+0x30>
 80079aa:	2101      	movs	r1, #1
 80079ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80079ae:	1c51      	adds	r1, r2, #1
 80079b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80079b2:	7852      	ldrb	r2, [r2, #1]
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d1c5      	bne.n	8007944 <_strtod_l+0x34>
 80079b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8570 	bne.w	80084a2 <_strtod_l+0xb92>
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	e7e5      	b.n	8007994 <_strtod_l+0x84>
 80079c8:	2100      	movs	r1, #0
 80079ca:	e7ef      	b.n	80079ac <_strtod_l+0x9c>
 80079cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80079ce:	b13a      	cbz	r2, 80079e0 <_strtod_l+0xd0>
 80079d0:	2135      	movs	r1, #53	@ 0x35
 80079d2:	a81c      	add	r0, sp, #112	@ 0x70
 80079d4:	f7ff ff3a 	bl	800784c <__copybits>
 80079d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	f7ff fb08 	bl	8006ff0 <_Bfree>
 80079e0:	3e01      	subs	r6, #1
 80079e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079e4:	2e04      	cmp	r6, #4
 80079e6:	d806      	bhi.n	80079f6 <_strtod_l+0xe6>
 80079e8:	e8df f006 	tbb	[pc, r6]
 80079ec:	201d0314 	.word	0x201d0314
 80079f0:	14          	.byte	0x14
 80079f1:	00          	.byte	0x00
 80079f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079f6:	05e1      	lsls	r1, r4, #23
 80079f8:	bf48      	it	mi
 80079fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a02:	0d1b      	lsrs	r3, r3, #20
 8007a04:	051b      	lsls	r3, r3, #20
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1bb      	bne.n	8007982 <_strtod_l+0x72>
 8007a0a:	f7fe fb2f 	bl	800606c <__errno>
 8007a0e:	2322      	movs	r3, #34	@ 0x22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	e7b6      	b.n	8007982 <_strtod_l+0x72>
 8007a14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007a18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007a1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a24:	e7e7      	b.n	80079f6 <_strtod_l+0xe6>
 8007a26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007ba4 <_strtod_l+0x294>
 8007a2a:	e7e4      	b.n	80079f6 <_strtod_l+0xe6>
 8007a2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007a30:	f04f 3aff 	mov.w	sl, #4294967295
 8007a34:	e7df      	b.n	80079f6 <_strtod_l+0xe6>
 8007a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b30      	cmp	r3, #48	@ 0x30
 8007a40:	d0f9      	beq.n	8007a36 <_strtod_l+0x126>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d09d      	beq.n	8007982 <_strtod_l+0x72>
 8007a46:	2301      	movs	r3, #1
 8007a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9308      	str	r3, [sp, #32]
 8007a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a54:	461f      	mov	r7, r3
 8007a56:	220a      	movs	r2, #10
 8007a58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a5a:	7805      	ldrb	r5, [r0, #0]
 8007a5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a60:	b2d9      	uxtb	r1, r3
 8007a62:	2909      	cmp	r1, #9
 8007a64:	d928      	bls.n	8007ab8 <_strtod_l+0x1a8>
 8007a66:	494e      	ldr	r1, [pc, #312]	@ (8007ba0 <_strtod_l+0x290>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f000 ffd5 	bl	8008a18 <strncmp>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d032      	beq.n	8007ad8 <_strtod_l+0x1c8>
 8007a72:	2000      	movs	r0, #0
 8007a74:	462a      	mov	r2, r5
 8007a76:	4681      	mov	r9, r0
 8007a78:	463d      	mov	r5, r7
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2a65      	cmp	r2, #101	@ 0x65
 8007a7e:	d001      	beq.n	8007a84 <_strtod_l+0x174>
 8007a80:	2a45      	cmp	r2, #69	@ 0x45
 8007a82:	d114      	bne.n	8007aae <_strtod_l+0x19e>
 8007a84:	b91d      	cbnz	r5, 8007a8e <_strtod_l+0x17e>
 8007a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a88:	4302      	orrs	r2, r0
 8007a8a:	d095      	beq.n	80079b8 <_strtod_l+0xa8>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a90:	1c62      	adds	r2, r4, #1
 8007a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a94:	7862      	ldrb	r2, [r4, #1]
 8007a96:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a98:	d077      	beq.n	8007b8a <_strtod_l+0x27a>
 8007a9a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a9c:	d07b      	beq.n	8007b96 <_strtod_l+0x286>
 8007a9e:	f04f 0c00 	mov.w	ip, #0
 8007aa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007aa6:	2909      	cmp	r1, #9
 8007aa8:	f240 8082 	bls.w	8007bb0 <_strtod_l+0x2a0>
 8007aac:	9419      	str	r4, [sp, #100]	@ 0x64
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	e0a2      	b.n	8007bfa <_strtod_l+0x2ea>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e7c7      	b.n	8007a48 <_strtod_l+0x138>
 8007ab8:	2f08      	cmp	r7, #8
 8007aba:	bfd5      	itete	le
 8007abc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007abe:	9908      	ldrgt	r1, [sp, #32]
 8007ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ac4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ac8:	f100 0001 	add.w	r0, r0, #1
 8007acc:	bfd4      	ite	le
 8007ace:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007ad0:	9308      	strgt	r3, [sp, #32]
 8007ad2:	3701      	adds	r7, #1
 8007ad4:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ad6:	e7bf      	b.n	8007a58 <_strtod_l+0x148>
 8007ad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ade:	785a      	ldrb	r2, [r3, #1]
 8007ae0:	b37f      	cbz	r7, 8007b42 <_strtod_l+0x232>
 8007ae2:	4681      	mov	r9, r0
 8007ae4:	463d      	mov	r5, r7
 8007ae6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d912      	bls.n	8007b14 <_strtod_l+0x204>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e7c4      	b.n	8007a7c <_strtod_l+0x16c>
 8007af2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007af8:	785a      	ldrb	r2, [r3, #1]
 8007afa:	3001      	adds	r0, #1
 8007afc:	2a30      	cmp	r2, #48	@ 0x30
 8007afe:	d0f8      	beq.n	8007af2 <_strtod_l+0x1e2>
 8007b00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	f200 84d3 	bhi.w	80084b0 <_strtod_l+0xba0>
 8007b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b0e:	4681      	mov	r9, r0
 8007b10:	2000      	movs	r0, #0
 8007b12:	4605      	mov	r5, r0
 8007b14:	3a30      	subs	r2, #48	@ 0x30
 8007b16:	f100 0301 	add.w	r3, r0, #1
 8007b1a:	d02a      	beq.n	8007b72 <_strtod_l+0x262>
 8007b1c:	4499      	add	r9, r3
 8007b1e:	eb00 0c05 	add.w	ip, r0, r5
 8007b22:	462b      	mov	r3, r5
 8007b24:	210a      	movs	r1, #10
 8007b26:	4563      	cmp	r3, ip
 8007b28:	d10d      	bne.n	8007b46 <_strtod_l+0x236>
 8007b2a:	1c69      	adds	r1, r5, #1
 8007b2c:	4401      	add	r1, r0
 8007b2e:	4428      	add	r0, r5
 8007b30:	2808      	cmp	r0, #8
 8007b32:	dc16      	bgt.n	8007b62 <_strtod_l+0x252>
 8007b34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b36:	230a      	movs	r3, #10
 8007b38:	fb03 2300 	mla	r3, r3, r0, r2
 8007b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e018      	b.n	8007b74 <_strtod_l+0x264>
 8007b42:	4638      	mov	r0, r7
 8007b44:	e7da      	b.n	8007afc <_strtod_l+0x1ec>
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	f103 0301 	add.w	r3, r3, #1
 8007b4c:	dc03      	bgt.n	8007b56 <_strtod_l+0x246>
 8007b4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b50:	434e      	muls	r6, r1
 8007b52:	960a      	str	r6, [sp, #40]	@ 0x28
 8007b54:	e7e7      	b.n	8007b26 <_strtod_l+0x216>
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	bfde      	ittt	le
 8007b5a:	9e08      	ldrle	r6, [sp, #32]
 8007b5c:	434e      	mulle	r6, r1
 8007b5e:	9608      	strle	r6, [sp, #32]
 8007b60:	e7e1      	b.n	8007b26 <_strtod_l+0x216>
 8007b62:	280f      	cmp	r0, #15
 8007b64:	dceb      	bgt.n	8007b3e <_strtod_l+0x22e>
 8007b66:	9808      	ldr	r0, [sp, #32]
 8007b68:	230a      	movs	r3, #10
 8007b6a:	fb03 2300 	mla	r3, r3, r0, r2
 8007b6e:	9308      	str	r3, [sp, #32]
 8007b70:	e7e5      	b.n	8007b3e <_strtod_l+0x22e>
 8007b72:	4629      	mov	r1, r5
 8007b74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b76:	1c50      	adds	r0, r2, #1
 8007b78:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b7a:	7852      	ldrb	r2, [r2, #1]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	460d      	mov	r5, r1
 8007b80:	e7b1      	b.n	8007ae6 <_strtod_l+0x1d6>
 8007b82:	f04f 0900 	mov.w	r9, #0
 8007b86:	2301      	movs	r3, #1
 8007b88:	e77d      	b.n	8007a86 <_strtod_l+0x176>
 8007b8a:	f04f 0c00 	mov.w	ip, #0
 8007b8e:	1ca2      	adds	r2, r4, #2
 8007b90:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b92:	78a2      	ldrb	r2, [r4, #2]
 8007b94:	e785      	b.n	8007aa2 <_strtod_l+0x192>
 8007b96:	f04f 0c01 	mov.w	ip, #1
 8007b9a:	e7f8      	b.n	8007b8e <_strtod_l+0x27e>
 8007b9c:	08009a88 	.word	0x08009a88
 8007ba0:	08009a70 	.word	0x08009a70
 8007ba4:	7ff00000 	.word	0x7ff00000
 8007ba8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007baa:	1c51      	adds	r1, r2, #1
 8007bac:	9119      	str	r1, [sp, #100]	@ 0x64
 8007bae:	7852      	ldrb	r2, [r2, #1]
 8007bb0:	2a30      	cmp	r2, #48	@ 0x30
 8007bb2:	d0f9      	beq.n	8007ba8 <_strtod_l+0x298>
 8007bb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007bb8:	2908      	cmp	r1, #8
 8007bba:	f63f af78 	bhi.w	8007aae <_strtod_l+0x19e>
 8007bbe:	3a30      	subs	r2, #48	@ 0x30
 8007bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007bc6:	f04f 080a 	mov.w	r8, #10
 8007bca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bcc:	1c56      	adds	r6, r2, #1
 8007bce:	9619      	str	r6, [sp, #100]	@ 0x64
 8007bd0:	7852      	ldrb	r2, [r2, #1]
 8007bd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007bd6:	f1be 0f09 	cmp.w	lr, #9
 8007bda:	d939      	bls.n	8007c50 <_strtod_l+0x340>
 8007bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007bde:	1a76      	subs	r6, r6, r1
 8007be0:	2e08      	cmp	r6, #8
 8007be2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007be6:	dc03      	bgt.n	8007bf0 <_strtod_l+0x2e0>
 8007be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bea:	4588      	cmp	r8, r1
 8007bec:	bfa8      	it	ge
 8007bee:	4688      	movge	r8, r1
 8007bf0:	f1bc 0f00 	cmp.w	ip, #0
 8007bf4:	d001      	beq.n	8007bfa <_strtod_l+0x2ea>
 8007bf6:	f1c8 0800 	rsb	r8, r8, #0
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	d14e      	bne.n	8007c9c <_strtod_l+0x38c>
 8007bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c00:	4308      	orrs	r0, r1
 8007c02:	f47f aebe 	bne.w	8007982 <_strtod_l+0x72>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f aed6 	bne.w	80079b8 <_strtod_l+0xa8>
 8007c0c:	2a69      	cmp	r2, #105	@ 0x69
 8007c0e:	d028      	beq.n	8007c62 <_strtod_l+0x352>
 8007c10:	dc25      	bgt.n	8007c5e <_strtod_l+0x34e>
 8007c12:	2a49      	cmp	r2, #73	@ 0x49
 8007c14:	d025      	beq.n	8007c62 <_strtod_l+0x352>
 8007c16:	2a4e      	cmp	r2, #78	@ 0x4e
 8007c18:	f47f aece 	bne.w	80079b8 <_strtod_l+0xa8>
 8007c1c:	499b      	ldr	r1, [pc, #620]	@ (8007e8c <_strtod_l+0x57c>)
 8007c1e:	a819      	add	r0, sp, #100	@ 0x64
 8007c20:	f001 f9ee 	bl	8009000 <__match>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f43f aec7 	beq.w	80079b8 <_strtod_l+0xa8>
 8007c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b28      	cmp	r3, #40	@ 0x28
 8007c30:	d12e      	bne.n	8007c90 <_strtod_l+0x380>
 8007c32:	4997      	ldr	r1, [pc, #604]	@ (8007e90 <_strtod_l+0x580>)
 8007c34:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c36:	a819      	add	r0, sp, #100	@ 0x64
 8007c38:	f001 f9f6 	bl	8009028 <__hexnan>
 8007c3c:	2805      	cmp	r0, #5
 8007c3e:	d127      	bne.n	8007c90 <_strtod_l+0x380>
 8007c40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c4e:	e698      	b.n	8007982 <_strtod_l+0x72>
 8007c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c52:	fb08 2101 	mla	r1, r8, r1, r2
 8007c56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c5c:	e7b5      	b.n	8007bca <_strtod_l+0x2ba>
 8007c5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c60:	e7da      	b.n	8007c18 <_strtod_l+0x308>
 8007c62:	498c      	ldr	r1, [pc, #560]	@ (8007e94 <_strtod_l+0x584>)
 8007c64:	a819      	add	r0, sp, #100	@ 0x64
 8007c66:	f001 f9cb 	bl	8009000 <__match>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f aea4 	beq.w	80079b8 <_strtod_l+0xa8>
 8007c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c72:	4989      	ldr	r1, [pc, #548]	@ (8007e98 <_strtod_l+0x588>)
 8007c74:	3b01      	subs	r3, #1
 8007c76:	a819      	add	r0, sp, #100	@ 0x64
 8007c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c7a:	f001 f9c1 	bl	8009000 <__match>
 8007c7e:	b910      	cbnz	r0, 8007c86 <_strtod_l+0x376>
 8007c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c82:	3301      	adds	r3, #1
 8007c84:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ea8 <_strtod_l+0x598>
 8007c8a:	f04f 0a00 	mov.w	sl, #0
 8007c8e:	e678      	b.n	8007982 <_strtod_l+0x72>
 8007c90:	4882      	ldr	r0, [pc, #520]	@ (8007e9c <_strtod_l+0x58c>)
 8007c92:	f000 fef1 	bl	8008a78 <nan>
 8007c96:	ec5b ab10 	vmov	sl, fp, d0
 8007c9a:	e672      	b.n	8007982 <_strtod_l+0x72>
 8007c9c:	eba8 0309 	sub.w	r3, r8, r9
 8007ca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	bf08      	it	eq
 8007ca8:	462f      	moveq	r7, r5
 8007caa:	2d10      	cmp	r5, #16
 8007cac:	462c      	mov	r4, r5
 8007cae:	bfa8      	it	ge
 8007cb0:	2410      	movge	r4, #16
 8007cb2:	f7f8 fc47 	bl	8000544 <__aeabi_ui2d>
 8007cb6:	2d09      	cmp	r5, #9
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	dc13      	bgt.n	8007ce6 <_strtod_l+0x3d6>
 8007cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f43f ae5e 	beq.w	8007982 <_strtod_l+0x72>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	dd78      	ble.n	8007dbc <_strtod_l+0x4ac>
 8007cca:	2b16      	cmp	r3, #22
 8007ccc:	dc5f      	bgt.n	8007d8e <_strtod_l+0x47e>
 8007cce:	4974      	ldr	r1, [pc, #464]	@ (8007ea0 <_strtod_l+0x590>)
 8007cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd8:	4652      	mov	r2, sl
 8007cda:	465b      	mov	r3, fp
 8007cdc:	f7f8 fcac 	bl	8000638 <__aeabi_dmul>
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	e64d      	b.n	8007982 <_strtod_l+0x72>
 8007ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8007ea0 <_strtod_l+0x590>)
 8007ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cf0:	f7f8 fca2 	bl	8000638 <__aeabi_dmul>
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	9808      	ldr	r0, [sp, #32]
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	f7f8 fc23 	bl	8000544 <__aeabi_ui2d>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fae1 	bl	80002cc <__adddf3>
 8007d0a:	2d0f      	cmp	r5, #15
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	468b      	mov	fp, r1
 8007d10:	ddd5      	ble.n	8007cbe <_strtod_l+0x3ae>
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	1b2c      	subs	r4, r5, r4
 8007d16:	441c      	add	r4, r3
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	f340 8096 	ble.w	8007e4a <_strtod_l+0x53a>
 8007d1e:	f014 030f 	ands.w	r3, r4, #15
 8007d22:	d00a      	beq.n	8007d3a <_strtod_l+0x42a>
 8007d24:	495e      	ldr	r1, [pc, #376]	@ (8007ea0 <_strtod_l+0x590>)
 8007d26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d32:	f7f8 fc81 	bl	8000638 <__aeabi_dmul>
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	f034 040f 	bics.w	r4, r4, #15
 8007d3e:	d073      	beq.n	8007e28 <_strtod_l+0x518>
 8007d40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d44:	dd48      	ble.n	8007dd8 <_strtod_l+0x4c8>
 8007d46:	2400      	movs	r4, #0
 8007d48:	46a0      	mov	r8, r4
 8007d4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d4c:	46a1      	mov	r9, r4
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ea8 <_strtod_l+0x598>
 8007d54:	2322      	movs	r3, #34	@ 0x22
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	f04f 0a00 	mov.w	sl, #0
 8007d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f43f ae0f 	beq.w	8007982 <_strtod_l+0x72>
 8007d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d66:	9805      	ldr	r0, [sp, #20]
 8007d68:	f7ff f942 	bl	8006ff0 <_Bfree>
 8007d6c:	9805      	ldr	r0, [sp, #20]
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7ff f93e 	bl	8006ff0 <_Bfree>
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	4641      	mov	r1, r8
 8007d78:	f7ff f93a 	bl	8006ff0 <_Bfree>
 8007d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d7e:	9805      	ldr	r0, [sp, #20]
 8007d80:	f7ff f936 	bl	8006ff0 <_Bfree>
 8007d84:	9805      	ldr	r0, [sp, #20]
 8007d86:	4621      	mov	r1, r4
 8007d88:	f7ff f932 	bl	8006ff0 <_Bfree>
 8007d8c:	e5f9      	b.n	8007982 <_strtod_l+0x72>
 8007d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d94:	4293      	cmp	r3, r2
 8007d96:	dbbc      	blt.n	8007d12 <_strtod_l+0x402>
 8007d98:	4c41      	ldr	r4, [pc, #260]	@ (8007ea0 <_strtod_l+0x590>)
 8007d9a:	f1c5 050f 	rsb	r5, r5, #15
 8007d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007da2:	4652      	mov	r2, sl
 8007da4:	465b      	mov	r3, fp
 8007da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007daa:	f7f8 fc45 	bl	8000638 <__aeabi_dmul>
 8007dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db0:	1b5d      	subs	r5, r3, r5
 8007db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dba:	e78f      	b.n	8007cdc <_strtod_l+0x3cc>
 8007dbc:	3316      	adds	r3, #22
 8007dbe:	dba8      	blt.n	8007d12 <_strtod_l+0x402>
 8007dc0:	4b37      	ldr	r3, [pc, #220]	@ (8007ea0 <_strtod_l+0x590>)
 8007dc2:	eba9 0808 	sub.w	r8, r9, r8
 8007dc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007dca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007dce:	4650      	mov	r0, sl
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	f7f8 fd5b 	bl	800088c <__aeabi_ddiv>
 8007dd6:	e783      	b.n	8007ce0 <_strtod_l+0x3d0>
 8007dd8:	4b32      	ldr	r3, [pc, #200]	@ (8007ea4 <_strtod_l+0x594>)
 8007dda:	9308      	str	r3, [sp, #32]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	1124      	asrs	r4, r4, #4
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	461e      	mov	r6, r3
 8007de6:	2c01      	cmp	r4, #1
 8007de8:	dc21      	bgt.n	8007e2e <_strtod_l+0x51e>
 8007dea:	b10b      	cbz	r3, 8007df0 <_strtod_l+0x4e0>
 8007dec:	4682      	mov	sl, r0
 8007dee:	468b      	mov	fp, r1
 8007df0:	492c      	ldr	r1, [pc, #176]	@ (8007ea4 <_strtod_l+0x594>)
 8007df2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007df6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	465b      	mov	r3, fp
 8007dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e02:	f7f8 fc19 	bl	8000638 <__aeabi_dmul>
 8007e06:	4b28      	ldr	r3, [pc, #160]	@ (8007ea8 <_strtod_l+0x598>)
 8007e08:	460a      	mov	r2, r1
 8007e0a:	400b      	ands	r3, r1
 8007e0c:	4927      	ldr	r1, [pc, #156]	@ (8007eac <_strtod_l+0x59c>)
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	4682      	mov	sl, r0
 8007e12:	d898      	bhi.n	8007d46 <_strtod_l+0x436>
 8007e14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf86      	itte	hi
 8007e1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007eb0 <_strtod_l+0x5a0>
 8007e20:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9308      	str	r3, [sp, #32]
 8007e2c:	e07a      	b.n	8007f24 <_strtod_l+0x614>
 8007e2e:	07e2      	lsls	r2, r4, #31
 8007e30:	d505      	bpl.n	8007e3e <_strtod_l+0x52e>
 8007e32:	9b08      	ldr	r3, [sp, #32]
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 fbfe 	bl	8000638 <__aeabi_dmul>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	9a08      	ldr	r2, [sp, #32]
 8007e40:	3208      	adds	r2, #8
 8007e42:	3601      	adds	r6, #1
 8007e44:	1064      	asrs	r4, r4, #1
 8007e46:	9208      	str	r2, [sp, #32]
 8007e48:	e7cd      	b.n	8007de6 <_strtod_l+0x4d6>
 8007e4a:	d0ed      	beq.n	8007e28 <_strtod_l+0x518>
 8007e4c:	4264      	negs	r4, r4
 8007e4e:	f014 020f 	ands.w	r2, r4, #15
 8007e52:	d00a      	beq.n	8007e6a <_strtod_l+0x55a>
 8007e54:	4b12      	ldr	r3, [pc, #72]	@ (8007ea0 <_strtod_l+0x590>)
 8007e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fd13 	bl	800088c <__aeabi_ddiv>
 8007e66:	4682      	mov	sl, r0
 8007e68:	468b      	mov	fp, r1
 8007e6a:	1124      	asrs	r4, r4, #4
 8007e6c:	d0dc      	beq.n	8007e28 <_strtod_l+0x518>
 8007e6e:	2c1f      	cmp	r4, #31
 8007e70:	dd20      	ble.n	8007eb4 <_strtod_l+0x5a4>
 8007e72:	2400      	movs	r4, #0
 8007e74:	46a0      	mov	r8, r4
 8007e76:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e78:	46a1      	mov	r9, r4
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	2322      	movs	r3, #34	@ 0x22
 8007e7e:	f04f 0a00 	mov.w	sl, #0
 8007e82:	f04f 0b00 	mov.w	fp, #0
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e768      	b.n	8007d5c <_strtod_l+0x44c>
 8007e8a:	bf00      	nop
 8007e8c:	08009861 	.word	0x08009861
 8007e90:	08009a74 	.word	0x08009a74
 8007e94:	08009859 	.word	0x08009859
 8007e98:	08009890 	.word	0x08009890
 8007e9c:	08009c1d 	.word	0x08009c1d
 8007ea0:	080099a8 	.word	0x080099a8
 8007ea4:	08009980 	.word	0x08009980
 8007ea8:	7ff00000 	.word	0x7ff00000
 8007eac:	7ca00000 	.word	0x7ca00000
 8007eb0:	7fefffff 	.word	0x7fefffff
 8007eb4:	f014 0310 	ands.w	r3, r4, #16
 8007eb8:	bf18      	it	ne
 8007eba:	236a      	movne	r3, #106	@ 0x6a
 8007ebc:	4ea9      	ldr	r6, [pc, #676]	@ (8008164 <_strtod_l+0x854>)
 8007ebe:	9308      	str	r3, [sp, #32]
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	07e2      	lsls	r2, r4, #31
 8007ec8:	d504      	bpl.n	8007ed4 <_strtod_l+0x5c4>
 8007eca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ece:	f7f8 fbb3 	bl	8000638 <__aeabi_dmul>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	1064      	asrs	r4, r4, #1
 8007ed6:	f106 0608 	add.w	r6, r6, #8
 8007eda:	d1f4      	bne.n	8007ec6 <_strtod_l+0x5b6>
 8007edc:	b10b      	cbz	r3, 8007ee2 <_strtod_l+0x5d2>
 8007ede:	4682      	mov	sl, r0
 8007ee0:	468b      	mov	fp, r1
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	b1b3      	cbz	r3, 8007f14 <_strtod_l+0x604>
 8007ee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	dd0f      	ble.n	8007f14 <_strtod_l+0x604>
 8007ef4:	2b1f      	cmp	r3, #31
 8007ef6:	dd55      	ble.n	8007fa4 <_strtod_l+0x694>
 8007ef8:	2b34      	cmp	r3, #52	@ 0x34
 8007efa:	bfde      	ittt	le
 8007efc:	f04f 33ff 	movle.w	r3, #4294967295
 8007f00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007f04:	4093      	lslle	r3, r2
 8007f06:	f04f 0a00 	mov.w	sl, #0
 8007f0a:	bfcc      	ite	gt
 8007f0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007f10:	ea03 0b01 	andle.w	fp, r3, r1
 8007f14:	2200      	movs	r2, #0
 8007f16:	2300      	movs	r3, #0
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 fdf4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1a6      	bne.n	8007e72 <_strtod_l+0x562>
 8007f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007f2a:	9805      	ldr	r0, [sp, #20]
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	463a      	mov	r2, r7
 8007f30:	f7ff f8c6 	bl	80070c0 <__s2b>
 8007f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f af05 	beq.w	8007d46 <_strtod_l+0x436>
 8007f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	eba9 0308 	sub.w	r3, r9, r8
 8007f44:	bfa8      	it	ge
 8007f46:	2300      	movge	r3, #0
 8007f48:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f50:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f52:	46a0      	mov	r8, r4
 8007f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f56:	9805      	ldr	r0, [sp, #20]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	f7ff f809 	bl	8006f70 <_Balloc>
 8007f5e:	4681      	mov	r9, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f43f aef4 	beq.w	8007d4e <_strtod_l+0x43e>
 8007f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	3202      	adds	r2, #2
 8007f6c:	f103 010c 	add.w	r1, r3, #12
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	300c      	adds	r0, #12
 8007f74:	f000 fd72 	bl	8008a5c <memcpy>
 8007f78:	ec4b ab10 	vmov	d0, sl, fp
 8007f7c:	9805      	ldr	r0, [sp, #20]
 8007f7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f80:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f86:	f7ff fbd7 	bl	8007738 <__d2b>
 8007f8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f aede 	beq.w	8007d4e <_strtod_l+0x43e>
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	2101      	movs	r1, #1
 8007f96:	f7ff f929 	bl	80071ec <__i2b>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	b948      	cbnz	r0, 8007fb2 <_strtod_l+0x6a2>
 8007f9e:	f04f 0800 	mov.w	r8, #0
 8007fa2:	e6d4      	b.n	8007d4e <_strtod_l+0x43e>
 8007fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	ea03 0a0a 	and.w	sl, r3, sl
 8007fb0:	e7b0      	b.n	8007f14 <_strtod_l+0x604>
 8007fb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007fb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	bfab      	itete	ge
 8007fba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007fbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007fbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007fc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007fc2:	bfac      	ite	ge
 8007fc4:	18ef      	addge	r7, r5, r3
 8007fc6:	1b5e      	sublt	r6, r3, r5
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	1aed      	subs	r5, r5, r3
 8007fcc:	4415      	add	r5, r2
 8007fce:	4b66      	ldr	r3, [pc, #408]	@ (8008168 <_strtod_l+0x858>)
 8007fd0:	3d01      	subs	r5, #1
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fd8:	da50      	bge.n	800807c <_strtod_l+0x76c>
 8007fda:	1b5b      	subs	r3, r3, r5
 8007fdc:	2b1f      	cmp	r3, #31
 8007fde:	eba2 0203 	sub.w	r2, r2, r3
 8007fe2:	f04f 0101 	mov.w	r1, #1
 8007fe6:	dc3d      	bgt.n	8008064 <_strtod_l+0x754>
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ff2:	18bd      	adds	r5, r7, r2
 8007ff4:	9b08      	ldr	r3, [sp, #32]
 8007ff6:	42af      	cmp	r7, r5
 8007ff8:	4416      	add	r6, r2
 8007ffa:	441e      	add	r6, r3
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	bfa8      	it	ge
 8008000:	462b      	movge	r3, r5
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfa8      	it	ge
 8008006:	4633      	movge	r3, r6
 8008008:	2b00      	cmp	r3, #0
 800800a:	bfc2      	ittt	gt
 800800c:	1aed      	subgt	r5, r5, r3
 800800e:	1af6      	subgt	r6, r6, r3
 8008010:	1aff      	subgt	r7, r7, r3
 8008012:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd16      	ble.n	8008046 <_strtod_l+0x736>
 8008018:	4641      	mov	r1, r8
 800801a:	9805      	ldr	r0, [sp, #20]
 800801c:	461a      	mov	r2, r3
 800801e:	f7ff f9a5 	bl	800736c <__pow5mult>
 8008022:	4680      	mov	r8, r0
 8008024:	2800      	cmp	r0, #0
 8008026:	d0ba      	beq.n	8007f9e <_strtod_l+0x68e>
 8008028:	4601      	mov	r1, r0
 800802a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800802c:	9805      	ldr	r0, [sp, #20]
 800802e:	f7ff f8f3 	bl	8007218 <__multiply>
 8008032:	900e      	str	r0, [sp, #56]	@ 0x38
 8008034:	2800      	cmp	r0, #0
 8008036:	f43f ae8a 	beq.w	8007d4e <_strtod_l+0x43e>
 800803a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800803c:	9805      	ldr	r0, [sp, #20]
 800803e:	f7fe ffd7 	bl	8006ff0 <_Bfree>
 8008042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008044:	931a      	str	r3, [sp, #104]	@ 0x68
 8008046:	2d00      	cmp	r5, #0
 8008048:	dc1d      	bgt.n	8008086 <_strtod_l+0x776>
 800804a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd23      	ble.n	8008098 <_strtod_l+0x788>
 8008050:	4649      	mov	r1, r9
 8008052:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	f7ff f989 	bl	800736c <__pow5mult>
 800805a:	4681      	mov	r9, r0
 800805c:	b9e0      	cbnz	r0, 8008098 <_strtod_l+0x788>
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	e674      	b.n	8007d4e <_strtod_l+0x43e>
 8008064:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008068:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800806c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008070:	35e2      	adds	r5, #226	@ 0xe2
 8008072:	fa01 f305 	lsl.w	r3, r1, r5
 8008076:	9310      	str	r3, [sp, #64]	@ 0x40
 8008078:	9113      	str	r1, [sp, #76]	@ 0x4c
 800807a:	e7ba      	b.n	8007ff2 <_strtod_l+0x6e2>
 800807c:	2300      	movs	r3, #0
 800807e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008080:	2301      	movs	r3, #1
 8008082:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008084:	e7b5      	b.n	8007ff2 <_strtod_l+0x6e2>
 8008086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008088:	9805      	ldr	r0, [sp, #20]
 800808a:	462a      	mov	r2, r5
 800808c:	f7ff f9c8 	bl	8007420 <__lshift>
 8008090:	901a      	str	r0, [sp, #104]	@ 0x68
 8008092:	2800      	cmp	r0, #0
 8008094:	d1d9      	bne.n	800804a <_strtod_l+0x73a>
 8008096:	e65a      	b.n	8007d4e <_strtod_l+0x43e>
 8008098:	2e00      	cmp	r6, #0
 800809a:	dd07      	ble.n	80080ac <_strtod_l+0x79c>
 800809c:	4649      	mov	r1, r9
 800809e:	9805      	ldr	r0, [sp, #20]
 80080a0:	4632      	mov	r2, r6
 80080a2:	f7ff f9bd 	bl	8007420 <__lshift>
 80080a6:	4681      	mov	r9, r0
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d0d8      	beq.n	800805e <_strtod_l+0x74e>
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	dd08      	ble.n	80080c2 <_strtod_l+0x7b2>
 80080b0:	4641      	mov	r1, r8
 80080b2:	9805      	ldr	r0, [sp, #20]
 80080b4:	463a      	mov	r2, r7
 80080b6:	f7ff f9b3 	bl	8007420 <__lshift>
 80080ba:	4680      	mov	r8, r0
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f ae46 	beq.w	8007d4e <_strtod_l+0x43e>
 80080c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080c4:	9805      	ldr	r0, [sp, #20]
 80080c6:	464a      	mov	r2, r9
 80080c8:	f7ff fa32 	bl	8007530 <__mdiff>
 80080cc:	4604      	mov	r4, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f ae3d 	beq.w	8007d4e <_strtod_l+0x43e>
 80080d4:	68c3      	ldr	r3, [r0, #12]
 80080d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080d8:	2300      	movs	r3, #0
 80080da:	60c3      	str	r3, [r0, #12]
 80080dc:	4641      	mov	r1, r8
 80080de:	f7ff fa0b 	bl	80074f8 <__mcmp>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	da46      	bge.n	8008174 <_strtod_l+0x864>
 80080e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080e8:	ea53 030a 	orrs.w	r3, r3, sl
 80080ec:	d16c      	bne.n	80081c8 <_strtod_l+0x8b8>
 80080ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d168      	bne.n	80081c8 <_strtod_l+0x8b8>
 80080f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080fa:	0d1b      	lsrs	r3, r3, #20
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008102:	d961      	bls.n	80081c8 <_strtod_l+0x8b8>
 8008104:	6963      	ldr	r3, [r4, #20]
 8008106:	b913      	cbnz	r3, 800810e <_strtod_l+0x7fe>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	2b01      	cmp	r3, #1
 800810c:	dd5c      	ble.n	80081c8 <_strtod_l+0x8b8>
 800810e:	4621      	mov	r1, r4
 8008110:	2201      	movs	r2, #1
 8008112:	9805      	ldr	r0, [sp, #20]
 8008114:	f7ff f984 	bl	8007420 <__lshift>
 8008118:	4641      	mov	r1, r8
 800811a:	4604      	mov	r4, r0
 800811c:	f7ff f9ec 	bl	80074f8 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	dd51      	ble.n	80081c8 <_strtod_l+0x8b8>
 8008124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	0d1b      	lsrs	r3, r3, #20
 800812c:	051b      	lsls	r3, r3, #20
 800812e:	2a00      	cmp	r2, #0
 8008130:	d06b      	beq.n	800820a <_strtod_l+0x8fa>
 8008132:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008136:	d868      	bhi.n	800820a <_strtod_l+0x8fa>
 8008138:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800813c:	f67f ae9d 	bls.w	8007e7a <_strtod_l+0x56a>
 8008140:	4b0a      	ldr	r3, [pc, #40]	@ (800816c <_strtod_l+0x85c>)
 8008142:	4650      	mov	r0, sl
 8008144:	4659      	mov	r1, fp
 8008146:	2200      	movs	r2, #0
 8008148:	f7f8 fa76 	bl	8000638 <__aeabi_dmul>
 800814c:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <_strtod_l+0x860>)
 800814e:	400b      	ands	r3, r1
 8008150:	4682      	mov	sl, r0
 8008152:	468b      	mov	fp, r1
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f ae05 	bne.w	8007d64 <_strtod_l+0x454>
 800815a:	9a05      	ldr	r2, [sp, #20]
 800815c:	2322      	movs	r3, #34	@ 0x22
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e600      	b.n	8007d64 <_strtod_l+0x454>
 8008162:	bf00      	nop
 8008164:	08009aa0 	.word	0x08009aa0
 8008168:	fffffc02 	.word	0xfffffc02
 800816c:	39500000 	.word	0x39500000
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008178:	d165      	bne.n	8008246 <_strtod_l+0x936>
 800817a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800817c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008180:	b35a      	cbz	r2, 80081da <_strtod_l+0x8ca>
 8008182:	4a9f      	ldr	r2, [pc, #636]	@ (8008400 <_strtod_l+0xaf0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d12b      	bne.n	80081e0 <_strtod_l+0x8d0>
 8008188:	9b08      	ldr	r3, [sp, #32]
 800818a:	4651      	mov	r1, sl
 800818c:	b303      	cbz	r3, 80081d0 <_strtod_l+0x8c0>
 800818e:	4b9d      	ldr	r3, [pc, #628]	@ (8008404 <_strtod_l+0xaf4>)
 8008190:	465a      	mov	r2, fp
 8008192:	4013      	ands	r3, r2
 8008194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008198:	f04f 32ff 	mov.w	r2, #4294967295
 800819c:	d81b      	bhi.n	80081d6 <_strtod_l+0x8c6>
 800819e:	0d1b      	lsrs	r3, r3, #20
 80081a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	4299      	cmp	r1, r3
 80081aa:	d119      	bne.n	80081e0 <_strtod_l+0x8d0>
 80081ac:	4b96      	ldr	r3, [pc, #600]	@ (8008408 <_strtod_l+0xaf8>)
 80081ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d102      	bne.n	80081ba <_strtod_l+0x8aa>
 80081b4:	3101      	adds	r1, #1
 80081b6:	f43f adca 	beq.w	8007d4e <_strtod_l+0x43e>
 80081ba:	4b92      	ldr	r3, [pc, #584]	@ (8008404 <_strtod_l+0xaf4>)
 80081bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081be:	401a      	ands	r2, r3
 80081c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80081c4:	f04f 0a00 	mov.w	sl, #0
 80081c8:	9b08      	ldr	r3, [sp, #32]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1b8      	bne.n	8008140 <_strtod_l+0x830>
 80081ce:	e5c9      	b.n	8007d64 <_strtod_l+0x454>
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	e7e8      	b.n	80081a8 <_strtod_l+0x898>
 80081d6:	4613      	mov	r3, r2
 80081d8:	e7e6      	b.n	80081a8 <_strtod_l+0x898>
 80081da:	ea53 030a 	orrs.w	r3, r3, sl
 80081de:	d0a1      	beq.n	8008124 <_strtod_l+0x814>
 80081e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081e2:	b1db      	cbz	r3, 800821c <_strtod_l+0x90c>
 80081e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081e6:	4213      	tst	r3, r2
 80081e8:	d0ee      	beq.n	80081c8 <_strtod_l+0x8b8>
 80081ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ec:	9a08      	ldr	r2, [sp, #32]
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	b1bb      	cbz	r3, 8008224 <_strtod_l+0x914>
 80081f4:	f7ff fb6e 	bl	80078d4 <sulp>
 80081f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081fc:	ec53 2b10 	vmov	r2, r3, d0
 8008200:	f7f8 f864 	bl	80002cc <__adddf3>
 8008204:	4682      	mov	sl, r0
 8008206:	468b      	mov	fp, r1
 8008208:	e7de      	b.n	80081c8 <_strtod_l+0x8b8>
 800820a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800820e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008216:	f04f 3aff 	mov.w	sl, #4294967295
 800821a:	e7d5      	b.n	80081c8 <_strtod_l+0x8b8>
 800821c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800821e:	ea13 0f0a 	tst.w	r3, sl
 8008222:	e7e1      	b.n	80081e8 <_strtod_l+0x8d8>
 8008224:	f7ff fb56 	bl	80078d4 <sulp>
 8008228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800822c:	ec53 2b10 	vmov	r2, r3, d0
 8008230:	f7f8 f84a 	bl	80002c8 <__aeabi_dsub>
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	f7f8 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d0c1      	beq.n	80081c8 <_strtod_l+0x8b8>
 8008244:	e619      	b.n	8007e7a <_strtod_l+0x56a>
 8008246:	4641      	mov	r1, r8
 8008248:	4620      	mov	r0, r4
 800824a:	f7ff facd 	bl	80077e8 <__ratio>
 800824e:	ec57 6b10 	vmov	r6, r7, d0
 8008252:	2200      	movs	r2, #0
 8008254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 fc68 	bl	8000b30 <__aeabi_dcmple>
 8008260:	2800      	cmp	r0, #0
 8008262:	d06f      	beq.n	8008344 <_strtod_l+0xa34>
 8008264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d17a      	bne.n	8008360 <_strtod_l+0xa50>
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d158      	bne.n	8008322 <_strtod_l+0xa12>
 8008270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008276:	2b00      	cmp	r3, #0
 8008278:	d15a      	bne.n	8008330 <_strtod_l+0xa20>
 800827a:	4b64      	ldr	r3, [pc, #400]	@ (800840c <_strtod_l+0xafc>)
 800827c:	2200      	movs	r2, #0
 800827e:	4630      	mov	r0, r6
 8008280:	4639      	mov	r1, r7
 8008282:	f7f8 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d159      	bne.n	800833e <_strtod_l+0xa2e>
 800828a:	4630      	mov	r0, r6
 800828c:	4639      	mov	r1, r7
 800828e:	4b60      	ldr	r3, [pc, #384]	@ (8008410 <_strtod_l+0xb00>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9d1 	bl	8000638 <__aeabi_dmul>
 8008296:	4606      	mov	r6, r0
 8008298:	460f      	mov	r7, r1
 800829a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800829e:	9606      	str	r6, [sp, #24]
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082a6:	4d57      	ldr	r5, [pc, #348]	@ (8008404 <_strtod_l+0xaf4>)
 80082a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ae:	401d      	ands	r5, r3
 80082b0:	4b58      	ldr	r3, [pc, #352]	@ (8008414 <_strtod_l+0xb04>)
 80082b2:	429d      	cmp	r5, r3
 80082b4:	f040 80b2 	bne.w	800841c <_strtod_l+0xb0c>
 80082b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80082be:	ec4b ab10 	vmov	d0, sl, fp
 80082c2:	f7ff f9c9 	bl	8007658 <__ulp>
 80082c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ca:	ec51 0b10 	vmov	r0, r1, d0
 80082ce:	f7f8 f9b3 	bl	8000638 <__aeabi_dmul>
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	f7f7 fff9 	bl	80002cc <__adddf3>
 80082da:	460b      	mov	r3, r1
 80082dc:	4949      	ldr	r1, [pc, #292]	@ (8008404 <_strtod_l+0xaf4>)
 80082de:	4a4e      	ldr	r2, [pc, #312]	@ (8008418 <_strtod_l+0xb08>)
 80082e0:	4019      	ands	r1, r3
 80082e2:	4291      	cmp	r1, r2
 80082e4:	4682      	mov	sl, r0
 80082e6:	d942      	bls.n	800836e <_strtod_l+0xa5e>
 80082e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082ea:	4b47      	ldr	r3, [pc, #284]	@ (8008408 <_strtod_l+0xaf8>)
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d103      	bne.n	80082f8 <_strtod_l+0x9e8>
 80082f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082f2:	3301      	adds	r3, #1
 80082f4:	f43f ad2b 	beq.w	8007d4e <_strtod_l+0x43e>
 80082f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008408 <_strtod_l+0xaf8>
 80082fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008302:	9805      	ldr	r0, [sp, #20]
 8008304:	f7fe fe74 	bl	8006ff0 <_Bfree>
 8008308:	9805      	ldr	r0, [sp, #20]
 800830a:	4649      	mov	r1, r9
 800830c:	f7fe fe70 	bl	8006ff0 <_Bfree>
 8008310:	9805      	ldr	r0, [sp, #20]
 8008312:	4641      	mov	r1, r8
 8008314:	f7fe fe6c 	bl	8006ff0 <_Bfree>
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	4621      	mov	r1, r4
 800831c:	f7fe fe68 	bl	8006ff0 <_Bfree>
 8008320:	e618      	b.n	8007f54 <_strtod_l+0x644>
 8008322:	f1ba 0f01 	cmp.w	sl, #1
 8008326:	d103      	bne.n	8008330 <_strtod_l+0xa20>
 8008328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	f43f ada5 	beq.w	8007e7a <_strtod_l+0x56a>
 8008330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083e0 <_strtod_l+0xad0>
 8008334:	4f35      	ldr	r7, [pc, #212]	@ (800840c <_strtod_l+0xafc>)
 8008336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800833a:	2600      	movs	r6, #0
 800833c:	e7b1      	b.n	80082a2 <_strtod_l+0x992>
 800833e:	4f34      	ldr	r7, [pc, #208]	@ (8008410 <_strtod_l+0xb00>)
 8008340:	2600      	movs	r6, #0
 8008342:	e7aa      	b.n	800829a <_strtod_l+0x98a>
 8008344:	4b32      	ldr	r3, [pc, #200]	@ (8008410 <_strtod_l+0xb00>)
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	2200      	movs	r2, #0
 800834c:	f7f8 f974 	bl	8000638 <__aeabi_dmul>
 8008350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d09f      	beq.n	800829a <_strtod_l+0x98a>
 800835a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800835e:	e7a0      	b.n	80082a2 <_strtod_l+0x992>
 8008360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083e8 <_strtod_l+0xad8>
 8008364:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008368:	ec57 6b17 	vmov	r6, r7, d7
 800836c:	e799      	b.n	80082a2 <_strtod_l+0x992>
 800836e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1c1      	bne.n	8008300 <_strtod_l+0x9f0>
 800837c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008380:	0d1b      	lsrs	r3, r3, #20
 8008382:	051b      	lsls	r3, r3, #20
 8008384:	429d      	cmp	r5, r3
 8008386:	d1bb      	bne.n	8008300 <_strtod_l+0x9f0>
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 fcb4 	bl	8000cf8 <__aeabi_d2lz>
 8008390:	f7f8 f924 	bl	80005dc <__aeabi_l2d>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4630      	mov	r0, r6
 800839a:	4639      	mov	r1, r7
 800839c:	f7f7 ff94 	bl	80002c8 <__aeabi_dsub>
 80083a0:	460b      	mov	r3, r1
 80083a2:	4602      	mov	r2, r0
 80083a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80083a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80083ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ae:	ea46 060a 	orr.w	r6, r6, sl
 80083b2:	431e      	orrs	r6, r3
 80083b4:	d06f      	beq.n	8008496 <_strtod_l+0xb86>
 80083b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80083f0 <_strtod_l+0xae0>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f8 fbae 	bl	8000b1c <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f47f accf 	bne.w	8007d64 <_strtod_l+0x454>
 80083c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80083f8 <_strtod_l+0xae8>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083d0:	f7f8 fbc2 	bl	8000b58 <__aeabi_dcmpgt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d093      	beq.n	8008300 <_strtod_l+0x9f0>
 80083d8:	e4c4      	b.n	8007d64 <_strtod_l+0x454>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	00000000 	.word	0x00000000
 80083e4:	bff00000 	.word	0xbff00000
 80083e8:	00000000 	.word	0x00000000
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	94a03595 	.word	0x94a03595
 80083f4:	3fdfffff 	.word	0x3fdfffff
 80083f8:	35afe535 	.word	0x35afe535
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	000fffff 	.word	0x000fffff
 8008404:	7ff00000 	.word	0x7ff00000
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	7fe00000 	.word	0x7fe00000
 8008418:	7c9fffff 	.word	0x7c9fffff
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	b323      	cbz	r3, 800846a <_strtod_l+0xb5a>
 8008420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008424:	d821      	bhi.n	800846a <_strtod_l+0xb5a>
 8008426:	a328      	add	r3, pc, #160	@ (adr r3, 80084c8 <_strtod_l+0xbb8>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb7e 	bl	8000b30 <__aeabi_dcmple>
 8008434:	b1a0      	cbz	r0, 8008460 <_strtod_l+0xb50>
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f7f8 fbd5 	bl	8000be8 <__aeabi_d2uiz>
 800843e:	2801      	cmp	r0, #1
 8008440:	bf38      	it	cc
 8008442:	2001      	movcc	r0, #1
 8008444:	f7f8 f87e 	bl	8000544 <__aeabi_ui2d>
 8008448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	b9fb      	cbnz	r3, 8008490 <_strtod_l+0xb80>
 8008450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008454:	9014      	str	r0, [sp, #80]	@ 0x50
 8008456:	9315      	str	r3, [sp, #84]	@ 0x54
 8008458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800845c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008466:	1b5b      	subs	r3, r3, r5
 8008468:	9311      	str	r3, [sp, #68]	@ 0x44
 800846a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800846e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008472:	f7ff f8f1 	bl	8007658 <__ulp>
 8008476:	4650      	mov	r0, sl
 8008478:	ec53 2b10 	vmov	r2, r3, d0
 800847c:	4659      	mov	r1, fp
 800847e:	f7f8 f8db 	bl	8000638 <__aeabi_dmul>
 8008482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008486:	f7f7 ff21 	bl	80002cc <__adddf3>
 800848a:	4682      	mov	sl, r0
 800848c:	468b      	mov	fp, r1
 800848e:	e770      	b.n	8008372 <_strtod_l+0xa62>
 8008490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008494:	e7e0      	b.n	8008458 <_strtod_l+0xb48>
 8008496:	a30e      	add	r3, pc, #56	@ (adr r3, 80084d0 <_strtod_l+0xbc0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f8 fb3e 	bl	8000b1c <__aeabi_dcmplt>
 80084a0:	e798      	b.n	80083d4 <_strtod_l+0xac4>
 80084a2:	2300      	movs	r3, #0
 80084a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80084a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f7ff ba6d 	b.w	800798a <_strtod_l+0x7a>
 80084b0:	2a65      	cmp	r2, #101	@ 0x65
 80084b2:	f43f ab66 	beq.w	8007b82 <_strtod_l+0x272>
 80084b6:	2a45      	cmp	r2, #69	@ 0x45
 80084b8:	f43f ab63 	beq.w	8007b82 <_strtod_l+0x272>
 80084bc:	2301      	movs	r3, #1
 80084be:	f7ff bb9e 	b.w	8007bfe <_strtod_l+0x2ee>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	ffc00000 	.word	0xffc00000
 80084cc:	41dfffff 	.word	0x41dfffff
 80084d0:	94a03595 	.word	0x94a03595
 80084d4:	3fcfffff 	.word	0x3fcfffff

080084d8 <_strtod_r>:
 80084d8:	4b01      	ldr	r3, [pc, #4]	@ (80084e0 <_strtod_r+0x8>)
 80084da:	f7ff ba19 	b.w	8007910 <_strtod_l>
 80084de:	bf00      	nop
 80084e0:	20000074 	.word	0x20000074

080084e4 <_strtol_l.constprop.0>:
 80084e4:	2b24      	cmp	r3, #36	@ 0x24
 80084e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ea:	4686      	mov	lr, r0
 80084ec:	4690      	mov	r8, r2
 80084ee:	d801      	bhi.n	80084f4 <_strtol_l.constprop.0+0x10>
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d106      	bne.n	8008502 <_strtol_l.constprop.0+0x1e>
 80084f4:	f7fd fdba 	bl	800606c <__errno>
 80084f8:	2316      	movs	r3, #22
 80084fa:	6003      	str	r3, [r0, #0]
 80084fc:	2000      	movs	r0, #0
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	4834      	ldr	r0, [pc, #208]	@ (80085d4 <_strtol_l.constprop.0+0xf0>)
 8008504:	460d      	mov	r5, r1
 8008506:	462a      	mov	r2, r5
 8008508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800850c:	5d06      	ldrb	r6, [r0, r4]
 800850e:	f016 0608 	ands.w	r6, r6, #8
 8008512:	d1f8      	bne.n	8008506 <_strtol_l.constprop.0+0x22>
 8008514:	2c2d      	cmp	r4, #45	@ 0x2d
 8008516:	d12d      	bne.n	8008574 <_strtol_l.constprop.0+0x90>
 8008518:	782c      	ldrb	r4, [r5, #0]
 800851a:	2601      	movs	r6, #1
 800851c:	1c95      	adds	r5, r2, #2
 800851e:	f033 0210 	bics.w	r2, r3, #16
 8008522:	d109      	bne.n	8008538 <_strtol_l.constprop.0+0x54>
 8008524:	2c30      	cmp	r4, #48	@ 0x30
 8008526:	d12a      	bne.n	800857e <_strtol_l.constprop.0+0x9a>
 8008528:	782a      	ldrb	r2, [r5, #0]
 800852a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800852e:	2a58      	cmp	r2, #88	@ 0x58
 8008530:	d125      	bne.n	800857e <_strtol_l.constprop.0+0x9a>
 8008532:	786c      	ldrb	r4, [r5, #1]
 8008534:	2310      	movs	r3, #16
 8008536:	3502      	adds	r5, #2
 8008538:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800853c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008540:	2200      	movs	r2, #0
 8008542:	fbbc f9f3 	udiv	r9, ip, r3
 8008546:	4610      	mov	r0, r2
 8008548:	fb03 ca19 	mls	sl, r3, r9, ip
 800854c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008550:	2f09      	cmp	r7, #9
 8008552:	d81b      	bhi.n	800858c <_strtol_l.constprop.0+0xa8>
 8008554:	463c      	mov	r4, r7
 8008556:	42a3      	cmp	r3, r4
 8008558:	dd27      	ble.n	80085aa <_strtol_l.constprop.0+0xc6>
 800855a:	1c57      	adds	r7, r2, #1
 800855c:	d007      	beq.n	800856e <_strtol_l.constprop.0+0x8a>
 800855e:	4581      	cmp	r9, r0
 8008560:	d320      	bcc.n	80085a4 <_strtol_l.constprop.0+0xc0>
 8008562:	d101      	bne.n	8008568 <_strtol_l.constprop.0+0x84>
 8008564:	45a2      	cmp	sl, r4
 8008566:	db1d      	blt.n	80085a4 <_strtol_l.constprop.0+0xc0>
 8008568:	fb00 4003 	mla	r0, r0, r3, r4
 800856c:	2201      	movs	r2, #1
 800856e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008572:	e7eb      	b.n	800854c <_strtol_l.constprop.0+0x68>
 8008574:	2c2b      	cmp	r4, #43	@ 0x2b
 8008576:	bf04      	itt	eq
 8008578:	782c      	ldrbeq	r4, [r5, #0]
 800857a:	1c95      	addeq	r5, r2, #2
 800857c:	e7cf      	b.n	800851e <_strtol_l.constprop.0+0x3a>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1da      	bne.n	8008538 <_strtol_l.constprop.0+0x54>
 8008582:	2c30      	cmp	r4, #48	@ 0x30
 8008584:	bf0c      	ite	eq
 8008586:	2308      	moveq	r3, #8
 8008588:	230a      	movne	r3, #10
 800858a:	e7d5      	b.n	8008538 <_strtol_l.constprop.0+0x54>
 800858c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008590:	2f19      	cmp	r7, #25
 8008592:	d801      	bhi.n	8008598 <_strtol_l.constprop.0+0xb4>
 8008594:	3c37      	subs	r4, #55	@ 0x37
 8008596:	e7de      	b.n	8008556 <_strtol_l.constprop.0+0x72>
 8008598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800859c:	2f19      	cmp	r7, #25
 800859e:	d804      	bhi.n	80085aa <_strtol_l.constprop.0+0xc6>
 80085a0:	3c57      	subs	r4, #87	@ 0x57
 80085a2:	e7d8      	b.n	8008556 <_strtol_l.constprop.0+0x72>
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	e7e1      	b.n	800856e <_strtol_l.constprop.0+0x8a>
 80085aa:	1c53      	adds	r3, r2, #1
 80085ac:	d108      	bne.n	80085c0 <_strtol_l.constprop.0+0xdc>
 80085ae:	2322      	movs	r3, #34	@ 0x22
 80085b0:	f8ce 3000 	str.w	r3, [lr]
 80085b4:	4660      	mov	r0, ip
 80085b6:	f1b8 0f00 	cmp.w	r8, #0
 80085ba:	d0a0      	beq.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085bc:	1e69      	subs	r1, r5, #1
 80085be:	e006      	b.n	80085ce <_strtol_l.constprop.0+0xea>
 80085c0:	b106      	cbz	r6, 80085c4 <_strtol_l.constprop.0+0xe0>
 80085c2:	4240      	negs	r0, r0
 80085c4:	f1b8 0f00 	cmp.w	r8, #0
 80085c8:	d099      	beq.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	d1f6      	bne.n	80085bc <_strtol_l.constprop.0+0xd8>
 80085ce:	f8c8 1000 	str.w	r1, [r8]
 80085d2:	e794      	b.n	80084fe <_strtol_l.constprop.0+0x1a>
 80085d4:	08009ac9 	.word	0x08009ac9

080085d8 <_strtol_r>:
 80085d8:	f7ff bf84 	b.w	80084e4 <_strtol_l.constprop.0>

080085dc <__ssputs_r>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	688e      	ldr	r6, [r1, #8]
 80085e2:	461f      	mov	r7, r3
 80085e4:	42be      	cmp	r6, r7
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	4682      	mov	sl, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4690      	mov	r8, r2
 80085ee:	d82d      	bhi.n	800864c <__ssputs_r+0x70>
 80085f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085f8:	d026      	beq.n	8008648 <__ssputs_r+0x6c>
 80085fa:	6965      	ldr	r5, [r4, #20]
 80085fc:	6909      	ldr	r1, [r1, #16]
 80085fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008602:	eba3 0901 	sub.w	r9, r3, r1
 8008606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800860a:	1c7b      	adds	r3, r7, #1
 800860c:	444b      	add	r3, r9
 800860e:	106d      	asrs	r5, r5, #1
 8008610:	429d      	cmp	r5, r3
 8008612:	bf38      	it	cc
 8008614:	461d      	movcc	r5, r3
 8008616:	0553      	lsls	r3, r2, #21
 8008618:	d527      	bpl.n	800866a <__ssputs_r+0x8e>
 800861a:	4629      	mov	r1, r5
 800861c:	f7fe fc1c 	bl	8006e58 <_malloc_r>
 8008620:	4606      	mov	r6, r0
 8008622:	b360      	cbz	r0, 800867e <__ssputs_r+0xa2>
 8008624:	6921      	ldr	r1, [r4, #16]
 8008626:	464a      	mov	r2, r9
 8008628:	f000 fa18 	bl	8008a5c <memcpy>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	6126      	str	r6, [r4, #16]
 800863a:	6165      	str	r5, [r4, #20]
 800863c:	444e      	add	r6, r9
 800863e:	eba5 0509 	sub.w	r5, r5, r9
 8008642:	6026      	str	r6, [r4, #0]
 8008644:	60a5      	str	r5, [r4, #8]
 8008646:	463e      	mov	r6, r7
 8008648:	42be      	cmp	r6, r7
 800864a:	d900      	bls.n	800864e <__ssputs_r+0x72>
 800864c:	463e      	mov	r6, r7
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	4632      	mov	r2, r6
 8008652:	4641      	mov	r1, r8
 8008654:	f000 f9c6 	bl	80089e4 <memmove>
 8008658:	68a3      	ldr	r3, [r4, #8]
 800865a:	1b9b      	subs	r3, r3, r6
 800865c:	60a3      	str	r3, [r4, #8]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	4433      	add	r3, r6
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	2000      	movs	r0, #0
 8008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866a:	462a      	mov	r2, r5
 800866c:	f000 fd89 	bl	8009182 <_realloc_r>
 8008670:	4606      	mov	r6, r0
 8008672:	2800      	cmp	r0, #0
 8008674:	d1e0      	bne.n	8008638 <__ssputs_r+0x5c>
 8008676:	6921      	ldr	r1, [r4, #16]
 8008678:	4650      	mov	r0, sl
 800867a:	f7fe fb79 	bl	8006d70 <_free_r>
 800867e:	230c      	movs	r3, #12
 8008680:	f8ca 3000 	str.w	r3, [sl]
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e7e9      	b.n	8008666 <__ssputs_r+0x8a>
	...

08008694 <_svfiprintf_r>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	4698      	mov	r8, r3
 800869a:	898b      	ldrh	r3, [r1, #12]
 800869c:	061b      	lsls	r3, r3, #24
 800869e:	b09d      	sub	sp, #116	@ 0x74
 80086a0:	4607      	mov	r7, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	4614      	mov	r4, r2
 80086a6:	d510      	bpl.n	80086ca <_svfiprintf_r+0x36>
 80086a8:	690b      	ldr	r3, [r1, #16]
 80086aa:	b973      	cbnz	r3, 80086ca <_svfiprintf_r+0x36>
 80086ac:	2140      	movs	r1, #64	@ 0x40
 80086ae:	f7fe fbd3 	bl	8006e58 <_malloc_r>
 80086b2:	6028      	str	r0, [r5, #0]
 80086b4:	6128      	str	r0, [r5, #16]
 80086b6:	b930      	cbnz	r0, 80086c6 <_svfiprintf_r+0x32>
 80086b8:	230c      	movs	r3, #12
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b01d      	add	sp, #116	@ 0x74
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	2340      	movs	r3, #64	@ 0x40
 80086c8:	616b      	str	r3, [r5, #20]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ce:	2320      	movs	r3, #32
 80086d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d8:	2330      	movs	r3, #48	@ 0x30
 80086da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008878 <_svfiprintf_r+0x1e4>
 80086de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086e2:	f04f 0901 	mov.w	r9, #1
 80086e6:	4623      	mov	r3, r4
 80086e8:	469a      	mov	sl, r3
 80086ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ee:	b10a      	cbz	r2, 80086f4 <_svfiprintf_r+0x60>
 80086f0:	2a25      	cmp	r2, #37	@ 0x25
 80086f2:	d1f9      	bne.n	80086e8 <_svfiprintf_r+0x54>
 80086f4:	ebba 0b04 	subs.w	fp, sl, r4
 80086f8:	d00b      	beq.n	8008712 <_svfiprintf_r+0x7e>
 80086fa:	465b      	mov	r3, fp
 80086fc:	4622      	mov	r2, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff ff6b 	bl	80085dc <__ssputs_r>
 8008706:	3001      	adds	r0, #1
 8008708:	f000 80a7 	beq.w	800885a <_svfiprintf_r+0x1c6>
 800870c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800870e:	445a      	add	r2, fp
 8008710:	9209      	str	r2, [sp, #36]	@ 0x24
 8008712:	f89a 3000 	ldrb.w	r3, [sl]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 809f 	beq.w	800885a <_svfiprintf_r+0x1c6>
 800871c:	2300      	movs	r3, #0
 800871e:	f04f 32ff 	mov.w	r2, #4294967295
 8008722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008726:	f10a 0a01 	add.w	sl, sl, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	9307      	str	r3, [sp, #28]
 800872e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008732:	931a      	str	r3, [sp, #104]	@ 0x68
 8008734:	4654      	mov	r4, sl
 8008736:	2205      	movs	r2, #5
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	484e      	ldr	r0, [pc, #312]	@ (8008878 <_svfiprintf_r+0x1e4>)
 800873e:	f7f7 fd67 	bl	8000210 <memchr>
 8008742:	9a04      	ldr	r2, [sp, #16]
 8008744:	b9d8      	cbnz	r0, 800877e <_svfiprintf_r+0xea>
 8008746:	06d0      	lsls	r0, r2, #27
 8008748:	bf44      	itt	mi
 800874a:	2320      	movmi	r3, #32
 800874c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008750:	0711      	lsls	r1, r2, #28
 8008752:	bf44      	itt	mi
 8008754:	232b      	movmi	r3, #43	@ 0x2b
 8008756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800875a:	f89a 3000 	ldrb.w	r3, [sl]
 800875e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008760:	d015      	beq.n	800878e <_svfiprintf_r+0xfa>
 8008762:	9a07      	ldr	r2, [sp, #28]
 8008764:	4654      	mov	r4, sl
 8008766:	2000      	movs	r0, #0
 8008768:	f04f 0c0a 	mov.w	ip, #10
 800876c:	4621      	mov	r1, r4
 800876e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008772:	3b30      	subs	r3, #48	@ 0x30
 8008774:	2b09      	cmp	r3, #9
 8008776:	d94b      	bls.n	8008810 <_svfiprintf_r+0x17c>
 8008778:	b1b0      	cbz	r0, 80087a8 <_svfiprintf_r+0x114>
 800877a:	9207      	str	r2, [sp, #28]
 800877c:	e014      	b.n	80087a8 <_svfiprintf_r+0x114>
 800877e:	eba0 0308 	sub.w	r3, r0, r8
 8008782:	fa09 f303 	lsl.w	r3, r9, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	46a2      	mov	sl, r4
 800878c:	e7d2      	b.n	8008734 <_svfiprintf_r+0xa0>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	1d19      	adds	r1, r3, #4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	9103      	str	r1, [sp, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	bfbb      	ittet	lt
 800879a:	425b      	neglt	r3, r3
 800879c:	f042 0202 	orrlt.w	r2, r2, #2
 80087a0:	9307      	strge	r3, [sp, #28]
 80087a2:	9307      	strlt	r3, [sp, #28]
 80087a4:	bfb8      	it	lt
 80087a6:	9204      	strlt	r2, [sp, #16]
 80087a8:	7823      	ldrb	r3, [r4, #0]
 80087aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80087ac:	d10a      	bne.n	80087c4 <_svfiprintf_r+0x130>
 80087ae:	7863      	ldrb	r3, [r4, #1]
 80087b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b2:	d132      	bne.n	800881a <_svfiprintf_r+0x186>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	9203      	str	r2, [sp, #12]
 80087bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087c0:	3402      	adds	r4, #2
 80087c2:	9305      	str	r3, [sp, #20]
 80087c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008888 <_svfiprintf_r+0x1f4>
 80087c8:	7821      	ldrb	r1, [r4, #0]
 80087ca:	2203      	movs	r2, #3
 80087cc:	4650      	mov	r0, sl
 80087ce:	f7f7 fd1f 	bl	8000210 <memchr>
 80087d2:	b138      	cbz	r0, 80087e4 <_svfiprintf_r+0x150>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	eba0 000a 	sub.w	r0, r0, sl
 80087da:	2240      	movs	r2, #64	@ 0x40
 80087dc:	4082      	lsls	r2, r0
 80087de:	4313      	orrs	r3, r2
 80087e0:	3401      	adds	r4, #1
 80087e2:	9304      	str	r3, [sp, #16]
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	4824      	ldr	r0, [pc, #144]	@ (800887c <_svfiprintf_r+0x1e8>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087ee:	2206      	movs	r2, #6
 80087f0:	f7f7 fd0e 	bl	8000210 <memchr>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d036      	beq.n	8008866 <_svfiprintf_r+0x1d2>
 80087f8:	4b21      	ldr	r3, [pc, #132]	@ (8008880 <_svfiprintf_r+0x1ec>)
 80087fa:	bb1b      	cbnz	r3, 8008844 <_svfiprintf_r+0x1b0>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	3307      	adds	r3, #7
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	9303      	str	r3, [sp, #12]
 8008808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800880a:	4433      	add	r3, r6
 800880c:	9309      	str	r3, [sp, #36]	@ 0x24
 800880e:	e76a      	b.n	80086e6 <_svfiprintf_r+0x52>
 8008810:	fb0c 3202 	mla	r2, ip, r2, r3
 8008814:	460c      	mov	r4, r1
 8008816:	2001      	movs	r0, #1
 8008818:	e7a8      	b.n	800876c <_svfiprintf_r+0xd8>
 800881a:	2300      	movs	r3, #0
 800881c:	3401      	adds	r4, #1
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	4619      	mov	r1, r3
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4620      	mov	r0, r4
 8008828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882c:	3a30      	subs	r2, #48	@ 0x30
 800882e:	2a09      	cmp	r2, #9
 8008830:	d903      	bls.n	800883a <_svfiprintf_r+0x1a6>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c6      	beq.n	80087c4 <_svfiprintf_r+0x130>
 8008836:	9105      	str	r1, [sp, #20]
 8008838:	e7c4      	b.n	80087c4 <_svfiprintf_r+0x130>
 800883a:	fb0c 2101 	mla	r1, ip, r1, r2
 800883e:	4604      	mov	r4, r0
 8008840:	2301      	movs	r3, #1
 8008842:	e7f0      	b.n	8008826 <_svfiprintf_r+0x192>
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	462a      	mov	r2, r5
 800884a:	4b0e      	ldr	r3, [pc, #56]	@ (8008884 <_svfiprintf_r+0x1f0>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4638      	mov	r0, r7
 8008850:	f7fc fcc8 	bl	80051e4 <_printf_float>
 8008854:	1c42      	adds	r2, r0, #1
 8008856:	4606      	mov	r6, r0
 8008858:	d1d6      	bne.n	8008808 <_svfiprintf_r+0x174>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	065b      	lsls	r3, r3, #25
 800885e:	f53f af2d 	bmi.w	80086bc <_svfiprintf_r+0x28>
 8008862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008864:	e72c      	b.n	80086c0 <_svfiprintf_r+0x2c>
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <_svfiprintf_r+0x1f0>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4638      	mov	r0, r7
 8008872:	f7fc ff4f 	bl	8005714 <_printf_i>
 8008876:	e7ed      	b.n	8008854 <_svfiprintf_r+0x1c0>
 8008878:	08009bc9 	.word	0x08009bc9
 800887c:	08009bd3 	.word	0x08009bd3
 8008880:	080051e5 	.word	0x080051e5
 8008884:	080085dd 	.word	0x080085dd
 8008888:	08009bcf 	.word	0x08009bcf

0800888c <__sflush_r>:
 800888c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008894:	0716      	lsls	r6, r2, #28
 8008896:	4605      	mov	r5, r0
 8008898:	460c      	mov	r4, r1
 800889a:	d454      	bmi.n	8008946 <__sflush_r+0xba>
 800889c:	684b      	ldr	r3, [r1, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc02      	bgt.n	80088a8 <__sflush_r+0x1c>
 80088a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd48      	ble.n	800893a <__sflush_r+0xae>
 80088a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	d045      	beq.n	800893a <__sflush_r+0xae>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088b4:	682f      	ldr	r7, [r5, #0]
 80088b6:	6a21      	ldr	r1, [r4, #32]
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	d030      	beq.n	800891e <__sflush_r+0x92>
 80088bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	0759      	lsls	r1, r3, #29
 80088c2:	d505      	bpl.n	80088d0 <__sflush_r+0x44>
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ca:	b10b      	cbz	r3, 80088d0 <__sflush_r+0x44>
 80088cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088d4:	6a21      	ldr	r1, [r4, #32]
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	d106      	bne.n	80088ee <__sflush_r+0x62>
 80088e0:	6829      	ldr	r1, [r5, #0]
 80088e2:	291d      	cmp	r1, #29
 80088e4:	d82b      	bhi.n	800893e <__sflush_r+0xb2>
 80088e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008990 <__sflush_r+0x104>)
 80088e8:	410a      	asrs	r2, r1
 80088ea:	07d6      	lsls	r6, r2, #31
 80088ec:	d427      	bmi.n	800893e <__sflush_r+0xb2>
 80088ee:	2200      	movs	r2, #0
 80088f0:	6062      	str	r2, [r4, #4]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	d504      	bpl.n	8008904 <__sflush_r+0x78>
 80088fa:	1c42      	adds	r2, r0, #1
 80088fc:	d101      	bne.n	8008902 <__sflush_r+0x76>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	b903      	cbnz	r3, 8008904 <__sflush_r+0x78>
 8008902:	6560      	str	r0, [r4, #84]	@ 0x54
 8008904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008906:	602f      	str	r7, [r5, #0]
 8008908:	b1b9      	cbz	r1, 800893a <__sflush_r+0xae>
 800890a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800890e:	4299      	cmp	r1, r3
 8008910:	d002      	beq.n	8008918 <__sflush_r+0x8c>
 8008912:	4628      	mov	r0, r5
 8008914:	f7fe fa2c 	bl	8006d70 <_free_r>
 8008918:	2300      	movs	r3, #0
 800891a:	6363      	str	r3, [r4, #52]	@ 0x34
 800891c:	e00d      	b.n	800893a <__sflush_r+0xae>
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	4602      	mov	r2, r0
 8008926:	1c50      	adds	r0, r2, #1
 8008928:	d1c9      	bne.n	80088be <__sflush_r+0x32>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0c6      	beq.n	80088be <__sflush_r+0x32>
 8008930:	2b1d      	cmp	r3, #29
 8008932:	d001      	beq.n	8008938 <__sflush_r+0xac>
 8008934:	2b16      	cmp	r3, #22
 8008936:	d11e      	bne.n	8008976 <__sflush_r+0xea>
 8008938:	602f      	str	r7, [r5, #0]
 800893a:	2000      	movs	r0, #0
 800893c:	e022      	b.n	8008984 <__sflush_r+0xf8>
 800893e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008942:	b21b      	sxth	r3, r3
 8008944:	e01b      	b.n	800897e <__sflush_r+0xf2>
 8008946:	690f      	ldr	r7, [r1, #16]
 8008948:	2f00      	cmp	r7, #0
 800894a:	d0f6      	beq.n	800893a <__sflush_r+0xae>
 800894c:	0793      	lsls	r3, r2, #30
 800894e:	680e      	ldr	r6, [r1, #0]
 8008950:	bf08      	it	eq
 8008952:	694b      	ldreq	r3, [r1, #20]
 8008954:	600f      	str	r7, [r1, #0]
 8008956:	bf18      	it	ne
 8008958:	2300      	movne	r3, #0
 800895a:	eba6 0807 	sub.w	r8, r6, r7
 800895e:	608b      	str	r3, [r1, #8]
 8008960:	f1b8 0f00 	cmp.w	r8, #0
 8008964:	dde9      	ble.n	800893a <__sflush_r+0xae>
 8008966:	6a21      	ldr	r1, [r4, #32]
 8008968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800896a:	4643      	mov	r3, r8
 800896c:	463a      	mov	r2, r7
 800896e:	4628      	mov	r0, r5
 8008970:	47b0      	blx	r6
 8008972:	2800      	cmp	r0, #0
 8008974:	dc08      	bgt.n	8008988 <__sflush_r+0xfc>
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4407      	add	r7, r0
 800898a:	eba8 0800 	sub.w	r8, r8, r0
 800898e:	e7e7      	b.n	8008960 <__sflush_r+0xd4>
 8008990:	dfbffffe 	.word	0xdfbffffe

08008994 <_fflush_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b913      	cbnz	r3, 80089a4 <_fflush_r+0x10>
 800899e:	2500      	movs	r5, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	b118      	cbz	r0, 80089ae <_fflush_r+0x1a>
 80089a6:	6a03      	ldr	r3, [r0, #32]
 80089a8:	b90b      	cbnz	r3, 80089ae <_fflush_r+0x1a>
 80089aa:	f7fd fa73 	bl	8005e94 <__sinit>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f3      	beq.n	800899e <_fflush_r+0xa>
 80089b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089b8:	07d0      	lsls	r0, r2, #31
 80089ba:	d404      	bmi.n	80089c6 <_fflush_r+0x32>
 80089bc:	0599      	lsls	r1, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_fflush_r+0x32>
 80089c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089c2:	f7fd fb7e 	bl	80060c2 <__retarget_lock_acquire_recursive>
 80089c6:	4628      	mov	r0, r5
 80089c8:	4621      	mov	r1, r4
 80089ca:	f7ff ff5f 	bl	800888c <__sflush_r>
 80089ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089d0:	07da      	lsls	r2, r3, #31
 80089d2:	4605      	mov	r5, r0
 80089d4:	d4e4      	bmi.n	80089a0 <_fflush_r+0xc>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	d4e1      	bmi.n	80089a0 <_fflush_r+0xc>
 80089dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089de:	f7fd fb71 	bl	80060c4 <__retarget_lock_release_recursive>
 80089e2:	e7dd      	b.n	80089a0 <_fflush_r+0xc>

080089e4 <memmove>:
 80089e4:	4288      	cmp	r0, r1
 80089e6:	b510      	push	{r4, lr}
 80089e8:	eb01 0402 	add.w	r4, r1, r2
 80089ec:	d902      	bls.n	80089f4 <memmove+0x10>
 80089ee:	4284      	cmp	r4, r0
 80089f0:	4623      	mov	r3, r4
 80089f2:	d807      	bhi.n	8008a04 <memmove+0x20>
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	42a1      	cmp	r1, r4
 80089f8:	d008      	beq.n	8008a0c <memmove+0x28>
 80089fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a02:	e7f8      	b.n	80089f6 <memmove+0x12>
 8008a04:	4402      	add	r2, r0
 8008a06:	4601      	mov	r1, r0
 8008a08:	428a      	cmp	r2, r1
 8008a0a:	d100      	bne.n	8008a0e <memmove+0x2a>
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a16:	e7f7      	b.n	8008a08 <memmove+0x24>

08008a18 <strncmp>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	b16a      	cbz	r2, 8008a38 <strncmp+0x20>
 8008a1c:	3901      	subs	r1, #1
 8008a1e:	1884      	adds	r4, r0, r2
 8008a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d103      	bne.n	8008a34 <strncmp+0x1c>
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d001      	beq.n	8008a34 <strncmp+0x1c>
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	d1f5      	bne.n	8008a20 <strncmp+0x8>
 8008a34:	1ad0      	subs	r0, r2, r3
 8008a36:	bd10      	pop	{r4, pc}
 8008a38:	4610      	mov	r0, r2
 8008a3a:	e7fc      	b.n	8008a36 <strncmp+0x1e>

08008a3c <_sbrk_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d06      	ldr	r5, [pc, #24]	@ (8008a58 <_sbrk_r+0x1c>)
 8008a40:	2300      	movs	r3, #0
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	f7f9 fbd0 	bl	80021ec <_sbrk>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_sbrk_r+0x1a>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_sbrk_r+0x1a>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	20000488 	.word	0x20000488

08008a5c <memcpy>:
 8008a5c:	440a      	add	r2, r1
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a64:	d100      	bne.n	8008a68 <memcpy+0xc>
 8008a66:	4770      	bx	lr
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a72:	4291      	cmp	r1, r2
 8008a74:	d1f9      	bne.n	8008a6a <memcpy+0xe>
 8008a76:	bd10      	pop	{r4, pc}

08008a78 <nan>:
 8008a78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a80 <nan+0x8>
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	00000000 	.word	0x00000000
 8008a84:	7ff80000 	.word	0x7ff80000

08008a88 <__assert_func>:
 8008a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4b09      	ldr	r3, [pc, #36]	@ (8008ab4 <__assert_func+0x2c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4605      	mov	r5, r0
 8008a94:	68d8      	ldr	r0, [r3, #12]
 8008a96:	b954      	cbnz	r4, 8008aae <__assert_func+0x26>
 8008a98:	4b07      	ldr	r3, [pc, #28]	@ (8008ab8 <__assert_func+0x30>)
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa0:	9100      	str	r1, [sp, #0]
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	4905      	ldr	r1, [pc, #20]	@ (8008abc <__assert_func+0x34>)
 8008aa6:	f000 fba7 	bl	80091f8 <fiprintf>
 8008aaa:	f000 fbb7 	bl	800921c <abort>
 8008aae:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <__assert_func+0x38>)
 8008ab0:	e7f4      	b.n	8008a9c <__assert_func+0x14>
 8008ab2:	bf00      	nop
 8008ab4:	20000024 	.word	0x20000024
 8008ab8:	08009c1d 	.word	0x08009c1d
 8008abc:	08009bef 	.word	0x08009bef
 8008ac0:	08009be2 	.word	0x08009be2

08008ac4 <_calloc_r>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	fba1 5402 	umull	r5, r4, r1, r2
 8008aca:	b93c      	cbnz	r4, 8008adc <_calloc_r+0x18>
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7fe f9c3 	bl	8006e58 <_malloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b928      	cbnz	r0, 8008ae2 <_calloc_r+0x1e>
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	4630      	mov	r0, r6
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	220c      	movs	r2, #12
 8008ade:	6002      	str	r2, [r0, #0]
 8008ae0:	e7f9      	b.n	8008ad6 <_calloc_r+0x12>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7fd fa6e 	bl	8005fc6 <memset>
 8008aea:	e7f5      	b.n	8008ad8 <_calloc_r+0x14>

08008aec <rshift>:
 8008aec:	6903      	ldr	r3, [r0, #16]
 8008aee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008af2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008af6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008afa:	f100 0414 	add.w	r4, r0, #20
 8008afe:	dd45      	ble.n	8008b8c <rshift+0xa0>
 8008b00:	f011 011f 	ands.w	r1, r1, #31
 8008b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b0c:	d10c      	bne.n	8008b28 <rshift+0x3c>
 8008b0e:	f100 0710 	add.w	r7, r0, #16
 8008b12:	4629      	mov	r1, r5
 8008b14:	42b1      	cmp	r1, r6
 8008b16:	d334      	bcc.n	8008b82 <rshift+0x96>
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	1eea      	subs	r2, r5, #3
 8008b1e:	4296      	cmp	r6, r2
 8008b20:	bf38      	it	cc
 8008b22:	2300      	movcc	r3, #0
 8008b24:	4423      	add	r3, r4
 8008b26:	e015      	b.n	8008b54 <rshift+0x68>
 8008b28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b2c:	f1c1 0820 	rsb	r8, r1, #32
 8008b30:	40cf      	lsrs	r7, r1
 8008b32:	f105 0e04 	add.w	lr, r5, #4
 8008b36:	46a1      	mov	r9, r4
 8008b38:	4576      	cmp	r6, lr
 8008b3a:	46f4      	mov	ip, lr
 8008b3c:	d815      	bhi.n	8008b6a <rshift+0x7e>
 8008b3e:	1a9a      	subs	r2, r3, r2
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	3a04      	subs	r2, #4
 8008b44:	3501      	adds	r5, #1
 8008b46:	42ae      	cmp	r6, r5
 8008b48:	bf38      	it	cc
 8008b4a:	2200      	movcc	r2, #0
 8008b4c:	18a3      	adds	r3, r4, r2
 8008b4e:	50a7      	str	r7, [r4, r2]
 8008b50:	b107      	cbz	r7, 8008b54 <rshift+0x68>
 8008b52:	3304      	adds	r3, #4
 8008b54:	1b1a      	subs	r2, r3, r4
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b5c:	bf08      	it	eq
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	6102      	str	r2, [r0, #16]
 8008b62:	bf08      	it	eq
 8008b64:	6143      	streq	r3, [r0, #20]
 8008b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	f8dc c000 	ldr.w	ip, [ip]
 8008b6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b72:	ea4c 0707 	orr.w	r7, ip, r7
 8008b76:	f849 7b04 	str.w	r7, [r9], #4
 8008b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b7e:	40cf      	lsrs	r7, r1
 8008b80:	e7da      	b.n	8008b38 <rshift+0x4c>
 8008b82:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b86:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b8a:	e7c3      	b.n	8008b14 <rshift+0x28>
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	e7e1      	b.n	8008b54 <rshift+0x68>

08008b90 <__hexdig_fun>:
 8008b90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	d802      	bhi.n	8008b9e <__hexdig_fun+0xe>
 8008b98:	3820      	subs	r0, #32
 8008b9a:	b2c0      	uxtb	r0, r0
 8008b9c:	4770      	bx	lr
 8008b9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008ba2:	2b05      	cmp	r3, #5
 8008ba4:	d801      	bhi.n	8008baa <__hexdig_fun+0x1a>
 8008ba6:	3847      	subs	r0, #71	@ 0x47
 8008ba8:	e7f7      	b.n	8008b9a <__hexdig_fun+0xa>
 8008baa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d801      	bhi.n	8008bb6 <__hexdig_fun+0x26>
 8008bb2:	3827      	subs	r0, #39	@ 0x27
 8008bb4:	e7f1      	b.n	8008b9a <__hexdig_fun+0xa>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr
	...

08008bbc <__gethex>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	468a      	mov	sl, r1
 8008bc4:	9302      	str	r3, [sp, #8]
 8008bc6:	680b      	ldr	r3, [r1, #0]
 8008bc8:	9001      	str	r0, [sp, #4]
 8008bca:	4690      	mov	r8, r2
 8008bcc:	1c9c      	adds	r4, r3, #2
 8008bce:	46a1      	mov	r9, r4
 8008bd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008bd4:	2830      	cmp	r0, #48	@ 0x30
 8008bd6:	d0fa      	beq.n	8008bce <__gethex+0x12>
 8008bd8:	eba9 0303 	sub.w	r3, r9, r3
 8008bdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008be0:	f7ff ffd6 	bl	8008b90 <__hexdig_fun>
 8008be4:	4605      	mov	r5, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d168      	bne.n	8008cbc <__gethex+0x100>
 8008bea:	49a0      	ldr	r1, [pc, #640]	@ (8008e6c <__gethex+0x2b0>)
 8008bec:	2201      	movs	r2, #1
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f7ff ff12 	bl	8008a18 <strncmp>
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d167      	bne.n	8008cca <__gethex+0x10e>
 8008bfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008bfe:	4626      	mov	r6, r4
 8008c00:	f7ff ffc6 	bl	8008b90 <__hexdig_fun>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d062      	beq.n	8008cce <__gethex+0x112>
 8008c08:	4623      	mov	r3, r4
 8008c0a:	7818      	ldrb	r0, [r3, #0]
 8008c0c:	2830      	cmp	r0, #48	@ 0x30
 8008c0e:	4699      	mov	r9, r3
 8008c10:	f103 0301 	add.w	r3, r3, #1
 8008c14:	d0f9      	beq.n	8008c0a <__gethex+0x4e>
 8008c16:	f7ff ffbb 	bl	8008b90 <__hexdig_fun>
 8008c1a:	fab0 f580 	clz	r5, r0
 8008c1e:	096d      	lsrs	r5, r5, #5
 8008c20:	f04f 0b01 	mov.w	fp, #1
 8008c24:	464a      	mov	r2, r9
 8008c26:	4616      	mov	r6, r2
 8008c28:	3201      	adds	r2, #1
 8008c2a:	7830      	ldrb	r0, [r6, #0]
 8008c2c:	f7ff ffb0 	bl	8008b90 <__hexdig_fun>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1f8      	bne.n	8008c26 <__gethex+0x6a>
 8008c34:	498d      	ldr	r1, [pc, #564]	@ (8008e6c <__gethex+0x2b0>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff feed 	bl	8008a18 <strncmp>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d13f      	bne.n	8008cc2 <__gethex+0x106>
 8008c42:	b944      	cbnz	r4, 8008c56 <__gethex+0x9a>
 8008c44:	1c74      	adds	r4, r6, #1
 8008c46:	4622      	mov	r2, r4
 8008c48:	4616      	mov	r6, r2
 8008c4a:	3201      	adds	r2, #1
 8008c4c:	7830      	ldrb	r0, [r6, #0]
 8008c4e:	f7ff ff9f 	bl	8008b90 <__hexdig_fun>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1f8      	bne.n	8008c48 <__gethex+0x8c>
 8008c56:	1ba4      	subs	r4, r4, r6
 8008c58:	00a7      	lsls	r7, r4, #2
 8008c5a:	7833      	ldrb	r3, [r6, #0]
 8008c5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c60:	2b50      	cmp	r3, #80	@ 0x50
 8008c62:	d13e      	bne.n	8008ce2 <__gethex+0x126>
 8008c64:	7873      	ldrb	r3, [r6, #1]
 8008c66:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c68:	d033      	beq.n	8008cd2 <__gethex+0x116>
 8008c6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c6c:	d034      	beq.n	8008cd8 <__gethex+0x11c>
 8008c6e:	1c71      	adds	r1, r6, #1
 8008c70:	2400      	movs	r4, #0
 8008c72:	7808      	ldrb	r0, [r1, #0]
 8008c74:	f7ff ff8c 	bl	8008b90 <__hexdig_fun>
 8008c78:	1e43      	subs	r3, r0, #1
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b18      	cmp	r3, #24
 8008c7e:	d830      	bhi.n	8008ce2 <__gethex+0x126>
 8008c80:	f1a0 0210 	sub.w	r2, r0, #16
 8008c84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c88:	f7ff ff82 	bl	8008b90 <__hexdig_fun>
 8008c8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c90:	fa5f fc8c 	uxtb.w	ip, ip
 8008c94:	f1bc 0f18 	cmp.w	ip, #24
 8008c98:	f04f 030a 	mov.w	r3, #10
 8008c9c:	d91e      	bls.n	8008cdc <__gethex+0x120>
 8008c9e:	b104      	cbz	r4, 8008ca2 <__gethex+0xe6>
 8008ca0:	4252      	negs	r2, r2
 8008ca2:	4417      	add	r7, r2
 8008ca4:	f8ca 1000 	str.w	r1, [sl]
 8008ca8:	b1ed      	cbz	r5, 8008ce6 <__gethex+0x12a>
 8008caa:	f1bb 0f00 	cmp.w	fp, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2506      	moveq	r5, #6
 8008cb2:	2500      	movne	r5, #0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	b005      	add	sp, #20
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	462c      	mov	r4, r5
 8008cc0:	e7b0      	b.n	8008c24 <__gethex+0x68>
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	d1c7      	bne.n	8008c56 <__gethex+0x9a>
 8008cc6:	4627      	mov	r7, r4
 8008cc8:	e7c7      	b.n	8008c5a <__gethex+0x9e>
 8008cca:	464e      	mov	r6, r9
 8008ccc:	462f      	mov	r7, r5
 8008cce:	2501      	movs	r5, #1
 8008cd0:	e7c3      	b.n	8008c5a <__gethex+0x9e>
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	1cb1      	adds	r1, r6, #2
 8008cd6:	e7cc      	b.n	8008c72 <__gethex+0xb6>
 8008cd8:	2401      	movs	r4, #1
 8008cda:	e7fb      	b.n	8008cd4 <__gethex+0x118>
 8008cdc:	fb03 0002 	mla	r0, r3, r2, r0
 8008ce0:	e7ce      	b.n	8008c80 <__gethex+0xc4>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	e7de      	b.n	8008ca4 <__gethex+0xe8>
 8008ce6:	eba6 0309 	sub.w	r3, r6, r9
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4629      	mov	r1, r5
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	dc0a      	bgt.n	8008d08 <__gethex+0x14c>
 8008cf2:	9801      	ldr	r0, [sp, #4]
 8008cf4:	f7fe f93c 	bl	8006f70 <_Balloc>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	b940      	cbnz	r0, 8008d0e <__gethex+0x152>
 8008cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e70 <__gethex+0x2b4>)
 8008cfe:	4602      	mov	r2, r0
 8008d00:	21e4      	movs	r1, #228	@ 0xe4
 8008d02:	485c      	ldr	r0, [pc, #368]	@ (8008e74 <__gethex+0x2b8>)
 8008d04:	f7ff fec0 	bl	8008a88 <__assert_func>
 8008d08:	3101      	adds	r1, #1
 8008d0a:	105b      	asrs	r3, r3, #1
 8008d0c:	e7ef      	b.n	8008cee <__gethex+0x132>
 8008d0e:	f100 0a14 	add.w	sl, r0, #20
 8008d12:	2300      	movs	r3, #0
 8008d14:	4655      	mov	r5, sl
 8008d16:	469b      	mov	fp, r3
 8008d18:	45b1      	cmp	r9, r6
 8008d1a:	d337      	bcc.n	8008d8c <__gethex+0x1d0>
 8008d1c:	f845 bb04 	str.w	fp, [r5], #4
 8008d20:	eba5 050a 	sub.w	r5, r5, sl
 8008d24:	10ad      	asrs	r5, r5, #2
 8008d26:	6125      	str	r5, [r4, #16]
 8008d28:	4658      	mov	r0, fp
 8008d2a:	f7fe fa13 	bl	8007154 <__hi0bits>
 8008d2e:	016d      	lsls	r5, r5, #5
 8008d30:	f8d8 6000 	ldr.w	r6, [r8]
 8008d34:	1a2d      	subs	r5, r5, r0
 8008d36:	42b5      	cmp	r5, r6
 8008d38:	dd54      	ble.n	8008de4 <__gethex+0x228>
 8008d3a:	1bad      	subs	r5, r5, r6
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7fe fda7 	bl	8007892 <__any_on>
 8008d44:	4681      	mov	r9, r0
 8008d46:	b178      	cbz	r0, 8008d68 <__gethex+0x1ac>
 8008d48:	1e6b      	subs	r3, r5, #1
 8008d4a:	1159      	asrs	r1, r3, #5
 8008d4c:	f003 021f 	and.w	r2, r3, #31
 8008d50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	fa09 f202 	lsl.w	r2, r9, r2
 8008d5c:	420a      	tst	r2, r1
 8008d5e:	d003      	beq.n	8008d68 <__gethex+0x1ac>
 8008d60:	454b      	cmp	r3, r9
 8008d62:	dc36      	bgt.n	8008dd2 <__gethex+0x216>
 8008d64:	f04f 0902 	mov.w	r9, #2
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f7ff febe 	bl	8008aec <rshift>
 8008d70:	442f      	add	r7, r5
 8008d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d76:	42bb      	cmp	r3, r7
 8008d78:	da42      	bge.n	8008e00 <__gethex+0x244>
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7fe f937 	bl	8006ff0 <_Bfree>
 8008d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d84:	2300      	movs	r3, #0
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	25a3      	movs	r5, #163	@ 0xa3
 8008d8a:	e793      	b.n	8008cb4 <__gethex+0xf8>
 8008d8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d90:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d92:	d012      	beq.n	8008dba <__gethex+0x1fe>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d104      	bne.n	8008da2 <__gethex+0x1e6>
 8008d98:	f845 bb04 	str.w	fp, [r5], #4
 8008d9c:	f04f 0b00 	mov.w	fp, #0
 8008da0:	465b      	mov	r3, fp
 8008da2:	7830      	ldrb	r0, [r6, #0]
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	f7ff fef3 	bl	8008b90 <__hexdig_fun>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	f000 000f 	and.w	r0, r0, #15
 8008db0:	4098      	lsls	r0, r3
 8008db2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008db6:	3304      	adds	r3, #4
 8008db8:	e7ae      	b.n	8008d18 <__gethex+0x15c>
 8008dba:	45b1      	cmp	r9, r6
 8008dbc:	d8ea      	bhi.n	8008d94 <__gethex+0x1d8>
 8008dbe:	492b      	ldr	r1, [pc, #172]	@ (8008e6c <__gethex+0x2b0>)
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f7ff fe27 	bl	8008a18 <strncmp>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d1e1      	bne.n	8008d94 <__gethex+0x1d8>
 8008dd0:	e7a2      	b.n	8008d18 <__gethex+0x15c>
 8008dd2:	1ea9      	subs	r1, r5, #2
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7fe fd5c 	bl	8007892 <__any_on>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0c2      	beq.n	8008d64 <__gethex+0x1a8>
 8008dde:	f04f 0903 	mov.w	r9, #3
 8008de2:	e7c1      	b.n	8008d68 <__gethex+0x1ac>
 8008de4:	da09      	bge.n	8008dfa <__gethex+0x23e>
 8008de6:	1b75      	subs	r5, r6, r5
 8008de8:	4621      	mov	r1, r4
 8008dea:	9801      	ldr	r0, [sp, #4]
 8008dec:	462a      	mov	r2, r5
 8008dee:	f7fe fb17 	bl	8007420 <__lshift>
 8008df2:	1b7f      	subs	r7, r7, r5
 8008df4:	4604      	mov	r4, r0
 8008df6:	f100 0a14 	add.w	sl, r0, #20
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	e7b8      	b.n	8008d72 <__gethex+0x1b6>
 8008e00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e04:	42bd      	cmp	r5, r7
 8008e06:	dd6f      	ble.n	8008ee8 <__gethex+0x32c>
 8008e08:	1bed      	subs	r5, r5, r7
 8008e0a:	42ae      	cmp	r6, r5
 8008e0c:	dc34      	bgt.n	8008e78 <__gethex+0x2bc>
 8008e0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d022      	beq.n	8008e5c <__gethex+0x2a0>
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d024      	beq.n	8008e64 <__gethex+0x2a8>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d115      	bne.n	8008e4a <__gethex+0x28e>
 8008e1e:	42ae      	cmp	r6, r5
 8008e20:	d113      	bne.n	8008e4a <__gethex+0x28e>
 8008e22:	2e01      	cmp	r6, #1
 8008e24:	d10b      	bne.n	8008e3e <__gethex+0x282>
 8008e26:	9a02      	ldr	r2, [sp, #8]
 8008e28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	f8ca 3000 	str.w	r3, [sl]
 8008e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e38:	2562      	movs	r5, #98	@ 0x62
 8008e3a:	601c      	str	r4, [r3, #0]
 8008e3c:	e73a      	b.n	8008cb4 <__gethex+0xf8>
 8008e3e:	1e71      	subs	r1, r6, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7fe fd26 	bl	8007892 <__any_on>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d1ed      	bne.n	8008e26 <__gethex+0x26a>
 8008e4a:	9801      	ldr	r0, [sp, #4]
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7fe f8cf 	bl	8006ff0 <_Bfree>
 8008e52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e54:	2300      	movs	r3, #0
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	2550      	movs	r5, #80	@ 0x50
 8008e5a:	e72b      	b.n	8008cb4 <__gethex+0xf8>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f3      	bne.n	8008e4a <__gethex+0x28e>
 8008e62:	e7e0      	b.n	8008e26 <__gethex+0x26a>
 8008e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1dd      	bne.n	8008e26 <__gethex+0x26a>
 8008e6a:	e7ee      	b.n	8008e4a <__gethex+0x28e>
 8008e6c:	08009a70 	.word	0x08009a70
 8008e70:	08009909 	.word	0x08009909
 8008e74:	08009c1e 	.word	0x08009c1e
 8008e78:	1e6f      	subs	r7, r5, #1
 8008e7a:	f1b9 0f00 	cmp.w	r9, #0
 8008e7e:	d130      	bne.n	8008ee2 <__gethex+0x326>
 8008e80:	b127      	cbz	r7, 8008e8c <__gethex+0x2d0>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7fe fd04 	bl	8007892 <__any_on>
 8008e8a:	4681      	mov	r9, r0
 8008e8c:	117a      	asrs	r2, r7, #5
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e94:	f007 071f 	and.w	r7, r7, #31
 8008e98:	40bb      	lsls	r3, r7
 8008e9a:	4213      	tst	r3, r2
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	bf18      	it	ne
 8008ea2:	f049 0902 	orrne.w	r9, r9, #2
 8008ea6:	f7ff fe21 	bl	8008aec <rshift>
 8008eaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008eae:	1b76      	subs	r6, r6, r5
 8008eb0:	2502      	movs	r5, #2
 8008eb2:	f1b9 0f00 	cmp.w	r9, #0
 8008eb6:	d047      	beq.n	8008f48 <__gethex+0x38c>
 8008eb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d015      	beq.n	8008eec <__gethex+0x330>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d017      	beq.n	8008ef4 <__gethex+0x338>
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d109      	bne.n	8008edc <__gethex+0x320>
 8008ec8:	f019 0f02 	tst.w	r9, #2
 8008ecc:	d006      	beq.n	8008edc <__gethex+0x320>
 8008ece:	f8da 3000 	ldr.w	r3, [sl]
 8008ed2:	ea49 0903 	orr.w	r9, r9, r3
 8008ed6:	f019 0f01 	tst.w	r9, #1
 8008eda:	d10e      	bne.n	8008efa <__gethex+0x33e>
 8008edc:	f045 0510 	orr.w	r5, r5, #16
 8008ee0:	e032      	b.n	8008f48 <__gethex+0x38c>
 8008ee2:	f04f 0901 	mov.w	r9, #1
 8008ee6:	e7d1      	b.n	8008e8c <__gethex+0x2d0>
 8008ee8:	2501      	movs	r5, #1
 8008eea:	e7e2      	b.n	8008eb2 <__gethex+0x2f6>
 8008eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eee:	f1c3 0301 	rsb	r3, r3, #1
 8008ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0f0      	beq.n	8008edc <__gethex+0x320>
 8008efa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008efe:	f104 0314 	add.w	r3, r4, #20
 8008f02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f0a:	f04f 0c00 	mov.w	ip, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f18:	d01b      	beq.n	8008f52 <__gethex+0x396>
 8008f1a:	3201      	adds	r2, #1
 8008f1c:	6002      	str	r2, [r0, #0]
 8008f1e:	2d02      	cmp	r5, #2
 8008f20:	f104 0314 	add.w	r3, r4, #20
 8008f24:	d13c      	bne.n	8008fa0 <__gethex+0x3e4>
 8008f26:	f8d8 2000 	ldr.w	r2, [r8]
 8008f2a:	3a01      	subs	r2, #1
 8008f2c:	42b2      	cmp	r2, r6
 8008f2e:	d109      	bne.n	8008f44 <__gethex+0x388>
 8008f30:	1171      	asrs	r1, r6, #5
 8008f32:	2201      	movs	r2, #1
 8008f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f38:	f006 061f 	and.w	r6, r6, #31
 8008f3c:	fa02 f606 	lsl.w	r6, r2, r6
 8008f40:	421e      	tst	r6, r3
 8008f42:	d13a      	bne.n	8008fba <__gethex+0x3fe>
 8008f44:	f045 0520 	orr.w	r5, r5, #32
 8008f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f4a:	601c      	str	r4, [r3, #0]
 8008f4c:	9b02      	ldr	r3, [sp, #8]
 8008f4e:	601f      	str	r7, [r3, #0]
 8008f50:	e6b0      	b.n	8008cb4 <__gethex+0xf8>
 8008f52:	4299      	cmp	r1, r3
 8008f54:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f58:	d8d9      	bhi.n	8008f0e <__gethex+0x352>
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	459b      	cmp	fp, r3
 8008f5e:	db17      	blt.n	8008f90 <__gethex+0x3d4>
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	9801      	ldr	r0, [sp, #4]
 8008f64:	3101      	adds	r1, #1
 8008f66:	f7fe f803 	bl	8006f70 <_Balloc>
 8008f6a:	4681      	mov	r9, r0
 8008f6c:	b918      	cbnz	r0, 8008f76 <__gethex+0x3ba>
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd8 <__gethex+0x41c>)
 8008f70:	4602      	mov	r2, r0
 8008f72:	2184      	movs	r1, #132	@ 0x84
 8008f74:	e6c5      	b.n	8008d02 <__gethex+0x146>
 8008f76:	6922      	ldr	r2, [r4, #16]
 8008f78:	3202      	adds	r2, #2
 8008f7a:	f104 010c 	add.w	r1, r4, #12
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	300c      	adds	r0, #12
 8008f82:	f7ff fd6b 	bl	8008a5c <memcpy>
 8008f86:	4621      	mov	r1, r4
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	f7fe f831 	bl	8006ff0 <_Bfree>
 8008f8e:	464c      	mov	r4, r9
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f98:	6122      	str	r2, [r4, #16]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	615a      	str	r2, [r3, #20]
 8008f9e:	e7be      	b.n	8008f1e <__gethex+0x362>
 8008fa0:	6922      	ldr	r2, [r4, #16]
 8008fa2:	455a      	cmp	r2, fp
 8008fa4:	dd0b      	ble.n	8008fbe <__gethex+0x402>
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f7ff fd9f 	bl	8008aec <rshift>
 8008fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fb2:	3701      	adds	r7, #1
 8008fb4:	42bb      	cmp	r3, r7
 8008fb6:	f6ff aee0 	blt.w	8008d7a <__gethex+0x1be>
 8008fba:	2501      	movs	r5, #1
 8008fbc:	e7c2      	b.n	8008f44 <__gethex+0x388>
 8008fbe:	f016 061f 	ands.w	r6, r6, #31
 8008fc2:	d0fa      	beq.n	8008fba <__gethex+0x3fe>
 8008fc4:	4453      	add	r3, sl
 8008fc6:	f1c6 0620 	rsb	r6, r6, #32
 8008fca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fce:	f7fe f8c1 	bl	8007154 <__hi0bits>
 8008fd2:	42b0      	cmp	r0, r6
 8008fd4:	dbe7      	blt.n	8008fa6 <__gethex+0x3ea>
 8008fd6:	e7f0      	b.n	8008fba <__gethex+0x3fe>
 8008fd8:	08009909 	.word	0x08009909

08008fdc <L_shift>:
 8008fdc:	f1c2 0208 	rsb	r2, r2, #8
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	b570      	push	{r4, r5, r6, lr}
 8008fe4:	f1c2 0620 	rsb	r6, r2, #32
 8008fe8:	6843      	ldr	r3, [r0, #4]
 8008fea:	6804      	ldr	r4, [r0, #0]
 8008fec:	fa03 f506 	lsl.w	r5, r3, r6
 8008ff0:	432c      	orrs	r4, r5
 8008ff2:	40d3      	lsrs	r3, r2
 8008ff4:	6004      	str	r4, [r0, #0]
 8008ff6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ffa:	4288      	cmp	r0, r1
 8008ffc:	d3f4      	bcc.n	8008fe8 <L_shift+0xc>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}

08009000 <__match>:
 8009000:	b530      	push	{r4, r5, lr}
 8009002:	6803      	ldr	r3, [r0, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800900a:	b914      	cbnz	r4, 8009012 <__match+0x12>
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	2001      	movs	r0, #1
 8009010:	bd30      	pop	{r4, r5, pc}
 8009012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009016:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800901a:	2d19      	cmp	r5, #25
 800901c:	bf98      	it	ls
 800901e:	3220      	addls	r2, #32
 8009020:	42a2      	cmp	r2, r4
 8009022:	d0f0      	beq.n	8009006 <__match+0x6>
 8009024:	2000      	movs	r0, #0
 8009026:	e7f3      	b.n	8009010 <__match+0x10>

08009028 <__hexnan>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	680b      	ldr	r3, [r1, #0]
 800902e:	6801      	ldr	r1, [r0, #0]
 8009030:	115e      	asrs	r6, r3, #5
 8009032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009036:	f013 031f 	ands.w	r3, r3, #31
 800903a:	b087      	sub	sp, #28
 800903c:	bf18      	it	ne
 800903e:	3604      	addne	r6, #4
 8009040:	2500      	movs	r5, #0
 8009042:	1f37      	subs	r7, r6, #4
 8009044:	4682      	mov	sl, r0
 8009046:	4690      	mov	r8, r2
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f846 5c04 	str.w	r5, [r6, #-4]
 800904e:	46b9      	mov	r9, r7
 8009050:	463c      	mov	r4, r7
 8009052:	9502      	str	r5, [sp, #8]
 8009054:	46ab      	mov	fp, r5
 8009056:	784a      	ldrb	r2, [r1, #1]
 8009058:	1c4b      	adds	r3, r1, #1
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	b342      	cbz	r2, 80090b0 <__hexnan+0x88>
 800905e:	4610      	mov	r0, r2
 8009060:	9105      	str	r1, [sp, #20]
 8009062:	9204      	str	r2, [sp, #16]
 8009064:	f7ff fd94 	bl	8008b90 <__hexdig_fun>
 8009068:	2800      	cmp	r0, #0
 800906a:	d151      	bne.n	8009110 <__hexnan+0xe8>
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	9905      	ldr	r1, [sp, #20]
 8009070:	2a20      	cmp	r2, #32
 8009072:	d818      	bhi.n	80090a6 <__hexnan+0x7e>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	459b      	cmp	fp, r3
 8009078:	dd13      	ble.n	80090a2 <__hexnan+0x7a>
 800907a:	454c      	cmp	r4, r9
 800907c:	d206      	bcs.n	800908c <__hexnan+0x64>
 800907e:	2d07      	cmp	r5, #7
 8009080:	dc04      	bgt.n	800908c <__hexnan+0x64>
 8009082:	462a      	mov	r2, r5
 8009084:	4649      	mov	r1, r9
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff ffa8 	bl	8008fdc <L_shift>
 800908c:	4544      	cmp	r4, r8
 800908e:	d952      	bls.n	8009136 <__hexnan+0x10e>
 8009090:	2300      	movs	r3, #0
 8009092:	f1a4 0904 	sub.w	r9, r4, #4
 8009096:	f844 3c04 	str.w	r3, [r4, #-4]
 800909a:	f8cd b008 	str.w	fp, [sp, #8]
 800909e:	464c      	mov	r4, r9
 80090a0:	461d      	mov	r5, r3
 80090a2:	9903      	ldr	r1, [sp, #12]
 80090a4:	e7d7      	b.n	8009056 <__hexnan+0x2e>
 80090a6:	2a29      	cmp	r2, #41	@ 0x29
 80090a8:	d157      	bne.n	800915a <__hexnan+0x132>
 80090aa:	3102      	adds	r1, #2
 80090ac:	f8ca 1000 	str.w	r1, [sl]
 80090b0:	f1bb 0f00 	cmp.w	fp, #0
 80090b4:	d051      	beq.n	800915a <__hexnan+0x132>
 80090b6:	454c      	cmp	r4, r9
 80090b8:	d206      	bcs.n	80090c8 <__hexnan+0xa0>
 80090ba:	2d07      	cmp	r5, #7
 80090bc:	dc04      	bgt.n	80090c8 <__hexnan+0xa0>
 80090be:	462a      	mov	r2, r5
 80090c0:	4649      	mov	r1, r9
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ff8a 	bl	8008fdc <L_shift>
 80090c8:	4544      	cmp	r4, r8
 80090ca:	d936      	bls.n	800913a <__hexnan+0x112>
 80090cc:	f1a8 0204 	sub.w	r2, r8, #4
 80090d0:	4623      	mov	r3, r4
 80090d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80090d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80090da:	429f      	cmp	r7, r3
 80090dc:	d2f9      	bcs.n	80090d2 <__hexnan+0xaa>
 80090de:	1b3b      	subs	r3, r7, r4
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	3304      	adds	r3, #4
 80090e6:	3401      	adds	r4, #1
 80090e8:	3e03      	subs	r6, #3
 80090ea:	42b4      	cmp	r4, r6
 80090ec:	bf88      	it	hi
 80090ee:	2304      	movhi	r3, #4
 80090f0:	4443      	add	r3, r8
 80090f2:	2200      	movs	r2, #0
 80090f4:	f843 2b04 	str.w	r2, [r3], #4
 80090f8:	429f      	cmp	r7, r3
 80090fa:	d2fb      	bcs.n	80090f4 <__hexnan+0xcc>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	b91b      	cbnz	r3, 8009108 <__hexnan+0xe0>
 8009100:	4547      	cmp	r7, r8
 8009102:	d128      	bne.n	8009156 <__hexnan+0x12e>
 8009104:	2301      	movs	r3, #1
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	2005      	movs	r0, #5
 800910a:	b007      	add	sp, #28
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	3501      	adds	r5, #1
 8009112:	2d08      	cmp	r5, #8
 8009114:	f10b 0b01 	add.w	fp, fp, #1
 8009118:	dd06      	ble.n	8009128 <__hexnan+0x100>
 800911a:	4544      	cmp	r4, r8
 800911c:	d9c1      	bls.n	80090a2 <__hexnan+0x7a>
 800911e:	2300      	movs	r3, #0
 8009120:	f844 3c04 	str.w	r3, [r4, #-4]
 8009124:	2501      	movs	r5, #1
 8009126:	3c04      	subs	r4, #4
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	f000 000f 	and.w	r0, r0, #15
 800912e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	e7b5      	b.n	80090a2 <__hexnan+0x7a>
 8009136:	2508      	movs	r5, #8
 8009138:	e7b3      	b.n	80090a2 <__hexnan+0x7a>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0dd      	beq.n	80090fc <__hexnan+0xd4>
 8009140:	f1c3 0320 	rsb	r3, r3, #32
 8009144:	f04f 32ff 	mov.w	r2, #4294967295
 8009148:	40da      	lsrs	r2, r3
 800914a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800914e:	4013      	ands	r3, r2
 8009150:	f846 3c04 	str.w	r3, [r6, #-4]
 8009154:	e7d2      	b.n	80090fc <__hexnan+0xd4>
 8009156:	3f04      	subs	r7, #4
 8009158:	e7d0      	b.n	80090fc <__hexnan+0xd4>
 800915a:	2004      	movs	r0, #4
 800915c:	e7d5      	b.n	800910a <__hexnan+0xe2>

0800915e <__ascii_mbtowc>:
 800915e:	b082      	sub	sp, #8
 8009160:	b901      	cbnz	r1, 8009164 <__ascii_mbtowc+0x6>
 8009162:	a901      	add	r1, sp, #4
 8009164:	b142      	cbz	r2, 8009178 <__ascii_mbtowc+0x1a>
 8009166:	b14b      	cbz	r3, 800917c <__ascii_mbtowc+0x1e>
 8009168:	7813      	ldrb	r3, [r2, #0]
 800916a:	600b      	str	r3, [r1, #0]
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	1e10      	subs	r0, r2, #0
 8009170:	bf18      	it	ne
 8009172:	2001      	movne	r0, #1
 8009174:	b002      	add	sp, #8
 8009176:	4770      	bx	lr
 8009178:	4610      	mov	r0, r2
 800917a:	e7fb      	b.n	8009174 <__ascii_mbtowc+0x16>
 800917c:	f06f 0001 	mvn.w	r0, #1
 8009180:	e7f8      	b.n	8009174 <__ascii_mbtowc+0x16>

08009182 <_realloc_r>:
 8009182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	4680      	mov	r8, r0
 8009188:	4615      	mov	r5, r2
 800918a:	460c      	mov	r4, r1
 800918c:	b921      	cbnz	r1, 8009198 <_realloc_r+0x16>
 800918e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	4611      	mov	r1, r2
 8009194:	f7fd be60 	b.w	8006e58 <_malloc_r>
 8009198:	b92a      	cbnz	r2, 80091a6 <_realloc_r+0x24>
 800919a:	f7fd fde9 	bl	8006d70 <_free_r>
 800919e:	2400      	movs	r4, #0
 80091a0:	4620      	mov	r0, r4
 80091a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a6:	f000 f840 	bl	800922a <_malloc_usable_size_r>
 80091aa:	4285      	cmp	r5, r0
 80091ac:	4606      	mov	r6, r0
 80091ae:	d802      	bhi.n	80091b6 <_realloc_r+0x34>
 80091b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091b4:	d8f4      	bhi.n	80091a0 <_realloc_r+0x1e>
 80091b6:	4629      	mov	r1, r5
 80091b8:	4640      	mov	r0, r8
 80091ba:	f7fd fe4d 	bl	8006e58 <_malloc_r>
 80091be:	4607      	mov	r7, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0ec      	beq.n	800919e <_realloc_r+0x1c>
 80091c4:	42b5      	cmp	r5, r6
 80091c6:	462a      	mov	r2, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	bf28      	it	cs
 80091cc:	4632      	movcs	r2, r6
 80091ce:	f7ff fc45 	bl	8008a5c <memcpy>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4640      	mov	r0, r8
 80091d6:	f7fd fdcb 	bl	8006d70 <_free_r>
 80091da:	463c      	mov	r4, r7
 80091dc:	e7e0      	b.n	80091a0 <_realloc_r+0x1e>

080091de <__ascii_wctomb>:
 80091de:	4603      	mov	r3, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	b141      	cbz	r1, 80091f6 <__ascii_wctomb+0x18>
 80091e4:	2aff      	cmp	r2, #255	@ 0xff
 80091e6:	d904      	bls.n	80091f2 <__ascii_wctomb+0x14>
 80091e8:	228a      	movs	r2, #138	@ 0x8a
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	4770      	bx	lr
 80091f2:	700a      	strb	r2, [r1, #0]
 80091f4:	2001      	movs	r0, #1
 80091f6:	4770      	bx	lr

080091f8 <fiprintf>:
 80091f8:	b40e      	push	{r1, r2, r3}
 80091fa:	b503      	push	{r0, r1, lr}
 80091fc:	4601      	mov	r1, r0
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	4805      	ldr	r0, [pc, #20]	@ (8009218 <fiprintf+0x20>)
 8009202:	f853 2b04 	ldr.w	r2, [r3], #4
 8009206:	6800      	ldr	r0, [r0, #0]
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f000 f83f 	bl	800928c <_vfiprintf_r>
 800920e:	b002      	add	sp, #8
 8009210:	f85d eb04 	ldr.w	lr, [sp], #4
 8009214:	b003      	add	sp, #12
 8009216:	4770      	bx	lr
 8009218:	20000024 	.word	0x20000024

0800921c <abort>:
 800921c:	b508      	push	{r3, lr}
 800921e:	2006      	movs	r0, #6
 8009220:	f000 fa08 	bl	8009634 <raise>
 8009224:	2001      	movs	r0, #1
 8009226:	f7f8 ff69 	bl	80020fc <_exit>

0800922a <_malloc_usable_size_r>:
 800922a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922e:	1f18      	subs	r0, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	bfbc      	itt	lt
 8009234:	580b      	ldrlt	r3, [r1, r0]
 8009236:	18c0      	addlt	r0, r0, r3
 8009238:	4770      	bx	lr

0800923a <__sfputc_r>:
 800923a:	6893      	ldr	r3, [r2, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	b410      	push	{r4}
 8009242:	6093      	str	r3, [r2, #8]
 8009244:	da08      	bge.n	8009258 <__sfputc_r+0x1e>
 8009246:	6994      	ldr	r4, [r2, #24]
 8009248:	42a3      	cmp	r3, r4
 800924a:	db01      	blt.n	8009250 <__sfputc_r+0x16>
 800924c:	290a      	cmp	r1, #10
 800924e:	d103      	bne.n	8009258 <__sfputc_r+0x1e>
 8009250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009254:	f000 b932 	b.w	80094bc <__swbuf_r>
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	1c58      	adds	r0, r3, #1
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	7019      	strb	r1, [r3, #0]
 8009260:	4608      	mov	r0, r1
 8009262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009266:	4770      	bx	lr

08009268 <__sfputs_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	4614      	mov	r4, r2
 8009270:	18d5      	adds	r5, r2, r3
 8009272:	42ac      	cmp	r4, r5
 8009274:	d101      	bne.n	800927a <__sfputs_r+0x12>
 8009276:	2000      	movs	r0, #0
 8009278:	e007      	b.n	800928a <__sfputs_r+0x22>
 800927a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927e:	463a      	mov	r2, r7
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ffda 	bl	800923a <__sfputc_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d1f3      	bne.n	8009272 <__sfputs_r+0xa>
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460d      	mov	r5, r1
 8009292:	b09d      	sub	sp, #116	@ 0x74
 8009294:	4614      	mov	r4, r2
 8009296:	4698      	mov	r8, r3
 8009298:	4606      	mov	r6, r0
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6a03      	ldr	r3, [r0, #32]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f7fc fdf8 	bl	8005e94 <__sinit>
 80092a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	d405      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092aa:	89ab      	ldrh	r3, [r5, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d402      	bmi.n	80092b6 <_vfiprintf_r+0x2a>
 80092b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b2:	f7fc ff06 	bl	80060c2 <__retarget_lock_acquire_recursive>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	071b      	lsls	r3, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <_vfiprintf_r+0x34>
 80092bc:	692b      	ldr	r3, [r5, #16]
 80092be:	b99b      	cbnz	r3, 80092e8 <_vfiprintf_r+0x5c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f000 f938 	bl	8009538 <__swsetup_r>
 80092c8:	b170      	cbz	r0, 80092e8 <_vfiprintf_r+0x5c>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092cc:	07dc      	lsls	r4, r3, #31
 80092ce:	d504      	bpl.n	80092da <_vfiprintf_r+0x4e>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	0598      	lsls	r0, r3, #22
 80092de:	d4f7      	bmi.n	80092d0 <_vfiprintf_r+0x44>
 80092e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e2:	f7fc feef 	bl	80060c4 <__retarget_lock_release_recursive>
 80092e6:	e7f3      	b.n	80092d0 <_vfiprintf_r+0x44>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ec:	2320      	movs	r3, #32
 80092ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f6:	2330      	movs	r3, #48	@ 0x30
 80092f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094a8 <_vfiprintf_r+0x21c>
 80092fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009300:	f04f 0901 	mov.w	r9, #1
 8009304:	4623      	mov	r3, r4
 8009306:	469a      	mov	sl, r3
 8009308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930c:	b10a      	cbz	r2, 8009312 <_vfiprintf_r+0x86>
 800930e:	2a25      	cmp	r2, #37	@ 0x25
 8009310:	d1f9      	bne.n	8009306 <_vfiprintf_r+0x7a>
 8009312:	ebba 0b04 	subs.w	fp, sl, r4
 8009316:	d00b      	beq.n	8009330 <_vfiprintf_r+0xa4>
 8009318:	465b      	mov	r3, fp
 800931a:	4622      	mov	r2, r4
 800931c:	4629      	mov	r1, r5
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffa2 	bl	8009268 <__sfputs_r>
 8009324:	3001      	adds	r0, #1
 8009326:	f000 80a7 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800932a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932c:	445a      	add	r2, fp
 800932e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009330:	f89a 3000 	ldrb.w	r3, [sl]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 809f 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 800933a:	2300      	movs	r3, #0
 800933c:	f04f 32ff 	mov.w	r2, #4294967295
 8009340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009344:	f10a 0a01 	add.w	sl, sl, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009350:	931a      	str	r3, [sp, #104]	@ 0x68
 8009352:	4654      	mov	r4, sl
 8009354:	2205      	movs	r2, #5
 8009356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935a:	4853      	ldr	r0, [pc, #332]	@ (80094a8 <_vfiprintf_r+0x21c>)
 800935c:	f7f6 ff58 	bl	8000210 <memchr>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	b9d8      	cbnz	r0, 800939c <_vfiprintf_r+0x110>
 8009364:	06d1      	lsls	r1, r2, #27
 8009366:	bf44      	itt	mi
 8009368:	2320      	movmi	r3, #32
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800936e:	0713      	lsls	r3, r2, #28
 8009370:	bf44      	itt	mi
 8009372:	232b      	movmi	r3, #43	@ 0x2b
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009378:	f89a 3000 	ldrb.w	r3, [sl]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d015      	beq.n	80093ac <_vfiprintf_r+0x120>
 8009380:	9a07      	ldr	r2, [sp, #28]
 8009382:	4654      	mov	r4, sl
 8009384:	2000      	movs	r0, #0
 8009386:	f04f 0c0a 	mov.w	ip, #10
 800938a:	4621      	mov	r1, r4
 800938c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009390:	3b30      	subs	r3, #48	@ 0x30
 8009392:	2b09      	cmp	r3, #9
 8009394:	d94b      	bls.n	800942e <_vfiprintf_r+0x1a2>
 8009396:	b1b0      	cbz	r0, 80093c6 <_vfiprintf_r+0x13a>
 8009398:	9207      	str	r2, [sp, #28]
 800939a:	e014      	b.n	80093c6 <_vfiprintf_r+0x13a>
 800939c:	eba0 0308 	sub.w	r3, r0, r8
 80093a0:	fa09 f303 	lsl.w	r3, r9, r3
 80093a4:	4313      	orrs	r3, r2
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	46a2      	mov	sl, r4
 80093aa:	e7d2      	b.n	8009352 <_vfiprintf_r+0xc6>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d19      	adds	r1, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9103      	str	r1, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbb      	ittet	lt
 80093b8:	425b      	neglt	r3, r3
 80093ba:	f042 0202 	orrlt.w	r2, r2, #2
 80093be:	9307      	strge	r3, [sp, #28]
 80093c0:	9307      	strlt	r3, [sp, #28]
 80093c2:	bfb8      	it	lt
 80093c4:	9204      	strlt	r2, [sp, #16]
 80093c6:	7823      	ldrb	r3, [r4, #0]
 80093c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093ca:	d10a      	bne.n	80093e2 <_vfiprintf_r+0x156>
 80093cc:	7863      	ldrb	r3, [r4, #1]
 80093ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d0:	d132      	bne.n	8009438 <_vfiprintf_r+0x1ac>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	1d1a      	adds	r2, r3, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	9203      	str	r2, [sp, #12]
 80093da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093de:	3402      	adds	r4, #2
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094b8 <_vfiprintf_r+0x22c>
 80093e6:	7821      	ldrb	r1, [r4, #0]
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7f6 ff10 	bl	8000210 <memchr>
 80093f0:	b138      	cbz	r0, 8009402 <_vfiprintf_r+0x176>
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	eba0 000a 	sub.w	r0, r0, sl
 80093f8:	2240      	movs	r2, #64	@ 0x40
 80093fa:	4082      	lsls	r2, r0
 80093fc:	4313      	orrs	r3, r2
 80093fe:	3401      	adds	r4, #1
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	4829      	ldr	r0, [pc, #164]	@ (80094ac <_vfiprintf_r+0x220>)
 8009408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800940c:	2206      	movs	r2, #6
 800940e:	f7f6 feff 	bl	8000210 <memchr>
 8009412:	2800      	cmp	r0, #0
 8009414:	d03f      	beq.n	8009496 <_vfiprintf_r+0x20a>
 8009416:	4b26      	ldr	r3, [pc, #152]	@ (80094b0 <_vfiprintf_r+0x224>)
 8009418:	bb1b      	cbnz	r3, 8009462 <_vfiprintf_r+0x1d6>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	3307      	adds	r3, #7
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	3308      	adds	r3, #8
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	443b      	add	r3, r7
 800942a:	9309      	str	r3, [sp, #36]	@ 0x24
 800942c:	e76a      	b.n	8009304 <_vfiprintf_r+0x78>
 800942e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009432:	460c      	mov	r4, r1
 8009434:	2001      	movs	r0, #1
 8009436:	e7a8      	b.n	800938a <_vfiprintf_r+0xfe>
 8009438:	2300      	movs	r3, #0
 800943a:	3401      	adds	r4, #1
 800943c:	9305      	str	r3, [sp, #20]
 800943e:	4619      	mov	r1, r3
 8009440:	f04f 0c0a 	mov.w	ip, #10
 8009444:	4620      	mov	r0, r4
 8009446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944a:	3a30      	subs	r2, #48	@ 0x30
 800944c:	2a09      	cmp	r2, #9
 800944e:	d903      	bls.n	8009458 <_vfiprintf_r+0x1cc>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0c6      	beq.n	80093e2 <_vfiprintf_r+0x156>
 8009454:	9105      	str	r1, [sp, #20]
 8009456:	e7c4      	b.n	80093e2 <_vfiprintf_r+0x156>
 8009458:	fb0c 2101 	mla	r1, ip, r1, r2
 800945c:	4604      	mov	r4, r0
 800945e:	2301      	movs	r3, #1
 8009460:	e7f0      	b.n	8009444 <_vfiprintf_r+0x1b8>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4b12      	ldr	r3, [pc, #72]	@ (80094b4 <_vfiprintf_r+0x228>)
 800946a:	a904      	add	r1, sp, #16
 800946c:	4630      	mov	r0, r6
 800946e:	f7fb feb9 	bl	80051e4 <_printf_float>
 8009472:	4607      	mov	r7, r0
 8009474:	1c78      	adds	r0, r7, #1
 8009476:	d1d6      	bne.n	8009426 <_vfiprintf_r+0x19a>
 8009478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800947a:	07d9      	lsls	r1, r3, #31
 800947c:	d405      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d402      	bmi.n	800948a <_vfiprintf_r+0x1fe>
 8009484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009486:	f7fc fe1d 	bl	80060c4 <__retarget_lock_release_recursive>
 800948a:	89ab      	ldrh	r3, [r5, #12]
 800948c:	065b      	lsls	r3, r3, #25
 800948e:	f53f af1f 	bmi.w	80092d0 <_vfiprintf_r+0x44>
 8009492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009494:	e71e      	b.n	80092d4 <_vfiprintf_r+0x48>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b05      	ldr	r3, [pc, #20]	@ (80094b4 <_vfiprintf_r+0x228>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7fc f937 	bl	8005714 <_printf_i>
 80094a6:	e7e4      	b.n	8009472 <_vfiprintf_r+0x1e6>
 80094a8:	08009bc9 	.word	0x08009bc9
 80094ac:	08009bd3 	.word	0x08009bd3
 80094b0:	080051e5 	.word	0x080051e5
 80094b4:	08009269 	.word	0x08009269
 80094b8:	08009bcf 	.word	0x08009bcf

080094bc <__swbuf_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	460e      	mov	r6, r1
 80094c0:	4614      	mov	r4, r2
 80094c2:	4605      	mov	r5, r0
 80094c4:	b118      	cbz	r0, 80094ce <__swbuf_r+0x12>
 80094c6:	6a03      	ldr	r3, [r0, #32]
 80094c8:	b90b      	cbnz	r3, 80094ce <__swbuf_r+0x12>
 80094ca:	f7fc fce3 	bl	8005e94 <__sinit>
 80094ce:	69a3      	ldr	r3, [r4, #24]
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	071a      	lsls	r2, r3, #28
 80094d6:	d501      	bpl.n	80094dc <__swbuf_r+0x20>
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	b943      	cbnz	r3, 80094ee <__swbuf_r+0x32>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f82a 	bl	8009538 <__swsetup_r>
 80094e4:	b118      	cbz	r0, 80094ee <__swbuf_r+0x32>
 80094e6:	f04f 37ff 	mov.w	r7, #4294967295
 80094ea:	4638      	mov	r0, r7
 80094ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	1a98      	subs	r0, r3, r2
 80094f4:	6963      	ldr	r3, [r4, #20]
 80094f6:	b2f6      	uxtb	r6, r6
 80094f8:	4283      	cmp	r3, r0
 80094fa:	4637      	mov	r7, r6
 80094fc:	dc05      	bgt.n	800950a <__swbuf_r+0x4e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff fa47 	bl	8008994 <_fflush_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d1ed      	bne.n	80094e6 <__swbuf_r+0x2a>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	3b01      	subs	r3, #1
 800950e:	60a3      	str	r3, [r4, #8]
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	701e      	strb	r6, [r3, #0]
 8009518:	6962      	ldr	r2, [r4, #20]
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	429a      	cmp	r2, r3
 800951e:	d004      	beq.n	800952a <__swbuf_r+0x6e>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	07db      	lsls	r3, r3, #31
 8009524:	d5e1      	bpl.n	80094ea <__swbuf_r+0x2e>
 8009526:	2e0a      	cmp	r6, #10
 8009528:	d1df      	bne.n	80094ea <__swbuf_r+0x2e>
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f7ff fa31 	bl	8008994 <_fflush_r>
 8009532:	2800      	cmp	r0, #0
 8009534:	d0d9      	beq.n	80094ea <__swbuf_r+0x2e>
 8009536:	e7d6      	b.n	80094e6 <__swbuf_r+0x2a>

08009538 <__swsetup_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4b29      	ldr	r3, [pc, #164]	@ (80095e0 <__swsetup_r+0xa8>)
 800953c:	4605      	mov	r5, r0
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	460c      	mov	r4, r1
 8009542:	b118      	cbz	r0, 800954c <__swsetup_r+0x14>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <__swsetup_r+0x14>
 8009548:	f7fc fca4 	bl	8005e94 <__sinit>
 800954c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009550:	0719      	lsls	r1, r3, #28
 8009552:	d422      	bmi.n	800959a <__swsetup_r+0x62>
 8009554:	06da      	lsls	r2, r3, #27
 8009556:	d407      	bmi.n	8009568 <__swsetup_r+0x30>
 8009558:	2209      	movs	r2, #9
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	e033      	b.n	80095d0 <__swsetup_r+0x98>
 8009568:	0758      	lsls	r0, r3, #29
 800956a:	d512      	bpl.n	8009592 <__swsetup_r+0x5a>
 800956c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800956e:	b141      	cbz	r1, 8009582 <__swsetup_r+0x4a>
 8009570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009574:	4299      	cmp	r1, r3
 8009576:	d002      	beq.n	800957e <__swsetup_r+0x46>
 8009578:	4628      	mov	r0, r5
 800957a:	f7fd fbf9 	bl	8006d70 <_free_r>
 800957e:	2300      	movs	r3, #0
 8009580:	6363      	str	r3, [r4, #52]	@ 0x34
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	2300      	movs	r3, #0
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f043 0308 	orr.w	r3, r3, #8
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	b94b      	cbnz	r3, 80095b2 <__swsetup_r+0x7a>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095a8:	d003      	beq.n	80095b2 <__swsetup_r+0x7a>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 f883 	bl	80096b8 <__smakebuf_r>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	f013 0201 	ands.w	r2, r3, #1
 80095ba:	d00a      	beq.n	80095d2 <__swsetup_r+0x9a>
 80095bc:	2200      	movs	r2, #0
 80095be:	60a2      	str	r2, [r4, #8]
 80095c0:	6962      	ldr	r2, [r4, #20]
 80095c2:	4252      	negs	r2, r2
 80095c4:	61a2      	str	r2, [r4, #24]
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	b942      	cbnz	r2, 80095dc <__swsetup_r+0xa4>
 80095ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095ce:	d1c5      	bne.n	800955c <__swsetup_r+0x24>
 80095d0:	bd38      	pop	{r3, r4, r5, pc}
 80095d2:	0799      	lsls	r1, r3, #30
 80095d4:	bf58      	it	pl
 80095d6:	6962      	ldrpl	r2, [r4, #20]
 80095d8:	60a2      	str	r2, [r4, #8]
 80095da:	e7f4      	b.n	80095c6 <__swsetup_r+0x8e>
 80095dc:	2000      	movs	r0, #0
 80095de:	e7f7      	b.n	80095d0 <__swsetup_r+0x98>
 80095e0:	20000024 	.word	0x20000024

080095e4 <_raise_r>:
 80095e4:	291f      	cmp	r1, #31
 80095e6:	b538      	push	{r3, r4, r5, lr}
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	d904      	bls.n	80095f8 <_raise_r+0x14>
 80095ee:	2316      	movs	r3, #22
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095fa:	b112      	cbz	r2, 8009602 <_raise_r+0x1e>
 80095fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009600:	b94b      	cbnz	r3, 8009616 <_raise_r+0x32>
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f830 	bl	8009668 <_getpid_r>
 8009608:	4622      	mov	r2, r4
 800960a:	4601      	mov	r1, r0
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009612:	f000 b817 	b.w	8009644 <_kill_r>
 8009616:	2b01      	cmp	r3, #1
 8009618:	d00a      	beq.n	8009630 <_raise_r+0x4c>
 800961a:	1c59      	adds	r1, r3, #1
 800961c:	d103      	bne.n	8009626 <_raise_r+0x42>
 800961e:	2316      	movs	r3, #22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	2001      	movs	r0, #1
 8009624:	e7e7      	b.n	80095f6 <_raise_r+0x12>
 8009626:	2100      	movs	r1, #0
 8009628:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800962c:	4620      	mov	r0, r4
 800962e:	4798      	blx	r3
 8009630:	2000      	movs	r0, #0
 8009632:	e7e0      	b.n	80095f6 <_raise_r+0x12>

08009634 <raise>:
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <raise+0xc>)
 8009636:	4601      	mov	r1, r0
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f7ff bfd3 	b.w	80095e4 <_raise_r>
 800963e:	bf00      	nop
 8009640:	20000024 	.word	0x20000024

08009644 <_kill_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	@ (8009664 <_kill_r+0x20>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	f7f8 fd43 	bl	80020dc <_kill>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d102      	bne.n	8009660 <_kill_r+0x1c>
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	b103      	cbz	r3, 8009660 <_kill_r+0x1c>
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	bd38      	pop	{r3, r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20000488 	.word	0x20000488

08009668 <_getpid_r>:
 8009668:	f7f8 bd30 	b.w	80020cc <_getpid>

0800966c <__swhatbuf_r>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	2900      	cmp	r1, #0
 8009676:	b096      	sub	sp, #88	@ 0x58
 8009678:	4615      	mov	r5, r2
 800967a:	461e      	mov	r6, r3
 800967c:	da0d      	bge.n	800969a <__swhatbuf_r+0x2e>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009684:	f04f 0100 	mov.w	r1, #0
 8009688:	bf14      	ite	ne
 800968a:	2340      	movne	r3, #64	@ 0x40
 800968c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009690:	2000      	movs	r0, #0
 8009692:	6031      	str	r1, [r6, #0]
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	b016      	add	sp, #88	@ 0x58
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	466a      	mov	r2, sp
 800969c:	f000 f848 	bl	8009730 <_fstat_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	dbec      	blt.n	800967e <__swhatbuf_r+0x12>
 80096a4:	9901      	ldr	r1, [sp, #4]
 80096a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ae:	4259      	negs	r1, r3
 80096b0:	4159      	adcs	r1, r3
 80096b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b6:	e7eb      	b.n	8009690 <__swhatbuf_r+0x24>

080096b8 <__smakebuf_r>:
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096bc:	079d      	lsls	r5, r3, #30
 80096be:	4606      	mov	r6, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	d507      	bpl.n	80096d4 <__smakebuf_r+0x1c>
 80096c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	6123      	str	r3, [r4, #16]
 80096cc:	2301      	movs	r3, #1
 80096ce:	6163      	str	r3, [r4, #20]
 80096d0:	b003      	add	sp, #12
 80096d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d4:	ab01      	add	r3, sp, #4
 80096d6:	466a      	mov	r2, sp
 80096d8:	f7ff ffc8 	bl	800966c <__swhatbuf_r>
 80096dc:	9f00      	ldr	r7, [sp, #0]
 80096de:	4605      	mov	r5, r0
 80096e0:	4639      	mov	r1, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7fd fbb8 	bl	8006e58 <_malloc_r>
 80096e8:	b948      	cbnz	r0, 80096fe <__smakebuf_r+0x46>
 80096ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ee:	059a      	lsls	r2, r3, #22
 80096f0:	d4ee      	bmi.n	80096d0 <__smakebuf_r+0x18>
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	f043 0302 	orr.w	r3, r3, #2
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	e7e2      	b.n	80096c4 <__smakebuf_r+0xc>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	6020      	str	r0, [r4, #0]
 8009702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800970e:	b15b      	cbz	r3, 8009728 <__smakebuf_r+0x70>
 8009710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009714:	4630      	mov	r0, r6
 8009716:	f000 f81d 	bl	8009754 <_isatty_r>
 800971a:	b128      	cbz	r0, 8009728 <__smakebuf_r+0x70>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f023 0303 	bic.w	r3, r3, #3
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	431d      	orrs	r5, r3
 800972c:	81a5      	strh	r5, [r4, #12]
 800972e:	e7cf      	b.n	80096d0 <__smakebuf_r+0x18>

08009730 <_fstat_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	@ (8009750 <_fstat_r+0x20>)
 8009734:	2300      	movs	r3, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f7f8 fd2d 	bl	800219c <_fstat>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d102      	bne.n	800974c <_fstat_r+0x1c>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	b103      	cbz	r3, 800974c <_fstat_r+0x1c>
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd38      	pop	{r3, r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	20000488 	.word	0x20000488

08009754 <_isatty_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	@ (8009770 <_isatty_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f8 fd2c 	bl	80021bc <_isatty>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_isatty_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_isatty_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20000488 	.word	0x20000488

08009774 <_init>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr

08009780 <_fini>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr
