
MQ intefejs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b47c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800b650  0800b650  0000c650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc08  0800bc08  0000d358  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc08  0800bc08  0000cc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc10  0800bc10  0000d358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc10  0800bc10  0000cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc14  0800bc14  0000cc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800bc18  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000358  0800bf70  0000d358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800bf70  0000d738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161ec  00000000  00000000  0000d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7a  00000000  00000000  00023574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  000271f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e29  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b53a  00000000  00000000  000292b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001caba  00000000  00000000  000547f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcab3  00000000  00000000  000712ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  0016dda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00173c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000358 	.word	0x20000358
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b634 	.word	0x0800b634

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000035c 	.word	0x2000035c
 800020c:	0800b634 	.word	0x0800b634

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <AirQualityIncicatorInit>:

static ledRow_t loadConfiguration;


void AirQualityIncicatorInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af0a      	add	r7, sp, #40	@ 0x28
	LedRowInit(&loadConfiguration,
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	9308      	str	r3, [sp, #32]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <AirQualityIncicatorInit+0x3c>)
 8001050:	9307      	str	r3, [sp, #28]
 8001052:	2301      	movs	r3, #1
 8001054:	9306      	str	r3, [sp, #24]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <AirQualityIncicatorInit+0x40>)
 8001058:	9305      	str	r3, [sp, #20]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	2310      	movs	r3, #16
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <AirQualityIncicatorInit+0x48>)
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <AirQualityIncicatorInit+0x44>)
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <AirQualityIncicatorInit+0x4c>)
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <AirQualityIncicatorInit+0x50>)
 8001076:	f000 f965 	bl	8001344 <LedRowInit>
					IndicatorYellow1_GPIO_Port, IndicatorYellow1_Pin,
					IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin,
					IndicatorBlue1_GPIO_Port, IndicatorBlue1_Pin,
					IndicatorBlue2_GPIO_Port, IndicatorBlue2_Pin,
					IndicatorBlue3_GPIO_Port, IndicatorBlue3_Pin);
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40022000 	.word	0x40022000
 8001088:	40021800 	.word	0x40021800
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	20000374 	.word	0x20000374

08001098 <SetIndicatorLEDs>:

void SetIndicatorLEDs(float PPM_Value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	LedRowWrite(&loadConfiguration, PPM_Value);
 80010a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SetIndicatorLEDs+0x1c>)
 80010a8:	f000 f97e 	bl	80013a8 <LedRowWrite>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000374 	.word	0x20000374

080010b8 <SetIndicatorLEDsNum>:

void SetIndicatorLEDsNum(const uint8_t num)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	LedRowWriteNum(&loadConfiguration, num);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <SetIndicatorLEDsNum+0x1c>)
 80010c8:	f000 fa20 	bl	800150c <LedRowWriteNum>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000374 	.word	0x20000374

080010d8 <AlarmInit>:


static Buzzer_t loadConfiguration;

void AlarmInit()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	Buzzer_init(&loadConfiguration, Buzzer_out_GPIO_Port, Buzzer_out_Pin);
 80010dc:	2204      	movs	r2, #4
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <AlarmInit+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <AlarmInit+0x18>)
 80010e2:	f000 f8a5 	bl	8001230 <Buzzer_init>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	200003a4 	.word	0x200003a4

080010f4 <AlarmON>:

void AlarmON()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_SET);
 80010f8:	2101      	movs	r1, #1
 80010fa:	4802      	ldr	r0, [pc, #8]	@ (8001104 <AlarmON+0x10>)
 80010fc:	f000 f8ab 	bl	8001256 <BuzzerWritePin>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003a4 	.word	0x200003a4

08001108 <AlarmOFF>:

void AlarmOFF()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	BuzzerWritePin(&loadConfiguration, GPIO_PIN_RESET);
 800110c:	2100      	movs	r1, #0
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <AlarmOFF+0x10>)
 8001110:	f000 f8a1 	bl	8001256 <BuzzerWritePin>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200003a4 	.word	0x200003a4

0800111c <CreateNewButton>:
 */
#include "Button.h"



void CreateNewButton(Button_t* button_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
    button_instance->btn_press_flag = false;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    button_instance->read_button_flag = false;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	709a      	strb	r2, [r3, #2]
    button_instance->btn_press_detect_flag = false;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]

    button_instance->btn_last_state = GPIO_PIN_SET;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	711a      	strb	r2, [r3, #4]
    button_instance->active_state = GPIO_PIN_SET;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	715a      	strb	r2, [r3, #5]
    button_instance->GPIOx = GPIOx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	609a      	str	r2, [r3, #8]
    button_instance->GPIO_Pin = GPIO_Pin;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	819a      	strh	r2, [r3, #12]

    button_instance->button_state = B_IDLE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <ReadButton>:

bool ReadButton(Button_t* button_instance, bool* readEnable)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    if (*readEnable)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d051      	beq.n	800121e <ReadButton+0xb6>
    {
        GPIO_PinState read_pin_status = HAL_GPIO_ReadPin(button_instance->GPIOx, button_instance->GPIO_Pin);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	899b      	ldrh	r3, [r3, #12]
 8001182:	4619      	mov	r1, r3
 8001184:	4610      	mov	r0, r2
 8001186:	f003 f81f 	bl	80041c8 <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

        switch (button_instance->button_state)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b9b      	ldrb	r3, [r3, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d843      	bhi.n	800121e <ReadButton+0xb6>
 8001196:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <ReadButton+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011d3 	.word	0x080011d3
 80011a8:	080011fb 	.word	0x080011fb
        {
            case B_IDLE:

                if (read_pin_status == button_instance->active_state)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	795b      	ldrb	r3, [r3, #5]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d130      	bne.n	8001218 <ReadButton+0xb0>
                {
                	button_instance->button_state = B_DEBOUNCE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	739a      	strb	r2, [r3, #14]
                    button_instance->btn_press_detect_flag = false;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	70da      	strb	r2, [r3, #3]
                }
                break;
 80011c2:	e029      	b.n	8001218 <ReadButton+0xb0>

            case B_DEBOUNCE:

            	button_instance->button_state = B_DETECT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	739a      	strb	r2, [r3, #14]
                button_instance->btn_press_detect_flag = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	70da      	strb	r2, [r3, #3]

                break;
 80011d0:	e025      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT:

                if (read_pin_status == button_instance->active_state)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10a      	bne.n	80011f2 <ReadButton+0x8a>
                {
                    button_instance->btn_press_flag = true;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
                    button_instance->btn_last_state = read_pin_status;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	711a      	strb	r2, [r3, #4]
                    button_instance->btn_press_detect_flag = true;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	70da      	strb	r2, [r3, #3]
                    readEnable = false;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
                }
                button_instance->button_state = B_DETECT_IDLE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	739a      	strb	r2, [r3, #14]
                break;
 80011f8:	e011      	b.n	800121e <ReadButton+0xb6>

            case B_DETECT_IDLE:

            	button_instance->btn_press_detect_flag = false;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	70da      	strb	r2, [r3, #3]
            	button_instance->btn_last_state = read_pin_status;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	711a      	strb	r2, [r3, #4]
            	if (read_pin_status != button_instance->active_state)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	429a      	cmp	r2, r3
 800120e:	d005      	beq.n	800121c <ReadButton+0xb4>
                {
                    button_instance->button_state = B_IDLE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	739a      	strb	r2, [r3, #14]
                }
                break;
 8001216:	e001      	b.n	800121c <ReadButton+0xb4>
                break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <ReadButton+0xb6>
                break;
 800121c:	bf00      	nop
        }
    }
    bool retval = button_instance->btn_press_detect_flag;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	73bb      	strb	r3, [r7, #14]
    return retval;
 8001224:	7bbb      	ldrb	r3, [r7, #14]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop

08001230 <Buzzer_init>:
#include "Buzzer.h"



void Buzzer_init(Buzzer_t* BuzzerStruct, GPIO_TypeDef* gpioPort, uint16_t gpioPin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4613      	mov	r3, r2
 800123c:	80fb      	strh	r3, [r7, #6]
	BuzzerStruct->gpioPort = gpioPort;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]
	BuzzerStruct->gpioPin = gpioPin;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	88fa      	ldrh	r2, [r7, #6]
 8001248:	809a      	strh	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <BuzzerWritePin>:

void BuzzerWritePin(Buzzer_t* BuzzerStruct, GPIO_PinState toWrite)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BuzzerStruct->gpioPort, BuzzerStruct->gpioPin, toWrite);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4619      	mov	r1, r3
 800126e:	f002 ffc3 	bl	80041f8 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <ReadGasSensor>:
{
	//MQ9_init(&MQSetting, MQ_GPIO_Port, MQ9_GPIO_Pin);
}

float ReadGasSensor()
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
	uint16_t rawValue = MQ9_GetRawValue();
 8001280:	f000 f9ca 	bl	8001618 <MQ9_GetRawValue>
 8001284:	4603      	mov	r3, r0
 8001286:	80fb      	strh	r3, [r7, #6]
	float realValue = MQ9_ConverRaw2Real(rawValue);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f9dc 	bl	8001648 <MQ9_ConverRaw2Real>
 8001290:	ed87 0a00 	vstr	s0, [r7]
	return realValue;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <CreateNewSingleLED>:
#include "main.h"
#include "LED_Driver.h"


void CreateNewSingleLED(SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    single_led_instance->GPIOx = GPIOx;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]
    single_led_instance->GPIO_Pin = GPIO_Pin;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	88fa      	ldrh	r2, [r7, #6]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <UpdateSingleLED>:

void UpdateSingleLED(SingleLed* single_led_instance, bool state)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	70fb      	strb	r3, [r7, #3]
	if(state == true)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <UpdateSingleLED+0x24>
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_SET);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 ff86 	bl	80041f8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80012ec:	e007      	b.n	80012fe <UpdateSingleLED+0x34>
		HAL_GPIO_WritePin(single_led_instance->GPIOx, single_led_instance->GPIO_Pin, GPIO_PIN_RESET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f002 ff7d 	bl	80041f8 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <LED_init>:


static SingleLed new_led;

void LED_init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	CreateNewSingleLED(&new_led, Led_out_GPIO_Port, Led_out_Pin);
 800130c:	2208      	movs	r2, #8
 800130e:	4903      	ldr	r1, [pc, #12]	@ (800131c <LED_init+0x14>)
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <LED_init+0x18>)
 8001312:	f7ff ffc7 	bl	80012a4 <CreateNewSingleLED>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000
 8001320:	200003ac 	.word	0x200003ac

08001324 <LED_Drive>:

void LED_Drive(bool state)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	UpdateSingleLED(&new_led, state);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <LED_Drive+0x1c>)
 8001334:	f7ff ffc9 	bl	80012ca <UpdateSingleLED>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003ac 	.word	0x200003ac

08001344 <LedRowInit>:
				GPIO_TypeDef *gpioPortYellow1, uint16_t gpioPinYellow1,
				GPIO_TypeDef *gpioPortYellow2, uint16_t gpioPinYellow2,
				GPIO_TypeDef *gpioPortBlue1, uint16_t gpioPinBlue1,
				GPIO_TypeDef *gpioPortBlue2, uint16_t gpioPinBlue2,
				GPIO_TypeDef *gpioPortBlue3, uint16_t gpioPinBlue3)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	80fb      	strh	r3, [r7, #6]
	ledRow->gpioPortGreen = gpioPortGreen;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	601a      	str	r2, [r3, #0]
	ledRow->gpioPinGreen = gpioPinGreen;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	809a      	strh	r2, [r3, #4]

	ledRow->gpioPortYellow1 = gpioPortYellow1;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	609a      	str	r2, [r3, #8]
	ledRow->gpioPinYellow1 = gpioPinYellow1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8b3a      	ldrh	r2, [r7, #24]
 800136a:	819a      	strh	r2, [r3, #12]

	ledRow->gpioPortYellow2 = gpioPortYellow2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	611a      	str	r2, [r3, #16]
	ledRow->gpioPinYellow2 = gpioPinYellow2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8c3a      	ldrh	r2, [r7, #32]
 8001376:	829a      	strh	r2, [r3, #20]

	ledRow->gpioPortBlue1 = gpioPortBlue1;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137c:	619a      	str	r2, [r3, #24]
	ledRow->gpioPinBlue1 = gpioPinBlue1;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001382:	839a      	strh	r2, [r3, #28]

	ledRow->gpioPortBlue2 = gpioPortBlue2;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	621a      	str	r2, [r3, #32]
	ledRow->gpioPinBlue2 = gpioPinBlue2;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800138e:	849a      	strh	r2, [r3, #36]	@ 0x24

	ledRow->gpioPortBlue3 = gpioPortBlue3;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
	ledRow->gpioPinBlue3 = gpioPinBlue3;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800139a:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LedRowWrite>:

void LedRowWrite(ledRow_t* ledRow, float PPM_Value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	if(PPM_Value > 400)
 80013b4:	edd7 7a00 	vldr	s15, [r7]
 80013b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80014f4 <LedRowWrite+0x14c>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <LedRowWrite+0x30>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 ff11 	bl	80041f8 <HAL_GPIO_WritePin>
 80013d6:	e007      	b.n	80013e8 <LedRowWrite+0x40>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 ff08 	bl	80041f8 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 600)
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014f8 <LedRowWrite+0x150>
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd08      	ble.n	800140c <LedRowWrite+0x64>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fef7 	bl	80041f8 <HAL_GPIO_WritePin>
 800140a:	e007      	b.n	800141c <LedRowWrite+0x74>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	899b      	ldrh	r3, [r3, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 feee 	bl	80041f8 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1200)
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014fc <LedRowWrite+0x154>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	dd08      	ble.n	8001440 <LedRowWrite+0x98>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6918      	ldr	r0, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f002 fedd 	bl	80041f8 <HAL_GPIO_WritePin>
 800143e:	e007      	b.n	8001450 <LedRowWrite+0xa8>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6918      	ldr	r0, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f002 fed4 	bl	80041f8 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 1800)
 8001450:	edd7 7a00 	vldr	s15, [r7]
 8001454:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001500 <LedRowWrite+0x158>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <LedRowWrite+0xcc>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6998      	ldr	r0, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8b9b      	ldrh	r3, [r3, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f002 fec3 	bl	80041f8 <HAL_GPIO_WritePin>
 8001472:	e007      	b.n	8001484 <LedRowWrite+0xdc>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6998      	ldr	r0, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b9b      	ldrh	r3, [r3, #28]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f002 feba 	bl	80041f8 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 2400)
 8001484:	edd7 7a00 	vldr	s15, [r7]
 8001488:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001504 <LedRowWrite+0x15c>
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd08      	ble.n	80014a8 <LedRowWrite+0x100>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 fea9 	bl	80041f8 <HAL_GPIO_WritePin>
 80014a6:	e007      	b.n	80014b8 <LedRowWrite+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a18      	ldr	r0, [r3, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fea0 	bl	80041f8 <HAL_GPIO_WritePin>
	}

	if(PPM_Value > 3000)
 80014b8:	edd7 7a00 	vldr	s15, [r7]
 80014bc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001508 <LedRowWrite+0x160>
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	dd08      	ble.n	80014dc <LedRowWrite+0x134>
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014d2:	2201      	movs	r2, #1
 80014d4:	4619      	mov	r1, r3
 80014d6:	f002 fe8f 	bl	80041f8 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
	}
}
 80014da:	e007      	b.n	80014ec <LedRowWrite+0x144>
		HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 fe86 	bl	80041f8 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	43c80000 	.word	0x43c80000
 80014f8:	44160000 	.word	0x44160000
 80014fc:	44960000 	.word	0x44960000
 8001500:	44e10000 	.word	0x44e10000
 8001504:	45160000 	.word	0x45160000
 8001508:	453b8000 	.word	0x453b8000

0800150c <LedRowWriteNum>:

void LedRowWriteNum(ledRow_t* ledRow, const uint8_t num)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	if(num <= 6)
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d877      	bhi.n	800160e <LedRowWriteNum+0x102>
	{
		if(num > 0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <LedRowWriteNum+0x2a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	889b      	ldrh	r3, [r3, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f002 fe62 	bl	80041f8 <HAL_GPIO_WritePin>
 8001534:	e007      	b.n	8001546 <LedRowWriteNum+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortGreen, ledRow->gpioPinGreen, GPIO_PIN_RESET);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	f002 fe59 	bl	80041f8 <HAL_GPIO_WritePin>
		}

		if(num > 1)
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d908      	bls.n	800155e <LedRowWriteNum+0x52>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	899b      	ldrh	r3, [r3, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f002 fe4e 	bl	80041f8 <HAL_GPIO_WritePin>
 800155c:	e007      	b.n	800156e <LedRowWriteNum+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow1, ledRow->gpioPinYellow1, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fe45 	bl	80041f8 <HAL_GPIO_WritePin>
		}

		if(num > 2)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d908      	bls.n	8001586 <LedRowWriteNum+0x7a>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_SET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6918      	ldr	r0, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a9b      	ldrh	r3, [r3, #20]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fe3a 	bl	80041f8 <HAL_GPIO_WritePin>
 8001584:	e007      	b.n	8001596 <LedRowWriteNum+0x8a>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortYellow2, ledRow->gpioPinYellow2, GPIO_PIN_RESET);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6918      	ldr	r0, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	8a9b      	ldrh	r3, [r3, #20]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 fe31 	bl	80041f8 <HAL_GPIO_WritePin>
		}

		if(num > 3)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d908      	bls.n	80015ae <LedRowWriteNum+0xa2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_SET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6998      	ldr	r0, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8b9b      	ldrh	r3, [r3, #28]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4619      	mov	r1, r3
 80015a8:	f002 fe26 	bl	80041f8 <HAL_GPIO_WritePin>
 80015ac:	e007      	b.n	80015be <LedRowWriteNum+0xb2>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue1, ledRow->gpioPinBlue1, GPIO_PIN_RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6998      	ldr	r0, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	8b9b      	ldrh	r3, [r3, #28]
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f002 fe1d 	bl	80041f8 <HAL_GPIO_WritePin>
		}

		if(num > 4)
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d908      	bls.n	80015d6 <LedRowWriteNum+0xca>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_SET);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a18      	ldr	r0, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015cc:	2201      	movs	r2, #1
 80015ce:	4619      	mov	r1, r3
 80015d0:	f002 fe12 	bl	80041f8 <HAL_GPIO_WritePin>
 80015d4:	e007      	b.n	80015e6 <LedRowWriteNum+0xda>
		}
		else
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue2, ledRow->gpioPinBlue2, GPIO_PIN_RESET);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f002 fe09 	bl	80041f8 <HAL_GPIO_WritePin>
		}

		if(num > 5)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d908      	bls.n	80015fe <LedRowWriteNum+0xf2>
		{
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_SET);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fdfe 	bl	80041f8 <HAL_GPIO_WritePin>
	{
		// Nothing for now because App layer ensure right command
	}


}
 80015fc:	e007      	b.n	800160e <LedRowWriteNum+0x102>
			HAL_GPIO_WritePin(ledRow->gpioPortBlue3, ledRow->gpioPinBlue3, GPIO_PIN_RESET);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f002 fdf5 	bl	80041f8 <HAL_GPIO_WritePin>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <MQ9_GetRawValue>:
	MQ9->gpioPort = gpioPort;
	MQ9->dataPin = dataPin;
}

uint16_t MQ9_GetRawValue()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc3);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001620:	f001 fde2 	bl	80031e8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 800162a:	f001 feab 	bl	8003384 <HAL_ADC_PollForConversion>
	uint16_t raw = HAL_ADC_GetValue(&hadc3);
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MQ9_GetRawValue+0x2c>)
 8001630:	f001 ff33 	bl	800349a <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	80fb      	strh	r3, [r7, #6]
	return raw;
 8001638:	88fb      	ldrh	r3, [r7, #6]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200004a4 	.word	0x200004a4

08001648 <MQ9_ConverRaw2Real>:

float MQ9_ConverRaw2Real(uint16_t rawValue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	float scale = SensorRange / DigitalLevels;
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <MQ9_ConverRaw2Real+0x48>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <MQ9_ConverRaw2Real+0x4c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
	float realValue = rawValue * scale;
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ed97 7a03 	vldr	s14, [r7, #12]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a02 	vstr	s15, [r7, #8]
	return realValue;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000

08001698 <SignalSystemInit>:


static Button_t button;

void SignalSystemInit()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	CreateNewButton(&button, Btn_pin_GPIO_Port, Btn_pin_Pin);
 800169c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a0:	4902      	ldr	r1, [pc, #8]	@ (80016ac <SignalSystemInit+0x14>)
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <SignalSystemInit+0x18>)
 80016a4:	f7ff fd3a 	bl	800111c <CreateNewButton>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40022000 	.word	0x40022000
 80016b0:	200003b4 	.word	0x200003b4

080016b4 <ReadSignal>:

bool ReadSignal(bool* readEnable)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	bool Status = ReadButton(&button, readEnable);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <ReadSignal+0x20>)
 80016c0:	f7ff fd52 	bl	8001168 <ReadButton>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
	return Status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003b4 	.word	0x200003b4

080016d8 <AppInit>:




void AppInit()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	AlarmInit();
 80016dc:	f7ff fcfc 	bl	80010d8 <AlarmInit>
	SignalSystemInit();
 80016e0:	f7ff ffda 	bl	8001698 <SignalSystemInit>
	AirQualityIncicatorInit();
 80016e4:	f7ff fcae 	bl	8001044 <AirQualityIncicatorInit>
	LED_init();
 80016e8:	f7ff fe0e 	bl	8001308 <LED_init>
	TerminalInit(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <AppInit+0x20>)
 80016ee:	f000 fbff 	bl	8001ef0 <TerminalInit>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000055c 	.word	0x2000055c

080016fc <AppStart>:




void AppStart()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	while(1)
	{
		if(IsTransferComplete() == true)
 8001702:	f000 fc25 	bl	8001f50 <IsTransferComplete>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01f      	beq.n	800174c <AppStart+0x50>
		{

			bool cmd_status = StringCompareFromUART(GetRxBuffer(), cmdStrings, len_of_array, &cmd_find);
 800170c:	f000 fc2c 	bl	8001f68 <GetRxBuffer>
 8001710:	2214      	movs	r2, #20
 8001712:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <AppStart+0x158>)
 8001714:	4950      	ldr	r1, [pc, #320]	@ (8001858 <AppStart+0x15c>)
 8001716:	f000 fc3c 	bl	8001f92 <StringCompareFromUART>
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]

			if(cmd_status == false)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f083 0301 	eor.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <AppStart+0x40>
			{
				UART_TransmitString(ErrorMSG);
 800172a:	484c      	ldr	r0, [pc, #304]	@ (800185c <AppStart+0x160>)
 800172c:	f000 faf6 	bl	8001d1c <UART_TransmitString>
				ClearRxBuffer();
 8001730:	f000 fbf0 	bl	8001f14 <ClearRxBuffer>
				progState = P_IDLE;
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <AppStart+0x164>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <AppStart+0x50>
			}
			else
			{
				ExecuteUARTCommand(cmd_find);
 800173c:	4b45      	ldr	r3, [pc, #276]	@ (8001854 <AppStart+0x158>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fa10 	bl	8001b68 <ExecuteUARTCommand>
				ClearRxBuffer();
 8001748:	f000 fbe4 	bl	8001f14 <ClearRxBuffer>
			}
		}

			switch(progState)
 800174c:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <AppStart+0x164>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d014      	beq.n	800177e <AppStart+0x82>
 8001754:	2b02      	cmp	r3, #2
 8001756:	dcd4      	bgt.n	8001702 <AppStart+0x6>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d076      	beq.n	800184a <AppStart+0x14e>
 800175c:	2b01      	cmp	r3, #1
 800175e:	d1d0      	bne.n	8001702 <AppStart+0x6>
			{
				case P_IDLE_START:

					UART_TransmitString(IdleMSG);
 8001760:	4840      	ldr	r0, [pc, #256]	@ (8001864 <AppStart+0x168>)
 8001762:	f000 fadb 	bl	8001d1c <UART_TransmitString>
					SetIndicatorLEDs(0); //resets the indicator
 8001766:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001868 <AppStart+0x16c>
 800176a:	f7ff fc95 	bl	8001098 <SetIndicatorLEDs>
					progState = P_IDLE;
 800176e:	4b3c      	ldr	r3, [pc, #240]	@ (8001860 <AppStart+0x164>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
					HelpSendUART(len_of_array); //Sends the lists of commands
 8001774:	2314      	movs	r3, #20
 8001776:	4618      	mov	r0, r3
 8001778:	f000 faa4 	bl	8001cc4 <HelpSendUART>
					break;
 800177c:	e068      	b.n	8001850 <AppStart+0x154>

					break;

				case P_WORK:

					PPM = ReadGasSensor();
 800177e:	f7ff fd7c 	bl	800127a <ReadGasSensor>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	4b39      	ldr	r3, [pc, #228]	@ (800186c <AppStart+0x170>)
 8001788:	edc3 7a00 	vstr	s15, [r3]

					if(PPM < 400)
 800178c:	4b37      	ldr	r3, [pc, #220]	@ (800186c <AppStart+0x170>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001870 <AppStart+0x174>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d503      	bpl.n	80017a8 <AppStart+0xac>
					{
						led_cnt.correct_led = false;
 80017a0:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <AppStart+0x178>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	735a      	strb	r2, [r3, #13]
 80017a6:	e002      	b.n	80017ae <AppStart+0xb2>
					}
					else
					{
						led_cnt.correct_led  = true;
 80017a8:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <AppStart+0x178>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	735a      	strb	r2, [r3, #13]
					}

					if(led_cnt.led_overflow_flag == true)
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <AppStart+0x178>)
 80017b0:	7b1b      	ldrb	r3, [r3, #12]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <AppStart+0xf0>
					{
						switch(ledState)
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <AppStart+0x17c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d00e      	beq.n	80017de <AppStart+0xe2>
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	dc10      	bgt.n	80017e6 <AppStart+0xea>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <AppStart+0xd2>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d004      	beq.n	80017d6 <AppStart+0xda>
 80017cc:	e00b      	b.n	80017e6 <AppStart+0xea>
						{
							case LED_OFF:

								LED_Drive(false);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fda8 	bl	8001324 <LED_Drive>

								break;
 80017d4:	e007      	b.n	80017e6 <AppStart+0xea>

							case LED_ON_CORECT:

								LED_Drive(true);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fda4 	bl	8001324 <LED_Drive>

								break;
 80017dc:	e003      	b.n	80017e6 <AppStart+0xea>

							case LED_ON_INCORECT:

								LED_Drive(true);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fda0 	bl	8001324 <LED_Drive>

								break;
 80017e4:	bf00      	nop
						}
						led_cnt.led_overflow_flag = false;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <AppStart+0x178>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	731a      	strb	r2, [r3, #12]
					}

					if(prog_cnt.update_param_flag == true)
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <AppStart+0x180>)
 80017ee:	7b9b      	ldrb	r3, [r3, #14]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d02b      	beq.n	800184e <AppStart+0x152>
					{
						UART_TransmitString(PPM_MSG);
 80017f6:	4822      	ldr	r0, [pc, #136]	@ (8001880 <AppStart+0x184>)
 80017f8:	f000 fa90 	bl	8001d1c <UART_TransmitString>
						UART_TransmitFloat(PPM);
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <AppStart+0x170>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f000 facd 	bl	8001da4 <UART_TransmitFloat>
						SetIndicatorLEDs(PPM);
 800180a:	4b18      	ldr	r3, [pc, #96]	@ (800186c <AppStart+0x170>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fc40 	bl	8001098 <SetIndicatorLEDs>

						if(PPM > DangerousPPM)
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <AppStart+0x170>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001884 <AppStart+0x188>
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	dd0a      	ble.n	8001842 <AppStart+0x146>
						{
							UART_TransmitString(AlertMSG);
 800182c:	4816      	ldr	r0, [pc, #88]	@ (8001888 <AppStart+0x18c>)
 800182e:	f000 fa75 	bl	8001d1c <UART_TransmitString>
							AlarmON();
 8001832:	f7ff fc5f 	bl	80010f4 <AlarmON>
							prog_cnt.room_not_safe_flag = true;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <AppStart+0x180>)
 8001838:	2201      	movs	r2, #1
 800183a:	745a      	strb	r2, [r3, #17]
							prog_cnt.cnt_clear_room = 0; //this is a rough implementation, need a fan function to call here
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <AppStart+0x180>)
 800183e:	2200      	movs	r2, #0
 8001840:	73da      	strb	r2, [r3, #15]
						}
						prog_cnt.update_param_flag = false;
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <AppStart+0x180>)
 8001844:	2200      	movs	r2, #0
 8001846:	739a      	strb	r2, [r3, #14]
					}
					break;
 8001848:	e001      	b.n	800184e <AppStart+0x152>
					break;
 800184a:	bf00      	nop
 800184c:	e759      	b.n	8001702 <AppStart+0x6>
					break;
 800184e:	bf00      	nop
		if(IsTransferComplete() == true)
 8001850:	e757      	b.n	8001702 <AppStart+0x6>
 8001852:	bf00      	nop
 8001854:	200003cc 	.word	0x200003cc
 8001858:	20000130 	.word	0x20000130
 800185c:	200000dc 	.word	0x200000dc
 8001860:	20000180 	.word	0x20000180
 8001864:	20000008 	.word	0x20000008
 8001868:	00000000 	.word	0x00000000
 800186c:	200003c8 	.word	0x200003c8
 8001870:	43c80000 	.word	0x43c80000
 8001874:	2000010c 	.word	0x2000010c
 8001878:	200003cf 	.word	0x200003cf
 800187c:	2000011c 	.word	0x2000011c
 8001880:	20000028 	.word	0x20000028
 8001884:	45098000 	.word	0x45098000
 8001888:	20000030 	.word	0x20000030

0800188c <HAL_TIM_PeriodElapsedCallback>:


//@brief Timer interrupt service routine, happens every 10ms
//@param htim Pointer to timer handler given by cube mx
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	if(htim == &htim11)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a96      	ldr	r2, [pc, #600]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001898:	4293      	cmp	r3, r2
 800189a:	f040 8156 	bne.w	8001b4a <HAL_TIM_PeriodElapsedCallback+0x2be>
	{
		SysTickFlag = true;
 800189e:	4b95      	ldr	r3, [pc, #596]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]


		//Controling room clearing mechanism////////////////////////////////
		if((prog_cnt.cnt_clear_room >= prog_cnt.time_clear_room) && (prog_cnt.room_not_safe_flag))
 80018a4:	4b94      	ldr	r3, [pc, #592]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018a6:	7bdb      	ldrb	r3, [r3, #15]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b93      	ldr	r3, [pc, #588]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ac:	7c1b      	ldrb	r3, [r3, #16]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d310      	bcc.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x48>
 80018b2:	4b91      	ldr	r3, [pc, #580]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018b4:	7c5b      	ldrb	r3, [r3, #17]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			AlarmOFF();
 80018bc:	f7ff fc24 	bl	8001108 <AlarmOFF>
			UART_TransmitString(RoomClearedMSG);
 80018c0:	488e      	ldr	r0, [pc, #568]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018c2:	f000 fa2b 	bl	8001d1c <UART_TransmitString>
			prog_cnt.cnt_clear_room = 0;
 80018c6:	4b8c      	ldr	r3, [pc, #560]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	73da      	strb	r2, [r3, #15]
			prog_cnt.room_not_safe_flag = false;
 80018cc:	4b8a      	ldr	r3, [pc, #552]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	745a      	strb	r2, [r3, #17]
 80018d2:	e006      	b.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x56>
		}
		else
		{
			prog_cnt.cnt_clear_room++;
 80018d4:	4b88      	ldr	r3, [pc, #544]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018d6:	7bdb      	ldrb	r3, [r3, #15]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b86      	ldr	r3, [pc, #536]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018e0:	73da      	strb	r2, [r3, #15]
		}

		//Controling single LED:////////////////////////////////////////
		switch(ledState)
 80018e2:	4b87      	ldr	r3, [pc, #540]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d042      	beq.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	dc5d      	bgt.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x11e>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d024      	beq.n	8001940 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80018f6:	e058      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x11e>
		{
			case LED_OFF:

				led_cnt.cnt_led_off++;
 80018f8:	4b82      	ldr	r3, [pc, #520]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018fa:	889b      	ldrh	r3, [r3, #4]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b80      	ldr	r3, [pc, #512]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001904:	809a      	strh	r2, [r3, #4]
				if((led_cnt.cnt_led_off) >= (led_cnt.time_led_off))
 8001906:	4b7f      	ldr	r3, [pc, #508]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800190e:	895b      	ldrh	r3, [r3, #10]
 8001910:	429a      	cmp	r2, r3
 8001912:	d345      	bcc.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x114>
				{

					led_cnt.led_overflow_flag = true;
 8001914:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001916:	2201      	movs	r2, #1
 8001918:	731a      	strb	r2, [r3, #12]
					if(led_cnt.correct_led)
 800191a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800191c:	7b5b      	ldrb	r3, [r3, #13]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_TIM_PeriodElapsedCallback+0xa0>
					{
						ledState =  LED_ON_CORECT;
 8001924:	4b76      	ldr	r3, [pc, #472]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e002      	b.n	8001932 <HAL_TIM_PeriodElapsedCallback+0xa6>
					}
					else
					{
						ledState = LED_ON_INCORECT;
 800192c:	4b74      	ldr	r3, [pc, #464]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
					}
					led_cnt.cnt_led_off = 0;
 8001932:	4b74      	ldr	r3, [pc, #464]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001934:	2200      	movs	r2, #0
 8001936:	809a      	strh	r2, [r3, #4]
					led_cnt.led_overflow_flag = true;
 8001938:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800193a:	2201      	movs	r2, #1
 800193c:	731a      	strb	r2, [r3, #12]
				}

				break;
 800193e:	e02f      	b.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x114>

			case LED_ON_CORECT:

				led_cnt.cnt_led_correct_on++;
 8001940:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800194c:	801a      	strh	r2, [r3, #0]
				if((led_cnt.cnt_led_correct_on) >= (led_cnt.time_led_correct_on))
 800194e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001956:	88db      	ldrh	r3, [r3, #6]
 8001958:	429a      	cmp	r2, r3
 800195a:	d323      	bcc.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>
				{
					led_cnt.cnt_led_correct_on = 0;
 800195c:	4b69      	ldr	r3, [pc, #420]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
					led_cnt.led_overflow_flag = true;
 8001962:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001964:	2201      	movs	r2, #1
 8001966:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001968:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800196e:	e019      	b.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x118>

			case LED_ON_INCORECT:

				led_cnt.cnt_led_incorrect_on++;
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	b29b      	uxth	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b62      	ldr	r3, [pc, #392]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800197c:	805a      	strh	r2, [r3, #2]
				if((led_cnt.cnt_led_incorrect_on) >= (led_cnt.time_led_incorrect_on))
 800197e:	4b61      	ldr	r3, [pc, #388]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b5f      	ldr	r3, [pc, #380]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001986:	891b      	ldrh	r3, [r3, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	d30d      	bcc.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x11c>
				{
					led_cnt.cnt_led_incorrect_on = 0;
 800198c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800198e:	2200      	movs	r2, #0
 8001990:	805a      	strh	r2, [r3, #2]
					led_cnt.led_overflow_flag = true;
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001994:	2201      	movs	r2, #1
 8001996:	731a      	strb	r2, [r3, #12]
					ledState = LED_OFF;
 8001998:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800199e:	e003      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x11c>
				break;
 80019a0:	bf00      	nop
 80019a2:	e002      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x11e>
				break;
 80019a8:	bf00      	nop
		}

		//Controling UART refresh rate://////////////////////////////////////////////
		if(((prog_cnt.ref_rate) != 0))
 80019aa:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019ac:	891b      	ldrh	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <HAL_TIM_PeriodElapsedCallback+0x152>
		{
			prog_cnt.cnt_ref_rate++;
 80019b4:	4b50      	ldr	r3, [pc, #320]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019b6:	899b      	ldrh	r3, [r3, #12]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019c0:	819a      	strh	r2, [r3, #12]
			if((prog_cnt.cnt_ref_rate) >= (prog_cnt.ref_rate))
 80019c2:	4b4d      	ldr	r3, [pc, #308]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019c4:	899b      	ldrh	r3, [r3, #12]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b4b      	ldr	r3, [pc, #300]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019ca:	891b      	ldrh	r3, [r3, #8]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d305      	bcc.n	80019de <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				prog_cnt.update_param_flag = true;
 80019d2:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	739a      	strb	r2, [r3, #14]
				prog_cnt.cnt_ref_rate = 0;
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	819a      	strh	r2, [r3, #12]
			}
		}

		//Controling the signal reading system
		prog_cnt.read_button_flag = ReadSignal(&SysTickFlag);
 80019de:	4845      	ldr	r0, [pc, #276]	@ (8001af4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80019e0:	f7ff fe68 	bl	80016b4 <ReadSignal>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019ea:	719a      	strb	r2, [r3, #6]
		switch(countState)
 80019ec:	4b46      	ldr	r3, [pc, #280]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d045      	beq.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	f300 80a5 	bgt.w	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x178>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d019      	beq.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 8001a02:	e09f      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2b8>
		{
			case C_IDLE:

				if(((prog_cnt.read_button_flag) == true) && (prog_cnt.finish_counting) == true)
 8001a04:	4b3c      	ldr	r3, [pc, #240]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a06:	799b      	ldrb	r3, [r3, #6]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8097 	beq.w	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8001a10:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a12:	79db      	ldrb	r3, [r3, #7]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8091 	beq.w	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2b2>
				{
					prog_cnt.cnt_button = 0;
 8001a1c:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	805a      	strh	r2, [r3, #2]
					prog_cnt.prog_cnt_press = 1;
 8001a22:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	711a      	strb	r2, [r3, #4]
					prog_cnt.finish_counting = false;
 8001a28:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	71da      	strb	r2, [r3, #7]

					countState = C_START;
 8001a2e:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001a34:	e083      	b.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x2b2>

			case C_START:

				prog_cnt.cnt_button++;
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a38:	885b      	ldrh	r3, [r3, #2]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a42:	805a      	strh	r2, [r3, #2]
				//UART_TransmitFloat((float)prog_cnt.cnt_button);
				if((prog_cnt.cnt_button) >= (prog_cnt.time_button))
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a46:	885b      	ldrh	r3, [r3, #2]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d303      	bcc.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0x1ce>
				{
					countState = C_END;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]

						countState = C_START;
					}

				}
				break;
 8001a58:	e073      	b.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x2b6>
					if(((prog_cnt.read_button_flag) == true))
 8001a5a:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a5c:	799b      	ldrb	r3, [r3, #6]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d06e      	beq.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x2b6>
						prog_cnt.cnt_button = 0;
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	805a      	strh	r2, [r3, #2]
						prog_cnt.prog_cnt_press++;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a76:	711a      	strb	r2, [r3, #4]
						countState = C_START;
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
				break;
 8001a7e:	e060      	b.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x2b6>

			case C_END:

				prog_cnt.cnt_button = 0;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	805a      	strh	r2, [r3, #2]

				switch(prog_cnt.prog_cnt_press)
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d84c      	bhi.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001a90:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a96:	bf00      	nop
 8001a98:	08001b2b 	.word	0x08001b2b
 8001a9c:	08001ab1 	.word	0x08001ab1
 8001aa0:	08001ac5 	.word	0x08001ac5
 8001aa4:	08001adb 	.word	0x08001adb
 8001aa8:	08001b2b 	.word	0x08001b2b
 8001aac:	08001b1d 	.word	0x08001b1d

						break;

					case 1:

						progState = P_WORK;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S1WorkStateMSG);
 8001ab6:	4816      	ldr	r0, [pc, #88]	@ (8001b10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ab8:	f000 f930 	bl	8001d1c <UART_TransmitString>
						prog_cnt.ref_rate = 100;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001abe:	2264      	movs	r2, #100	@ 0x64
 8001ac0:	811a      	strh	r2, [r3, #8]

						break;
 8001ac2:	e032      	b.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 2:

						progState = P_WORK;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S3WorkStateMSG);
 8001aca:	4812      	ldr	r0, [pc, #72]	@ (8001b14 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001acc:	f000 f926 	bl	8001d1c <UART_TransmitString>
						prog_cnt.ref_rate = 300;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ad2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ad6:	811a      	strh	r2, [r3, #8]

						break;
 8001ad8:	e027      	b.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x29e>

					case 3:

						progState = P_WORK;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001adc:	2202      	movs	r2, #2
 8001ade:	701a      	strb	r2, [r3, #0]
						UART_TransmitString(S5WorkStateMSG);
 8001ae0:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ae2:	f000 f91b 	bl	8001d1c <UART_TransmitString>
						prog_cnt.ref_rate = 500;
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ae8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001aec:	811a      	strh	r2, [r3, #8]

						break;
 8001aee:	e01c      	b.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x29e>
 8001af0:	20000510 	.word	0x20000510
 8001af4:	200003c4 	.word	0x200003c4
 8001af8:	2000011c 	.word	0x2000011c
 8001afc:	20000054 	.word	0x20000054
 8001b00:	200003cf 	.word	0x200003cf
 8001b04:	2000010c 	.word	0x2000010c
 8001b08:	200003ce 	.word	0x200003ce
 8001b0c:	20000180 	.word	0x20000180
 8001b10:	2000007c 	.word	0x2000007c
 8001b14:	20000094 	.word	0x20000094
 8001b18:	200000ac 	.word	0x200000ac
						// does nothing because it is so in ability!!
						break;

					case 5:

						progState = P_IDLE_START;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
						prog_cnt.ref_rate = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	811a      	strh	r2, [r3, #8]

						break;
 8001b28:	bf00      	nop

				}

				prog_cnt.prog_cnt_press = 0;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	711a      	strb	r2, [r3, #4]
				prog_cnt.finish_counting = true;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	71da      	strb	r2, [r3, #7]

				countState = C_IDLE;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
				break;
 8001b3c:	e002      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x2b8>
				break;
 8001b42:	bf00      	nop

		}
		prog_cnt.read_button_flag = false;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	719a      	strb	r2, [r3, #6]
	}
	SysTickFlag = false;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000180 	.word	0x20000180
 8001b5c:	2000011c 	.word	0x2000011c
 8001b60:	200003ce 	.word	0x200003ce
 8001b64:	200003c4 	.word	0x200003c4

08001b68 <ExecuteUARTCommand>:

void ExecuteUARTCommand(uint8_t cmd_index)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	uartCmdState = cmd_index;
 8001b72:	4a4e      	ldr	r2, [pc, #312]	@ (8001cac <ExecuteUARTCommand+0x144>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	7013      	strb	r3, [r2, #0]

	switch(uartCmdState)
 8001b78:	4b4c      	ldr	r3, [pc, #304]	@ (8001cac <ExecuteUARTCommand+0x144>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b14      	cmp	r3, #20
 8001b7e:	f200 8090 	bhi.w	8001ca2 <ExecuteUARTCommand+0x13a>
 8001b82:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <ExecuteUARTCommand+0x20>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001bdd 	.word	0x08001bdd
 8001b8c:	08001be5 	.word	0x08001be5
 8001b90:	08001bf3 	.word	0x08001bf3
 8001b94:	08001c03 	.word	0x08001c03
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001c23 	.word	0x08001c23
 8001ba0:	08001c33 	.word	0x08001c33
 8001ba4:	08001c3b 	.word	0x08001c3b
 8001ba8:	08001c43 	.word	0x08001c43
 8001bac:	08001c49 	.word	0x08001c49
 8001bb0:	08001c4f 	.word	0x08001c4f
 8001bb4:	08001c57 	.word	0x08001c57
 8001bb8:	08001c5f 	.word	0x08001c5f
 8001bbc:	08001c67 	.word	0x08001c67
 8001bc0:	08001c6f 	.word	0x08001c6f
 8001bc4:	08001c77 	.word	0x08001c77
 8001bc8:	08001c7f 	.word	0x08001c7f
 8001bcc:	08001c87 	.word	0x08001c87
 8001bd0:	08001c8f 	.word	0x08001c8f
 8001bd4:	08001c97 	.word	0x08001c97
 8001bd8:	08001ca1 	.word	0x08001ca1
	{
		case cmd_0:

			progState = P_IDLE_START;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <ExecuteUARTCommand+0x148>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]

			break;
 8001be2:	e05e      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_1:

			progState = P_WORK;
 8001be4:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <ExecuteUARTCommand+0x148>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 100;
 8001bea:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <ExecuteUARTCommand+0x14c>)
 8001bec:	2264      	movs	r2, #100	@ 0x64
 8001bee:	811a      	strh	r2, [r3, #8]

			break;
 8001bf0:	e057      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_2:

			progState = P_WORK;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <ExecuteUARTCommand+0x148>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 300;
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <ExecuteUARTCommand+0x14c>)
 8001bfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bfe:	811a      	strh	r2, [r3, #8]


			break;
 8001c00:	e04f      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_3:

			progState = P_WORK;
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <ExecuteUARTCommand+0x148>)
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
			prog_cnt.ref_rate = 500;
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <ExecuteUARTCommand+0x14c>)
 8001c0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c0e:	811a      	strh	r2, [r3, #8]

			break;
 8001c10:	e047      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_4:

			PPM = ReadGasSensor();
 8001c12:	f7ff fb32 	bl	800127a <ReadGasSensor>
 8001c16:	eef0 7a40 	vmov.f32	s15, s0
 8001c1a:	4b27      	ldr	r3, [pc, #156]	@ (8001cb8 <ExecuteUARTCommand+0x150>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]

			break;
 8001c20:	e03f      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_5:

			UART_TransmitFloat(PPM);
 8001c22:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <ExecuteUARTCommand+0x150>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	f000 f8ba 	bl	8001da4 <UART_TransmitFloat>

			break;
 8001c30:	e037      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>


		case cmd_6:

			UART_TransmitString(FAN_ON);
 8001c32:	4822      	ldr	r0, [pc, #136]	@ (8001cbc <ExecuteUARTCommand+0x154>)
 8001c34:	f000 f872 	bl	8001d1c <UART_TransmitString>

			break;
 8001c38:	e033      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_7:

			UART_TransmitString(FAN_OFF);
 8001c3a:	4821      	ldr	r0, [pc, #132]	@ (8001cc0 <ExecuteUARTCommand+0x158>)
 8001c3c:	f000 f86e 	bl	8001d1c <UART_TransmitString>

			break;
 8001c40:	e02f      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>


		case cmd_8:

			AlarmON();
 8001c42:	f7ff fa57 	bl	80010f4 <AlarmON>

			break;
 8001c46:	e02c      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_9:

			AlarmOFF();
 8001c48:	f7ff fa5e 	bl	8001108 <AlarmOFF>

			break;
 8001c4c:	e029      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_10:

			LED_Drive(true);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff fb68 	bl	8001324 <LED_Drive>

			break;
 8001c54:	e025      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_11:

			LED_Drive(false);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fb64 	bl	8001324 <LED_Drive>

			break;
 8001c5c:	e021      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>


		case cmd_12:

			SetIndicatorLEDsNum(0);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fa2a 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c64:	e01d      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_13:

			SetIndicatorLEDsNum(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7ff fa26 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c6c:	e019      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_14:

			SetIndicatorLEDsNum(2);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7ff fa22 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c74:	e015      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_15:

			SetIndicatorLEDsNum(3);
 8001c76:	2003      	movs	r0, #3
 8001c78:	f7ff fa1e 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c7c:	e011      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>


		case cmd_16:

			SetIndicatorLEDsNum(4);
 8001c7e:	2004      	movs	r0, #4
 8001c80:	f7ff fa1a 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c84:	e00d      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_17:

			SetIndicatorLEDsNum(5);
 8001c86:	2005      	movs	r0, #5
 8001c88:	f7ff fa16 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c8c:	e009      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>


		case cmd_18:

			SetIndicatorLEDsNum(6);
 8001c8e:	2006      	movs	r0, #6
 8001c90:	f7ff fa12 	bl	80010b8 <SetIndicatorLEDsNum>

			break;
 8001c94:	e005      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_19:
			HelpSendUART(len_of_array);
 8001c96:	2314      	movs	r3, #20
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f813 	bl	8001cc4 <HelpSendUART>

			break;
 8001c9e:	e000      	b.n	8001ca2 <ExecuteUARTCommand+0x13a>

		case cmd_20:
			// reserved

			break;
 8001ca0:	bf00      	nop
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003d0 	.word	0x200003d0
 8001cb0:	20000180 	.word	0x20000180
 8001cb4:	2000011c 	.word	0x2000011c
 8001cb8:	200003c8 	.word	0x200003c8
 8001cbc:	200000c4 	.word	0x200000c4
 8001cc0:	200000d0 	.word	0x200000d0

08001cc4 <HelpSendUART>:

void HelpSendUART(uint16_t total_num_of_elements)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80fb      	strh	r3, [r7, #6]
	uint16_t iterator = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	81fb      	strh	r3, [r7, #14]
	UART_TransmitString("\n=================  UART Commands =================\n");
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <HelpSendUART+0x48>)
 8001cd4:	f000 f822 	bl	8001d1c <UART_TransmitString>
	while(iterator < total_num_of_elements)
 8001cd8:	e00c      	b.n	8001cf4 <HelpSendUART+0x30>
	{
		UART_TransmitStringWithoutNewLine("\t");
 8001cda:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <HelpSendUART+0x4c>)
 8001cdc:	f000 f84c 	bl	8001d78 <UART_TransmitStringWithoutNewLine>
		UART_TransmitString(cmdStrings[iterator]);
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HelpSendUART+0x50>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f817 	bl	8001d1c <UART_TransmitString>

		iterator++;
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	81fb      	strh	r3, [r7, #14]
	while(iterator < total_num_of_elements)
 8001cf4:	89fa      	ldrh	r2, [r7, #14]
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3ee      	bcc.n	8001cda <HelpSendUART+0x16>
	}
	UART_TransmitString("\n==================================================\n");
 8001cfc:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <HelpSendUART+0x54>)
 8001cfe:	f000 f80d 	bl	8001d1c <UART_TransmitString>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	0800b738 	.word	0x0800b738
 8001d10:	0800b770 	.word	0x0800b770
 8001d14:	20000130 	.word	0x20000130
 8001d18:	0800b774 	.word	0x0800b774

08001d1c <UART_TransmitString>:


extern UART_HandleTypeDef huart1;

void UART_TransmitString(char* str)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fad3 	bl	80002d0 <strlen>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <UART_TransmitString+0x54>)
 8001d36:	f003 fe77 	bl	8005a28 <HAL_UART_Transmit>
	char newLine[] = "\r\n";
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <UART_TransmitString+0x58>)
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4611      	mov	r1, r2
 8001d44:	8019      	strh	r1, [r3, #0]
 8001d46:	3302      	adds	r3, #2
 8001d48:	0c12      	lsrs	r2, r2, #16
 8001d4a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)newLine, strlen(newLine), HAL_MAX_DELAY);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fabd 	bl	80002d0 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f107 010c 	add.w	r1, r7, #12
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	4803      	ldr	r0, [pc, #12]	@ (8001d70 <UART_TransmitString+0x54>)
 8001d64:	f003 fe60 	bl	8005a28 <HAL_UART_Transmit>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000055c 	.word	0x2000055c
 8001d74:	0800b7ac 	.word	0x0800b7ac

08001d78 <UART_TransmitStringWithoutNewLine>:

void UART_TransmitStringWithoutNewLine(char* str)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe faa5 	bl	80002d0 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <UART_TransmitStringWithoutNewLine+0x28>)
 8001d92:	f003 fe49 	bl	8005a28 <HAL_UART_Transmit>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000055c 	.word	0x2000055c

08001da4 <UART_TransmitFloat>:

void UART_TransmitFloat(float data)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	@ 0x40
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	ed87 0a01 	vstr	s0, [r7, #4]
	char msg[50];
	sprintf(msg, "%.2f\r\n", data);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fbfa 	bl	80005a8 <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	f107 000c 	add.w	r0, r7, #12
 8001dbc:	490a      	ldr	r1, [pc, #40]	@ (8001de8 <UART_TransmitFloat+0x44>)
 8001dbe:	f005 ffef 	bl	8007da0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa82 	bl	80002d0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f107 010c 	add.w	r1, r7, #12
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <UART_TransmitFloat+0x48>)
 8001dda:	f003 fe25 	bl	8005a28 <HAL_UART_Transmit>
}
 8001dde:	bf00      	nop
 8001de0:	3740      	adds	r7, #64	@ 0x40
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	0800b7b0 	.word	0x0800b7b0
 8001dec:	2000055c 	.word	0x2000055c

08001df0 <TerminalHandler>:
static bool transferCompleteFlag = false;



void TerminalHandler(UART_HandleTypeDef *huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	uint8_t newLine[] = "\n\r";
 8001df8:	4a36      	ldr	r2, [pc, #216]	@ (8001ed4 <TerminalHandler+0xe4>)
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4611      	mov	r1, r2
 8001e02:	8019      	strh	r1, [r3, #0]
 8001e04:	3302      	adds	r3, #2
 8001e06:	0c12      	lsrs	r2, r2, #16
 8001e08:	701a      	strb	r2, [r3, #0]
	uint8_t backspace[] = "\b  \b";
 8001e0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <TerminalHandler+0xe8>)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e14:	6018      	str	r0, [r3, #0]
 8001e16:	3304      	adds	r3, #4
 8001e18:	7019      	strb	r1, [r3, #0]

	if(huart->Instance == USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001edc <TerminalHandler+0xec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14d      	bne.n	8001ec0 <TerminalHandler+0xd0>
	{
		if(RxIndex == 0)
 8001e24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <TerminalHandler+0x40>
		{
			ClearRxBuffer();
 8001e2c:	f000 f872 	bl	8001f14 <ClearRxBuffer>
		}
		if(RxData[0] != 13) //if it is not carrige return
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b0d      	cmp	r3, #13
 8001e36:	d02f      	beq.n	8001e98 <TerminalHandler+0xa8>
		{
			if(RxData[0] == 8 && RxIndex > 0) //If user presses backspace
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d117      	bne.n	8001e70 <TerminalHandler+0x80>
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <TerminalHandler+0x80>
			{
				RxBuffer[RxIndex] = '\0';
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <TerminalHandler+0xf8>)
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]
				RxIndex--;
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e5e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart, backspace, sizeof(backspace), TIMEOUT_UART);
 8001e60:	f107 010c 	add.w	r1, r7, #12
 8001e64:	230a      	movs	r3, #10
 8001e66:	2205      	movs	r2, #5
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f003 fddd 	bl	8005a28 <HAL_UART_Transmit>
 8001e6e:	e00c      	b.n	8001e8a <TerminalHandler+0x9a>
			}
			else
			{
				RxBuffer[RxIndex] = RxData[0];
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001e78:	7819      	ldrb	r1, [r3, #0]
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <TerminalHandler+0xf8>)
 8001e7c:	5499      	strb	r1, [r3, r2]
				RxIndex++;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e88:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(huart, RxData, sizeof(RxData), TIMEOUT_UART);
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4915      	ldr	r1, [pc, #84]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f003 fdc9 	bl	8005a28 <HAL_UART_Transmit>
 8001e96:	e013      	b.n	8001ec0 <TerminalHandler+0xd0>
		}
		else
		{
			RxBuffer[RxIndex] = RxData[0];
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001ea0:	7819      	ldrb	r1, [r3, #0]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <TerminalHandler+0xf8>)
 8001ea4:	5499      	strb	r1, [r3, r2]
			RxIndex = 0; // This will clear the buffer
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <TerminalHandler+0xf0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
			transferCompleteFlag = true;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <TerminalHandler+0xfc>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, newLine, sizeof(newLine), TIMEOUT_UART);
 8001eb2:	f107 0114 	add.w	r1, r7, #20
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	2203      	movs	r2, #3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f003 fdb4 	bl	8005a28 <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData)); //Start again so it will read it always
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4908      	ldr	r1, [pc, #32]	@ (8001ee4 <TerminalHandler+0xf4>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f003 fe32 	bl	8005b2e <HAL_UART_Receive_IT>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0800b7b8 	.word	0x0800b7b8
 8001ed8:	0800b7bc 	.word	0x0800b7bc
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	200003d1 	.word	0x200003d1
 8001ee4:	200003d4 	.word	0x200003d4
 8001ee8:	200003d8 	.word	0x200003d8
 8001eec:	200004a0 	.word	0x200004a0

08001ef0 <TerminalInit>:

void TerminalInit(UART_HandleTypeDef *huart) //Function reads 1 data byte
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, RxData, sizeof(RxData));
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4905      	ldr	r1, [pc, #20]	@ (8001f10 <TerminalInit+0x20>)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f003 fe16 	bl	8005b2e <HAL_UART_Receive_IT>
	ClearRxBuffer();
 8001f02:	f000 f807 	bl	8001f14 <ClearRxBuffer>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200003d4 	.word	0x200003d4

08001f14 <ClearRxBuffer>:

void ClearRxBuffer()
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
	for(int counter = 0; counter < 200; counter++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	e007      	b.n	8001f30 <ClearRxBuffer+0x1c>
	{
		RxBuffer[counter] = 0;
 8001f20:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <ClearRxBuffer+0x34>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
	for(int counter = 0; counter < 200; counter++)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f34:	ddf4      	ble.n	8001f20 <ClearRxBuffer+0xc>
	}
	transferCompleteFlag = false;
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <ClearRxBuffer+0x38>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	200003d8 	.word	0x200003d8
 8001f4c:	200004a0 	.word	0x200004a0

08001f50 <IsTransferComplete>:

bool IsTransferComplete()
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	return transferCompleteFlag;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <IsTransferComplete+0x14>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200004a0 	.word	0x200004a0

08001f68 <GetRxBuffer>:

char* GetRxBuffer()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
	return (char*)RxBuffer;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	@ (8001f78 <GetRxBuffer+0x10>)
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	200003d8 	.word	0x200003d8

08001f7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) 	//Interrupt function defined by Cube
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	TerminalHandler(huart); 	//TerminalHandler becomes a callback function
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff33 	bl	8001df0 <TerminalHandler>

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <StringCompareFromUART>:


bool StringCompareFromUART(char* cmd_string, char** matrix,  uint16_t numOfStrings, uint16_t* index)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]

	    uint16_t count = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	82fb      	strh	r3, [r7, #22]
	    bool foundIt = false;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	757b      	strb	r3, [r7, #21]
	    bool retval;
	    cmd_string = strupr(cmd_string);
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f005 ff64 	bl	8007e78 <strupr>
 8001fb0:	60f8      	str	r0, [r7, #12]
	    while((count < numOfStrings) && (foundIt == false))
 8001fb2:	e013      	b.n	8001fdc <StringCompareFromUART+0x4a>
	    {

	        if(strcmp(cmd_string, matrix[count]) == 0)
 8001fb4:	8afb      	ldrh	r3, [r7, #22]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7fe f925 	bl	8000210 <strcmp>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <StringCompareFromUART+0x44>
	        {
	            *index = count;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	8afa      	ldrh	r2, [r7, #22]
 8001fd0:	801a      	strh	r2, [r3, #0]
	            foundIt = true;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	757b      	strb	r3, [r7, #21]

	        }
	        count++;
 8001fd6:	8afb      	ldrh	r3, [r7, #22]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	82fb      	strh	r3, [r7, #22]
	    while((count < numOfStrings) && (foundIt == false))
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d205      	bcs.n	8001ff0 <StringCompareFromUART+0x5e>
 8001fe4:	7d7b      	ldrb	r3, [r7, #21]
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e1      	bne.n	8001fb4 <StringCompareFromUART+0x22>
	    }

	    if(foundIt)
 8001ff0:	7d7b      	ldrb	r3, [r7, #21]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <StringCompareFromUART+0x6a>
	    {
	        retval = true;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	753b      	strb	r3, [r7, #20]
 8001ffa:	e001      	b.n	8002000 <StringCompareFromUART+0x6e>
	    }
	    else
	    {
	        retval = false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	753b      	strb	r3, [r7, #20]
	    }

	    return retval;
 8002000:	7d3b      	ldrb	r3, [r7, #20]

}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002010:	f001 f849 	bl	80030a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002014:	f000 f816 	bl	8002044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002018:	f000 f94c 	bl	80022b4 <MX_GPIO_Init>
  MX_ADC3_Init();
 800201c:	f000 f882 	bl	8002124 <MX_ADC3_Init>
  MX_CRC_Init();
 8002020:	f000 f8d2 	bl	80021c8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8002024:	f000 f916 	bl	8002254 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8002028:	f000 f8f0 	bl	800220c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); //Start timer
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <main+0x34>)
 800202e:	f003 fa2f 	bl	8005490 <HAL_TIM_Base_Start_IT>
  AppInit(); //Initialize all peripherals
 8002032:	f7ff fb51 	bl	80016d8 <AppInit>

  AppStart(); //Starts the app, from this point all user code bellow will be disregarded
 8002036:	f7ff fb61 	bl	80016fc <AppStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <main+0x2e>
 800203e:	bf00      	nop
 8002040:	20000510 	.word	0x20000510

08002044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b094      	sub	sp, #80	@ 0x50
 8002048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	2230      	movs	r2, #48	@ 0x30
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f005 ff07 	bl	8007e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002068:	f002 f8e0 	bl	800422c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <SystemClock_Config+0xd8>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	4a2a      	ldr	r2, [pc, #168]	@ (800211c <SystemClock_Config+0xd8>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002076:	6413      	str	r3, [r2, #64]	@ 0x40
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <SystemClock_Config+0xd8>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <SystemClock_Config+0xdc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <SystemClock_Config+0xdc>)
 800208a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <SystemClock_Config+0xdc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209c:	2301      	movs	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a6:	2302      	movs	r3, #2
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020b0:	2319      	movs	r3, #25
 80020b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80020b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ba:	2302      	movs	r3, #2
 80020bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80020be:	2309      	movs	r3, #9
 80020c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 f910 	bl	80042ec <HAL_RCC_OscConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020d2:	f000 fd4b 	bl	8002b6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020d6:	f002 f8b9 	bl	800424c <HAL_PWREx_EnableOverDrive>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80020e0:	f000 fd44 	bl	8002b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e4:	230f      	movs	r3, #15
 80020e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e8:	2302      	movs	r3, #2
 80020ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2106      	movs	r1, #6
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fb96 	bl	8004834 <HAL_RCC_ClockConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800210e:	f000 fd2d 	bl	8002b6c <Error_Handler>
  }
}
 8002112:	bf00      	nop
 8002114:	3750      	adds	r7, #80	@ 0x50
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40007000 	.word	0x40007000

08002124 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002138:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <MX_ADC3_Init+0x9c>)
 800213a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_ADC3_Init+0x98>)
 800213e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002142:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800214a:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <MX_ADC3_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002150:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002160:	2200      	movs	r2, #0
 8002162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002166:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <MX_ADC3_Init+0xa0>)
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <MX_ADC3_Init+0x98>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002172:	2201      	movs	r2, #1
 8002174:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002180:	2201      	movs	r2, #1
 8002182:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002184:	480d      	ldr	r0, [pc, #52]	@ (80021bc <MX_ADC3_Init+0x98>)
 8002186:	f000 ffeb 	bl	8003160 <HAL_ADC_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002190:	f000 fcec 	bl	8002b6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002194:	2300      	movs	r3, #0
 8002196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002198:	2301      	movs	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_ADC3_Init+0x98>)
 80021a6:	f001 f985 	bl	80034b4 <HAL_ADC_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80021b0:	f000 fcdc 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200004a4 	.word	0x200004a4
 80021c0:	40012200 	.word	0x40012200
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <MX_CRC_Init+0x40>)
 80021d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	@ (8002204 <MX_CRC_Init+0x3c>)
 80021f2:	f001 fcc1 	bl	8003b78 <HAL_CRC_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80021fc:	f000 fcb6 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200004ec 	.word	0x200004ec
 8002208:	40023000 	.word	0x40023000

0800220c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_TIM11_Init+0x40>)
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <MX_TIM11_Init+0x44>)
 8002214:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2160-1;
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <MX_TIM11_Init+0x40>)
 8002218:	f640 026f 	movw	r2, #2159	@ 0x86f
 800221c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <MX_TIM11_Init+0x40>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_TIM11_Init+0x40>)
 8002226:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800222a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <MX_TIM11_Init+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_TIM11_Init+0x40>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_TIM11_Init+0x40>)
 800223a:	f003 f8d1 	bl	80053e0 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002244:	f000 fc92 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000510 	.word	0x20000510
 8002250:	40014800 	.word	0x40014800

08002254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 800225a:	4a15      	ldr	r2, [pc, #84]	@ (80022b0 <MX_USART1_UART_Init+0x5c>)
 800225c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <MX_USART1_UART_Init+0x58>)
 8002298:	f003 fb78 	bl	800598c <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022a2:	f000 fc63 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000055c 	.word	0x2000055c
 80022b0:	40011000 	.word	0x40011000

080022b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b090      	sub	sp, #64	@ 0x40
 80022b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ca:	4baf      	ldr	r3, [pc, #700]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4aae      	ldr	r2, [pc, #696]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4bac      	ldr	r3, [pc, #688]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022e2:	4ba9      	ldr	r3, [pc, #676]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4aa8      	ldr	r2, [pc, #672]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4ba3      	ldr	r3, [pc, #652]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4aa2      	ldr	r2, [pc, #648]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4ba0      	ldr	r3, [pc, #640]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002312:	4b9d      	ldr	r3, [pc, #628]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a9c      	ldr	r2, [pc, #624]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b9a      	ldr	r3, [pc, #616]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b97      	ldr	r3, [pc, #604]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a96      	ldr	r2, [pc, #600]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b94      	ldr	r3, [pc, #592]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b91      	ldr	r3, [pc, #580]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a90      	ldr	r2, [pc, #576]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b8e      	ldr	r3, [pc, #568]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800235a:	4b8b      	ldr	r3, [pc, #556]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a8a      	ldr	r2, [pc, #552]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b88      	ldr	r3, [pc, #544]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002372:	4b85      	ldr	r3, [pc, #532]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a84      	ldr	r2, [pc, #528]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b82      	ldr	r3, [pc, #520]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800238a:	4b7f      	ldr	r3, [pc, #508]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a7e      	ldr	r2, [pc, #504]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b7c      	ldr	r3, [pc, #496]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023a2:	4b79      	ldr	r3, [pc, #484]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a78      	ldr	r2, [pc, #480]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023a8:	f043 0320 	orr.w	r3, r3, #32
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b76      	ldr	r3, [pc, #472]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	4a72      	ldr	r2, [pc, #456]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c6:	4b70      	ldr	r3, [pc, #448]	@ (8002588 <MX_GPIO_Init+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorYellow2_GPIO_Port, IndicatorYellow2_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2110      	movs	r1, #16
 80023d6:	486d      	ldr	r0, [pc, #436]	@ (800258c <MX_GPIO_Init+0x2d8>)
 80023d8:	f001 ff0e 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	2120      	movs	r1, #32
 80023e0:	486b      	ldr	r0, [pc, #428]	@ (8002590 <MX_GPIO_Init+0x2dc>)
 80023e2:	f001 ff09 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	210d      	movs	r1, #13
 80023ea:	486a      	ldr	r0, [pc, #424]	@ (8002594 <MX_GPIO_Init+0x2e0>)
 80023ec:	f001 ff04 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2108      	movs	r1, #8
 80023f4:	4868      	ldr	r0, [pc, #416]	@ (8002598 <MX_GPIO_Init+0x2e4>)
 80023f6:	f001 feff 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002400:	4864      	ldr	r0, [pc, #400]	@ (8002594 <MX_GPIO_Init+0x2e0>)
 8002402:	f001 fef9 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|IndicatorBlue3_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 800240c:	4863      	ldr	r0, [pc, #396]	@ (800259c <MX_GPIO_Init+0x2e8>)
 800240e:	f001 fef3 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IndicatorGreen_GPIO_Port, IndicatorGreen_Pin, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	@ 0x40
 8002416:	4862      	ldr	r0, [pc, #392]	@ (80025a0 <MX_GPIO_Init+0x2ec>)
 8002418:	f001 feee 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IndicatorBlue1_Pin|IndicatorYellow1_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	21c8      	movs	r1, #200	@ 0xc8
 8002420:	4860      	ldr	r0, [pc, #384]	@ (80025a4 <MX_GPIO_Init+0x2f0>)
 8002422:	f001 fee9 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002426:	2310      	movs	r3, #16
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002436:	230e      	movs	r3, #14
 8002438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243e:	4619      	mov	r1, r3
 8002440:	4859      	ldr	r0, [pc, #356]	@ (80025a8 <MX_GPIO_Init+0x2f4>)
 8002442:	f001 fd15 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002446:	2308      	movs	r3, #8
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002456:	4619      	mov	r1, r3
 8002458:	4853      	ldr	r0, [pc, #332]	@ (80025a8 <MX_GPIO_Init+0x2f4>)
 800245a:	f001 fd09 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800245e:	2304      	movs	r3, #4
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800246e:	2309      	movs	r3, #9
 8002470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002476:	4619      	mov	r1, r3
 8002478:	484b      	ldr	r0, [pc, #300]	@ (80025a8 <MX_GPIO_Init+0x2f4>)
 800247a:	f001 fcf9 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800247e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002490:	230b      	movs	r3, #11
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002494:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	4842      	ldr	r0, [pc, #264]	@ (80025a4 <MX_GPIO_Init+0x2f0>)
 800249c:	f001 fce8 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80024a0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024b2:	230c      	movs	r3, #12
 80024b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	483a      	ldr	r0, [pc, #232]	@ (80025a8 <MX_GPIO_Init+0x2f4>)
 80024be:	f001 fcd7 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80024c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d4:	2304      	movs	r3, #4
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	482b      	ldr	r0, [pc, #172]	@ (800258c <MX_GPIO_Init+0x2d8>)
 80024e0:	f001 fcc6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorYellow2_Pin */
  GPIO_InitStruct.Pin = IndicatorYellow2_Pin;
 80024e4:	2310      	movs	r3, #16
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ec:	2302      	movs	r3, #2
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorYellow2_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f8:	4619      	mov	r1, r3
 80024fa:	4824      	ldr	r0, [pc, #144]	@ (800258c <MX_GPIO_Init+0x2d8>)
 80024fc:	f001 fcb8 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002510:	2308      	movs	r3, #8
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	481d      	ldr	r0, [pc, #116]	@ (8002590 <MX_GPIO_Init+0x2dc>)
 800251c:	f001 fca8 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002520:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002532:	230c      	movs	r3, #12
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	4818      	ldr	r0, [pc, #96]	@ (80025a0 <MX_GPIO_Init+0x2ec>)
 800253e:	f001 fc97 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002554:	2301      	movs	r3, #1
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800255c:	4619      	mov	r1, r3
 800255e:	4813      	ldr	r0, [pc, #76]	@ (80025ac <MX_GPIO_Init+0x2f8>)
 8002560:	f001 fc86 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002564:	2360      	movs	r3, #96	@ 0x60
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002574:	230d      	movs	r3, #13
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	480a      	ldr	r0, [pc, #40]	@ (80025a8 <MX_GPIO_Init+0x2f4>)
 8002580:	f001 fc76 	bl	8003e70 <HAL_GPIO_Init>
 8002584:	e014      	b.n	80025b0 <MX_GPIO_Init+0x2fc>
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40020400 	.word	0x40020400
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40022000 	.word	0x40022000
 8002598:	40022800 	.word	0x40022800
 800259c:	40021c00 	.word	0x40021c00
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40020000 	.word	0x40020000

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80025b0:	2340      	movs	r3, #64	@ 0x40
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025c0:	230a      	movs	r3, #10
 80025c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	48bc      	ldr	r0, [pc, #752]	@ (80028bc <MX_GPIO_Init+0x608>)
 80025cc:	f001 fc50 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80025d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e2:	230c      	movs	r3, #12
 80025e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ea:	4619      	mov	r1, r3
 80025ec:	48b4      	ldr	r0, [pc, #720]	@ (80028c0 <MX_GPIO_Init+0x60c>)
 80025ee:	f001 fc3f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80025f2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002604:	230e      	movs	r3, #14
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002608:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800260c:	4619      	mov	r1, r3
 800260e:	48ad      	ldr	r0, [pc, #692]	@ (80028c4 <MX_GPIO_Init+0x610>)
 8002610:	f001 fc2e 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261a:	2300      	movs	r3, #0
 800261c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002626:	4619      	mov	r1, r3
 8002628:	48a6      	ldr	r0, [pc, #664]	@ (80028c4 <MX_GPIO_Init+0x610>)
 800262a:	f001 fc21 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800262e:	2340      	movs	r3, #64	@ 0x40
 8002630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002632:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002636:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002640:	4619      	mov	r1, r3
 8002642:	48a1      	ldr	r0, [pc, #644]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002644:	f001 fc14 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002648:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800265a:	230c      	movs	r3, #12
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	4898      	ldr	r0, [pc, #608]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002666:	f001 fc03 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800266a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800266e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	2303      	movs	r3, #3
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800267c:	230a      	movs	r3, #10
 800267e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002680:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002684:	4619      	mov	r1, r3
 8002686:	4891      	ldr	r0, [pc, #580]	@ (80028cc <MX_GPIO_Init+0x618>)
 8002688:	f001 fbf2 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800268c:	23f0      	movs	r3, #240	@ 0xf0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800269c:	230a      	movs	r3, #10
 800269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026a4:	4619      	mov	r1, r3
 80026a6:	488a      	ldr	r0, [pc, #552]	@ (80028d0 <MX_GPIO_Init+0x61c>)
 80026a8:	f001 fbe2 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80026ac:	23f7      	movs	r3, #247	@ 0xf7
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026bc:	230e      	movs	r3, #14
 80026be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026c4:	4619      	mov	r1, r3
 80026c6:	4883      	ldr	r0, [pc, #524]	@ (80028d4 <MX_GPIO_Init+0x620>)
 80026c8:	f001 fbd2 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80026cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026de:	2309      	movs	r3, #9
 80026e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e6:	4619      	mov	r1, r3
 80026e8:	4875      	ldr	r0, [pc, #468]	@ (80028c0 <MX_GPIO_Init+0x60c>)
 80026ea:	f001 fbc1 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002700:	230a      	movs	r3, #10
 8002702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002708:	4619      	mov	r1, r3
 800270a:	486d      	ldr	r0, [pc, #436]	@ (80028c0 <MX_GPIO_Init+0x60c>)
 800270c:	f001 fbb0 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002710:	2320      	movs	r3, #32
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002724:	4619      	mov	r1, r3
 8002726:	4868      	ldr	r0, [pc, #416]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002728:	f001 fba2 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800272c:	2308      	movs	r3, #8
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800273c:	230d      	movs	r3, #13
 800273e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002744:	4619      	mov	r1, r3
 8002746:	4860      	ldr	r0, [pc, #384]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002748:	f001 fb92 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_out_Pin Buzzer_out_Pin IndicatorBlue2_Pin */
  GPIO_InitStruct.Pin = Led_out_Pin|Buzzer_out_Pin|IndicatorBlue2_Pin;
 800274c:	230d      	movs	r3, #13
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002754:	2302      	movs	r3, #2
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800275c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002760:	4619      	mov	r1, r3
 8002762:	485b      	ldr	r0, [pc, #364]	@ (80028d0 <MX_GPIO_Init+0x61c>)
 8002764:	f001 fb84 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276e:	2300      	movs	r3, #0
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800277a:	4619      	mov	r1, r3
 800277c:	4856      	ldr	r0, [pc, #344]	@ (80028d8 <MX_GPIO_Init+0x624>)
 800277e:	f001 fb77 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002782:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002794:	230c      	movs	r3, #12
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800279c:	4619      	mov	r1, r3
 800279e:	484f      	ldr	r0, [pc, #316]	@ (80028dc <MX_GPIO_Init+0x628>)
 80027a0:	f001 fb66 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80027a4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027b6:	230e      	movs	r3, #14
 80027b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027be:	4619      	mov	r1, r3
 80027c0:	4843      	ldr	r0, [pc, #268]	@ (80028d0 <MX_GPIO_Init+0x61c>)
 80027c2:	f001 fb55 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80027c6:	2308      	movs	r3, #8
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027da:	4619      	mov	r1, r3
 80027dc:	483d      	ldr	r0, [pc, #244]	@ (80028d4 <MX_GPIO_Init+0x620>)
 80027de:	f001 fb47 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80027e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027f4:	230d      	movs	r3, #13
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027fc:	4619      	mov	r1, r3
 80027fe:	4830      	ldr	r0, [pc, #192]	@ (80028c0 <MX_GPIO_Init+0x60c>)
 8002800:	f001 fb36 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002804:	2310      	movs	r3, #16
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002808:	2300      	movs	r3, #0
 800280a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002814:	4619      	mov	r1, r3
 8002816:	482c      	ldr	r0, [pc, #176]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002818:	f001 fb2a 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800281c:	2304      	movs	r3, #4
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800282c:	230c      	movs	r3, #12
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002834:	4619      	mov	r1, r3
 8002836:	4824      	ldr	r0, [pc, #144]	@ (80028c8 <MX_GPIO_Init+0x614>)
 8002838:	f001 fb1a 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800283c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800284a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800284e:	4619      	mov	r1, r3
 8002850:	4823      	ldr	r0, [pc, #140]	@ (80028e0 <MX_GPIO_Init+0x62c>)
 8002852:	f001 fb0d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002856:	2302      	movs	r3, #2
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002866:	2305      	movs	r3, #5
 8002868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800286e:	4619      	mov	r1, r3
 8002870:	4817      	ldr	r0, [pc, #92]	@ (80028d0 <MX_GPIO_Init+0x61c>)
 8002872:	f001 fafd 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	2301      	movs	r3, #1
 800287e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800288c:	4619      	mov	r1, r3
 800288e:	4810      	ldr	r0, [pc, #64]	@ (80028d0 <MX_GPIO_Init+0x61c>)
 8002890:	f001 faee 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <MX_GPIO_Init+0x62c>)
 80028ae:	f001 fadf 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80028b2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e013      	b.n	80028e4 <MX_GPIO_Init+0x630>
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40022400 	.word	0x40022400
 80028c8:	40020c00 	.word	0x40020c00
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40022800 	.word	0x40022800
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40021400 	.word	0x40021400
 80028e0:	40021c00 	.word	0x40021c00
 80028e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028ee:	230d      	movs	r3, #13
 80028f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f6:	4619      	mov	r1, r3
 80028f8:	4895      	ldr	r0, [pc, #596]	@ (8002b50 <MX_GPIO_Init+0x89c>)
 80028fa:	f001 fab9 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_pin_Pin */
  GPIO_InitStruct.Pin = Btn_pin_Pin;
 80028fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002904:	2300      	movs	r3, #0
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002908:	2302      	movs	r3, #2
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Btn_pin_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002910:	4619      	mov	r1, r3
 8002912:	4890      	ldr	r0, [pc, #576]	@ (8002b54 <MX_GPIO_Init+0x8a0>)
 8002914:	f001 faac 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800292a:	2301      	movs	r3, #1
 800292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002932:	4619      	mov	r1, r3
 8002934:	4888      	ldr	r0, [pc, #544]	@ (8002b58 <MX_GPIO_Init+0x8a4>)
 8002936:	f001 fa9b 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800293a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002940:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002944:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	4880      	ldr	r0, [pc, #512]	@ (8002b54 <MX_GPIO_Init+0x8a0>)
 8002952:	f001 fa8d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_RX_D0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin;
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002966:	2308      	movs	r3, #8
 8002968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_RX_D0_GPIO_Port, &GPIO_InitStruct);
 800296a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800296e:	4619      	mov	r1, r3
 8002970:	487a      	ldr	r0, [pc, #488]	@ (8002b5c <MX_GPIO_Init+0x8a8>)
 8002972:	f001 fa7d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorGreen_Pin */
  GPIO_InitStruct.Pin = IndicatorGreen_Pin;
 8002976:	2340      	movs	r3, #64	@ 0x40
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297a:	2301      	movs	r3, #1
 800297c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800297e:	2302      	movs	r3, #2
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorGreen_GPIO_Port, &GPIO_InitStruct);
 8002986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800298a:	4619      	mov	r1, r3
 800298c:	4873      	ldr	r0, [pc, #460]	@ (8002b5c <MX_GPIO_Init+0x8a8>)
 800298e:	f001 fa6f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002992:	2328      	movs	r3, #40	@ 0x28
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029a2:	230c      	movs	r3, #12
 80029a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029aa:	4619      	mov	r1, r3
 80029ac:	4868      	ldr	r0, [pc, #416]	@ (8002b50 <MX_GPIO_Init+0x89c>)
 80029ae:	f001 fa5f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : IndicatorBlue1_Pin IndicatorYellow1_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue1_Pin|IndicatorYellow1_Pin;
 80029b2:	23c0      	movs	r3, #192	@ 0xc0
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ba:	2302      	movs	r3, #2
 80029bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c6:	4619      	mov	r1, r3
 80029c8:	4865      	ldr	r0, [pc, #404]	@ (8002b60 <MX_GPIO_Init+0x8ac>)
 80029ca:	f001 fa51 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80029ce:	2308      	movs	r3, #8
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029de:	230c      	movs	r3, #12
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029e6:	4619      	mov	r1, r3
 80029e8:	485c      	ldr	r0, [pc, #368]	@ (8002b5c <MX_GPIO_Init+0x8a8>)
 80029ea:	f001 fa41 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029ee:	2332      	movs	r3, #50	@ 0x32
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029fe:	230b      	movs	r3, #11
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4854      	ldr	r0, [pc, #336]	@ (8002b5c <MX_GPIO_Init+0x8a8>)
 8002a0a:	f001 fa31 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a1e:	2309      	movs	r3, #9
 8002a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	484e      	ldr	r0, [pc, #312]	@ (8002b64 <MX_GPIO_Init+0x8b0>)
 8002a2a:	f001 fa21 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002a2e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a40:	2309      	movs	r3, #9
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4847      	ldr	r0, [pc, #284]	@ (8002b68 <MX_GPIO_Init+0x8b4>)
 8002a4c:	f001 fa10 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002a50:	2308      	movs	r3, #8
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a64:	4619      	mov	r1, r3
 8002a66:	483e      	ldr	r0, [pc, #248]	@ (8002b60 <MX_GPIO_Init+0x8ac>)
 8002a68:	f001 fa02 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4838      	ldr	r0, [pc, #224]	@ (8002b60 <MX_GPIO_Init+0x8ac>)
 8002a80:	f001 f9f6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a84:	2386      	movs	r3, #134	@ 0x86
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a94:	230b      	movs	r3, #11
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	482e      	ldr	r0, [pc, #184]	@ (8002b58 <MX_GPIO_Init+0x8a4>)
 8002aa0:	f001 f9e6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002aa4:	2350      	movs	r3, #80	@ 0x50
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ab4:	230d      	movs	r3, #13
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002abc:	4619      	mov	r1, r3
 8002abe:	4826      	ldr	r0, [pc, #152]	@ (8002b58 <MX_GPIO_Init+0x8a4>)
 8002ac0:	f001 f9d6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002ac4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aca:	2312      	movs	r3, #18
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	481b      	ldr	r0, [pc, #108]	@ (8002b50 <MX_GPIO_Init+0x89c>)
 8002ae2:	f001 f9c5 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D3_Pin */
  GPIO_InitStruct.Pin = ULPI_D3_Pin;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002af8:	230a      	movs	r3, #10
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b00:	4619      	mov	r1, r3
 8002b02:	4818      	ldr	r0, [pc, #96]	@ (8002b64 <MX_GPIO_Init+0x8b0>)
 8002b04:	f001 f9b4 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : IndicatorBlue3_Pin */
  GPIO_InitStruct.Pin = IndicatorBlue3_Pin;
 8002b08:	2340      	movs	r3, #64	@ 0x40
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b10:	2302      	movs	r3, #2
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(IndicatorBlue3_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480c      	ldr	r0, [pc, #48]	@ (8002b50 <MX_GPIO_Init+0x89c>)
 8002b20:	f001 f9a6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002b24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b36:	2305      	movs	r3, #5
 8002b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4808      	ldr	r0, [pc, #32]	@ (8002b64 <MX_GPIO_Init+0x8b0>)
 8002b42:	f001 f995 	bl	8003e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b46:	bf00      	nop
 8002b48:	3740      	adds	r7, #64	@ 0x40
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021c00 	.word	0x40021c00
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40021800 	.word	0x40021800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020c00 	.word	0x40020c00

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
}
 8002b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <Error_Handler+0x8>

08002b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a10      	ldr	r2, [pc, #64]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	210f      	movs	r1, #15
 8002bb2:	f06f 0001 	mvn.w	r0, #1
 8002bb6:	f000 ffa8 	bl	8003b0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_ADC_MspInit+0xa4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d13c      	bne.n	8002c64 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a20      	ldr	r2, [pc, #128]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002bf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c02:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a1a      	ldr	r2, [pc, #104]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c08:	f043 0320 	orr.w	r3, r3, #32
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_ADC_MspInit+0xa8>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002c32:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002c36:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	480b      	ldr	r0, [pc, #44]	@ (8002c74 <HAL_ADC_MspInit+0xac>)
 8002c48:	f001 f912 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_MQ_in_Pin;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c50:	2303      	movs	r3, #3
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_MQ_in_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4806      	ldr	r0, [pc, #24]	@ (8002c78 <HAL_ADC_MspInit+0xb0>)
 8002c60:	f001 f906 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	@ 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40012200 	.word	0x40012200
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40020000 	.word	0x40020000

08002c7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <HAL_CRC_MspInit+0x38>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_CRC_MspInit+0x3c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a09      	ldr	r2, [pc, #36]	@ (8002cb8 <HAL_CRC_MspInit+0x3c>)
 8002c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_CRC_MspInit+0x3c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023000 	.word	0x40023000
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <HAL_TIM_Base_MspInit+0x44>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d113      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_TIM_Base_MspInit+0x48>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <HAL_TIM_Base_MspInit+0x48>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_TIM_Base_MspInit+0x48>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	201a      	movs	r0, #26
 8002cec:	f000 ff0d 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002cf0:	201a      	movs	r0, #26
 8002cf2:	f000 ff26 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40014800 	.word	0x40014800
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	2284      	movs	r2, #132	@ 0x84
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f005 f89c 	bl	8007e66 <memset>
  if(huart->Instance==USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	@ (8002e0c <HAL_UART_MspInit+0x104>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d164      	bne.n	8002e02 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d38:	2340      	movs	r3, #64	@ 0x40
 8002d3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d40:	f107 0318 	add.w	r3, r7, #24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 ff5b 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d50:	f7ff ff0c 	bl	8002b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d54:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	4a2d      	ldr	r2, [pc, #180]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4a27      	ldr	r2, [pc, #156]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_UART_MspInit+0x108>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db4:	2307      	movs	r3, #7
 8002db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002dba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <HAL_UART_MspInit+0x10c>)
 8002dc2:	f001 f855 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002de0:	2307      	movs	r3, #7
 8002de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002de6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dea:	4619      	mov	r1, r3
 8002dec:	480a      	ldr	r0, [pc, #40]	@ (8002e18 <HAL_UART_MspInit+0x110>)
 8002dee:	f001 f83f 	bl	8003e70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2025      	movs	r0, #37	@ 0x25
 8002df8:	f000 fe87 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfc:	2025      	movs	r0, #37	@ 0x25
 8002dfe:	f000 fea0 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	37b0      	adds	r7, #176	@ 0xb0
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020000 	.word	0x40020000

08002e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <NMI_Handler+0x4>

08002e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <HardFault_Handler+0x4>

08002e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <MemManage_Handler+0x4>

08002e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <BusFault_Handler+0x4>

08002e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <UsageFault_Handler+0x4>

08002e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e72:	f000 f955 	bl	8003120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e80:	4802      	ldr	r0, [pc, #8]	@ (8002e8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e82:	f002 fb7d 	bl	8005580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000510 	.word	0x20000510

08002e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e94:	4802      	ldr	r0, [pc, #8]	@ (8002ea0 <USART1_IRQHandler+0x10>)
 8002e96:	f002 fe8f 	bl	8005bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000055c 	.word	0x2000055c

08002ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return 1;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_kill>:

int _kill(int pid, int sig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ebe:	f005 f837 	bl	8007f30 <__errno>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2216      	movs	r2, #22
 8002ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_exit>:

void _exit (int status)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffe7 	bl	8002eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee6:	bf00      	nop
 8002ee8:	e7fd      	b.n	8002ee6 <_exit+0x12>

08002eea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e00a      	b.n	8002f12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002efc:	f3af 8000 	nop.w
 8002f00:	4601      	mov	r1, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	60ba      	str	r2, [r7, #8]
 8002f08:	b2ca      	uxtb	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dbf0      	blt.n	8002efc <_read+0x12>
  }

  return len;
 8002f1a:	687b      	ldr	r3, [r7, #4]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e009      	b.n	8002f4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	60ba      	str	r2, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	dbf1      	blt.n	8002f36 <_write+0x12>
  }
  return len;
 8002f52:	687b      	ldr	r3, [r7, #4]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_close>:

int _close(int file)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f84:	605a      	str	r2, [r3, #4]
  return 0;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_isatty>:

int _isatty(int file)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <_sbrk+0x5c>)
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <_sbrk+0x60>)
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <_sbrk+0x64>)
 8002fe2:	4a12      	ldr	r2, [pc, #72]	@ (800302c <_sbrk+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe6:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d207      	bcs.n	8003004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff4:	f004 ff9c 	bl	8007f30 <__errno>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	e009      	b.n	8003018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003004:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <_sbrk+0x64>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800300a:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	4a05      	ldr	r2, [pc, #20]	@ (8003028 <_sbrk+0x64>)
 8003014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20050000 	.word	0x20050000
 8003024:	00000400 	.word	0x00000400
 8003028:	200005e4 	.word	0x200005e4
 800302c:	20000738 	.word	0x20000738

08003030 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <SystemInit+0x20>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	4a05      	ldr	r2, [pc, #20]	@ (8003050 <SystemInit+0x20>)
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800308c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003058:	480d      	ldr	r0, [pc, #52]	@ (8003090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800305a:	490e      	ldr	r1, [pc, #56]	@ (8003094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800305c:	4a0e      	ldr	r2, [pc, #56]	@ (8003098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003070:	4c0b      	ldr	r4, [pc, #44]	@ (80030a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800307e:	f7ff ffd7 	bl	8003030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003082:	f004 ff5b 	bl	8007f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003086:	f7fe ffc1 	bl	800200c <main>
  bx  lr    
 800308a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800308c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003094:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003098:	0800bc18 	.word	0x0800bc18
  ldr r2, =_sbss
 800309c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80030a0:	20000738 	.word	0x20000738

080030a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC_IRQHandler>

080030a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f000 fd22 	bl	8003af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f000 f805 	bl	80030c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b6:	f7ff fd5f 	bl	8002b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_InitTick+0x54>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_InitTick+0x58>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4619      	mov	r1, r3
 80030d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fd3d 	bl	8003b5e <HAL_SYSTICK_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00e      	b.n	800310c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0f      	cmp	r3, #15
 80030f2:	d80a      	bhi.n	800310a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f4:	2200      	movs	r2, #0
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f000 fd05 	bl	8003b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003100:	4a06      	ldr	r2, [pc, #24]	@ (800311c <HAL_InitTick+0x5c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000184 	.word	0x20000184
 8003118:	2000018c 	.word	0x2000018c
 800311c:	20000188 	.word	0x20000188

08003120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_IncTick+0x20>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_IncTick+0x24>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <HAL_IncTick+0x24>)
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000018c 	.word	0x2000018c
 8003144:	200005e8 	.word	0x200005e8

08003148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <HAL_GetTick+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200005e8 	.word	0x200005e8

08003160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e031      	b.n	80031da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fd22 	bl	8002bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_ADC_Init+0x84>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fad6 	bl	8003760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ca:	e001      	b.n	80031d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	ffffeefd 	.word	0xffffeefd

080031e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Start+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0ad      	b.n	800335e <HAL_ADC_Start+0x176>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d018      	beq.n	800324a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003228:	4b50      	ldr	r3, [pc, #320]	@ (800336c <HAL_ADC_Start+0x184>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a50      	ldr	r2, [pc, #320]	@ (8003370 <HAL_ADC_Start+0x188>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9a      	lsrs	r2, r3, #18
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800323c:	e002      	b.n	8003244 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d175      	bne.n	8003344 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325c:	4b45      	ldr	r3, [pc, #276]	@ (8003374 <HAL_ADC_Start+0x18c>)
 800325e:	4013      	ands	r3, r2
 8003260:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800327e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d106      	bne.n	80032a2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	f023 0206 	bic.w	r2, r3, #6
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
 80032a0:	e002      	b.n	80032a8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <HAL_ADC_Start+0x190>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d143      	bne.n	800335c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	e03a      	b.n	800335c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	@ (800337c <HAL_ADC_Start+0x194>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10e      	bne.n	800330e <HAL_ADC_Start+0x126>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800330c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <HAL_ADC_Start+0x190>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d120      	bne.n	800335c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <HAL_ADC_Start+0x198>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d11b      	bne.n	800335c <HAL_ADC_Start+0x174>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d114      	bne.n	800335c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	e00b      	b.n	800335c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000184 	.word	0x20000184
 8003370:	431bde83 	.word	0x431bde83
 8003374:	fffff8fe 	.word	0xfffff8fe
 8003378:	40012300 	.word	0x40012300
 800337c:	40012000 	.word	0x40012000
 8003380:	40012200 	.word	0x40012200

08003384 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d113      	bne.n	80033ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b0:	d10b      	bne.n	80033ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e063      	b.n	8003492 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033ca:	f7ff febd 	bl	8003148 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033d0:	e021      	b.n	8003416 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d01d      	beq.n	8003416 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_ADC_PollForConversion+0x6c>
 80033e0:	f7ff feb2 	bl	8003148 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d212      	bcs.n	8003416 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d00b      	beq.n	8003416 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e03d      	b.n	8003492 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d1d6      	bne.n	80033d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0212 	mvn.w	r2, #18
 800342c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d123      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11f      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	f043 0201 	orr.w	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e136      	b.n	800373e <HAL_ADC_ConfigChannel+0x28a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d93a      	bls.n	8003556 <HAL_ADC_ConfigChannel+0xa2>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034e8:	d035      	beq.n	8003556 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68d9      	ldr	r1, [r3, #12]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	3b1e      	subs	r3, #30
 8003500:	2207      	movs	r2, #7
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8d      	ldr	r2, [pc, #564]	@ (800374c <HAL_ADC_ConfigChannel+0x298>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	061a      	lsls	r2, r3, #24
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800352e:	e035      	b.n	800359c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	4603      	mov	r3, r0
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4403      	add	r3, r0
 8003548:	3b1e      	subs	r3, #30
 800354a:	409a      	lsls	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003554:	e022      	b.n	800359c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	2207      	movs	r2, #7
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6919      	ldr	r1, [r3, #16]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	4618      	mov	r0, r3
 800358c:	4603      	mov	r3, r0
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4403      	add	r3, r0
 8003592:	409a      	lsls	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d824      	bhi.n	80035ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	221f      	movs	r2, #31
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43da      	mvns	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	400a      	ands	r2, r1
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	3b05      	subs	r3, #5
 80035e0:	fa00 f203 	lsl.w	r2, r0, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80035ec:	e04c      	b.n	8003688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d824      	bhi.n	8003640 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	@ 0x23
 8003608:	221f      	movs	r2, #31
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	400a      	ands	r2, r1
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	4618      	mov	r0, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b23      	subs	r3, #35	@ 0x23
 8003632:	fa00 f203 	lsl.w	r2, r0, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	631a      	str	r2, [r3, #48]	@ 0x30
 800363e:	e023      	b.n	8003688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b41      	subs	r3, #65	@ 0x41
 8003652:	221f      	movs	r2, #31
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43da      	mvns	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	400a      	ands	r2, r1
 8003660:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	4618      	mov	r0, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	3b41      	subs	r3, #65	@ 0x41
 800367c:	fa00 f203 	lsl.w	r2, r0, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a30      	ldr	r2, [pc, #192]	@ (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10a      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80036a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10f      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x21e>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b12      	cmp	r3, #18
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036ba:	4b26      	ldr	r3, [pc, #152]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4a25      	ldr	r2, [pc, #148]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036c6:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003750 <HAL_ADC_ConfigChannel+0x29c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d12b      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <HAL_ADC_ConfigChannel+0x298>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b11      	cmp	r3, #17
 80036ec:	d122      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036ee:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036fa:	4b16      	ldr	r3, [pc, #88]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <HAL_ADC_ConfigChannel+0x2a0>)
 8003700:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003704:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_ADC_ConfigChannel+0x298>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_ADC_ConfigChannel+0x2a4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a11      	ldr	r2, [pc, #68]	@ (800375c <HAL_ADC_ConfigChannel+0x2a8>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9a      	lsrs	r2, r3, #18
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003726:	e002      	b.n	800372e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f9      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	10000012 	.word	0x10000012
 8003750:	40012000 	.word	0x40012000
 8003754:	40012300 	.word	0x40012300
 8003758:	20000184 	.word	0x20000184
 800375c:	431bde83 	.word	0x431bde83

08003760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003768:	4b78      	ldr	r3, [pc, #480]	@ (800394c <ADC_Init+0x1ec>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a77      	ldr	r2, [pc, #476]	@ (800394c <ADC_Init+0x1ec>)
 800376e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003772:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003774:	4b75      	ldr	r3, [pc, #468]	@ (800394c <ADC_Init+0x1ec>)
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4973      	ldr	r1, [pc, #460]	@ (800394c <ADC_Init+0x1ec>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <ADC_Init+0x1f0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003802:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6899      	ldr	r1, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e00f      	b.n	800385a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003858:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0202 	bic.w	r2, r2, #2
 8003868:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	005a      	lsls	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01b      	beq.n	80038c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003896:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	3b01      	subs	r3, #1
 80038b4:	035a      	lsls	r2, r3, #13
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e007      	b.n	80038d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	051a      	lsls	r2, r3, #20
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003912:	025a      	lsls	r2, r3, #9
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	029a      	lsls	r2, r3, #10
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40012300 	.word	0x40012300
 8003950:	0f000001 	.word	0x0f000001

08003954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <__NVIC_SetPriorityGrouping+0x40>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 800397e:	4313      	orrs	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003982:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <__NVIC_SetPriorityGrouping+0x40>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60d3      	str	r3, [r2, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00
 8003998:	05fa0000 	.word	0x05fa0000

0800399c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a0:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	@ (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	@ (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	4313      	orrs	r3, r2
         );
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac0:	d301      	bcc.n	8003ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <SysTick_Config+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ace:	210f      	movs	r1, #15
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f7ff ff8e 	bl	80039f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <SysTick_Config+0x40>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <SysTick_Config+0x40>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff29 	bl	8003954 <__NVIC_SetPriorityGrouping>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1c:	f7ff ff3e 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff8e 	bl	8003a48 <NVIC_EncodePriority>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff5d 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff31 	bl	80039b8 <__NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffa2 	bl	8003ab0 <SysTick_Config>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e054      	b.n	8003c34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7f5b      	ldrb	r3, [r3, #29]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff f86e 	bl	8002c7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10c      	bne.n	8003bc8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <HAL_CRC_Init+0xc4>)
 8003bb4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0218 	bic.w	r2, r2, #24
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	e00c      	b.n	8003be2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f834 	bl	8003c40 <HAL_CRCEx_Polynomial_Set>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e028      	b.n	8003c34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	795b      	ldrb	r3, [r3, #5]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	611a      	str	r2, [r3, #16]
 8003bf4:	e004      	b.n	8003c00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6912      	ldr	r2, [r2, #16]
 8003bfe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	04c11db7 	.word	0x04c11db7

08003c40 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c50:	231f      	movs	r3, #31
 8003c52:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c54:	bf00      	nop
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	613a      	str	r2, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_CRCEx_Polynomial_Set+0x34>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b18      	cmp	r3, #24
 8003c78:	d846      	bhi.n	8003d08 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003d0f 	.word	0x08003d0f
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d09 	.word	0x08003d09
 8003c8c:	08003d09 	.word	0x08003d09
 8003c90:	08003d09 	.word	0x08003d09
 8003c94:	08003d09 	.word	0x08003d09
 8003c98:	08003d09 	.word	0x08003d09
 8003c9c:	08003d09 	.word	0x08003d09
 8003ca0:	08003cfd 	.word	0x08003cfd
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003d09 	.word	0x08003d09
 8003cac:	08003d09 	.word	0x08003d09
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d09 	.word	0x08003d09
 8003cd0:	08003d09 	.word	0x08003d09
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d09 	.word	0x08003d09
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003ce5 	.word	0x08003ce5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d913      	bls.n	8003d12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cee:	e010      	b.n	8003d12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b07      	cmp	r3, #7
 8003cf4:	d90f      	bls.n	8003d16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cfa:	e00c      	b.n	8003d16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d90b      	bls.n	8003d1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d06:	e008      	b.n	8003d1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e006      	b.n	8003d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 0118 	bic.w	r1, r3, #24
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d5a:	f7ff f9f5 	bl	8003148 <HAL_GetTick>
 8003d5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d008      	beq.n	8003d7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2280      	movs	r2, #128	@ 0x80
 8003d70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e052      	b.n	8003e24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0216 	bic.w	r2, r2, #22
 8003d8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_DMA_Abort+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0208 	bic.w	r2, r2, #8
 8003dbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dce:	e013      	b.n	8003df8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd0:	f7ff f9ba 	bl	8003148 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d90c      	bls.n	8003df8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2203      	movs	r2, #3
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e015      	b.n	8003e24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e4      	bne.n	8003dd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	223f      	movs	r2, #63	@ 0x3f
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2280      	movs	r2, #128	@ 0x80
 8003e44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00c      	b.n	8003e64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	@ 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e175      	b.n	800417c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8164 	bne.w	8004176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x56>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80be 	beq.w	8004176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	4b66      	ldr	r3, [pc, #408]	@ (8004194 <HAL_GPIO_Init+0x324>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	4a65      	ldr	r2, [pc, #404]	@ (8004194 <HAL_GPIO_Init+0x324>)
 8004000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004004:	6453      	str	r3, [r2, #68]	@ 0x44
 8004006:	4b63      	ldr	r3, [pc, #396]	@ (8004194 <HAL_GPIO_Init+0x324>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004012:	4a61      	ldr	r2, [pc, #388]	@ (8004198 <HAL_GPIO_Init+0x328>)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	220f      	movs	r2, #15
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a58      	ldr	r2, [pc, #352]	@ (800419c <HAL_GPIO_Init+0x32c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d037      	beq.n	80040ae <HAL_GPIO_Init+0x23e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a57      	ldr	r2, [pc, #348]	@ (80041a0 <HAL_GPIO_Init+0x330>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_GPIO_Init+0x23a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a56      	ldr	r2, [pc, #344]	@ (80041a4 <HAL_GPIO_Init+0x334>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <HAL_GPIO_Init+0x236>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a55      	ldr	r2, [pc, #340]	@ (80041a8 <HAL_GPIO_Init+0x338>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x232>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a54      	ldr	r2, [pc, #336]	@ (80041ac <HAL_GPIO_Init+0x33c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x22e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a53      	ldr	r2, [pc, #332]	@ (80041b0 <HAL_GPIO_Init+0x340>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x22a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a52      	ldr	r2, [pc, #328]	@ (80041b4 <HAL_GPIO_Init+0x344>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x226>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a51      	ldr	r2, [pc, #324]	@ (80041b8 <HAL_GPIO_Init+0x348>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x222>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a50      	ldr	r2, [pc, #320]	@ (80041bc <HAL_GPIO_Init+0x34c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x21e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4f      	ldr	r2, [pc, #316]	@ (80041c0 <HAL_GPIO_Init+0x350>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x21a>
 8004086:	2309      	movs	r3, #9
 8004088:	e012      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408a:	230a      	movs	r3, #10
 800408c:	e010      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408e:	2308      	movs	r3, #8
 8004090:	e00e      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004092:	2307      	movs	r3, #7
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004096:	2306      	movs	r3, #6
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040c0:	4935      	ldr	r1, [pc, #212]	@ (8004198 <HAL_GPIO_Init+0x328>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f2:	4a34      	ldr	r2, [pc, #208]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f8:	4b32      	ldr	r3, [pc, #200]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800411c:	4a29      	ldr	r2, [pc, #164]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004122:	4b28      	ldr	r3, [pc, #160]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004146:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800414c:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004170:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <HAL_GPIO_Init+0x354>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f ae86 	bls.w	8003e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	@ 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	40013800 	.word	0x40013800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40020800 	.word	0x40020800
 80041a8:	40020c00 	.word	0x40020c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40021400 	.word	0x40021400
 80041b4:	40021800 	.word	0x40021800
 80041b8:	40021c00 	.word	0x40021c00
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40022400 	.word	0x40022400
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e001      	b.n	80041ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004214:	e003      	b.n	800421e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000

0800424c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	@ 0x40
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800427a:	f7fe ff65 	bl	8003148 <HAL_GetTick>
 800427e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004280:	e009      	b.n	8004296 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004282:	f7fe ff61 	bl	8003148 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004290:	d901      	bls.n	8004296 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e022      	b.n	80042dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004296:	4b14      	ldr	r3, [pc, #80]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a2:	d1ee      	bne.n	8004282 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042a4:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0f      	ldr	r2, [pc, #60]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b0:	f7fe ff4a 	bl	8003148 <HAL_GetTick>
 80042b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042b6:	e009      	b.n	80042cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042b8:	f7fe ff46 	bl	8003148 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042c6:	d901      	bls.n	80042cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e007      	b.n	80042dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042d8:	d1ee      	bne.n	80042b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40007000 	.word	0x40007000

080042ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e291      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8087 	beq.w	800441e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004310:	4b96      	ldr	r3, [pc, #600]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b04      	cmp	r3, #4
 800431a:	d00c      	beq.n	8004336 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431c:	4b93      	ldr	r3, [pc, #588]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d112      	bne.n	800434e <HAL_RCC_OscConfig+0x62>
 8004328:	4b90      	ldr	r3, [pc, #576]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004334:	d10b      	bne.n	800434e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	4b8d      	ldr	r3, [pc, #564]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d06c      	beq.n	800441c <HAL_RCC_OscConfig+0x130>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d168      	bne.n	800441c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e26b      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x7a>
 8004358:	4b84      	ldr	r3, [pc, #528]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a83      	ldr	r2, [pc, #524]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0xd8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x9c>
 800436e:	4b7f      	ldr	r3, [pc, #508]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7e      	ldr	r2, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b7c      	ldr	r3, [pc, #496]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7b      	ldr	r2, [pc, #492]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xd8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0xc0>
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a75      	ldr	r2, [pc, #468]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a72      	ldr	r2, [pc, #456]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd8>
 80043ac:	4b6f      	ldr	r3, [pc, #444]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a6e      	ldr	r2, [pc, #440]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b6c      	ldr	r3, [pc, #432]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6b      	ldr	r2, [pc, #428]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe febc 	bl	8003148 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fe feb8 	bl	8003148 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e21f      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b61      	ldr	r3, [pc, #388]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe8>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fea8 	bl	8003148 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fea4 	bl	8003148 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e20b      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b57      	ldr	r3, [pc, #348]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x110>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d069      	beq.n	80044fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442a:	4b50      	ldr	r3, [pc, #320]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b4d      	ldr	r3, [pc, #308]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x190>
 8004442:	4b4a      	ldr	r3, [pc, #296]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b47      	ldr	r3, [pc, #284]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x17a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1df      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b41      	ldr	r3, [pc, #260]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	493d      	ldr	r1, [pc, #244]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e040      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d023      	beq.n	80044cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b39      	ldr	r3, [pc, #228]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a38      	ldr	r2, [pc, #224]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe fe5a 	bl	8003148 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe fe56 	bl	8003148 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1bd      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b30      	ldr	r3, [pc, #192]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4929      	ldr	r1, [pc, #164]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e018      	b.n	80044fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044cc:	4b27      	ldr	r3, [pc, #156]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a26      	ldr	r2, [pc, #152]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fe36 	bl	8003148 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe fe32 	bl	8003148 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e199      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d038      	beq.n	800457c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b16      	ldr	r3, [pc, #88]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	4a15      	ldr	r2, [pc, #84]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fe fe13 	bl	8003148 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004526:	f7fe fe0f 	bl	8003148 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e176      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004538:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800453a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x23a>
 8004544:	e01a      	b.n	800457c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <HAL_RCC_OscConfig+0x280>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fe fdf9 	bl	8003148 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fe fdf5 	bl	8003148 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d903      	bls.n	8004570 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e15c      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
 800456c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b91      	ldr	r3, [pc, #580]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ee      	bne.n	800455a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a4 	beq.w	80046d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b8b      	ldr	r3, [pc, #556]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	4b88      	ldr	r3, [pc, #544]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4a87      	ldr	r2, [pc, #540]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a2:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b2:	4b82      	ldr	r3, [pc, #520]	@ (80047bc <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d118      	bne.n	80045f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045be:	4b7f      	ldr	r3, [pc, #508]	@ (80047bc <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7e      	ldr	r2, [pc, #504]	@ (80047bc <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ca:	f7fe fdbd 	bl	8003148 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fe fdb9 	bl	8003148 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b64      	cmp	r3, #100	@ 0x64
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e120      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e4:	4b75      	ldr	r3, [pc, #468]	@ (80047bc <HAL_RCC_OscConfig+0x4d0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x31a>
 80045f8:	4b6f      	ldr	r3, [pc, #444]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	4a6e      	ldr	r2, [pc, #440]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	@ 0x70
 8004604:	e02d      	b.n	8004662 <HAL_RCC_OscConfig+0x376>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x33c>
 800460e:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	4a69      	ldr	r2, [pc, #420]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6713      	str	r3, [r2, #112]	@ 0x70
 800461a:	4b67      	ldr	r3, [pc, #412]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	4a66      	ldr	r2, [pc, #408]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	@ 0x70
 8004626:	e01c      	b.n	8004662 <HAL_RCC_OscConfig+0x376>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d10c      	bne.n	800464a <HAL_RCC_OscConfig+0x35e>
 8004630:	4b61      	ldr	r3, [pc, #388]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a60      	ldr	r2, [pc, #384]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	4b5e      	ldr	r3, [pc, #376]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a5d      	ldr	r2, [pc, #372]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
 8004648:	e00b      	b.n	8004662 <HAL_RCC_OscConfig+0x376>
 800464a:	4b5b      	ldr	r3, [pc, #364]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	4a5a      	ldr	r2, [pc, #360]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	@ 0x70
 8004656:	4b58      	ldr	r3, [pc, #352]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a57      	ldr	r2, [pc, #348]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800465c:	f023 0304 	bic.w	r3, r3, #4
 8004660:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d015      	beq.n	8004696 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fe fd6d 	bl	8003148 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fe fd69 	bl	8003148 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0ce      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004688:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ee      	beq.n	8004672 <HAL_RCC_OscConfig+0x386>
 8004694:	e014      	b.n	80046c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fe fd57 	bl	8003148 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fe fd53 	bl	8003148 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0b8      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b4:	4b40      	ldr	r3, [pc, #256]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ee      	bne.n	800469e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c6:	4b3c      	ldr	r3, [pc, #240]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a4 	beq.w	8004824 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046dc:	4b36      	ldr	r3, [pc, #216]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d06b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d149      	bne.n	8004784 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a30      	ldr	r2, [pc, #192]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80046f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fd24 	bl	8003148 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fe fd20 	bl	8003148 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e087      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b28      	ldr	r3, [pc, #160]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	4313      	orrs	r3, r2
 8004748:	4a1b      	ldr	r2, [pc, #108]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800474e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fe fcf4 	bl	8003148 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fcf0 	bl	8003148 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e057      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x478>
 8004782:	e04f      	b.n	8004824 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0b      	ldr	r2, [pc, #44]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fe fcda 	bl	8003148 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe fcd6 	bl	8003148 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e03d      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x4ac>
 80047b6:	e035      	b.n	8004824 <HAL_RCC_OscConfig+0x538>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <HAL_RCC_OscConfig+0x544>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d028      	beq.n	8004820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d121      	bne.n	8004820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d11a      	bne.n	8004820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047f0:	4013      	ands	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800

08004834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0d0      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b6a      	ldr	r3, [pc, #424]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d910      	bls.n	800487c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b67      	ldr	r3, [pc, #412]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4965      	ldr	r1, [pc, #404]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b63      	ldr	r3, [pc, #396]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0b8      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004894:	4b59      	ldr	r3, [pc, #356]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a58      	ldr	r2, [pc, #352]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800489e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ac:	4b53      	ldr	r3, [pc, #332]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b50      	ldr	r3, [pc, #320]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	494d      	ldr	r1, [pc, #308]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d040      	beq.n	8004958 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d115      	bne.n	8004916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e07f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f6:	4b41      	ldr	r3, [pc, #260]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e073      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06b      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4936      	ldr	r1, [pc, #216]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fe fc0e 	bl	8003148 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fe fc0a 	bl	8003148 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e053      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b27      	ldr	r3, [pc, #156]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d210      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 020f 	bic.w	r2, r3, #15
 800496e:	4922      	ldr	r1, [pc, #136]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e032      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4916      	ldr	r1, [pc, #88]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b2:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	490e      	ldr	r1, [pc, #56]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049c6:	f000 f821 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	490a      	ldr	r1, [pc, #40]	@ (8004a00 <HAL_RCC_ClockConfig+0x1cc>)
 80049d8:	5ccb      	ldrb	r3, [r1, r3]
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <HAL_RCC_ClockConfig+0x1d0>)
 80049e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049e2:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1d4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fb6a 	bl	80030c0 <HAL_InitTick>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00
 80049fc:	40023800 	.word	0x40023800
 8004a00:	0800b7c4 	.word	0x0800b7c4
 8004a04:	20000184 	.word	0x20000184
 8004a08:	20000188 	.word	0x20000188

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b090      	sub	sp, #64	@ 0x40
 8004a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a24:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d00d      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x40>
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	f200 80a1 	bhi.w	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3e:	e09b      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a44:	e09b      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a46:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a4a:	e098      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a56:	4b4d      	ldr	r3, [pc, #308]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b4a      	ldr	r3, [pc, #296]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a74:	2100      	movs	r1, #0
 8004a76:	4b47      	ldr	r3, [pc, #284]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a78:	fb03 f201 	mul.w	r2, r3, r1
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	4a43      	ldr	r2, [pc, #268]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a86:	fba0 1202 	umull	r1, r2, r0, r2
 8004a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a92:	4413      	add	r3, r2
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a98:	2200      	movs	r2, #0
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	61fa      	str	r2, [r7, #28]
 8004a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004aa6:	f7fc f91f 	bl	8000ce8 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4613      	mov	r3, r2
 8004ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab2:	e053      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab4:	4b35      	ldr	r3, [pc, #212]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	2200      	movs	r2, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	617a      	str	r2, [r7, #20]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ac6:	f04f 0b00 	mov.w	fp, #0
 8004aca:	4652      	mov	r2, sl
 8004acc:	465b      	mov	r3, fp
 8004ace:	f04f 0000 	mov.w	r0, #0
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004adc:	0150      	lsls	r0, r2, #5
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ae6:	eb63 090b 	sbc.w	r9, r3, fp
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004af6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004afa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004afe:	ebb2 0408 	subs.w	r4, r2, r8
 8004b02:	eb63 0509 	sbc.w	r5, r3, r9
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	00eb      	lsls	r3, r5, #3
 8004b10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b14:	00e2      	lsls	r2, r4, #3
 8004b16:	4614      	mov	r4, r2
 8004b18:	461d      	mov	r5, r3
 8004b1a:	eb14 030a 	adds.w	r3, r4, sl
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	eb45 030b 	adc.w	r3, r5, fp
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b32:	4629      	mov	r1, r5
 8004b34:	028b      	lsls	r3, r1, #10
 8004b36:	4621      	mov	r1, r4
 8004b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	028a      	lsls	r2, r1, #10
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b46:	2200      	movs	r2, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	60fa      	str	r2, [r7, #12]
 8004b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b50:	f7fc f8ca 	bl	8000ce8 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3740      	adds	r7, #64	@ 0x40
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	017d7840 	.word	0x017d7840

08004b98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000184 	.word	0x20000184

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0a9b      	lsrs	r3, r3, #10
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	0800b7d4 	.word	0x0800b7d4

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffdc 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0b5b      	lsrs	r3, r3, #13
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	@ (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	0800b7d4 	.word	0x0800b7d4

08004c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d012      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c28:	4b69      	ldr	r3, [pc, #420]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c32:	6093      	str	r3, [r2, #8]
 8004c34:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3c:	4964      	ldr	r1, [pc, #400]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	4959      	ldr	r1, [pc, #356]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c78:	d101      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c96:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	494a      	ldr	r1, [pc, #296]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 808b 	beq.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	4a39      	ldr	r2, [pc, #228]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf0:	4b37      	ldr	r3, [pc, #220]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cfc:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a34      	ldr	r2, [pc, #208]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fe fa1e 	bl	8003148 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fe fa1a 	bl	8003148 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	@ 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e357      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d22:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d035      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d02e      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d4c:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d60:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d66:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d6e:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d74:	4b16      	ldr	r3, [pc, #88]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d114      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fe f9e2 	bl	8003148 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fe f9de 	bl	8003148 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e319      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ee      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db6:	d111      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004dc4:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	4901      	ldr	r1, [pc, #4]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	0ffffcff 	.word	0x0ffffcff
 8004ddc:	4baa      	ldr	r3, [pc, #680]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4aa9      	ldr	r2, [pc, #676]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004de6:	6093      	str	r3, [r2, #8]
 8004de8:	4ba7      	ldr	r3, [pc, #668]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	49a4      	ldr	r1, [pc, #656]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e06:	4ba0      	ldr	r3, [pc, #640]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0c:	4a9e      	ldr	r2, [pc, #632]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e16:	4b9c      	ldr	r3, [pc, #624]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e18:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	4999      	ldr	r1, [pc, #612]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e34:	4b94      	ldr	r3, [pc, #592]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e42:	4991      	ldr	r1, [pc, #580]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e56:	4b8c      	ldr	r3, [pc, #560]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e64:	4988      	ldr	r1, [pc, #544]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e78:	4b83      	ldr	r3, [pc, #524]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e86:	4980      	ldr	r1, [pc, #512]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	4977      	ldr	r1, [pc, #476]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ebc:	4b72      	ldr	r3, [pc, #456]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	496f      	ldr	r1, [pc, #444]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ede:	4b6a      	ldr	r3, [pc, #424]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	f023 020c 	bic.w	r2, r3, #12
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eec:	4966      	ldr	r1, [pc, #408]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f00:	4b61      	ldr	r3, [pc, #388]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0e:	495e      	ldr	r1, [pc, #376]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f22:	4b59      	ldr	r3, [pc, #356]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f28:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	4955      	ldr	r1, [pc, #340]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f44:	4b50      	ldr	r3, [pc, #320]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	494d      	ldr	r1, [pc, #308]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f66:	4b48      	ldr	r3, [pc, #288]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f74:	4944      	ldr	r1, [pc, #272]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f88:	4b3f      	ldr	r3, [pc, #252]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	493c      	ldr	r1, [pc, #240]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004faa:	4b37      	ldr	r3, [pc, #220]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	4933      	ldr	r1, [pc, #204]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fda:	492b      	ldr	r1, [pc, #172]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d011      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fee:	4b26      	ldr	r3, [pc, #152]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ffc:	4922      	ldr	r1, [pc, #136]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800500c:	d101      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800501e:	2301      	movs	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800502e:	4b16      	ldr	r3, [pc, #88]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503c:	4912      	ldr	r1, [pc, #72]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005050:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005060:	4909      	ldr	r1, [pc, #36]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d006      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80d9 	beq.w	800522e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800507c:	4b02      	ldr	r3, [pc, #8]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a01      	ldr	r2, [pc, #4]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005082:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005086:	e001      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005088:	40023800 	.word	0x40023800
 800508c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508e:	f7fe f85b 	bl	8003148 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005096:	f7fe f857 	bl	8003148 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b64      	cmp	r3, #100	@ 0x64
 80050a2:	d901      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e194      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a8:	4b6c      	ldr	r3, [pc, #432]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d021      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11d      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050c8:	4b64      	ldr	r3, [pc, #400]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d6:	4b61      	ldr	r3, [pc, #388]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	019a      	lsls	r2, r3, #6
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	071b      	lsls	r3, r3, #28
 80050fc:	4957      	ldr	r1, [pc, #348]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d02e      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800512e:	d129      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005130:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800513e:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005144:	0f1b      	lsrs	r3, r3, #28
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	019a      	lsls	r2, r3, #6
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	431a      	orrs	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	071b      	lsls	r3, r3, #28
 8005164:	493d      	ldr	r1, [pc, #244]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800516c:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800516e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005172:	f023 021f 	bic.w	r2, r3, #31
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	3b01      	subs	r3, #1
 800517c:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01d      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005190:	4b32      	ldr	r3, [pc, #200]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005196:	0e1b      	lsrs	r3, r3, #24
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800519e:	4b2f      	ldr	r3, [pc, #188]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a4:	0f1b      	lsrs	r3, r3, #28
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	019a      	lsls	r2, r3, #6
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	431a      	orrs	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	071b      	lsls	r3, r3, #28
 80051c4:	4925      	ldr	r1, [pc, #148]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	019a      	lsls	r2, r3, #6
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	4919      	ldr	r1, [pc, #100]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051fc:	4b17      	ldr	r3, [pc, #92]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fd ff9e 	bl	8003148 <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005210:	f7fd ff9a 	bl	8003148 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	@ 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e0d7      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005222:	4b0e      	ldr	r3, [pc, #56]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 80cd 	bne.w	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005236:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a08      	ldr	r2, [pc, #32]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005242:	f7fd ff81 	bl	8003148 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005248:	e00a      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524a:	f7fd ff7d 	bl	8003148 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	@ 0x64
 8005256:	d903      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0ba      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800525c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005260:	4b5e      	ldr	r3, [pc, #376]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800526c:	d0ed      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02e      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d12a      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005296:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a4:	4b4d      	ldr	r3, [pc, #308]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	0f1b      	lsrs	r3, r3, #28
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4944      	ldr	r1, [pc, #272]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052d2:	4b42      	ldr	r3, [pc, #264]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	493d      	ldr	r1, [pc, #244]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d022      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005300:	d11d      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005302:	4b36      	ldr	r3, [pc, #216]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005308:	0e1b      	lsrs	r3, r3, #24
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005310:	4b32      	ldr	r3, [pc, #200]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	0f1b      	lsrs	r3, r3, #28
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	019a      	lsls	r2, r3, #6
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	431a      	orrs	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	4929      	ldr	r1, [pc, #164]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d028      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800534a:	4b24      	ldr	r3, [pc, #144]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005358:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	019a      	lsls	r2, r3, #6
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	431a      	orrs	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	061b      	lsls	r3, r3, #24
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	4917      	ldr	r1, [pc, #92]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005386:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800538c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	4911      	ldr	r1, [pc, #68]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800539c:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0e      	ldr	r2, [pc, #56]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a8:	f7fd fece 	bl	8003148 <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053b0:	f7fd feca 	bl	8003148 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	@ 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e007      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ce:	d1ef      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e049      	b.n	8005486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fc58 	bl	8002cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 f9f6 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d001      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e054      	b.n	8005552 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a26      	ldr	r2, [pc, #152]	@ (8005560 <HAL_TIM_Base_Start_IT+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d022      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d2:	d01d      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a22      	ldr	r2, [pc, #136]	@ (8005564 <HAL_TIM_Base_Start_IT+0xd4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d018      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a21      	ldr	r2, [pc, #132]	@ (8005568 <HAL_TIM_Base_Start_IT+0xd8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	@ (800556c <HAL_TIM_Base_Start_IT+0xdc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00e      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005570 <HAL_TIM_Base_Start_IT+0xe0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <HAL_TIM_Base_Start_IT+0xe4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1b      	ldr	r2, [pc, #108]	@ (8005578 <HAL_TIM_Base_Start_IT+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d115      	bne.n	800553c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	4b19      	ldr	r3, [pc, #100]	@ (800557c <HAL_TIM_Base_Start_IT+0xec>)
 8005518:	4013      	ands	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b06      	cmp	r3, #6
 8005520:	d015      	beq.n	800554e <HAL_TIM_Base_Start_IT+0xbe>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005528:	d011      	beq.n	800554e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	e008      	b.n	800554e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e000      	b.n	8005550 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40001800 	.word	0x40001800
 800557c:	00010007 	.word	0x00010007

08005580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d122      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0202 	mvn.w	r2, #2
 80055ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f905 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8f7 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f908 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d122      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d11b      	bne.n	8005630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0204 	mvn.w	r2, #4
 8005600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8db 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 800561c:	e005      	b.n	800562a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8cd 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f8de 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b08      	cmp	r3, #8
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0208 	mvn.w	r2, #8
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8b1 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8a3 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8b4 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b10      	cmp	r3, #16
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b10      	cmp	r3, #16
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0210 	mvn.w	r2, #16
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2208      	movs	r2, #8
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f887 	bl	80057d2 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f879 	bl	80057be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f88a 	bl	80057e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0201 	mvn.w	r2, #1
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc f8c4 	bl	800188c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570e:	2b80      	cmp	r3, #128	@ 0x80
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f91a 	bl	8005964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574a:	2b80      	cmp	r3, #128	@ 0x80
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f90d 	bl	8005978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f838 	bl	80057fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b20      	cmp	r3, #32
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0220 	mvn.w	r2, #32
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8cd 	bl	8005950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a40      	ldr	r2, [pc, #256]	@ (8005924 <TIM_Base_SetConfig+0x114>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582e:	d00f      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3d      	ldr	r2, [pc, #244]	@ (8005928 <TIM_Base_SetConfig+0x118>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3c      	ldr	r2, [pc, #240]	@ (800592c <TIM_Base_SetConfig+0x11c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3b      	ldr	r2, [pc, #236]	@ (8005930 <TIM_Base_SetConfig+0x120>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3a      	ldr	r2, [pc, #232]	@ (8005934 <TIM_Base_SetConfig+0x124>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d108      	bne.n	8005862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2f      	ldr	r2, [pc, #188]	@ (8005924 <TIM_Base_SetConfig+0x114>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d02b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005870:	d027      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <TIM_Base_SetConfig+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d023      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2b      	ldr	r2, [pc, #172]	@ (800592c <TIM_Base_SetConfig+0x11c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01f      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2a      	ldr	r2, [pc, #168]	@ (8005930 <TIM_Base_SetConfig+0x120>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <TIM_Base_SetConfig+0x124>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d017      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <TIM_Base_SetConfig+0x128>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a27      	ldr	r2, [pc, #156]	@ (800593c <TIM_Base_SetConfig+0x12c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <TIM_Base_SetConfig+0x130>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a25      	ldr	r2, [pc, #148]	@ (8005944 <TIM_Base_SetConfig+0x134>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a24      	ldr	r2, [pc, #144]	@ (8005948 <TIM_Base_SetConfig+0x138>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a23      	ldr	r2, [pc, #140]	@ (800594c <TIM_Base_SetConfig+0x13c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005924 <TIM_Base_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <TIM_Base_SetConfig+0x124>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d103      	bne.n	8005910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	40001800 	.word	0x40001800
 8005948:	40001c00 	.word	0x40001c00
 800594c:	40002000 	.word	0x40002000

08005950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e040      	b.n	8005a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fd f9aa 	bl	8002d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	@ 0x24
 80059b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fbe6 	bl	800619c <UART_SetConfig>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e022      	b.n	8005a20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fe3e 	bl	8006664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fec5 	bl	80067a8 <UART_CheckIdleState>
 8005a1e:	4603      	mov	r3, r0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d171      	bne.n	8005b24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Transmit+0x24>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e06a      	b.n	8005b26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2221      	movs	r2, #33	@ 0x21
 8005a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5e:	f7fd fb73 	bl	8003148 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7c:	d108      	bne.n	8005a90 <HAL_UART_Transmit+0x68>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	e003      	b.n	8005a98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a98:	e02c      	b.n	8005af4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2180      	movs	r1, #128	@ 0x80
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 feb6 	bl	8006816 <UART_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e038      	b.n	8005b26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3302      	adds	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e007      	b.n	8005ae2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1cc      	bne.n	8005a9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2140      	movs	r1, #64	@ 0x40
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fe83 	bl	8006816 <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e005      	b.n	8005b26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b08a      	sub	sp, #40	@ 0x28
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d132      	bne.n	8005bac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_UART_Receive_IT+0x24>
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e02b      	b.n	8005bae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	613b      	str	r3, [r7, #16]
   return(result);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	623b      	str	r3, [r7, #32]
 8005b8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fefe 	bl	80069a4 <UART_Start_Receive_IT>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e000      	b.n	8005bae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3728      	adds	r7, #40	@ 0x28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b0ba      	sub	sp, #232	@ 0xe8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005be2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005be6:	4013      	ands	r3, r2
 8005be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00f      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8297 	beq.w	8006144 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
      }
      return;
 8005c1e:	e291      	b.n	8006144 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8117 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c3a:	4b85      	ldr	r3, [pc, #532]	@ (8005e50 <HAL_UART_IRQHandler+0x298>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 810a 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
 8005c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2202      	movs	r2, #2
 8005c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c9a:	f043 0204 	orr.w	r2, r3, #4
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cca:	f043 0202 	orr.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 81fd 	beq.w	8006148 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	d005      	beq.n	8005d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04f      	beq.n	8005e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fec8 	bl	8006b30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d141      	bne.n	8005e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d9      	bne.n	8005dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e06:	4a13      	ldr	r2, [pc, #76]	@ (8005e54 <HAL_UART_IRQHandler+0x29c>)
 8005e08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe f80c 	bl	8003e2c <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e00f      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9a0 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00b      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f99c 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e007      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f998 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e48:	e17e      	b.n	8006148 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4a:	bf00      	nop
    return;
 8005e4c:	e17c      	b.n	8006148 <HAL_UART_IRQHandler+0x590>
 8005e4e:	bf00      	nop
 8005e50:	04000120 	.word	0x04000120
 8005e54:	08006bf9 	.word	0x08006bf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 814c 	bne.w	80060fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8145 	beq.w	80060fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 813e 	beq.w	80060fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b40      	cmp	r3, #64	@ 0x40
 8005e92:	f040 80b6 	bne.w	8006002 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8150 	beq.w	800614c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	f080 8148 	bcs.w	800614c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed0:	f000 8086 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1da      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e1      	bne.n	8005f1e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e3      	bne.n	8005f5a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb0:	f023 0310 	bic.w	r3, r3, #16
 8005fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e4      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fd feb6 	bl	8003d4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8c2 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006000:	e0a4      	b.n	800614c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800600e:	b29b      	uxth	r3, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8096 	beq.w	8006150 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8091 	beq.w	8006150 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
 8006052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e4      	bne.n	800602e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	623b      	str	r3, [r7, #32]
   return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006088:	633a      	str	r2, [r7, #48]	@ 0x30
 800608a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0310 	bic.w	r3, r3, #16
 80060c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	69b9      	ldr	r1, [r7, #24]
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	617b      	str	r3, [r7, #20]
   return(result);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e4      	bne.n	80060b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f846 	bl	8006184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f8:	e02a      	b.n	8006150 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01c      	beq.n	8006154 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
    }
    return;
 8006122:	e017      	b.n	8006154 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <HAL_UART_IRQHandler+0x59e>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00c      	beq.n	8006156 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fd71 	bl	8006c24 <UART_EndTransmit_IT>
    return;
 8006142:	e008      	b.n	8006156 <HAL_UART_IRQHandler+0x59e>
      return;
 8006144:	bf00      	nop
 8006146:	e006      	b.n	8006156 <HAL_UART_IRQHandler+0x59e>
    return;
 8006148:	bf00      	nop
 800614a:	e004      	b.n	8006156 <HAL_UART_IRQHandler+0x59e>
      return;
 800614c:	bf00      	nop
 800614e:	e002      	b.n	8006156 <HAL_UART_IRQHandler+0x59e>
      return;
 8006150:	bf00      	nop
 8006152:	e000      	b.n	8006156 <HAL_UART_IRQHandler+0x59e>
    return;
 8006154:	bf00      	nop
  }

}
 8006156:	37e8      	adds	r7, #232	@ 0xe8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4ba6      	ldr	r3, [pc, #664]	@ (8006460 <UART_SetConfig+0x2c4>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	6979      	ldr	r1, [r7, #20]
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	430a      	orrs	r2, r1
 800620c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a94      	ldr	r2, [pc, #592]	@ (8006464 <UART_SetConfig+0x2c8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d120      	bne.n	800625a <UART_SetConfig+0xbe>
 8006218:	4b93      	ldr	r3, [pc, #588]	@ (8006468 <UART_SetConfig+0x2cc>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b03      	cmp	r3, #3
 8006224:	d816      	bhi.n	8006254 <UART_SetConfig+0xb8>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0x90>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800623d 	.word	0x0800623d
 8006230:	08006249 	.word	0x08006249
 8006234:	08006243 	.word	0x08006243
 8006238:	0800624f 	.word	0x0800624f
 800623c:	2301      	movs	r3, #1
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e150      	b.n	80064e4 <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e14d      	b.n	80064e4 <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e14a      	b.n	80064e4 <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e147      	b.n	80064e4 <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e144      	b.n	80064e4 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a83      	ldr	r2, [pc, #524]	@ (800646c <UART_SetConfig+0x2d0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d132      	bne.n	80062ca <UART_SetConfig+0x12e>
 8006264:	4b80      	ldr	r3, [pc, #512]	@ (8006468 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f003 030c 	and.w	r3, r3, #12
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d828      	bhi.n	80062c4 <UART_SetConfig+0x128>
 8006272:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <UART_SetConfig+0xdc>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080062c5 	.word	0x080062c5
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062b9 	.word	0x080062b9
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062c5 	.word	0x080062c5
 8006298:	080062b3 	.word	0x080062b3
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062c5 	.word	0x080062c5
 80062a8:	080062bf 	.word	0x080062bf
 80062ac:	2300      	movs	r3, #0
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e118      	b.n	80064e4 <UART_SetConfig+0x348>
 80062b2:	2302      	movs	r3, #2
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e115      	b.n	80064e4 <UART_SetConfig+0x348>
 80062b8:	2304      	movs	r3, #4
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e112      	b.n	80064e4 <UART_SetConfig+0x348>
 80062be:	2308      	movs	r3, #8
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e10f      	b.n	80064e4 <UART_SetConfig+0x348>
 80062c4:	2310      	movs	r3, #16
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e10c      	b.n	80064e4 <UART_SetConfig+0x348>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a68      	ldr	r2, [pc, #416]	@ (8006470 <UART_SetConfig+0x2d4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d120      	bne.n	8006316 <UART_SetConfig+0x17a>
 80062d4:	4b64      	ldr	r3, [pc, #400]	@ (8006468 <UART_SetConfig+0x2cc>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062de:	2b30      	cmp	r3, #48	@ 0x30
 80062e0:	d013      	beq.n	800630a <UART_SetConfig+0x16e>
 80062e2:	2b30      	cmp	r3, #48	@ 0x30
 80062e4:	d814      	bhi.n	8006310 <UART_SetConfig+0x174>
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d009      	beq.n	80062fe <UART_SetConfig+0x162>
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d810      	bhi.n	8006310 <UART_SetConfig+0x174>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <UART_SetConfig+0x15c>
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d006      	beq.n	8006304 <UART_SetConfig+0x168>
 80062f6:	e00b      	b.n	8006310 <UART_SetConfig+0x174>
 80062f8:	2300      	movs	r3, #0
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e0f2      	b.n	80064e4 <UART_SetConfig+0x348>
 80062fe:	2302      	movs	r3, #2
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e0ef      	b.n	80064e4 <UART_SetConfig+0x348>
 8006304:	2304      	movs	r3, #4
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e0ec      	b.n	80064e4 <UART_SetConfig+0x348>
 800630a:	2308      	movs	r3, #8
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e0e9      	b.n	80064e4 <UART_SetConfig+0x348>
 8006310:	2310      	movs	r3, #16
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e0e6      	b.n	80064e4 <UART_SetConfig+0x348>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a56      	ldr	r2, [pc, #344]	@ (8006474 <UART_SetConfig+0x2d8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d120      	bne.n	8006362 <UART_SetConfig+0x1c6>
 8006320:	4b51      	ldr	r3, [pc, #324]	@ (8006468 <UART_SetConfig+0x2cc>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006326:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800632a:	2bc0      	cmp	r3, #192	@ 0xc0
 800632c:	d013      	beq.n	8006356 <UART_SetConfig+0x1ba>
 800632e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006330:	d814      	bhi.n	800635c <UART_SetConfig+0x1c0>
 8006332:	2b80      	cmp	r3, #128	@ 0x80
 8006334:	d009      	beq.n	800634a <UART_SetConfig+0x1ae>
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d810      	bhi.n	800635c <UART_SetConfig+0x1c0>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <UART_SetConfig+0x1a8>
 800633e:	2b40      	cmp	r3, #64	@ 0x40
 8006340:	d006      	beq.n	8006350 <UART_SetConfig+0x1b4>
 8006342:	e00b      	b.n	800635c <UART_SetConfig+0x1c0>
 8006344:	2300      	movs	r3, #0
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e0cc      	b.n	80064e4 <UART_SetConfig+0x348>
 800634a:	2302      	movs	r3, #2
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e0c9      	b.n	80064e4 <UART_SetConfig+0x348>
 8006350:	2304      	movs	r3, #4
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e0c6      	b.n	80064e4 <UART_SetConfig+0x348>
 8006356:	2308      	movs	r3, #8
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e0c3      	b.n	80064e4 <UART_SetConfig+0x348>
 800635c:	2310      	movs	r3, #16
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e0c0      	b.n	80064e4 <UART_SetConfig+0x348>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a44      	ldr	r2, [pc, #272]	@ (8006478 <UART_SetConfig+0x2dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d125      	bne.n	80063b8 <UART_SetConfig+0x21c>
 800636c:	4b3e      	ldr	r3, [pc, #248]	@ (8006468 <UART_SetConfig+0x2cc>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800637a:	d017      	beq.n	80063ac <UART_SetConfig+0x210>
 800637c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006380:	d817      	bhi.n	80063b2 <UART_SetConfig+0x216>
 8006382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006386:	d00b      	beq.n	80063a0 <UART_SetConfig+0x204>
 8006388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638c:	d811      	bhi.n	80063b2 <UART_SetConfig+0x216>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <UART_SetConfig+0x1fe>
 8006392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006396:	d006      	beq.n	80063a6 <UART_SetConfig+0x20a>
 8006398:	e00b      	b.n	80063b2 <UART_SetConfig+0x216>
 800639a:	2300      	movs	r3, #0
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e0a1      	b.n	80064e4 <UART_SetConfig+0x348>
 80063a0:	2302      	movs	r3, #2
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e09e      	b.n	80064e4 <UART_SetConfig+0x348>
 80063a6:	2304      	movs	r3, #4
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e09b      	b.n	80064e4 <UART_SetConfig+0x348>
 80063ac:	2308      	movs	r3, #8
 80063ae:	77fb      	strb	r3, [r7, #31]
 80063b0:	e098      	b.n	80064e4 <UART_SetConfig+0x348>
 80063b2:	2310      	movs	r3, #16
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e095      	b.n	80064e4 <UART_SetConfig+0x348>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2f      	ldr	r2, [pc, #188]	@ (800647c <UART_SetConfig+0x2e0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d125      	bne.n	800640e <UART_SetConfig+0x272>
 80063c2:	4b29      	ldr	r3, [pc, #164]	@ (8006468 <UART_SetConfig+0x2cc>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063d0:	d017      	beq.n	8006402 <UART_SetConfig+0x266>
 80063d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063d6:	d817      	bhi.n	8006408 <UART_SetConfig+0x26c>
 80063d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063dc:	d00b      	beq.n	80063f6 <UART_SetConfig+0x25a>
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e2:	d811      	bhi.n	8006408 <UART_SetConfig+0x26c>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <UART_SetConfig+0x254>
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ec:	d006      	beq.n	80063fc <UART_SetConfig+0x260>
 80063ee:	e00b      	b.n	8006408 <UART_SetConfig+0x26c>
 80063f0:	2301      	movs	r3, #1
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e076      	b.n	80064e4 <UART_SetConfig+0x348>
 80063f6:	2302      	movs	r3, #2
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e073      	b.n	80064e4 <UART_SetConfig+0x348>
 80063fc:	2304      	movs	r3, #4
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e070      	b.n	80064e4 <UART_SetConfig+0x348>
 8006402:	2308      	movs	r3, #8
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e06d      	b.n	80064e4 <UART_SetConfig+0x348>
 8006408:	2310      	movs	r3, #16
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e06a      	b.n	80064e4 <UART_SetConfig+0x348>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <UART_SetConfig+0x2e4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d138      	bne.n	800648a <UART_SetConfig+0x2ee>
 8006418:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <UART_SetConfig+0x2cc>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006422:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006426:	d017      	beq.n	8006458 <UART_SetConfig+0x2bc>
 8006428:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800642c:	d82a      	bhi.n	8006484 <UART_SetConfig+0x2e8>
 800642e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006432:	d00b      	beq.n	800644c <UART_SetConfig+0x2b0>
 8006434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006438:	d824      	bhi.n	8006484 <UART_SetConfig+0x2e8>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <UART_SetConfig+0x2aa>
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006442:	d006      	beq.n	8006452 <UART_SetConfig+0x2b6>
 8006444:	e01e      	b.n	8006484 <UART_SetConfig+0x2e8>
 8006446:	2300      	movs	r3, #0
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e04b      	b.n	80064e4 <UART_SetConfig+0x348>
 800644c:	2302      	movs	r3, #2
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e048      	b.n	80064e4 <UART_SetConfig+0x348>
 8006452:	2304      	movs	r3, #4
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e045      	b.n	80064e4 <UART_SetConfig+0x348>
 8006458:	2308      	movs	r3, #8
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e042      	b.n	80064e4 <UART_SetConfig+0x348>
 800645e:	bf00      	nop
 8006460:	efff69f3 	.word	0xefff69f3
 8006464:	40011000 	.word	0x40011000
 8006468:	40023800 	.word	0x40023800
 800646c:	40004400 	.word	0x40004400
 8006470:	40004800 	.word	0x40004800
 8006474:	40004c00 	.word	0x40004c00
 8006478:	40005000 	.word	0x40005000
 800647c:	40011400 	.word	0x40011400
 8006480:	40007800 	.word	0x40007800
 8006484:	2310      	movs	r3, #16
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e02c      	b.n	80064e4 <UART_SetConfig+0x348>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a72      	ldr	r2, [pc, #456]	@ (8006658 <UART_SetConfig+0x4bc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d125      	bne.n	80064e0 <UART_SetConfig+0x344>
 8006494:	4b71      	ldr	r3, [pc, #452]	@ (800665c <UART_SetConfig+0x4c0>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800649e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064a2:	d017      	beq.n	80064d4 <UART_SetConfig+0x338>
 80064a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064a8:	d817      	bhi.n	80064da <UART_SetConfig+0x33e>
 80064aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ae:	d00b      	beq.n	80064c8 <UART_SetConfig+0x32c>
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b4:	d811      	bhi.n	80064da <UART_SetConfig+0x33e>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <UART_SetConfig+0x326>
 80064ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064be:	d006      	beq.n	80064ce <UART_SetConfig+0x332>
 80064c0:	e00b      	b.n	80064da <UART_SetConfig+0x33e>
 80064c2:	2300      	movs	r3, #0
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e00d      	b.n	80064e4 <UART_SetConfig+0x348>
 80064c8:	2302      	movs	r3, #2
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e00a      	b.n	80064e4 <UART_SetConfig+0x348>
 80064ce:	2304      	movs	r3, #4
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e007      	b.n	80064e4 <UART_SetConfig+0x348>
 80064d4:	2308      	movs	r3, #8
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e004      	b.n	80064e4 <UART_SetConfig+0x348>
 80064da:	2310      	movs	r3, #16
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e001      	b.n	80064e4 <UART_SetConfig+0x348>
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ec:	d15b      	bne.n	80065a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d828      	bhi.n	8006546 <UART_SetConfig+0x3aa>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0x360>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006521 	.word	0x08006521
 8006500:	08006529 	.word	0x08006529
 8006504:	08006531 	.word	0x08006531
 8006508:	08006547 	.word	0x08006547
 800650c:	08006537 	.word	0x08006537
 8006510:	08006547 	.word	0x08006547
 8006514:	08006547 	.word	0x08006547
 8006518:	08006547 	.word	0x08006547
 800651c:	0800653f 	.word	0x0800653f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006520:	f7fe fb46 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006524:	61b8      	str	r0, [r7, #24]
        break;
 8006526:	e013      	b.n	8006550 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006528:	f7fe fb56 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 800652c:	61b8      	str	r0, [r7, #24]
        break;
 800652e:	e00f      	b.n	8006550 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006530:	4b4b      	ldr	r3, [pc, #300]	@ (8006660 <UART_SetConfig+0x4c4>)
 8006532:	61bb      	str	r3, [r7, #24]
        break;
 8006534:	e00c      	b.n	8006550 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006536:	f7fe fa69 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 800653a:	61b8      	str	r0, [r7, #24]
        break;
 800653c:	e008      	b.n	8006550 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006542:	61bb      	str	r3, [r7, #24]
        break;
 8006544:	e004      	b.n	8006550 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	77bb      	strb	r3, [r7, #30]
        break;
 800654e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d074      	beq.n	8006640 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	005a      	lsls	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	d916      	bls.n	80065a0 <UART_SetConfig+0x404>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d212      	bcs.n	80065a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f023 030f 	bic.w	r3, r3, #15
 8006582:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	b29a      	uxth	r2, r3
 8006590:	89fb      	ldrh	r3, [r7, #14]
 8006592:	4313      	orrs	r3, r2
 8006594:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	89fa      	ldrh	r2, [r7, #14]
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	e04f      	b.n	8006640 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	77bb      	strb	r3, [r7, #30]
 80065a4:	e04c      	b.n	8006640 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065a6:	7ffb      	ldrb	r3, [r7, #31]
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d828      	bhi.n	80065fe <UART_SetConfig+0x462>
 80065ac:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <UART_SetConfig+0x418>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	080065d9 	.word	0x080065d9
 80065b8:	080065e1 	.word	0x080065e1
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	080065ff 	.word	0x080065ff
 80065c4:	080065ef 	.word	0x080065ef
 80065c8:	080065ff 	.word	0x080065ff
 80065cc:	080065ff 	.word	0x080065ff
 80065d0:	080065ff 	.word	0x080065ff
 80065d4:	080065f7 	.word	0x080065f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d8:	f7fe faea 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 80065dc:	61b8      	str	r0, [r7, #24]
        break;
 80065de:	e013      	b.n	8006608 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7fe fafa 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 80065e4:	61b8      	str	r0, [r7, #24]
        break;
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006660 <UART_SetConfig+0x4c4>)
 80065ea:	61bb      	str	r3, [r7, #24]
        break;
 80065ec:	e00c      	b.n	8006608 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ee:	f7fe fa0d 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80065f2:	61b8      	str	r0, [r7, #24]
        break;
 80065f4:	e008      	b.n	8006608 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065fa:	61bb      	str	r3, [r7, #24]
        break;
 80065fc:	e004      	b.n	8006608 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	77bb      	strb	r3, [r7, #30]
        break;
 8006606:	bf00      	nop
    }

    if (pclk != 0U)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	085a      	lsrs	r2, r3, #1
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	441a      	add	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b0f      	cmp	r3, #15
 8006626:	d909      	bls.n	800663c <UART_SetConfig+0x4a0>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662e:	d205      	bcs.n	800663c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60da      	str	r2, [r3, #12]
 800663a:	e001      	b.n	8006640 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800664c:	7fbb      	ldrb	r3, [r7, #30]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40007c00 	.word	0x40007c00
 800665c:	40023800 	.word	0x40023800
 8006660:	00f42400 	.word	0x00f42400

08006664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006762:	d10a      	bne.n	800677a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067b8:	f7fc fcc6 	bl	8003148 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10e      	bne.n	80067ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f81b 	bl	8006816 <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e011      	b.n	800680e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b09c      	sub	sp, #112	@ 0x70
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	603b      	str	r3, [r7, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006826:	e0a7      	b.n	8006978 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	f000 80a3 	beq.w	8006978 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006832:	f7fc fc89 	bl	8003148 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <UART_WaitOnFlagUntilTimeout+0x32>
 8006842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006844:	2b00      	cmp	r3, #0
 8006846:	d13f      	bne.n	80068c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006858:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800685c:	667b      	str	r3, [r7, #100]	@ 0x64
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006868:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800686c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e6      	bne.n	8006848 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	663b      	str	r3, [r7, #96]	@ 0x60
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800689a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800689c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80068a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e5      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e068      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d050      	beq.n	8006978 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e4:	d148      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006910:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006914:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	613b      	str	r3, [r7, #16]
   return(result);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	66bb      	str	r3, [r7, #104]	@ 0x68
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006942:	623a      	str	r2, [r7, #32]
 8006944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	69f9      	ldr	r1, [r7, #28]
 8006948:	6a3a      	ldr	r2, [r7, #32]
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e010      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69da      	ldr	r2, [r3, #28]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	f43f af48 	beq.w	8006828 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3770      	adds	r7, #112	@ 0x70
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b097      	sub	sp, #92	@ 0x5c
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d6:	d10e      	bne.n	80069f6 <UART_Start_Receive_IT+0x52>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <UART_Start_Receive_IT+0x48>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80069e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069ea:	e02d      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	22ff      	movs	r2, #255	@ 0xff
 80069f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80069f4:	e028      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <UART_Start_Receive_IT+0x76>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <UART_Start_Receive_IT+0x6c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	22ff      	movs	r2, #255	@ 0xff
 8006a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a0e:	e01b      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	227f      	movs	r2, #127	@ 0x7f
 8006a14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a18:	e016      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a22:	d10d      	bne.n	8006a40 <UART_Start_Receive_IT+0x9c>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <UART_Start_Receive_IT+0x92>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	227f      	movs	r2, #127	@ 0x7f
 8006a30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a34:	e008      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	223f      	movs	r2, #63	@ 0x3f
 8006a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006a3e:	e003      	b.n	8006a48 <UART_Start_Receive_IT+0xa4>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2222      	movs	r2, #34	@ 0x22
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3308      	adds	r3, #8
 8006a76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006a7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a94:	d107      	bne.n	8006aa6 <UART_Start_Receive_IT+0x102>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <UART_Start_Receive_IT+0x184>)
 8006aa2:	669a      	str	r2, [r3, #104]	@ 0x68
 8006aa4:	e002      	b.n	8006aac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a20      	ldr	r2, [pc, #128]	@ (8006b2c <UART_Start_Receive_IT+0x188>)
 8006aaa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <UART_Start_Receive_IT+0x110>
 8006ae6:	e018      	b.n	8006b1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	613b      	str	r3, [r7, #16]
   return(result);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f043 0320 	orr.w	r3, r3, #32
 8006afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	69f9      	ldr	r1, [r7, #28]
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	375c      	adds	r7, #92	@ 0x5c
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	08006ddf 	.word	0x08006ddf
 8006b2c:	08006c79 	.word	0x08006c79

08006b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b095      	sub	sp, #84	@ 0x54
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d118      	bne.n	8006bd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bec:	bf00      	nop
 8006bee:	3754      	adds	r7, #84	@ 0x54
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff faaa 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	613b      	str	r3, [r7, #16]
   return(result);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e6      	bne.n	8006c2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fa76 	bl	800615c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c70:	bf00      	nop
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b096      	sub	sp, #88	@ 0x58
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c86:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c90:	2b22      	cmp	r3, #34	@ 0x22
 8006c92:	f040 8098 	bne.w	8006dc6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ca0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006ca4:	b2d9      	uxtb	r1, r3
 8006ca6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d17b      	bne.n	8006dd6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e6      	bne.n	8006cde <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e5      	bne.n	8006d10 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d12e      	bne.n	8006dbe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	617b      	str	r3, [r7, #20]
   return(result);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d103      	bne.n	8006dae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2210      	movs	r2, #16
 8006dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f9e4 	bl	8006184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dbc:	e00b      	b.n	8006dd6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fb f8dc 	bl	8001f7c <HAL_UART_RxCpltCallback>
}
 8006dc4:	e007      	b.n	8006dd6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0208 	orr.w	r2, r2, #8
 8006dd4:	619a      	str	r2, [r3, #24]
}
 8006dd6:	bf00      	nop
 8006dd8:	3758      	adds	r7, #88	@ 0x58
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b096      	sub	sp, #88	@ 0x58
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006df6:	2b22      	cmp	r3, #34	@ 0x22
 8006df8:	f040 8098 	bne.w	8006f2c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e0c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006e10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e14:	4013      	ands	r3, r2
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e20:	1c9a      	adds	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d17b      	bne.n	8006f3c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e5      	bne.n	8006e76 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d12e      	bne.n	8006f24 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0310 	bic.w	r3, r3, #16
 8006ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e6      	bne.n	8006ecc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d103      	bne.n	8006f14 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2210      	movs	r2, #16
 8006f12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff f931 	bl	8006184 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f22:	e00b      	b.n	8006f3c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fb f829 	bl	8001f7c <HAL_UART_RxCpltCallback>
}
 8006f2a:	e007      	b.n	8006f3c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0208 	orr.w	r2, r2, #8
 8006f3a:	619a      	str	r2, [r3, #24]
}
 8006f3c:	bf00      	nop
 8006f3e:	3758      	adds	r7, #88	@ 0x58
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <__cvt>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	ec57 6b10 	vmov	r6, r7, d0
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4619      	mov	r1, r3
 8006f52:	463b      	mov	r3, r7
 8006f54:	bfbb      	ittet	lt
 8006f56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f5a:	461f      	movlt	r7, r3
 8006f5c:	2300      	movge	r3, #0
 8006f5e:	232d      	movlt	r3, #45	@ 0x2d
 8006f60:	700b      	strb	r3, [r1, #0]
 8006f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f68:	4691      	mov	r9, r2
 8006f6a:	f023 0820 	bic.w	r8, r3, #32
 8006f6e:	bfbc      	itt	lt
 8006f70:	4632      	movlt	r2, r6
 8006f72:	4616      	movlt	r6, r2
 8006f74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f78:	d005      	beq.n	8006f86 <__cvt+0x42>
 8006f7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f7e:	d100      	bne.n	8006f82 <__cvt+0x3e>
 8006f80:	3401      	adds	r4, #1
 8006f82:	2102      	movs	r1, #2
 8006f84:	e000      	b.n	8006f88 <__cvt+0x44>
 8006f86:	2103      	movs	r1, #3
 8006f88:	ab03      	add	r3, sp, #12
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	ab02      	add	r3, sp, #8
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	ec47 6b10 	vmov	d0, r6, r7
 8006f94:	4653      	mov	r3, sl
 8006f96:	4622      	mov	r2, r4
 8006f98:	f001 f886 	bl	80080a8 <_dtoa_r>
 8006f9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	d119      	bne.n	8006fd8 <__cvt+0x94>
 8006fa4:	f019 0f01 	tst.w	r9, #1
 8006fa8:	d00e      	beq.n	8006fc8 <__cvt+0x84>
 8006faa:	eb00 0904 	add.w	r9, r0, r4
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	f7f9 fdb7 	bl	8000b28 <__aeabi_dcmpeq>
 8006fba:	b108      	cbz	r0, 8006fc0 <__cvt+0x7c>
 8006fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fc0:	2230      	movs	r2, #48	@ 0x30
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	454b      	cmp	r3, r9
 8006fc6:	d31e      	bcc.n	8007006 <__cvt+0xc2>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fcc:	1b5b      	subs	r3, r3, r5
 8006fce:	4628      	mov	r0, r5
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	b004      	add	sp, #16
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fdc:	eb00 0904 	add.w	r9, r0, r4
 8006fe0:	d1e5      	bne.n	8006fae <__cvt+0x6a>
 8006fe2:	7803      	ldrb	r3, [r0, #0]
 8006fe4:	2b30      	cmp	r3, #48	@ 0x30
 8006fe6:	d10a      	bne.n	8006ffe <__cvt+0xba>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 fd9a 	bl	8000b28 <__aeabi_dcmpeq>
 8006ff4:	b918      	cbnz	r0, 8006ffe <__cvt+0xba>
 8006ff6:	f1c4 0401 	rsb	r4, r4, #1
 8006ffa:	f8ca 4000 	str.w	r4, [sl]
 8006ffe:	f8da 3000 	ldr.w	r3, [sl]
 8007002:	4499      	add	r9, r3
 8007004:	e7d3      	b.n	8006fae <__cvt+0x6a>
 8007006:	1c59      	adds	r1, r3, #1
 8007008:	9103      	str	r1, [sp, #12]
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e7d9      	b.n	8006fc2 <__cvt+0x7e>

0800700e <__exponent>:
 800700e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007010:	2900      	cmp	r1, #0
 8007012:	bfba      	itte	lt
 8007014:	4249      	neglt	r1, r1
 8007016:	232d      	movlt	r3, #45	@ 0x2d
 8007018:	232b      	movge	r3, #43	@ 0x2b
 800701a:	2909      	cmp	r1, #9
 800701c:	7002      	strb	r2, [r0, #0]
 800701e:	7043      	strb	r3, [r0, #1]
 8007020:	dd29      	ble.n	8007076 <__exponent+0x68>
 8007022:	f10d 0307 	add.w	r3, sp, #7
 8007026:	461d      	mov	r5, r3
 8007028:	270a      	movs	r7, #10
 800702a:	461a      	mov	r2, r3
 800702c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007030:	fb07 1416 	mls	r4, r7, r6, r1
 8007034:	3430      	adds	r4, #48	@ 0x30
 8007036:	f802 4c01 	strb.w	r4, [r2, #-1]
 800703a:	460c      	mov	r4, r1
 800703c:	2c63      	cmp	r4, #99	@ 0x63
 800703e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007042:	4631      	mov	r1, r6
 8007044:	dcf1      	bgt.n	800702a <__exponent+0x1c>
 8007046:	3130      	adds	r1, #48	@ 0x30
 8007048:	1e94      	subs	r4, r2, #2
 800704a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800704e:	1c41      	adds	r1, r0, #1
 8007050:	4623      	mov	r3, r4
 8007052:	42ab      	cmp	r3, r5
 8007054:	d30a      	bcc.n	800706c <__exponent+0x5e>
 8007056:	f10d 0309 	add.w	r3, sp, #9
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	42ac      	cmp	r4, r5
 800705e:	bf88      	it	hi
 8007060:	2300      	movhi	r3, #0
 8007062:	3302      	adds	r3, #2
 8007064:	4403      	add	r3, r0
 8007066:	1a18      	subs	r0, r3, r0
 8007068:	b003      	add	sp, #12
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007070:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007074:	e7ed      	b.n	8007052 <__exponent+0x44>
 8007076:	2330      	movs	r3, #48	@ 0x30
 8007078:	3130      	adds	r1, #48	@ 0x30
 800707a:	7083      	strb	r3, [r0, #2]
 800707c:	70c1      	strb	r1, [r0, #3]
 800707e:	1d03      	adds	r3, r0, #4
 8007080:	e7f1      	b.n	8007066 <__exponent+0x58>
	...

08007084 <_printf_float>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	b08d      	sub	sp, #52	@ 0x34
 800708a:	460c      	mov	r4, r1
 800708c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007090:	4616      	mov	r6, r2
 8007092:	461f      	mov	r7, r3
 8007094:	4605      	mov	r5, r0
 8007096:	f000 ff01 	bl	8007e9c <_localeconv_r>
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7f9 f916 	bl	80002d0 <strlen>
 80070a4:	2300      	movs	r3, #0
 80070a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a8:	f8d8 3000 	ldr.w	r3, [r8]
 80070ac:	9005      	str	r0, [sp, #20]
 80070ae:	3307      	adds	r3, #7
 80070b0:	f023 0307 	bic.w	r3, r3, #7
 80070b4:	f103 0208 	add.w	r2, r3, #8
 80070b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070bc:	f8d4 b000 	ldr.w	fp, [r4]
 80070c0:	f8c8 2000 	str.w	r2, [r8]
 80070c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80070d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070da:	4b9c      	ldr	r3, [pc, #624]	@ (800734c <_printf_float+0x2c8>)
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	f7f9 fd54 	bl	8000b8c <__aeabi_dcmpun>
 80070e4:	bb70      	cbnz	r0, 8007144 <_printf_float+0xc0>
 80070e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ea:	4b98      	ldr	r3, [pc, #608]	@ (800734c <_printf_float+0x2c8>)
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295
 80070f0:	f7f9 fd2e 	bl	8000b50 <__aeabi_dcmple>
 80070f4:	bb30      	cbnz	r0, 8007144 <_printf_float+0xc0>
 80070f6:	2200      	movs	r2, #0
 80070f8:	2300      	movs	r3, #0
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fd1d 	bl	8000b3c <__aeabi_dcmplt>
 8007102:	b110      	cbz	r0, 800710a <_printf_float+0x86>
 8007104:	232d      	movs	r3, #45	@ 0x2d
 8007106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800710a:	4a91      	ldr	r2, [pc, #580]	@ (8007350 <_printf_float+0x2cc>)
 800710c:	4b91      	ldr	r3, [pc, #580]	@ (8007354 <_printf_float+0x2d0>)
 800710e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007112:	bf94      	ite	ls
 8007114:	4690      	movls	r8, r2
 8007116:	4698      	movhi	r8, r3
 8007118:	2303      	movs	r3, #3
 800711a:	6123      	str	r3, [r4, #16]
 800711c:	f02b 0304 	bic.w	r3, fp, #4
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	f04f 0900 	mov.w	r9, #0
 8007126:	9700      	str	r7, [sp, #0]
 8007128:	4633      	mov	r3, r6
 800712a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800712c:	4621      	mov	r1, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f9d2 	bl	80074d8 <_printf_common>
 8007134:	3001      	adds	r0, #1
 8007136:	f040 808d 	bne.w	8007254 <_printf_float+0x1d0>
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	b00d      	add	sp, #52	@ 0x34
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	4640      	mov	r0, r8
 800714a:	4649      	mov	r1, r9
 800714c:	f7f9 fd1e 	bl	8000b8c <__aeabi_dcmpun>
 8007150:	b140      	cbz	r0, 8007164 <_printf_float+0xe0>
 8007152:	464b      	mov	r3, r9
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfbc      	itt	lt
 8007158:	232d      	movlt	r3, #45	@ 0x2d
 800715a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800715e:	4a7e      	ldr	r2, [pc, #504]	@ (8007358 <_printf_float+0x2d4>)
 8007160:	4b7e      	ldr	r3, [pc, #504]	@ (800735c <_printf_float+0x2d8>)
 8007162:	e7d4      	b.n	800710e <_printf_float+0x8a>
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800716a:	9206      	str	r2, [sp, #24]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	d13b      	bne.n	80071e8 <_printf_float+0x164>
 8007170:	2306      	movs	r3, #6
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007178:	2300      	movs	r3, #0
 800717a:	6022      	str	r2, [r4, #0]
 800717c:	9303      	str	r3, [sp, #12]
 800717e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007180:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007184:	ab09      	add	r3, sp, #36	@ 0x24
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	ec49 8b10 	vmov	d0, r8, r9
 800718e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007192:	4628      	mov	r0, r5
 8007194:	f7ff fed6 	bl	8006f44 <__cvt>
 8007198:	9b06      	ldr	r3, [sp, #24]
 800719a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800719c:	2b47      	cmp	r3, #71	@ 0x47
 800719e:	4680      	mov	r8, r0
 80071a0:	d129      	bne.n	80071f6 <_printf_float+0x172>
 80071a2:	1cc8      	adds	r0, r1, #3
 80071a4:	db02      	blt.n	80071ac <_printf_float+0x128>
 80071a6:	6863      	ldr	r3, [r4, #4]
 80071a8:	4299      	cmp	r1, r3
 80071aa:	dd41      	ble.n	8007230 <_printf_float+0x1ac>
 80071ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80071b0:	fa5f fa8a 	uxtb.w	sl, sl
 80071b4:	3901      	subs	r1, #1
 80071b6:	4652      	mov	r2, sl
 80071b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80071be:	f7ff ff26 	bl	800700e <__exponent>
 80071c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071c4:	1813      	adds	r3, r2, r0
 80071c6:	2a01      	cmp	r2, #1
 80071c8:	4681      	mov	r9, r0
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	dc02      	bgt.n	80071d4 <_printf_float+0x150>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	07d2      	lsls	r2, r2, #31
 80071d2:	d501      	bpl.n	80071d8 <_printf_float+0x154>
 80071d4:	3301      	adds	r3, #1
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0a2      	beq.n	8007126 <_printf_float+0xa2>
 80071e0:	232d      	movs	r3, #45	@ 0x2d
 80071e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e6:	e79e      	b.n	8007126 <_printf_float+0xa2>
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	2a47      	cmp	r2, #71	@ 0x47
 80071ec:	d1c2      	bne.n	8007174 <_printf_float+0xf0>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1c0      	bne.n	8007174 <_printf_float+0xf0>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e7bd      	b.n	8007172 <_printf_float+0xee>
 80071f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071fa:	d9db      	bls.n	80071b4 <_printf_float+0x130>
 80071fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007200:	d118      	bne.n	8007234 <_printf_float+0x1b0>
 8007202:	2900      	cmp	r1, #0
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	dd0b      	ble.n	8007220 <_printf_float+0x19c>
 8007208:	6121      	str	r1, [r4, #16]
 800720a:	b913      	cbnz	r3, 8007212 <_printf_float+0x18e>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	07d0      	lsls	r0, r2, #31
 8007210:	d502      	bpl.n	8007218 <_printf_float+0x194>
 8007212:	3301      	adds	r3, #1
 8007214:	440b      	add	r3, r1
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800721a:	f04f 0900 	mov.w	r9, #0
 800721e:	e7db      	b.n	80071d8 <_printf_float+0x154>
 8007220:	b913      	cbnz	r3, 8007228 <_printf_float+0x1a4>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	07d2      	lsls	r2, r2, #31
 8007226:	d501      	bpl.n	800722c <_printf_float+0x1a8>
 8007228:	3302      	adds	r3, #2
 800722a:	e7f4      	b.n	8007216 <_printf_float+0x192>
 800722c:	2301      	movs	r3, #1
 800722e:	e7f2      	b.n	8007216 <_printf_float+0x192>
 8007230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007236:	4299      	cmp	r1, r3
 8007238:	db05      	blt.n	8007246 <_printf_float+0x1c2>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6121      	str	r1, [r4, #16]
 800723e:	07d8      	lsls	r0, r3, #31
 8007240:	d5ea      	bpl.n	8007218 <_printf_float+0x194>
 8007242:	1c4b      	adds	r3, r1, #1
 8007244:	e7e7      	b.n	8007216 <_printf_float+0x192>
 8007246:	2900      	cmp	r1, #0
 8007248:	bfd4      	ite	le
 800724a:	f1c1 0202 	rsble	r2, r1, #2
 800724e:	2201      	movgt	r2, #1
 8007250:	4413      	add	r3, r2
 8007252:	e7e0      	b.n	8007216 <_printf_float+0x192>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	055a      	lsls	r2, r3, #21
 8007258:	d407      	bmi.n	800726a <_printf_float+0x1e6>
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	4642      	mov	r2, r8
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	d12b      	bne.n	80072c0 <_printf_float+0x23c>
 8007268:	e767      	b.n	800713a <_printf_float+0xb6>
 800726a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800726e:	f240 80dd 	bls.w	800742c <_printf_float+0x3a8>
 8007272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	f7f9 fc55 	bl	8000b28 <__aeabi_dcmpeq>
 800727e:	2800      	cmp	r0, #0
 8007280:	d033      	beq.n	80072ea <_printf_float+0x266>
 8007282:	4a37      	ldr	r2, [pc, #220]	@ (8007360 <_printf_float+0x2dc>)
 8007284:	2301      	movs	r3, #1
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	f43f af54 	beq.w	800713a <_printf_float+0xb6>
 8007292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007296:	4543      	cmp	r3, r8
 8007298:	db02      	blt.n	80072a0 <_printf_float+0x21c>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	07d8      	lsls	r0, r3, #31
 800729e:	d50f      	bpl.n	80072c0 <_printf_float+0x23c>
 80072a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f af45 	beq.w	800713a <_printf_float+0xb6>
 80072b0:	f04f 0900 	mov.w	r9, #0
 80072b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80072b8:	f104 0a1a 	add.w	sl, r4, #26
 80072bc:	45c8      	cmp	r8, r9
 80072be:	dc09      	bgt.n	80072d4 <_printf_float+0x250>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	079b      	lsls	r3, r3, #30
 80072c4:	f100 8103 	bmi.w	80074ce <_printf_float+0x44a>
 80072c8:	68e0      	ldr	r0, [r4, #12]
 80072ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072cc:	4298      	cmp	r0, r3
 80072ce:	bfb8      	it	lt
 80072d0:	4618      	movlt	r0, r3
 80072d2:	e734      	b.n	800713e <_printf_float+0xba>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4652      	mov	r2, sl
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f af2b 	beq.w	800713a <_printf_float+0xb6>
 80072e4:	f109 0901 	add.w	r9, r9, #1
 80072e8:	e7e8      	b.n	80072bc <_printf_float+0x238>
 80072ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dc39      	bgt.n	8007364 <_printf_float+0x2e0>
 80072f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007360 <_printf_float+0x2dc>)
 80072f2:	2301      	movs	r3, #1
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af1d 	beq.w	800713a <_printf_float+0xb6>
 8007300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007304:	ea59 0303 	orrs.w	r3, r9, r3
 8007308:	d102      	bne.n	8007310 <_printf_float+0x28c>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	07d9      	lsls	r1, r3, #31
 800730e:	d5d7      	bpl.n	80072c0 <_printf_float+0x23c>
 8007310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af0d 	beq.w	800713a <_printf_float+0xb6>
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	f104 0b1a 	add.w	fp, r4, #26
 8007328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732a:	425b      	negs	r3, r3
 800732c:	4553      	cmp	r3, sl
 800732e:	dc01      	bgt.n	8007334 <_printf_float+0x2b0>
 8007330:	464b      	mov	r3, r9
 8007332:	e793      	b.n	800725c <_printf_float+0x1d8>
 8007334:	2301      	movs	r3, #1
 8007336:	465a      	mov	r2, fp
 8007338:	4631      	mov	r1, r6
 800733a:	4628      	mov	r0, r5
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f aefb 	beq.w	800713a <_printf_float+0xb6>
 8007344:	f10a 0a01 	add.w	sl, sl, #1
 8007348:	e7ee      	b.n	8007328 <_printf_float+0x2a4>
 800734a:	bf00      	nop
 800734c:	7fefffff 	.word	0x7fefffff
 8007350:	0800b7dc 	.word	0x0800b7dc
 8007354:	0800b7e0 	.word	0x0800b7e0
 8007358:	0800b7e4 	.word	0x0800b7e4
 800735c:	0800b7e8 	.word	0x0800b7e8
 8007360:	0800b7ec 	.word	0x0800b7ec
 8007364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800736a:	4553      	cmp	r3, sl
 800736c:	bfa8      	it	ge
 800736e:	4653      	movge	r3, sl
 8007370:	2b00      	cmp	r3, #0
 8007372:	4699      	mov	r9, r3
 8007374:	dc36      	bgt.n	80073e4 <_printf_float+0x360>
 8007376:	f04f 0b00 	mov.w	fp, #0
 800737a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800737e:	f104 021a 	add.w	r2, r4, #26
 8007382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007384:	9306      	str	r3, [sp, #24]
 8007386:	eba3 0309 	sub.w	r3, r3, r9
 800738a:	455b      	cmp	r3, fp
 800738c:	dc31      	bgt.n	80073f2 <_printf_float+0x36e>
 800738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007390:	459a      	cmp	sl, r3
 8007392:	dc3a      	bgt.n	800740a <_printf_float+0x386>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	07da      	lsls	r2, r3, #31
 8007398:	d437      	bmi.n	800740a <_printf_float+0x386>
 800739a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739c:	ebaa 0903 	sub.w	r9, sl, r3
 80073a0:	9b06      	ldr	r3, [sp, #24]
 80073a2:	ebaa 0303 	sub.w	r3, sl, r3
 80073a6:	4599      	cmp	r9, r3
 80073a8:	bfa8      	it	ge
 80073aa:	4699      	movge	r9, r3
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	dc33      	bgt.n	800741a <_printf_float+0x396>
 80073b2:	f04f 0800 	mov.w	r8, #0
 80073b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ba:	f104 0b1a 	add.w	fp, r4, #26
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	ebaa 0303 	sub.w	r3, sl, r3
 80073c4:	eba3 0309 	sub.w	r3, r3, r9
 80073c8:	4543      	cmp	r3, r8
 80073ca:	f77f af79 	ble.w	80072c0 <_printf_float+0x23c>
 80073ce:	2301      	movs	r3, #1
 80073d0:	465a      	mov	r2, fp
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f aeae 	beq.w	800713a <_printf_float+0xb6>
 80073de:	f108 0801 	add.w	r8, r8, #1
 80073e2:	e7ec      	b.n	80073be <_printf_float+0x33a>
 80073e4:	4642      	mov	r2, r8
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1c2      	bne.n	8007376 <_printf_float+0x2f2>
 80073f0:	e6a3      	b.n	800713a <_printf_float+0xb6>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	9206      	str	r2, [sp, #24]
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae9c 	beq.w	800713a <_printf_float+0xb6>
 8007402:	9a06      	ldr	r2, [sp, #24]
 8007404:	f10b 0b01 	add.w	fp, fp, #1
 8007408:	e7bb      	b.n	8007382 <_printf_float+0x2fe>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	d1c0      	bne.n	800739a <_printf_float+0x316>
 8007418:	e68f      	b.n	800713a <_printf_float+0xb6>
 800741a:	9a06      	ldr	r2, [sp, #24]
 800741c:	464b      	mov	r3, r9
 800741e:	4442      	add	r2, r8
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	d1c3      	bne.n	80073b2 <_printf_float+0x32e>
 800742a:	e686      	b.n	800713a <_printf_float+0xb6>
 800742c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007430:	f1ba 0f01 	cmp.w	sl, #1
 8007434:	dc01      	bgt.n	800743a <_printf_float+0x3b6>
 8007436:	07db      	lsls	r3, r3, #31
 8007438:	d536      	bpl.n	80074a8 <_printf_float+0x424>
 800743a:	2301      	movs	r3, #1
 800743c:	4642      	mov	r2, r8
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f ae78 	beq.w	800713a <_printf_float+0xb6>
 800744a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae70 	beq.w	800713a <_printf_float+0xb6>
 800745a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007466:	f7f9 fb5f 	bl	8000b28 <__aeabi_dcmpeq>
 800746a:	b9c0      	cbnz	r0, 800749e <_printf_float+0x41a>
 800746c:	4653      	mov	r3, sl
 800746e:	f108 0201 	add.w	r2, r8, #1
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	d10c      	bne.n	8007496 <_printf_float+0x412>
 800747c:	e65d      	b.n	800713a <_printf_float+0xb6>
 800747e:	2301      	movs	r3, #1
 8007480:	465a      	mov	r2, fp
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	f43f ae56 	beq.w	800713a <_printf_float+0xb6>
 800748e:	f108 0801 	add.w	r8, r8, #1
 8007492:	45d0      	cmp	r8, sl
 8007494:	dbf3      	blt.n	800747e <_printf_float+0x3fa>
 8007496:	464b      	mov	r3, r9
 8007498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800749c:	e6df      	b.n	800725e <_printf_float+0x1da>
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	f104 0b1a 	add.w	fp, r4, #26
 80074a6:	e7f4      	b.n	8007492 <_printf_float+0x40e>
 80074a8:	2301      	movs	r3, #1
 80074aa:	4642      	mov	r2, r8
 80074ac:	e7e1      	b.n	8007472 <_printf_float+0x3ee>
 80074ae:	2301      	movs	r3, #1
 80074b0:	464a      	mov	r2, r9
 80074b2:	4631      	mov	r1, r6
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b8      	blx	r7
 80074b8:	3001      	adds	r0, #1
 80074ba:	f43f ae3e 	beq.w	800713a <_printf_float+0xb6>
 80074be:	f108 0801 	add.w	r8, r8, #1
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074c6:	1a5b      	subs	r3, r3, r1
 80074c8:	4543      	cmp	r3, r8
 80074ca:	dcf0      	bgt.n	80074ae <_printf_float+0x42a>
 80074cc:	e6fc      	b.n	80072c8 <_printf_float+0x244>
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	f104 0919 	add.w	r9, r4, #25
 80074d6:	e7f4      	b.n	80074c2 <_printf_float+0x43e>

080074d8 <_printf_common>:
 80074d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	4616      	mov	r6, r2
 80074de:	4698      	mov	r8, r3
 80074e0:	688a      	ldr	r2, [r1, #8]
 80074e2:	690b      	ldr	r3, [r1, #16]
 80074e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074e8:	4293      	cmp	r3, r2
 80074ea:	bfb8      	it	lt
 80074ec:	4613      	movlt	r3, r2
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074f4:	4607      	mov	r7, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	b10a      	cbz	r2, 80074fe <_printf_common+0x26>
 80074fa:	3301      	adds	r3, #1
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	0699      	lsls	r1, r3, #26
 8007502:	bf42      	ittt	mi
 8007504:	6833      	ldrmi	r3, [r6, #0]
 8007506:	3302      	addmi	r3, #2
 8007508:	6033      	strmi	r3, [r6, #0]
 800750a:	6825      	ldr	r5, [r4, #0]
 800750c:	f015 0506 	ands.w	r5, r5, #6
 8007510:	d106      	bne.n	8007520 <_printf_common+0x48>
 8007512:	f104 0a19 	add.w	sl, r4, #25
 8007516:	68e3      	ldr	r3, [r4, #12]
 8007518:	6832      	ldr	r2, [r6, #0]
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	42ab      	cmp	r3, r5
 800751e:	dc26      	bgt.n	800756e <_printf_common+0x96>
 8007520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	3b00      	subs	r3, #0
 8007528:	bf18      	it	ne
 800752a:	2301      	movne	r3, #1
 800752c:	0692      	lsls	r2, r2, #26
 800752e:	d42b      	bmi.n	8007588 <_printf_common+0xb0>
 8007530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007534:	4641      	mov	r1, r8
 8007536:	4638      	mov	r0, r7
 8007538:	47c8      	blx	r9
 800753a:	3001      	adds	r0, #1
 800753c:	d01e      	beq.n	800757c <_printf_common+0xa4>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	f003 0306 	and.w	r3, r3, #6
 8007546:	2b04      	cmp	r3, #4
 8007548:	bf02      	ittt	eq
 800754a:	68e5      	ldreq	r5, [r4, #12]
 800754c:	6833      	ldreq	r3, [r6, #0]
 800754e:	1aed      	subeq	r5, r5, r3
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	bf0c      	ite	eq
 8007554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007558:	2500      	movne	r5, #0
 800755a:	4293      	cmp	r3, r2
 800755c:	bfc4      	itt	gt
 800755e:	1a9b      	subgt	r3, r3, r2
 8007560:	18ed      	addgt	r5, r5, r3
 8007562:	2600      	movs	r6, #0
 8007564:	341a      	adds	r4, #26
 8007566:	42b5      	cmp	r5, r6
 8007568:	d11a      	bne.n	80075a0 <_printf_common+0xc8>
 800756a:	2000      	movs	r0, #0
 800756c:	e008      	b.n	8007580 <_printf_common+0xa8>
 800756e:	2301      	movs	r3, #1
 8007570:	4652      	mov	r2, sl
 8007572:	4641      	mov	r1, r8
 8007574:	4638      	mov	r0, r7
 8007576:	47c8      	blx	r9
 8007578:	3001      	adds	r0, #1
 800757a:	d103      	bne.n	8007584 <_printf_common+0xac>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	3501      	adds	r5, #1
 8007586:	e7c6      	b.n	8007516 <_printf_common+0x3e>
 8007588:	18e1      	adds	r1, r4, r3
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	2030      	movs	r0, #48	@ 0x30
 800758e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007592:	4422      	add	r2, r4
 8007594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800759c:	3302      	adds	r3, #2
 800759e:	e7c7      	b.n	8007530 <_printf_common+0x58>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4622      	mov	r2, r4
 80075a4:	4641      	mov	r1, r8
 80075a6:	4638      	mov	r0, r7
 80075a8:	47c8      	blx	r9
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0e6      	beq.n	800757c <_printf_common+0xa4>
 80075ae:	3601      	adds	r6, #1
 80075b0:	e7d9      	b.n	8007566 <_printf_common+0x8e>
	...

080075b4 <_printf_i>:
 80075b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	7e0f      	ldrb	r7, [r1, #24]
 80075ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075bc:	2f78      	cmp	r7, #120	@ 0x78
 80075be:	4691      	mov	r9, r2
 80075c0:	4680      	mov	r8, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	469a      	mov	sl, r3
 80075c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ca:	d807      	bhi.n	80075dc <_printf_i+0x28>
 80075cc:	2f62      	cmp	r7, #98	@ 0x62
 80075ce:	d80a      	bhi.n	80075e6 <_printf_i+0x32>
 80075d0:	2f00      	cmp	r7, #0
 80075d2:	f000 80d2 	beq.w	800777a <_printf_i+0x1c6>
 80075d6:	2f58      	cmp	r7, #88	@ 0x58
 80075d8:	f000 80b9 	beq.w	800774e <_printf_i+0x19a>
 80075dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075e4:	e03a      	b.n	800765c <_printf_i+0xa8>
 80075e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ea:	2b15      	cmp	r3, #21
 80075ec:	d8f6      	bhi.n	80075dc <_printf_i+0x28>
 80075ee:	a101      	add	r1, pc, #4	@ (adr r1, 80075f4 <_printf_i+0x40>)
 80075f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075f4:	0800764d 	.word	0x0800764d
 80075f8:	08007661 	.word	0x08007661
 80075fc:	080075dd 	.word	0x080075dd
 8007600:	080075dd 	.word	0x080075dd
 8007604:	080075dd 	.word	0x080075dd
 8007608:	080075dd 	.word	0x080075dd
 800760c:	08007661 	.word	0x08007661
 8007610:	080075dd 	.word	0x080075dd
 8007614:	080075dd 	.word	0x080075dd
 8007618:	080075dd 	.word	0x080075dd
 800761c:	080075dd 	.word	0x080075dd
 8007620:	08007761 	.word	0x08007761
 8007624:	0800768b 	.word	0x0800768b
 8007628:	0800771b 	.word	0x0800771b
 800762c:	080075dd 	.word	0x080075dd
 8007630:	080075dd 	.word	0x080075dd
 8007634:	08007783 	.word	0x08007783
 8007638:	080075dd 	.word	0x080075dd
 800763c:	0800768b 	.word	0x0800768b
 8007640:	080075dd 	.word	0x080075dd
 8007644:	080075dd 	.word	0x080075dd
 8007648:	08007723 	.word	0x08007723
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6032      	str	r2, [r6, #0]
 8007654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800765c:	2301      	movs	r3, #1
 800765e:	e09d      	b.n	800779c <_printf_i+0x1e8>
 8007660:	6833      	ldr	r3, [r6, #0]
 8007662:	6820      	ldr	r0, [r4, #0]
 8007664:	1d19      	adds	r1, r3, #4
 8007666:	6031      	str	r1, [r6, #0]
 8007668:	0606      	lsls	r6, r0, #24
 800766a:	d501      	bpl.n	8007670 <_printf_i+0xbc>
 800766c:	681d      	ldr	r5, [r3, #0]
 800766e:	e003      	b.n	8007678 <_printf_i+0xc4>
 8007670:	0645      	lsls	r5, r0, #25
 8007672:	d5fb      	bpl.n	800766c <_printf_i+0xb8>
 8007674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007678:	2d00      	cmp	r5, #0
 800767a:	da03      	bge.n	8007684 <_printf_i+0xd0>
 800767c:	232d      	movs	r3, #45	@ 0x2d
 800767e:	426d      	negs	r5, r5
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007684:	4859      	ldr	r0, [pc, #356]	@ (80077ec <_printf_i+0x238>)
 8007686:	230a      	movs	r3, #10
 8007688:	e011      	b.n	80076ae <_printf_i+0xfa>
 800768a:	6821      	ldr	r1, [r4, #0]
 800768c:	6833      	ldr	r3, [r6, #0]
 800768e:	0608      	lsls	r0, r1, #24
 8007690:	f853 5b04 	ldr.w	r5, [r3], #4
 8007694:	d402      	bmi.n	800769c <_printf_i+0xe8>
 8007696:	0649      	lsls	r1, r1, #25
 8007698:	bf48      	it	mi
 800769a:	b2ad      	uxthmi	r5, r5
 800769c:	2f6f      	cmp	r7, #111	@ 0x6f
 800769e:	4853      	ldr	r0, [pc, #332]	@ (80077ec <_printf_i+0x238>)
 80076a0:	6033      	str	r3, [r6, #0]
 80076a2:	bf14      	ite	ne
 80076a4:	230a      	movne	r3, #10
 80076a6:	2308      	moveq	r3, #8
 80076a8:	2100      	movs	r1, #0
 80076aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ae:	6866      	ldr	r6, [r4, #4]
 80076b0:	60a6      	str	r6, [r4, #8]
 80076b2:	2e00      	cmp	r6, #0
 80076b4:	bfa2      	ittt	ge
 80076b6:	6821      	ldrge	r1, [r4, #0]
 80076b8:	f021 0104 	bicge.w	r1, r1, #4
 80076bc:	6021      	strge	r1, [r4, #0]
 80076be:	b90d      	cbnz	r5, 80076c4 <_printf_i+0x110>
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	d04b      	beq.n	800775c <_printf_i+0x1a8>
 80076c4:	4616      	mov	r6, r2
 80076c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ca:	fb03 5711 	mls	r7, r3, r1, r5
 80076ce:	5dc7      	ldrb	r7, [r0, r7]
 80076d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076d4:	462f      	mov	r7, r5
 80076d6:	42bb      	cmp	r3, r7
 80076d8:	460d      	mov	r5, r1
 80076da:	d9f4      	bls.n	80076c6 <_printf_i+0x112>
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d10b      	bne.n	80076f8 <_printf_i+0x144>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	07df      	lsls	r7, r3, #31
 80076e4:	d508      	bpl.n	80076f8 <_printf_i+0x144>
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	6861      	ldr	r1, [r4, #4]
 80076ea:	4299      	cmp	r1, r3
 80076ec:	bfde      	ittt	le
 80076ee:	2330      	movle	r3, #48	@ 0x30
 80076f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076f8:	1b92      	subs	r2, r2, r6
 80076fa:	6122      	str	r2, [r4, #16]
 80076fc:	f8cd a000 	str.w	sl, [sp]
 8007700:	464b      	mov	r3, r9
 8007702:	aa03      	add	r2, sp, #12
 8007704:	4621      	mov	r1, r4
 8007706:	4640      	mov	r0, r8
 8007708:	f7ff fee6 	bl	80074d8 <_printf_common>
 800770c:	3001      	adds	r0, #1
 800770e:	d14a      	bne.n	80077a6 <_printf_i+0x1f2>
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	b004      	add	sp, #16
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	f043 0320 	orr.w	r3, r3, #32
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	4833      	ldr	r0, [pc, #204]	@ (80077f0 <_printf_i+0x23c>)
 8007724:	2778      	movs	r7, #120	@ 0x78
 8007726:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	6831      	ldr	r1, [r6, #0]
 800772e:	061f      	lsls	r7, r3, #24
 8007730:	f851 5b04 	ldr.w	r5, [r1], #4
 8007734:	d402      	bmi.n	800773c <_printf_i+0x188>
 8007736:	065f      	lsls	r7, r3, #25
 8007738:	bf48      	it	mi
 800773a:	b2ad      	uxthmi	r5, r5
 800773c:	6031      	str	r1, [r6, #0]
 800773e:	07d9      	lsls	r1, r3, #31
 8007740:	bf44      	itt	mi
 8007742:	f043 0320 	orrmi.w	r3, r3, #32
 8007746:	6023      	strmi	r3, [r4, #0]
 8007748:	b11d      	cbz	r5, 8007752 <_printf_i+0x19e>
 800774a:	2310      	movs	r3, #16
 800774c:	e7ac      	b.n	80076a8 <_printf_i+0xf4>
 800774e:	4827      	ldr	r0, [pc, #156]	@ (80077ec <_printf_i+0x238>)
 8007750:	e7e9      	b.n	8007726 <_printf_i+0x172>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	f023 0320 	bic.w	r3, r3, #32
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	e7f6      	b.n	800774a <_printf_i+0x196>
 800775c:	4616      	mov	r6, r2
 800775e:	e7bd      	b.n	80076dc <_printf_i+0x128>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	6961      	ldr	r1, [r4, #20]
 8007766:	1d18      	adds	r0, r3, #4
 8007768:	6030      	str	r0, [r6, #0]
 800776a:	062e      	lsls	r6, r5, #24
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	d501      	bpl.n	8007774 <_printf_i+0x1c0>
 8007770:	6019      	str	r1, [r3, #0]
 8007772:	e002      	b.n	800777a <_printf_i+0x1c6>
 8007774:	0668      	lsls	r0, r5, #25
 8007776:	d5fb      	bpl.n	8007770 <_printf_i+0x1bc>
 8007778:	8019      	strh	r1, [r3, #0]
 800777a:	2300      	movs	r3, #0
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	4616      	mov	r6, r2
 8007780:	e7bc      	b.n	80076fc <_printf_i+0x148>
 8007782:	6833      	ldr	r3, [r6, #0]
 8007784:	1d1a      	adds	r2, r3, #4
 8007786:	6032      	str	r2, [r6, #0]
 8007788:	681e      	ldr	r6, [r3, #0]
 800778a:	6862      	ldr	r2, [r4, #4]
 800778c:	2100      	movs	r1, #0
 800778e:	4630      	mov	r0, r6
 8007790:	f7f8 fd4e 	bl	8000230 <memchr>
 8007794:	b108      	cbz	r0, 800779a <_printf_i+0x1e6>
 8007796:	1b80      	subs	r0, r0, r6
 8007798:	6060      	str	r0, [r4, #4]
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	2300      	movs	r3, #0
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a4:	e7aa      	b.n	80076fc <_printf_i+0x148>
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	4632      	mov	r2, r6
 80077aa:	4649      	mov	r1, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	47d0      	blx	sl
 80077b0:	3001      	adds	r0, #1
 80077b2:	d0ad      	beq.n	8007710 <_printf_i+0x15c>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	079b      	lsls	r3, r3, #30
 80077b8:	d413      	bmi.n	80077e2 <_printf_i+0x22e>
 80077ba:	68e0      	ldr	r0, [r4, #12]
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	4298      	cmp	r0, r3
 80077c0:	bfb8      	it	lt
 80077c2:	4618      	movlt	r0, r3
 80077c4:	e7a6      	b.n	8007714 <_printf_i+0x160>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4632      	mov	r2, r6
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	47d0      	blx	sl
 80077d0:	3001      	adds	r0, #1
 80077d2:	d09d      	beq.n	8007710 <_printf_i+0x15c>
 80077d4:	3501      	adds	r5, #1
 80077d6:	68e3      	ldr	r3, [r4, #12]
 80077d8:	9903      	ldr	r1, [sp, #12]
 80077da:	1a5b      	subs	r3, r3, r1
 80077dc:	42ab      	cmp	r3, r5
 80077de:	dcf2      	bgt.n	80077c6 <_printf_i+0x212>
 80077e0:	e7eb      	b.n	80077ba <_printf_i+0x206>
 80077e2:	2500      	movs	r5, #0
 80077e4:	f104 0619 	add.w	r6, r4, #25
 80077e8:	e7f5      	b.n	80077d6 <_printf_i+0x222>
 80077ea:	bf00      	nop
 80077ec:	0800b7ee 	.word	0x0800b7ee
 80077f0:	0800b7ff 	.word	0x0800b7ff

080077f4 <_scanf_float>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	b087      	sub	sp, #28
 80077fa:	4617      	mov	r7, r2
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	688b      	ldr	r3, [r1, #8]
 8007800:	1e5a      	subs	r2, r3, #1
 8007802:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007806:	bf81      	itttt	hi
 8007808:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800780c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007810:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007814:	608b      	strhi	r3, [r1, #8]
 8007816:	680b      	ldr	r3, [r1, #0]
 8007818:	460a      	mov	r2, r1
 800781a:	f04f 0500 	mov.w	r5, #0
 800781e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007822:	f842 3b1c 	str.w	r3, [r2], #28
 8007826:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800782a:	4680      	mov	r8, r0
 800782c:	460c      	mov	r4, r1
 800782e:	bf98      	it	ls
 8007830:	f04f 0b00 	movls.w	fp, #0
 8007834:	9201      	str	r2, [sp, #4]
 8007836:	4616      	mov	r6, r2
 8007838:	46aa      	mov	sl, r5
 800783a:	46a9      	mov	r9, r5
 800783c:	9502      	str	r5, [sp, #8]
 800783e:	68a2      	ldr	r2, [r4, #8]
 8007840:	b152      	cbz	r2, 8007858 <_scanf_float+0x64>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b4e      	cmp	r3, #78	@ 0x4e
 8007848:	d864      	bhi.n	8007914 <_scanf_float+0x120>
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d83c      	bhi.n	80078c8 <_scanf_float+0xd4>
 800784e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007852:	b2c8      	uxtb	r0, r1
 8007854:	280e      	cmp	r0, #14
 8007856:	d93a      	bls.n	80078ce <_scanf_float+0xda>
 8007858:	f1b9 0f00 	cmp.w	r9, #0
 800785c:	d003      	beq.n	8007866 <_scanf_float+0x72>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800786a:	f1ba 0f01 	cmp.w	sl, #1
 800786e:	f200 8117 	bhi.w	8007aa0 <_scanf_float+0x2ac>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	429e      	cmp	r6, r3
 8007876:	f200 8108 	bhi.w	8007a8a <_scanf_float+0x296>
 800787a:	2001      	movs	r0, #1
 800787c:	b007      	add	sp, #28
 800787e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007882:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007886:	2a0d      	cmp	r2, #13
 8007888:	d8e6      	bhi.n	8007858 <_scanf_float+0x64>
 800788a:	a101      	add	r1, pc, #4	@ (adr r1, 8007890 <_scanf_float+0x9c>)
 800788c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007890:	080079d7 	.word	0x080079d7
 8007894:	08007859 	.word	0x08007859
 8007898:	08007859 	.word	0x08007859
 800789c:	08007859 	.word	0x08007859
 80078a0:	08007a37 	.word	0x08007a37
 80078a4:	08007a0f 	.word	0x08007a0f
 80078a8:	08007859 	.word	0x08007859
 80078ac:	08007859 	.word	0x08007859
 80078b0:	080079e5 	.word	0x080079e5
 80078b4:	08007859 	.word	0x08007859
 80078b8:	08007859 	.word	0x08007859
 80078bc:	08007859 	.word	0x08007859
 80078c0:	08007859 	.word	0x08007859
 80078c4:	0800799d 	.word	0x0800799d
 80078c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80078cc:	e7db      	b.n	8007886 <_scanf_float+0x92>
 80078ce:	290e      	cmp	r1, #14
 80078d0:	d8c2      	bhi.n	8007858 <_scanf_float+0x64>
 80078d2:	a001      	add	r0, pc, #4	@ (adr r0, 80078d8 <_scanf_float+0xe4>)
 80078d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078d8:	0800798d 	.word	0x0800798d
 80078dc:	08007859 	.word	0x08007859
 80078e0:	0800798d 	.word	0x0800798d
 80078e4:	08007a23 	.word	0x08007a23
 80078e8:	08007859 	.word	0x08007859
 80078ec:	08007935 	.word	0x08007935
 80078f0:	08007973 	.word	0x08007973
 80078f4:	08007973 	.word	0x08007973
 80078f8:	08007973 	.word	0x08007973
 80078fc:	08007973 	.word	0x08007973
 8007900:	08007973 	.word	0x08007973
 8007904:	08007973 	.word	0x08007973
 8007908:	08007973 	.word	0x08007973
 800790c:	08007973 	.word	0x08007973
 8007910:	08007973 	.word	0x08007973
 8007914:	2b6e      	cmp	r3, #110	@ 0x6e
 8007916:	d809      	bhi.n	800792c <_scanf_float+0x138>
 8007918:	2b60      	cmp	r3, #96	@ 0x60
 800791a:	d8b2      	bhi.n	8007882 <_scanf_float+0x8e>
 800791c:	2b54      	cmp	r3, #84	@ 0x54
 800791e:	d07b      	beq.n	8007a18 <_scanf_float+0x224>
 8007920:	2b59      	cmp	r3, #89	@ 0x59
 8007922:	d199      	bne.n	8007858 <_scanf_float+0x64>
 8007924:	2d07      	cmp	r5, #7
 8007926:	d197      	bne.n	8007858 <_scanf_float+0x64>
 8007928:	2508      	movs	r5, #8
 800792a:	e02c      	b.n	8007986 <_scanf_float+0x192>
 800792c:	2b74      	cmp	r3, #116	@ 0x74
 800792e:	d073      	beq.n	8007a18 <_scanf_float+0x224>
 8007930:	2b79      	cmp	r3, #121	@ 0x79
 8007932:	e7f6      	b.n	8007922 <_scanf_float+0x12e>
 8007934:	6821      	ldr	r1, [r4, #0]
 8007936:	05c8      	lsls	r0, r1, #23
 8007938:	d51b      	bpl.n	8007972 <_scanf_float+0x17e>
 800793a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800793e:	6021      	str	r1, [r4, #0]
 8007940:	f109 0901 	add.w	r9, r9, #1
 8007944:	f1bb 0f00 	cmp.w	fp, #0
 8007948:	d003      	beq.n	8007952 <_scanf_float+0x15e>
 800794a:	3201      	adds	r2, #1
 800794c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007950:	60a2      	str	r2, [r4, #8]
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	3b01      	subs	r3, #1
 8007956:	60a3      	str	r3, [r4, #8]
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	3301      	adds	r3, #1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	f340 8087 	ble.w	8007a78 <_scanf_float+0x284>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	e765      	b.n	800783e <_scanf_float+0x4a>
 8007972:	eb1a 0105 	adds.w	r1, sl, r5
 8007976:	f47f af6f 	bne.w	8007858 <_scanf_float+0x64>
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007980:	6022      	str	r2, [r4, #0]
 8007982:	460d      	mov	r5, r1
 8007984:	468a      	mov	sl, r1
 8007986:	f806 3b01 	strb.w	r3, [r6], #1
 800798a:	e7e2      	b.n	8007952 <_scanf_float+0x15e>
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	0610      	lsls	r0, r2, #24
 8007990:	f57f af62 	bpl.w	8007858 <_scanf_float+0x64>
 8007994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007998:	6022      	str	r2, [r4, #0]
 800799a:	e7f4      	b.n	8007986 <_scanf_float+0x192>
 800799c:	f1ba 0f00 	cmp.w	sl, #0
 80079a0:	d10e      	bne.n	80079c0 <_scanf_float+0x1cc>
 80079a2:	f1b9 0f00 	cmp.w	r9, #0
 80079a6:	d10e      	bne.n	80079c6 <_scanf_float+0x1d2>
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079b2:	d108      	bne.n	80079c6 <_scanf_float+0x1d2>
 80079b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	f04f 0a01 	mov.w	sl, #1
 80079be:	e7e2      	b.n	8007986 <_scanf_float+0x192>
 80079c0:	f1ba 0f02 	cmp.w	sl, #2
 80079c4:	d055      	beq.n	8007a72 <_scanf_float+0x27e>
 80079c6:	2d01      	cmp	r5, #1
 80079c8:	d002      	beq.n	80079d0 <_scanf_float+0x1dc>
 80079ca:	2d04      	cmp	r5, #4
 80079cc:	f47f af44 	bne.w	8007858 <_scanf_float+0x64>
 80079d0:	3501      	adds	r5, #1
 80079d2:	b2ed      	uxtb	r5, r5
 80079d4:	e7d7      	b.n	8007986 <_scanf_float+0x192>
 80079d6:	f1ba 0f01 	cmp.w	sl, #1
 80079da:	f47f af3d 	bne.w	8007858 <_scanf_float+0x64>
 80079de:	f04f 0a02 	mov.w	sl, #2
 80079e2:	e7d0      	b.n	8007986 <_scanf_float+0x192>
 80079e4:	b97d      	cbnz	r5, 8007a06 <_scanf_float+0x212>
 80079e6:	f1b9 0f00 	cmp.w	r9, #0
 80079ea:	f47f af38 	bne.w	800785e <_scanf_float+0x6a>
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079f8:	f040 8108 	bne.w	8007c0c <_scanf_float+0x418>
 80079fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	2501      	movs	r5, #1
 8007a04:	e7bf      	b.n	8007986 <_scanf_float+0x192>
 8007a06:	2d03      	cmp	r5, #3
 8007a08:	d0e2      	beq.n	80079d0 <_scanf_float+0x1dc>
 8007a0a:	2d05      	cmp	r5, #5
 8007a0c:	e7de      	b.n	80079cc <_scanf_float+0x1d8>
 8007a0e:	2d02      	cmp	r5, #2
 8007a10:	f47f af22 	bne.w	8007858 <_scanf_float+0x64>
 8007a14:	2503      	movs	r5, #3
 8007a16:	e7b6      	b.n	8007986 <_scanf_float+0x192>
 8007a18:	2d06      	cmp	r5, #6
 8007a1a:	f47f af1d 	bne.w	8007858 <_scanf_float+0x64>
 8007a1e:	2507      	movs	r5, #7
 8007a20:	e7b1      	b.n	8007986 <_scanf_float+0x192>
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	0591      	lsls	r1, r2, #22
 8007a26:	f57f af17 	bpl.w	8007858 <_scanf_float+0x64>
 8007a2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a34:	e7a7      	b.n	8007986 <_scanf_float+0x192>
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a40:	d006      	beq.n	8007a50 <_scanf_float+0x25c>
 8007a42:	0550      	lsls	r0, r2, #21
 8007a44:	f57f af08 	bpl.w	8007858 <_scanf_float+0x64>
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	f000 80de 	beq.w	8007c0c <_scanf_float+0x418>
 8007a50:	0591      	lsls	r1, r2, #22
 8007a52:	bf58      	it	pl
 8007a54:	9902      	ldrpl	r1, [sp, #8]
 8007a56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a5a:	bf58      	it	pl
 8007a5c:	eba9 0101 	subpl.w	r1, r9, r1
 8007a60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a64:	bf58      	it	pl
 8007a66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a6a:	6022      	str	r2, [r4, #0]
 8007a6c:	f04f 0900 	mov.w	r9, #0
 8007a70:	e789      	b.n	8007986 <_scanf_float+0x192>
 8007a72:	f04f 0a03 	mov.w	sl, #3
 8007a76:	e786      	b.n	8007986 <_scanf_float+0x192>
 8007a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4798      	blx	r3
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f43f aedb 	beq.w	800783e <_scanf_float+0x4a>
 8007a88:	e6e6      	b.n	8007858 <_scanf_float+0x64>
 8007a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a92:	463a      	mov	r2, r7
 8007a94:	4640      	mov	r0, r8
 8007a96:	4798      	blx	r3
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	e6e8      	b.n	8007872 <_scanf_float+0x7e>
 8007aa0:	1e6b      	subs	r3, r5, #1
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d824      	bhi.n	8007af0 <_scanf_float+0x2fc>
 8007aa6:	2d02      	cmp	r5, #2
 8007aa8:	d836      	bhi.n	8007b18 <_scanf_float+0x324>
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	429e      	cmp	r6, r3
 8007aae:	f67f aee4 	bls.w	800787a <_scanf_float+0x86>
 8007ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aba:	463a      	mov	r2, r7
 8007abc:	4640      	mov	r0, r8
 8007abe:	4798      	blx	r3
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	6123      	str	r3, [r4, #16]
 8007ac6:	e7f0      	b.n	8007aaa <_scanf_float+0x2b6>
 8007ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007acc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007ad0:	463a      	mov	r2, r7
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4798      	blx	r3
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ae0:	fa5f fa8a 	uxtb.w	sl, sl
 8007ae4:	f1ba 0f02 	cmp.w	sl, #2
 8007ae8:	d1ee      	bne.n	8007ac8 <_scanf_float+0x2d4>
 8007aea:	3d03      	subs	r5, #3
 8007aec:	b2ed      	uxtb	r5, r5
 8007aee:	1b76      	subs	r6, r6, r5
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	05da      	lsls	r2, r3, #23
 8007af4:	d530      	bpl.n	8007b58 <_scanf_float+0x364>
 8007af6:	055b      	lsls	r3, r3, #21
 8007af8:	d511      	bpl.n	8007b1e <_scanf_float+0x32a>
 8007afa:	9b01      	ldr	r3, [sp, #4]
 8007afc:	429e      	cmp	r6, r3
 8007afe:	f67f aebc 	bls.w	800787a <_scanf_float+0x86>
 8007b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4798      	blx	r3
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	e7f0      	b.n	8007afa <_scanf_float+0x306>
 8007b18:	46aa      	mov	sl, r5
 8007b1a:	46b3      	mov	fp, r6
 8007b1c:	e7de      	b.n	8007adc <_scanf_float+0x2e8>
 8007b1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	2965      	cmp	r1, #101	@ 0x65
 8007b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	d00c      	beq.n	8007b4c <_scanf_float+0x358>
 8007b32:	2945      	cmp	r1, #69	@ 0x45
 8007b34:	d00a      	beq.n	8007b4c <_scanf_float+0x358>
 8007b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	4798      	blx	r3
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	1eb5      	subs	r5, r6, #2
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b50:	463a      	mov	r2, r7
 8007b52:	4640      	mov	r0, r8
 8007b54:	4798      	blx	r3
 8007b56:	462e      	mov	r6, r5
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	f012 0210 	ands.w	r2, r2, #16
 8007b5e:	d001      	beq.n	8007b64 <_scanf_float+0x370>
 8007b60:	2000      	movs	r0, #0
 8007b62:	e68b      	b.n	800787c <_scanf_float+0x88>
 8007b64:	7032      	strb	r2, [r6, #0]
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b70:	d11c      	bne.n	8007bac <_scanf_float+0x3b8>
 8007b72:	9b02      	ldr	r3, [sp, #8]
 8007b74:	454b      	cmp	r3, r9
 8007b76:	eba3 0209 	sub.w	r2, r3, r9
 8007b7a:	d123      	bne.n	8007bc4 <_scanf_float+0x3d0>
 8007b7c:	9901      	ldr	r1, [sp, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4640      	mov	r0, r8
 8007b82:	f002 fc09 	bl	800a398 <_strtod_r>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	6821      	ldr	r1, [r4, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f011 0f02 	tst.w	r1, #2
 8007b90:	ec57 6b10 	vmov	r6, r7, d0
 8007b94:	f103 0204 	add.w	r2, r3, #4
 8007b98:	d01f      	beq.n	8007bda <_scanf_float+0x3e6>
 8007b9a:	9903      	ldr	r1, [sp, #12]
 8007b9c:	600a      	str	r2, [r1, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	e9c3 6700 	strd	r6, r7, [r3]
 8007ba4:	68e3      	ldr	r3, [r4, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60e3      	str	r3, [r4, #12]
 8007baa:	e7d9      	b.n	8007b60 <_scanf_float+0x36c>
 8007bac:	9b04      	ldr	r3, [sp, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0e4      	beq.n	8007b7c <_scanf_float+0x388>
 8007bb2:	9905      	ldr	r1, [sp, #20]
 8007bb4:	230a      	movs	r3, #10
 8007bb6:	3101      	adds	r1, #1
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f002 fc6d 	bl	800a498 <_strtol_r>
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	9e05      	ldr	r6, [sp, #20]
 8007bc2:	1ac2      	subs	r2, r0, r3
 8007bc4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	bf28      	it	cs
 8007bcc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007bd0:	4910      	ldr	r1, [pc, #64]	@ (8007c14 <_scanf_float+0x420>)
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f8e4 	bl	8007da0 <siprintf>
 8007bd8:	e7d0      	b.n	8007b7c <_scanf_float+0x388>
 8007bda:	f011 0f04 	tst.w	r1, #4
 8007bde:	9903      	ldr	r1, [sp, #12]
 8007be0:	600a      	str	r2, [r1, #0]
 8007be2:	d1dc      	bne.n	8007b9e <_scanf_float+0x3aa>
 8007be4:	681d      	ldr	r5, [r3, #0]
 8007be6:	4632      	mov	r2, r6
 8007be8:	463b      	mov	r3, r7
 8007bea:	4630      	mov	r0, r6
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7f8 ffcd 	bl	8000b8c <__aeabi_dcmpun>
 8007bf2:	b128      	cbz	r0, 8007c00 <_scanf_float+0x40c>
 8007bf4:	4808      	ldr	r0, [pc, #32]	@ (8007c18 <_scanf_float+0x424>)
 8007bf6:	f000 f9c9 	bl	8007f8c <nanf>
 8007bfa:	ed85 0a00 	vstr	s0, [r5]
 8007bfe:	e7d1      	b.n	8007ba4 <_scanf_float+0x3b0>
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f9 f820 	bl	8000c48 <__aeabi_d2f>
 8007c08:	6028      	str	r0, [r5, #0]
 8007c0a:	e7cb      	b.n	8007ba4 <_scanf_float+0x3b0>
 8007c0c:	f04f 0900 	mov.w	r9, #0
 8007c10:	e629      	b.n	8007866 <_scanf_float+0x72>
 8007c12:	bf00      	nop
 8007c14:	0800b810 	.word	0x0800b810
 8007c18:	0800bba5 	.word	0x0800bba5

08007c1c <std>:
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	b510      	push	{r4, lr}
 8007c20:	4604      	mov	r4, r0
 8007c22:	e9c0 3300 	strd	r3, r3, [r0]
 8007c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c2a:	6083      	str	r3, [r0, #8]
 8007c2c:	8181      	strh	r1, [r0, #12]
 8007c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c30:	81c2      	strh	r2, [r0, #14]
 8007c32:	6183      	str	r3, [r0, #24]
 8007c34:	4619      	mov	r1, r3
 8007c36:	2208      	movs	r2, #8
 8007c38:	305c      	adds	r0, #92	@ 0x5c
 8007c3a:	f000 f914 	bl	8007e66 <memset>
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <std+0x58>)
 8007c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c42:	4b0d      	ldr	r3, [pc, #52]	@ (8007c78 <std+0x5c>)
 8007c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c46:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <std+0x60>)
 8007c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <std+0x64>)
 8007c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <std+0x68>)
 8007c50:	6224      	str	r4, [r4, #32]
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d006      	beq.n	8007c64 <std+0x48>
 8007c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c5a:	4294      	cmp	r4, r2
 8007c5c:	d002      	beq.n	8007c64 <std+0x48>
 8007c5e:	33d0      	adds	r3, #208	@ 0xd0
 8007c60:	429c      	cmp	r4, r3
 8007c62:	d105      	bne.n	8007c70 <std+0x54>
 8007c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f000 b98a 	b.w	8007f84 <__retarget_lock_init_recursive>
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	bf00      	nop
 8007c74:	08007de1 	.word	0x08007de1
 8007c78:	08007e03 	.word	0x08007e03
 8007c7c:	08007e3b 	.word	0x08007e3b
 8007c80:	08007e5f 	.word	0x08007e5f
 8007c84:	200005ec 	.word	0x200005ec

08007c88 <stdio_exit_handler>:
 8007c88:	4a02      	ldr	r2, [pc, #8]	@ (8007c94 <stdio_exit_handler+0xc>)
 8007c8a:	4903      	ldr	r1, [pc, #12]	@ (8007c98 <stdio_exit_handler+0x10>)
 8007c8c:	4803      	ldr	r0, [pc, #12]	@ (8007c9c <stdio_exit_handler+0x14>)
 8007c8e:	f000 b869 	b.w	8007d64 <_fwalk_sglue>
 8007c92:	bf00      	nop
 8007c94:	20000190 	.word	0x20000190
 8007c98:	0800a855 	.word	0x0800a855
 8007c9c:	200001a0 	.word	0x200001a0

08007ca0 <cleanup_stdio>:
 8007ca0:	6841      	ldr	r1, [r0, #4]
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd4 <cleanup_stdio+0x34>)
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	d001      	beq.n	8007cb0 <cleanup_stdio+0x10>
 8007cac:	f002 fdd2 	bl	800a854 <_fflush_r>
 8007cb0:	68a1      	ldr	r1, [r4, #8]
 8007cb2:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <cleanup_stdio+0x38>)
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <cleanup_stdio+0x1e>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f002 fdcb 	bl	800a854 <_fflush_r>
 8007cbe:	68e1      	ldr	r1, [r4, #12]
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <cleanup_stdio+0x3c>)
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	d004      	beq.n	8007cd0 <cleanup_stdio+0x30>
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	f002 bdc2 	b.w	800a854 <_fflush_r>
 8007cd0:	bd10      	pop	{r4, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200005ec 	.word	0x200005ec
 8007cd8:	20000654 	.word	0x20000654
 8007cdc:	200006bc 	.word	0x200006bc

08007ce0 <global_stdio_init.part.0>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d10 <global_stdio_init.part.0+0x30>)
 8007ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8007d14 <global_stdio_init.part.0+0x34>)
 8007ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d18 <global_stdio_init.part.0+0x38>)
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	4620      	mov	r0, r4
 8007cec:	2200      	movs	r2, #0
 8007cee:	2104      	movs	r1, #4
 8007cf0:	f7ff ff94 	bl	8007c1c <std>
 8007cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	2109      	movs	r1, #9
 8007cfc:	f7ff ff8e 	bl	8007c1c <std>
 8007d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d04:	2202      	movs	r2, #2
 8007d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d0a:	2112      	movs	r1, #18
 8007d0c:	f7ff bf86 	b.w	8007c1c <std>
 8007d10:	20000724 	.word	0x20000724
 8007d14:	200005ec 	.word	0x200005ec
 8007d18:	08007c89 	.word	0x08007c89

08007d1c <__sfp_lock_acquire>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	@ (8007d24 <__sfp_lock_acquire+0x8>)
 8007d1e:	f000 b932 	b.w	8007f86 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	2000072d 	.word	0x2000072d

08007d28 <__sfp_lock_release>:
 8007d28:	4801      	ldr	r0, [pc, #4]	@ (8007d30 <__sfp_lock_release+0x8>)
 8007d2a:	f000 b92d 	b.w	8007f88 <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	2000072d 	.word	0x2000072d

08007d34 <__sinit>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	f7ff fff0 	bl	8007d1c <__sfp_lock_acquire>
 8007d3c:	6a23      	ldr	r3, [r4, #32]
 8007d3e:	b11b      	cbz	r3, 8007d48 <__sinit+0x14>
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f7ff bff0 	b.w	8007d28 <__sfp_lock_release>
 8007d48:	4b04      	ldr	r3, [pc, #16]	@ (8007d5c <__sinit+0x28>)
 8007d4a:	6223      	str	r3, [r4, #32]
 8007d4c:	4b04      	ldr	r3, [pc, #16]	@ (8007d60 <__sinit+0x2c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f5      	bne.n	8007d40 <__sinit+0xc>
 8007d54:	f7ff ffc4 	bl	8007ce0 <global_stdio_init.part.0>
 8007d58:	e7f2      	b.n	8007d40 <__sinit+0xc>
 8007d5a:	bf00      	nop
 8007d5c:	08007ca1 	.word	0x08007ca1
 8007d60:	20000724 	.word	0x20000724

08007d64 <_fwalk_sglue>:
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	4607      	mov	r7, r0
 8007d6a:	4688      	mov	r8, r1
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d74:	f1b9 0901 	subs.w	r9, r9, #1
 8007d78:	d505      	bpl.n	8007d86 <_fwalk_sglue+0x22>
 8007d7a:	6824      	ldr	r4, [r4, #0]
 8007d7c:	2c00      	cmp	r4, #0
 8007d7e:	d1f7      	bne.n	8007d70 <_fwalk_sglue+0xc>
 8007d80:	4630      	mov	r0, r6
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d907      	bls.n	8007d9c <_fwalk_sglue+0x38>
 8007d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d90:	3301      	adds	r3, #1
 8007d92:	d003      	beq.n	8007d9c <_fwalk_sglue+0x38>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4638      	mov	r0, r7
 8007d98:	47c0      	blx	r8
 8007d9a:	4306      	orrs	r6, r0
 8007d9c:	3568      	adds	r5, #104	@ 0x68
 8007d9e:	e7e9      	b.n	8007d74 <_fwalk_sglue+0x10>

08007da0 <siprintf>:
 8007da0:	b40e      	push	{r1, r2, r3}
 8007da2:	b500      	push	{lr}
 8007da4:	b09c      	sub	sp, #112	@ 0x70
 8007da6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007da8:	9002      	str	r0, [sp, #8]
 8007daa:	9006      	str	r0, [sp, #24]
 8007dac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007db0:	4809      	ldr	r0, [pc, #36]	@ (8007dd8 <siprintf+0x38>)
 8007db2:	9107      	str	r1, [sp, #28]
 8007db4:	9104      	str	r1, [sp, #16]
 8007db6:	4909      	ldr	r1, [pc, #36]	@ (8007ddc <siprintf+0x3c>)
 8007db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbc:	9105      	str	r1, [sp, #20]
 8007dbe:	6800      	ldr	r0, [r0, #0]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	a902      	add	r1, sp, #8
 8007dc4:	f002 fbc6 	bl	800a554 <_svfiprintf_r>
 8007dc8:	9b02      	ldr	r3, [sp, #8]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	b01c      	add	sp, #112	@ 0x70
 8007dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd4:	b003      	add	sp, #12
 8007dd6:	4770      	bx	lr
 8007dd8:	2000019c 	.word	0x2000019c
 8007ddc:	ffff0208 	.word	0xffff0208

08007de0 <__sread>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	f000 f87e 	bl	8007ee8 <_read_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	bfab      	itete	ge
 8007df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007df2:	89a3      	ldrhlt	r3, [r4, #12]
 8007df4:	181b      	addge	r3, r3, r0
 8007df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dfa:	bfac      	ite	ge
 8007dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dfe:	81a3      	strhlt	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__swrite>:
 8007e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	461f      	mov	r7, r3
 8007e08:	898b      	ldrh	r3, [r1, #12]
 8007e0a:	05db      	lsls	r3, r3, #23
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4616      	mov	r6, r2
 8007e12:	d505      	bpl.n	8007e20 <__swrite+0x1e>
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	2302      	movs	r3, #2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f000 f852 	bl	8007ec4 <_lseek_r>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	f000 b869 	b.w	8007f0c <_write_r>

08007e3a <__sseek>:
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e42:	f000 f83f 	bl	8007ec4 <_lseek_r>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	bf15      	itete	ne
 8007e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e56:	81a3      	strheq	r3, [r4, #12]
 8007e58:	bf18      	it	ne
 8007e5a:	81a3      	strhne	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__sclose>:
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 b81f 	b.w	8007ea4 <_close_r>

08007e66 <memset>:
 8007e66:	4402      	add	r2, r0
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d100      	bne.n	8007e70 <memset+0xa>
 8007e6e:	4770      	bx	lr
 8007e70:	f803 1b01 	strb.w	r1, [r3], #1
 8007e74:	e7f9      	b.n	8007e6a <memset+0x4>
	...

08007e78 <strupr>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4c07      	ldr	r4, [pc, #28]	@ (8007e98 <strupr+0x20>)
 8007e7c:	1e42      	subs	r2, r0, #1
 8007e7e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007e82:	b903      	cbnz	r3, 8007e86 <strupr+0xe>
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	5ce1      	ldrb	r1, [r4, r3]
 8007e88:	f001 0103 	and.w	r1, r1, #3
 8007e8c:	2902      	cmp	r1, #2
 8007e8e:	bf08      	it	eq
 8007e90:	3b20      	subeq	r3, #32
 8007e92:	7013      	strb	r3, [r2, #0]
 8007e94:	e7f3      	b.n	8007e7e <strupr+0x6>
 8007e96:	bf00      	nop
 8007e98:	0800ba51 	.word	0x0800ba51

08007e9c <_localeconv_r>:
 8007e9c:	4800      	ldr	r0, [pc, #0]	@ (8007ea0 <_localeconv_r+0x4>)
 8007e9e:	4770      	bx	lr
 8007ea0:	200002dc 	.word	0x200002dc

08007ea4 <_close_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4d06      	ldr	r5, [pc, #24]	@ (8007ec0 <_close_r+0x1c>)
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4604      	mov	r4, r0
 8007eac:	4608      	mov	r0, r1
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	f7fb f854 	bl	8002f5c <_close>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_close_r+0x1a>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_close_r+0x1a>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20000728 	.word	0x20000728

08007ec4 <_lseek_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d07      	ldr	r5, [pc, #28]	@ (8007ee4 <_lseek_r+0x20>)
 8007ec8:	4604      	mov	r4, r0
 8007eca:	4608      	mov	r0, r1
 8007ecc:	4611      	mov	r1, r2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	602a      	str	r2, [r5, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7fb f869 	bl	8002faa <_lseek>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_lseek_r+0x1e>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_lseek_r+0x1e>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	20000728 	.word	0x20000728

08007ee8 <_read_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d07      	ldr	r5, [pc, #28]	@ (8007f08 <_read_r+0x20>)
 8007eec:	4604      	mov	r4, r0
 8007eee:	4608      	mov	r0, r1
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7fa fff7 	bl	8002eea <_read>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_read_r+0x1e>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_read_r+0x1e>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	20000728 	.word	0x20000728

08007f0c <_write_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d07      	ldr	r5, [pc, #28]	@ (8007f2c <_write_r+0x20>)
 8007f10:	4604      	mov	r4, r0
 8007f12:	4608      	mov	r0, r1
 8007f14:	4611      	mov	r1, r2
 8007f16:	2200      	movs	r2, #0
 8007f18:	602a      	str	r2, [r5, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f7fb f802 	bl	8002f24 <_write>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_write_r+0x1e>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_write_r+0x1e>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000728 	.word	0x20000728

08007f30 <__errno>:
 8007f30:	4b01      	ldr	r3, [pc, #4]	@ (8007f38 <__errno+0x8>)
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	2000019c 	.word	0x2000019c

08007f3c <__libc_init_array>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f74 <__libc_init_array+0x38>)
 8007f40:	4c0d      	ldr	r4, [pc, #52]	@ (8007f78 <__libc_init_array+0x3c>)
 8007f42:	1b64      	subs	r4, r4, r5
 8007f44:	10a4      	asrs	r4, r4, #2
 8007f46:	2600      	movs	r6, #0
 8007f48:	42a6      	cmp	r6, r4
 8007f4a:	d109      	bne.n	8007f60 <__libc_init_array+0x24>
 8007f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f7c <__libc_init_array+0x40>)
 8007f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f80 <__libc_init_array+0x44>)
 8007f50:	f003 fb70 	bl	800b634 <_init>
 8007f54:	1b64      	subs	r4, r4, r5
 8007f56:	10a4      	asrs	r4, r4, #2
 8007f58:	2600      	movs	r6, #0
 8007f5a:	42a6      	cmp	r6, r4
 8007f5c:	d105      	bne.n	8007f6a <__libc_init_array+0x2e>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f64:	4798      	blx	r3
 8007f66:	3601      	adds	r6, #1
 8007f68:	e7ee      	b.n	8007f48 <__libc_init_array+0xc>
 8007f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6e:	4798      	blx	r3
 8007f70:	3601      	adds	r6, #1
 8007f72:	e7f2      	b.n	8007f5a <__libc_init_array+0x1e>
 8007f74:	0800bc10 	.word	0x0800bc10
 8007f78:	0800bc10 	.word	0x0800bc10
 8007f7c:	0800bc10 	.word	0x0800bc10
 8007f80:	0800bc14 	.word	0x0800bc14

08007f84 <__retarget_lock_init_recursive>:
 8007f84:	4770      	bx	lr

08007f86 <__retarget_lock_acquire_recursive>:
 8007f86:	4770      	bx	lr

08007f88 <__retarget_lock_release_recursive>:
 8007f88:	4770      	bx	lr
	...

08007f8c <nanf>:
 8007f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f94 <nanf+0x8>
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	7fc00000 	.word	0x7fc00000

08007f98 <quorem>:
 8007f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	6903      	ldr	r3, [r0, #16]
 8007f9e:	690c      	ldr	r4, [r1, #16]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	db7e      	blt.n	80080a4 <quorem+0x10c>
 8007fa6:	3c01      	subs	r4, #1
 8007fa8:	f101 0814 	add.w	r8, r1, #20
 8007fac:	00a3      	lsls	r3, r4, #2
 8007fae:	f100 0514 	add.w	r5, r0, #20
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fca:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fce:	d32e      	bcc.n	800802e <quorem+0x96>
 8007fd0:	f04f 0a00 	mov.w	sl, #0
 8007fd4:	46c4      	mov	ip, r8
 8007fd6:	46ae      	mov	lr, r5
 8007fd8:	46d3      	mov	fp, sl
 8007fda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fde:	b298      	uxth	r0, r3
 8007fe0:	fb06 a000 	mla	r0, r6, r0, sl
 8007fe4:	0c02      	lsrs	r2, r0, #16
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	fb06 2303 	mla	r3, r6, r3, r2
 8007fec:	f8de 2000 	ldr.w	r2, [lr]
 8007ff0:	b280      	uxth	r0, r0
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	1a12      	subs	r2, r2, r0
 8007ff6:	445a      	add	r2, fp
 8007ff8:	f8de 0000 	ldr.w	r0, [lr]
 8007ffc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008000:	b29b      	uxth	r3, r3
 8008002:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008006:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800800a:	b292      	uxth	r2, r2
 800800c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008010:	45e1      	cmp	r9, ip
 8008012:	f84e 2b04 	str.w	r2, [lr], #4
 8008016:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800801a:	d2de      	bcs.n	8007fda <quorem+0x42>
 800801c:	9b00      	ldr	r3, [sp, #0]
 800801e:	58eb      	ldr	r3, [r5, r3]
 8008020:	b92b      	cbnz	r3, 800802e <quorem+0x96>
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	3b04      	subs	r3, #4
 8008026:	429d      	cmp	r5, r3
 8008028:	461a      	mov	r2, r3
 800802a:	d32f      	bcc.n	800808c <quorem+0xf4>
 800802c:	613c      	str	r4, [r7, #16]
 800802e:	4638      	mov	r0, r7
 8008030:	f001 f9c2 	bl	80093b8 <__mcmp>
 8008034:	2800      	cmp	r0, #0
 8008036:	db25      	blt.n	8008084 <quorem+0xec>
 8008038:	4629      	mov	r1, r5
 800803a:	2000      	movs	r0, #0
 800803c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008040:	f8d1 c000 	ldr.w	ip, [r1]
 8008044:	fa1f fe82 	uxth.w	lr, r2
 8008048:	fa1f f38c 	uxth.w	r3, ip
 800804c:	eba3 030e 	sub.w	r3, r3, lr
 8008050:	4403      	add	r3, r0
 8008052:	0c12      	lsrs	r2, r2, #16
 8008054:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008058:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800805c:	b29b      	uxth	r3, r3
 800805e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008062:	45c1      	cmp	r9, r8
 8008064:	f841 3b04 	str.w	r3, [r1], #4
 8008068:	ea4f 4022 	mov.w	r0, r2, asr #16
 800806c:	d2e6      	bcs.n	800803c <quorem+0xa4>
 800806e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008076:	b922      	cbnz	r2, 8008082 <quorem+0xea>
 8008078:	3b04      	subs	r3, #4
 800807a:	429d      	cmp	r5, r3
 800807c:	461a      	mov	r2, r3
 800807e:	d30b      	bcc.n	8008098 <quorem+0x100>
 8008080:	613c      	str	r4, [r7, #16]
 8008082:	3601      	adds	r6, #1
 8008084:	4630      	mov	r0, r6
 8008086:	b003      	add	sp, #12
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	3b04      	subs	r3, #4
 8008090:	2a00      	cmp	r2, #0
 8008092:	d1cb      	bne.n	800802c <quorem+0x94>
 8008094:	3c01      	subs	r4, #1
 8008096:	e7c6      	b.n	8008026 <quorem+0x8e>
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	3b04      	subs	r3, #4
 800809c:	2a00      	cmp	r2, #0
 800809e:	d1ef      	bne.n	8008080 <quorem+0xe8>
 80080a0:	3c01      	subs	r4, #1
 80080a2:	e7ea      	b.n	800807a <quorem+0xe2>
 80080a4:	2000      	movs	r0, #0
 80080a6:	e7ee      	b.n	8008086 <quorem+0xee>

080080a8 <_dtoa_r>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	69c7      	ldr	r7, [r0, #28]
 80080ae:	b099      	sub	sp, #100	@ 0x64
 80080b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080b4:	ec55 4b10 	vmov	r4, r5, d0
 80080b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80080ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80080bc:	4683      	mov	fp, r0
 80080be:	920e      	str	r2, [sp, #56]	@ 0x38
 80080c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080c2:	b97f      	cbnz	r7, 80080e4 <_dtoa_r+0x3c>
 80080c4:	2010      	movs	r0, #16
 80080c6:	f000 fdfd 	bl	8008cc4 <malloc>
 80080ca:	4602      	mov	r2, r0
 80080cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80080d0:	b920      	cbnz	r0, 80080dc <_dtoa_r+0x34>
 80080d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008370 <_dtoa_r+0x2c8>)
 80080d4:	21ef      	movs	r1, #239	@ 0xef
 80080d6:	48a7      	ldr	r0, [pc, #668]	@ (8008374 <_dtoa_r+0x2cc>)
 80080d8:	f002 fc36 	bl	800a948 <__assert_func>
 80080dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080e0:	6007      	str	r7, [r0, #0]
 80080e2:	60c7      	str	r7, [r0, #12]
 80080e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	b159      	cbz	r1, 8008104 <_dtoa_r+0x5c>
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	604a      	str	r2, [r1, #4]
 80080f0:	2301      	movs	r3, #1
 80080f2:	4093      	lsls	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	4658      	mov	r0, fp
 80080f8:	f000 feda 	bl	8008eb0 <_Bfree>
 80080fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	1e2b      	subs	r3, r5, #0
 8008106:	bfb9      	ittee	lt
 8008108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800810c:	9303      	strlt	r3, [sp, #12]
 800810e:	2300      	movge	r3, #0
 8008110:	6033      	strge	r3, [r6, #0]
 8008112:	9f03      	ldr	r7, [sp, #12]
 8008114:	4b98      	ldr	r3, [pc, #608]	@ (8008378 <_dtoa_r+0x2d0>)
 8008116:	bfbc      	itt	lt
 8008118:	2201      	movlt	r2, #1
 800811a:	6032      	strlt	r2, [r6, #0]
 800811c:	43bb      	bics	r3, r7
 800811e:	d112      	bne.n	8008146 <_dtoa_r+0x9e>
 8008120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800812c:	4323      	orrs	r3, r4
 800812e:	f000 854d 	beq.w	8008bcc <_dtoa_r+0xb24>
 8008132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800838c <_dtoa_r+0x2e4>
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 854f 	beq.w	8008bdc <_dtoa_r+0xb34>
 800813e:	f10a 0303 	add.w	r3, sl, #3
 8008142:	f000 bd49 	b.w	8008bd8 <_dtoa_r+0xb30>
 8008146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	ec51 0b17 	vmov	r0, r1, d7
 8008150:	2300      	movs	r3, #0
 8008152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008156:	f7f8 fce7 	bl	8000b28 <__aeabi_dcmpeq>
 800815a:	4680      	mov	r8, r0
 800815c:	b158      	cbz	r0, 8008176 <_dtoa_r+0xce>
 800815e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008160:	2301      	movs	r3, #1
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008166:	b113      	cbz	r3, 800816e <_dtoa_r+0xc6>
 8008168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800816a:	4b84      	ldr	r3, [pc, #528]	@ (800837c <_dtoa_r+0x2d4>)
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008390 <_dtoa_r+0x2e8>
 8008172:	f000 bd33 	b.w	8008bdc <_dtoa_r+0xb34>
 8008176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800817a:	aa16      	add	r2, sp, #88	@ 0x58
 800817c:	a917      	add	r1, sp, #92	@ 0x5c
 800817e:	4658      	mov	r0, fp
 8008180:	f001 fa3a 	bl	80095f8 <__d2b>
 8008184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008188:	4681      	mov	r9, r0
 800818a:	2e00      	cmp	r6, #0
 800818c:	d077      	beq.n	800827e <_dtoa_r+0x1d6>
 800818e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800819c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081a8:	4619      	mov	r1, r3
 80081aa:	2200      	movs	r2, #0
 80081ac:	4b74      	ldr	r3, [pc, #464]	@ (8008380 <_dtoa_r+0x2d8>)
 80081ae:	f7f8 f89b 	bl	80002e8 <__aeabi_dsub>
 80081b2:	a369      	add	r3, pc, #420	@ (adr r3, 8008358 <_dtoa_r+0x2b0>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f7f8 fa4e 	bl	8000658 <__aeabi_dmul>
 80081bc:	a368      	add	r3, pc, #416	@ (adr r3, 8008360 <_dtoa_r+0x2b8>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f893 	bl	80002ec <__adddf3>
 80081c6:	4604      	mov	r4, r0
 80081c8:	4630      	mov	r0, r6
 80081ca:	460d      	mov	r5, r1
 80081cc:	f7f8 f9da 	bl	8000584 <__aeabi_i2d>
 80081d0:	a365      	add	r3, pc, #404	@ (adr r3, 8008368 <_dtoa_r+0x2c0>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 fa3f 	bl	8000658 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 f883 	bl	80002ec <__adddf3>
 80081e6:	4604      	mov	r4, r0
 80081e8:	460d      	mov	r5, r1
 80081ea:	f7f8 fce5 	bl	8000bb8 <__aeabi_d2iz>
 80081ee:	2200      	movs	r2, #0
 80081f0:	4607      	mov	r7, r0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4620      	mov	r0, r4
 80081f6:	4629      	mov	r1, r5
 80081f8:	f7f8 fca0 	bl	8000b3c <__aeabi_dcmplt>
 80081fc:	b140      	cbz	r0, 8008210 <_dtoa_r+0x168>
 80081fe:	4638      	mov	r0, r7
 8008200:	f7f8 f9c0 	bl	8000584 <__aeabi_i2d>
 8008204:	4622      	mov	r2, r4
 8008206:	462b      	mov	r3, r5
 8008208:	f7f8 fc8e 	bl	8000b28 <__aeabi_dcmpeq>
 800820c:	b900      	cbnz	r0, 8008210 <_dtoa_r+0x168>
 800820e:	3f01      	subs	r7, #1
 8008210:	2f16      	cmp	r7, #22
 8008212:	d851      	bhi.n	80082b8 <_dtoa_r+0x210>
 8008214:	4b5b      	ldr	r3, [pc, #364]	@ (8008384 <_dtoa_r+0x2dc>)
 8008216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008222:	f7f8 fc8b 	bl	8000b3c <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d048      	beq.n	80082bc <_dtoa_r+0x214>
 800822a:	3f01      	subs	r7, #1
 800822c:	2300      	movs	r3, #0
 800822e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008232:	1b9b      	subs	r3, r3, r6
 8008234:	1e5a      	subs	r2, r3, #1
 8008236:	bf44      	itt	mi
 8008238:	f1c3 0801 	rsbmi	r8, r3, #1
 800823c:	2300      	movmi	r3, #0
 800823e:	9208      	str	r2, [sp, #32]
 8008240:	bf54      	ite	pl
 8008242:	f04f 0800 	movpl.w	r8, #0
 8008246:	9308      	strmi	r3, [sp, #32]
 8008248:	2f00      	cmp	r7, #0
 800824a:	db39      	blt.n	80082c0 <_dtoa_r+0x218>
 800824c:	9b08      	ldr	r3, [sp, #32]
 800824e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008250:	443b      	add	r3, r7
 8008252:	9308      	str	r3, [sp, #32]
 8008254:	2300      	movs	r3, #0
 8008256:	930a      	str	r3, [sp, #40]	@ 0x28
 8008258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825a:	2b09      	cmp	r3, #9
 800825c:	d864      	bhi.n	8008328 <_dtoa_r+0x280>
 800825e:	2b05      	cmp	r3, #5
 8008260:	bfc4      	itt	gt
 8008262:	3b04      	subgt	r3, #4
 8008264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	f1a3 0302 	sub.w	r3, r3, #2
 800826c:	bfcc      	ite	gt
 800826e:	2400      	movgt	r4, #0
 8008270:	2401      	movle	r4, #1
 8008272:	2b03      	cmp	r3, #3
 8008274:	d863      	bhi.n	800833e <_dtoa_r+0x296>
 8008276:	e8df f003 	tbb	[pc, r3]
 800827a:	372a      	.short	0x372a
 800827c:	5535      	.short	0x5535
 800827e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008282:	441e      	add	r6, r3
 8008284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008288:	2b20      	cmp	r3, #32
 800828a:	bfc1      	itttt	gt
 800828c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008290:	409f      	lslgt	r7, r3
 8008292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008296:	fa24 f303 	lsrgt.w	r3, r4, r3
 800829a:	bfd6      	itet	le
 800829c:	f1c3 0320 	rsble	r3, r3, #32
 80082a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80082a4:	fa04 f003 	lslle.w	r0, r4, r3
 80082a8:	f7f8 f95c 	bl	8000564 <__aeabi_ui2d>
 80082ac:	2201      	movs	r2, #1
 80082ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082b2:	3e01      	subs	r6, #1
 80082b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80082b6:	e777      	b.n	80081a8 <_dtoa_r+0x100>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7b8      	b.n	800822e <_dtoa_r+0x186>
 80082bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80082be:	e7b7      	b.n	8008230 <_dtoa_r+0x188>
 80082c0:	427b      	negs	r3, r7
 80082c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c4:	2300      	movs	r3, #0
 80082c6:	eba8 0807 	sub.w	r8, r8, r7
 80082ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082cc:	e7c4      	b.n	8008258 <_dtoa_r+0x1b0>
 80082ce:	2300      	movs	r3, #0
 80082d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dc35      	bgt.n	8008344 <_dtoa_r+0x29c>
 80082d8:	2301      	movs	r3, #1
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	9307      	str	r3, [sp, #28]
 80082de:	461a      	mov	r2, r3
 80082e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082e2:	e00b      	b.n	80082fc <_dtoa_r+0x254>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7f3      	b.n	80082d0 <_dtoa_r+0x228>
 80082e8:	2300      	movs	r3, #0
 80082ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	bfb8      	it	lt
 80082fa:	2301      	movlt	r3, #1
 80082fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008300:	2100      	movs	r1, #0
 8008302:	2204      	movs	r2, #4
 8008304:	f102 0514 	add.w	r5, r2, #20
 8008308:	429d      	cmp	r5, r3
 800830a:	d91f      	bls.n	800834c <_dtoa_r+0x2a4>
 800830c:	6041      	str	r1, [r0, #4]
 800830e:	4658      	mov	r0, fp
 8008310:	f000 fd8e 	bl	8008e30 <_Balloc>
 8008314:	4682      	mov	sl, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d13c      	bne.n	8008394 <_dtoa_r+0x2ec>
 800831a:	4b1b      	ldr	r3, [pc, #108]	@ (8008388 <_dtoa_r+0x2e0>)
 800831c:	4602      	mov	r2, r0
 800831e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008322:	e6d8      	b.n	80080d6 <_dtoa_r+0x2e>
 8008324:	2301      	movs	r3, #1
 8008326:	e7e0      	b.n	80082ea <_dtoa_r+0x242>
 8008328:	2401      	movs	r4, #1
 800832a:	2300      	movs	r3, #0
 800832c:	9309      	str	r3, [sp, #36]	@ 0x24
 800832e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008330:	f04f 33ff 	mov.w	r3, #4294967295
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	2200      	movs	r2, #0
 800833a:	2312      	movs	r3, #18
 800833c:	e7d0      	b.n	80082e0 <_dtoa_r+0x238>
 800833e:	2301      	movs	r3, #1
 8008340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008342:	e7f5      	b.n	8008330 <_dtoa_r+0x288>
 8008344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	9307      	str	r3, [sp, #28]
 800834a:	e7d7      	b.n	80082fc <_dtoa_r+0x254>
 800834c:	3101      	adds	r1, #1
 800834e:	0052      	lsls	r2, r2, #1
 8008350:	e7d8      	b.n	8008304 <_dtoa_r+0x25c>
 8008352:	bf00      	nop
 8008354:	f3af 8000 	nop.w
 8008358:	636f4361 	.word	0x636f4361
 800835c:	3fd287a7 	.word	0x3fd287a7
 8008360:	8b60c8b3 	.word	0x8b60c8b3
 8008364:	3fc68a28 	.word	0x3fc68a28
 8008368:	509f79fb 	.word	0x509f79fb
 800836c:	3fd34413 	.word	0x3fd34413
 8008370:	0800b822 	.word	0x0800b822
 8008374:	0800b839 	.word	0x0800b839
 8008378:	7ff00000 	.word	0x7ff00000
 800837c:	0800b7ed 	.word	0x0800b7ed
 8008380:	3ff80000 	.word	0x3ff80000
 8008384:	0800b930 	.word	0x0800b930
 8008388:	0800b891 	.word	0x0800b891
 800838c:	0800b81e 	.word	0x0800b81e
 8008390:	0800b7ec 	.word	0x0800b7ec
 8008394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008398:	6018      	str	r0, [r3, #0]
 800839a:	9b07      	ldr	r3, [sp, #28]
 800839c:	2b0e      	cmp	r3, #14
 800839e:	f200 80a4 	bhi.w	80084ea <_dtoa_r+0x442>
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	f000 80a1 	beq.w	80084ea <_dtoa_r+0x442>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	dd33      	ble.n	8008414 <_dtoa_r+0x36c>
 80083ac:	4bad      	ldr	r3, [pc, #692]	@ (8008664 <_dtoa_r+0x5bc>)
 80083ae:	f007 020f 	and.w	r2, r7, #15
 80083b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b6:	ed93 7b00 	vldr	d7, [r3]
 80083ba:	05f8      	lsls	r0, r7, #23
 80083bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083c4:	d516      	bpl.n	80083f4 <_dtoa_r+0x34c>
 80083c6:	4ba8      	ldr	r3, [pc, #672]	@ (8008668 <_dtoa_r+0x5c0>)
 80083c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083d0:	f7f8 fa6c 	bl	80008ac <__aeabi_ddiv>
 80083d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083d8:	f004 040f 	and.w	r4, r4, #15
 80083dc:	2603      	movs	r6, #3
 80083de:	4da2      	ldr	r5, [pc, #648]	@ (8008668 <_dtoa_r+0x5c0>)
 80083e0:	b954      	cbnz	r4, 80083f8 <_dtoa_r+0x350>
 80083e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ea:	f7f8 fa5f 	bl	80008ac <__aeabi_ddiv>
 80083ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f2:	e028      	b.n	8008446 <_dtoa_r+0x39e>
 80083f4:	2602      	movs	r6, #2
 80083f6:	e7f2      	b.n	80083de <_dtoa_r+0x336>
 80083f8:	07e1      	lsls	r1, r4, #31
 80083fa:	d508      	bpl.n	800840e <_dtoa_r+0x366>
 80083fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008404:	f7f8 f928 	bl	8000658 <__aeabi_dmul>
 8008408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800840c:	3601      	adds	r6, #1
 800840e:	1064      	asrs	r4, r4, #1
 8008410:	3508      	adds	r5, #8
 8008412:	e7e5      	b.n	80083e0 <_dtoa_r+0x338>
 8008414:	f000 80d2 	beq.w	80085bc <_dtoa_r+0x514>
 8008418:	427c      	negs	r4, r7
 800841a:	4b92      	ldr	r3, [pc, #584]	@ (8008664 <_dtoa_r+0x5bc>)
 800841c:	4d92      	ldr	r5, [pc, #584]	@ (8008668 <_dtoa_r+0x5c0>)
 800841e:	f004 020f 	and.w	r2, r4, #15
 8008422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800842e:	f7f8 f913 	bl	8000658 <__aeabi_dmul>
 8008432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008436:	1124      	asrs	r4, r4, #4
 8008438:	2300      	movs	r3, #0
 800843a:	2602      	movs	r6, #2
 800843c:	2c00      	cmp	r4, #0
 800843e:	f040 80b2 	bne.w	80085a6 <_dtoa_r+0x4fe>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1d3      	bne.n	80083ee <_dtoa_r+0x346>
 8008446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80b7 	beq.w	80085c0 <_dtoa_r+0x518>
 8008452:	4b86      	ldr	r3, [pc, #536]	@ (800866c <_dtoa_r+0x5c4>)
 8008454:	2200      	movs	r2, #0
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 fb6f 	bl	8000b3c <__aeabi_dcmplt>
 800845e:	2800      	cmp	r0, #0
 8008460:	f000 80ae 	beq.w	80085c0 <_dtoa_r+0x518>
 8008464:	9b07      	ldr	r3, [sp, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 80aa 	beq.w	80085c0 <_dtoa_r+0x518>
 800846c:	9b00      	ldr	r3, [sp, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dd37      	ble.n	80084e2 <_dtoa_r+0x43a>
 8008472:	1e7b      	subs	r3, r7, #1
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	4620      	mov	r0, r4
 8008478:	4b7d      	ldr	r3, [pc, #500]	@ (8008670 <_dtoa_r+0x5c8>)
 800847a:	2200      	movs	r2, #0
 800847c:	4629      	mov	r1, r5
 800847e:	f7f8 f8eb 	bl	8000658 <__aeabi_dmul>
 8008482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008486:	9c00      	ldr	r4, [sp, #0]
 8008488:	3601      	adds	r6, #1
 800848a:	4630      	mov	r0, r6
 800848c:	f7f8 f87a 	bl	8000584 <__aeabi_i2d>
 8008490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008494:	f7f8 f8e0 	bl	8000658 <__aeabi_dmul>
 8008498:	4b76      	ldr	r3, [pc, #472]	@ (8008674 <_dtoa_r+0x5cc>)
 800849a:	2200      	movs	r2, #0
 800849c:	f7f7 ff26 	bl	80002ec <__adddf3>
 80084a0:	4605      	mov	r5, r0
 80084a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	f040 808d 	bne.w	80085c6 <_dtoa_r+0x51e>
 80084ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b0:	4b71      	ldr	r3, [pc, #452]	@ (8008678 <_dtoa_r+0x5d0>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f7 ff18 	bl	80002e8 <__aeabi_dsub>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4633      	mov	r3, r6
 80084c4:	f7f8 fb58 	bl	8000b78 <__aeabi_dcmpgt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f040 828b 	bne.w	80089e4 <_dtoa_r+0x93c>
 80084ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d2:	462a      	mov	r2, r5
 80084d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084d8:	f7f8 fb30 	bl	8000b3c <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 8128 	bne.w	8008732 <_dtoa_r+0x68a>
 80084e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80084e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f2c0 815a 	blt.w	80087a6 <_dtoa_r+0x6fe>
 80084f2:	2f0e      	cmp	r7, #14
 80084f4:	f300 8157 	bgt.w	80087a6 <_dtoa_r+0x6fe>
 80084f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008664 <_dtoa_r+0x5bc>)
 80084fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084fe:	ed93 7b00 	vldr	d7, [r3]
 8008502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	ed8d 7b00 	vstr	d7, [sp]
 800850a:	da03      	bge.n	8008514 <_dtoa_r+0x46c>
 800850c:	9b07      	ldr	r3, [sp, #28]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f340 8101 	ble.w	8008716 <_dtoa_r+0x66e>
 8008514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008518:	4656      	mov	r6, sl
 800851a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f8 f9c3 	bl	80008ac <__aeabi_ddiv>
 8008526:	f7f8 fb47 	bl	8000bb8 <__aeabi_d2iz>
 800852a:	4680      	mov	r8, r0
 800852c:	f7f8 f82a 	bl	8000584 <__aeabi_i2d>
 8008530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008534:	f7f8 f890 	bl	8000658 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4620      	mov	r0, r4
 800853e:	4629      	mov	r1, r5
 8008540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008544:	f7f7 fed0 	bl	80002e8 <__aeabi_dsub>
 8008548:	f806 4b01 	strb.w	r4, [r6], #1
 800854c:	9d07      	ldr	r5, [sp, #28]
 800854e:	eba6 040a 	sub.w	r4, r6, sl
 8008552:	42a5      	cmp	r5, r4
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	f040 8117 	bne.w	800878a <_dtoa_r+0x6e2>
 800855c:	f7f7 fec6 	bl	80002ec <__adddf3>
 8008560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	f7f8 fb06 	bl	8000b78 <__aeabi_dcmpgt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f040 80f9 	bne.w	8008764 <_dtoa_r+0x6bc>
 8008572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f8 fad5 	bl	8000b28 <__aeabi_dcmpeq>
 800857e:	b118      	cbz	r0, 8008588 <_dtoa_r+0x4e0>
 8008580:	f018 0f01 	tst.w	r8, #1
 8008584:	f040 80ee 	bne.w	8008764 <_dtoa_r+0x6bc>
 8008588:	4649      	mov	r1, r9
 800858a:	4658      	mov	r0, fp
 800858c:	f000 fc90 	bl	8008eb0 <_Bfree>
 8008590:	2300      	movs	r3, #0
 8008592:	7033      	strb	r3, [r6, #0]
 8008594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008596:	3701      	adds	r7, #1
 8008598:	601f      	str	r7, [r3, #0]
 800859a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 831d 	beq.w	8008bdc <_dtoa_r+0xb34>
 80085a2:	601e      	str	r6, [r3, #0]
 80085a4:	e31a      	b.n	8008bdc <_dtoa_r+0xb34>
 80085a6:	07e2      	lsls	r2, r4, #31
 80085a8:	d505      	bpl.n	80085b6 <_dtoa_r+0x50e>
 80085aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085ae:	f7f8 f853 	bl	8000658 <__aeabi_dmul>
 80085b2:	3601      	adds	r6, #1
 80085b4:	2301      	movs	r3, #1
 80085b6:	1064      	asrs	r4, r4, #1
 80085b8:	3508      	adds	r5, #8
 80085ba:	e73f      	b.n	800843c <_dtoa_r+0x394>
 80085bc:	2602      	movs	r6, #2
 80085be:	e742      	b.n	8008446 <_dtoa_r+0x39e>
 80085c0:	9c07      	ldr	r4, [sp, #28]
 80085c2:	9704      	str	r7, [sp, #16]
 80085c4:	e761      	b.n	800848a <_dtoa_r+0x3e2>
 80085c6:	4b27      	ldr	r3, [pc, #156]	@ (8008664 <_dtoa_r+0x5bc>)
 80085c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085d2:	4454      	add	r4, sl
 80085d4:	2900      	cmp	r1, #0
 80085d6:	d053      	beq.n	8008680 <_dtoa_r+0x5d8>
 80085d8:	4928      	ldr	r1, [pc, #160]	@ (800867c <_dtoa_r+0x5d4>)
 80085da:	2000      	movs	r0, #0
 80085dc:	f7f8 f966 	bl	80008ac <__aeabi_ddiv>
 80085e0:	4633      	mov	r3, r6
 80085e2:	462a      	mov	r2, r5
 80085e4:	f7f7 fe80 	bl	80002e8 <__aeabi_dsub>
 80085e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085ec:	4656      	mov	r6, sl
 80085ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f2:	f7f8 fae1 	bl	8000bb8 <__aeabi_d2iz>
 80085f6:	4605      	mov	r5, r0
 80085f8:	f7f7 ffc4 	bl	8000584 <__aeabi_i2d>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008604:	f7f7 fe70 	bl	80002e8 <__aeabi_dsub>
 8008608:	3530      	adds	r5, #48	@ 0x30
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008612:	f806 5b01 	strb.w	r5, [r6], #1
 8008616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800861a:	f7f8 fa8f 	bl	8000b3c <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d171      	bne.n	8008706 <_dtoa_r+0x65e>
 8008622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008626:	4911      	ldr	r1, [pc, #68]	@ (800866c <_dtoa_r+0x5c4>)
 8008628:	2000      	movs	r0, #0
 800862a:	f7f7 fe5d 	bl	80002e8 <__aeabi_dsub>
 800862e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008632:	f7f8 fa83 	bl	8000b3c <__aeabi_dcmplt>
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 8095 	bne.w	8008766 <_dtoa_r+0x6be>
 800863c:	42a6      	cmp	r6, r4
 800863e:	f43f af50 	beq.w	80084e2 <_dtoa_r+0x43a>
 8008642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008646:	4b0a      	ldr	r3, [pc, #40]	@ (8008670 <_dtoa_r+0x5c8>)
 8008648:	2200      	movs	r2, #0
 800864a:	f7f8 f805 	bl	8000658 <__aeabi_dmul>
 800864e:	4b08      	ldr	r3, [pc, #32]	@ (8008670 <_dtoa_r+0x5c8>)
 8008650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008654:	2200      	movs	r2, #0
 8008656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865a:	f7f7 fffd 	bl	8000658 <__aeabi_dmul>
 800865e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008662:	e7c4      	b.n	80085ee <_dtoa_r+0x546>
 8008664:	0800b930 	.word	0x0800b930
 8008668:	0800b908 	.word	0x0800b908
 800866c:	3ff00000 	.word	0x3ff00000
 8008670:	40240000 	.word	0x40240000
 8008674:	401c0000 	.word	0x401c0000
 8008678:	40140000 	.word	0x40140000
 800867c:	3fe00000 	.word	0x3fe00000
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	f7f7 ffe8 	bl	8000658 <__aeabi_dmul>
 8008688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800868c:	9415      	str	r4, [sp, #84]	@ 0x54
 800868e:	4656      	mov	r6, sl
 8008690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008694:	f7f8 fa90 	bl	8000bb8 <__aeabi_d2iz>
 8008698:	4605      	mov	r5, r0
 800869a:	f7f7 ff73 	bl	8000584 <__aeabi_i2d>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a6:	f7f7 fe1f 	bl	80002e8 <__aeabi_dsub>
 80086aa:	3530      	adds	r5, #48	@ 0x30
 80086ac:	f806 5b01 	strb.w	r5, [r6], #1
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	42a6      	cmp	r6, r4
 80086b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	d124      	bne.n	800870a <_dtoa_r+0x662>
 80086c0:	4bac      	ldr	r3, [pc, #688]	@ (8008974 <_dtoa_r+0x8cc>)
 80086c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086c6:	f7f7 fe11 	bl	80002ec <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d2:	f7f8 fa51 	bl	8000b78 <__aeabi_dcmpgt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d145      	bne.n	8008766 <_dtoa_r+0x6be>
 80086da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086de:	49a5      	ldr	r1, [pc, #660]	@ (8008974 <_dtoa_r+0x8cc>)
 80086e0:	2000      	movs	r0, #0
 80086e2:	f7f7 fe01 	bl	80002e8 <__aeabi_dsub>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ee:	f7f8 fa25 	bl	8000b3c <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f aef5 	beq.w	80084e2 <_dtoa_r+0x43a>
 80086f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80086fa:	1e73      	subs	r3, r6, #1
 80086fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80086fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008702:	2b30      	cmp	r3, #48	@ 0x30
 8008704:	d0f8      	beq.n	80086f8 <_dtoa_r+0x650>
 8008706:	9f04      	ldr	r7, [sp, #16]
 8008708:	e73e      	b.n	8008588 <_dtoa_r+0x4e0>
 800870a:	4b9b      	ldr	r3, [pc, #620]	@ (8008978 <_dtoa_r+0x8d0>)
 800870c:	f7f7 ffa4 	bl	8000658 <__aeabi_dmul>
 8008710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008714:	e7bc      	b.n	8008690 <_dtoa_r+0x5e8>
 8008716:	d10c      	bne.n	8008732 <_dtoa_r+0x68a>
 8008718:	4b98      	ldr	r3, [pc, #608]	@ (800897c <_dtoa_r+0x8d4>)
 800871a:	2200      	movs	r2, #0
 800871c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008720:	f7f7 ff9a 	bl	8000658 <__aeabi_dmul>
 8008724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008728:	f7f8 fa1c 	bl	8000b64 <__aeabi_dcmpge>
 800872c:	2800      	cmp	r0, #0
 800872e:	f000 8157 	beq.w	80089e0 <_dtoa_r+0x938>
 8008732:	2400      	movs	r4, #0
 8008734:	4625      	mov	r5, r4
 8008736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008738:	43db      	mvns	r3, r3
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	4656      	mov	r6, sl
 800873e:	2700      	movs	r7, #0
 8008740:	4621      	mov	r1, r4
 8008742:	4658      	mov	r0, fp
 8008744:	f000 fbb4 	bl	8008eb0 <_Bfree>
 8008748:	2d00      	cmp	r5, #0
 800874a:	d0dc      	beq.n	8008706 <_dtoa_r+0x65e>
 800874c:	b12f      	cbz	r7, 800875a <_dtoa_r+0x6b2>
 800874e:	42af      	cmp	r7, r5
 8008750:	d003      	beq.n	800875a <_dtoa_r+0x6b2>
 8008752:	4639      	mov	r1, r7
 8008754:	4658      	mov	r0, fp
 8008756:	f000 fbab 	bl	8008eb0 <_Bfree>
 800875a:	4629      	mov	r1, r5
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fba7 	bl	8008eb0 <_Bfree>
 8008762:	e7d0      	b.n	8008706 <_dtoa_r+0x65e>
 8008764:	9704      	str	r7, [sp, #16]
 8008766:	4633      	mov	r3, r6
 8008768:	461e      	mov	r6, r3
 800876a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800876e:	2a39      	cmp	r2, #57	@ 0x39
 8008770:	d107      	bne.n	8008782 <_dtoa_r+0x6da>
 8008772:	459a      	cmp	sl, r3
 8008774:	d1f8      	bne.n	8008768 <_dtoa_r+0x6c0>
 8008776:	9a04      	ldr	r2, [sp, #16]
 8008778:	3201      	adds	r2, #1
 800877a:	9204      	str	r2, [sp, #16]
 800877c:	2230      	movs	r2, #48	@ 0x30
 800877e:	f88a 2000 	strb.w	r2, [sl]
 8008782:	781a      	ldrb	r2, [r3, #0]
 8008784:	3201      	adds	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e7bd      	b.n	8008706 <_dtoa_r+0x65e>
 800878a:	4b7b      	ldr	r3, [pc, #492]	@ (8008978 <_dtoa_r+0x8d0>)
 800878c:	2200      	movs	r2, #0
 800878e:	f7f7 ff63 	bl	8000658 <__aeabi_dmul>
 8008792:	2200      	movs	r2, #0
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	460d      	mov	r5, r1
 800879a:	f7f8 f9c5 	bl	8000b28 <__aeabi_dcmpeq>
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f aebb 	beq.w	800851a <_dtoa_r+0x472>
 80087a4:	e6f0      	b.n	8008588 <_dtoa_r+0x4e0>
 80087a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	f000 80db 	beq.w	8008964 <_dtoa_r+0x8bc>
 80087ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b0:	2a01      	cmp	r2, #1
 80087b2:	f300 80bf 	bgt.w	8008934 <_dtoa_r+0x88c>
 80087b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	f000 80b7 	beq.w	800892c <_dtoa_r+0x884>
 80087be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80087c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087c4:	4646      	mov	r6, r8
 80087c6:	9a08      	ldr	r2, [sp, #32]
 80087c8:	2101      	movs	r1, #1
 80087ca:	441a      	add	r2, r3
 80087cc:	4658      	mov	r0, fp
 80087ce:	4498      	add	r8, r3
 80087d0:	9208      	str	r2, [sp, #32]
 80087d2:	f000 fc6b 	bl	80090ac <__i2b>
 80087d6:	4605      	mov	r5, r0
 80087d8:	b15e      	cbz	r6, 80087f2 <_dtoa_r+0x74a>
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd08      	ble.n	80087f2 <_dtoa_r+0x74a>
 80087e0:	42b3      	cmp	r3, r6
 80087e2:	9a08      	ldr	r2, [sp, #32]
 80087e4:	bfa8      	it	ge
 80087e6:	4633      	movge	r3, r6
 80087e8:	eba8 0803 	sub.w	r8, r8, r3
 80087ec:	1af6      	subs	r6, r6, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	9308      	str	r3, [sp, #32]
 80087f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f4:	b1f3      	cbz	r3, 8008834 <_dtoa_r+0x78c>
 80087f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 80b7 	beq.w	800896c <_dtoa_r+0x8c4>
 80087fe:	b18c      	cbz	r4, 8008824 <_dtoa_r+0x77c>
 8008800:	4629      	mov	r1, r5
 8008802:	4622      	mov	r2, r4
 8008804:	4658      	mov	r0, fp
 8008806:	f000 fd11 	bl	800922c <__pow5mult>
 800880a:	464a      	mov	r2, r9
 800880c:	4601      	mov	r1, r0
 800880e:	4605      	mov	r5, r0
 8008810:	4658      	mov	r0, fp
 8008812:	f000 fc61 	bl	80090d8 <__multiply>
 8008816:	4649      	mov	r1, r9
 8008818:	9004      	str	r0, [sp, #16]
 800881a:	4658      	mov	r0, fp
 800881c:	f000 fb48 	bl	8008eb0 <_Bfree>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	4699      	mov	r9, r3
 8008824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008826:	1b1a      	subs	r2, r3, r4
 8008828:	d004      	beq.n	8008834 <_dtoa_r+0x78c>
 800882a:	4649      	mov	r1, r9
 800882c:	4658      	mov	r0, fp
 800882e:	f000 fcfd 	bl	800922c <__pow5mult>
 8008832:	4681      	mov	r9, r0
 8008834:	2101      	movs	r1, #1
 8008836:	4658      	mov	r0, fp
 8008838:	f000 fc38 	bl	80090ac <__i2b>
 800883c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800883e:	4604      	mov	r4, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 81cf 	beq.w	8008be4 <_dtoa_r+0xb3c>
 8008846:	461a      	mov	r2, r3
 8008848:	4601      	mov	r1, r0
 800884a:	4658      	mov	r0, fp
 800884c:	f000 fcee 	bl	800922c <__pow5mult>
 8008850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008852:	2b01      	cmp	r3, #1
 8008854:	4604      	mov	r4, r0
 8008856:	f300 8095 	bgt.w	8008984 <_dtoa_r+0x8dc>
 800885a:	9b02      	ldr	r3, [sp, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8087 	bne.w	8008970 <_dtoa_r+0x8c8>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 8089 	bne.w	8008980 <_dtoa_r+0x8d8>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008874:	0d1b      	lsrs	r3, r3, #20
 8008876:	051b      	lsls	r3, r3, #20
 8008878:	b12b      	cbz	r3, 8008886 <_dtoa_r+0x7de>
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	3301      	adds	r3, #1
 800887e:	9308      	str	r3, [sp, #32]
 8008880:	f108 0801 	add.w	r8, r8, #1
 8008884:	2301      	movs	r3, #1
 8008886:	930a      	str	r3, [sp, #40]	@ 0x28
 8008888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 81b0 	beq.w	8008bf0 <_dtoa_r+0xb48>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008896:	6918      	ldr	r0, [r3, #16]
 8008898:	f000 fbbc 	bl	8009014 <__hi0bits>
 800889c:	f1c0 0020 	rsb	r0, r0, #32
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	4418      	add	r0, r3
 80088a4:	f010 001f 	ands.w	r0, r0, #31
 80088a8:	d077      	beq.n	800899a <_dtoa_r+0x8f2>
 80088aa:	f1c0 0320 	rsb	r3, r0, #32
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	dd6b      	ble.n	800898a <_dtoa_r+0x8e2>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	f1c0 001c 	rsb	r0, r0, #28
 80088b8:	4403      	add	r3, r0
 80088ba:	4480      	add	r8, r0
 80088bc:	4406      	add	r6, r0
 80088be:	9308      	str	r3, [sp, #32]
 80088c0:	f1b8 0f00 	cmp.w	r8, #0
 80088c4:	dd05      	ble.n	80088d2 <_dtoa_r+0x82a>
 80088c6:	4649      	mov	r1, r9
 80088c8:	4642      	mov	r2, r8
 80088ca:	4658      	mov	r0, fp
 80088cc:	f000 fd08 	bl	80092e0 <__lshift>
 80088d0:	4681      	mov	r9, r0
 80088d2:	9b08      	ldr	r3, [sp, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dd05      	ble.n	80088e4 <_dtoa_r+0x83c>
 80088d8:	4621      	mov	r1, r4
 80088da:	461a      	mov	r2, r3
 80088dc:	4658      	mov	r0, fp
 80088de:	f000 fcff 	bl	80092e0 <__lshift>
 80088e2:	4604      	mov	r4, r0
 80088e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d059      	beq.n	800899e <_dtoa_r+0x8f6>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4648      	mov	r0, r9
 80088ee:	f000 fd63 	bl	80093b8 <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	da53      	bge.n	800899e <_dtoa_r+0x8f6>
 80088f6:	1e7b      	subs	r3, r7, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	4649      	mov	r1, r9
 80088fc:	2300      	movs	r3, #0
 80088fe:	220a      	movs	r2, #10
 8008900:	4658      	mov	r0, fp
 8008902:	f000 faf7 	bl	8008ef4 <__multadd>
 8008906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008908:	4681      	mov	r9, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 8172 	beq.w	8008bf4 <_dtoa_r+0xb4c>
 8008910:	2300      	movs	r3, #0
 8008912:	4629      	mov	r1, r5
 8008914:	220a      	movs	r2, #10
 8008916:	4658      	mov	r0, fp
 8008918:	f000 faec 	bl	8008ef4 <__multadd>
 800891c:	9b00      	ldr	r3, [sp, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	4605      	mov	r5, r0
 8008922:	dc67      	bgt.n	80089f4 <_dtoa_r+0x94c>
 8008924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008926:	2b02      	cmp	r3, #2
 8008928:	dc41      	bgt.n	80089ae <_dtoa_r+0x906>
 800892a:	e063      	b.n	80089f4 <_dtoa_r+0x94c>
 800892c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800892e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008932:	e746      	b.n	80087c2 <_dtoa_r+0x71a>
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	1e5c      	subs	r4, r3, #1
 8008938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800893a:	42a3      	cmp	r3, r4
 800893c:	bfbf      	itttt	lt
 800893e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008944:	1ae3      	sublt	r3, r4, r3
 8008946:	bfb4      	ite	lt
 8008948:	18d2      	addlt	r2, r2, r3
 800894a:	1b1c      	subge	r4, r3, r4
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	bfbc      	itt	lt
 8008950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008952:	2400      	movlt	r4, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfb5      	itete	lt
 8008958:	eba8 0603 	sublt.w	r6, r8, r3
 800895c:	9b07      	ldrge	r3, [sp, #28]
 800895e:	2300      	movlt	r3, #0
 8008960:	4646      	movge	r6, r8
 8008962:	e730      	b.n	80087c6 <_dtoa_r+0x71e>
 8008964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008968:	4646      	mov	r6, r8
 800896a:	e735      	b.n	80087d8 <_dtoa_r+0x730>
 800896c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800896e:	e75c      	b.n	800882a <_dtoa_r+0x782>
 8008970:	2300      	movs	r3, #0
 8008972:	e788      	b.n	8008886 <_dtoa_r+0x7de>
 8008974:	3fe00000 	.word	0x3fe00000
 8008978:	40240000 	.word	0x40240000
 800897c:	40140000 	.word	0x40140000
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	e780      	b.n	8008886 <_dtoa_r+0x7de>
 8008984:	2300      	movs	r3, #0
 8008986:	930a      	str	r3, [sp, #40]	@ 0x28
 8008988:	e782      	b.n	8008890 <_dtoa_r+0x7e8>
 800898a:	d099      	beq.n	80088c0 <_dtoa_r+0x818>
 800898c:	9a08      	ldr	r2, [sp, #32]
 800898e:	331c      	adds	r3, #28
 8008990:	441a      	add	r2, r3
 8008992:	4498      	add	r8, r3
 8008994:	441e      	add	r6, r3
 8008996:	9208      	str	r2, [sp, #32]
 8008998:	e792      	b.n	80088c0 <_dtoa_r+0x818>
 800899a:	4603      	mov	r3, r0
 800899c:	e7f6      	b.n	800898c <_dtoa_r+0x8e4>
 800899e:	9b07      	ldr	r3, [sp, #28]
 80089a0:	9704      	str	r7, [sp, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dc20      	bgt.n	80089e8 <_dtoa_r+0x940>
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	dd1e      	ble.n	80089ec <_dtoa_r+0x944>
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f47f aec0 	bne.w	8008736 <_dtoa_r+0x68e>
 80089b6:	4621      	mov	r1, r4
 80089b8:	2205      	movs	r2, #5
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fa9a 	bl	8008ef4 <__multadd>
 80089c0:	4601      	mov	r1, r0
 80089c2:	4604      	mov	r4, r0
 80089c4:	4648      	mov	r0, r9
 80089c6:	f000 fcf7 	bl	80093b8 <__mcmp>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f77f aeb3 	ble.w	8008736 <_dtoa_r+0x68e>
 80089d0:	4656      	mov	r6, sl
 80089d2:	2331      	movs	r3, #49	@ 0x31
 80089d4:	f806 3b01 	strb.w	r3, [r6], #1
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	3301      	adds	r3, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	e6ae      	b.n	800873e <_dtoa_r+0x696>
 80089e0:	9c07      	ldr	r4, [sp, #28]
 80089e2:	9704      	str	r7, [sp, #16]
 80089e4:	4625      	mov	r5, r4
 80089e6:	e7f3      	b.n	80089d0 <_dtoa_r+0x928>
 80089e8:	9b07      	ldr	r3, [sp, #28]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8104 	beq.w	8008bfc <_dtoa_r+0xb54>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	dd05      	ble.n	8008a04 <_dtoa_r+0x95c>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4632      	mov	r2, r6
 80089fc:	4658      	mov	r0, fp
 80089fe:	f000 fc6f 	bl	80092e0 <__lshift>
 8008a02:	4605      	mov	r5, r0
 8008a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d05a      	beq.n	8008ac0 <_dtoa_r+0xa18>
 8008a0a:	6869      	ldr	r1, [r5, #4]
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fa0f 	bl	8008e30 <_Balloc>
 8008a12:	4606      	mov	r6, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <_dtoa_r+0x97a>
 8008a16:	4b84      	ldr	r3, [pc, #528]	@ (8008c28 <_dtoa_r+0xb80>)
 8008a18:	4602      	mov	r2, r0
 8008a1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a1e:	f7ff bb5a 	b.w	80080d6 <_dtoa_r+0x2e>
 8008a22:	692a      	ldr	r2, [r5, #16]
 8008a24:	3202      	adds	r2, #2
 8008a26:	0092      	lsls	r2, r2, #2
 8008a28:	f105 010c 	add.w	r1, r5, #12
 8008a2c:	300c      	adds	r0, #12
 8008a2e:	f001 ff75 	bl	800a91c <memcpy>
 8008a32:	2201      	movs	r2, #1
 8008a34:	4631      	mov	r1, r6
 8008a36:	4658      	mov	r0, fp
 8008a38:	f000 fc52 	bl	80092e0 <__lshift>
 8008a3c:	f10a 0301 	add.w	r3, sl, #1
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	9b00      	ldr	r3, [sp, #0]
 8008a44:	4453      	add	r3, sl
 8008a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a48:	9b02      	ldr	r3, [sp, #8]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	462f      	mov	r7, r5
 8008a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a52:	4605      	mov	r5, r0
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	4621      	mov	r1, r4
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	4648      	mov	r0, r9
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	f7ff fa9b 	bl	8007f98 <quorem>
 8008a62:	4639      	mov	r1, r7
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a6a:	4648      	mov	r0, r9
 8008a6c:	f000 fca4 	bl	80093b8 <__mcmp>
 8008a70:	462a      	mov	r2, r5
 8008a72:	9008      	str	r0, [sp, #32]
 8008a74:	4621      	mov	r1, r4
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 fcba 	bl	80093f0 <__mdiff>
 8008a7c:	68c2      	ldr	r2, [r0, #12]
 8008a7e:	4606      	mov	r6, r0
 8008a80:	bb02      	cbnz	r2, 8008ac4 <_dtoa_r+0xa1c>
 8008a82:	4601      	mov	r1, r0
 8008a84:	4648      	mov	r0, r9
 8008a86:	f000 fc97 	bl	80093b8 <__mcmp>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4658      	mov	r0, fp
 8008a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a92:	f000 fa0d 	bl	8008eb0 <_Bfree>
 8008a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a9a:	9e07      	ldr	r6, [sp, #28]
 8008a9c:	ea43 0102 	orr.w	r1, r3, r2
 8008aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa2:	4319      	orrs	r1, r3
 8008aa4:	d110      	bne.n	8008ac8 <_dtoa_r+0xa20>
 8008aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aaa:	d029      	beq.n	8008b00 <_dtoa_r+0xa58>
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd02      	ble.n	8008ab8 <_dtoa_r+0xa10>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	f883 8000 	strb.w	r8, [r3]
 8008abe:	e63f      	b.n	8008740 <_dtoa_r+0x698>
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e7bb      	b.n	8008a3c <_dtoa_r+0x994>
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	e7e1      	b.n	8008a8c <_dtoa_r+0x9e4>
 8008ac8:	9b08      	ldr	r3, [sp, #32]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	db04      	blt.n	8008ad8 <_dtoa_r+0xa30>
 8008ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	d120      	bne.n	8008b1a <_dtoa_r+0xa72>
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	dded      	ble.n	8008ab8 <_dtoa_r+0xa10>
 8008adc:	4649      	mov	r1, r9
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4658      	mov	r0, fp
 8008ae2:	f000 fbfd 	bl	80092e0 <__lshift>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4681      	mov	r9, r0
 8008aea:	f000 fc65 	bl	80093b8 <__mcmp>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	dc03      	bgt.n	8008afa <_dtoa_r+0xa52>
 8008af2:	d1e1      	bne.n	8008ab8 <_dtoa_r+0xa10>
 8008af4:	f018 0f01 	tst.w	r8, #1
 8008af8:	d0de      	beq.n	8008ab8 <_dtoa_r+0xa10>
 8008afa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008afe:	d1d8      	bne.n	8008ab2 <_dtoa_r+0xa0a>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	2339      	movs	r3, #57	@ 0x39
 8008b04:	7013      	strb	r3, [r2, #0]
 8008b06:	4633      	mov	r3, r6
 8008b08:	461e      	mov	r6, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b10:	2a39      	cmp	r2, #57	@ 0x39
 8008b12:	d052      	beq.n	8008bba <_dtoa_r+0xb12>
 8008b14:	3201      	adds	r2, #1
 8008b16:	701a      	strb	r2, [r3, #0]
 8008b18:	e612      	b.n	8008740 <_dtoa_r+0x698>
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	dd07      	ble.n	8008b2e <_dtoa_r+0xa86>
 8008b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b22:	d0ed      	beq.n	8008b00 <_dtoa_r+0xa58>
 8008b24:	9a00      	ldr	r2, [sp, #0]
 8008b26:	f108 0301 	add.w	r3, r8, #1
 8008b2a:	7013      	strb	r3, [r2, #0]
 8008b2c:	e608      	b.n	8008740 <_dtoa_r+0x698>
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	9a07      	ldr	r2, [sp, #28]
 8008b32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d028      	beq.n	8008b8e <_dtoa_r+0xae6>
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	2300      	movs	r3, #0
 8008b40:	220a      	movs	r2, #10
 8008b42:	4658      	mov	r0, fp
 8008b44:	f000 f9d6 	bl	8008ef4 <__multadd>
 8008b48:	42af      	cmp	r7, r5
 8008b4a:	4681      	mov	r9, r0
 8008b4c:	f04f 0300 	mov.w	r3, #0
 8008b50:	f04f 020a 	mov.w	r2, #10
 8008b54:	4639      	mov	r1, r7
 8008b56:	4658      	mov	r0, fp
 8008b58:	d107      	bne.n	8008b6a <_dtoa_r+0xac2>
 8008b5a:	f000 f9cb 	bl	8008ef4 <__multadd>
 8008b5e:	4607      	mov	r7, r0
 8008b60:	4605      	mov	r5, r0
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	3301      	adds	r3, #1
 8008b66:	9307      	str	r3, [sp, #28]
 8008b68:	e774      	b.n	8008a54 <_dtoa_r+0x9ac>
 8008b6a:	f000 f9c3 	bl	8008ef4 <__multadd>
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4607      	mov	r7, r0
 8008b72:	2300      	movs	r3, #0
 8008b74:	220a      	movs	r2, #10
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 f9bc 	bl	8008ef4 <__multadd>
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	e7f0      	b.n	8008b62 <_dtoa_r+0xaba>
 8008b80:	9b00      	ldr	r3, [sp, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	bfcc      	ite	gt
 8008b86:	461e      	movgt	r6, r3
 8008b88:	2601      	movle	r6, #1
 8008b8a:	4456      	add	r6, sl
 8008b8c:	2700      	movs	r7, #0
 8008b8e:	4649      	mov	r1, r9
 8008b90:	2201      	movs	r2, #1
 8008b92:	4658      	mov	r0, fp
 8008b94:	f000 fba4 	bl	80092e0 <__lshift>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4681      	mov	r9, r0
 8008b9c:	f000 fc0c 	bl	80093b8 <__mcmp>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	dcb0      	bgt.n	8008b06 <_dtoa_r+0xa5e>
 8008ba4:	d102      	bne.n	8008bac <_dtoa_r+0xb04>
 8008ba6:	f018 0f01 	tst.w	r8, #1
 8008baa:	d1ac      	bne.n	8008b06 <_dtoa_r+0xa5e>
 8008bac:	4633      	mov	r3, r6
 8008bae:	461e      	mov	r6, r3
 8008bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bb4:	2a30      	cmp	r2, #48	@ 0x30
 8008bb6:	d0fa      	beq.n	8008bae <_dtoa_r+0xb06>
 8008bb8:	e5c2      	b.n	8008740 <_dtoa_r+0x698>
 8008bba:	459a      	cmp	sl, r3
 8008bbc:	d1a4      	bne.n	8008b08 <_dtoa_r+0xa60>
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	2331      	movs	r3, #49	@ 0x31
 8008bc6:	f88a 3000 	strb.w	r3, [sl]
 8008bca:	e5b9      	b.n	8008740 <_dtoa_r+0x698>
 8008bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c2c <_dtoa_r+0xb84>
 8008bd2:	b11b      	cbz	r3, 8008bdc <_dtoa_r+0xb34>
 8008bd4:	f10a 0308 	add.w	r3, sl, #8
 8008bd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	4650      	mov	r0, sl
 8008bde:	b019      	add	sp, #100	@ 0x64
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	f77f ae37 	ble.w	800885a <_dtoa_r+0x7b2>
 8008bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	e655      	b.n	80088a0 <_dtoa_r+0x7f8>
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f77f aed6 	ble.w	80089a8 <_dtoa_r+0x900>
 8008bfc:	4656      	mov	r6, sl
 8008bfe:	4621      	mov	r1, r4
 8008c00:	4648      	mov	r0, r9
 8008c02:	f7ff f9c9 	bl	8007f98 <quorem>
 8008c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c0a:	f806 8b01 	strb.w	r8, [r6], #1
 8008c0e:	9b00      	ldr	r3, [sp, #0]
 8008c10:	eba6 020a 	sub.w	r2, r6, sl
 8008c14:	4293      	cmp	r3, r2
 8008c16:	ddb3      	ble.n	8008b80 <_dtoa_r+0xad8>
 8008c18:	4649      	mov	r1, r9
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4658      	mov	r0, fp
 8008c20:	f000 f968 	bl	8008ef4 <__multadd>
 8008c24:	4681      	mov	r9, r0
 8008c26:	e7ea      	b.n	8008bfe <_dtoa_r+0xb56>
 8008c28:	0800b891 	.word	0x0800b891
 8008c2c:	0800b815 	.word	0x0800b815

08008c30 <_free_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	2900      	cmp	r1, #0
 8008c36:	d041      	beq.n	8008cbc <_free_r+0x8c>
 8008c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3c:	1f0c      	subs	r4, r1, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfb8      	it	lt
 8008c42:	18e4      	addlt	r4, r4, r3
 8008c44:	f000 f8e8 	bl	8008e18 <__malloc_lock>
 8008c48:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc0 <_free_r+0x90>)
 8008c4a:	6813      	ldr	r3, [r2, #0]
 8008c4c:	b933      	cbnz	r3, 8008c5c <_free_r+0x2c>
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	6014      	str	r4, [r2, #0]
 8008c52:	4628      	mov	r0, r5
 8008c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c58:	f000 b8e4 	b.w	8008e24 <__malloc_unlock>
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d908      	bls.n	8008c72 <_free_r+0x42>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	1821      	adds	r1, r4, r0
 8008c64:	428b      	cmp	r3, r1
 8008c66:	bf01      	itttt	eq
 8008c68:	6819      	ldreq	r1, [r3, #0]
 8008c6a:	685b      	ldreq	r3, [r3, #4]
 8008c6c:	1809      	addeq	r1, r1, r0
 8008c6e:	6021      	streq	r1, [r4, #0]
 8008c70:	e7ed      	b.n	8008c4e <_free_r+0x1e>
 8008c72:	461a      	mov	r2, r3
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b10b      	cbz	r3, 8008c7c <_free_r+0x4c>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d9fa      	bls.n	8008c72 <_free_r+0x42>
 8008c7c:	6811      	ldr	r1, [r2, #0]
 8008c7e:	1850      	adds	r0, r2, r1
 8008c80:	42a0      	cmp	r0, r4
 8008c82:	d10b      	bne.n	8008c9c <_free_r+0x6c>
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	4401      	add	r1, r0
 8008c88:	1850      	adds	r0, r2, r1
 8008c8a:	4283      	cmp	r3, r0
 8008c8c:	6011      	str	r1, [r2, #0]
 8008c8e:	d1e0      	bne.n	8008c52 <_free_r+0x22>
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	6053      	str	r3, [r2, #4]
 8008c96:	4408      	add	r0, r1
 8008c98:	6010      	str	r0, [r2, #0]
 8008c9a:	e7da      	b.n	8008c52 <_free_r+0x22>
 8008c9c:	d902      	bls.n	8008ca4 <_free_r+0x74>
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	e7d6      	b.n	8008c52 <_free_r+0x22>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	1821      	adds	r1, r4, r0
 8008ca8:	428b      	cmp	r3, r1
 8008caa:	bf04      	itt	eq
 8008cac:	6819      	ldreq	r1, [r3, #0]
 8008cae:	685b      	ldreq	r3, [r3, #4]
 8008cb0:	6063      	str	r3, [r4, #4]
 8008cb2:	bf04      	itt	eq
 8008cb4:	1809      	addeq	r1, r1, r0
 8008cb6:	6021      	streq	r1, [r4, #0]
 8008cb8:	6054      	str	r4, [r2, #4]
 8008cba:	e7ca      	b.n	8008c52 <_free_r+0x22>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000734 	.word	0x20000734

08008cc4 <malloc>:
 8008cc4:	4b02      	ldr	r3, [pc, #8]	@ (8008cd0 <malloc+0xc>)
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	f000 b825 	b.w	8008d18 <_malloc_r>
 8008cce:	bf00      	nop
 8008cd0:	2000019c 	.word	0x2000019c

08008cd4 <sbrk_aligned>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008d14 <sbrk_aligned+0x40>)
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6831      	ldr	r1, [r6, #0]
 8008cdc:	4605      	mov	r5, r0
 8008cde:	b911      	cbnz	r1, 8008ce6 <sbrk_aligned+0x12>
 8008ce0:	f001 fe0c 	bl	800a8fc <_sbrk_r>
 8008ce4:	6030      	str	r0, [r6, #0]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f001 fe07 	bl	800a8fc <_sbrk_r>
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	d103      	bne.n	8008cfa <sbrk_aligned+0x26>
 8008cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
 8008cfa:	1cc4      	adds	r4, r0, #3
 8008cfc:	f024 0403 	bic.w	r4, r4, #3
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d0f8      	beq.n	8008cf6 <sbrk_aligned+0x22>
 8008d04:	1a21      	subs	r1, r4, r0
 8008d06:	4628      	mov	r0, r5
 8008d08:	f001 fdf8 	bl	800a8fc <_sbrk_r>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d1f2      	bne.n	8008cf6 <sbrk_aligned+0x22>
 8008d10:	e7ef      	b.n	8008cf2 <sbrk_aligned+0x1e>
 8008d12:	bf00      	nop
 8008d14:	20000730 	.word	0x20000730

08008d18 <_malloc_r>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	1ccd      	adds	r5, r1, #3
 8008d1e:	f025 0503 	bic.w	r5, r5, #3
 8008d22:	3508      	adds	r5, #8
 8008d24:	2d0c      	cmp	r5, #12
 8008d26:	bf38      	it	cc
 8008d28:	250c      	movcc	r5, #12
 8008d2a:	2d00      	cmp	r5, #0
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	db01      	blt.n	8008d34 <_malloc_r+0x1c>
 8008d30:	42a9      	cmp	r1, r5
 8008d32:	d904      	bls.n	8008d3e <_malloc_r+0x26>
 8008d34:	230c      	movs	r3, #12
 8008d36:	6033      	str	r3, [r6, #0]
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e14 <_malloc_r+0xfc>
 8008d42:	f000 f869 	bl	8008e18 <__malloc_lock>
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	461c      	mov	r4, r3
 8008d4c:	bb44      	cbnz	r4, 8008da0 <_malloc_r+0x88>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff ffbf 	bl	8008cd4 <sbrk_aligned>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	4604      	mov	r4, r0
 8008d5a:	d158      	bne.n	8008e0e <_malloc_r+0xf6>
 8008d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d60:	4627      	mov	r7, r4
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	d143      	bne.n	8008dee <_malloc_r+0xd6>
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d04b      	beq.n	8008e02 <_malloc_r+0xea>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4630      	mov	r0, r6
 8008d70:	eb04 0903 	add.w	r9, r4, r3
 8008d74:	f001 fdc2 	bl	800a8fc <_sbrk_r>
 8008d78:	4581      	cmp	r9, r0
 8008d7a:	d142      	bne.n	8008e02 <_malloc_r+0xea>
 8008d7c:	6821      	ldr	r1, [r4, #0]
 8008d7e:	1a6d      	subs	r5, r5, r1
 8008d80:	4629      	mov	r1, r5
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ffa6 	bl	8008cd4 <sbrk_aligned>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d03a      	beq.n	8008e02 <_malloc_r+0xea>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	442b      	add	r3, r5
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	f8d8 3000 	ldr.w	r3, [r8]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	bb62      	cbnz	r2, 8008df4 <_malloc_r+0xdc>
 8008d9a:	f8c8 7000 	str.w	r7, [r8]
 8008d9e:	e00f      	b.n	8008dc0 <_malloc_r+0xa8>
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	1b52      	subs	r2, r2, r5
 8008da4:	d420      	bmi.n	8008de8 <_malloc_r+0xd0>
 8008da6:	2a0b      	cmp	r2, #11
 8008da8:	d917      	bls.n	8008dda <_malloc_r+0xc2>
 8008daa:	1961      	adds	r1, r4, r5
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	6025      	str	r5, [r4, #0]
 8008db0:	bf18      	it	ne
 8008db2:	6059      	strne	r1, [r3, #4]
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	bf08      	it	eq
 8008db8:	f8c8 1000 	streq.w	r1, [r8]
 8008dbc:	5162      	str	r2, [r4, r5]
 8008dbe:	604b      	str	r3, [r1, #4]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f000 f82f 	bl	8008e24 <__malloc_unlock>
 8008dc6:	f104 000b 	add.w	r0, r4, #11
 8008dca:	1d23      	adds	r3, r4, #4
 8008dcc:	f020 0007 	bic.w	r0, r0, #7
 8008dd0:	1ac2      	subs	r2, r0, r3
 8008dd2:	bf1c      	itt	ne
 8008dd4:	1a1b      	subne	r3, r3, r0
 8008dd6:	50a3      	strne	r3, [r4, r2]
 8008dd8:	e7af      	b.n	8008d3a <_malloc_r+0x22>
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	bf0c      	ite	eq
 8008de0:	f8c8 2000 	streq.w	r2, [r8]
 8008de4:	605a      	strne	r2, [r3, #4]
 8008de6:	e7eb      	b.n	8008dc0 <_malloc_r+0xa8>
 8008de8:	4623      	mov	r3, r4
 8008dea:	6864      	ldr	r4, [r4, #4]
 8008dec:	e7ae      	b.n	8008d4c <_malloc_r+0x34>
 8008dee:	463c      	mov	r4, r7
 8008df0:	687f      	ldr	r7, [r7, #4]
 8008df2:	e7b6      	b.n	8008d62 <_malloc_r+0x4a>
 8008df4:	461a      	mov	r2, r3
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d1fb      	bne.n	8008df4 <_malloc_r+0xdc>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6053      	str	r3, [r2, #4]
 8008e00:	e7de      	b.n	8008dc0 <_malloc_r+0xa8>
 8008e02:	230c      	movs	r3, #12
 8008e04:	6033      	str	r3, [r6, #0]
 8008e06:	4630      	mov	r0, r6
 8008e08:	f000 f80c 	bl	8008e24 <__malloc_unlock>
 8008e0c:	e794      	b.n	8008d38 <_malloc_r+0x20>
 8008e0e:	6005      	str	r5, [r0, #0]
 8008e10:	e7d6      	b.n	8008dc0 <_malloc_r+0xa8>
 8008e12:	bf00      	nop
 8008e14:	20000734 	.word	0x20000734

08008e18 <__malloc_lock>:
 8008e18:	4801      	ldr	r0, [pc, #4]	@ (8008e20 <__malloc_lock+0x8>)
 8008e1a:	f7ff b8b4 	b.w	8007f86 <__retarget_lock_acquire_recursive>
 8008e1e:	bf00      	nop
 8008e20:	2000072c 	.word	0x2000072c

08008e24 <__malloc_unlock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	@ (8008e2c <__malloc_unlock+0x8>)
 8008e26:	f7ff b8af 	b.w	8007f88 <__retarget_lock_release_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	2000072c 	.word	0x2000072c

08008e30 <_Balloc>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	69c6      	ldr	r6, [r0, #28]
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	b976      	cbnz	r6, 8008e58 <_Balloc+0x28>
 8008e3a:	2010      	movs	r0, #16
 8008e3c:	f7ff ff42 	bl	8008cc4 <malloc>
 8008e40:	4602      	mov	r2, r0
 8008e42:	61e0      	str	r0, [r4, #28]
 8008e44:	b920      	cbnz	r0, 8008e50 <_Balloc+0x20>
 8008e46:	4b18      	ldr	r3, [pc, #96]	@ (8008ea8 <_Balloc+0x78>)
 8008e48:	4818      	ldr	r0, [pc, #96]	@ (8008eac <_Balloc+0x7c>)
 8008e4a:	216b      	movs	r1, #107	@ 0x6b
 8008e4c:	f001 fd7c 	bl	800a948 <__assert_func>
 8008e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e54:	6006      	str	r6, [r0, #0]
 8008e56:	60c6      	str	r6, [r0, #12]
 8008e58:	69e6      	ldr	r6, [r4, #28]
 8008e5a:	68f3      	ldr	r3, [r6, #12]
 8008e5c:	b183      	cbz	r3, 8008e80 <_Balloc+0x50>
 8008e5e:	69e3      	ldr	r3, [r4, #28]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e66:	b9b8      	cbnz	r0, 8008e98 <_Balloc+0x68>
 8008e68:	2101      	movs	r1, #1
 8008e6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e6e:	1d72      	adds	r2, r6, #5
 8008e70:	0092      	lsls	r2, r2, #2
 8008e72:	4620      	mov	r0, r4
 8008e74:	f001 fd86 	bl	800a984 <_calloc_r>
 8008e78:	b160      	cbz	r0, 8008e94 <_Balloc+0x64>
 8008e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e7e:	e00e      	b.n	8008e9e <_Balloc+0x6e>
 8008e80:	2221      	movs	r2, #33	@ 0x21
 8008e82:	2104      	movs	r1, #4
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 fd7d 	bl	800a984 <_calloc_r>
 8008e8a:	69e3      	ldr	r3, [r4, #28]
 8008e8c:	60f0      	str	r0, [r6, #12]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e4      	bne.n	8008e5e <_Balloc+0x2e>
 8008e94:	2000      	movs	r0, #0
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	6802      	ldr	r2, [r0, #0]
 8008e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ea4:	e7f7      	b.n	8008e96 <_Balloc+0x66>
 8008ea6:	bf00      	nop
 8008ea8:	0800b822 	.word	0x0800b822
 8008eac:	0800b8a2 	.word	0x0800b8a2

08008eb0 <_Bfree>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	69c6      	ldr	r6, [r0, #28]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b976      	cbnz	r6, 8008ed8 <_Bfree+0x28>
 8008eba:	2010      	movs	r0, #16
 8008ebc:	f7ff ff02 	bl	8008cc4 <malloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	61e8      	str	r0, [r5, #28]
 8008ec4:	b920      	cbnz	r0, 8008ed0 <_Bfree+0x20>
 8008ec6:	4b09      	ldr	r3, [pc, #36]	@ (8008eec <_Bfree+0x3c>)
 8008ec8:	4809      	ldr	r0, [pc, #36]	@ (8008ef0 <_Bfree+0x40>)
 8008eca:	218f      	movs	r1, #143	@ 0x8f
 8008ecc:	f001 fd3c 	bl	800a948 <__assert_func>
 8008ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed4:	6006      	str	r6, [r0, #0]
 8008ed6:	60c6      	str	r6, [r0, #12]
 8008ed8:	b13c      	cbz	r4, 8008eea <_Bfree+0x3a>
 8008eda:	69eb      	ldr	r3, [r5, #28]
 8008edc:	6862      	ldr	r2, [r4, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee4:	6021      	str	r1, [r4, #0]
 8008ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	0800b822 	.word	0x0800b822
 8008ef0:	0800b8a2 	.word	0x0800b8a2

08008ef4 <__multadd>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	690d      	ldr	r5, [r1, #16]
 8008efa:	4607      	mov	r7, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	461e      	mov	r6, r3
 8008f00:	f101 0c14 	add.w	ip, r1, #20
 8008f04:	2000      	movs	r0, #0
 8008f06:	f8dc 3000 	ldr.w	r3, [ip]
 8008f0a:	b299      	uxth	r1, r3
 8008f0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f10:	0c1e      	lsrs	r6, r3, #16
 8008f12:	0c0b      	lsrs	r3, r1, #16
 8008f14:	fb02 3306 	mla	r3, r2, r6, r3
 8008f18:	b289      	uxth	r1, r1
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f20:	4285      	cmp	r5, r0
 8008f22:	f84c 1b04 	str.w	r1, [ip], #4
 8008f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f2a:	dcec      	bgt.n	8008f06 <__multadd+0x12>
 8008f2c:	b30e      	cbz	r6, 8008f72 <__multadd+0x7e>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc19      	bgt.n	8008f68 <__multadd+0x74>
 8008f34:	6861      	ldr	r1, [r4, #4]
 8008f36:	4638      	mov	r0, r7
 8008f38:	3101      	adds	r1, #1
 8008f3a:	f7ff ff79 	bl	8008e30 <_Balloc>
 8008f3e:	4680      	mov	r8, r0
 8008f40:	b928      	cbnz	r0, 8008f4e <__multadd+0x5a>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <__multadd+0x84>)
 8008f46:	480d      	ldr	r0, [pc, #52]	@ (8008f7c <__multadd+0x88>)
 8008f48:	21ba      	movs	r1, #186	@ 0xba
 8008f4a:	f001 fcfd 	bl	800a948 <__assert_func>
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	3202      	adds	r2, #2
 8008f52:	f104 010c 	add.w	r1, r4, #12
 8008f56:	0092      	lsls	r2, r2, #2
 8008f58:	300c      	adds	r0, #12
 8008f5a:	f001 fcdf 	bl	800a91c <memcpy>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7ff ffa5 	bl	8008eb0 <_Bfree>
 8008f66:	4644      	mov	r4, r8
 8008f68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	615e      	str	r6, [r3, #20]
 8008f70:	6125      	str	r5, [r4, #16]
 8008f72:	4620      	mov	r0, r4
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	0800b891 	.word	0x0800b891
 8008f7c:	0800b8a2 	.word	0x0800b8a2

08008f80 <__s2b>:
 8008f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	4615      	mov	r5, r2
 8008f88:	461f      	mov	r7, r3
 8008f8a:	2209      	movs	r2, #9
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	4606      	mov	r6, r0
 8008f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f94:	2100      	movs	r1, #0
 8008f96:	2201      	movs	r2, #1
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	db09      	blt.n	8008fb0 <__s2b+0x30>
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff ff47 	bl	8008e30 <_Balloc>
 8008fa2:	b940      	cbnz	r0, 8008fb6 <__s2b+0x36>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	4b19      	ldr	r3, [pc, #100]	@ (800900c <__s2b+0x8c>)
 8008fa8:	4819      	ldr	r0, [pc, #100]	@ (8009010 <__s2b+0x90>)
 8008faa:	21d3      	movs	r1, #211	@ 0xd3
 8008fac:	f001 fccc 	bl	800a948 <__assert_func>
 8008fb0:	0052      	lsls	r2, r2, #1
 8008fb2:	3101      	adds	r1, #1
 8008fb4:	e7f0      	b.n	8008f98 <__s2b+0x18>
 8008fb6:	9b08      	ldr	r3, [sp, #32]
 8008fb8:	6143      	str	r3, [r0, #20]
 8008fba:	2d09      	cmp	r5, #9
 8008fbc:	f04f 0301 	mov.w	r3, #1
 8008fc0:	6103      	str	r3, [r0, #16]
 8008fc2:	dd16      	ble.n	8008ff2 <__s2b+0x72>
 8008fc4:	f104 0909 	add.w	r9, r4, #9
 8008fc8:	46c8      	mov	r8, r9
 8008fca:	442c      	add	r4, r5
 8008fcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	3b30      	subs	r3, #48	@ 0x30
 8008fd4:	220a      	movs	r2, #10
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff ff8c 	bl	8008ef4 <__multadd>
 8008fdc:	45a0      	cmp	r8, r4
 8008fde:	d1f5      	bne.n	8008fcc <__s2b+0x4c>
 8008fe0:	f1a5 0408 	sub.w	r4, r5, #8
 8008fe4:	444c      	add	r4, r9
 8008fe6:	1b2d      	subs	r5, r5, r4
 8008fe8:	1963      	adds	r3, r4, r5
 8008fea:	42bb      	cmp	r3, r7
 8008fec:	db04      	blt.n	8008ff8 <__s2b+0x78>
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	340a      	adds	r4, #10
 8008ff4:	2509      	movs	r5, #9
 8008ff6:	e7f6      	b.n	8008fe6 <__s2b+0x66>
 8008ff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	3b30      	subs	r3, #48	@ 0x30
 8009000:	220a      	movs	r2, #10
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff ff76 	bl	8008ef4 <__multadd>
 8009008:	e7ee      	b.n	8008fe8 <__s2b+0x68>
 800900a:	bf00      	nop
 800900c:	0800b891 	.word	0x0800b891
 8009010:	0800b8a2 	.word	0x0800b8a2

08009014 <__hi0bits>:
 8009014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009018:	4603      	mov	r3, r0
 800901a:	bf36      	itet	cc
 800901c:	0403      	lslcc	r3, r0, #16
 800901e:	2000      	movcs	r0, #0
 8009020:	2010      	movcc	r0, #16
 8009022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009026:	bf3c      	itt	cc
 8009028:	021b      	lslcc	r3, r3, #8
 800902a:	3008      	addcc	r0, #8
 800902c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009030:	bf3c      	itt	cc
 8009032:	011b      	lslcc	r3, r3, #4
 8009034:	3004      	addcc	r0, #4
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903a:	bf3c      	itt	cc
 800903c:	009b      	lslcc	r3, r3, #2
 800903e:	3002      	addcc	r0, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	db05      	blt.n	8009050 <__hi0bits+0x3c>
 8009044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009048:	f100 0001 	add.w	r0, r0, #1
 800904c:	bf08      	it	eq
 800904e:	2020      	moveq	r0, #32
 8009050:	4770      	bx	lr

08009052 <__lo0bits>:
 8009052:	6803      	ldr	r3, [r0, #0]
 8009054:	4602      	mov	r2, r0
 8009056:	f013 0007 	ands.w	r0, r3, #7
 800905a:	d00b      	beq.n	8009074 <__lo0bits+0x22>
 800905c:	07d9      	lsls	r1, r3, #31
 800905e:	d421      	bmi.n	80090a4 <__lo0bits+0x52>
 8009060:	0798      	lsls	r0, r3, #30
 8009062:	bf49      	itett	mi
 8009064:	085b      	lsrmi	r3, r3, #1
 8009066:	089b      	lsrpl	r3, r3, #2
 8009068:	2001      	movmi	r0, #1
 800906a:	6013      	strmi	r3, [r2, #0]
 800906c:	bf5c      	itt	pl
 800906e:	6013      	strpl	r3, [r2, #0]
 8009070:	2002      	movpl	r0, #2
 8009072:	4770      	bx	lr
 8009074:	b299      	uxth	r1, r3
 8009076:	b909      	cbnz	r1, 800907c <__lo0bits+0x2a>
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	2010      	movs	r0, #16
 800907c:	b2d9      	uxtb	r1, r3
 800907e:	b909      	cbnz	r1, 8009084 <__lo0bits+0x32>
 8009080:	3008      	adds	r0, #8
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	0719      	lsls	r1, r3, #28
 8009086:	bf04      	itt	eq
 8009088:	091b      	lsreq	r3, r3, #4
 800908a:	3004      	addeq	r0, #4
 800908c:	0799      	lsls	r1, r3, #30
 800908e:	bf04      	itt	eq
 8009090:	089b      	lsreq	r3, r3, #2
 8009092:	3002      	addeq	r0, #2
 8009094:	07d9      	lsls	r1, r3, #31
 8009096:	d403      	bmi.n	80090a0 <__lo0bits+0x4e>
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	f100 0001 	add.w	r0, r0, #1
 800909e:	d003      	beq.n	80090a8 <__lo0bits+0x56>
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	4770      	bx	lr
 80090a4:	2000      	movs	r0, #0
 80090a6:	4770      	bx	lr
 80090a8:	2020      	movs	r0, #32
 80090aa:	4770      	bx	lr

080090ac <__i2b>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	460c      	mov	r4, r1
 80090b0:	2101      	movs	r1, #1
 80090b2:	f7ff febd 	bl	8008e30 <_Balloc>
 80090b6:	4602      	mov	r2, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__i2b+0x1a>
 80090ba:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <__i2b+0x24>)
 80090bc:	4805      	ldr	r0, [pc, #20]	@ (80090d4 <__i2b+0x28>)
 80090be:	f240 1145 	movw	r1, #325	@ 0x145
 80090c2:	f001 fc41 	bl	800a948 <__assert_func>
 80090c6:	2301      	movs	r3, #1
 80090c8:	6144      	str	r4, [r0, #20]
 80090ca:	6103      	str	r3, [r0, #16]
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	0800b891 	.word	0x0800b891
 80090d4:	0800b8a2 	.word	0x0800b8a2

080090d8 <__multiply>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4614      	mov	r4, r2
 80090de:	690a      	ldr	r2, [r1, #16]
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	bfa8      	it	ge
 80090e6:	4623      	movge	r3, r4
 80090e8:	460f      	mov	r7, r1
 80090ea:	bfa4      	itt	ge
 80090ec:	460c      	movge	r4, r1
 80090ee:	461f      	movge	r7, r3
 80090f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090f8:	68a3      	ldr	r3, [r4, #8]
 80090fa:	6861      	ldr	r1, [r4, #4]
 80090fc:	eb0a 0609 	add.w	r6, sl, r9
 8009100:	42b3      	cmp	r3, r6
 8009102:	b085      	sub	sp, #20
 8009104:	bfb8      	it	lt
 8009106:	3101      	addlt	r1, #1
 8009108:	f7ff fe92 	bl	8008e30 <_Balloc>
 800910c:	b930      	cbnz	r0, 800911c <__multiply+0x44>
 800910e:	4602      	mov	r2, r0
 8009110:	4b44      	ldr	r3, [pc, #272]	@ (8009224 <__multiply+0x14c>)
 8009112:	4845      	ldr	r0, [pc, #276]	@ (8009228 <__multiply+0x150>)
 8009114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009118:	f001 fc16 	bl	800a948 <__assert_func>
 800911c:	f100 0514 	add.w	r5, r0, #20
 8009120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009124:	462b      	mov	r3, r5
 8009126:	2200      	movs	r2, #0
 8009128:	4543      	cmp	r3, r8
 800912a:	d321      	bcc.n	8009170 <__multiply+0x98>
 800912c:	f107 0114 	add.w	r1, r7, #20
 8009130:	f104 0214 	add.w	r2, r4, #20
 8009134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800913c:	9302      	str	r3, [sp, #8]
 800913e:	1b13      	subs	r3, r2, r4
 8009140:	3b15      	subs	r3, #21
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	3304      	adds	r3, #4
 8009148:	f104 0715 	add.w	r7, r4, #21
 800914c:	42ba      	cmp	r2, r7
 800914e:	bf38      	it	cc
 8009150:	2304      	movcc	r3, #4
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	9103      	str	r1, [sp, #12]
 8009158:	428b      	cmp	r3, r1
 800915a:	d80c      	bhi.n	8009176 <__multiply+0x9e>
 800915c:	2e00      	cmp	r6, #0
 800915e:	dd03      	ble.n	8009168 <__multiply+0x90>
 8009160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009164:	2b00      	cmp	r3, #0
 8009166:	d05b      	beq.n	8009220 <__multiply+0x148>
 8009168:	6106      	str	r6, [r0, #16]
 800916a:	b005      	add	sp, #20
 800916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009170:	f843 2b04 	str.w	r2, [r3], #4
 8009174:	e7d8      	b.n	8009128 <__multiply+0x50>
 8009176:	f8b1 a000 	ldrh.w	sl, [r1]
 800917a:	f1ba 0f00 	cmp.w	sl, #0
 800917e:	d024      	beq.n	80091ca <__multiply+0xf2>
 8009180:	f104 0e14 	add.w	lr, r4, #20
 8009184:	46a9      	mov	r9, r5
 8009186:	f04f 0c00 	mov.w	ip, #0
 800918a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800918e:	f8d9 3000 	ldr.w	r3, [r9]
 8009192:	fa1f fb87 	uxth.w	fp, r7
 8009196:	b29b      	uxth	r3, r3
 8009198:	fb0a 330b 	mla	r3, sl, fp, r3
 800919c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091a0:	f8d9 7000 	ldr.w	r7, [r9]
 80091a4:	4463      	add	r3, ip
 80091a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80091ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091b8:	4572      	cmp	r2, lr
 80091ba:	f849 3b04 	str.w	r3, [r9], #4
 80091be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091c2:	d8e2      	bhi.n	800918a <__multiply+0xb2>
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	f845 c003 	str.w	ip, [r5, r3]
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091d0:	3104      	adds	r1, #4
 80091d2:	f1b9 0f00 	cmp.w	r9, #0
 80091d6:	d021      	beq.n	800921c <__multiply+0x144>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	f104 0c14 	add.w	ip, r4, #20
 80091de:	46ae      	mov	lr, r5
 80091e0:	f04f 0a00 	mov.w	sl, #0
 80091e4:	f8bc b000 	ldrh.w	fp, [ip]
 80091e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091ec:	fb09 770b 	mla	r7, r9, fp, r7
 80091f0:	4457      	add	r7, sl
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091f8:	f84e 3b04 	str.w	r3, [lr], #4
 80091fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009204:	f8be 3000 	ldrh.w	r3, [lr]
 8009208:	fb09 330a 	mla	r3, r9, sl, r3
 800920c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009210:	4562      	cmp	r2, ip
 8009212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009216:	d8e5      	bhi.n	80091e4 <__multiply+0x10c>
 8009218:	9f01      	ldr	r7, [sp, #4]
 800921a:	51eb      	str	r3, [r5, r7]
 800921c:	3504      	adds	r5, #4
 800921e:	e799      	b.n	8009154 <__multiply+0x7c>
 8009220:	3e01      	subs	r6, #1
 8009222:	e79b      	b.n	800915c <__multiply+0x84>
 8009224:	0800b891 	.word	0x0800b891
 8009228:	0800b8a2 	.word	0x0800b8a2

0800922c <__pow5mult>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4615      	mov	r5, r2
 8009232:	f012 0203 	ands.w	r2, r2, #3
 8009236:	4607      	mov	r7, r0
 8009238:	460e      	mov	r6, r1
 800923a:	d007      	beq.n	800924c <__pow5mult+0x20>
 800923c:	4c25      	ldr	r4, [pc, #148]	@ (80092d4 <__pow5mult+0xa8>)
 800923e:	3a01      	subs	r2, #1
 8009240:	2300      	movs	r3, #0
 8009242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009246:	f7ff fe55 	bl	8008ef4 <__multadd>
 800924a:	4606      	mov	r6, r0
 800924c:	10ad      	asrs	r5, r5, #2
 800924e:	d03d      	beq.n	80092cc <__pow5mult+0xa0>
 8009250:	69fc      	ldr	r4, [r7, #28]
 8009252:	b97c      	cbnz	r4, 8009274 <__pow5mult+0x48>
 8009254:	2010      	movs	r0, #16
 8009256:	f7ff fd35 	bl	8008cc4 <malloc>
 800925a:	4602      	mov	r2, r0
 800925c:	61f8      	str	r0, [r7, #28]
 800925e:	b928      	cbnz	r0, 800926c <__pow5mult+0x40>
 8009260:	4b1d      	ldr	r3, [pc, #116]	@ (80092d8 <__pow5mult+0xac>)
 8009262:	481e      	ldr	r0, [pc, #120]	@ (80092dc <__pow5mult+0xb0>)
 8009264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009268:	f001 fb6e 	bl	800a948 <__assert_func>
 800926c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009270:	6004      	str	r4, [r0, #0]
 8009272:	60c4      	str	r4, [r0, #12]
 8009274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800927c:	b94c      	cbnz	r4, 8009292 <__pow5mult+0x66>
 800927e:	f240 2171 	movw	r1, #625	@ 0x271
 8009282:	4638      	mov	r0, r7
 8009284:	f7ff ff12 	bl	80090ac <__i2b>
 8009288:	2300      	movs	r3, #0
 800928a:	f8c8 0008 	str.w	r0, [r8, #8]
 800928e:	4604      	mov	r4, r0
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	07eb      	lsls	r3, r5, #31
 8009298:	d50a      	bpl.n	80092b0 <__pow5mult+0x84>
 800929a:	4631      	mov	r1, r6
 800929c:	4622      	mov	r2, r4
 800929e:	4638      	mov	r0, r7
 80092a0:	f7ff ff1a 	bl	80090d8 <__multiply>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4680      	mov	r8, r0
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff fe01 	bl	8008eb0 <_Bfree>
 80092ae:	4646      	mov	r6, r8
 80092b0:	106d      	asrs	r5, r5, #1
 80092b2:	d00b      	beq.n	80092cc <__pow5mult+0xa0>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	b938      	cbnz	r0, 80092c8 <__pow5mult+0x9c>
 80092b8:	4622      	mov	r2, r4
 80092ba:	4621      	mov	r1, r4
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff ff0b 	bl	80090d8 <__multiply>
 80092c2:	6020      	str	r0, [r4, #0]
 80092c4:	f8c0 9000 	str.w	r9, [r0]
 80092c8:	4604      	mov	r4, r0
 80092ca:	e7e4      	b.n	8009296 <__pow5mult+0x6a>
 80092cc:	4630      	mov	r0, r6
 80092ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d2:	bf00      	nop
 80092d4:	0800b8fc 	.word	0x0800b8fc
 80092d8:	0800b822 	.word	0x0800b822
 80092dc:	0800b8a2 	.word	0x0800b8a2

080092e0 <__lshift>:
 80092e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	460c      	mov	r4, r1
 80092e6:	6849      	ldr	r1, [r1, #4]
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	4607      	mov	r7, r0
 80092f2:	4691      	mov	r9, r2
 80092f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092f8:	f108 0601 	add.w	r6, r8, #1
 80092fc:	42b3      	cmp	r3, r6
 80092fe:	db0b      	blt.n	8009318 <__lshift+0x38>
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff fd95 	bl	8008e30 <_Balloc>
 8009306:	4605      	mov	r5, r0
 8009308:	b948      	cbnz	r0, 800931e <__lshift+0x3e>
 800930a:	4602      	mov	r2, r0
 800930c:	4b28      	ldr	r3, [pc, #160]	@ (80093b0 <__lshift+0xd0>)
 800930e:	4829      	ldr	r0, [pc, #164]	@ (80093b4 <__lshift+0xd4>)
 8009310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009314:	f001 fb18 	bl	800a948 <__assert_func>
 8009318:	3101      	adds	r1, #1
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	e7ee      	b.n	80092fc <__lshift+0x1c>
 800931e:	2300      	movs	r3, #0
 8009320:	f100 0114 	add.w	r1, r0, #20
 8009324:	f100 0210 	add.w	r2, r0, #16
 8009328:	4618      	mov	r0, r3
 800932a:	4553      	cmp	r3, sl
 800932c:	db33      	blt.n	8009396 <__lshift+0xb6>
 800932e:	6920      	ldr	r0, [r4, #16]
 8009330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009334:	f104 0314 	add.w	r3, r4, #20
 8009338:	f019 091f 	ands.w	r9, r9, #31
 800933c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009344:	d02b      	beq.n	800939e <__lshift+0xbe>
 8009346:	f1c9 0e20 	rsb	lr, r9, #32
 800934a:	468a      	mov	sl, r1
 800934c:	2200      	movs	r2, #0
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	fa00 f009 	lsl.w	r0, r0, r9
 8009354:	4310      	orrs	r0, r2
 8009356:	f84a 0b04 	str.w	r0, [sl], #4
 800935a:	f853 2b04 	ldr.w	r2, [r3], #4
 800935e:	459c      	cmp	ip, r3
 8009360:	fa22 f20e 	lsr.w	r2, r2, lr
 8009364:	d8f3      	bhi.n	800934e <__lshift+0x6e>
 8009366:	ebac 0304 	sub.w	r3, ip, r4
 800936a:	3b15      	subs	r3, #21
 800936c:	f023 0303 	bic.w	r3, r3, #3
 8009370:	3304      	adds	r3, #4
 8009372:	f104 0015 	add.w	r0, r4, #21
 8009376:	4584      	cmp	ip, r0
 8009378:	bf38      	it	cc
 800937a:	2304      	movcc	r3, #4
 800937c:	50ca      	str	r2, [r1, r3]
 800937e:	b10a      	cbz	r2, 8009384 <__lshift+0xa4>
 8009380:	f108 0602 	add.w	r6, r8, #2
 8009384:	3e01      	subs	r6, #1
 8009386:	4638      	mov	r0, r7
 8009388:	612e      	str	r6, [r5, #16]
 800938a:	4621      	mov	r1, r4
 800938c:	f7ff fd90 	bl	8008eb0 <_Bfree>
 8009390:	4628      	mov	r0, r5
 8009392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009396:	f842 0f04 	str.w	r0, [r2, #4]!
 800939a:	3301      	adds	r3, #1
 800939c:	e7c5      	b.n	800932a <__lshift+0x4a>
 800939e:	3904      	subs	r1, #4
 80093a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80093a8:	459c      	cmp	ip, r3
 80093aa:	d8f9      	bhi.n	80093a0 <__lshift+0xc0>
 80093ac:	e7ea      	b.n	8009384 <__lshift+0xa4>
 80093ae:	bf00      	nop
 80093b0:	0800b891 	.word	0x0800b891
 80093b4:	0800b8a2 	.word	0x0800b8a2

080093b8 <__mcmp>:
 80093b8:	690a      	ldr	r2, [r1, #16]
 80093ba:	4603      	mov	r3, r0
 80093bc:	6900      	ldr	r0, [r0, #16]
 80093be:	1a80      	subs	r0, r0, r2
 80093c0:	b530      	push	{r4, r5, lr}
 80093c2:	d10e      	bne.n	80093e2 <__mcmp+0x2a>
 80093c4:	3314      	adds	r3, #20
 80093c6:	3114      	adds	r1, #20
 80093c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093d8:	4295      	cmp	r5, r2
 80093da:	d003      	beq.n	80093e4 <__mcmp+0x2c>
 80093dc:	d205      	bcs.n	80093ea <__mcmp+0x32>
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	bd30      	pop	{r4, r5, pc}
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d3f3      	bcc.n	80093d0 <__mcmp+0x18>
 80093e8:	e7fb      	b.n	80093e2 <__mcmp+0x2a>
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7f9      	b.n	80093e2 <__mcmp+0x2a>
	...

080093f0 <__mdiff>:
 80093f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	4689      	mov	r9, r1
 80093f6:	4606      	mov	r6, r0
 80093f8:	4611      	mov	r1, r2
 80093fa:	4648      	mov	r0, r9
 80093fc:	4614      	mov	r4, r2
 80093fe:	f7ff ffdb 	bl	80093b8 <__mcmp>
 8009402:	1e05      	subs	r5, r0, #0
 8009404:	d112      	bne.n	800942c <__mdiff+0x3c>
 8009406:	4629      	mov	r1, r5
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff fd11 	bl	8008e30 <_Balloc>
 800940e:	4602      	mov	r2, r0
 8009410:	b928      	cbnz	r0, 800941e <__mdiff+0x2e>
 8009412:	4b3f      	ldr	r3, [pc, #252]	@ (8009510 <__mdiff+0x120>)
 8009414:	f240 2137 	movw	r1, #567	@ 0x237
 8009418:	483e      	ldr	r0, [pc, #248]	@ (8009514 <__mdiff+0x124>)
 800941a:	f001 fa95 	bl	800a948 <__assert_func>
 800941e:	2301      	movs	r3, #1
 8009420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009424:	4610      	mov	r0, r2
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	bfbc      	itt	lt
 800942e:	464b      	movlt	r3, r9
 8009430:	46a1      	movlt	r9, r4
 8009432:	4630      	mov	r0, r6
 8009434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009438:	bfba      	itte	lt
 800943a:	461c      	movlt	r4, r3
 800943c:	2501      	movlt	r5, #1
 800943e:	2500      	movge	r5, #0
 8009440:	f7ff fcf6 	bl	8008e30 <_Balloc>
 8009444:	4602      	mov	r2, r0
 8009446:	b918      	cbnz	r0, 8009450 <__mdiff+0x60>
 8009448:	4b31      	ldr	r3, [pc, #196]	@ (8009510 <__mdiff+0x120>)
 800944a:	f240 2145 	movw	r1, #581	@ 0x245
 800944e:	e7e3      	b.n	8009418 <__mdiff+0x28>
 8009450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009454:	6926      	ldr	r6, [r4, #16]
 8009456:	60c5      	str	r5, [r0, #12]
 8009458:	f109 0310 	add.w	r3, r9, #16
 800945c:	f109 0514 	add.w	r5, r9, #20
 8009460:	f104 0e14 	add.w	lr, r4, #20
 8009464:	f100 0b14 	add.w	fp, r0, #20
 8009468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800946c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	46d9      	mov	r9, fp
 8009474:	f04f 0c00 	mov.w	ip, #0
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800947e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	fa1f f38a 	uxth.w	r3, sl
 8009488:	4619      	mov	r1, r3
 800948a:	b283      	uxth	r3, r0
 800948c:	1acb      	subs	r3, r1, r3
 800948e:	0c00      	lsrs	r0, r0, #16
 8009490:	4463      	add	r3, ip
 8009492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094a0:	4576      	cmp	r6, lr
 80094a2:	f849 3b04 	str.w	r3, [r9], #4
 80094a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094aa:	d8e5      	bhi.n	8009478 <__mdiff+0x88>
 80094ac:	1b33      	subs	r3, r6, r4
 80094ae:	3b15      	subs	r3, #21
 80094b0:	f023 0303 	bic.w	r3, r3, #3
 80094b4:	3415      	adds	r4, #21
 80094b6:	3304      	adds	r3, #4
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	bf38      	it	cc
 80094bc:	2304      	movcc	r3, #4
 80094be:	441d      	add	r5, r3
 80094c0:	445b      	add	r3, fp
 80094c2:	461e      	mov	r6, r3
 80094c4:	462c      	mov	r4, r5
 80094c6:	4544      	cmp	r4, r8
 80094c8:	d30e      	bcc.n	80094e8 <__mdiff+0xf8>
 80094ca:	f108 0103 	add.w	r1, r8, #3
 80094ce:	1b49      	subs	r1, r1, r5
 80094d0:	f021 0103 	bic.w	r1, r1, #3
 80094d4:	3d03      	subs	r5, #3
 80094d6:	45a8      	cmp	r8, r5
 80094d8:	bf38      	it	cc
 80094da:	2100      	movcc	r1, #0
 80094dc:	440b      	add	r3, r1
 80094de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094e2:	b191      	cbz	r1, 800950a <__mdiff+0x11a>
 80094e4:	6117      	str	r7, [r2, #16]
 80094e6:	e79d      	b.n	8009424 <__mdiff+0x34>
 80094e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80094ec:	46e6      	mov	lr, ip
 80094ee:	0c08      	lsrs	r0, r1, #16
 80094f0:	fa1c fc81 	uxtah	ip, ip, r1
 80094f4:	4471      	add	r1, lr
 80094f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094fa:	b289      	uxth	r1, r1
 80094fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009500:	f846 1b04 	str.w	r1, [r6], #4
 8009504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009508:	e7dd      	b.n	80094c6 <__mdiff+0xd6>
 800950a:	3f01      	subs	r7, #1
 800950c:	e7e7      	b.n	80094de <__mdiff+0xee>
 800950e:	bf00      	nop
 8009510:	0800b891 	.word	0x0800b891
 8009514:	0800b8a2 	.word	0x0800b8a2

08009518 <__ulp>:
 8009518:	b082      	sub	sp, #8
 800951a:	ed8d 0b00 	vstr	d0, [sp]
 800951e:	9a01      	ldr	r2, [sp, #4]
 8009520:	4b0f      	ldr	r3, [pc, #60]	@ (8009560 <__ulp+0x48>)
 8009522:	4013      	ands	r3, r2
 8009524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009528:	2b00      	cmp	r3, #0
 800952a:	dc08      	bgt.n	800953e <__ulp+0x26>
 800952c:	425b      	negs	r3, r3
 800952e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009532:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009536:	da04      	bge.n	8009542 <__ulp+0x2a>
 8009538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800953c:	4113      	asrs	r3, r2
 800953e:	2200      	movs	r2, #0
 8009540:	e008      	b.n	8009554 <__ulp+0x3c>
 8009542:	f1a2 0314 	sub.w	r3, r2, #20
 8009546:	2b1e      	cmp	r3, #30
 8009548:	bfda      	itte	le
 800954a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800954e:	40da      	lsrle	r2, r3
 8009550:	2201      	movgt	r2, #1
 8009552:	2300      	movs	r3, #0
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	ec41 0b10 	vmov	d0, r0, r1
 800955c:	b002      	add	sp, #8
 800955e:	4770      	bx	lr
 8009560:	7ff00000 	.word	0x7ff00000

08009564 <__b2d>:
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	6906      	ldr	r6, [r0, #16]
 800956a:	f100 0814 	add.w	r8, r0, #20
 800956e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009572:	1f37      	subs	r7, r6, #4
 8009574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009578:	4610      	mov	r0, r2
 800957a:	f7ff fd4b 	bl	8009014 <__hi0bits>
 800957e:	f1c0 0320 	rsb	r3, r0, #32
 8009582:	280a      	cmp	r0, #10
 8009584:	600b      	str	r3, [r1, #0]
 8009586:	491b      	ldr	r1, [pc, #108]	@ (80095f4 <__b2d+0x90>)
 8009588:	dc15      	bgt.n	80095b6 <__b2d+0x52>
 800958a:	f1c0 0c0b 	rsb	ip, r0, #11
 800958e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009592:	45b8      	cmp	r8, r7
 8009594:	ea43 0501 	orr.w	r5, r3, r1
 8009598:	bf34      	ite	cc
 800959a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800959e:	2300      	movcs	r3, #0
 80095a0:	3015      	adds	r0, #21
 80095a2:	fa02 f000 	lsl.w	r0, r2, r0
 80095a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80095aa:	4303      	orrs	r3, r0
 80095ac:	461c      	mov	r4, r3
 80095ae:	ec45 4b10 	vmov	d0, r4, r5
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b6:	45b8      	cmp	r8, r7
 80095b8:	bf3a      	itte	cc
 80095ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095be:	f1a6 0708 	subcc.w	r7, r6, #8
 80095c2:	2300      	movcs	r3, #0
 80095c4:	380b      	subs	r0, #11
 80095c6:	d012      	beq.n	80095ee <__b2d+0x8a>
 80095c8:	f1c0 0120 	rsb	r1, r0, #32
 80095cc:	fa23 f401 	lsr.w	r4, r3, r1
 80095d0:	4082      	lsls	r2, r0
 80095d2:	4322      	orrs	r2, r4
 80095d4:	4547      	cmp	r7, r8
 80095d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80095da:	bf8c      	ite	hi
 80095dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80095e0:	2200      	movls	r2, #0
 80095e2:	4083      	lsls	r3, r0
 80095e4:	40ca      	lsrs	r2, r1
 80095e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095ea:	4313      	orrs	r3, r2
 80095ec:	e7de      	b.n	80095ac <__b2d+0x48>
 80095ee:	ea42 0501 	orr.w	r5, r2, r1
 80095f2:	e7db      	b.n	80095ac <__b2d+0x48>
 80095f4:	3ff00000 	.word	0x3ff00000

080095f8 <__d2b>:
 80095f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	460f      	mov	r7, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	ec59 8b10 	vmov	r8, r9, d0
 8009604:	4616      	mov	r6, r2
 8009606:	f7ff fc13 	bl	8008e30 <_Balloc>
 800960a:	4604      	mov	r4, r0
 800960c:	b930      	cbnz	r0, 800961c <__d2b+0x24>
 800960e:	4602      	mov	r2, r0
 8009610:	4b23      	ldr	r3, [pc, #140]	@ (80096a0 <__d2b+0xa8>)
 8009612:	4824      	ldr	r0, [pc, #144]	@ (80096a4 <__d2b+0xac>)
 8009614:	f240 310f 	movw	r1, #783	@ 0x30f
 8009618:	f001 f996 	bl	800a948 <__assert_func>
 800961c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009624:	b10d      	cbz	r5, 800962a <__d2b+0x32>
 8009626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f1b8 0300 	subs.w	r3, r8, #0
 8009630:	d023      	beq.n	800967a <__d2b+0x82>
 8009632:	4668      	mov	r0, sp
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	f7ff fd0c 	bl	8009052 <__lo0bits>
 800963a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800963e:	b1d0      	cbz	r0, 8009676 <__d2b+0x7e>
 8009640:	f1c0 0320 	rsb	r3, r0, #32
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	430b      	orrs	r3, r1
 800964a:	40c2      	lsrs	r2, r0
 800964c:	6163      	str	r3, [r4, #20]
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	61a3      	str	r3, [r4, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	bf0c      	ite	eq
 8009658:	2201      	moveq	r2, #1
 800965a:	2202      	movne	r2, #2
 800965c:	6122      	str	r2, [r4, #16]
 800965e:	b1a5      	cbz	r5, 800968a <__d2b+0x92>
 8009660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009664:	4405      	add	r5, r0
 8009666:	603d      	str	r5, [r7, #0]
 8009668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4620      	mov	r0, r4
 8009670:	b003      	add	sp, #12
 8009672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009676:	6161      	str	r1, [r4, #20]
 8009678:	e7ea      	b.n	8009650 <__d2b+0x58>
 800967a:	a801      	add	r0, sp, #4
 800967c:	f7ff fce9 	bl	8009052 <__lo0bits>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	3020      	adds	r0, #32
 8009686:	2201      	movs	r2, #1
 8009688:	e7e8      	b.n	800965c <__d2b+0x64>
 800968a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800968e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009692:	6038      	str	r0, [r7, #0]
 8009694:	6918      	ldr	r0, [r3, #16]
 8009696:	f7ff fcbd 	bl	8009014 <__hi0bits>
 800969a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800969e:	e7e5      	b.n	800966c <__d2b+0x74>
 80096a0:	0800b891 	.word	0x0800b891
 80096a4:	0800b8a2 	.word	0x0800b8a2

080096a8 <__ratio>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	b085      	sub	sp, #20
 80096ae:	e9cd 1000 	strd	r1, r0, [sp]
 80096b2:	a902      	add	r1, sp, #8
 80096b4:	f7ff ff56 	bl	8009564 <__b2d>
 80096b8:	9800      	ldr	r0, [sp, #0]
 80096ba:	a903      	add	r1, sp, #12
 80096bc:	ec55 4b10 	vmov	r4, r5, d0
 80096c0:	f7ff ff50 	bl	8009564 <__b2d>
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	6919      	ldr	r1, [r3, #16]
 80096c8:	9b00      	ldr	r3, [sp, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	1ac9      	subs	r1, r1, r3
 80096ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	ec5b ab10 	vmov	sl, fp, d0
 80096d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bfce      	itee	gt
 80096e0:	462a      	movgt	r2, r5
 80096e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096e6:	465a      	movle	r2, fp
 80096e8:	462f      	mov	r7, r5
 80096ea:	46d9      	mov	r9, fp
 80096ec:	bfcc      	ite	gt
 80096ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096f6:	464b      	mov	r3, r9
 80096f8:	4652      	mov	r2, sl
 80096fa:	4620      	mov	r0, r4
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f7 f8d5 	bl	80008ac <__aeabi_ddiv>
 8009702:	ec41 0b10 	vmov	d0, r0, r1
 8009706:	b005      	add	sp, #20
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800970c <__copybits>:
 800970c:	3901      	subs	r1, #1
 800970e:	b570      	push	{r4, r5, r6, lr}
 8009710:	1149      	asrs	r1, r1, #5
 8009712:	6914      	ldr	r4, [r2, #16]
 8009714:	3101      	adds	r1, #1
 8009716:	f102 0314 	add.w	r3, r2, #20
 800971a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800971e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009722:	1f05      	subs	r5, r0, #4
 8009724:	42a3      	cmp	r3, r4
 8009726:	d30c      	bcc.n	8009742 <__copybits+0x36>
 8009728:	1aa3      	subs	r3, r4, r2
 800972a:	3b11      	subs	r3, #17
 800972c:	f023 0303 	bic.w	r3, r3, #3
 8009730:	3211      	adds	r2, #17
 8009732:	42a2      	cmp	r2, r4
 8009734:	bf88      	it	hi
 8009736:	2300      	movhi	r3, #0
 8009738:	4418      	add	r0, r3
 800973a:	2300      	movs	r3, #0
 800973c:	4288      	cmp	r0, r1
 800973e:	d305      	bcc.n	800974c <__copybits+0x40>
 8009740:	bd70      	pop	{r4, r5, r6, pc}
 8009742:	f853 6b04 	ldr.w	r6, [r3], #4
 8009746:	f845 6f04 	str.w	r6, [r5, #4]!
 800974a:	e7eb      	b.n	8009724 <__copybits+0x18>
 800974c:	f840 3b04 	str.w	r3, [r0], #4
 8009750:	e7f4      	b.n	800973c <__copybits+0x30>

08009752 <__any_on>:
 8009752:	f100 0214 	add.w	r2, r0, #20
 8009756:	6900      	ldr	r0, [r0, #16]
 8009758:	114b      	asrs	r3, r1, #5
 800975a:	4298      	cmp	r0, r3
 800975c:	b510      	push	{r4, lr}
 800975e:	db11      	blt.n	8009784 <__any_on+0x32>
 8009760:	dd0a      	ble.n	8009778 <__any_on+0x26>
 8009762:	f011 011f 	ands.w	r1, r1, #31
 8009766:	d007      	beq.n	8009778 <__any_on+0x26>
 8009768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800976c:	fa24 f001 	lsr.w	r0, r4, r1
 8009770:	fa00 f101 	lsl.w	r1, r0, r1
 8009774:	428c      	cmp	r4, r1
 8009776:	d10b      	bne.n	8009790 <__any_on+0x3e>
 8009778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800977c:	4293      	cmp	r3, r2
 800977e:	d803      	bhi.n	8009788 <__any_on+0x36>
 8009780:	2000      	movs	r0, #0
 8009782:	bd10      	pop	{r4, pc}
 8009784:	4603      	mov	r3, r0
 8009786:	e7f7      	b.n	8009778 <__any_on+0x26>
 8009788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800978c:	2900      	cmp	r1, #0
 800978e:	d0f5      	beq.n	800977c <__any_on+0x2a>
 8009790:	2001      	movs	r0, #1
 8009792:	e7f6      	b.n	8009782 <__any_on+0x30>

08009794 <sulp>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	ec45 4b10 	vmov	d0, r4, r5
 800979e:	4616      	mov	r6, r2
 80097a0:	f7ff feba 	bl	8009518 <__ulp>
 80097a4:	ec51 0b10 	vmov	r0, r1, d0
 80097a8:	b17e      	cbz	r6, 80097ca <sulp+0x36>
 80097aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dd09      	ble.n	80097ca <sulp+0x36>
 80097b6:	051b      	lsls	r3, r3, #20
 80097b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80097bc:	2400      	movs	r4, #0
 80097be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 ff47 	bl	8000658 <__aeabi_dmul>
 80097ca:	ec41 0b10 	vmov	d0, r0, r1
 80097ce:	bd70      	pop	{r4, r5, r6, pc}

080097d0 <_strtod_l>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	b09f      	sub	sp, #124	@ 0x7c
 80097d6:	460c      	mov	r4, r1
 80097d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80097da:	2200      	movs	r2, #0
 80097dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80097de:	9005      	str	r0, [sp, #20]
 80097e0:	f04f 0a00 	mov.w	sl, #0
 80097e4:	f04f 0b00 	mov.w	fp, #0
 80097e8:	460a      	mov	r2, r1
 80097ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ec:	7811      	ldrb	r1, [r2, #0]
 80097ee:	292b      	cmp	r1, #43	@ 0x2b
 80097f0:	d04a      	beq.n	8009888 <_strtod_l+0xb8>
 80097f2:	d838      	bhi.n	8009866 <_strtod_l+0x96>
 80097f4:	290d      	cmp	r1, #13
 80097f6:	d832      	bhi.n	800985e <_strtod_l+0x8e>
 80097f8:	2908      	cmp	r1, #8
 80097fa:	d832      	bhi.n	8009862 <_strtod_l+0x92>
 80097fc:	2900      	cmp	r1, #0
 80097fe:	d03b      	beq.n	8009878 <_strtod_l+0xa8>
 8009800:	2200      	movs	r2, #0
 8009802:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009806:	782a      	ldrb	r2, [r5, #0]
 8009808:	2a30      	cmp	r2, #48	@ 0x30
 800980a:	f040 80b3 	bne.w	8009974 <_strtod_l+0x1a4>
 800980e:	786a      	ldrb	r2, [r5, #1]
 8009810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009814:	2a58      	cmp	r2, #88	@ 0x58
 8009816:	d16e      	bne.n	80098f6 <_strtod_l+0x126>
 8009818:	9302      	str	r3, [sp, #8]
 800981a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	4a8e      	ldr	r2, [pc, #568]	@ (8009a5c <_strtod_l+0x28c>)
 8009824:	9805      	ldr	r0, [sp, #20]
 8009826:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009828:	a919      	add	r1, sp, #100	@ 0x64
 800982a:	f001 f927 	bl	800aa7c <__gethex>
 800982e:	f010 060f 	ands.w	r6, r0, #15
 8009832:	4604      	mov	r4, r0
 8009834:	d005      	beq.n	8009842 <_strtod_l+0x72>
 8009836:	2e06      	cmp	r6, #6
 8009838:	d128      	bne.n	800988c <_strtod_l+0xbc>
 800983a:	3501      	adds	r5, #1
 800983c:	2300      	movs	r3, #0
 800983e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 858e 	bne.w	800a366 <_strtod_l+0xb96>
 800984a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800984c:	b1cb      	cbz	r3, 8009882 <_strtod_l+0xb2>
 800984e:	4652      	mov	r2, sl
 8009850:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009854:	ec43 2b10 	vmov	d0, r2, r3
 8009858:	b01f      	add	sp, #124	@ 0x7c
 800985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985e:	2920      	cmp	r1, #32
 8009860:	d1ce      	bne.n	8009800 <_strtod_l+0x30>
 8009862:	3201      	adds	r2, #1
 8009864:	e7c1      	b.n	80097ea <_strtod_l+0x1a>
 8009866:	292d      	cmp	r1, #45	@ 0x2d
 8009868:	d1ca      	bne.n	8009800 <_strtod_l+0x30>
 800986a:	2101      	movs	r1, #1
 800986c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800986e:	1c51      	adds	r1, r2, #1
 8009870:	9119      	str	r1, [sp, #100]	@ 0x64
 8009872:	7852      	ldrb	r2, [r2, #1]
 8009874:	2a00      	cmp	r2, #0
 8009876:	d1c5      	bne.n	8009804 <_strtod_l+0x34>
 8009878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800987a:	9419      	str	r4, [sp, #100]	@ 0x64
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 8570 	bne.w	800a362 <_strtod_l+0xb92>
 8009882:	4652      	mov	r2, sl
 8009884:	465b      	mov	r3, fp
 8009886:	e7e5      	b.n	8009854 <_strtod_l+0x84>
 8009888:	2100      	movs	r1, #0
 800988a:	e7ef      	b.n	800986c <_strtod_l+0x9c>
 800988c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800988e:	b13a      	cbz	r2, 80098a0 <_strtod_l+0xd0>
 8009890:	2135      	movs	r1, #53	@ 0x35
 8009892:	a81c      	add	r0, sp, #112	@ 0x70
 8009894:	f7ff ff3a 	bl	800970c <__copybits>
 8009898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800989a:	9805      	ldr	r0, [sp, #20]
 800989c:	f7ff fb08 	bl	8008eb0 <_Bfree>
 80098a0:	3e01      	subs	r6, #1
 80098a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098a4:	2e04      	cmp	r6, #4
 80098a6:	d806      	bhi.n	80098b6 <_strtod_l+0xe6>
 80098a8:	e8df f006 	tbb	[pc, r6]
 80098ac:	201d0314 	.word	0x201d0314
 80098b0:	14          	.byte	0x14
 80098b1:	00          	.byte	0x00
 80098b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80098b6:	05e1      	lsls	r1, r4, #23
 80098b8:	bf48      	it	mi
 80098ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80098be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098c2:	0d1b      	lsrs	r3, r3, #20
 80098c4:	051b      	lsls	r3, r3, #20
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1bb      	bne.n	8009842 <_strtod_l+0x72>
 80098ca:	f7fe fb31 	bl	8007f30 <__errno>
 80098ce:	2322      	movs	r3, #34	@ 0x22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	e7b6      	b.n	8009842 <_strtod_l+0x72>
 80098d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80098d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80098dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098e4:	e7e7      	b.n	80098b6 <_strtod_l+0xe6>
 80098e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009a64 <_strtod_l+0x294>
 80098ea:	e7e4      	b.n	80098b6 <_strtod_l+0xe6>
 80098ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80098f0:	f04f 3aff 	mov.w	sl, #4294967295
 80098f4:	e7df      	b.n	80098b6 <_strtod_l+0xe6>
 80098f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b30      	cmp	r3, #48	@ 0x30
 8009900:	d0f9      	beq.n	80098f6 <_strtod_l+0x126>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d09d      	beq.n	8009842 <_strtod_l+0x72>
 8009906:	2301      	movs	r3, #1
 8009908:	9309      	str	r3, [sp, #36]	@ 0x24
 800990a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800990c:	930c      	str	r3, [sp, #48]	@ 0x30
 800990e:	2300      	movs	r3, #0
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	930a      	str	r3, [sp, #40]	@ 0x28
 8009914:	461f      	mov	r7, r3
 8009916:	220a      	movs	r2, #10
 8009918:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800991a:	7805      	ldrb	r5, [r0, #0]
 800991c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009920:	b2d9      	uxtb	r1, r3
 8009922:	2909      	cmp	r1, #9
 8009924:	d928      	bls.n	8009978 <_strtod_l+0x1a8>
 8009926:	494e      	ldr	r1, [pc, #312]	@ (8009a60 <_strtod_l+0x290>)
 8009928:	2201      	movs	r2, #1
 800992a:	f000 ffd5 	bl	800a8d8 <strncmp>
 800992e:	2800      	cmp	r0, #0
 8009930:	d032      	beq.n	8009998 <_strtod_l+0x1c8>
 8009932:	2000      	movs	r0, #0
 8009934:	462a      	mov	r2, r5
 8009936:	4681      	mov	r9, r0
 8009938:	463d      	mov	r5, r7
 800993a:	4603      	mov	r3, r0
 800993c:	2a65      	cmp	r2, #101	@ 0x65
 800993e:	d001      	beq.n	8009944 <_strtod_l+0x174>
 8009940:	2a45      	cmp	r2, #69	@ 0x45
 8009942:	d114      	bne.n	800996e <_strtod_l+0x19e>
 8009944:	b91d      	cbnz	r5, 800994e <_strtod_l+0x17e>
 8009946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009948:	4302      	orrs	r2, r0
 800994a:	d095      	beq.n	8009878 <_strtod_l+0xa8>
 800994c:	2500      	movs	r5, #0
 800994e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009950:	1c62      	adds	r2, r4, #1
 8009952:	9219      	str	r2, [sp, #100]	@ 0x64
 8009954:	7862      	ldrb	r2, [r4, #1]
 8009956:	2a2b      	cmp	r2, #43	@ 0x2b
 8009958:	d077      	beq.n	8009a4a <_strtod_l+0x27a>
 800995a:	2a2d      	cmp	r2, #45	@ 0x2d
 800995c:	d07b      	beq.n	8009a56 <_strtod_l+0x286>
 800995e:	f04f 0c00 	mov.w	ip, #0
 8009962:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009966:	2909      	cmp	r1, #9
 8009968:	f240 8082 	bls.w	8009a70 <_strtod_l+0x2a0>
 800996c:	9419      	str	r4, [sp, #100]	@ 0x64
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	e0a2      	b.n	8009aba <_strtod_l+0x2ea>
 8009974:	2300      	movs	r3, #0
 8009976:	e7c7      	b.n	8009908 <_strtod_l+0x138>
 8009978:	2f08      	cmp	r7, #8
 800997a:	bfd5      	itete	le
 800997c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800997e:	9908      	ldrgt	r1, [sp, #32]
 8009980:	fb02 3301 	mlale	r3, r2, r1, r3
 8009984:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009988:	f100 0001 	add.w	r0, r0, #1
 800998c:	bfd4      	ite	le
 800998e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009990:	9308      	strgt	r3, [sp, #32]
 8009992:	3701      	adds	r7, #1
 8009994:	9019      	str	r0, [sp, #100]	@ 0x64
 8009996:	e7bf      	b.n	8009918 <_strtod_l+0x148>
 8009998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	9219      	str	r2, [sp, #100]	@ 0x64
 800999e:	785a      	ldrb	r2, [r3, #1]
 80099a0:	b37f      	cbz	r7, 8009a02 <_strtod_l+0x232>
 80099a2:	4681      	mov	r9, r0
 80099a4:	463d      	mov	r5, r7
 80099a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80099aa:	2b09      	cmp	r3, #9
 80099ac:	d912      	bls.n	80099d4 <_strtod_l+0x204>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7c4      	b.n	800993c <_strtod_l+0x16c>
 80099b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80099b8:	785a      	ldrb	r2, [r3, #1]
 80099ba:	3001      	adds	r0, #1
 80099bc:	2a30      	cmp	r2, #48	@ 0x30
 80099be:	d0f8      	beq.n	80099b2 <_strtod_l+0x1e2>
 80099c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	f200 84d3 	bhi.w	800a370 <_strtod_l+0xba0>
 80099ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80099ce:	4681      	mov	r9, r0
 80099d0:	2000      	movs	r0, #0
 80099d2:	4605      	mov	r5, r0
 80099d4:	3a30      	subs	r2, #48	@ 0x30
 80099d6:	f100 0301 	add.w	r3, r0, #1
 80099da:	d02a      	beq.n	8009a32 <_strtod_l+0x262>
 80099dc:	4499      	add	r9, r3
 80099de:	eb00 0c05 	add.w	ip, r0, r5
 80099e2:	462b      	mov	r3, r5
 80099e4:	210a      	movs	r1, #10
 80099e6:	4563      	cmp	r3, ip
 80099e8:	d10d      	bne.n	8009a06 <_strtod_l+0x236>
 80099ea:	1c69      	adds	r1, r5, #1
 80099ec:	4401      	add	r1, r0
 80099ee:	4428      	add	r0, r5
 80099f0:	2808      	cmp	r0, #8
 80099f2:	dc16      	bgt.n	8009a22 <_strtod_l+0x252>
 80099f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099f6:	230a      	movs	r3, #10
 80099f8:	fb03 2300 	mla	r3, r3, r0, r2
 80099fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80099fe:	2300      	movs	r3, #0
 8009a00:	e018      	b.n	8009a34 <_strtod_l+0x264>
 8009a02:	4638      	mov	r0, r7
 8009a04:	e7da      	b.n	80099bc <_strtod_l+0x1ec>
 8009a06:	2b08      	cmp	r3, #8
 8009a08:	f103 0301 	add.w	r3, r3, #1
 8009a0c:	dc03      	bgt.n	8009a16 <_strtod_l+0x246>
 8009a0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a10:	434e      	muls	r6, r1
 8009a12:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a14:	e7e7      	b.n	80099e6 <_strtod_l+0x216>
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	bfde      	ittt	le
 8009a1a:	9e08      	ldrle	r6, [sp, #32]
 8009a1c:	434e      	mulle	r6, r1
 8009a1e:	9608      	strle	r6, [sp, #32]
 8009a20:	e7e1      	b.n	80099e6 <_strtod_l+0x216>
 8009a22:	280f      	cmp	r0, #15
 8009a24:	dceb      	bgt.n	80099fe <_strtod_l+0x22e>
 8009a26:	9808      	ldr	r0, [sp, #32]
 8009a28:	230a      	movs	r3, #10
 8009a2a:	fb03 2300 	mla	r3, r3, r0, r2
 8009a2e:	9308      	str	r3, [sp, #32]
 8009a30:	e7e5      	b.n	80099fe <_strtod_l+0x22e>
 8009a32:	4629      	mov	r1, r5
 8009a34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a36:	1c50      	adds	r0, r2, #1
 8009a38:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a3a:	7852      	ldrb	r2, [r2, #1]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	460d      	mov	r5, r1
 8009a40:	e7b1      	b.n	80099a6 <_strtod_l+0x1d6>
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	2301      	movs	r3, #1
 8009a48:	e77d      	b.n	8009946 <_strtod_l+0x176>
 8009a4a:	f04f 0c00 	mov.w	ip, #0
 8009a4e:	1ca2      	adds	r2, r4, #2
 8009a50:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a52:	78a2      	ldrb	r2, [r4, #2]
 8009a54:	e785      	b.n	8009962 <_strtod_l+0x192>
 8009a56:	f04f 0c01 	mov.w	ip, #1
 8009a5a:	e7f8      	b.n	8009a4e <_strtod_l+0x27e>
 8009a5c:	0800ba10 	.word	0x0800ba10
 8009a60:	0800b9f8 	.word	0x0800b9f8
 8009a64:	7ff00000 	.word	0x7ff00000
 8009a68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a6a:	1c51      	adds	r1, r2, #1
 8009a6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a6e:	7852      	ldrb	r2, [r2, #1]
 8009a70:	2a30      	cmp	r2, #48	@ 0x30
 8009a72:	d0f9      	beq.n	8009a68 <_strtod_l+0x298>
 8009a74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009a78:	2908      	cmp	r1, #8
 8009a7a:	f63f af78 	bhi.w	800996e <_strtod_l+0x19e>
 8009a7e:	3a30      	subs	r2, #48	@ 0x30
 8009a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a84:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a86:	f04f 080a 	mov.w	r8, #10
 8009a8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a8c:	1c56      	adds	r6, r2, #1
 8009a8e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009a90:	7852      	ldrb	r2, [r2, #1]
 8009a92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a96:	f1be 0f09 	cmp.w	lr, #9
 8009a9a:	d939      	bls.n	8009b10 <_strtod_l+0x340>
 8009a9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a9e:	1a76      	subs	r6, r6, r1
 8009aa0:	2e08      	cmp	r6, #8
 8009aa2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009aa6:	dc03      	bgt.n	8009ab0 <_strtod_l+0x2e0>
 8009aa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009aaa:	4588      	cmp	r8, r1
 8009aac:	bfa8      	it	ge
 8009aae:	4688      	movge	r8, r1
 8009ab0:	f1bc 0f00 	cmp.w	ip, #0
 8009ab4:	d001      	beq.n	8009aba <_strtod_l+0x2ea>
 8009ab6:	f1c8 0800 	rsb	r8, r8, #0
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	d14e      	bne.n	8009b5c <_strtod_l+0x38c>
 8009abe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ac0:	4308      	orrs	r0, r1
 8009ac2:	f47f aebe 	bne.w	8009842 <_strtod_l+0x72>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f47f aed6 	bne.w	8009878 <_strtod_l+0xa8>
 8009acc:	2a69      	cmp	r2, #105	@ 0x69
 8009ace:	d028      	beq.n	8009b22 <_strtod_l+0x352>
 8009ad0:	dc25      	bgt.n	8009b1e <_strtod_l+0x34e>
 8009ad2:	2a49      	cmp	r2, #73	@ 0x49
 8009ad4:	d025      	beq.n	8009b22 <_strtod_l+0x352>
 8009ad6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ad8:	f47f aece 	bne.w	8009878 <_strtod_l+0xa8>
 8009adc:	499b      	ldr	r1, [pc, #620]	@ (8009d4c <_strtod_l+0x57c>)
 8009ade:	a819      	add	r0, sp, #100	@ 0x64
 8009ae0:	f001 f9ee 	bl	800aec0 <__match>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	f43f aec7 	beq.w	8009878 <_strtod_l+0xa8>
 8009aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b28      	cmp	r3, #40	@ 0x28
 8009af0:	d12e      	bne.n	8009b50 <_strtod_l+0x380>
 8009af2:	4997      	ldr	r1, [pc, #604]	@ (8009d50 <_strtod_l+0x580>)
 8009af4:	aa1c      	add	r2, sp, #112	@ 0x70
 8009af6:	a819      	add	r0, sp, #100	@ 0x64
 8009af8:	f001 f9f6 	bl	800aee8 <__hexnan>
 8009afc:	2805      	cmp	r0, #5
 8009afe:	d127      	bne.n	8009b50 <_strtod_l+0x380>
 8009b00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b02:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009b06:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b0a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b0e:	e698      	b.n	8009842 <_strtod_l+0x72>
 8009b10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b12:	fb08 2101 	mla	r1, r8, r1, r2
 8009b16:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b1c:	e7b5      	b.n	8009a8a <_strtod_l+0x2ba>
 8009b1e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b20:	e7da      	b.n	8009ad8 <_strtod_l+0x308>
 8009b22:	498c      	ldr	r1, [pc, #560]	@ (8009d54 <_strtod_l+0x584>)
 8009b24:	a819      	add	r0, sp, #100	@ 0x64
 8009b26:	f001 f9cb 	bl	800aec0 <__match>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f43f aea4 	beq.w	8009878 <_strtod_l+0xa8>
 8009b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b32:	4989      	ldr	r1, [pc, #548]	@ (8009d58 <_strtod_l+0x588>)
 8009b34:	3b01      	subs	r3, #1
 8009b36:	a819      	add	r0, sp, #100	@ 0x64
 8009b38:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b3a:	f001 f9c1 	bl	800aec0 <__match>
 8009b3e:	b910      	cbnz	r0, 8009b46 <_strtod_l+0x376>
 8009b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b42:	3301      	adds	r3, #1
 8009b44:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b46:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009d68 <_strtod_l+0x598>
 8009b4a:	f04f 0a00 	mov.w	sl, #0
 8009b4e:	e678      	b.n	8009842 <_strtod_l+0x72>
 8009b50:	4882      	ldr	r0, [pc, #520]	@ (8009d5c <_strtod_l+0x58c>)
 8009b52:	f000 fef1 	bl	800a938 <nan>
 8009b56:	ec5b ab10 	vmov	sl, fp, d0
 8009b5a:	e672      	b.n	8009842 <_strtod_l+0x72>
 8009b5c:	eba8 0309 	sub.w	r3, r8, r9
 8009b60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b64:	2f00      	cmp	r7, #0
 8009b66:	bf08      	it	eq
 8009b68:	462f      	moveq	r7, r5
 8009b6a:	2d10      	cmp	r5, #16
 8009b6c:	462c      	mov	r4, r5
 8009b6e:	bfa8      	it	ge
 8009b70:	2410      	movge	r4, #16
 8009b72:	f7f6 fcf7 	bl	8000564 <__aeabi_ui2d>
 8009b76:	2d09      	cmp	r5, #9
 8009b78:	4682      	mov	sl, r0
 8009b7a:	468b      	mov	fp, r1
 8009b7c:	dc13      	bgt.n	8009ba6 <_strtod_l+0x3d6>
 8009b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f43f ae5e 	beq.w	8009842 <_strtod_l+0x72>
 8009b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b88:	dd78      	ble.n	8009c7c <_strtod_l+0x4ac>
 8009b8a:	2b16      	cmp	r3, #22
 8009b8c:	dc5f      	bgt.n	8009c4e <_strtod_l+0x47e>
 8009b8e:	4974      	ldr	r1, [pc, #464]	@ (8009d60 <_strtod_l+0x590>)
 8009b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b98:	4652      	mov	r2, sl
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	f7f6 fd5c 	bl	8000658 <__aeabi_dmul>
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	e64d      	b.n	8009842 <_strtod_l+0x72>
 8009ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8009d60 <_strtod_l+0x590>)
 8009ba8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009bb0:	f7f6 fd52 	bl	8000658 <__aeabi_dmul>
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	9808      	ldr	r0, [sp, #32]
 8009bb8:	468b      	mov	fp, r1
 8009bba:	f7f6 fcd3 	bl	8000564 <__aeabi_ui2d>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	f7f6 fb91 	bl	80002ec <__adddf3>
 8009bca:	2d0f      	cmp	r5, #15
 8009bcc:	4682      	mov	sl, r0
 8009bce:	468b      	mov	fp, r1
 8009bd0:	ddd5      	ble.n	8009b7e <_strtod_l+0x3ae>
 8009bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd4:	1b2c      	subs	r4, r5, r4
 8009bd6:	441c      	add	r4, r3
 8009bd8:	2c00      	cmp	r4, #0
 8009bda:	f340 8096 	ble.w	8009d0a <_strtod_l+0x53a>
 8009bde:	f014 030f 	ands.w	r3, r4, #15
 8009be2:	d00a      	beq.n	8009bfa <_strtod_l+0x42a>
 8009be4:	495e      	ldr	r1, [pc, #376]	@ (8009d60 <_strtod_l+0x590>)
 8009be6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bea:	4652      	mov	r2, sl
 8009bec:	465b      	mov	r3, fp
 8009bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf2:	f7f6 fd31 	bl	8000658 <__aeabi_dmul>
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	f034 040f 	bics.w	r4, r4, #15
 8009bfe:	d073      	beq.n	8009ce8 <_strtod_l+0x518>
 8009c00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009c04:	dd48      	ble.n	8009c98 <_strtod_l+0x4c8>
 8009c06:	2400      	movs	r4, #0
 8009c08:	46a0      	mov	r8, r4
 8009c0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c0c:	46a1      	mov	r9, r4
 8009c0e:	9a05      	ldr	r2, [sp, #20]
 8009c10:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009d68 <_strtod_l+0x598>
 8009c14:	2322      	movs	r3, #34	@ 0x22
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	f04f 0a00 	mov.w	sl, #0
 8009c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f43f ae0f 	beq.w	8009842 <_strtod_l+0x72>
 8009c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c26:	9805      	ldr	r0, [sp, #20]
 8009c28:	f7ff f942 	bl	8008eb0 <_Bfree>
 8009c2c:	9805      	ldr	r0, [sp, #20]
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7ff f93e 	bl	8008eb0 <_Bfree>
 8009c34:	9805      	ldr	r0, [sp, #20]
 8009c36:	4641      	mov	r1, r8
 8009c38:	f7ff f93a 	bl	8008eb0 <_Bfree>
 8009c3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c3e:	9805      	ldr	r0, [sp, #20]
 8009c40:	f7ff f936 	bl	8008eb0 <_Bfree>
 8009c44:	9805      	ldr	r0, [sp, #20]
 8009c46:	4621      	mov	r1, r4
 8009c48:	f7ff f932 	bl	8008eb0 <_Bfree>
 8009c4c:	e5f9      	b.n	8009842 <_strtod_l+0x72>
 8009c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009c54:	4293      	cmp	r3, r2
 8009c56:	dbbc      	blt.n	8009bd2 <_strtod_l+0x402>
 8009c58:	4c41      	ldr	r4, [pc, #260]	@ (8009d60 <_strtod_l+0x590>)
 8009c5a:	f1c5 050f 	rsb	r5, r5, #15
 8009c5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c62:	4652      	mov	r2, sl
 8009c64:	465b      	mov	r3, fp
 8009c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c6a:	f7f6 fcf5 	bl	8000658 <__aeabi_dmul>
 8009c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c70:	1b5d      	subs	r5, r3, r5
 8009c72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c7a:	e78f      	b.n	8009b9c <_strtod_l+0x3cc>
 8009c7c:	3316      	adds	r3, #22
 8009c7e:	dba8      	blt.n	8009bd2 <_strtod_l+0x402>
 8009c80:	4b37      	ldr	r3, [pc, #220]	@ (8009d60 <_strtod_l+0x590>)
 8009c82:	eba9 0808 	sub.w	r8, r9, r8
 8009c86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4659      	mov	r1, fp
 8009c92:	f7f6 fe0b 	bl	80008ac <__aeabi_ddiv>
 8009c96:	e783      	b.n	8009ba0 <_strtod_l+0x3d0>
 8009c98:	4b32      	ldr	r3, [pc, #200]	@ (8009d64 <_strtod_l+0x594>)
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	1124      	asrs	r4, r4, #4
 8009ca0:	4650      	mov	r0, sl
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	461e      	mov	r6, r3
 8009ca6:	2c01      	cmp	r4, #1
 8009ca8:	dc21      	bgt.n	8009cee <_strtod_l+0x51e>
 8009caa:	b10b      	cbz	r3, 8009cb0 <_strtod_l+0x4e0>
 8009cac:	4682      	mov	sl, r0
 8009cae:	468b      	mov	fp, r1
 8009cb0:	492c      	ldr	r1, [pc, #176]	@ (8009d64 <_strtod_l+0x594>)
 8009cb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009cb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009cba:	4652      	mov	r2, sl
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc2:	f7f6 fcc9 	bl	8000658 <__aeabi_dmul>
 8009cc6:	4b28      	ldr	r3, [pc, #160]	@ (8009d68 <_strtod_l+0x598>)
 8009cc8:	460a      	mov	r2, r1
 8009cca:	400b      	ands	r3, r1
 8009ccc:	4927      	ldr	r1, [pc, #156]	@ (8009d6c <_strtod_l+0x59c>)
 8009cce:	428b      	cmp	r3, r1
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	d898      	bhi.n	8009c06 <_strtod_l+0x436>
 8009cd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	bf86      	itte	hi
 8009cdc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009d70 <_strtod_l+0x5a0>
 8009ce0:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ce4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	e07a      	b.n	8009de4 <_strtod_l+0x614>
 8009cee:	07e2      	lsls	r2, r4, #31
 8009cf0:	d505      	bpl.n	8009cfe <_strtod_l+0x52e>
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f7f6 fcae 	bl	8000658 <__aeabi_dmul>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	9a08      	ldr	r2, [sp, #32]
 8009d00:	3208      	adds	r2, #8
 8009d02:	3601      	adds	r6, #1
 8009d04:	1064      	asrs	r4, r4, #1
 8009d06:	9208      	str	r2, [sp, #32]
 8009d08:	e7cd      	b.n	8009ca6 <_strtod_l+0x4d6>
 8009d0a:	d0ed      	beq.n	8009ce8 <_strtod_l+0x518>
 8009d0c:	4264      	negs	r4, r4
 8009d0e:	f014 020f 	ands.w	r2, r4, #15
 8009d12:	d00a      	beq.n	8009d2a <_strtod_l+0x55a>
 8009d14:	4b12      	ldr	r3, [pc, #72]	@ (8009d60 <_strtod_l+0x590>)
 8009d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fdc3 	bl	80008ac <__aeabi_ddiv>
 8009d26:	4682      	mov	sl, r0
 8009d28:	468b      	mov	fp, r1
 8009d2a:	1124      	asrs	r4, r4, #4
 8009d2c:	d0dc      	beq.n	8009ce8 <_strtod_l+0x518>
 8009d2e:	2c1f      	cmp	r4, #31
 8009d30:	dd20      	ble.n	8009d74 <_strtod_l+0x5a4>
 8009d32:	2400      	movs	r4, #0
 8009d34:	46a0      	mov	r8, r4
 8009d36:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d38:	46a1      	mov	r9, r4
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	2322      	movs	r3, #34	@ 0x22
 8009d3e:	f04f 0a00 	mov.w	sl, #0
 8009d42:	f04f 0b00 	mov.w	fp, #0
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	e768      	b.n	8009c1c <_strtod_l+0x44c>
 8009d4a:	bf00      	nop
 8009d4c:	0800b7e9 	.word	0x0800b7e9
 8009d50:	0800b9fc 	.word	0x0800b9fc
 8009d54:	0800b7e1 	.word	0x0800b7e1
 8009d58:	0800b818 	.word	0x0800b818
 8009d5c:	0800bba5 	.word	0x0800bba5
 8009d60:	0800b930 	.word	0x0800b930
 8009d64:	0800b908 	.word	0x0800b908
 8009d68:	7ff00000 	.word	0x7ff00000
 8009d6c:	7ca00000 	.word	0x7ca00000
 8009d70:	7fefffff 	.word	0x7fefffff
 8009d74:	f014 0310 	ands.w	r3, r4, #16
 8009d78:	bf18      	it	ne
 8009d7a:	236a      	movne	r3, #106	@ 0x6a
 8009d7c:	4ea9      	ldr	r6, [pc, #676]	@ (800a024 <_strtod_l+0x854>)
 8009d7e:	9308      	str	r3, [sp, #32]
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	2300      	movs	r3, #0
 8009d86:	07e2      	lsls	r2, r4, #31
 8009d88:	d504      	bpl.n	8009d94 <_strtod_l+0x5c4>
 8009d8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d8e:	f7f6 fc63 	bl	8000658 <__aeabi_dmul>
 8009d92:	2301      	movs	r3, #1
 8009d94:	1064      	asrs	r4, r4, #1
 8009d96:	f106 0608 	add.w	r6, r6, #8
 8009d9a:	d1f4      	bne.n	8009d86 <_strtod_l+0x5b6>
 8009d9c:	b10b      	cbz	r3, 8009da2 <_strtod_l+0x5d2>
 8009d9e:	4682      	mov	sl, r0
 8009da0:	468b      	mov	fp, r1
 8009da2:	9b08      	ldr	r3, [sp, #32]
 8009da4:	b1b3      	cbz	r3, 8009dd4 <_strtod_l+0x604>
 8009da6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009daa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	4659      	mov	r1, fp
 8009db2:	dd0f      	ble.n	8009dd4 <_strtod_l+0x604>
 8009db4:	2b1f      	cmp	r3, #31
 8009db6:	dd55      	ble.n	8009e64 <_strtod_l+0x694>
 8009db8:	2b34      	cmp	r3, #52	@ 0x34
 8009dba:	bfde      	ittt	le
 8009dbc:	f04f 33ff 	movle.w	r3, #4294967295
 8009dc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009dc4:	4093      	lslle	r3, r2
 8009dc6:	f04f 0a00 	mov.w	sl, #0
 8009dca:	bfcc      	ite	gt
 8009dcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009dd0:	ea03 0b01 	andle.w	fp, r3, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4650      	mov	r0, sl
 8009dda:	4659      	mov	r1, fp
 8009ddc:	f7f6 fea4 	bl	8000b28 <__aeabi_dcmpeq>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1a6      	bne.n	8009d32 <_strtod_l+0x562>
 8009de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009dea:	9805      	ldr	r0, [sp, #20]
 8009dec:	462b      	mov	r3, r5
 8009dee:	463a      	mov	r2, r7
 8009df0:	f7ff f8c6 	bl	8008f80 <__s2b>
 8009df4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f af05 	beq.w	8009c06 <_strtod_l+0x436>
 8009dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	eba9 0308 	sub.w	r3, r9, r8
 8009e04:	bfa8      	it	ge
 8009e06:	2300      	movge	r3, #0
 8009e08:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e0a:	2400      	movs	r4, #0
 8009e0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e10:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e12:	46a0      	mov	r8, r4
 8009e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e16:	9805      	ldr	r0, [sp, #20]
 8009e18:	6859      	ldr	r1, [r3, #4]
 8009e1a:	f7ff f809 	bl	8008e30 <_Balloc>
 8009e1e:	4681      	mov	r9, r0
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f43f aef4 	beq.w	8009c0e <_strtod_l+0x43e>
 8009e26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e28:	691a      	ldr	r2, [r3, #16]
 8009e2a:	3202      	adds	r2, #2
 8009e2c:	f103 010c 	add.w	r1, r3, #12
 8009e30:	0092      	lsls	r2, r2, #2
 8009e32:	300c      	adds	r0, #12
 8009e34:	f000 fd72 	bl	800a91c <memcpy>
 8009e38:	ec4b ab10 	vmov	d0, sl, fp
 8009e3c:	9805      	ldr	r0, [sp, #20]
 8009e3e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e40:	a91b      	add	r1, sp, #108	@ 0x6c
 8009e42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009e46:	f7ff fbd7 	bl	80095f8 <__d2b>
 8009e4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f43f aede 	beq.w	8009c0e <_strtod_l+0x43e>
 8009e52:	9805      	ldr	r0, [sp, #20]
 8009e54:	2101      	movs	r1, #1
 8009e56:	f7ff f929 	bl	80090ac <__i2b>
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	b948      	cbnz	r0, 8009e72 <_strtod_l+0x6a2>
 8009e5e:	f04f 0800 	mov.w	r8, #0
 8009e62:	e6d4      	b.n	8009c0e <_strtod_l+0x43e>
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e70:	e7b0      	b.n	8009dd4 <_strtod_l+0x604>
 8009e72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009e74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009e76:	2d00      	cmp	r5, #0
 8009e78:	bfab      	itete	ge
 8009e7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009e7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009e7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009e80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e82:	bfac      	ite	ge
 8009e84:	18ef      	addge	r7, r5, r3
 8009e86:	1b5e      	sublt	r6, r3, r5
 8009e88:	9b08      	ldr	r3, [sp, #32]
 8009e8a:	1aed      	subs	r5, r5, r3
 8009e8c:	4415      	add	r5, r2
 8009e8e:	4b66      	ldr	r3, [pc, #408]	@ (800a028 <_strtod_l+0x858>)
 8009e90:	3d01      	subs	r5, #1
 8009e92:	429d      	cmp	r5, r3
 8009e94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e98:	da50      	bge.n	8009f3c <_strtod_l+0x76c>
 8009e9a:	1b5b      	subs	r3, r3, r5
 8009e9c:	2b1f      	cmp	r3, #31
 8009e9e:	eba2 0203 	sub.w	r2, r2, r3
 8009ea2:	f04f 0101 	mov.w	r1, #1
 8009ea6:	dc3d      	bgt.n	8009f24 <_strtod_l+0x754>
 8009ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8009eac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eb2:	18bd      	adds	r5, r7, r2
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	42af      	cmp	r7, r5
 8009eb8:	4416      	add	r6, r2
 8009eba:	441e      	add	r6, r3
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	bfa8      	it	ge
 8009ec0:	462b      	movge	r3, r5
 8009ec2:	42b3      	cmp	r3, r6
 8009ec4:	bfa8      	it	ge
 8009ec6:	4633      	movge	r3, r6
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bfc2      	ittt	gt
 8009ecc:	1aed      	subgt	r5, r5, r3
 8009ece:	1af6      	subgt	r6, r6, r3
 8009ed0:	1aff      	subgt	r7, r7, r3
 8009ed2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dd16      	ble.n	8009f06 <_strtod_l+0x736>
 8009ed8:	4641      	mov	r1, r8
 8009eda:	9805      	ldr	r0, [sp, #20]
 8009edc:	461a      	mov	r2, r3
 8009ede:	f7ff f9a5 	bl	800922c <__pow5mult>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0ba      	beq.n	8009e5e <_strtod_l+0x68e>
 8009ee8:	4601      	mov	r1, r0
 8009eea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009eec:	9805      	ldr	r0, [sp, #20]
 8009eee:	f7ff f8f3 	bl	80090d8 <__multiply>
 8009ef2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f43f ae8a 	beq.w	8009c0e <_strtod_l+0x43e>
 8009efa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009efc:	9805      	ldr	r0, [sp, #20]
 8009efe:	f7fe ffd7 	bl	8008eb0 <_Bfree>
 8009f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	dc1d      	bgt.n	8009f46 <_strtod_l+0x776>
 8009f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dd23      	ble.n	8009f58 <_strtod_l+0x788>
 8009f10:	4649      	mov	r1, r9
 8009f12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f14:	9805      	ldr	r0, [sp, #20]
 8009f16:	f7ff f989 	bl	800922c <__pow5mult>
 8009f1a:	4681      	mov	r9, r0
 8009f1c:	b9e0      	cbnz	r0, 8009f58 <_strtod_l+0x788>
 8009f1e:	f04f 0900 	mov.w	r9, #0
 8009f22:	e674      	b.n	8009c0e <_strtod_l+0x43e>
 8009f24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009f28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009f2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009f30:	35e2      	adds	r5, #226	@ 0xe2
 8009f32:	fa01 f305 	lsl.w	r3, r1, r5
 8009f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009f3a:	e7ba      	b.n	8009eb2 <_strtod_l+0x6e2>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f40:	2301      	movs	r3, #1
 8009f42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f44:	e7b5      	b.n	8009eb2 <_strtod_l+0x6e2>
 8009f46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f48:	9805      	ldr	r0, [sp, #20]
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f7ff f9c8 	bl	80092e0 <__lshift>
 8009f50:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d1d9      	bne.n	8009f0a <_strtod_l+0x73a>
 8009f56:	e65a      	b.n	8009c0e <_strtod_l+0x43e>
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	dd07      	ble.n	8009f6c <_strtod_l+0x79c>
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	9805      	ldr	r0, [sp, #20]
 8009f60:	4632      	mov	r2, r6
 8009f62:	f7ff f9bd 	bl	80092e0 <__lshift>
 8009f66:	4681      	mov	r9, r0
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d0d8      	beq.n	8009f1e <_strtod_l+0x74e>
 8009f6c:	2f00      	cmp	r7, #0
 8009f6e:	dd08      	ble.n	8009f82 <_strtod_l+0x7b2>
 8009f70:	4641      	mov	r1, r8
 8009f72:	9805      	ldr	r0, [sp, #20]
 8009f74:	463a      	mov	r2, r7
 8009f76:	f7ff f9b3 	bl	80092e0 <__lshift>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f43f ae46 	beq.w	8009c0e <_strtod_l+0x43e>
 8009f82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f84:	9805      	ldr	r0, [sp, #20]
 8009f86:	464a      	mov	r2, r9
 8009f88:	f7ff fa32 	bl	80093f0 <__mdiff>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f43f ae3d 	beq.w	8009c0e <_strtod_l+0x43e>
 8009f94:	68c3      	ldr	r3, [r0, #12]
 8009f96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60c3      	str	r3, [r0, #12]
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	f7ff fa0b 	bl	80093b8 <__mcmp>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	da46      	bge.n	800a034 <_strtod_l+0x864>
 8009fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8009fac:	d16c      	bne.n	800a088 <_strtod_l+0x8b8>
 8009fae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d168      	bne.n	800a088 <_strtod_l+0x8b8>
 8009fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fba:	0d1b      	lsrs	r3, r3, #20
 8009fbc:	051b      	lsls	r3, r3, #20
 8009fbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009fc2:	d961      	bls.n	800a088 <_strtod_l+0x8b8>
 8009fc4:	6963      	ldr	r3, [r4, #20]
 8009fc6:	b913      	cbnz	r3, 8009fce <_strtod_l+0x7fe>
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	dd5c      	ble.n	800a088 <_strtod_l+0x8b8>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	9805      	ldr	r0, [sp, #20]
 8009fd4:	f7ff f984 	bl	80092e0 <__lshift>
 8009fd8:	4641      	mov	r1, r8
 8009fda:	4604      	mov	r4, r0
 8009fdc:	f7ff f9ec 	bl	80093b8 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	dd51      	ble.n	800a088 <_strtod_l+0x8b8>
 8009fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fe8:	9a08      	ldr	r2, [sp, #32]
 8009fea:	0d1b      	lsrs	r3, r3, #20
 8009fec:	051b      	lsls	r3, r3, #20
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	d06b      	beq.n	800a0ca <_strtod_l+0x8fa>
 8009ff2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ff6:	d868      	bhi.n	800a0ca <_strtod_l+0x8fa>
 8009ff8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009ffc:	f67f ae9d 	bls.w	8009d3a <_strtod_l+0x56a>
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <_strtod_l+0x85c>)
 800a002:	4650      	mov	r0, sl
 800a004:	4659      	mov	r1, fp
 800a006:	2200      	movs	r2, #0
 800a008:	f7f6 fb26 	bl	8000658 <__aeabi_dmul>
 800a00c:	4b08      	ldr	r3, [pc, #32]	@ (800a030 <_strtod_l+0x860>)
 800a00e:	400b      	ands	r3, r1
 800a010:	4682      	mov	sl, r0
 800a012:	468b      	mov	fp, r1
 800a014:	2b00      	cmp	r3, #0
 800a016:	f47f ae05 	bne.w	8009c24 <_strtod_l+0x454>
 800a01a:	9a05      	ldr	r2, [sp, #20]
 800a01c:	2322      	movs	r3, #34	@ 0x22
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	e600      	b.n	8009c24 <_strtod_l+0x454>
 800a022:	bf00      	nop
 800a024:	0800ba28 	.word	0x0800ba28
 800a028:	fffffc02 	.word	0xfffffc02
 800a02c:	39500000 	.word	0x39500000
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a038:	d165      	bne.n	800a106 <_strtod_l+0x936>
 800a03a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a040:	b35a      	cbz	r2, 800a09a <_strtod_l+0x8ca>
 800a042:	4a9f      	ldr	r2, [pc, #636]	@ (800a2c0 <_strtod_l+0xaf0>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d12b      	bne.n	800a0a0 <_strtod_l+0x8d0>
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	4651      	mov	r1, sl
 800a04c:	b303      	cbz	r3, 800a090 <_strtod_l+0x8c0>
 800a04e:	4b9d      	ldr	r3, [pc, #628]	@ (800a2c4 <_strtod_l+0xaf4>)
 800a050:	465a      	mov	r2, fp
 800a052:	4013      	ands	r3, r2
 800a054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a058:	f04f 32ff 	mov.w	r2, #4294967295
 800a05c:	d81b      	bhi.n	800a096 <_strtod_l+0x8c6>
 800a05e:	0d1b      	lsrs	r3, r3, #20
 800a060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	4299      	cmp	r1, r3
 800a06a:	d119      	bne.n	800a0a0 <_strtod_l+0x8d0>
 800a06c:	4b96      	ldr	r3, [pc, #600]	@ (800a2c8 <_strtod_l+0xaf8>)
 800a06e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a070:	429a      	cmp	r2, r3
 800a072:	d102      	bne.n	800a07a <_strtod_l+0x8aa>
 800a074:	3101      	adds	r1, #1
 800a076:	f43f adca 	beq.w	8009c0e <_strtod_l+0x43e>
 800a07a:	4b92      	ldr	r3, [pc, #584]	@ (800a2c4 <_strtod_l+0xaf4>)
 800a07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a07e:	401a      	ands	r2, r3
 800a080:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a084:	f04f 0a00 	mov.w	sl, #0
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1b8      	bne.n	800a000 <_strtod_l+0x830>
 800a08e:	e5c9      	b.n	8009c24 <_strtod_l+0x454>
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	e7e8      	b.n	800a068 <_strtod_l+0x898>
 800a096:	4613      	mov	r3, r2
 800a098:	e7e6      	b.n	800a068 <_strtod_l+0x898>
 800a09a:	ea53 030a 	orrs.w	r3, r3, sl
 800a09e:	d0a1      	beq.n	8009fe4 <_strtod_l+0x814>
 800a0a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0a2:	b1db      	cbz	r3, 800a0dc <_strtod_l+0x90c>
 800a0a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a6:	4213      	tst	r3, r2
 800a0a8:	d0ee      	beq.n	800a088 <_strtod_l+0x8b8>
 800a0aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ac:	9a08      	ldr	r2, [sp, #32]
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	4659      	mov	r1, fp
 800a0b2:	b1bb      	cbz	r3, 800a0e4 <_strtod_l+0x914>
 800a0b4:	f7ff fb6e 	bl	8009794 <sulp>
 800a0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0bc:	ec53 2b10 	vmov	r2, r3, d0
 800a0c0:	f7f6 f914 	bl	80002ec <__adddf3>
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	468b      	mov	fp, r1
 800a0c8:	e7de      	b.n	800a088 <_strtod_l+0x8b8>
 800a0ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a0ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0d6:	f04f 3aff 	mov.w	sl, #4294967295
 800a0da:	e7d5      	b.n	800a088 <_strtod_l+0x8b8>
 800a0dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0de:	ea13 0f0a 	tst.w	r3, sl
 800a0e2:	e7e1      	b.n	800a0a8 <_strtod_l+0x8d8>
 800a0e4:	f7ff fb56 	bl	8009794 <sulp>
 800a0e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ec:	ec53 2b10 	vmov	r2, r3, d0
 800a0f0:	f7f6 f8fa 	bl	80002e8 <__aeabi_dsub>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	468b      	mov	fp, r1
 800a0fc:	f7f6 fd14 	bl	8000b28 <__aeabi_dcmpeq>
 800a100:	2800      	cmp	r0, #0
 800a102:	d0c1      	beq.n	800a088 <_strtod_l+0x8b8>
 800a104:	e619      	b.n	8009d3a <_strtod_l+0x56a>
 800a106:	4641      	mov	r1, r8
 800a108:	4620      	mov	r0, r4
 800a10a:	f7ff facd 	bl	80096a8 <__ratio>
 800a10e:	ec57 6b10 	vmov	r6, r7, d0
 800a112:	2200      	movs	r2, #0
 800a114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a118:	4630      	mov	r0, r6
 800a11a:	4639      	mov	r1, r7
 800a11c:	f7f6 fd18 	bl	8000b50 <__aeabi_dcmple>
 800a120:	2800      	cmp	r0, #0
 800a122:	d06f      	beq.n	800a204 <_strtod_l+0xa34>
 800a124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d17a      	bne.n	800a220 <_strtod_l+0xa50>
 800a12a:	f1ba 0f00 	cmp.w	sl, #0
 800a12e:	d158      	bne.n	800a1e2 <_strtod_l+0xa12>
 800a130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a136:	2b00      	cmp	r3, #0
 800a138:	d15a      	bne.n	800a1f0 <_strtod_l+0xa20>
 800a13a:	4b64      	ldr	r3, [pc, #400]	@ (800a2cc <_strtod_l+0xafc>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 fcfb 	bl	8000b3c <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	d159      	bne.n	800a1fe <_strtod_l+0xa2e>
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	4b60      	ldr	r3, [pc, #384]	@ (800a2d0 <_strtod_l+0xb00>)
 800a150:	2200      	movs	r2, #0
 800a152:	f7f6 fa81 	bl	8000658 <__aeabi_dmul>
 800a156:	4606      	mov	r6, r0
 800a158:	460f      	mov	r7, r1
 800a15a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a15e:	9606      	str	r6, [sp, #24]
 800a160:	9307      	str	r3, [sp, #28]
 800a162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a166:	4d57      	ldr	r5, [pc, #348]	@ (800a2c4 <_strtod_l+0xaf4>)
 800a168:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a16e:	401d      	ands	r5, r3
 800a170:	4b58      	ldr	r3, [pc, #352]	@ (800a2d4 <_strtod_l+0xb04>)
 800a172:	429d      	cmp	r5, r3
 800a174:	f040 80b2 	bne.w	800a2dc <_strtod_l+0xb0c>
 800a178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a17a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a17e:	ec4b ab10 	vmov	d0, sl, fp
 800a182:	f7ff f9c9 	bl	8009518 <__ulp>
 800a186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a18a:	ec51 0b10 	vmov	r0, r1, d0
 800a18e:	f7f6 fa63 	bl	8000658 <__aeabi_dmul>
 800a192:	4652      	mov	r2, sl
 800a194:	465b      	mov	r3, fp
 800a196:	f7f6 f8a9 	bl	80002ec <__adddf3>
 800a19a:	460b      	mov	r3, r1
 800a19c:	4949      	ldr	r1, [pc, #292]	@ (800a2c4 <_strtod_l+0xaf4>)
 800a19e:	4a4e      	ldr	r2, [pc, #312]	@ (800a2d8 <_strtod_l+0xb08>)
 800a1a0:	4019      	ands	r1, r3
 800a1a2:	4291      	cmp	r1, r2
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	d942      	bls.n	800a22e <_strtod_l+0xa5e>
 800a1a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1aa:	4b47      	ldr	r3, [pc, #284]	@ (800a2c8 <_strtod_l+0xaf8>)
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d103      	bne.n	800a1b8 <_strtod_l+0x9e8>
 800a1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	f43f ad2b 	beq.w	8009c0e <_strtod_l+0x43e>
 800a1b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a2c8 <_strtod_l+0xaf8>
 800a1bc:	f04f 3aff 	mov.w	sl, #4294967295
 800a1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1c2:	9805      	ldr	r0, [sp, #20]
 800a1c4:	f7fe fe74 	bl	8008eb0 <_Bfree>
 800a1c8:	9805      	ldr	r0, [sp, #20]
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	f7fe fe70 	bl	8008eb0 <_Bfree>
 800a1d0:	9805      	ldr	r0, [sp, #20]
 800a1d2:	4641      	mov	r1, r8
 800a1d4:	f7fe fe6c 	bl	8008eb0 <_Bfree>
 800a1d8:	9805      	ldr	r0, [sp, #20]
 800a1da:	4621      	mov	r1, r4
 800a1dc:	f7fe fe68 	bl	8008eb0 <_Bfree>
 800a1e0:	e618      	b.n	8009e14 <_strtod_l+0x644>
 800a1e2:	f1ba 0f01 	cmp.w	sl, #1
 800a1e6:	d103      	bne.n	800a1f0 <_strtod_l+0xa20>
 800a1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f43f ada5 	beq.w	8009d3a <_strtod_l+0x56a>
 800a1f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a2a0 <_strtod_l+0xad0>
 800a1f4:	4f35      	ldr	r7, [pc, #212]	@ (800a2cc <_strtod_l+0xafc>)
 800a1f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	e7b1      	b.n	800a162 <_strtod_l+0x992>
 800a1fe:	4f34      	ldr	r7, [pc, #208]	@ (800a2d0 <_strtod_l+0xb00>)
 800a200:	2600      	movs	r6, #0
 800a202:	e7aa      	b.n	800a15a <_strtod_l+0x98a>
 800a204:	4b32      	ldr	r3, [pc, #200]	@ (800a2d0 <_strtod_l+0xb00>)
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	2200      	movs	r2, #0
 800a20c:	f7f6 fa24 	bl	8000658 <__aeabi_dmul>
 800a210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a212:	4606      	mov	r6, r0
 800a214:	460f      	mov	r7, r1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d09f      	beq.n	800a15a <_strtod_l+0x98a>
 800a21a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a21e:	e7a0      	b.n	800a162 <_strtod_l+0x992>
 800a220:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a2a8 <_strtod_l+0xad8>
 800a224:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a228:	ec57 6b17 	vmov	r6, r7, d7
 800a22c:	e799      	b.n	800a162 <_strtod_l+0x992>
 800a22e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a232:	9b08      	ldr	r3, [sp, #32]
 800a234:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1c1      	bne.n	800a1c0 <_strtod_l+0x9f0>
 800a23c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a240:	0d1b      	lsrs	r3, r3, #20
 800a242:	051b      	lsls	r3, r3, #20
 800a244:	429d      	cmp	r5, r3
 800a246:	d1bb      	bne.n	800a1c0 <_strtod_l+0x9f0>
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 fd64 	bl	8000d18 <__aeabi_d2lz>
 800a250:	f7f6 f9d4 	bl	80005fc <__aeabi_l2d>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 f844 	bl	80002e8 <__aeabi_dsub>
 800a260:	460b      	mov	r3, r1
 800a262:	4602      	mov	r2, r0
 800a264:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a268:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	ea46 060a 	orr.w	r6, r6, sl
 800a272:	431e      	orrs	r6, r3
 800a274:	d06f      	beq.n	800a356 <_strtod_l+0xb86>
 800a276:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2b0 <_strtod_l+0xae0>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f6 fc5e 	bl	8000b3c <__aeabi_dcmplt>
 800a280:	2800      	cmp	r0, #0
 800a282:	f47f accf 	bne.w	8009c24 <_strtod_l+0x454>
 800a286:	a30c      	add	r3, pc, #48	@ (adr r3, 800a2b8 <_strtod_l+0xae8>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a290:	f7f6 fc72 	bl	8000b78 <__aeabi_dcmpgt>
 800a294:	2800      	cmp	r0, #0
 800a296:	d093      	beq.n	800a1c0 <_strtod_l+0x9f0>
 800a298:	e4c4      	b.n	8009c24 <_strtod_l+0x454>
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w
 800a2a0:	00000000 	.word	0x00000000
 800a2a4:	bff00000 	.word	0xbff00000
 800a2a8:	00000000 	.word	0x00000000
 800a2ac:	3ff00000 	.word	0x3ff00000
 800a2b0:	94a03595 	.word	0x94a03595
 800a2b4:	3fdfffff 	.word	0x3fdfffff
 800a2b8:	35afe535 	.word	0x35afe535
 800a2bc:	3fe00000 	.word	0x3fe00000
 800a2c0:	000fffff 	.word	0x000fffff
 800a2c4:	7ff00000 	.word	0x7ff00000
 800a2c8:	7fefffff 	.word	0x7fefffff
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	3fe00000 	.word	0x3fe00000
 800a2d4:	7fe00000 	.word	0x7fe00000
 800a2d8:	7c9fffff 	.word	0x7c9fffff
 800a2dc:	9b08      	ldr	r3, [sp, #32]
 800a2de:	b323      	cbz	r3, 800a32a <_strtod_l+0xb5a>
 800a2e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a2e4:	d821      	bhi.n	800a32a <_strtod_l+0xb5a>
 800a2e6:	a328      	add	r3, pc, #160	@ (adr r3, 800a388 <_strtod_l+0xbb8>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 fc2e 	bl	8000b50 <__aeabi_dcmple>
 800a2f4:	b1a0      	cbz	r0, 800a320 <_strtod_l+0xb50>
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7f6 fc85 	bl	8000c08 <__aeabi_d2uiz>
 800a2fe:	2801      	cmp	r0, #1
 800a300:	bf38      	it	cc
 800a302:	2001      	movcc	r0, #1
 800a304:	f7f6 f92e 	bl	8000564 <__aeabi_ui2d>
 800a308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	b9fb      	cbnz	r3, 800a350 <_strtod_l+0xb80>
 800a310:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a314:	9014      	str	r0, [sp, #80]	@ 0x50
 800a316:	9315      	str	r3, [sp, #84]	@ 0x54
 800a318:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a31c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a320:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a322:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a326:	1b5b      	subs	r3, r3, r5
 800a328:	9311      	str	r3, [sp, #68]	@ 0x44
 800a32a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a32e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a332:	f7ff f8f1 	bl	8009518 <__ulp>
 800a336:	4650      	mov	r0, sl
 800a338:	ec53 2b10 	vmov	r2, r3, d0
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f6 f98b 	bl	8000658 <__aeabi_dmul>
 800a342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a346:	f7f5 ffd1 	bl	80002ec <__adddf3>
 800a34a:	4682      	mov	sl, r0
 800a34c:	468b      	mov	fp, r1
 800a34e:	e770      	b.n	800a232 <_strtod_l+0xa62>
 800a350:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a354:	e7e0      	b.n	800a318 <_strtod_l+0xb48>
 800a356:	a30e      	add	r3, pc, #56	@ (adr r3, 800a390 <_strtod_l+0xbc0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f6 fbee 	bl	8000b3c <__aeabi_dcmplt>
 800a360:	e798      	b.n	800a294 <_strtod_l+0xac4>
 800a362:	2300      	movs	r3, #0
 800a364:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a366:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	f7ff ba6d 	b.w	800984a <_strtod_l+0x7a>
 800a370:	2a65      	cmp	r2, #101	@ 0x65
 800a372:	f43f ab66 	beq.w	8009a42 <_strtod_l+0x272>
 800a376:	2a45      	cmp	r2, #69	@ 0x45
 800a378:	f43f ab63 	beq.w	8009a42 <_strtod_l+0x272>
 800a37c:	2301      	movs	r3, #1
 800a37e:	f7ff bb9e 	b.w	8009abe <_strtod_l+0x2ee>
 800a382:	bf00      	nop
 800a384:	f3af 8000 	nop.w
 800a388:	ffc00000 	.word	0xffc00000
 800a38c:	41dfffff 	.word	0x41dfffff
 800a390:	94a03595 	.word	0x94a03595
 800a394:	3fcfffff 	.word	0x3fcfffff

0800a398 <_strtod_r>:
 800a398:	4b01      	ldr	r3, [pc, #4]	@ (800a3a0 <_strtod_r+0x8>)
 800a39a:	f7ff ba19 	b.w	80097d0 <_strtod_l>
 800a39e:	bf00      	nop
 800a3a0:	200001ec 	.word	0x200001ec

0800a3a4 <_strtol_l.constprop.0>:
 800a3a4:	2b24      	cmp	r3, #36	@ 0x24
 800a3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3aa:	4686      	mov	lr, r0
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	d801      	bhi.n	800a3b4 <_strtol_l.constprop.0+0x10>
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d106      	bne.n	800a3c2 <_strtol_l.constprop.0+0x1e>
 800a3b4:	f7fd fdbc 	bl	8007f30 <__errno>
 800a3b8:	2316      	movs	r3, #22
 800a3ba:	6003      	str	r3, [r0, #0]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	4834      	ldr	r0, [pc, #208]	@ (800a494 <_strtol_l.constprop.0+0xf0>)
 800a3c4:	460d      	mov	r5, r1
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3cc:	5d06      	ldrb	r6, [r0, r4]
 800a3ce:	f016 0608 	ands.w	r6, r6, #8
 800a3d2:	d1f8      	bne.n	800a3c6 <_strtol_l.constprop.0+0x22>
 800a3d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3d6:	d12d      	bne.n	800a434 <_strtol_l.constprop.0+0x90>
 800a3d8:	782c      	ldrb	r4, [r5, #0]
 800a3da:	2601      	movs	r6, #1
 800a3dc:	1c95      	adds	r5, r2, #2
 800a3de:	f033 0210 	bics.w	r2, r3, #16
 800a3e2:	d109      	bne.n	800a3f8 <_strtol_l.constprop.0+0x54>
 800a3e4:	2c30      	cmp	r4, #48	@ 0x30
 800a3e6:	d12a      	bne.n	800a43e <_strtol_l.constprop.0+0x9a>
 800a3e8:	782a      	ldrb	r2, [r5, #0]
 800a3ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3ee:	2a58      	cmp	r2, #88	@ 0x58
 800a3f0:	d125      	bne.n	800a43e <_strtol_l.constprop.0+0x9a>
 800a3f2:	786c      	ldrb	r4, [r5, #1]
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	3502      	adds	r5, #2
 800a3f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a400:	2200      	movs	r2, #0
 800a402:	fbbc f9f3 	udiv	r9, ip, r3
 800a406:	4610      	mov	r0, r2
 800a408:	fb03 ca19 	mls	sl, r3, r9, ip
 800a40c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a410:	2f09      	cmp	r7, #9
 800a412:	d81b      	bhi.n	800a44c <_strtol_l.constprop.0+0xa8>
 800a414:	463c      	mov	r4, r7
 800a416:	42a3      	cmp	r3, r4
 800a418:	dd27      	ble.n	800a46a <_strtol_l.constprop.0+0xc6>
 800a41a:	1c57      	adds	r7, r2, #1
 800a41c:	d007      	beq.n	800a42e <_strtol_l.constprop.0+0x8a>
 800a41e:	4581      	cmp	r9, r0
 800a420:	d320      	bcc.n	800a464 <_strtol_l.constprop.0+0xc0>
 800a422:	d101      	bne.n	800a428 <_strtol_l.constprop.0+0x84>
 800a424:	45a2      	cmp	sl, r4
 800a426:	db1d      	blt.n	800a464 <_strtol_l.constprop.0+0xc0>
 800a428:	fb00 4003 	mla	r0, r0, r3, r4
 800a42c:	2201      	movs	r2, #1
 800a42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a432:	e7eb      	b.n	800a40c <_strtol_l.constprop.0+0x68>
 800a434:	2c2b      	cmp	r4, #43	@ 0x2b
 800a436:	bf04      	itt	eq
 800a438:	782c      	ldrbeq	r4, [r5, #0]
 800a43a:	1c95      	addeq	r5, r2, #2
 800a43c:	e7cf      	b.n	800a3de <_strtol_l.constprop.0+0x3a>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1da      	bne.n	800a3f8 <_strtol_l.constprop.0+0x54>
 800a442:	2c30      	cmp	r4, #48	@ 0x30
 800a444:	bf0c      	ite	eq
 800a446:	2308      	moveq	r3, #8
 800a448:	230a      	movne	r3, #10
 800a44a:	e7d5      	b.n	800a3f8 <_strtol_l.constprop.0+0x54>
 800a44c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a450:	2f19      	cmp	r7, #25
 800a452:	d801      	bhi.n	800a458 <_strtol_l.constprop.0+0xb4>
 800a454:	3c37      	subs	r4, #55	@ 0x37
 800a456:	e7de      	b.n	800a416 <_strtol_l.constprop.0+0x72>
 800a458:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a45c:	2f19      	cmp	r7, #25
 800a45e:	d804      	bhi.n	800a46a <_strtol_l.constprop.0+0xc6>
 800a460:	3c57      	subs	r4, #87	@ 0x57
 800a462:	e7d8      	b.n	800a416 <_strtol_l.constprop.0+0x72>
 800a464:	f04f 32ff 	mov.w	r2, #4294967295
 800a468:	e7e1      	b.n	800a42e <_strtol_l.constprop.0+0x8a>
 800a46a:	1c53      	adds	r3, r2, #1
 800a46c:	d108      	bne.n	800a480 <_strtol_l.constprop.0+0xdc>
 800a46e:	2322      	movs	r3, #34	@ 0x22
 800a470:	f8ce 3000 	str.w	r3, [lr]
 800a474:	4660      	mov	r0, ip
 800a476:	f1b8 0f00 	cmp.w	r8, #0
 800a47a:	d0a0      	beq.n	800a3be <_strtol_l.constprop.0+0x1a>
 800a47c:	1e69      	subs	r1, r5, #1
 800a47e:	e006      	b.n	800a48e <_strtol_l.constprop.0+0xea>
 800a480:	b106      	cbz	r6, 800a484 <_strtol_l.constprop.0+0xe0>
 800a482:	4240      	negs	r0, r0
 800a484:	f1b8 0f00 	cmp.w	r8, #0
 800a488:	d099      	beq.n	800a3be <_strtol_l.constprop.0+0x1a>
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	d1f6      	bne.n	800a47c <_strtol_l.constprop.0+0xd8>
 800a48e:	f8c8 1000 	str.w	r1, [r8]
 800a492:	e794      	b.n	800a3be <_strtol_l.constprop.0+0x1a>
 800a494:	0800ba51 	.word	0x0800ba51

0800a498 <_strtol_r>:
 800a498:	f7ff bf84 	b.w	800a3a4 <_strtol_l.constprop.0>

0800a49c <__ssputs_r>:
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	688e      	ldr	r6, [r1, #8]
 800a4a2:	461f      	mov	r7, r3
 800a4a4:	42be      	cmp	r6, r7
 800a4a6:	680b      	ldr	r3, [r1, #0]
 800a4a8:	4682      	mov	sl, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	4690      	mov	r8, r2
 800a4ae:	d82d      	bhi.n	800a50c <__ssputs_r+0x70>
 800a4b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4b8:	d026      	beq.n	800a508 <__ssputs_r+0x6c>
 800a4ba:	6965      	ldr	r5, [r4, #20]
 800a4bc:	6909      	ldr	r1, [r1, #16]
 800a4be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4c2:	eba3 0901 	sub.w	r9, r3, r1
 800a4c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4ca:	1c7b      	adds	r3, r7, #1
 800a4cc:	444b      	add	r3, r9
 800a4ce:	106d      	asrs	r5, r5, #1
 800a4d0:	429d      	cmp	r5, r3
 800a4d2:	bf38      	it	cc
 800a4d4:	461d      	movcc	r5, r3
 800a4d6:	0553      	lsls	r3, r2, #21
 800a4d8:	d527      	bpl.n	800a52a <__ssputs_r+0x8e>
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7fe fc1c 	bl	8008d18 <_malloc_r>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	b360      	cbz	r0, 800a53e <__ssputs_r+0xa2>
 800a4e4:	6921      	ldr	r1, [r4, #16]
 800a4e6:	464a      	mov	r2, r9
 800a4e8:	f000 fa18 	bl	800a91c <memcpy>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	6126      	str	r6, [r4, #16]
 800a4fa:	6165      	str	r5, [r4, #20]
 800a4fc:	444e      	add	r6, r9
 800a4fe:	eba5 0509 	sub.w	r5, r5, r9
 800a502:	6026      	str	r6, [r4, #0]
 800a504:	60a5      	str	r5, [r4, #8]
 800a506:	463e      	mov	r6, r7
 800a508:	42be      	cmp	r6, r7
 800a50a:	d900      	bls.n	800a50e <__ssputs_r+0x72>
 800a50c:	463e      	mov	r6, r7
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	4632      	mov	r2, r6
 800a512:	4641      	mov	r1, r8
 800a514:	f000 f9c6 	bl	800a8a4 <memmove>
 800a518:	68a3      	ldr	r3, [r4, #8]
 800a51a:	1b9b      	subs	r3, r3, r6
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	4433      	add	r3, r6
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	2000      	movs	r0, #0
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	462a      	mov	r2, r5
 800a52c:	f000 fd89 	bl	800b042 <_realloc_r>
 800a530:	4606      	mov	r6, r0
 800a532:	2800      	cmp	r0, #0
 800a534:	d1e0      	bne.n	800a4f8 <__ssputs_r+0x5c>
 800a536:	6921      	ldr	r1, [r4, #16]
 800a538:	4650      	mov	r0, sl
 800a53a:	f7fe fb79 	bl	8008c30 <_free_r>
 800a53e:	230c      	movs	r3, #12
 800a540:	f8ca 3000 	str.w	r3, [sl]
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a54a:	81a3      	strh	r3, [r4, #12]
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	e7e9      	b.n	800a526 <__ssputs_r+0x8a>
	...

0800a554 <_svfiprintf_r>:
 800a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	4698      	mov	r8, r3
 800a55a:	898b      	ldrh	r3, [r1, #12]
 800a55c:	061b      	lsls	r3, r3, #24
 800a55e:	b09d      	sub	sp, #116	@ 0x74
 800a560:	4607      	mov	r7, r0
 800a562:	460d      	mov	r5, r1
 800a564:	4614      	mov	r4, r2
 800a566:	d510      	bpl.n	800a58a <_svfiprintf_r+0x36>
 800a568:	690b      	ldr	r3, [r1, #16]
 800a56a:	b973      	cbnz	r3, 800a58a <_svfiprintf_r+0x36>
 800a56c:	2140      	movs	r1, #64	@ 0x40
 800a56e:	f7fe fbd3 	bl	8008d18 <_malloc_r>
 800a572:	6028      	str	r0, [r5, #0]
 800a574:	6128      	str	r0, [r5, #16]
 800a576:	b930      	cbnz	r0, 800a586 <_svfiprintf_r+0x32>
 800a578:	230c      	movs	r3, #12
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	b01d      	add	sp, #116	@ 0x74
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a586:	2340      	movs	r3, #64	@ 0x40
 800a588:	616b      	str	r3, [r5, #20]
 800a58a:	2300      	movs	r3, #0
 800a58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a58e:	2320      	movs	r3, #32
 800a590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a594:	f8cd 800c 	str.w	r8, [sp, #12]
 800a598:	2330      	movs	r3, #48	@ 0x30
 800a59a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a738 <_svfiprintf_r+0x1e4>
 800a59e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5a2:	f04f 0901 	mov.w	r9, #1
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	469a      	mov	sl, r3
 800a5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ae:	b10a      	cbz	r2, 800a5b4 <_svfiprintf_r+0x60>
 800a5b0:	2a25      	cmp	r2, #37	@ 0x25
 800a5b2:	d1f9      	bne.n	800a5a8 <_svfiprintf_r+0x54>
 800a5b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5b8:	d00b      	beq.n	800a5d2 <_svfiprintf_r+0x7e>
 800a5ba:	465b      	mov	r3, fp
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	f7ff ff6b 	bl	800a49c <__ssputs_r>
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	f000 80a7 	beq.w	800a71a <_svfiprintf_r+0x1c6>
 800a5cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ce:	445a      	add	r2, fp
 800a5d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 809f 	beq.w	800a71a <_svfiprintf_r+0x1c6>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e6:	f10a 0a01 	add.w	sl, sl, #1
 800a5ea:	9304      	str	r3, [sp, #16]
 800a5ec:	9307      	str	r3, [sp, #28]
 800a5ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5f4:	4654      	mov	r4, sl
 800a5f6:	2205      	movs	r2, #5
 800a5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fc:	484e      	ldr	r0, [pc, #312]	@ (800a738 <_svfiprintf_r+0x1e4>)
 800a5fe:	f7f5 fe17 	bl	8000230 <memchr>
 800a602:	9a04      	ldr	r2, [sp, #16]
 800a604:	b9d8      	cbnz	r0, 800a63e <_svfiprintf_r+0xea>
 800a606:	06d0      	lsls	r0, r2, #27
 800a608:	bf44      	itt	mi
 800a60a:	2320      	movmi	r3, #32
 800a60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a610:	0711      	lsls	r1, r2, #28
 800a612:	bf44      	itt	mi
 800a614:	232b      	movmi	r3, #43	@ 0x2b
 800a616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a61a:	f89a 3000 	ldrb.w	r3, [sl]
 800a61e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a620:	d015      	beq.n	800a64e <_svfiprintf_r+0xfa>
 800a622:	9a07      	ldr	r2, [sp, #28]
 800a624:	4654      	mov	r4, sl
 800a626:	2000      	movs	r0, #0
 800a628:	f04f 0c0a 	mov.w	ip, #10
 800a62c:	4621      	mov	r1, r4
 800a62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a632:	3b30      	subs	r3, #48	@ 0x30
 800a634:	2b09      	cmp	r3, #9
 800a636:	d94b      	bls.n	800a6d0 <_svfiprintf_r+0x17c>
 800a638:	b1b0      	cbz	r0, 800a668 <_svfiprintf_r+0x114>
 800a63a:	9207      	str	r2, [sp, #28]
 800a63c:	e014      	b.n	800a668 <_svfiprintf_r+0x114>
 800a63e:	eba0 0308 	sub.w	r3, r0, r8
 800a642:	fa09 f303 	lsl.w	r3, r9, r3
 800a646:	4313      	orrs	r3, r2
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	46a2      	mov	sl, r4
 800a64c:	e7d2      	b.n	800a5f4 <_svfiprintf_r+0xa0>
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	1d19      	adds	r1, r3, #4
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	9103      	str	r1, [sp, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	bfbb      	ittet	lt
 800a65a:	425b      	neglt	r3, r3
 800a65c:	f042 0202 	orrlt.w	r2, r2, #2
 800a660:	9307      	strge	r3, [sp, #28]
 800a662:	9307      	strlt	r3, [sp, #28]
 800a664:	bfb8      	it	lt
 800a666:	9204      	strlt	r2, [sp, #16]
 800a668:	7823      	ldrb	r3, [r4, #0]
 800a66a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a66c:	d10a      	bne.n	800a684 <_svfiprintf_r+0x130>
 800a66e:	7863      	ldrb	r3, [r4, #1]
 800a670:	2b2a      	cmp	r3, #42	@ 0x2a
 800a672:	d132      	bne.n	800a6da <_svfiprintf_r+0x186>
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	9203      	str	r2, [sp, #12]
 800a67c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a680:	3402      	adds	r4, #2
 800a682:	9305      	str	r3, [sp, #20]
 800a684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a748 <_svfiprintf_r+0x1f4>
 800a688:	7821      	ldrb	r1, [r4, #0]
 800a68a:	2203      	movs	r2, #3
 800a68c:	4650      	mov	r0, sl
 800a68e:	f7f5 fdcf 	bl	8000230 <memchr>
 800a692:	b138      	cbz	r0, 800a6a4 <_svfiprintf_r+0x150>
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	eba0 000a 	sub.w	r0, r0, sl
 800a69a:	2240      	movs	r2, #64	@ 0x40
 800a69c:	4082      	lsls	r2, r0
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	3401      	adds	r4, #1
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a8:	4824      	ldr	r0, [pc, #144]	@ (800a73c <_svfiprintf_r+0x1e8>)
 800a6aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6ae:	2206      	movs	r2, #6
 800a6b0:	f7f5 fdbe 	bl	8000230 <memchr>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d036      	beq.n	800a726 <_svfiprintf_r+0x1d2>
 800a6b8:	4b21      	ldr	r3, [pc, #132]	@ (800a740 <_svfiprintf_r+0x1ec>)
 800a6ba:	bb1b      	cbnz	r3, 800a704 <_svfiprintf_r+0x1b0>
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	3307      	adds	r3, #7
 800a6c0:	f023 0307 	bic.w	r3, r3, #7
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	9303      	str	r3, [sp, #12]
 800a6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ca:	4433      	add	r3, r6
 800a6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ce:	e76a      	b.n	800a5a6 <_svfiprintf_r+0x52>
 800a6d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	e7a8      	b.n	800a62c <_svfiprintf_r+0xd8>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	3401      	adds	r4, #1
 800a6de:	9305      	str	r3, [sp, #20]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f04f 0c0a 	mov.w	ip, #10
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ec:	3a30      	subs	r2, #48	@ 0x30
 800a6ee:	2a09      	cmp	r2, #9
 800a6f0:	d903      	bls.n	800a6fa <_svfiprintf_r+0x1a6>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0c6      	beq.n	800a684 <_svfiprintf_r+0x130>
 800a6f6:	9105      	str	r1, [sp, #20]
 800a6f8:	e7c4      	b.n	800a684 <_svfiprintf_r+0x130>
 800a6fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6fe:	4604      	mov	r4, r0
 800a700:	2301      	movs	r3, #1
 800a702:	e7f0      	b.n	800a6e6 <_svfiprintf_r+0x192>
 800a704:	ab03      	add	r3, sp, #12
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	462a      	mov	r2, r5
 800a70a:	4b0e      	ldr	r3, [pc, #56]	@ (800a744 <_svfiprintf_r+0x1f0>)
 800a70c:	a904      	add	r1, sp, #16
 800a70e:	4638      	mov	r0, r7
 800a710:	f7fc fcb8 	bl	8007084 <_printf_float>
 800a714:	1c42      	adds	r2, r0, #1
 800a716:	4606      	mov	r6, r0
 800a718:	d1d6      	bne.n	800a6c8 <_svfiprintf_r+0x174>
 800a71a:	89ab      	ldrh	r3, [r5, #12]
 800a71c:	065b      	lsls	r3, r3, #25
 800a71e:	f53f af2d 	bmi.w	800a57c <_svfiprintf_r+0x28>
 800a722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a724:	e72c      	b.n	800a580 <_svfiprintf_r+0x2c>
 800a726:	ab03      	add	r3, sp, #12
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	462a      	mov	r2, r5
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <_svfiprintf_r+0x1f0>)
 800a72e:	a904      	add	r1, sp, #16
 800a730:	4638      	mov	r0, r7
 800a732:	f7fc ff3f 	bl	80075b4 <_printf_i>
 800a736:	e7ed      	b.n	800a714 <_svfiprintf_r+0x1c0>
 800a738:	0800bb51 	.word	0x0800bb51
 800a73c:	0800bb5b 	.word	0x0800bb5b
 800a740:	08007085 	.word	0x08007085
 800a744:	0800a49d 	.word	0x0800a49d
 800a748:	0800bb57 	.word	0x0800bb57

0800a74c <__sflush_r>:
 800a74c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	0716      	lsls	r6, r2, #28
 800a756:	4605      	mov	r5, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	d454      	bmi.n	800a806 <__sflush_r+0xba>
 800a75c:	684b      	ldr	r3, [r1, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dc02      	bgt.n	800a768 <__sflush_r+0x1c>
 800a762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	dd48      	ble.n	800a7fa <__sflush_r+0xae>
 800a768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d045      	beq.n	800a7fa <__sflush_r+0xae>
 800a76e:	2300      	movs	r3, #0
 800a770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a774:	682f      	ldr	r7, [r5, #0]
 800a776:	6a21      	ldr	r1, [r4, #32]
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	d030      	beq.n	800a7de <__sflush_r+0x92>
 800a77c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	0759      	lsls	r1, r3, #29
 800a782:	d505      	bpl.n	800a790 <__sflush_r+0x44>
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a78a:	b10b      	cbz	r3, 800a790 <__sflush_r+0x44>
 800a78c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a794:	6a21      	ldr	r1, [r4, #32]
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	d106      	bne.n	800a7ae <__sflush_r+0x62>
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	291d      	cmp	r1, #29
 800a7a4:	d82b      	bhi.n	800a7fe <__sflush_r+0xb2>
 800a7a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a850 <__sflush_r+0x104>)
 800a7a8:	410a      	asrs	r2, r1
 800a7aa:	07d6      	lsls	r6, r2, #31
 800a7ac:	d427      	bmi.n	800a7fe <__sflush_r+0xb2>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6062      	str	r2, [r4, #4]
 800a7b2:	04d9      	lsls	r1, r3, #19
 800a7b4:	6922      	ldr	r2, [r4, #16]
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	d504      	bpl.n	800a7c4 <__sflush_r+0x78>
 800a7ba:	1c42      	adds	r2, r0, #1
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0x76>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	b903      	cbnz	r3, 800a7c4 <__sflush_r+0x78>
 800a7c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	b1b9      	cbz	r1, 800a7fa <__sflush_r+0xae>
 800a7ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d002      	beq.n	800a7d8 <__sflush_r+0x8c>
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7fe fa2c 	bl	8008c30 <_free_r>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7dc:	e00d      	b.n	800a7fa <__sflush_r+0xae>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b0      	blx	r6
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	1c50      	adds	r0, r2, #1
 800a7e8:	d1c9      	bne.n	800a77e <__sflush_r+0x32>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0c6      	beq.n	800a77e <__sflush_r+0x32>
 800a7f0:	2b1d      	cmp	r3, #29
 800a7f2:	d001      	beq.n	800a7f8 <__sflush_r+0xac>
 800a7f4:	2b16      	cmp	r3, #22
 800a7f6:	d11e      	bne.n	800a836 <__sflush_r+0xea>
 800a7f8:	602f      	str	r7, [r5, #0]
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e022      	b.n	800a844 <__sflush_r+0xf8>
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a802:	b21b      	sxth	r3, r3
 800a804:	e01b      	b.n	800a83e <__sflush_r+0xf2>
 800a806:	690f      	ldr	r7, [r1, #16]
 800a808:	2f00      	cmp	r7, #0
 800a80a:	d0f6      	beq.n	800a7fa <__sflush_r+0xae>
 800a80c:	0793      	lsls	r3, r2, #30
 800a80e:	680e      	ldr	r6, [r1, #0]
 800a810:	bf08      	it	eq
 800a812:	694b      	ldreq	r3, [r1, #20]
 800a814:	600f      	str	r7, [r1, #0]
 800a816:	bf18      	it	ne
 800a818:	2300      	movne	r3, #0
 800a81a:	eba6 0807 	sub.w	r8, r6, r7
 800a81e:	608b      	str	r3, [r1, #8]
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	dde9      	ble.n	800a7fa <__sflush_r+0xae>
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a82a:	4643      	mov	r3, r8
 800a82c:	463a      	mov	r2, r7
 800a82e:	4628      	mov	r0, r5
 800a830:	47b0      	blx	r6
 800a832:	2800      	cmp	r0, #0
 800a834:	dc08      	bgt.n	800a848 <__sflush_r+0xfc>
 800a836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	4407      	add	r7, r0
 800a84a:	eba8 0800 	sub.w	r8, r8, r0
 800a84e:	e7e7      	b.n	800a820 <__sflush_r+0xd4>
 800a850:	dfbffffe 	.word	0xdfbffffe

0800a854 <_fflush_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b913      	cbnz	r3, 800a864 <_fflush_r+0x10>
 800a85e:	2500      	movs	r5, #0
 800a860:	4628      	mov	r0, r5
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	b118      	cbz	r0, 800a86e <_fflush_r+0x1a>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <_fflush_r+0x1a>
 800a86a:	f7fd fa63 	bl	8007d34 <__sinit>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f3      	beq.n	800a85e <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x32>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x32>
 800a880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a882:	f7fd fb80 	bl	8007f86 <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff5f 	bl	800a74c <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a890:	07da      	lsls	r2, r3, #31
 800a892:	4605      	mov	r5, r0
 800a894:	d4e4      	bmi.n	800a860 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4e1      	bmi.n	800a860 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a89e:	f7fd fb73 	bl	8007f88 <__retarget_lock_release_recursive>
 800a8a2:	e7dd      	b.n	800a860 <_fflush_r+0xc>

0800a8a4 <memmove>:
 800a8a4:	4288      	cmp	r0, r1
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	eb01 0402 	add.w	r4, r1, r2
 800a8ac:	d902      	bls.n	800a8b4 <memmove+0x10>
 800a8ae:	4284      	cmp	r4, r0
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	d807      	bhi.n	800a8c4 <memmove+0x20>
 800a8b4:	1e43      	subs	r3, r0, #1
 800a8b6:	42a1      	cmp	r1, r4
 800a8b8:	d008      	beq.n	800a8cc <memmove+0x28>
 800a8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c2:	e7f8      	b.n	800a8b6 <memmove+0x12>
 800a8c4:	4402      	add	r2, r0
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	428a      	cmp	r2, r1
 800a8ca:	d100      	bne.n	800a8ce <memmove+0x2a>
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8d6:	e7f7      	b.n	800a8c8 <memmove+0x24>

0800a8d8 <strncmp>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	b16a      	cbz	r2, 800a8f8 <strncmp+0x20>
 800a8dc:	3901      	subs	r1, #1
 800a8de:	1884      	adds	r4, r0, r2
 800a8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d103      	bne.n	800a8f4 <strncmp+0x1c>
 800a8ec:	42a0      	cmp	r0, r4
 800a8ee:	d001      	beq.n	800a8f4 <strncmp+0x1c>
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d1f5      	bne.n	800a8e0 <strncmp+0x8>
 800a8f4:	1ad0      	subs	r0, r2, r3
 800a8f6:	bd10      	pop	{r4, pc}
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	e7fc      	b.n	800a8f6 <strncmp+0x1e>

0800a8fc <_sbrk_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d06      	ldr	r5, [pc, #24]	@ (800a918 <_sbrk_r+0x1c>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	f7f8 fb5c 	bl	8002fc4 <_sbrk>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_sbrk_r+0x1a>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_sbrk_r+0x1a>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	20000728 	.word	0x20000728

0800a91c <memcpy>:
 800a91c:	440a      	add	r2, r1
 800a91e:	4291      	cmp	r1, r2
 800a920:	f100 33ff 	add.w	r3, r0, #4294967295
 800a924:	d100      	bne.n	800a928 <memcpy+0xc>
 800a926:	4770      	bx	lr
 800a928:	b510      	push	{r4, lr}
 800a92a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a92e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a932:	4291      	cmp	r1, r2
 800a934:	d1f9      	bne.n	800a92a <memcpy+0xe>
 800a936:	bd10      	pop	{r4, pc}

0800a938 <nan>:
 800a938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a940 <nan+0x8>
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	00000000 	.word	0x00000000
 800a944:	7ff80000 	.word	0x7ff80000

0800a948 <__assert_func>:
 800a948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a94a:	4614      	mov	r4, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <__assert_func+0x2c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4605      	mov	r5, r0
 800a954:	68d8      	ldr	r0, [r3, #12]
 800a956:	b954      	cbnz	r4, 800a96e <__assert_func+0x26>
 800a958:	4b07      	ldr	r3, [pc, #28]	@ (800a978 <__assert_func+0x30>)
 800a95a:	461c      	mov	r4, r3
 800a95c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a960:	9100      	str	r1, [sp, #0]
 800a962:	462b      	mov	r3, r5
 800a964:	4905      	ldr	r1, [pc, #20]	@ (800a97c <__assert_func+0x34>)
 800a966:	f000 fba7 	bl	800b0b8 <fiprintf>
 800a96a:	f000 fbb7 	bl	800b0dc <abort>
 800a96e:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <__assert_func+0x38>)
 800a970:	e7f4      	b.n	800a95c <__assert_func+0x14>
 800a972:	bf00      	nop
 800a974:	2000019c 	.word	0x2000019c
 800a978:	0800bba5 	.word	0x0800bba5
 800a97c:	0800bb77 	.word	0x0800bb77
 800a980:	0800bb6a 	.word	0x0800bb6a

0800a984 <_calloc_r>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	fba1 5402 	umull	r5, r4, r1, r2
 800a98a:	b93c      	cbnz	r4, 800a99c <_calloc_r+0x18>
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7fe f9c3 	bl	8008d18 <_malloc_r>
 800a992:	4606      	mov	r6, r0
 800a994:	b928      	cbnz	r0, 800a9a2 <_calloc_r+0x1e>
 800a996:	2600      	movs	r6, #0
 800a998:	4630      	mov	r0, r6
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	220c      	movs	r2, #12
 800a99e:	6002      	str	r2, [r0, #0]
 800a9a0:	e7f9      	b.n	800a996 <_calloc_r+0x12>
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f7fd fa5e 	bl	8007e66 <memset>
 800a9aa:	e7f5      	b.n	800a998 <_calloc_r+0x14>

0800a9ac <rshift>:
 800a9ac:	6903      	ldr	r3, [r0, #16]
 800a9ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9ba:	f100 0414 	add.w	r4, r0, #20
 800a9be:	dd45      	ble.n	800aa4c <rshift+0xa0>
 800a9c0:	f011 011f 	ands.w	r1, r1, #31
 800a9c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9cc:	d10c      	bne.n	800a9e8 <rshift+0x3c>
 800a9ce:	f100 0710 	add.w	r7, r0, #16
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	42b1      	cmp	r1, r6
 800a9d6:	d334      	bcc.n	800aa42 <rshift+0x96>
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	1eea      	subs	r2, r5, #3
 800a9de:	4296      	cmp	r6, r2
 800a9e0:	bf38      	it	cc
 800a9e2:	2300      	movcc	r3, #0
 800a9e4:	4423      	add	r3, r4
 800a9e6:	e015      	b.n	800aa14 <rshift+0x68>
 800a9e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9ec:	f1c1 0820 	rsb	r8, r1, #32
 800a9f0:	40cf      	lsrs	r7, r1
 800a9f2:	f105 0e04 	add.w	lr, r5, #4
 800a9f6:	46a1      	mov	r9, r4
 800a9f8:	4576      	cmp	r6, lr
 800a9fa:	46f4      	mov	ip, lr
 800a9fc:	d815      	bhi.n	800aa2a <rshift+0x7e>
 800a9fe:	1a9a      	subs	r2, r3, r2
 800aa00:	0092      	lsls	r2, r2, #2
 800aa02:	3a04      	subs	r2, #4
 800aa04:	3501      	adds	r5, #1
 800aa06:	42ae      	cmp	r6, r5
 800aa08:	bf38      	it	cc
 800aa0a:	2200      	movcc	r2, #0
 800aa0c:	18a3      	adds	r3, r4, r2
 800aa0e:	50a7      	str	r7, [r4, r2]
 800aa10:	b107      	cbz	r7, 800aa14 <rshift+0x68>
 800aa12:	3304      	adds	r3, #4
 800aa14:	1b1a      	subs	r2, r3, r4
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa1c:	bf08      	it	eq
 800aa1e:	2300      	moveq	r3, #0
 800aa20:	6102      	str	r2, [r0, #16]
 800aa22:	bf08      	it	eq
 800aa24:	6143      	streq	r3, [r0, #20]
 800aa26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa2a:	f8dc c000 	ldr.w	ip, [ip]
 800aa2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa32:	ea4c 0707 	orr.w	r7, ip, r7
 800aa36:	f849 7b04 	str.w	r7, [r9], #4
 800aa3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa3e:	40cf      	lsrs	r7, r1
 800aa40:	e7da      	b.n	800a9f8 <rshift+0x4c>
 800aa42:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa46:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa4a:	e7c3      	b.n	800a9d4 <rshift+0x28>
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	e7e1      	b.n	800aa14 <rshift+0x68>

0800aa50 <__hexdig_fun>:
 800aa50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	d802      	bhi.n	800aa5e <__hexdig_fun+0xe>
 800aa58:	3820      	subs	r0, #32
 800aa5a:	b2c0      	uxtb	r0, r0
 800aa5c:	4770      	bx	lr
 800aa5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d801      	bhi.n	800aa6a <__hexdig_fun+0x1a>
 800aa66:	3847      	subs	r0, #71	@ 0x47
 800aa68:	e7f7      	b.n	800aa5a <__hexdig_fun+0xa>
 800aa6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d801      	bhi.n	800aa76 <__hexdig_fun+0x26>
 800aa72:	3827      	subs	r0, #39	@ 0x27
 800aa74:	e7f1      	b.n	800aa5a <__hexdig_fun+0xa>
 800aa76:	2000      	movs	r0, #0
 800aa78:	4770      	bx	lr
	...

0800aa7c <__gethex>:
 800aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	b085      	sub	sp, #20
 800aa82:	468a      	mov	sl, r1
 800aa84:	9302      	str	r3, [sp, #8]
 800aa86:	680b      	ldr	r3, [r1, #0]
 800aa88:	9001      	str	r0, [sp, #4]
 800aa8a:	4690      	mov	r8, r2
 800aa8c:	1c9c      	adds	r4, r3, #2
 800aa8e:	46a1      	mov	r9, r4
 800aa90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa94:	2830      	cmp	r0, #48	@ 0x30
 800aa96:	d0fa      	beq.n	800aa8e <__gethex+0x12>
 800aa98:	eba9 0303 	sub.w	r3, r9, r3
 800aa9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800aaa0:	f7ff ffd6 	bl	800aa50 <__hexdig_fun>
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d168      	bne.n	800ab7c <__gethex+0x100>
 800aaaa:	49a0      	ldr	r1, [pc, #640]	@ (800ad2c <__gethex+0x2b0>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	4648      	mov	r0, r9
 800aab0:	f7ff ff12 	bl	800a8d8 <strncmp>
 800aab4:	4607      	mov	r7, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d167      	bne.n	800ab8a <__gethex+0x10e>
 800aaba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aabe:	4626      	mov	r6, r4
 800aac0:	f7ff ffc6 	bl	800aa50 <__hexdig_fun>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d062      	beq.n	800ab8e <__gethex+0x112>
 800aac8:	4623      	mov	r3, r4
 800aaca:	7818      	ldrb	r0, [r3, #0]
 800aacc:	2830      	cmp	r0, #48	@ 0x30
 800aace:	4699      	mov	r9, r3
 800aad0:	f103 0301 	add.w	r3, r3, #1
 800aad4:	d0f9      	beq.n	800aaca <__gethex+0x4e>
 800aad6:	f7ff ffbb 	bl	800aa50 <__hexdig_fun>
 800aada:	fab0 f580 	clz	r5, r0
 800aade:	096d      	lsrs	r5, r5, #5
 800aae0:	f04f 0b01 	mov.w	fp, #1
 800aae4:	464a      	mov	r2, r9
 800aae6:	4616      	mov	r6, r2
 800aae8:	3201      	adds	r2, #1
 800aaea:	7830      	ldrb	r0, [r6, #0]
 800aaec:	f7ff ffb0 	bl	800aa50 <__hexdig_fun>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d1f8      	bne.n	800aae6 <__gethex+0x6a>
 800aaf4:	498d      	ldr	r1, [pc, #564]	@ (800ad2c <__gethex+0x2b0>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7ff feed 	bl	800a8d8 <strncmp>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d13f      	bne.n	800ab82 <__gethex+0x106>
 800ab02:	b944      	cbnz	r4, 800ab16 <__gethex+0x9a>
 800ab04:	1c74      	adds	r4, r6, #1
 800ab06:	4622      	mov	r2, r4
 800ab08:	4616      	mov	r6, r2
 800ab0a:	3201      	adds	r2, #1
 800ab0c:	7830      	ldrb	r0, [r6, #0]
 800ab0e:	f7ff ff9f 	bl	800aa50 <__hexdig_fun>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d1f8      	bne.n	800ab08 <__gethex+0x8c>
 800ab16:	1ba4      	subs	r4, r4, r6
 800ab18:	00a7      	lsls	r7, r4, #2
 800ab1a:	7833      	ldrb	r3, [r6, #0]
 800ab1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab20:	2b50      	cmp	r3, #80	@ 0x50
 800ab22:	d13e      	bne.n	800aba2 <__gethex+0x126>
 800ab24:	7873      	ldrb	r3, [r6, #1]
 800ab26:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab28:	d033      	beq.n	800ab92 <__gethex+0x116>
 800ab2a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab2c:	d034      	beq.n	800ab98 <__gethex+0x11c>
 800ab2e:	1c71      	adds	r1, r6, #1
 800ab30:	2400      	movs	r4, #0
 800ab32:	7808      	ldrb	r0, [r1, #0]
 800ab34:	f7ff ff8c 	bl	800aa50 <__hexdig_fun>
 800ab38:	1e43      	subs	r3, r0, #1
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b18      	cmp	r3, #24
 800ab3e:	d830      	bhi.n	800aba2 <__gethex+0x126>
 800ab40:	f1a0 0210 	sub.w	r2, r0, #16
 800ab44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab48:	f7ff ff82 	bl	800aa50 <__hexdig_fun>
 800ab4c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab50:	fa5f fc8c 	uxtb.w	ip, ip
 800ab54:	f1bc 0f18 	cmp.w	ip, #24
 800ab58:	f04f 030a 	mov.w	r3, #10
 800ab5c:	d91e      	bls.n	800ab9c <__gethex+0x120>
 800ab5e:	b104      	cbz	r4, 800ab62 <__gethex+0xe6>
 800ab60:	4252      	negs	r2, r2
 800ab62:	4417      	add	r7, r2
 800ab64:	f8ca 1000 	str.w	r1, [sl]
 800ab68:	b1ed      	cbz	r5, 800aba6 <__gethex+0x12a>
 800ab6a:	f1bb 0f00 	cmp.w	fp, #0
 800ab6e:	bf0c      	ite	eq
 800ab70:	2506      	moveq	r5, #6
 800ab72:	2500      	movne	r5, #0
 800ab74:	4628      	mov	r0, r5
 800ab76:	b005      	add	sp, #20
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7c:	2500      	movs	r5, #0
 800ab7e:	462c      	mov	r4, r5
 800ab80:	e7b0      	b.n	800aae4 <__gethex+0x68>
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	d1c7      	bne.n	800ab16 <__gethex+0x9a>
 800ab86:	4627      	mov	r7, r4
 800ab88:	e7c7      	b.n	800ab1a <__gethex+0x9e>
 800ab8a:	464e      	mov	r6, r9
 800ab8c:	462f      	mov	r7, r5
 800ab8e:	2501      	movs	r5, #1
 800ab90:	e7c3      	b.n	800ab1a <__gethex+0x9e>
 800ab92:	2400      	movs	r4, #0
 800ab94:	1cb1      	adds	r1, r6, #2
 800ab96:	e7cc      	b.n	800ab32 <__gethex+0xb6>
 800ab98:	2401      	movs	r4, #1
 800ab9a:	e7fb      	b.n	800ab94 <__gethex+0x118>
 800ab9c:	fb03 0002 	mla	r0, r3, r2, r0
 800aba0:	e7ce      	b.n	800ab40 <__gethex+0xc4>
 800aba2:	4631      	mov	r1, r6
 800aba4:	e7de      	b.n	800ab64 <__gethex+0xe8>
 800aba6:	eba6 0309 	sub.w	r3, r6, r9
 800abaa:	3b01      	subs	r3, #1
 800abac:	4629      	mov	r1, r5
 800abae:	2b07      	cmp	r3, #7
 800abb0:	dc0a      	bgt.n	800abc8 <__gethex+0x14c>
 800abb2:	9801      	ldr	r0, [sp, #4]
 800abb4:	f7fe f93c 	bl	8008e30 <_Balloc>
 800abb8:	4604      	mov	r4, r0
 800abba:	b940      	cbnz	r0, 800abce <__gethex+0x152>
 800abbc:	4b5c      	ldr	r3, [pc, #368]	@ (800ad30 <__gethex+0x2b4>)
 800abbe:	4602      	mov	r2, r0
 800abc0:	21e4      	movs	r1, #228	@ 0xe4
 800abc2:	485c      	ldr	r0, [pc, #368]	@ (800ad34 <__gethex+0x2b8>)
 800abc4:	f7ff fec0 	bl	800a948 <__assert_func>
 800abc8:	3101      	adds	r1, #1
 800abca:	105b      	asrs	r3, r3, #1
 800abcc:	e7ef      	b.n	800abae <__gethex+0x132>
 800abce:	f100 0a14 	add.w	sl, r0, #20
 800abd2:	2300      	movs	r3, #0
 800abd4:	4655      	mov	r5, sl
 800abd6:	469b      	mov	fp, r3
 800abd8:	45b1      	cmp	r9, r6
 800abda:	d337      	bcc.n	800ac4c <__gethex+0x1d0>
 800abdc:	f845 bb04 	str.w	fp, [r5], #4
 800abe0:	eba5 050a 	sub.w	r5, r5, sl
 800abe4:	10ad      	asrs	r5, r5, #2
 800abe6:	6125      	str	r5, [r4, #16]
 800abe8:	4658      	mov	r0, fp
 800abea:	f7fe fa13 	bl	8009014 <__hi0bits>
 800abee:	016d      	lsls	r5, r5, #5
 800abf0:	f8d8 6000 	ldr.w	r6, [r8]
 800abf4:	1a2d      	subs	r5, r5, r0
 800abf6:	42b5      	cmp	r5, r6
 800abf8:	dd54      	ble.n	800aca4 <__gethex+0x228>
 800abfa:	1bad      	subs	r5, r5, r6
 800abfc:	4629      	mov	r1, r5
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7fe fda7 	bl	8009752 <__any_on>
 800ac04:	4681      	mov	r9, r0
 800ac06:	b178      	cbz	r0, 800ac28 <__gethex+0x1ac>
 800ac08:	1e6b      	subs	r3, r5, #1
 800ac0a:	1159      	asrs	r1, r3, #5
 800ac0c:	f003 021f 	and.w	r2, r3, #31
 800ac10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac14:	f04f 0901 	mov.w	r9, #1
 800ac18:	fa09 f202 	lsl.w	r2, r9, r2
 800ac1c:	420a      	tst	r2, r1
 800ac1e:	d003      	beq.n	800ac28 <__gethex+0x1ac>
 800ac20:	454b      	cmp	r3, r9
 800ac22:	dc36      	bgt.n	800ac92 <__gethex+0x216>
 800ac24:	f04f 0902 	mov.w	r9, #2
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff febe 	bl	800a9ac <rshift>
 800ac30:	442f      	add	r7, r5
 800ac32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac36:	42bb      	cmp	r3, r7
 800ac38:	da42      	bge.n	800acc0 <__gethex+0x244>
 800ac3a:	9801      	ldr	r0, [sp, #4]
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7fe f937 	bl	8008eb0 <_Bfree>
 800ac42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac44:	2300      	movs	r3, #0
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	25a3      	movs	r5, #163	@ 0xa3
 800ac4a:	e793      	b.n	800ab74 <__gethex+0xf8>
 800ac4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac50:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac52:	d012      	beq.n	800ac7a <__gethex+0x1fe>
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d104      	bne.n	800ac62 <__gethex+0x1e6>
 800ac58:	f845 bb04 	str.w	fp, [r5], #4
 800ac5c:	f04f 0b00 	mov.w	fp, #0
 800ac60:	465b      	mov	r3, fp
 800ac62:	7830      	ldrb	r0, [r6, #0]
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	f7ff fef3 	bl	800aa50 <__hexdig_fun>
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	f000 000f 	and.w	r0, r0, #15
 800ac70:	4098      	lsls	r0, r3
 800ac72:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac76:	3304      	adds	r3, #4
 800ac78:	e7ae      	b.n	800abd8 <__gethex+0x15c>
 800ac7a:	45b1      	cmp	r9, r6
 800ac7c:	d8ea      	bhi.n	800ac54 <__gethex+0x1d8>
 800ac7e:	492b      	ldr	r1, [pc, #172]	@ (800ad2c <__gethex+0x2b0>)
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7ff fe27 	bl	800a8d8 <strncmp>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d1e1      	bne.n	800ac54 <__gethex+0x1d8>
 800ac90:	e7a2      	b.n	800abd8 <__gethex+0x15c>
 800ac92:	1ea9      	subs	r1, r5, #2
 800ac94:	4620      	mov	r0, r4
 800ac96:	f7fe fd5c 	bl	8009752 <__any_on>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0c2      	beq.n	800ac24 <__gethex+0x1a8>
 800ac9e:	f04f 0903 	mov.w	r9, #3
 800aca2:	e7c1      	b.n	800ac28 <__gethex+0x1ac>
 800aca4:	da09      	bge.n	800acba <__gethex+0x23e>
 800aca6:	1b75      	subs	r5, r6, r5
 800aca8:	4621      	mov	r1, r4
 800acaa:	9801      	ldr	r0, [sp, #4]
 800acac:	462a      	mov	r2, r5
 800acae:	f7fe fb17 	bl	80092e0 <__lshift>
 800acb2:	1b7f      	subs	r7, r7, r5
 800acb4:	4604      	mov	r4, r0
 800acb6:	f100 0a14 	add.w	sl, r0, #20
 800acba:	f04f 0900 	mov.w	r9, #0
 800acbe:	e7b8      	b.n	800ac32 <__gethex+0x1b6>
 800acc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acc4:	42bd      	cmp	r5, r7
 800acc6:	dd6f      	ble.n	800ada8 <__gethex+0x32c>
 800acc8:	1bed      	subs	r5, r5, r7
 800acca:	42ae      	cmp	r6, r5
 800accc:	dc34      	bgt.n	800ad38 <__gethex+0x2bc>
 800acce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d022      	beq.n	800ad1c <__gethex+0x2a0>
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d024      	beq.n	800ad24 <__gethex+0x2a8>
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d115      	bne.n	800ad0a <__gethex+0x28e>
 800acde:	42ae      	cmp	r6, r5
 800ace0:	d113      	bne.n	800ad0a <__gethex+0x28e>
 800ace2:	2e01      	cmp	r6, #1
 800ace4:	d10b      	bne.n	800acfe <__gethex+0x282>
 800ace6:	9a02      	ldr	r2, [sp, #8]
 800ace8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	2301      	movs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	f8ca 3000 	str.w	r3, [sl]
 800acf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf8:	2562      	movs	r5, #98	@ 0x62
 800acfa:	601c      	str	r4, [r3, #0]
 800acfc:	e73a      	b.n	800ab74 <__gethex+0xf8>
 800acfe:	1e71      	subs	r1, r6, #1
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7fe fd26 	bl	8009752 <__any_on>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d1ed      	bne.n	800ace6 <__gethex+0x26a>
 800ad0a:	9801      	ldr	r0, [sp, #4]
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f7fe f8cf 	bl	8008eb0 <_Bfree>
 800ad12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad14:	2300      	movs	r3, #0
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	2550      	movs	r5, #80	@ 0x50
 800ad1a:	e72b      	b.n	800ab74 <__gethex+0xf8>
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1f3      	bne.n	800ad0a <__gethex+0x28e>
 800ad22:	e7e0      	b.n	800ace6 <__gethex+0x26a>
 800ad24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1dd      	bne.n	800ace6 <__gethex+0x26a>
 800ad2a:	e7ee      	b.n	800ad0a <__gethex+0x28e>
 800ad2c:	0800b9f8 	.word	0x0800b9f8
 800ad30:	0800b891 	.word	0x0800b891
 800ad34:	0800bba6 	.word	0x0800bba6
 800ad38:	1e6f      	subs	r7, r5, #1
 800ad3a:	f1b9 0f00 	cmp.w	r9, #0
 800ad3e:	d130      	bne.n	800ada2 <__gethex+0x326>
 800ad40:	b127      	cbz	r7, 800ad4c <__gethex+0x2d0>
 800ad42:	4639      	mov	r1, r7
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7fe fd04 	bl	8009752 <__any_on>
 800ad4a:	4681      	mov	r9, r0
 800ad4c:	117a      	asrs	r2, r7, #5
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad54:	f007 071f 	and.w	r7, r7, #31
 800ad58:	40bb      	lsls	r3, r7
 800ad5a:	4213      	tst	r3, r2
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4620      	mov	r0, r4
 800ad60:	bf18      	it	ne
 800ad62:	f049 0902 	orrne.w	r9, r9, #2
 800ad66:	f7ff fe21 	bl	800a9ac <rshift>
 800ad6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad6e:	1b76      	subs	r6, r6, r5
 800ad70:	2502      	movs	r5, #2
 800ad72:	f1b9 0f00 	cmp.w	r9, #0
 800ad76:	d047      	beq.n	800ae08 <__gethex+0x38c>
 800ad78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d015      	beq.n	800adac <__gethex+0x330>
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d017      	beq.n	800adb4 <__gethex+0x338>
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d109      	bne.n	800ad9c <__gethex+0x320>
 800ad88:	f019 0f02 	tst.w	r9, #2
 800ad8c:	d006      	beq.n	800ad9c <__gethex+0x320>
 800ad8e:	f8da 3000 	ldr.w	r3, [sl]
 800ad92:	ea49 0903 	orr.w	r9, r9, r3
 800ad96:	f019 0f01 	tst.w	r9, #1
 800ad9a:	d10e      	bne.n	800adba <__gethex+0x33e>
 800ad9c:	f045 0510 	orr.w	r5, r5, #16
 800ada0:	e032      	b.n	800ae08 <__gethex+0x38c>
 800ada2:	f04f 0901 	mov.w	r9, #1
 800ada6:	e7d1      	b.n	800ad4c <__gethex+0x2d0>
 800ada8:	2501      	movs	r5, #1
 800adaa:	e7e2      	b.n	800ad72 <__gethex+0x2f6>
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	f1c3 0301 	rsb	r3, r3, #1
 800adb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f0      	beq.n	800ad9c <__gethex+0x320>
 800adba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adbe:	f104 0314 	add.w	r3, r4, #20
 800adc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adca:	f04f 0c00 	mov.w	ip, #0
 800adce:	4618      	mov	r0, r3
 800add0:	f853 2b04 	ldr.w	r2, [r3], #4
 800add4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800add8:	d01b      	beq.n	800ae12 <__gethex+0x396>
 800adda:	3201      	adds	r2, #1
 800addc:	6002      	str	r2, [r0, #0]
 800adde:	2d02      	cmp	r5, #2
 800ade0:	f104 0314 	add.w	r3, r4, #20
 800ade4:	d13c      	bne.n	800ae60 <__gethex+0x3e4>
 800ade6:	f8d8 2000 	ldr.w	r2, [r8]
 800adea:	3a01      	subs	r2, #1
 800adec:	42b2      	cmp	r2, r6
 800adee:	d109      	bne.n	800ae04 <__gethex+0x388>
 800adf0:	1171      	asrs	r1, r6, #5
 800adf2:	2201      	movs	r2, #1
 800adf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adf8:	f006 061f 	and.w	r6, r6, #31
 800adfc:	fa02 f606 	lsl.w	r6, r2, r6
 800ae00:	421e      	tst	r6, r3
 800ae02:	d13a      	bne.n	800ae7a <__gethex+0x3fe>
 800ae04:	f045 0520 	orr.w	r5, r5, #32
 800ae08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae0a:	601c      	str	r4, [r3, #0]
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	601f      	str	r7, [r3, #0]
 800ae10:	e6b0      	b.n	800ab74 <__gethex+0xf8>
 800ae12:	4299      	cmp	r1, r3
 800ae14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae18:	d8d9      	bhi.n	800adce <__gethex+0x352>
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	459b      	cmp	fp, r3
 800ae1e:	db17      	blt.n	800ae50 <__gethex+0x3d4>
 800ae20:	6861      	ldr	r1, [r4, #4]
 800ae22:	9801      	ldr	r0, [sp, #4]
 800ae24:	3101      	adds	r1, #1
 800ae26:	f7fe f803 	bl	8008e30 <_Balloc>
 800ae2a:	4681      	mov	r9, r0
 800ae2c:	b918      	cbnz	r0, 800ae36 <__gethex+0x3ba>
 800ae2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae98 <__gethex+0x41c>)
 800ae30:	4602      	mov	r2, r0
 800ae32:	2184      	movs	r1, #132	@ 0x84
 800ae34:	e6c5      	b.n	800abc2 <__gethex+0x146>
 800ae36:	6922      	ldr	r2, [r4, #16]
 800ae38:	3202      	adds	r2, #2
 800ae3a:	f104 010c 	add.w	r1, r4, #12
 800ae3e:	0092      	lsls	r2, r2, #2
 800ae40:	300c      	adds	r0, #12
 800ae42:	f7ff fd6b 	bl	800a91c <memcpy>
 800ae46:	4621      	mov	r1, r4
 800ae48:	9801      	ldr	r0, [sp, #4]
 800ae4a:	f7fe f831 	bl	8008eb0 <_Bfree>
 800ae4e:	464c      	mov	r4, r9
 800ae50:	6923      	ldr	r3, [r4, #16]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae58:	6122      	str	r2, [r4, #16]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	615a      	str	r2, [r3, #20]
 800ae5e:	e7be      	b.n	800adde <__gethex+0x362>
 800ae60:	6922      	ldr	r2, [r4, #16]
 800ae62:	455a      	cmp	r2, fp
 800ae64:	dd0b      	ble.n	800ae7e <__gethex+0x402>
 800ae66:	2101      	movs	r1, #1
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f7ff fd9f 	bl	800a9ac <rshift>
 800ae6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae72:	3701      	adds	r7, #1
 800ae74:	42bb      	cmp	r3, r7
 800ae76:	f6ff aee0 	blt.w	800ac3a <__gethex+0x1be>
 800ae7a:	2501      	movs	r5, #1
 800ae7c:	e7c2      	b.n	800ae04 <__gethex+0x388>
 800ae7e:	f016 061f 	ands.w	r6, r6, #31
 800ae82:	d0fa      	beq.n	800ae7a <__gethex+0x3fe>
 800ae84:	4453      	add	r3, sl
 800ae86:	f1c6 0620 	rsb	r6, r6, #32
 800ae8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae8e:	f7fe f8c1 	bl	8009014 <__hi0bits>
 800ae92:	42b0      	cmp	r0, r6
 800ae94:	dbe7      	blt.n	800ae66 <__gethex+0x3ea>
 800ae96:	e7f0      	b.n	800ae7a <__gethex+0x3fe>
 800ae98:	0800b891 	.word	0x0800b891

0800ae9c <L_shift>:
 800ae9c:	f1c2 0208 	rsb	r2, r2, #8
 800aea0:	0092      	lsls	r2, r2, #2
 800aea2:	b570      	push	{r4, r5, r6, lr}
 800aea4:	f1c2 0620 	rsb	r6, r2, #32
 800aea8:	6843      	ldr	r3, [r0, #4]
 800aeaa:	6804      	ldr	r4, [r0, #0]
 800aeac:	fa03 f506 	lsl.w	r5, r3, r6
 800aeb0:	432c      	orrs	r4, r5
 800aeb2:	40d3      	lsrs	r3, r2
 800aeb4:	6004      	str	r4, [r0, #0]
 800aeb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeba:	4288      	cmp	r0, r1
 800aebc:	d3f4      	bcc.n	800aea8 <L_shift+0xc>
 800aebe:	bd70      	pop	{r4, r5, r6, pc}

0800aec0 <__match>:
 800aec0:	b530      	push	{r4, r5, lr}
 800aec2:	6803      	ldr	r3, [r0, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeca:	b914      	cbnz	r4, 800aed2 <__match+0x12>
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	2001      	movs	r0, #1
 800aed0:	bd30      	pop	{r4, r5, pc}
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aeda:	2d19      	cmp	r5, #25
 800aedc:	bf98      	it	ls
 800aede:	3220      	addls	r2, #32
 800aee0:	42a2      	cmp	r2, r4
 800aee2:	d0f0      	beq.n	800aec6 <__match+0x6>
 800aee4:	2000      	movs	r0, #0
 800aee6:	e7f3      	b.n	800aed0 <__match+0x10>

0800aee8 <__hexnan>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	680b      	ldr	r3, [r1, #0]
 800aeee:	6801      	ldr	r1, [r0, #0]
 800aef0:	115e      	asrs	r6, r3, #5
 800aef2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aef6:	f013 031f 	ands.w	r3, r3, #31
 800aefa:	b087      	sub	sp, #28
 800aefc:	bf18      	it	ne
 800aefe:	3604      	addne	r6, #4
 800af00:	2500      	movs	r5, #0
 800af02:	1f37      	subs	r7, r6, #4
 800af04:	4682      	mov	sl, r0
 800af06:	4690      	mov	r8, r2
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800af0e:	46b9      	mov	r9, r7
 800af10:	463c      	mov	r4, r7
 800af12:	9502      	str	r5, [sp, #8]
 800af14:	46ab      	mov	fp, r5
 800af16:	784a      	ldrb	r2, [r1, #1]
 800af18:	1c4b      	adds	r3, r1, #1
 800af1a:	9303      	str	r3, [sp, #12]
 800af1c:	b342      	cbz	r2, 800af70 <__hexnan+0x88>
 800af1e:	4610      	mov	r0, r2
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	9204      	str	r2, [sp, #16]
 800af24:	f7ff fd94 	bl	800aa50 <__hexdig_fun>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d151      	bne.n	800afd0 <__hexnan+0xe8>
 800af2c:	9a04      	ldr	r2, [sp, #16]
 800af2e:	9905      	ldr	r1, [sp, #20]
 800af30:	2a20      	cmp	r2, #32
 800af32:	d818      	bhi.n	800af66 <__hexnan+0x7e>
 800af34:	9b02      	ldr	r3, [sp, #8]
 800af36:	459b      	cmp	fp, r3
 800af38:	dd13      	ble.n	800af62 <__hexnan+0x7a>
 800af3a:	454c      	cmp	r4, r9
 800af3c:	d206      	bcs.n	800af4c <__hexnan+0x64>
 800af3e:	2d07      	cmp	r5, #7
 800af40:	dc04      	bgt.n	800af4c <__hexnan+0x64>
 800af42:	462a      	mov	r2, r5
 800af44:	4649      	mov	r1, r9
 800af46:	4620      	mov	r0, r4
 800af48:	f7ff ffa8 	bl	800ae9c <L_shift>
 800af4c:	4544      	cmp	r4, r8
 800af4e:	d952      	bls.n	800aff6 <__hexnan+0x10e>
 800af50:	2300      	movs	r3, #0
 800af52:	f1a4 0904 	sub.w	r9, r4, #4
 800af56:	f844 3c04 	str.w	r3, [r4, #-4]
 800af5a:	f8cd b008 	str.w	fp, [sp, #8]
 800af5e:	464c      	mov	r4, r9
 800af60:	461d      	mov	r5, r3
 800af62:	9903      	ldr	r1, [sp, #12]
 800af64:	e7d7      	b.n	800af16 <__hexnan+0x2e>
 800af66:	2a29      	cmp	r2, #41	@ 0x29
 800af68:	d157      	bne.n	800b01a <__hexnan+0x132>
 800af6a:	3102      	adds	r1, #2
 800af6c:	f8ca 1000 	str.w	r1, [sl]
 800af70:	f1bb 0f00 	cmp.w	fp, #0
 800af74:	d051      	beq.n	800b01a <__hexnan+0x132>
 800af76:	454c      	cmp	r4, r9
 800af78:	d206      	bcs.n	800af88 <__hexnan+0xa0>
 800af7a:	2d07      	cmp	r5, #7
 800af7c:	dc04      	bgt.n	800af88 <__hexnan+0xa0>
 800af7e:	462a      	mov	r2, r5
 800af80:	4649      	mov	r1, r9
 800af82:	4620      	mov	r0, r4
 800af84:	f7ff ff8a 	bl	800ae9c <L_shift>
 800af88:	4544      	cmp	r4, r8
 800af8a:	d936      	bls.n	800affa <__hexnan+0x112>
 800af8c:	f1a8 0204 	sub.w	r2, r8, #4
 800af90:	4623      	mov	r3, r4
 800af92:	f853 1b04 	ldr.w	r1, [r3], #4
 800af96:	f842 1f04 	str.w	r1, [r2, #4]!
 800af9a:	429f      	cmp	r7, r3
 800af9c:	d2f9      	bcs.n	800af92 <__hexnan+0xaa>
 800af9e:	1b3b      	subs	r3, r7, r4
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	3304      	adds	r3, #4
 800afa6:	3401      	adds	r4, #1
 800afa8:	3e03      	subs	r6, #3
 800afaa:	42b4      	cmp	r4, r6
 800afac:	bf88      	it	hi
 800afae:	2304      	movhi	r3, #4
 800afb0:	4443      	add	r3, r8
 800afb2:	2200      	movs	r2, #0
 800afb4:	f843 2b04 	str.w	r2, [r3], #4
 800afb8:	429f      	cmp	r7, r3
 800afba:	d2fb      	bcs.n	800afb4 <__hexnan+0xcc>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	b91b      	cbnz	r3, 800afc8 <__hexnan+0xe0>
 800afc0:	4547      	cmp	r7, r8
 800afc2:	d128      	bne.n	800b016 <__hexnan+0x12e>
 800afc4:	2301      	movs	r3, #1
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	2005      	movs	r0, #5
 800afca:	b007      	add	sp, #28
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd0:	3501      	adds	r5, #1
 800afd2:	2d08      	cmp	r5, #8
 800afd4:	f10b 0b01 	add.w	fp, fp, #1
 800afd8:	dd06      	ble.n	800afe8 <__hexnan+0x100>
 800afda:	4544      	cmp	r4, r8
 800afdc:	d9c1      	bls.n	800af62 <__hexnan+0x7a>
 800afde:	2300      	movs	r3, #0
 800afe0:	f844 3c04 	str.w	r3, [r4, #-4]
 800afe4:	2501      	movs	r5, #1
 800afe6:	3c04      	subs	r4, #4
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	f000 000f 	and.w	r0, r0, #15
 800afee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	e7b5      	b.n	800af62 <__hexnan+0x7a>
 800aff6:	2508      	movs	r5, #8
 800aff8:	e7b3      	b.n	800af62 <__hexnan+0x7a>
 800affa:	9b01      	ldr	r3, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0dd      	beq.n	800afbc <__hexnan+0xd4>
 800b000:	f1c3 0320 	rsb	r3, r3, #32
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	40da      	lsrs	r2, r3
 800b00a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b00e:	4013      	ands	r3, r2
 800b010:	f846 3c04 	str.w	r3, [r6, #-4]
 800b014:	e7d2      	b.n	800afbc <__hexnan+0xd4>
 800b016:	3f04      	subs	r7, #4
 800b018:	e7d0      	b.n	800afbc <__hexnan+0xd4>
 800b01a:	2004      	movs	r0, #4
 800b01c:	e7d5      	b.n	800afca <__hexnan+0xe2>

0800b01e <__ascii_mbtowc>:
 800b01e:	b082      	sub	sp, #8
 800b020:	b901      	cbnz	r1, 800b024 <__ascii_mbtowc+0x6>
 800b022:	a901      	add	r1, sp, #4
 800b024:	b142      	cbz	r2, 800b038 <__ascii_mbtowc+0x1a>
 800b026:	b14b      	cbz	r3, 800b03c <__ascii_mbtowc+0x1e>
 800b028:	7813      	ldrb	r3, [r2, #0]
 800b02a:	600b      	str	r3, [r1, #0]
 800b02c:	7812      	ldrb	r2, [r2, #0]
 800b02e:	1e10      	subs	r0, r2, #0
 800b030:	bf18      	it	ne
 800b032:	2001      	movne	r0, #1
 800b034:	b002      	add	sp, #8
 800b036:	4770      	bx	lr
 800b038:	4610      	mov	r0, r2
 800b03a:	e7fb      	b.n	800b034 <__ascii_mbtowc+0x16>
 800b03c:	f06f 0001 	mvn.w	r0, #1
 800b040:	e7f8      	b.n	800b034 <__ascii_mbtowc+0x16>

0800b042 <_realloc_r>:
 800b042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b046:	4680      	mov	r8, r0
 800b048:	4615      	mov	r5, r2
 800b04a:	460c      	mov	r4, r1
 800b04c:	b921      	cbnz	r1, 800b058 <_realloc_r+0x16>
 800b04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b052:	4611      	mov	r1, r2
 800b054:	f7fd be60 	b.w	8008d18 <_malloc_r>
 800b058:	b92a      	cbnz	r2, 800b066 <_realloc_r+0x24>
 800b05a:	f7fd fde9 	bl	8008c30 <_free_r>
 800b05e:	2400      	movs	r4, #0
 800b060:	4620      	mov	r0, r4
 800b062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b066:	f000 f840 	bl	800b0ea <_malloc_usable_size_r>
 800b06a:	4285      	cmp	r5, r0
 800b06c:	4606      	mov	r6, r0
 800b06e:	d802      	bhi.n	800b076 <_realloc_r+0x34>
 800b070:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b074:	d8f4      	bhi.n	800b060 <_realloc_r+0x1e>
 800b076:	4629      	mov	r1, r5
 800b078:	4640      	mov	r0, r8
 800b07a:	f7fd fe4d 	bl	8008d18 <_malloc_r>
 800b07e:	4607      	mov	r7, r0
 800b080:	2800      	cmp	r0, #0
 800b082:	d0ec      	beq.n	800b05e <_realloc_r+0x1c>
 800b084:	42b5      	cmp	r5, r6
 800b086:	462a      	mov	r2, r5
 800b088:	4621      	mov	r1, r4
 800b08a:	bf28      	it	cs
 800b08c:	4632      	movcs	r2, r6
 800b08e:	f7ff fc45 	bl	800a91c <memcpy>
 800b092:	4621      	mov	r1, r4
 800b094:	4640      	mov	r0, r8
 800b096:	f7fd fdcb 	bl	8008c30 <_free_r>
 800b09a:	463c      	mov	r4, r7
 800b09c:	e7e0      	b.n	800b060 <_realloc_r+0x1e>

0800b09e <__ascii_wctomb>:
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	b141      	cbz	r1, 800b0b6 <__ascii_wctomb+0x18>
 800b0a4:	2aff      	cmp	r2, #255	@ 0xff
 800b0a6:	d904      	bls.n	800b0b2 <__ascii_wctomb+0x14>
 800b0a8:	228a      	movs	r2, #138	@ 0x8a
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	4770      	bx	lr
 800b0b2:	700a      	strb	r2, [r1, #0]
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	4770      	bx	lr

0800b0b8 <fiprintf>:
 800b0b8:	b40e      	push	{r1, r2, r3}
 800b0ba:	b503      	push	{r0, r1, lr}
 800b0bc:	4601      	mov	r1, r0
 800b0be:	ab03      	add	r3, sp, #12
 800b0c0:	4805      	ldr	r0, [pc, #20]	@ (800b0d8 <fiprintf+0x20>)
 800b0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c6:	6800      	ldr	r0, [r0, #0]
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	f000 f83f 	bl	800b14c <_vfiprintf_r>
 800b0ce:	b002      	add	sp, #8
 800b0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0d4:	b003      	add	sp, #12
 800b0d6:	4770      	bx	lr
 800b0d8:	2000019c 	.word	0x2000019c

0800b0dc <abort>:
 800b0dc:	b508      	push	{r3, lr}
 800b0de:	2006      	movs	r0, #6
 800b0e0:	f000 fa08 	bl	800b4f4 <raise>
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f7f7 fef5 	bl	8002ed4 <_exit>

0800b0ea <_malloc_usable_size_r>:
 800b0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ee:	1f18      	subs	r0, r3, #4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bfbc      	itt	lt
 800b0f4:	580b      	ldrlt	r3, [r1, r0]
 800b0f6:	18c0      	addlt	r0, r0, r3
 800b0f8:	4770      	bx	lr

0800b0fa <__sfputc_r>:
 800b0fa:	6893      	ldr	r3, [r2, #8]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	b410      	push	{r4}
 800b102:	6093      	str	r3, [r2, #8]
 800b104:	da08      	bge.n	800b118 <__sfputc_r+0x1e>
 800b106:	6994      	ldr	r4, [r2, #24]
 800b108:	42a3      	cmp	r3, r4
 800b10a:	db01      	blt.n	800b110 <__sfputc_r+0x16>
 800b10c:	290a      	cmp	r1, #10
 800b10e:	d103      	bne.n	800b118 <__sfputc_r+0x1e>
 800b110:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b114:	f000 b932 	b.w	800b37c <__swbuf_r>
 800b118:	6813      	ldr	r3, [r2, #0]
 800b11a:	1c58      	adds	r0, r3, #1
 800b11c:	6010      	str	r0, [r2, #0]
 800b11e:	7019      	strb	r1, [r3, #0]
 800b120:	4608      	mov	r0, r1
 800b122:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <__sfputs_r>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	4614      	mov	r4, r2
 800b130:	18d5      	adds	r5, r2, r3
 800b132:	42ac      	cmp	r4, r5
 800b134:	d101      	bne.n	800b13a <__sfputs_r+0x12>
 800b136:	2000      	movs	r0, #0
 800b138:	e007      	b.n	800b14a <__sfputs_r+0x22>
 800b13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13e:	463a      	mov	r2, r7
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff ffda 	bl	800b0fa <__sfputc_r>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	d1f3      	bne.n	800b132 <__sfputs_r+0xa>
 800b14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b14c <_vfiprintf_r>:
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	460d      	mov	r5, r1
 800b152:	b09d      	sub	sp, #116	@ 0x74
 800b154:	4614      	mov	r4, r2
 800b156:	4698      	mov	r8, r3
 800b158:	4606      	mov	r6, r0
 800b15a:	b118      	cbz	r0, 800b164 <_vfiprintf_r+0x18>
 800b15c:	6a03      	ldr	r3, [r0, #32]
 800b15e:	b90b      	cbnz	r3, 800b164 <_vfiprintf_r+0x18>
 800b160:	f7fc fde8 	bl	8007d34 <__sinit>
 800b164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b166:	07d9      	lsls	r1, r3, #31
 800b168:	d405      	bmi.n	800b176 <_vfiprintf_r+0x2a>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	059a      	lsls	r2, r3, #22
 800b16e:	d402      	bmi.n	800b176 <_vfiprintf_r+0x2a>
 800b170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b172:	f7fc ff08 	bl	8007f86 <__retarget_lock_acquire_recursive>
 800b176:	89ab      	ldrh	r3, [r5, #12]
 800b178:	071b      	lsls	r3, r3, #28
 800b17a:	d501      	bpl.n	800b180 <_vfiprintf_r+0x34>
 800b17c:	692b      	ldr	r3, [r5, #16]
 800b17e:	b99b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x5c>
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f000 f938 	bl	800b3f8 <__swsetup_r>
 800b188:	b170      	cbz	r0, 800b1a8 <_vfiprintf_r+0x5c>
 800b18a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b18c:	07dc      	lsls	r4, r3, #31
 800b18e:	d504      	bpl.n	800b19a <_vfiprintf_r+0x4e>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	b01d      	add	sp, #116	@ 0x74
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	0598      	lsls	r0, r3, #22
 800b19e:	d4f7      	bmi.n	800b190 <_vfiprintf_r+0x44>
 800b1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1a2:	f7fc fef1 	bl	8007f88 <__retarget_lock_release_recursive>
 800b1a6:	e7f3      	b.n	800b190 <_vfiprintf_r+0x44>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b6:	2330      	movs	r3, #48	@ 0x30
 800b1b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b368 <_vfiprintf_r+0x21c>
 800b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c0:	f04f 0901 	mov.w	r9, #1
 800b1c4:	4623      	mov	r3, r4
 800b1c6:	469a      	mov	sl, r3
 800b1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1cc:	b10a      	cbz	r2, 800b1d2 <_vfiprintf_r+0x86>
 800b1ce:	2a25      	cmp	r2, #37	@ 0x25
 800b1d0:	d1f9      	bne.n	800b1c6 <_vfiprintf_r+0x7a>
 800b1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d6:	d00b      	beq.n	800b1f0 <_vfiprintf_r+0xa4>
 800b1d8:	465b      	mov	r3, fp
 800b1da:	4622      	mov	r2, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ffa2 	bl	800b128 <__sfputs_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	f000 80a7 	beq.w	800b338 <_vfiprintf_r+0x1ec>
 800b1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1ec:	445a      	add	r2, fp
 800b1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 809f 	beq.w	800b338 <_vfiprintf_r+0x1ec>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b204:	f10a 0a01 	add.w	sl, sl, #1
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9307      	str	r3, [sp, #28]
 800b20c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b210:	931a      	str	r3, [sp, #104]	@ 0x68
 800b212:	4654      	mov	r4, sl
 800b214:	2205      	movs	r2, #5
 800b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21a:	4853      	ldr	r0, [pc, #332]	@ (800b368 <_vfiprintf_r+0x21c>)
 800b21c:	f7f5 f808 	bl	8000230 <memchr>
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	b9d8      	cbnz	r0, 800b25c <_vfiprintf_r+0x110>
 800b224:	06d1      	lsls	r1, r2, #27
 800b226:	bf44      	itt	mi
 800b228:	2320      	movmi	r3, #32
 800b22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b22e:	0713      	lsls	r3, r2, #28
 800b230:	bf44      	itt	mi
 800b232:	232b      	movmi	r3, #43	@ 0x2b
 800b234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b238:	f89a 3000 	ldrb.w	r3, [sl]
 800b23c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b23e:	d015      	beq.n	800b26c <_vfiprintf_r+0x120>
 800b240:	9a07      	ldr	r2, [sp, #28]
 800b242:	4654      	mov	r4, sl
 800b244:	2000      	movs	r0, #0
 800b246:	f04f 0c0a 	mov.w	ip, #10
 800b24a:	4621      	mov	r1, r4
 800b24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b250:	3b30      	subs	r3, #48	@ 0x30
 800b252:	2b09      	cmp	r3, #9
 800b254:	d94b      	bls.n	800b2ee <_vfiprintf_r+0x1a2>
 800b256:	b1b0      	cbz	r0, 800b286 <_vfiprintf_r+0x13a>
 800b258:	9207      	str	r2, [sp, #28]
 800b25a:	e014      	b.n	800b286 <_vfiprintf_r+0x13a>
 800b25c:	eba0 0308 	sub.w	r3, r0, r8
 800b260:	fa09 f303 	lsl.w	r3, r9, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	46a2      	mov	sl, r4
 800b26a:	e7d2      	b.n	800b212 <_vfiprintf_r+0xc6>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbb      	ittet	lt
 800b278:	425b      	neglt	r3, r3
 800b27a:	f042 0202 	orrlt.w	r2, r2, #2
 800b27e:	9307      	strge	r3, [sp, #28]
 800b280:	9307      	strlt	r3, [sp, #28]
 800b282:	bfb8      	it	lt
 800b284:	9204      	strlt	r2, [sp, #16]
 800b286:	7823      	ldrb	r3, [r4, #0]
 800b288:	2b2e      	cmp	r3, #46	@ 0x2e
 800b28a:	d10a      	bne.n	800b2a2 <_vfiprintf_r+0x156>
 800b28c:	7863      	ldrb	r3, [r4, #1]
 800b28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b290:	d132      	bne.n	800b2f8 <_vfiprintf_r+0x1ac>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d1a      	adds	r2, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9203      	str	r2, [sp, #12]
 800b29a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b29e:	3402      	adds	r4, #2
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b378 <_vfiprintf_r+0x22c>
 800b2a6:	7821      	ldrb	r1, [r4, #0]
 800b2a8:	2203      	movs	r2, #3
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f7f4 ffc0 	bl	8000230 <memchr>
 800b2b0:	b138      	cbz	r0, 800b2c2 <_vfiprintf_r+0x176>
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	eba0 000a 	sub.w	r0, r0, sl
 800b2b8:	2240      	movs	r2, #64	@ 0x40
 800b2ba:	4082      	lsls	r2, r0
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	3401      	adds	r4, #1
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	4829      	ldr	r0, [pc, #164]	@ (800b36c <_vfiprintf_r+0x220>)
 800b2c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2cc:	2206      	movs	r2, #6
 800b2ce:	f7f4 ffaf 	bl	8000230 <memchr>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d03f      	beq.n	800b356 <_vfiprintf_r+0x20a>
 800b2d6:	4b26      	ldr	r3, [pc, #152]	@ (800b370 <_vfiprintf_r+0x224>)
 800b2d8:	bb1b      	cbnz	r3, 800b322 <_vfiprintf_r+0x1d6>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	3307      	adds	r3, #7
 800b2de:	f023 0307 	bic.w	r3, r3, #7
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e8:	443b      	add	r3, r7
 800b2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2ec:	e76a      	b.n	800b1c4 <_vfiprintf_r+0x78>
 800b2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	e7a8      	b.n	800b24a <_vfiprintf_r+0xfe>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	4619      	mov	r1, r3
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4620      	mov	r0, r4
 800b306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30a:	3a30      	subs	r2, #48	@ 0x30
 800b30c:	2a09      	cmp	r2, #9
 800b30e:	d903      	bls.n	800b318 <_vfiprintf_r+0x1cc>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0c6      	beq.n	800b2a2 <_vfiprintf_r+0x156>
 800b314:	9105      	str	r1, [sp, #20]
 800b316:	e7c4      	b.n	800b2a2 <_vfiprintf_r+0x156>
 800b318:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31c:	4604      	mov	r4, r0
 800b31e:	2301      	movs	r3, #1
 800b320:	e7f0      	b.n	800b304 <_vfiprintf_r+0x1b8>
 800b322:	ab03      	add	r3, sp, #12
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	462a      	mov	r2, r5
 800b328:	4b12      	ldr	r3, [pc, #72]	@ (800b374 <_vfiprintf_r+0x228>)
 800b32a:	a904      	add	r1, sp, #16
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7fb fea9 	bl	8007084 <_printf_float>
 800b332:	4607      	mov	r7, r0
 800b334:	1c78      	adds	r0, r7, #1
 800b336:	d1d6      	bne.n	800b2e6 <_vfiprintf_r+0x19a>
 800b338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b33a:	07d9      	lsls	r1, r3, #31
 800b33c:	d405      	bmi.n	800b34a <_vfiprintf_r+0x1fe>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	059a      	lsls	r2, r3, #22
 800b342:	d402      	bmi.n	800b34a <_vfiprintf_r+0x1fe>
 800b344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b346:	f7fc fe1f 	bl	8007f88 <__retarget_lock_release_recursive>
 800b34a:	89ab      	ldrh	r3, [r5, #12]
 800b34c:	065b      	lsls	r3, r3, #25
 800b34e:	f53f af1f 	bmi.w	800b190 <_vfiprintf_r+0x44>
 800b352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b354:	e71e      	b.n	800b194 <_vfiprintf_r+0x48>
 800b356:	ab03      	add	r3, sp, #12
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	462a      	mov	r2, r5
 800b35c:	4b05      	ldr	r3, [pc, #20]	@ (800b374 <_vfiprintf_r+0x228>)
 800b35e:	a904      	add	r1, sp, #16
 800b360:	4630      	mov	r0, r6
 800b362:	f7fc f927 	bl	80075b4 <_printf_i>
 800b366:	e7e4      	b.n	800b332 <_vfiprintf_r+0x1e6>
 800b368:	0800bb51 	.word	0x0800bb51
 800b36c:	0800bb5b 	.word	0x0800bb5b
 800b370:	08007085 	.word	0x08007085
 800b374:	0800b129 	.word	0x0800b129
 800b378:	0800bb57 	.word	0x0800bb57

0800b37c <__swbuf_r>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	460e      	mov	r6, r1
 800b380:	4614      	mov	r4, r2
 800b382:	4605      	mov	r5, r0
 800b384:	b118      	cbz	r0, 800b38e <__swbuf_r+0x12>
 800b386:	6a03      	ldr	r3, [r0, #32]
 800b388:	b90b      	cbnz	r3, 800b38e <__swbuf_r+0x12>
 800b38a:	f7fc fcd3 	bl	8007d34 <__sinit>
 800b38e:	69a3      	ldr	r3, [r4, #24]
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	071a      	lsls	r2, r3, #28
 800b396:	d501      	bpl.n	800b39c <__swbuf_r+0x20>
 800b398:	6923      	ldr	r3, [r4, #16]
 800b39a:	b943      	cbnz	r3, 800b3ae <__swbuf_r+0x32>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f82a 	bl	800b3f8 <__swsetup_r>
 800b3a4:	b118      	cbz	r0, 800b3ae <__swbuf_r+0x32>
 800b3a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	6922      	ldr	r2, [r4, #16]
 800b3b2:	1a98      	subs	r0, r3, r2
 800b3b4:	6963      	ldr	r3, [r4, #20]
 800b3b6:	b2f6      	uxtb	r6, r6
 800b3b8:	4283      	cmp	r3, r0
 800b3ba:	4637      	mov	r7, r6
 800b3bc:	dc05      	bgt.n	800b3ca <__swbuf_r+0x4e>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f7ff fa47 	bl	800a854 <_fflush_r>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d1ed      	bne.n	800b3a6 <__swbuf_r+0x2a>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	701e      	strb	r6, [r3, #0]
 800b3d8:	6962      	ldr	r2, [r4, #20]
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d004      	beq.n	800b3ea <__swbuf_r+0x6e>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	07db      	lsls	r3, r3, #31
 800b3e4:	d5e1      	bpl.n	800b3aa <__swbuf_r+0x2e>
 800b3e6:	2e0a      	cmp	r6, #10
 800b3e8:	d1df      	bne.n	800b3aa <__swbuf_r+0x2e>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f7ff fa31 	bl	800a854 <_fflush_r>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0d9      	beq.n	800b3aa <__swbuf_r+0x2e>
 800b3f6:	e7d6      	b.n	800b3a6 <__swbuf_r+0x2a>

0800b3f8 <__swsetup_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4b29      	ldr	r3, [pc, #164]	@ (800b4a0 <__swsetup_r+0xa8>)
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	460c      	mov	r4, r1
 800b402:	b118      	cbz	r0, 800b40c <__swsetup_r+0x14>
 800b404:	6a03      	ldr	r3, [r0, #32]
 800b406:	b90b      	cbnz	r3, 800b40c <__swsetup_r+0x14>
 800b408:	f7fc fc94 	bl	8007d34 <__sinit>
 800b40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b410:	0719      	lsls	r1, r3, #28
 800b412:	d422      	bmi.n	800b45a <__swsetup_r+0x62>
 800b414:	06da      	lsls	r2, r3, #27
 800b416:	d407      	bmi.n	800b428 <__swsetup_r+0x30>
 800b418:	2209      	movs	r2, #9
 800b41a:	602a      	str	r2, [r5, #0]
 800b41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	f04f 30ff 	mov.w	r0, #4294967295
 800b426:	e033      	b.n	800b490 <__swsetup_r+0x98>
 800b428:	0758      	lsls	r0, r3, #29
 800b42a:	d512      	bpl.n	800b452 <__swsetup_r+0x5a>
 800b42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b42e:	b141      	cbz	r1, 800b442 <__swsetup_r+0x4a>
 800b430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b434:	4299      	cmp	r1, r3
 800b436:	d002      	beq.n	800b43e <__swsetup_r+0x46>
 800b438:	4628      	mov	r0, r5
 800b43a:	f7fd fbf9 	bl	8008c30 <_free_r>
 800b43e:	2300      	movs	r3, #0
 800b440:	6363      	str	r3, [r4, #52]	@ 0x34
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	2300      	movs	r3, #0
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f043 0308 	orr.w	r3, r3, #8
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	b94b      	cbnz	r3, 800b472 <__swsetup_r+0x7a>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b468:	d003      	beq.n	800b472 <__swsetup_r+0x7a>
 800b46a:	4621      	mov	r1, r4
 800b46c:	4628      	mov	r0, r5
 800b46e:	f000 f883 	bl	800b578 <__smakebuf_r>
 800b472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b476:	f013 0201 	ands.w	r2, r3, #1
 800b47a:	d00a      	beq.n	800b492 <__swsetup_r+0x9a>
 800b47c:	2200      	movs	r2, #0
 800b47e:	60a2      	str	r2, [r4, #8]
 800b480:	6962      	ldr	r2, [r4, #20]
 800b482:	4252      	negs	r2, r2
 800b484:	61a2      	str	r2, [r4, #24]
 800b486:	6922      	ldr	r2, [r4, #16]
 800b488:	b942      	cbnz	r2, 800b49c <__swsetup_r+0xa4>
 800b48a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b48e:	d1c5      	bne.n	800b41c <__swsetup_r+0x24>
 800b490:	bd38      	pop	{r3, r4, r5, pc}
 800b492:	0799      	lsls	r1, r3, #30
 800b494:	bf58      	it	pl
 800b496:	6962      	ldrpl	r2, [r4, #20]
 800b498:	60a2      	str	r2, [r4, #8]
 800b49a:	e7f4      	b.n	800b486 <__swsetup_r+0x8e>
 800b49c:	2000      	movs	r0, #0
 800b49e:	e7f7      	b.n	800b490 <__swsetup_r+0x98>
 800b4a0:	2000019c 	.word	0x2000019c

0800b4a4 <_raise_r>:
 800b4a4:	291f      	cmp	r1, #31
 800b4a6:	b538      	push	{r3, r4, r5, lr}
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	d904      	bls.n	800b4b8 <_raise_r+0x14>
 800b4ae:	2316      	movs	r3, #22
 800b4b0:	6003      	str	r3, [r0, #0]
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4ba:	b112      	cbz	r2, 800b4c2 <_raise_r+0x1e>
 800b4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4c0:	b94b      	cbnz	r3, 800b4d6 <_raise_r+0x32>
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f830 	bl	800b528 <_getpid_r>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4d2:	f000 b817 	b.w	800b504 <_kill_r>
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d00a      	beq.n	800b4f0 <_raise_r+0x4c>
 800b4da:	1c59      	adds	r1, r3, #1
 800b4dc:	d103      	bne.n	800b4e6 <_raise_r+0x42>
 800b4de:	2316      	movs	r3, #22
 800b4e0:	6003      	str	r3, [r0, #0]
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e7e7      	b.n	800b4b6 <_raise_r+0x12>
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4798      	blx	r3
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	e7e0      	b.n	800b4b6 <_raise_r+0x12>

0800b4f4 <raise>:
 800b4f4:	4b02      	ldr	r3, [pc, #8]	@ (800b500 <raise+0xc>)
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f7ff bfd3 	b.w	800b4a4 <_raise_r>
 800b4fe:	bf00      	nop
 800b500:	2000019c 	.word	0x2000019c

0800b504 <_kill_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d07      	ldr	r5, [pc, #28]	@ (800b524 <_kill_r+0x20>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	4611      	mov	r1, r2
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	f7f7 fccf 	bl	8002eb4 <_kill>
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	d102      	bne.n	800b520 <_kill_r+0x1c>
 800b51a:	682b      	ldr	r3, [r5, #0]
 800b51c:	b103      	cbz	r3, 800b520 <_kill_r+0x1c>
 800b51e:	6023      	str	r3, [r4, #0]
 800b520:	bd38      	pop	{r3, r4, r5, pc}
 800b522:	bf00      	nop
 800b524:	20000728 	.word	0x20000728

0800b528 <_getpid_r>:
 800b528:	f7f7 bcbc 	b.w	8002ea4 <_getpid>

0800b52c <__swhatbuf_r>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	460c      	mov	r4, r1
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	2900      	cmp	r1, #0
 800b536:	b096      	sub	sp, #88	@ 0x58
 800b538:	4615      	mov	r5, r2
 800b53a:	461e      	mov	r6, r3
 800b53c:	da0d      	bge.n	800b55a <__swhatbuf_r+0x2e>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b544:	f04f 0100 	mov.w	r1, #0
 800b548:	bf14      	ite	ne
 800b54a:	2340      	movne	r3, #64	@ 0x40
 800b54c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b550:	2000      	movs	r0, #0
 800b552:	6031      	str	r1, [r6, #0]
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	b016      	add	sp, #88	@ 0x58
 800b558:	bd70      	pop	{r4, r5, r6, pc}
 800b55a:	466a      	mov	r2, sp
 800b55c:	f000 f848 	bl	800b5f0 <_fstat_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	dbec      	blt.n	800b53e <__swhatbuf_r+0x12>
 800b564:	9901      	ldr	r1, [sp, #4]
 800b566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b56a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b56e:	4259      	negs	r1, r3
 800b570:	4159      	adcs	r1, r3
 800b572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b576:	e7eb      	b.n	800b550 <__swhatbuf_r+0x24>

0800b578 <__smakebuf_r>:
 800b578:	898b      	ldrh	r3, [r1, #12]
 800b57a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b57c:	079d      	lsls	r5, r3, #30
 800b57e:	4606      	mov	r6, r0
 800b580:	460c      	mov	r4, r1
 800b582:	d507      	bpl.n	800b594 <__smakebuf_r+0x1c>
 800b584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	6123      	str	r3, [r4, #16]
 800b58c:	2301      	movs	r3, #1
 800b58e:	6163      	str	r3, [r4, #20]
 800b590:	b003      	add	sp, #12
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	ab01      	add	r3, sp, #4
 800b596:	466a      	mov	r2, sp
 800b598:	f7ff ffc8 	bl	800b52c <__swhatbuf_r>
 800b59c:	9f00      	ldr	r7, [sp, #0]
 800b59e:	4605      	mov	r5, r0
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7fd fbb8 	bl	8008d18 <_malloc_r>
 800b5a8:	b948      	cbnz	r0, 800b5be <__smakebuf_r+0x46>
 800b5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ae:	059a      	lsls	r2, r3, #22
 800b5b0:	d4ee      	bmi.n	800b590 <__smakebuf_r+0x18>
 800b5b2:	f023 0303 	bic.w	r3, r3, #3
 800b5b6:	f043 0302 	orr.w	r3, r3, #2
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	e7e2      	b.n	800b584 <__smakebuf_r+0xc>
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	6020      	str	r0, [r4, #0]
 800b5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	9b01      	ldr	r3, [sp, #4]
 800b5ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5ce:	b15b      	cbz	r3, 800b5e8 <__smakebuf_r+0x70>
 800b5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f000 f81d 	bl	800b614 <_isatty_r>
 800b5da:	b128      	cbz	r0, 800b5e8 <__smakebuf_r+0x70>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	f043 0301 	orr.w	r3, r3, #1
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	431d      	orrs	r5, r3
 800b5ec:	81a5      	strh	r5, [r4, #12]
 800b5ee:	e7cf      	b.n	800b590 <__smakebuf_r+0x18>

0800b5f0 <_fstat_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d07      	ldr	r5, [pc, #28]	@ (800b610 <_fstat_r+0x20>)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	602b      	str	r3, [r5, #0]
 800b5fe:	f7f7 fcb9 	bl	8002f74 <_fstat>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	d102      	bne.n	800b60c <_fstat_r+0x1c>
 800b606:	682b      	ldr	r3, [r5, #0]
 800b608:	b103      	cbz	r3, 800b60c <_fstat_r+0x1c>
 800b60a:	6023      	str	r3, [r4, #0]
 800b60c:	bd38      	pop	{r3, r4, r5, pc}
 800b60e:	bf00      	nop
 800b610:	20000728 	.word	0x20000728

0800b614 <_isatty_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d06      	ldr	r5, [pc, #24]	@ (800b630 <_isatty_r+0x1c>)
 800b618:	2300      	movs	r3, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	4608      	mov	r0, r1
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	f7f7 fcb8 	bl	8002f94 <_isatty>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_isatty_r+0x1a>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_isatty_r+0x1a>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20000728 	.word	0x20000728

0800b634 <_init>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	bf00      	nop
 800b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63a:	bc08      	pop	{r3}
 800b63c:	469e      	mov	lr, r3
 800b63e:	4770      	bx	lr

0800b640 <_fini>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	bf00      	nop
 800b644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b646:	bc08      	pop	{r3}
 800b648:	469e      	mov	lr, r3
 800b64a:	4770      	bx	lr
