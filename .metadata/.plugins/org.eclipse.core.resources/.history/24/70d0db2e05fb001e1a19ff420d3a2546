/*
 * LED_Driver.c
 *
 *  Created on: Apr 9, 2024
 *      Author: Marko.Manic
 */


#include "LED_Driver.h"


// Define LED_StatusFSM if it's not already defined
typedef enum {
    // define your LED status states here
} LED_StatusFSM;

// Define the SingleLed struct


// Initialize SingleLed parameters
void CreateNewSingleLED(struct SingleLed* single_led_instance, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
    // Assign initial values to struct members
    single_led_instance->cnt_led_correct_on = 0;
    single_led_instance->cnt_led_incorrect_on = 0;
    single_led_instance->cnt_led_off = 0;

    single_led_instance->time_led_correct_on = 1000;    // 1 sec
    single_led_instance->time_led_incorrect_on = 500;   // 0.5 sec
    single_led_instance->time_led_off = 3000;           // 3 sec

    single_led_instance->led_start_flag = false;
    single_led_instance->led_overflow_flag = false;

    single_led_instance->led_state = false;
    single_led_instance->correct_led = false;

    single_led_instance->led_segment_flag = false;

    single_led_instance->ledStatus = LED_OFF;/* initialize your LED status state machine here */;

    single_led_instance->btn_last_state = GPIO_PIN_RESET; // Or whatever initial state is appropriate
    single_led_instance->active_state = GPIO_PIN_RESET;  // Or whatever initial state is appropriate

    single_led_instance->GPIOx = GPIOx;
    single_led_instance->GPIO_Pin = GPIO_Pin;
}

void DriveSignleLED(struct SingleLed* single_led_instance, bool* setState)
{
	TimerLED(&single_led_instance, &setState);
	if(*setState == true)
	{
		HAL_GPIO_WritePin(Led_out_GPIO_Port, Led_out_Pin, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(Led_out_GPIO_Port, Led_out_Pin, GPIO_PIN_RESET);
	}
}



// This function set initial state on pins
static void InitSegmentLED()
{
	HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);
}
/*
static void InitSingleLED()
{
	HAL_GPIO_WritePin(Led_out_GPIO_Port, Led_out_Pin, GPIO_PIN_RESET);
}
*/

// This function set properly state on pins
void DriveSegmentLED(struct SegmentLED* segment_led_instance, uint8_t LED_status)
{
	switch(LED_status)
	{
		case 0:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 1:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_SET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 2:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 3:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_SET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 4:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 5:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_RESET);

			break;

		case 6:

			HAL_GPIO_WritePin(low_green_led_GPIO_Port, low_green_led_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(mid_yellow_led1_GPIO_Port, mid_yellow_led1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(mid_yellow_led2_GPIO_Port, mid_yellow_led2_Pin, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(high_blue_led1_GPIO_Port, high_blue_led1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(high_blue_led2_GPIO_Port, high_blue_led2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(high_blue_led3_GPIO_Port, high_blue_led3_Pin, GPIO_PIN_SET);

			break;
	}
}


static void TimerLED(struct LED_Timer_Emulator* timer)
{
	if(timer->led_start_flag)
	{
		switch(ledStatus)
		{
			case LED_OFF:
				timer->cnt_led_off++;
				if((timer->cnt_led_off) >= (timer->time_led_off))
				{
					timer->led_overflow_flag = true;
					if(timer->correct_led)
					{
						ledStatus = LED_ON_CORECT;
					}else
					{
						ledStatus = LED_ON_INCORECT;
					}
					timer->cnt_led_off = 0;
					timer->led_overflow_flag = true;
					timer->led_state = true;
				}

				break;

			case LED_ON_CORECT:
				timer->cnt_led_correct_on++;
				if((timer->cnt_led_correct_on) >= (timer->time_led_correct_on))
				{
					timer->cnt_led_correct_on = 0;
					timer->led_overflow_flag = true;
					ledStatus = LED_OFF;
					timer->led_state = false;
				}
				break;

			case LED_ON_INCORECT:
				timer->cnt_led_incorrect_on++;
				if((timer->cnt_led_incorrect_on) >= (timer->time_led_incorrect_on))
				{
					timer->cnt_led_incorrect_on = 0;
					timer->led_overflow_flag = true;
					ledStatus = LED_OFF;
					timer->led_state = false;
				}

				break;
		}
	}
}

void HandlerLED(struct LED_Timer_Emulator* timer)
{
/////////////  System Indicator /////////////////////

    if((timer->led_start_flag) == true)
    {

        if((timer->led_overflow_flag) == true)
        {
            if((timer->led_state) == true)
            {
                DriveSignleLED(true);
            }
            else if((timer->led_state) == false)
            {
                DriveSignleLED(false);
            }
        }
    } else if((timer->led_start_flag) == false)
    {
        timer->led_state = false;
        timer->correct_led = false;
        timer->led_overflow_flag = false;

        timer->cnt_led_correct_on = 0;
        timer->cnt_led_incorrect_on = 0;
        timer->cnt_led_off = 0;
    }

/////////////  Pollution Indicator /////////////////////

    if((timer->led_segment_flag) == true)
    {
         DriveSegmentLED(ledStatus);
         timer->led_segment_flag = false;
    }
}

void InitLED()
{
	InitSegmentLED();
	InitSingleLED();
}
